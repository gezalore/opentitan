
sw/device/silicon_creator/mask_rom/mask_rom_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors      00000084  00008000  00008000  00001000  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .crt          00000166  00008084  00008084  00001084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000014a6  000081ec  000081ec  000011ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004ff  00009698  00009698  00002698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000008  10000000  00009b98  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000000  10000008  00009ba0  00003008  2**2
                  ALLOC
  6 .riscv.attributes 00000026  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007516  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000176a  00000000  00000000  0000a544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000080  00000000  00000000  0000bcae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004074  00000000  00000000  0000bd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cbf  00000000  00000000  0000fda2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00013a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003f08  00000000  00000000  00013d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005e0  00000000  00000000  00017c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .vectors:

00008000 <_mask_rom_interrupt_vector>:
_mask_rom_interrupt_vector():
    8000:	17c0006f          	j	817c <mask_rom_exception_handler>
    8004:	c0001073          	unimp
    8008:	c0001073          	unimp
    800c:	c0001073          	unimp
    8010:	c0001073          	unimp
    8014:	c0001073          	unimp
    8018:	c0001073          	unimp
    801c:	c0001073          	unimp
    8020:	c0001073          	unimp
    8024:	c0001073          	unimp
    8028:	c0001073          	unimp
    802c:	c0001073          	unimp
    8030:	c0001073          	unimp
    8034:	c0001073          	unimp
    8038:	c0001073          	unimp
    803c:	c0001073          	unimp
    8040:	c0001073          	unimp
    8044:	c0001073          	unimp
    8048:	c0001073          	unimp
    804c:	c0001073          	unimp
    8050:	c0001073          	unimp
    8054:	c0001073          	unimp
    8058:	c0001073          	unimp
    805c:	c0001073          	unimp
    8060:	c0001073          	unimp
    8064:	c0001073          	unimp
    8068:	c0001073          	unimp
    806c:	c0001073          	unimp
    8070:	c0001073          	unimp
    8074:	c0001073          	unimp
    8078:	c0001073          	unimp
    807c:	1080006f          	j	8184 <mask_rom_nmi_handler>
    8080:	0040006f          	j	8084 <_mask_rom_start_boot>

Disassembly of section .crt:

00008084 <_mask_rom_start_boot>:
_mask_rom_start_boot():
    8084:	72c5                	lui	t0,0xffff1
    8086:	88828293          	addi	t0,t0,-1912 # ffff0888 <_stack_end+0xeffd0888>
    808a:	3042b073          	csrc	mie,t0
    808e:	41160537          	lui	a0,0x41160
    8092:	4289                	li	t0,2
    8094:	00552c23          	sw	t0,24(a0) # 41160018 <_stack_end+0x31140018>
    8098:	41150537          	lui	a0,0x41150
    809c:	4285                	li	t0,1
    809e:	00552a23          	sw	t0,20(a0) # 41150014 <_stack_end+0x31130014>
    80a2:	41170537          	lui	a0,0x41170
    80a6:	42a5                	li	t0,9
    80a8:	00552a23          	sw	t0,20(a0) # 41170014 <_stack_end+0x31150014>
    80ac:	10018117          	auipc	sp,0x10018
    80b0:	f4410113          	addi	sp,sp,-188 # 1001fff0 <_stack_start+0x1ff0>
    80b4:	00000297          	auipc	t0,0x0
    80b8:	f4c28293          	addi	t0,t0,-180 # 8000 <_mask_rom_interrupt_vector>
    80bc:	ffc2f293          	andi	t0,t0,-4
    80c0:	0012e293          	ori	t0,t0,1
    80c4:	30529073          	csrw	mtvec,t0
    80c8:	4081                	li	ra,0
    80ca:	4181                	li	gp,0
    80cc:	4201                	li	tp,0
    80ce:	4281                	li	t0,0
    80d0:	4301                	li	t1,0
    80d2:	4381                	li	t2,0
    80d4:	4401                	li	s0,0
    80d6:	4481                	li	s1,0
    80d8:	4501                	li	a0,0
    80da:	4581                	li	a1,0
    80dc:	4601                	li	a2,0
    80de:	4681                	li	a3,0
    80e0:	4701                	li	a4,0
    80e2:	4781                	li	a5,0
    80e4:	4801                	li	a6,0
    80e6:	4881                	li	a7,0
    80e8:	4901                	li	s2,0
    80ea:	4981                	li	s3,0
    80ec:	4a01                	li	s4,0
    80ee:	4a81                	li	s5,0
    80f0:	4b01                	li	s6,0
    80f2:	4b81                	li	s7,0
    80f4:	4c01                	li	s8,0
    80f6:	4c81                	li	s9,0
    80f8:	4d01                	li	s10,0
    80fa:	4d81                	li	s11,0
    80fc:	4e01                	li	t3,0
    80fe:	4e81                	li	t4,0
    8100:	4f01                	li	t5,0
    8102:	4f81                	li	t6,0
    8104:	10000537          	lui	a0,0x10000
    8108:	100205b7          	lui	a1,0x10020
    810c:	00000097          	auipc	ra,0x0
    8110:	080080e7          	jalr	128(ra) # 818c <crt_section_clear>
    8114:	0fff8517          	auipc	a0,0xfff8
    8118:	eec50513          	addi	a0,a0,-276 # 10000000 <_data_start>
    811c:	0fff8597          	auipc	a1,0xfff8
    8120:	eec58593          	addi	a1,a1,-276 # 10000008 <_data_end>
    8124:	00002617          	auipc	a2,0x2
    8128:	a7460613          	addi	a2,a2,-1420 # 9b98 <_data_init_start>
    812c:	00000097          	auipc	ra,0x0
    8130:	084080e7          	jalr	132(ra) # 81b0 <crt_section_copy>
    8134:	0fff8517          	auipc	a0,0xfff8
    8138:	ed450513          	addi	a0,a0,-300 # 10000008 <_data_end>
    813c:	0fff8597          	auipc	a1,0xfff8
    8140:	ecc58593          	addi	a1,a1,-308 # 10000008 <_data_end>
    8144:	00000097          	auipc	ra,0x0
    8148:	048080e7          	jalr	72(ra) # 818c <crt_section_clear>
    814c:	4281                	li	t0,0
    814e:	4301                	li	t1,0
    8150:	4381                	li	t2,0
    8152:	4e01                	li	t3,0
    8154:	4e81                	li	t4,0
    8156:	4f01                	li	t5,0
    8158:	4f81                	li	t6,0
    815a:	4501                	li	a0,0
    815c:	4581                	li	a1,0
    815e:	4601                	li	a2,0
    8160:	4681                	li	a3,0
    8162:	4701                	li	a4,0
    8164:	4781                	li	a5,0
    8166:	4801                	li	a6,0
    8168:	4881                	li	a7,0
    816a:	0fff8197          	auipc	gp,0xfff8
    816e:	69618193          	addi	gp,gp,1686 # 10000800 <__global_pointer$>
    8172:	00000317          	auipc	t1,0x0
    8176:	07a30067          	jr	122(t1) # 81ec <mask_rom_boot>
	...

0000817c <mask_rom_exception_handler>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
    817c:	10500073          	wfi
mask_rom_exception_handler():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:24
#include "sw/device/silicon_creator/mask_rom/romextimage.h"
#include "sw/device/silicon_creator/mask_rom/sig_verify.h"

#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"

void mask_rom_exception_handler(void) { wait_for_interrupt(); }
    8180:	30200073          	mret

00008184 <mask_rom_nmi_handler>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
    8184:	10500073          	wfi
mask_rom_nmi_handler():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:25
void mask_rom_nmi_handler(void) { wait_for_interrupt(); }
    8188:	30200073          	mret

0000818c <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
    818c:	00b57e63          	bgeu	a0,a1,81a8 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
    8190:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
    8194:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
    8198:	00029b63          	bnez	t0,81ae <L_clear_error>

0000819c <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
    819c:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
    81a0:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
    81a2:	feb56de3          	bltu	a0,a1,819c <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
    81a6:	8082                	ret

000081a8 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
    81a8:	00b51363          	bne	a0,a1,81ae <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
    81ac:	8082                	ret

000081ae <L_clear_error>:
	...

000081b0 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
    81b0:	02b57963          	bgeu	a0,a1,81e2 <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
    81b4:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
    81b8:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
    81bc:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
    81c0:	02029463          	bnez	t0,81e8 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
    81c4:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
    81c8:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
    81cc:	0062ee63          	bltu	t0,t1,81e8 <L_copy_error>

000081d0 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
    81d0:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
    81d4:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
    81d6:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
    81da:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
    81dc:	feb56ae3          	bltu	a0,a1,81d0 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
    81e0:	8082                	ret

000081e2 <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
    81e2:	00b51363          	bne	a0,a1,81e8 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
    81e6:	8082                	ret

000081e8 <L_copy_error>:
	...

Disassembly of section .text:

000081ec <mask_rom_boot>:
mask_rom_boot():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:27

void mask_rom_boot(void) {
    81ec:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:29
  // Initialize pinmux configuration so we can use the UART.
  pinmux_init();
    81ee:	c686                	sw	ra,76(sp)
    81f0:	c4a2                	sw	s0,72(sp)
    81f2:	c2a6                	sw	s1,68(sp)
    81f4:	c0ca                	sw	s2,64(sp)
    81f6:	de4e                	sw	s3,60(sp)
    81f8:	dc52                	sw	s4,56(sp)
    81fa:	da56                	sw	s5,52(sp)
    81fc:	d85a                	sw	s6,48(sp)
    81fe:	792000ef          	jal	ra,8990 <pinmux_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:32

  // Configure UART0 as stdout.
  uart_init(kUartNCOValue);
    8202:	00002517          	auipc	a0,0x2
    8206:	83650513          	addi	a0,a0,-1994 # 9a38 <kUartNCOValue>
    820a:	4108                	lw	a0,0(a0)
    820c:	2a55                	jal	83c0 <uart_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:33
  base_set_stdout((buffer_sink_t){
    820e:	00000597          	auipc	a1,0x0
    8212:	23c58593          	addi	a1,a1,572 # 844a <uart_sink>
    8216:	4501                	li	a0,0
    8218:	7c0000ef          	jal	ra,89d8 <base_set_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:39
      .data = NULL,
      .sink = uart_sink,
  });

  // FIXME: what (if anything) should we print at startup?
  base_printf("MaskROM\r\n");
    821c:	00002517          	auipc	a0,0x2
    8220:	92850513          	addi	a0,a0,-1752 # 9b44 <__clz_tab+0x100>
    8224:	027000ef          	jal	ra,8a4a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:76
  // for ( current_rom_ext_manifest in rom_ext_manifests_to_try(boot_policy) ) {
  // // Boot Policy Module
  while (true) {
    // TODO: Should we load the entropy_reseed_interval from OTP?
    const uint16_t reseed_interval = 0x100;
    if (keymgr_init(reseed_interval) != kErrorOk) {
    8228:	10000513          	li	a0,256
    822c:	2861                	jal	82c4 <keymgr_init>
    822e:	73900413          	li	s0,1849
    8232:	08851463          	bne	a0,s0,82ba <mask_rom_boot+0xce>
    8236:	02c10913          	addi	s2,sp,44
    823a:	6541                	lui	a0,0x10
    823c:	c9050b13          	addi	s6,a0,-880 # fc90 <_chip_info_end+0x3c90>
    8240:	00c10a13          	addi	s4,sp,12
    8244:	00002a97          	auipc	s5,0x2
    8248:	938a8a93          	addi	s5,s5,-1736 # 9b7c <__clz_tab+0x138>
    824c:	00002997          	auipc	s3,0x2
    8250:	90298993          	addi	s3,s3,-1790 # 9b4e <__clz_tab+0x10a>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:94
    //    break
    //}

    const manifest_t *manifest;
    manifest_signed_region_t signed_region;
    if (romextimage_manifest_get(kFlashSlotA, &manifest) != kErrorOk) {
    8254:	4501                	li	a0,0
    8256:	85ca                	mv	a1,s2
    8258:	2dc5                	jal	8948 <romextimage_manifest_get>
    825a:	06851063          	bne	a0,s0,82ba <mask_rom_boot+0xce>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:97
      break;
    }
    if (manifest_signed_region_get(manifest, &signed_region) != kErrorOk) {
    825e:	5632                	lw	a2,44(sp)
manifest_signed_region_get():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/manifest.h:147
 * @param[out] signed_region Signed region of an image.
 * @return The result of the operation.
 */
inline rom_error_t manifest_signed_region_get(
    const manifest_t *manifest, manifest_signed_region_t *signed_region) {
  if (manifest->image_length < kManifestImageLengthMin ||
    8260:	18862583          	lw	a1,392(a2)
    8264:	c9058513          	addi	a0,a1,-880
    8268:	04ab6963          	bltu	s6,a0,82ba <mask_rom_boot+0xce>
mask_rom_boot():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:102
      break;
    }
    if (sigverify_rom_ext_signature_verify(
            signed_region.start, signed_region.length, &manifest->signature,
            manifest->modulus.data[0]) != kErrorOk) {
    826c:	1d062683          	lw	a3,464(a2)
    8270:	18860513          	addi	a0,a2,392
manifest_signed_region_get():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/manifest.h:153
      manifest->image_length > kManifestImageLengthMax) {
    return kErrorManifestInternal;
  }
  *signed_region = (manifest_signed_region_t){
      .start = &manifest->image_length,
      .length = manifest->image_length - offsetof(manifest_t, image_length),
    8274:	e7858593          	addi	a1,a1,-392
mask_rom_boot():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:101
            signed_region.start, signed_region.length, &manifest->signature,
    8278:	0621                	addi	a2,a2,8
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:100
    if (sigverify_rom_ext_signature_verify(
    827a:	2479                	jal	8508 <sigverify_rom_ext_signature_verify>
    827c:	02851f63          	bne	a0,s0,82ba <mask_rom_boot+0xce>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:136
    // CreatorRootKey (2.c.iv)
    // - This is only allowed to be done if we have verified the signature on
    //   the current ROM_EXT.
    // TODO(#5955): Switch to manifest in C struct format update this code to
    // use the sw binding and max key version fields from the manifest.
    uint32_t binding_value[8] = {0};
    8280:	02000613          	li	a2,32
    8284:	8552                	mv	a0,s4
    8286:	4581                	li	a1,0
    8288:	2429                	jal	8492 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:138
    uint32_t max_key_version = 0x1;
    if (keymgr_state_advance_to_creator(binding_value, max_key_version) !=
    828a:	4585                	li	a1,1
    828c:	8552                	mv	a0,s4
    828e:	28a5                	jal	8306 <keymgr_state_advance_to_creator>
    8290:	02851563          	bne	a0,s0,82ba <mask_rom_boot+0xce>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:153
    // PMP Region for ROM_EXT (2.c.v)
    // **Open Q:** Integration with Secure Boot Hardware
    // **Open Q:** Do we need to prevent access to Mask ROM after final jump?
    // pmp_unlock_rom_ext(); // Hardened Jump Module.

    if (keymgr_state_creator_check() != kErrorOk) {
    8294:	20e5                	jal	837c <keymgr_state_creator_check>
    8296:	00850563          	beq	a0,s0,82a0 <mask_rom_boot+0xb4>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:155
      // TODO(#6653): The keymgr lands in a disabled state with error code 0xe.
      base_printf("ERROR keymgr: Failed to reach creator state.\n");
    829a:	854e                	mv	a0,s3
    829c:	7ae000ef          	jal	ra,8a4a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:166
    // if (!final_jump_to_rom_ext(current_rom_ext_manifest)) { // Hardened Jump
    // Module
    if (true) {
      // Jump to ROM_EXT entry point.
      romextimage_entry_point *entry_point =
          (romextimage_entry_point *)manifest_entry_point_address_get(manifest);
    82a0:	5532                	lw	a0,44(sp)
manifest_entry_point_address_get():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/manifest.h:176
 * @return The entry point.
 */
inline uintptr_t manifest_entry_point_address_get(const manifest_t *manifest) {
  // FIXME: Remove this after adding the entry_point field.
  enum { kEntryPointOffset = 1152 };
  return (uintptr_t)manifest + kEntryPointOffset;
    82a2:	48050493          	addi	s1,a0,1152
mask_rom_boot():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:167
      base_printf("rom_ext_entry: %p\r\n", entry_point);
    82a6:	8556                	mv	a0,s5
    82a8:	85a6                	mv	a1,s1
    82aa:	7a0000ef          	jal	ra,8a4a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:168
      entry_point();
    82ae:	9482                	jalr	s1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:76
    if (keymgr_init(reseed_interval) != kErrorOk) {
    82b0:	10000513          	li	a0,256
    82b4:	2801                	jal	82c4 <keymgr_init>
    82b6:	f8850fe3          	beq	a0,s0,8254 <mask_rom_boot+0x68>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:182
    }
  }

  // Boot failed for all ROM_EXTs allowed by boot policy
  // boot_failed(boot_policy); // Boot Policy Module
  asm volatile("unimp");
    82ba:	0000                	unimp
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
    82bc:	10500073          	wfi
mask_rom_boot():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/mask_rom.c:183
  while (true) {
    82c0:	bff5                	j	82bc <mask_rom_boot+0xd0>
	...

000082c4 <keymgr_init>:
keymgr_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:64
  reg = bitfield_field32_write(reg, KEYMGR_CONTROL_OPERATION_FIELD,
                               KEYMGR_CONTROL_OPERATION_VALUE_ADVANCE);
  abs_mmio_write32(kBase + KEYMGR_CONTROL_REG_OFFSET, reg);
}

rom_error_t keymgr_init(uint16_t entropy_reseed_interval) {
    82c4:	411305b7          	lui	a1,0x41130
    82c8:	4685                	li	a3,1
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
 * @param addr the address to read from.
 * @return the read value.
 */
ABS_MMIO_WARN_UNUSED_RESULT
inline uint32_t abs_mmio_read32(uint32_t addr) {
  return *((volatile uint32_t *)addr);
    82ca:	0c45a703          	lw	a4,196(a1) # 411300c4 <_stack_end+0x311100c4>
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
 * @return Zero-extended `field` from `bitfield`.
 */
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_read(uint32_t bitfield,
                                      bitfield_field32_t field) {
  return (bitfield >> field.index) & field.mask;
    82ce:	00377613          	andi	a2,a4,3
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
 *
 * @param addr the address to write to.
 * @param value the value to write.
 */
inline void abs_mmio_write32(uint32_t addr, uint32_t value) {
  *((volatile uint32_t *)addr) = value;
    82d2:	0ce5a223          	sw	a4,196(a1)
check_expected_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:35
  } while (op_status_field == KEYMGR_OP_STATUS_STATUS_VALUE_WIP);
    82d6:	fed60ae3          	beq	a2,a3,82ca <keymgr_init+0x6>
    82da:	411305b7          	lui	a1,0x41130
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    82de:	0c85a683          	lw	a3,200(a1) # 411300c8 <_stack_end+0x311100c8>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    82e2:	0cd5a423          	sw	a3,200(a1)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    82e6:	0c05a703          	lw	a4,192(a1)
check_expected_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:42
  if (op_status_field == expected_status && error_code == 0u &&
    82ea:	8e55                	or	a2,a2,a3
    82ec:	8e59                	or	a2,a2,a4
    82ee:	c611                	beqz	a2,82fa <keymgr_init+0x36>
    82f0:	014d5537          	lui	a0,0x14d5
    82f4:	b0d50513          	addi	a0,a0,-1267 # 14d4b0d <_chip_info_end+0x14c8b0d>
keymgr_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:75
  abs_mmio_write32(kBase + KEYMGR_RESEED_INTERVAL_REG_OFFSET, reg);

  // Advance to INIT state.
  advance_state();
  return kErrorOk;
}
    82f8:	8082                	ret
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    82fa:	cdc8                	sw	a0,28(a1)
    82fc:	4505                	li	a0,1
    82fe:	c9c8                	sw	a0,20(a1)
    8300:	73900513          	li	a0,1849
keymgr_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:75
    8304:	8082                	ret

00008306 <keymgr_state_advance_to_creator>:
keymgr_state_advance_to_creator():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:78

rom_error_t keymgr_state_advance_to_creator(const uint32_t binding_value[8],
                                            uint32_t max_key_ver) {
    8306:	41130637          	lui	a2,0x41130
    830a:	4705                	li	a4,1
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    830c:	0c462783          	lw	a5,196(a2) # 411300c4 <_stack_end+0x311100c4>
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
    8310:	0037f693          	andi	a3,a5,3
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    8314:	0cf62223          	sw	a5,196(a2)
check_expected_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:35
  } while (op_status_field == KEYMGR_OP_STATUS_STATUS_VALUE_WIP);
    8318:	fee68ae3          	beq	a3,a4,830c <keymgr_state_advance_to_creator+0x6>
    831c:	41130637          	lui	a2,0x41130
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    8320:	0c862783          	lw	a5,200(a2) # 411300c8 <_stack_end+0x311100c8>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    8324:	0cf62423          	sw	a5,200(a2)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    8328:	0c062703          	lw	a4,192(a2)
    832c:	014d5637          	lui	a2,0x14d5
    8330:	4809                	li	a6,2
    8332:	b0d60613          	addi	a2,a2,-1267 # 14d4b0d <_chip_info_end+0x14c8b0d>
    8336:	05069163          	bne	a3,a6,8378 <keymgr_state_advance_to_creator+0x72>
    833a:	ef9d                	bnez	a5,8378 <keymgr_state_advance_to_creator+0x72>
    833c:	4685                	li	a3,1
    833e:	02d71d63          	bne	a4,a3,8378 <keymgr_state_advance_to_creator+0x72>
    8342:	4601                	li	a2,0
    8344:	411306b7          	lui	a3,0x41130
    8348:	02468693          	addi	a3,a3,36 # 41130024 <_stack_end+0x31110024>
    834c:	02000813          	li	a6,32
keymgr_state_advance_to_creator():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:89
  // by hardware upon a successful state transition.
  // FIXME: Consider using sec_mmio module for the following register writes.
  for (size_t i = 0; i < 8; ++i) {
    abs_mmio_write32(
        kBase + KEYMGR_SW_BINDING_0_REG_OFFSET + i * sizeof(uint32_t),
        binding_value[i]);
    8350:	00c507b3          	add	a5,a0,a2
    8354:	439c                	lw	a5,0(a5)
    8356:	00d60733          	add	a4,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:86
  for (size_t i = 0; i < 8; ++i) {
    835a:	0611                	addi	a2,a2,4
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    835c:	c31c                	sw	a5,0(a4)
keymgr_state_advance_to_creator():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:86
    835e:	ff0619e3          	bne	a2,a6,8350 <keymgr_state_advance_to_creator+0x4a>
    8362:	41130537          	lui	a0,0x41130
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
    8366:	02052023          	sw	zero,32(a0) # 41130020 <_stack_end+0x31110020>
    836a:	d56c                	sw	a1,108(a0)
    836c:	06052423          	sw	zero,104(a0)
    8370:	4585                	li	a1,1
    8372:	c94c                	sw	a1,20(a0)
    8374:	73900613          	li	a2,1849
keymgr_state_advance_to_creator():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:100
  abs_mmio_write32(kBase + KEYMGR_MAX_CREATOR_KEY_VER_REGWEN_REG_OFFSET, 0);

  // Advance to CREATOR_ROOT_KEY state.
  advance_state();
  return kErrorOk;
}
    8378:	8532                	mv	a0,a2
    837a:	8082                	ret

0000837c <keymgr_state_creator_check>:
keymgr_state_creator_check():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:102

rom_error_t keymgr_state_creator_check() {
    837c:	411305b7          	lui	a1,0x41130
    8380:	4605                	li	a2,1
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    8382:	0c45a683          	lw	a3,196(a1) # 411300c4 <_stack_end+0x311100c4>
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
    8386:	0036f513          	andi	a0,a3,3
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    838a:	0cd5a223          	sw	a3,196(a1)
check_expected_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:35
  } while (op_status_field == KEYMGR_OP_STATUS_STATUS_VALUE_WIP);
    838e:	fec50ae3          	beq	a0,a2,8382 <keymgr_state_creator_check+0x6>
    8392:	411305b7          	lui	a1,0x41130
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    8396:	0c85a603          	lw	a2,200(a1) # 411300c8 <_stack_end+0x311100c8>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    839a:	0cc5a423          	sw	a2,200(a1)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    839e:	0c05a583          	lw	a1,192(a1)
check_expected_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:42
  if (op_status_field == expected_status && error_code == 0u &&
    83a2:	00254513          	xori	a0,a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:43
      got_state == expected_state) {
    83a6:	0025c593          	xori	a1,a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:42
  if (op_status_field == expected_status && error_code == 0u &&
    83aa:	8d51                	or	a0,a0,a2
    83ac:	8dc9                	or	a1,a1,a0
    83ae:	73900513          	li	a0,1849
    83b2:	c589                	beqz	a1,83bc <keymgr_state_creator_check+0x40>
    83b4:	014d5537          	lui	a0,0x14d5
    83b8:	b0d50513          	addi	a0,a0,-1267 # 14d4b0d <_chip_info_end+0x14c8b0d>
keymgr_state_creator_check():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/keymgr.c:103
  return check_expected_state(KEYMGR_WORKING_STATE_STATE_VALUE_CREATOR_ROOT_KEY,
    83bc:	8082                	ret
	...

000083c0 <uart_init>:
uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:38
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_STATE_REG_OFFSET,
                   UINT32_MAX);
}

rom_error_t uart_init(uint32_t precalculated_nco) {
  if (precalculated_nco == 0 || precalculated_nco & ~UART_CTRL_NCO_MASK) {
    83c0:	fff50593          	addi	a1,a0,-1
    83c4:	6641                	lui	a2,0x10
    83c6:	1679                	addi	a2,a2,-2
    83c8:	00b67763          	bgeu	a2,a1,83d6 <uart_init+0x16>
    83cc:	01415537          	lui	a0,0x1415
    83d0:	50350513          	addi	a0,a0,1283 # 1415503 <_chip_info_end+0x1409503>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:56

  // Disable interrupts.
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_ENABLE_REG_OFFSET,
                   0u);
  return kErrorOk;
}
    83d4:	8082                	ret
    83d6:	400005b7          	lui	a1,0x40000
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    83da:	0005a623          	sw	zero,12(a1) # 4000000c <_stack_end+0x2ffe000c>
    83de:	460d                	li	a2,3
    83e0:	cdd0                	sw	a2,28(a1)
    83e2:	0205a223          	sw	zero,36(a1)
    83e6:	0205a623          	sw	zero,44(a1)
    83ea:	0005a223          	sw	zero,4(a1)
    83ee:	567d                	li	a2,-1
    83f0:	c190                	sw	a2,0(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
    83f2:	0542                	slli	a0,a0,0x10
    83f4:	00156513          	ori	a0,a0,1
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
    83f8:	c5c8                	sw	a0,12(a1)
    83fa:	0005a223          	sw	zero,4(a1)
    83fe:	73900513          	li	a0,1849
uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:56
    8402:	8082                	ret

00008404 <uart_putchar>:
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:70
  uint32_t reg =
      abs_mmio_read32(TOP_EARLGREY_UART0_BASE_ADDR + UART_STATUS_REG_OFFSET);
  return bitfield_bit32_read(reg, UART_STATUS_TXIDLE_BIT);
}

void uart_putchar(uint8_t byte) {
    8404:	400005b7          	lui	a1,0x40000
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    8408:	4990                	lw	a2,16(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    840a:	8a05                	andi	a2,a2,1
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:72
  // If the transmit FIFO is full, wait.
  while (uart_tx_full()) {
    840c:	fe75                	bnez	a2,8408 <uart_putchar+0x4>
    840e:	400005b7          	lui	a1,0x40000
    8412:	01858613          	addi	a2,a1,24 # 40000018 <_stack_end+0x2ffe0018>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    8416:	c208                	sw	a0,0(a2)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    8418:	4988                	lw	a0,16(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    841a:	8921                	andi	a0,a0,8
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:78
  }
  uint32_t reg = bitfield_field32_write(0, UART_WDATA_WDATA_FIELD, byte);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_WDATA_REG_OFFSET, reg);

  // If the transmitter is active, wait.
  while (!uart_tx_idle()) {
    841c:	dd75                	beqz	a0,8418 <uart_putchar+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:80
  }
}
    841e:	8082                	ret

00008420 <uart_write>:
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:85

/**
 * Write `len` bytes to the UART TX FIFO.
 */
size_t uart_write(const uint8_t *data, size_t len) {
    8420:	882e                	mv	a6,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  size_t total = len;
  while (len) {
    8422:	c195                	beqz	a1,8446 <uart_write+0x26>
    8424:	40000637          	lui	a2,0x40000
    8428:	01860693          	addi	a3,a2,24 # 40000018 <_stack_end+0x2ffe0018>
    842c:	8742                	mv	a4,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:88
    uart_putchar(*data);
    842e:	00054783          	lbu	a5,0(a0)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
    8432:	4a0c                	lw	a1,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    8434:	8985                	andi	a1,a1,1
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:72
  while (uart_tx_full()) {
    8436:	fdf5                	bnez	a1,8432 <uart_write+0x12>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    8438:	c29c                	sw	a5,0(a3)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    843a:	4a0c                	lw	a1,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    843c:	89a1                	andi	a1,a1,8
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:78
  while (!uart_tx_idle()) {
    843e:	ddf5                	beqz	a1,843a <uart_write+0x1a>
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:90
    data++;
    len--;
    8440:	177d                	addi	a4,a4,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:89
    data++;
    8442:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  while (len) {
    8444:	f76d                	bnez	a4,842e <uart_write+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:92
  }
  return total;
    8446:	8542                	mv	a0,a6
    8448:	8082                	ret

0000844a <uart_sink>:
uart_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:95
}

size_t uart_sink(void *uart, const char *data, size_t len) {
    844a:	8532                	mv	a0,a2
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  while (len) {
    844c:	c21d                	beqz	a2,8472 <uart_sink+0x28>
    844e:	40000637          	lui	a2,0x40000
    8452:	01860813          	addi	a6,a2,24 # 40000018 <_stack_end+0x2ffe0018>
    8456:	872a                	mv	a4,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:88
    uart_putchar(*data);
    8458:	0005c783          	lbu	a5,0(a1)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
    845c:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    845e:	8a85                	andi	a3,a3,1
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:72
  while (uart_tx_full()) {
    8460:	fef5                	bnez	a3,845c <uart_sink+0x12>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    8462:	00f82023          	sw	a5,0(a6)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    8466:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    8468:	8aa1                	andi	a3,a3,8
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:78
  while (!uart_tx_idle()) {
    846a:	def5                	beqz	a3,8466 <uart_sink+0x1c>
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:90
    len--;
    846c:	177d                	addi	a4,a4,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:89
    data++;
    846e:	0585                	addi	a1,a1,1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  while (len) {
    8470:	f765                	bnez	a4,8458 <uart_sink+0xe>
uart_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:97
  (void)uart;
  return uart_write((const uint8_t *)data, len);
    8472:	8082                	ret

00008474 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
    8474:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
    8476:	8082                	ret

00008478 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
    8478:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
    847a:	8082                	ret

0000847c <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
    847c:	ca11                	beqz	a2,8490 <memcpy+0x14>
    847e:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
    8480:	00058703          	lb	a4,0(a1)
    8484:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
    8488:	167d                	addi	a2,a2,-1
    848a:	0685                	addi	a3,a3,1
    848c:	0585                	addi	a1,a1,1
    848e:	fa6d                	bnez	a2,8480 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
    8490:	8082                	ret

00008492 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
    8492:	c619                	beqz	a2,84a0 <memset+0xe>
    8494:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
    8496:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
    849a:	167d                	addi	a2,a2,-1
    849c:	0685                	addi	a3,a3,1
    849e:	fe65                	bnez	a2,8496 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
    84a0:	8082                	ret

000084a2 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
    84a2:	ce09                	beqz	a2,84bc <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
    84a4:	00054683          	lbu	a3,0(a0)
    84a8:	0005c703          	lbu	a4,0(a1)
    84ac:	00e6ea63          	bltu	a3,a4,84c0 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
    84b0:	00d76b63          	bltu	a4,a3,84c6 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
    84b4:	167d                	addi	a2,a2,-1
    84b6:	0585                	addi	a1,a1,1
    84b8:	0505                	addi	a0,a0,1
    84ba:	f66d                	bnez	a2,84a4 <memcmp+0x2>
    84bc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
    84be:	8082                	ret
    84c0:	fd600513          	li	a0,-42
    84c4:	8082                	ret
    84c6:	02a00513          	li	a0,42
    84ca:	8082                	ret

000084cc <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
    84cc:	ca11                	beqz	a2,84e0 <memchr+0x14>
    84ce:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
    84d2:	00054683          	lbu	a3,0(a0)
    84d6:	00b68663          	beq	a3,a1,84e2 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
    84da:	167d                	addi	a2,a2,-1
    84dc:	0505                	addi	a0,a0,1
    84de:	fa75                	bnez	a2,84d2 <memchr+0x6>
    84e0:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
    84e2:	8082                	ret

000084e4 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
    84e4:	ce09                	beqz	a2,84fe <memrchr+0x1a>
    84e6:	fff50693          	addi	a3,a0,-1
    84ea:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
    84ee:	00c68733          	add	a4,a3,a2
    84f2:	00074703          	lbu	a4,0(a4)
    84f6:	00b70663          	beq	a4,a1,8502 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
    84fa:	167d                	addi	a2,a2,-1
    84fc:	fa6d                	bnez	a2,84ee <memrchr+0xa>
    84fe:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
    8500:	8082                	ret
    8502:	9532                	add	a0,a0,a2
    8504:	157d                	addi	a0,a0,-1
    8506:	8082                	ret

00008508 <sigverify_rom_ext_signature_verify>:
sigverify_rom_ext_signature_verify():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:94
  return kErrorOk;
}

rom_error_t sigverify_rom_ext_signature_verify(
    const void *signed_region, size_t signed_region_len,
    const sigverify_rsa_buffer_t *signature, uint32_t key_id) {
    8508:	7121                	addi	sp,sp,-448
    850a:	1a112e23          	sw	ra,444(sp)
    850e:	1a812c23          	sw	s0,440(sp)
    8512:	1a912a23          	sw	s1,436(sp)
    8516:	1b212823          	sw	s2,432(sp)
    851a:	1b312623          	sw	s3,428(sp)
    851e:	84b6                	mv	s1,a3
    8520:	8932                	mv	s2,a2
    8522:	89ae                	mv	s3,a1
    8524:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:96
  hmac_digest_t act_digest;
  hmac_sha256_init();
    8526:	543000ef          	jal	ra,9268 <hmac_sha256_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:97
  RETURN_IF_ERROR(hmac_sha256_update(signed_region, signed_region_len));
    852a:	8522                	mv	a0,s0
    852c:	85ce                	mv	a1,s3
    852e:	555000ef          	jal	ra,9282 <hmac_sha256_update>
    8532:	73900993          	li	s3,1849
    8536:	842a                	mv	s0,a0
    8538:	0b351163          	bne	a0,s3,85da <sigverify_rom_ext_signature_verify+0xd2>
    853c:	0328                	addi	a0,sp,392
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:98
  RETURN_IF_ERROR(hmac_sha256_final(&act_digest));
    853e:	5ad000ef          	jal	ra,92ea <hmac_sha256_final>
    8542:	842a                	mv	s0,a0
    8544:	09351b63          	bne	a0,s3,85da <sigverify_rom_ext_signature_verify+0xd2>
    8548:	4501                	li	a0,0
    854a:	18800593          	li	a1,392
    854e:	00001617          	auipc	a2,0x1
    8552:	15e60613          	addi	a2,a2,350 # 96ac <kSigVerifyRsaKeys>
    8556:	015656b7          	lui	a3,0x1565
    855a:	30368413          	addi	s0,a3,771 # 1565303 <_chip_info_end+0x1559303>
    855e:	86aa                	mv	a3,a0
sigverify_rsa_key_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:25
    const sigverify_rsa_key_t *cand_key = &kSigVerifyRsaKeys[i];
    8560:	02b50533          	mul	a0,a0,a1
    8564:	9532                	add	a0,a0,a2
sigverify_rsa_key_id_get():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/mask_rom/sig_verify_keys.h:76
 *
 * @param key An RSA public key.
 * @return ID of the key.
 */
inline uint32_t sigverify_rsa_key_id_get(const sigverify_rsa_key_t *key) {
  return key->n.data[0];
    8566:	4118                	lw	a4,0(a0)
sigverify_rsa_key_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:26
    if (sigverify_rsa_key_id_get(cand_key) == key_id) {
    8568:	00970563          	beq	a4,s1,8572 <sigverify_rom_ext_signature_verify+0x6a>
    856c:	4505                	li	a0,1
    856e:	dae5                	beqz	a3,855e <sigverify_rom_ext_signature_verify+0x56>
    8570:	a0ad                	j	85da <sigverify_rom_ext_signature_verify+0xd2>
    8572:	0030                	addi	a2,sp,8
sigverify_rom_ext_signature_verify():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:107
  RETURN_IF_ERROR(sigverify_rsa_key_get(key_id, &key));

  // TODO(#21): Choose between Ibex and OTBN using OTP.
  // TODO(#18): OTBN modular exponentiation.
  sigverify_rsa_buffer_t enc_msg;
  if (!sigverify_mod_exp_ibex(key, signature, &enc_msg)) {
    8574:	85ca                	mv	a1,s2
    8576:	24e9                	jal	8840 <sigverify_mod_exp_ibex>
    8578:	015655b7          	lui	a1,0x1565
    857c:	30358413          	addi	s0,a1,771 # 1565303 <_chip_info_end+0x1559303>
    8580:	cd29                	beqz	a0,85da <sigverify_rom_ext_signature_verify+0xd2>
    8582:	0024                	addi	s1,sp,8
    8584:	032c                	addi	a1,sp,392
sigverify_padding_and_digest_check():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:60
  if (memcmp(enc_msg_ptr, act_digest->digest, sizeof(act_digest->digest)) !=
    8586:	02000613          	li	a2,32
    858a:	8526                	mv	a0,s1
    858c:	3f19                	jal	84a2 <memcmp>
    858e:	e531                	bnez	a0,85da <sigverify_rom_ext_signature_verify+0xd2>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:64
  enc_msg_ptr += ARRAYSIZE(act_digest->digest);
    8590:	1028                	addi	a0,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:70
  if (memcmp(enc_msg_ptr, kEncodedSha256, sizeof(kEncodedSha256)) != 0) {
    8592:	00001597          	auipc	a1,0x1
    8596:	10658593          	addi	a1,a1,262 # 9698 <sigverify_padding_and_digest_check.kEncodedSha256>
    859a:	4651                	li	a2,20
    859c:	3719                	jal	84a2 <memcmp>
    859e:	e915                	bnez	a0,85d2 <sigverify_rom_ext_signature_verify+0xca>
    85a0:	557d                	li	a0,-1
    85a2:	03400593          	li	a1,52
    85a6:	17c00613          	li	a2,380
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:81
    padding &= *enc_msg_ptr++;
    85aa:	00b486b3          	add	a3,s1,a1
    85ae:	4294                	lw	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:80
  for (size_t i = 0; i < kPsLen; ++i) {
    85b0:	0591                	addi	a1,a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:81
    padding &= *enc_msg_ptr++;
    85b2:	8d75                	and	a0,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:80
  for (size_t i = 0; i < kPsLen; ++i) {
    85b4:	fec59be3          	bne	a1,a2,85aa <sigverify_rom_ext_signature_verify+0xa2>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:84
  res |= *enc_msg_ptr ^ 0x0001ffff;
    85b8:	18412583          	lw	a1,388(sp)
    85bc:	00020637          	lui	a2,0x20
    85c0:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:85
  if (res != 0) {
    85c2:	8db1                	xor	a1,a1,a2
    85c4:	fff54513          	not	a0,a0
    85c8:	8d4d                	or	a0,a0,a1
    85ca:	e501                	bnez	a0,85d2 <sigverify_rom_ext_signature_verify+0xca>
    85cc:	73900413          	li	s0,1849
    85d0:	a029                	j	85da <sigverify_rom_ext_signature_verify+0xd2>
    85d2:	01565537          	lui	a0,0x1565
    85d6:	30350413          	addi	s0,a0,771 # 1565303 <_chip_info_end+0x1559303>
sigverify_rom_ext_signature_verify():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/sig_verify.c:113
    return kErrorSigverifyInvalidArgument;
  }
  RETURN_IF_ERROR(sigverify_padding_and_digest_check(&enc_msg, &act_digest));

  return kErrorOk;
}
    85da:	8522                	mv	a0,s0
    85dc:	1ac12983          	lw	s3,428(sp)
    85e0:	1b012903          	lw	s2,432(sp)
    85e4:	1b412483          	lw	s1,436(sp)
    85e8:	1b812403          	lw	s0,440(sp)
    85ec:	1bc12083          	lw	ra,444(sp)
    85f0:	6139                	addi	sp,sp,448
    85f2:	8082                	ret

000085f4 <calc_r_square>:
calc_r_square():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:78
 *
 * @param key An RSA public key.
 * @param[out] result Buffer to write the result to, little-endian.
 */
void calc_r_square(const sigverify_rsa_key_t *key,
                   sigverify_rsa_buffer_t *result) {
    85f4:	1141                	addi	sp,sp,-16
    85f6:	c606                	sw	ra,12(sp)
    85f8:	c422                	sw	s0,8(sp)
    85fa:	c226                	sw	s1,4(sp)
    85fc:	c04a                	sw	s2,0(sp)
    85fe:	842e                	mv	s0,a1
    8600:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:79
  memset(result->data, 0, sizeof(result->data));
    8602:	18000613          	li	a2,384
    8606:	18000913          	li	s2,384
    860a:	852e                	mv	a0,a1
    860c:	4581                	li	a1,0
    860e:	3551                	jal	8492 <memset>
subtract_modulus():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    8610:	4088                	lw	a0,0(s1)
    8612:	4701                	li	a4,0
    8614:	4681                	li	a3,0
    8616:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    8618:	40a005b3          	neg	a1,a0
    861c:	c00c                	sw	a1,0(s0)
    861e:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    8620:	00a73733          	sltu	a4,a4,a0
    8624:	00d636b3          	sltu	a3,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    8628:	00b407b3          	add	a5,s0,a1
    862c:	4390                	lw	a2,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    862e:	00b48533          	add	a0,s1,a1
    8632:	4108                	lw	a0,0(a0)
    8634:	96ba                	add	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    8636:	40d60733          	sub	a4,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    863a:	40a70833          	sub	a6,a4,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:25
  for (size_t i = 0; i < ARRAYSIZE(a->data); ++i) {
    863e:	0591                	addi	a1,a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    8640:	0107a023          	sw	a6,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:25
  for (size_t i = 0; i < ARRAYSIZE(a->data); ++i) {
    8644:	fd259ee3          	bne	a1,s2,8620 <calc_r_square+0x2c>
    8648:	4881                	li	a7,0
calc_r_square():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:85
  // Since R/2 < n < R, this subtraction ensures that result = R mod n and
  // fits in `kSigVerifyRsaNumWords` going into the loop.
  subtract_modulus(key, result);

  // Iteratively shift and reduce `result`.
  for (size_t i = 0; i < kSigVerifyRsaNumBits; ++i) {
    864a:	17c48313          	addi	t1,s1,380
    864e:	17c40393          	addi	t2,s0,380
    8652:	e8400293          	li	t0,-380
    8656:	05f00e13          	li	t3,95
    865a:	6505                	lui	a0,0x1
    865c:	c0050813          	addi	a6,a0,-1024 # c00 <_chip_info_size+0xb80>
    8660:	18000f13          	li	t5,384
shift_left():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:63
  const uint32_t msb = a->data[ARRAYSIZE(a->data) - 1] >> 31;
    8664:	17c42e83          	lw	t4,380(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:65
    a->data[i] = (a->data[i] << 1) | (a->data[i - 1] >> 31);
    8668:	4581                	li	a1,0
    866a:	8676                	mv	a2,t4
    866c:	00b406b3          	add	a3,s0,a1
    8670:	00161713          	slli	a4,a2,0x1
    8674:	1786a603          	lw	a2,376(a3)
    8678:	01f65513          	srli	a0,a2,0x1f
    867c:	8d59                	or	a0,a0,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:64
  for (size_t i = ARRAYSIZE(a->data) - 1; i > 0; --i) {
    867e:	15f1                	addi	a1,a1,-4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:65
    a->data[i] = (a->data[i] << 1) | (a->data[i - 1] >> 31);
    8680:	16a6ae23          	sw	a0,380(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:64
  for (size_t i = ARRAYSIZE(a->data) - 1; i > 0; --i) {
    8684:	fe5594e3          	bne	a1,t0,866c <calc_r_square+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:67
  a->data[0] <<= 1;
    8688:	4008                	lw	a0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:63
  const uint32_t msb = a->data[ARRAYSIZE(a->data) - 1] >> 31;
    868a:	01fede93          	srli	t4,t4,0x1f
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:67
  a->data[0] <<= 1;
    868e:	0506                	slli	a0,a0,0x1
    8690:	c008                	sw	a0,0(s0)
calc_r_square():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:89
    uint32_t msb = shift_left(result);
    // Reduce until result < n. Doing this at every iteration minimizes the
    // total number of subtractions that we need to perform.
    while (msb > 0 || greater_equal_modulus(key, result)) {
    8692:	020e9263          	bnez	t4,86b6 <calc_r_square+0xc2>
    8696:	05f00693          	li	a3,95
    869a:	861e                	mv	a2,t2
    869c:	859a                	mv	a1,t1
greater_equal_modulus():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:46
    if (a->data[i] != key->n.data[i]) {
    869e:	4218                	lw	a4,0(a2)
    86a0:	4188                	lw	a0,0(a1)
    86a2:	00a71863          	bne	a4,a0,86b2 <calc_r_square+0xbe>
    86a6:	16fd                	addi	a3,a3,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:45
  for (size_t i = ARRAYSIZE(a->data) - 1; i < ARRAYSIZE(a->data); --i) {
    86a8:	15f1                	addi	a1,a1,-4
    86aa:	1671                	addi	a2,a2,-4
    86ac:	fede79e3          	bgeu	t3,a3,869e <calc_r_square+0xaa>
    86b0:	a019                	j	86b6 <calc_r_square+0xc2>
calc_r_square():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:89
    while (msb > 0 || greater_equal_modulus(key, result)) {
    86b2:	02e57c63          	bgeu	a0,a4,86ea <calc_r_square+0xf6>
    86b6:	4581                	li	a1,0
    86b8:	4601                	li	a2,0
subtract_modulus():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    86ba:	00b40533          	add	a0,s0,a1
    86be:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    86c0:	00b48733          	add	a4,s1,a1
    86c4:	4318                	lw	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    86c6:	40c687b3          	sub	a5,a3,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    86ca:	00c6b633          	sltu	a2,a3,a2
    86ce:	00e7b6b3          	sltu	a3,a5,a4
    86d2:	9636                	add	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    86d4:	40e786b3          	sub	a3,a5,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:25
  for (size_t i = 0; i < ARRAYSIZE(a->data); ++i) {
    86d8:	0591                	addi	a1,a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    86da:	c114                	sw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:25
  for (size_t i = 0; i < ARRAYSIZE(a->data); ++i) {
    86dc:	fde59fe3          	bne	a1,t5,86ba <calc_r_square+0xc6>
calc_r_square():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:90
      msb -= subtract_modulus(key, result);
    86e0:	40ce8eb3          	sub	t4,t4,a2
    86e4:	fc0e99e3          	bnez	t4,86b6 <calc_r_square+0xc2>
    86e8:	b77d                	j	8696 <calc_r_square+0xa2>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:85
  for (size_t i = 0; i < kSigVerifyRsaNumBits; ++i) {
    86ea:	0885                	addi	a7,a7,1
    86ec:	f7089ce3          	bne	a7,a6,8664 <calc_r_square+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:93
    }
  }
}
    86f0:	4902                	lw	s2,0(sp)
    86f2:	4492                	lw	s1,4(sp)
    86f4:	4422                	lw	s0,8(sp)
    86f6:	40b2                	lw	ra,12(sp)
    86f8:	0141                	addi	sp,sp,16
    86fa:	8082                	ret

000086fc <mont_mul>:
mont_mul():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:104
// 		2.1. u_i = (result_0 + x_i * y_0) * m' mod b
// 		2.2. result = (result + x_i * y + u_i * m) / b
// 3. If result >= m then result = result - m
// 4. Return result
void mont_mul(const sigverify_rsa_key_t *key, const sigverify_rsa_buffer_t *x,
              const sigverify_rsa_buffer_t *y, sigverify_rsa_buffer_t *result) {
    86fc:	7179                	addi	sp,sp,-48
    86fe:	d606                	sw	ra,44(sp)
    8700:	d422                	sw	s0,40(sp)
    8702:	d226                	sw	s1,36(sp)
    8704:	d04a                	sw	s2,32(sp)
    8706:	ce4e                	sw	s3,28(sp)
    8708:	cc52                	sw	s4,24(sp)
    870a:	ca56                	sw	s5,20(sp)
    870c:	c85a                	sw	s6,16(sp)
    870e:	c65e                	sw	s7,12(sp)
    8710:	8bb6                	mv	s7,a3
    8712:	89b2                	mv	s3,a2
    8714:	892e                	mv	s2,a1
    8716:	8b2a                	mv	s6,a0
    8718:	5a7d                	li	s4,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:105
  memset(result->data, 0, sizeof(result->data));
    871a:	18000613          	li	a2,384
    871e:	18000a93          	li	s5,384
    8722:	8536                	mv	a0,a3
    8724:	4581                	li	a1,0
    8726:	33b5                	jal	8492 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:118
    // and `acc1`. `acc0` and `acc1` can safely store these intermediate values,
    // i.e. without wrapping, because UINT32_MAX^2 + 2*UINT32_MAX is
    // 0xffff_ffff_ffff_ffff.

    // Holds the sum of the first two addends in step 2.2.
    uint64_t acc0 = (uint64_t)x->data[i] * y->data[0] + result->data[0];
    8728:	4381                	li	t2,0
    872a:	4881                	li	a7,0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:107
  for (size_t i = 0; i < ARRAYSIZE(x->data); ++i) {
    872c:	00498313          	addi	t1,s3,4
    8730:	004b0e93          	addi	t4,s6,4
    8734:	17800293          	li	t0,376
    8738:	06000813          	li	a6,96
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:118
    uint64_t acc0 = (uint64_t)x->data[i] * y->data[0] + result->data[0];
    873c:	00289593          	slli	a1,a7,0x2
    8740:	00b90f33          	add	t5,s2,a1
    8744:	000f2683          	lw	a3,0(t5)
    8748:	0009a583          	lw	a1,0(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:125
    // Holds the sum of the all three addends in step 2.2.
    uint64_t acc1 = (uint64_t)u_i * key->n.data[0] + (uint32_t)acc0;

    // Process the i^th digit of `x`, i.e. `x[i]`.
    for (size_t j = 1; j < ARRAYSIZE(result->data); ++j) {
      acc0 = (uint64_t)x->data[i] * y->data[j] + result->data[j] + (acc0 >> 32);
    874c:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:118
    uint64_t acc0 = (uint64_t)x->data[i] * y->data[0] + result->data[0];
    874e:	02d5b4b3          	mulhu	s1,a1,a3
    8752:	02d58533          	mul	a0,a1,a3
    8756:	007505b3          	add	a1,a0,t2
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:119
    const uint32_t u_i = (uint32_t)acc0 * key->n0_inv;
    875a:	180b2383          	lw	t2,384(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:121
    uint64_t acc1 = (uint64_t)u_i * key->n.data[0] + (uint32_t)acc0;
    875e:	000b2e03          	lw	t3,0(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:118
    uint64_t acc0 = (uint64_t)x->data[i] * y->data[0] + result->data[0];
    8762:	00a5b533          	sltu	a0,a1,a0
    8766:	94aa                	add	s1,s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:119
    const uint32_t u_i = (uint32_t)acc0 * key->n0_inv;
    8768:	02b38fb3          	mul	t6,t2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:121
    uint64_t acc1 = (uint64_t)u_i * key->n.data[0] + (uint32_t)acc0;
    876c:	03cf83b3          	mul	t2,t6,t3
    8770:	0145f5b3          	and	a1,a1,s4
    8774:	959e                	add	a1,a1,t2
    8776:	0075b3b3          	sltu	t2,a1,t2
    877a:	03cfb5b3          	mulhu	a1,t6,t3
    877e:	959e                	add	a1,a1,t2
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:125
      acc0 = (uint64_t)x->data[i] * y->data[j] + result->data[j] + (acc0 >> 32);
    8780:	00e30633          	add	a2,t1,a4
    8784:	4210                	lw	a2,0(a2)
    8786:	00eb8433          	add	s0,s7,a4
    878a:	405c                	lw	a5,4(s0)
    878c:	02d63533          	mulhu	a0,a2,a3
    8790:	02d60633          	mul	a2,a2,a3
    8794:	00f486b3          	add	a3,s1,a5
    8798:	0096b7b3          	sltu	a5,a3,s1
    879c:	953e                	add	a0,a0,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:126
      acc1 = (uint64_t)u_i * key->n.data[j] + (uint32_t)acc0 + (acc1 >> 32);
    879e:	00ee87b3          	add	a5,t4,a4
    87a2:	439c                	lw	a5,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:125
      acc0 = (uint64_t)x->data[i] * y->data[j] + result->data[j] + (acc0 >> 32);
    87a4:	9636                	add	a2,a2,a3
    87a6:	00d636b3          	sltu	a3,a2,a3
    87aa:	00d504b3          	add	s1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:126
      acc1 = (uint64_t)u_i * key->n.data[j] + (uint32_t)acc0 + (acc1 >> 32);
    87ae:	03f7b533          	mulhu	a0,a5,t6
    87b2:	03f786b3          	mul	a3,a5,t6
    87b6:	01467633          	and	a2,a2,s4
    87ba:	95b6                	add	a1,a1,a3
    87bc:	00d5b6b3          	sltu	a3,a1,a3
    87c0:	9536                	add	a0,a0,a3
    87c2:	962e                	add	a2,a2,a1
    87c4:	00b635b3          	sltu	a1,a2,a1
    87c8:	95aa                	add	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:127
      result->data[j - 1] = (uint32_t)acc1;
    87ca:	c010                	sw	a2,0(s0)
    87cc:	00570663          	beq	a4,t0,87d8 <mont_mul+0xdc>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:125
      acc0 = (uint64_t)x->data[i] * y->data[j] + result->data[j] + (acc0 >> 32);
    87d0:	000f2683          	lw	a3,0(t5)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:124
    for (size_t j = 1; j < ARRAYSIZE(result->data); ++j) {
    87d4:	0711                	addi	a4,a4,4
    87d6:	b76d                	j	8780 <mont_mul+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:129
    }
    acc0 = (acc0 >> 32) + (acc1 >> 32);
    87d8:	00958533          	add	a0,a1,s1
    87dc:	00b535b3          	sltu	a1,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:141
    // least non-negative residue of x*y*R^-1 mod n. Since `acc0 >> 32` here is
    // at most 1, we can subtract the modulus from `result` without taking it
    // into account and fit `result` into `kSigVerifyRsaNumWords`. Since this is
    // not a direct comparison with the modulus, the final result is not
    // guaranteed to be the the least non-negative residue of x*y*R^-1 mod n.
    if (acc0 >> 32) {
    87e0:	001a0693          	addi	a3,s4,1
    87e4:	0146b733          	sltu	a4,a3,s4
    87e8:	8df9                	and	a1,a1,a4
    87ea:	8ee9                	and	a3,a3,a0
    87ec:	8dd5                	or	a1,a1,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:130
    result->data[ARRAYSIZE(result->data) - 1] = (uint32_t)acc0;
    87ee:	16abae23          	sw	a0,380(s7)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:141
    if (acc0 >> 32) {
    87f2:	c595                	beqz	a1,881e <mont_mul+0x122>
    87f4:	4501                	li	a0,0
    87f6:	4581                	li	a1,0
subtract_modulus():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    87f8:	00ab8633          	add	a2,s7,a0
    87fc:	4214                	lw	a3,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    87fe:	00ab0733          	add	a4,s6,a0
    8802:	4318                	lw	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    8804:	40b687b3          	sub	a5,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    8808:	00b6b5b3          	sltu	a1,a3,a1
    880c:	00e7b6b3          	sltu	a3,a5,a4
    8810:	95b6                	add	a1,a1,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    8812:	40e786b3          	sub	a3,a5,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:25
  for (size_t i = 0; i < ARRAYSIZE(a->data); ++i) {
    8816:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    8818:	c214                	sw	a3,0(a2)
    881a:	fd551fe3          	bne	a0,s5,87f8 <mont_mul+0xfc>
mont_mul():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:107
  for (size_t i = 0; i < ARRAYSIZE(x->data); ++i) {
    881e:	0885                	addi	a7,a7,1
    8820:	01088563          	beq	a7,a6,882a <mont_mul+0x12e>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:118
    uint64_t acc0 = (uint64_t)x->data[i] * y->data[0] + result->data[0];
    8824:	000ba383          	lw	t2,0(s7)
    8828:	bf11                	j	873c <mont_mul+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:145
      subtract_modulus(key, result);
    }
  }
}
    882a:	4bb2                	lw	s7,12(sp)
    882c:	4b42                	lw	s6,16(sp)
    882e:	4ad2                	lw	s5,20(sp)
    8830:	4a62                	lw	s4,24(sp)
    8832:	49f2                	lw	s3,28(sp)
    8834:	5902                	lw	s2,32(sp)
    8836:	5492                	lw	s1,36(sp)
    8838:	5422                	lw	s0,40(sp)
    883a:	50b2                	lw	ra,44(sp)
    883c:	6145                	addi	sp,sp,48
    883e:	8082                	ret

00008840 <sigverify_mod_exp_ibex>:
sigverify_mod_exp_ibex():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:149

bool sigverify_mod_exp_ibex(const sigverify_rsa_key_t *key,
                            const sigverify_rsa_buffer_t *sig,
                            sigverify_rsa_buffer_t *result) {
    8840:	7125                	addi	sp,sp,-416
    8842:	18112e23          	sw	ra,412(sp)
    8846:	18812c23          	sw	s0,408(sp)
    884a:	18912a23          	sw	s1,404(sp)
    884e:	19212823          	sw	s2,400(sp)
    8852:	19312623          	sw	s3,396(sp)
    8856:	19412423          	sw	s4,392(sp)
    885a:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:152
  sigverify_rsa_buffer_t buf;

  if (key->exponent == 3) {
    885c:	18452503          	lw	a0,388(a0)
    8860:	66c1                	lui	a3,0x10
    8862:	0685                	addi	a3,a3,1
    8864:	84b2                	mv	s1,a2
    8866:	892e                	mv	s2,a1
    8868:	02d50463          	beq	a0,a3,8890 <sigverify_mod_exp_ibex+0x50>
    886c:	458d                	li	a1,3
    886e:	06b51f63          	bne	a0,a1,88ec <sigverify_mod_exp_ibex+0xac>
    8872:	0020                	addi	s0,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:154
    // buf = R^2 mod n
    calc_r_square(key, &buf);
    8874:	854e                	mv	a0,s3
    8876:	85a2                	mv	a1,s0
    8878:	3bb5                	jal	85f4 <calc_r_square>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:156
    // result = sig * R mod n
    mont_mul(key, sig, &buf, result);
    887a:	854e                	mv	a0,s3
    887c:	85ca                	mv	a1,s2
    887e:	8622                	mv	a2,s0
    8880:	86a6                	mv	a3,s1
    8882:	3dad                	jal	86fc <mont_mul>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:158
    // buf = sig^2 * R mod n
    mont_mul(key, result, result, &buf);
    8884:	854e                	mv	a0,s3
    8886:	85a6                	mv	a1,s1
    8888:	8626                	mv	a2,s1
    888a:	86a2                	mv	a3,s0
    888c:	3d85                	jal	86fc <mont_mul>
    888e:	a805                	j	88be <sigverify_mod_exp_ibex+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:161
  } else if (key->exponent == 65537) {
    // result = R^2 mod n
    calc_r_square(key, result);
    8890:	854e                	mv	a0,s3
    8892:	85a6                	mv	a1,s1
    8894:	3385                	jal	85f4 <calc_r_square>
    8896:	00810a13          	addi	s4,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:163
    // buf = sig * R mod n
    mont_mul(key, sig, result, &buf);
    889a:	854e                	mv	a0,s3
    889c:	85ca                	mv	a1,s2
    889e:	8626                	mv	a2,s1
    88a0:	86d2                	mv	a3,s4
    88a2:	3da9                	jal	86fc <mont_mul>
    88a4:	4421                	li	s0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:166
    for (size_t i = 0; i < 8; ++i) {
      // result = sig^{2*i+1} * R mod n (sig's exponent: 2, 8, 32, ..., 32768)
      mont_mul(key, &buf, &buf, result);
    88a6:	854e                	mv	a0,s3
    88a8:	85d2                	mv	a1,s4
    88aa:	8652                	mv	a2,s4
    88ac:	86a6                	mv	a3,s1
    88ae:	35b9                	jal	86fc <mont_mul>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:168
      // buf = sig^{4*i+2} * R mod n (sig's exponent: 4, 16, 64, ..., 65536)
      mont_mul(key, result, result, &buf);
    88b0:	854e                	mv	a0,s3
    88b2:	85a6                	mv	a1,s1
    88b4:	8626                	mv	a2,s1
    88b6:	86d2                	mv	a3,s4
    88b8:	3591                	jal	86fc <mont_mul>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:164
    for (size_t i = 0; i < 8; ++i) {
    88ba:	147d                	addi	s0,s0,-1
    88bc:	f46d                	bnez	s0,88a6 <sigverify_mod_exp_ibex+0x66>
    88be:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:174
    }
  } else {
    return false;
  }
  // result = sig^e mod n
  mont_mul(key, &buf, sig, result);
    88c0:	854e                	mv	a0,s3
    88c2:	864a                	mv	a2,s2
    88c4:	86a6                	mv	a3,s1
    88c6:	3d1d                	jal	86fc <mont_mul>
greater_equal_modulus():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:45
  for (size_t i = ARRAYSIZE(a->data) - 1; i < ARRAYSIZE(a->data); --i) {
    88c8:	17c98513          	addi	a0,s3,380
    88cc:	17c48593          	addi	a1,s1,380
    88d0:	05f00613          	li	a2,95
    88d4:	05f00693          	li	a3,95
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:46
    if (a->data[i] != key->n.data[i]) {
    88d8:	4198                	lw	a4,0(a1)
    88da:	411c                	lw	a5,0(a0)
    88dc:	00f71a63          	bne	a4,a5,88f0 <sigverify_mod_exp_ibex+0xb0>
    88e0:	16fd                	addi	a3,a3,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:45
  for (size_t i = ARRAYSIZE(a->data) - 1; i < ARRAYSIZE(a->data); --i) {
    88e2:	1571                	addi	a0,a0,-4
    88e4:	15f1                	addi	a1,a1,-4
    88e6:	fed679e3          	bgeu	a2,a3,88d8 <sigverify_mod_exp_ibex+0x98>
    88ea:	a031                	j	88f6 <sigverify_mod_exp_ibex+0xb6>
    88ec:	4501                	li	a0,0
    88ee:	a825                	j	8926 <sigverify_mod_exp_ibex+0xe6>
    88f0:	4505                	li	a0,1
sigverify_mod_exp_ibex():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:179

  // We need this check because the result of `mont_mul` is not guaranteed to be
  // the least non-negative residue. We need to subtract the modulus n from
  // `result` at most once because R/2 < n < R.
  if (greater_equal_modulus(key, result)) {
    88f2:	02e7fa63          	bgeu	a5,a4,8926 <sigverify_mod_exp_ibex+0xe6>
    88f6:	4501                	li	a0,0
    88f8:	4601                	li	a2,0
    88fa:	18000593          	li	a1,384
subtract_modulus():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    88fe:	00a486b3          	add	a3,s1,a0
    8902:	4298                	lw	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    8904:	00a987b3          	add	a5,s3,a0
    8908:	439c                	lw	a5,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:26
    uint32_t temp = a->data[i] - borrow;
    890a:	40c70433          	sub	s0,a4,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:29
    borrow = (a->data[i] < borrow) + (temp < key->n.data[i]);
    890e:	00c73633          	sltu	a2,a4,a2
    8912:	00f43733          	sltu	a4,s0,a5
    8916:	963a                	add	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    8918:	40f40733          	sub	a4,s0,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:25
  for (size_t i = 0; i < ARRAYSIZE(a->data); ++i) {
    891c:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:30
    a->data[i] = temp - key->n.data[i];
    891e:	c298                	sw	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:25
  for (size_t i = 0; i < ARRAYSIZE(a->data); ++i) {
    8920:	fcb51fe3          	bne	a0,a1,88fe <sigverify_mod_exp_ibex+0xbe>
    8924:	4505                	li	a0,1
sigverify_mod_exp_ibex():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/rsa_verify.c:184
    subtract_modulus(key, result);
  }

  return true;
}
    8926:	18812a03          	lw	s4,392(sp)
    892a:	18c12983          	lw	s3,396(sp)
    892e:	19012903          	lw	s2,400(sp)
    8932:	19412483          	lw	s1,404(sp)
    8936:	19812403          	lw	s0,408(sp)
    893a:	19c12083          	lw	ra,412(sp)
    893e:	611d                	addi	sp,sp,416
    8940:	8082                	ret
	...

00008944 <sigverify_rsa_key_id_get>:
sigverify_rsa_key_id_get():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/mask_rom/sig_verify_keys.h:76
    8944:	4108                	lw	a0,0(a0)
    8946:	8082                	ret

00008948 <romextimage_manifest_get>:
romextimage_manifest_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/romextimage.c:13
#include "sw/device/silicon_creator/mask_rom/romextimage_ptrs.h"

rom_error_t romextimage_manifest_get(flash_slot_t slot,
                                     const manifest_t **manifest) {
  const manifest_t *ptr;
  switch (slot) {
    8948:	c519                	beqz	a0,8956 <romextimage_manifest_get+0xe>
    894a:	4605                	li	a2,1
    894c:	02c51263          	bne	a0,a2,8970 <romextimage_manifest_get+0x28>
    8950:	20080537          	lui	a0,0x20080
    8954:	a019                	j	895a <romextimage_manifest_get+0x12>
    8956:	20000537          	lui	a0,0x20000
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/romextimage.c:23
      ptr = romextimage_slot_b_manifest_ptr_get();
      break;
    default:
      return kErrorRomextimageInvalidArgument;
  }
  if (ptr->identifier != kRomextimageManifestIdentifier) {
    895a:	4110                	lw	a2,0(a0)
    895c:	455256b7          	lui	a3,0x45525
    8960:	44f68693          	addi	a3,a3,1103 # 4552544f <_stack_end+0x3550544f>
    8964:	00d61b63          	bne	a2,a3,897a <romextimage_manifest_get+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/romextimage.c:26
    return kErrorRomextimageInternal;
  }
  *manifest = ptr;
    8968:	c188                	sw	a0,0(a1)
    896a:	73900513          	li	a0,1849
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/mask_rom/romextimage.c:28
  return kErrorOk;
}
    896e:	8082                	ret
    8970:	01455537          	lui	a0,0x1455
    8974:	20350513          	addi	a0,a0,515 # 1455203 <_chip_info_end+0x1449203>
    8978:	8082                	ret
    897a:	02455537          	lui	a0,0x2455
    897e:	20d50513          	addi	a0,a0,525 # 245520d <_chip_info_end+0x244920d>
    8982:	8082                	ret

00008984 <romextimage_slot_a_manifest_ptr_get>:
romextimage_slot_a_manifest_ptr_get():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/mask_rom/romextimage_ptrs.h:27
 * slot A.
 *
 * @return Pointer to the manifest of the ROM_EXT image in slot A.
 */
inline const manifest_t *romextimage_slot_a_manifest_ptr_get(void) {
  return (const manifest_t *)TOP_EARLGREY_EFLASH_BASE_ADDR;
    8984:	20000537          	lui	a0,0x20000
    8988:	8082                	ret

0000898a <romextimage_slot_b_manifest_ptr_get>:
romextimage_slot_b_manifest_ptr_get():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/mask_rom/romextimage_ptrs.h:37
 * slot B.
 *
 * @return Pointer to the manifest of the ROM_EXT image in slot B.
 */
inline const manifest_t *romextimage_slot_b_manifest_ptr_get(void) {
  return (const manifest_t *)(TOP_EARLGREY_EFLASH_BASE_ADDR +
    898a:	20080537          	lui	a0,0x20080
    898e:	8082                	ret

00008990 <pinmux_init>:
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:29
    reg_value++;
    reg_offset += 4;
  }
}

void pinmux_init(void) {
    8990:	4509                	li	a0,2
    8992:	404605b7          	lui	a1,0x40460
    8996:	0dc58593          	addi	a1,a1,220 # 404600dc <_stack_end+0x304400dc>
    899a:	02200613          	li	a2,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    899e:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
    89a0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
    89a2:	0591                	addi	a1,a1,4
    89a4:	fec51de3          	bne	a0,a2,899e <pinmux_init+0xe>
    89a8:	450d                	li	a0,3
    89aa:	404605b7          	lui	a1,0x40460
    89ae:	27458593          	addi	a1,a1,628 # 40460274 <_stack_end+0x30440274>
    89b2:	02300613          	li	a2,35
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    89b6:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
    89b8:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
    89ba:	0591                	addi	a1,a1,4
    89bc:	fec51de3          	bne	a0,a2,89b6 <pinmux_init+0x26>
    89c0:	40460537          	lui	a0,0x40460
    89c4:	02200593          	li	a1,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    89c8:	18b52223          	sw	a1,388(a0) # 40460184 <_stack_end+0x30440184>
    89cc:	02d00593          	li	a1,45
    89d0:	2eb52c23          	sw	a1,760(a0)
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:63
  // We've got one insel configuration field per register. Hence, we have to
  // convert the enumeration index into a byte address using << 2.
  reg_offset = kTopEarlgreyPinmuxMioOutIoc11 << 2;
  mask = PINMUX_MIO_OUTSEL_0_OUT_0_MASK;
  mmio_region_write32(reg32, reg_offset, reg_value & mask);
}
    89d4:	8082                	ret
	...

000089d8 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
    89d8:	e589                	bnez	a1,89e2 <base_set_stdout+0xa>
    89da:	00000597          	auipc	a1,0x0
    89de:	01658593          	addi	a1,a1,22 # 89f0 <base_dev_null>
    89e2:	0fff7617          	auipc	a2,0xfff7
    89e6:	61e60613          	addi	a2,a2,1566 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
    89ea:	c208                	sw	a0,0(a2)
    89ec:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
    89ee:	8082                	ret

000089f0 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
    89f0:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
    89f2:	8082                	ret

000089f4 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
    89f4:	0fff7597          	auipc	a1,0xfff7
    89f8:	60c58593          	addi	a1,a1,1548 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
    89fc:	c188                	sw	a0,0(a1)
    89fe:	00000517          	auipc	a0,0x0
    8a02:	00c50513          	addi	a0,a0,12 # 8a0a <base_dev_uart>
    8a06:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
    8a08:	8082                	ret

00008a0a <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
    8a0a:	1101                	addi	sp,sp,-32
    8a0c:	ce06                	sw	ra,28(sp)
    8a0e:	cc22                	sw	s0,24(sp)
    8a10:	ca26                	sw	s1,20(sp)
    8a12:	c84a                	sw	s2,16(sp)
    8a14:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
    8a16:	c20d                	beqz	a2,8a38 <base_dev_uart+0x2e>
    8a18:	8432                	mv	s0,a2
    8a1a:	892e                	mv	s2,a1
    8a1c:	89aa                	mv	s3,a0
    8a1e:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
    8a20:	00990533          	add	a0,s2,s1
    8a24:	00054583          	lbu	a1,0(a0)
    8a28:	854e                	mv	a0,s3
    8a2a:	2f11                	jal	913e <dif_uart_byte_send_polled>
    8a2c:	e519                	bnez	a0,8a3a <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
    8a2e:	0485                	addi	s1,s1,1
    8a30:	fe9418e3          	bne	s0,s1,8a20 <base_dev_uart+0x16>
    8a34:	84a2                	mv	s1,s0
    8a36:	a011                	j	8a3a <base_dev_uart+0x30>
    8a38:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
    8a3a:	8526                	mv	a0,s1
    8a3c:	49b2                	lw	s3,12(sp)
    8a3e:	4942                	lw	s2,16(sp)
    8a40:	44d2                	lw	s1,20(sp)
    8a42:	4462                	lw	s0,24(sp)
    8a44:	40f2                	lw	ra,28(sp)
    8a46:	6105                	addi	sp,sp,32
    8a48:	8082                	ret

00008a4a <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
    8a4a:	7179                	addi	sp,sp,-48
    8a4c:	c606                	sw	ra,12(sp)
    8a4e:	d646                	sw	a7,44(sp)
    8a50:	d442                	sw	a6,40(sp)
    8a52:	d23e                	sw	a5,36(sp)
    8a54:	d03a                	sw	a4,32(sp)
    8a56:	ce36                	sw	a3,28(sp)
    8a58:	cc32                	sw	a2,24(sp)
    8a5a:	ca2e                	sw	a1,20(sp)
    8a5c:	0fff7597          	auipc	a1,0xfff7
    8a60:	5a458593          	addi	a1,a1,1444 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
    8a64:	4190                	lw	a2,0(a1)
    8a66:	41cc                	lw	a1,4(a1)
    8a68:	872a                	mv	a4,a0
    8a6a:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
    8a6c:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
    8a6e:	8532                	mv	a0,a2
    8a70:	863a                	mv	a2,a4
    8a72:	200d                	jal	8a94 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
    8a74:	40b2                	lw	ra,12(sp)
    8a76:	6145                	addi	sp,sp,48
    8a78:	8082                	ret

00008a7a <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
    8a7a:	0fff7697          	auipc	a3,0xfff7
    8a7e:	58668693          	addi	a3,a3,1414 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
    8a82:	4290                	lw	a2,0(a3)
    8a84:	42d4                	lw	a3,4(a3)
    8a86:	872e                	mv	a4,a1
    8a88:	87aa                	mv	a5,a0
    8a8a:	8532                	mv	a0,a2
    8a8c:	85b6                	mv	a1,a3
    8a8e:	863e                	mv	a2,a5
    8a90:	86ba                	mv	a3,a4
    8a92:	a009                	j	8a94 <base_vfprintf>

00008a94 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
    8a94:	7139                	addi	sp,sp,-64
    8a96:	de06                	sw	ra,60(sp)
    8a98:	dc22                	sw	s0,56(sp)
    8a9a:	da26                	sw	s1,52(sp)
    8a9c:	d84a                	sw	s2,48(sp)
    8a9e:	d64e                	sw	s3,44(sp)
    8aa0:	d452                	sw	s4,40(sp)
    8aa2:	d256                	sw	s5,36(sp)
    8aa4:	d05a                	sw	s6,32(sp)
    8aa6:	ce5e                	sw	s7,28(sp)
    8aa8:	cc62                	sw	s8,24(sp)
    8aaa:	ca66                	sw	s9,20(sp)
    8aac:	c86a                	sw	s10,16(sp)
    8aae:	c66e                	sw	s11,12(sp)
    8ab0:	8bb2                	mv	s7,a2
    8ab2:	892a                	mv	s2,a0
    8ab4:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
    8ab6:	c199                	beqz	a1,8abc <base_vfprintf+0x28>
    8ab8:	89ae                	mv	s3,a1
    8aba:	a029                	j	8ac4 <base_vfprintf+0x30>
    8abc:	00000997          	auipc	s3,0x0
    8ac0:	f3498993          	addi	s3,s3,-204 # 89f0 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
    8ac4:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
    8ac6:	000bc503          	lbu	a0,0(s7)
    8aca:	28050f63          	beqz	a0,8d68 <base_vfprintf+0x2d4>
    8ace:	4b01                	li	s6,0
    8ad0:	02500c13          	li	s8,37
    8ad4:	4ca5                	li	s9,9
    8ad6:	02000d13          	li	s10,32
    8ada:	06800d93          	li	s11,104
    8ade:	00001a17          	auipc	s4,0x1
    8ae2:	0b2a0a13          	addi	s4,s4,178 # 9b90 <__clz_tab+0x14c>
    8ae6:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
    8ae8:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
    8aea:	0ff57413          	andi	s0,a0,255
    8aee:	01840963          	beq	s0,s8,8b00 <base_vfprintf+0x6c>
    8af2:	c419                	beqz	s0,8b00 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
    8af4:	009b8533          	add	a0,s7,s1
    8af8:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
    8afc:	0485                	addi	s1,s1,1
    8afe:	b7f5                	j	8aea <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
    8b00:	c491                	beqz	s1,8b0c <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
    8b02:	854a                	mv	a0,s2
    8b04:	85de                	mv	a1,s7
    8b06:	8626                	mv	a2,s1
    8b08:	9982                	jalr	s3
    8b0a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
    8b0c:	24040f63          	beqz	s0,8d6a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
    8b10:	009b8633          	add	a2,s7,s1
    8b14:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
    8b18:	22050f63          	beqz	a0,8d56 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
    8b1c:	fd050593          	addi	a1,a0,-48
    8b20:	0ff5f593          	andi	a1,a1,255
    8b24:	00bcf863          	bgeu	s9,a1,8b34 <base_vfprintf+0xa0>
    8b28:	4401                	li	s0,0
    8b2a:	4581                	li	a1,0
    8b2c:	4605                	li	a2,1
    8b2e:	028d7f63          	bgeu	s10,s0,8b6c <base_vfprintf+0xd8>
    8b32:	aca1                	j	8d8a <base_vfprintf+0x2f6>
    8b34:	4581                	li	a1,0
    8b36:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
    8b38:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
    8b3a:	00b606b3          	add	a3,a2,a1
    8b3e:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
    8b42:	20068a63          	beqz	a3,8d56 <base_vfprintf+0x2c2>
    8b46:	0ff57513          	andi	a0,a0,255
    8b4a:	03540733          	mul	a4,s0,s5
    8b4e:	953a                	add	a0,a0,a4
    8b50:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
    8b54:	fd068513          	addi	a0,a3,-48
    8b58:	0ff57713          	andi	a4,a0,255
    8b5c:	0585                	addi	a1,a1,1
    8b5e:	8536                	mv	a0,a3
    8b60:	fcecfde3          	bgeu	s9,a4,8b3a <base_vfprintf+0xa6>
    8b64:	4601                	li	a2,0
    8b66:	8536                	mv	a0,a3
    8b68:	228d6163          	bltu	s10,s0,8d8a <base_vfprintf+0x2f6>
    8b6c:	008036b3          	snez	a3,s0
    8b70:	8e55                	or	a2,a2,a3
    8b72:	20060c63          	beqz	a2,8d8a <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8b76:	95de                	add	a1,a1,s7
    8b78:	95a6                	add	a1,a1,s1
    8b7a:	00258b93          	addi	s7,a1,2
    8b7e:	02adce63          	blt	s11,a0,8bba <base_vfprintf+0x126>
    8b82:	06100593          	li	a1,97
    8b86:	06a5d563          	bge	a1,a0,8bf0 <base_vfprintf+0x15c>
    8b8a:	06300593          	li	a1,99
    8b8e:	0ca5cb63          	blt	a1,a0,8c64 <base_vfprintf+0x1d0>
    8b92:	06200593          	li	a1,98
    8b96:	14b50a63          	beq	a0,a1,8cea <base_vfprintf+0x256>
    8b9a:	06300593          	li	a1,99
    8b9e:	18b51f63          	bne	a0,a1,8d3c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
    8ba2:	4502                	lw	a0,0(sp)
    8ba4:	00450593          	addi	a1,a0,4
    8ba8:	c02e                	sw	a1,0(sp)
    8baa:	4108                	lw	a0,0(a0)
    8bac:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
    8bb0:	4605                	li	a2,1
    8bb2:	854a                	mv	a0,s2
    8bb4:	00b10593          	addi	a1,sp,11
    8bb8:	aa41                	j	8d48 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8bba:	07200593          	li	a1,114
    8bbe:	04a5dd63          	bge	a1,a0,8c18 <base_vfprintf+0x184>
    8bc2:	07700593          	li	a1,119
    8bc6:	0aa5c663          	blt	a1,a0,8c72 <base_vfprintf+0x1de>
    8bca:	07300593          	li	a1,115
    8bce:	12b50963          	beq	a0,a1,8d00 <base_vfprintf+0x26c>
    8bd2:	07500593          	li	a1,117
    8bd6:	16b51363          	bne	a0,a1,8d3c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
    8bda:	4502                	lw	a0,0(sp)
    8bdc:	00450593          	addi	a1,a0,4
    8be0:	c02e                	sw	a1,0(sp)
    8be2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
    8be4:	00001797          	auipc	a5,0x1
    8be8:	df578793          	addi	a5,a5,-523 # 99d9 <kDigitsLow>
    8bec:	4729                	li	a4,10
    8bee:	a8cd                	j	8ce0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8bf0:	13850763          	beq	a0,s8,8d1e <base_vfprintf+0x28a>
    8bf4:	04800593          	li	a1,72
    8bf8:	00b50663          	beq	a0,a1,8c04 <base_vfprintf+0x170>
    8bfc:	05800593          	li	a1,88
    8c00:	12b51e63          	bne	a0,a1,8d3c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
    8c04:	4502                	lw	a0,0(sp)
    8c06:	00450593          	addi	a1,a0,4
    8c0a:	c02e                	sw	a1,0(sp)
    8c0c:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
    8c0e:	00001797          	auipc	a5,0x1
    8c12:	ddb78793          	addi	a5,a5,-549 # 99e9 <kDigitsHigh>
    8c16:	a0e1                	j	8cde <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8c18:	06900593          	li	a1,105
    8c1c:	06b50d63          	beq	a0,a1,8c96 <base_vfprintf+0x202>
    8c20:	06f00593          	li	a1,111
    8c24:	10b50163          	beq	a0,a1,8d26 <base_vfprintf+0x292>
    8c28:	07000593          	li	a1,112
    8c2c:	10b51863          	bne	a0,a1,8d3c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
    8c30:	00001597          	auipc	a1,0x1
    8c34:	f6458593          	addi	a1,a1,-156 # 9b94 <__clz_tab+0x150>
    8c38:	4609                	li	a2,2
    8c3a:	854a                	mv	a0,s2
    8c3c:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
    8c3e:	4582                	lw	a1,0(sp)
    8c40:	00458613          	addi	a2,a1,4
    8c44:	c032                	sw	a2,0(sp)
    8c46:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
    8c48:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
    8c4c:	00001797          	auipc	a5,0x1
    8c50:	d8d78793          	addi	a5,a5,-627 # 99d9 <kDigitsLow>
    8c54:	46a1                	li	a3,8
    8c56:	4741                	li	a4,16
    8c58:	854a                	mv	a0,s2
    8c5a:	85ce                	mv	a1,s3
    8c5c:	2a5d                	jal	8e12 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
    8c5e:	00a40b33          	add	s6,s0,a0
    8c62:	a0ed                	j	8d4c <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8c64:	06400593          	li	a1,100
    8c68:	02b50763          	beq	a0,a1,8c96 <base_vfprintf+0x202>
    8c6c:	07b50063          	beq	a0,s11,8ccc <base_vfprintf+0x238>
    8c70:	a0f1                	j	8d3c <base_vfprintf+0x2a8>
    8c72:	07800593          	li	a1,120
    8c76:	04b50b63          	beq	a0,a1,8ccc <base_vfprintf+0x238>
    8c7a:	07a00593          	li	a1,122
    8c7e:	0ab51f63          	bne	a0,a1,8d3c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
    8c82:	4502                	lw	a0,0(sp)
    8c84:	00450593          	addi	a1,a0,4
    8c88:	c02e                	sw	a1,0(sp)
    8c8a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
    8c8c:	00850593          	addi	a1,a0,8
    8c90:	c02e                	sw	a1,0(sp)
    8c92:	414c                	lw	a1,4(a0)
    8c94:	a84d                	j	8d46 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
    8c96:	4502                	lw	a0,0(sp)
    8c98:	00450593          	addi	a1,a0,4
    8c9c:	c02e                	sw	a1,0(sp)
    8c9e:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
    8ca0:	557d                	li	a0,-1
    8ca2:	00954c63          	blt	a0,s1,8cba <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
    8ca6:	00001597          	auipc	a1,0x1
    8caa:	eec58593          	addi	a1,a1,-276 # 9b92 <__clz_tab+0x14e>
    8cae:	4605                	li	a2,1
    8cb0:	854a                	mv	a0,s2
    8cb2:	9982                	jalr	s3
    8cb4:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
    8cb6:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
    8cba:	00001797          	auipc	a5,0x1
    8cbe:	d1f78793          	addi	a5,a5,-737 # 99d9 <kDigitsLow>
    8cc2:	4729                	li	a4,10
    8cc4:	854a                	mv	a0,s2
    8cc6:	85ce                	mv	a1,s3
    8cc8:	8626                	mv	a2,s1
    8cca:	a829                	j	8ce4 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
    8ccc:	4502                	lw	a0,0(sp)
    8cce:	00450593          	addi	a1,a0,4
    8cd2:	c02e                	sw	a1,0(sp)
    8cd4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
    8cd6:	00001797          	auipc	a5,0x1
    8cda:	d0378793          	addi	a5,a5,-765 # 99d9 <kDigitsLow>
    8cde:	4741                	li	a4,16
    8ce0:	854a                	mv	a0,s2
    8ce2:	85ce                	mv	a1,s3
    8ce4:	86a2                	mv	a3,s0
    8ce6:	2235                	jal	8e12 <write_digits>
    8ce8:	a08d                	j	8d4a <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
    8cea:	4502                	lw	a0,0(sp)
    8cec:	00450593          	addi	a1,a0,4
    8cf0:	c02e                	sw	a1,0(sp)
    8cf2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
    8cf4:	00001797          	auipc	a5,0x1
    8cf8:	ce578793          	addi	a5,a5,-795 # 99d9 <kDigitsLow>
    8cfc:	4709                	li	a4,2
    8cfe:	b7cd                	j	8ce0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
    8d00:	4502                	lw	a0,0(sp)
    8d02:	00450593          	addi	a1,a0,4
    8d06:	c02e                	sw	a1,0(sp)
    8d08:	410c                	lw	a1,0(a0)
    8d0a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
    8d0c:	00a58633          	add	a2,a1,a0
    8d10:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
    8d14:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
    8d16:	fa7d                	bnez	a2,8d0c <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
    8d18:	fff50613          	addi	a2,a0,-1
    8d1c:	a02d                	j	8d46 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
    8d1e:	4605                	li	a2,1
    8d20:	854a                	mv	a0,s2
    8d22:	85d2                	mv	a1,s4
    8d24:	a015                	j	8d48 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
    8d26:	4502                	lw	a0,0(sp)
    8d28:	00450593          	addi	a1,a0,4
    8d2c:	c02e                	sw	a1,0(sp)
    8d2e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
    8d30:	00001797          	auipc	a5,0x1
    8d34:	ca978793          	addi	a5,a5,-855 # 99d9 <kDigitsLow>
    8d38:	4721                	li	a4,8
    8d3a:	b75d                	j	8ce0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    8d3c:	00001597          	auipc	a1,0x1
    8d40:	cbd58593          	addi	a1,a1,-835 # 99f9 <kUnknownSpec>
    8d44:	463d                	li	a2,15
    8d46:	854a                	mv	a0,s2
    8d48:	9982                	jalr	s3
    8d4a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
    8d4c:	000bc503          	lbu	a0,0(s7)
    8d50:	d8051ce3          	bnez	a0,8ae8 <base_vfprintf+0x54>
    8d54:	a819                	j	8d6a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
    8d56:	00001597          	auipc	a1,0x1
    8d5a:	c6658593          	addi	a1,a1,-922 # 99bc <kErrorNul>
    8d5e:	4645                	li	a2,17
    8d60:	854a                	mv	a0,s2
    8d62:	9982                	jalr	s3
    8d64:	9b2a                	add	s6,s6,a0
    8d66:	a011                	j	8d6a <base_vfprintf+0x2d6>
    8d68:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
    8d6a:	855a                	mv	a0,s6
    8d6c:	4db2                	lw	s11,12(sp)
    8d6e:	4d42                	lw	s10,16(sp)
    8d70:	4cd2                	lw	s9,20(sp)
    8d72:	4c62                	lw	s8,24(sp)
    8d74:	4bf2                	lw	s7,28(sp)
    8d76:	5b02                	lw	s6,32(sp)
    8d78:	5a92                	lw	s5,36(sp)
    8d7a:	5a22                	lw	s4,40(sp)
    8d7c:	59b2                	lw	s3,44(sp)
    8d7e:	5942                	lw	s2,48(sp)
    8d80:	54d2                	lw	s1,52(sp)
    8d82:	5462                	lw	s0,56(sp)
    8d84:	50f2                	lw	ra,60(sp)
    8d86:	6121                	addi	sp,sp,64
    8d88:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
    8d8a:	00001597          	auipc	a1,0x1
    8d8e:	c4358593          	addi	a1,a1,-957 # 99cd <kErrorTooWide>
    8d92:	4631                	li	a2,12
    8d94:	b7f1                	j	8d60 <base_vfprintf+0x2cc>

00008d96 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
    8d96:	7179                	addi	sp,sp,-48
    8d98:	ca06                	sw	ra,20(sp)
    8d9a:	d646                	sw	a7,44(sp)
    8d9c:	d442                	sw	a6,40(sp)
    8d9e:	d23e                	sw	a5,36(sp)
    8da0:	d03a                	sw	a4,32(sp)
    8da2:	ce36                	sw	a3,28(sp)
    8da4:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
    8da6:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
    8da8:	c42a                	sw	a0,8(sp)
    8daa:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
    8dac:	00000597          	auipc	a1,0x0
    8db0:	01258593          	addi	a1,a1,18 # 8dbe <snprintf_sink>
    8db4:	0028                	addi	a0,sp,8
    8db6:	39f9                	jal	8a94 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
    8db8:	40d2                	lw	ra,20(sp)
    8dba:	6145                	addi	sp,sp,48
    8dbc:	8082                	ret

00008dbe <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
    8dbe:	1141                	addi	sp,sp,-16
    8dc0:	c606                	sw	ra,12(sp)
    8dc2:	c422                	sw	s0,8(sp)
    8dc4:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
    8dc6:	4140                	lw	s0,4(a0)
    8dc8:	c00d                	beqz	s0,8dea <snprintf_sink+0x2c>
    8dca:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
    8dcc:	00c46363          	bltu	s0,a2,8dd2 <snprintf_sink+0x14>
    8dd0:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
    8dd2:	4088                	lw	a0,0(s1)
    8dd4:	8622                	mv	a2,s0
    8dd6:	ea6ff0ef          	jal	ra,847c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
    8dda:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
    8ddc:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
    8dde:	9522                	add	a0,a0,s0
    8de0:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
    8de2:	40858533          	sub	a0,a1,s0
    8de6:	c0c8                	sw	a0,4(s1)
    8de8:	a011                	j	8dec <snprintf_sink+0x2e>
    8dea:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
    8dec:	8522                	mv	a0,s0
    8dee:	4492                	lw	s1,4(sp)
    8df0:	4422                	lw	s0,8(sp)
    8df2:	40b2                	lw	ra,12(sp)
    8df4:	0141                	addi	sp,sp,16
    8df6:	8082                	ret

00008df8 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
    8df8:	1101                	addi	sp,sp,-32
    8dfa:	c206                	sw	ra,4(sp)
    8dfc:	ce46                	sw	a7,28(sp)
    8dfe:	cc42                	sw	a6,24(sp)
    8e00:	ca3e                	sw	a5,20(sp)
    8e02:	c83a                	sw	a4,16(sp)
    8e04:	c636                	sw	a3,12(sp)
    8e06:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
    8e08:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
    8e0a:	3169                	jal	8a94 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
    8e0c:	4092                	lw	ra,4(sp)
    8e0e:	6105                	addi	sp,sp,32
    8e10:	8082                	ret

00008e12 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
    8e12:	7139                	addi	sp,sp,-64
    8e14:	de06                	sw	ra,60(sp)
    8e16:	dc22                	sw	s0,56(sp)
    8e18:	da26                	sw	s1,52(sp)
    8e1a:	d84a                	sw	s2,48(sp)
    8e1c:	d64e                	sw	s3,44(sp)
    8e1e:	892e                	mv	s2,a1
    8e20:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
    8e22:	ca05                	beqz	a2,8e52 <write_digits+0x40>
    8e24:	4501                	li	a0,0
    8e26:	02b10813          	addi	a6,sp,43
    8e2a:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
    8e2c:	02e65633          	divu	a2,a2,a4
    8e30:	02e60433          	mul	s0,a2,a4
    8e34:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
    8e38:	943e                	add	s0,s0,a5
    8e3a:	00040403          	lb	s0,0(s0)
    8e3e:	00a805b3          	add	a1,a6,a0
    8e42:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
    8e46:	157d                	addi	a0,a0,-1
    8e48:	fee4f1e3          	bgeu	s1,a4,8e2a <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
    8e4c:	40a00633          	neg	a2,a0
    8e50:	a011                	j	8e54 <write_digits+0x42>
    8e52:	4601                	li	a2,0
    8e54:	4485                	li	s1,1
    8e56:	c291                	beqz	a3,8e5a <write_digits+0x48>
    8e58:	84b6                	mv	s1,a3
    8e5a:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
    8e5e:	00a4e463          	bltu	s1,a0,8e66 <write_digits+0x54>
    8e62:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
    8e66:	02967063          	bgeu	a2,s1,8e86 <write_digits+0x74>
    8e6a:	0068                	addi	a0,sp,12
    8e6c:	8d05                	sub	a0,a0,s1
    8e6e:	02050513          	addi	a0,a0,32
    8e72:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
    8e76:	03000593          	li	a1,48
    8e7a:	8622                	mv	a2,s0
    8e7c:	e16ff0ef          	jal	ra,8492 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
    8e80:	147d                	addi	s0,s0,-1
    8e82:	fc7d                	bnez	s0,8e80 <write_digits+0x6e>
    8e84:	8626                	mv	a2,s1
    8e86:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
    8e88:	8d11                	sub	a0,a0,a2
    8e8a:	02050593          	addi	a1,a0,32
    8e8e:	854e                	mv	a0,s3
    8e90:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
    8e92:	59b2                	lw	s3,44(sp)
    8e94:	5942                	lw	s2,48(sp)
    8e96:	54d2                	lw	s1,52(sp)
    8e98:	5462                	lw	s0,56(sp)
    8e9a:	50f2                	lw	ra,60(sp)
    8e9c:	6121                	addi	sp,sp,64
    8e9e:	8082                	ret

00008ea0 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
    8ea0:	c581                	beqz	a1,8ea8 <dif_uart_init+0x8>
    8ea2:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
    8ea4:	c188                	sw	a0,0(a1)
    8ea6:	a011                	j	8eaa <dif_uart_init+0xa>
    8ea8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
    8eaa:	8532                	mv	a0,a2
    8eac:	8082                	ret

00008eae <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
    8eae:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
    8eb0:	c606                	sw	ra,12(sp)
    8eb2:	c422                	sw	s0,8(sp)
    8eb4:	c226                	sw	s1,4(sp)
    8eb6:	c92d                	beqz	a0,8f28 <dif_uart_configure+0x7a>
    8eb8:	84ae                	mv	s1,a1
    8eba:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
    8ebc:	418c                	lw	a1,0(a1)
    8ebe:	450d                	li	a0,3
    8ec0:	c5ad                	beqz	a1,8f2a <dif_uart_configure+0x7c>
    8ec2:	40d0                	lw	a2,4(s1)
    8ec4:	c23d                	beqz	a2,8f2a <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
    8ec6:	01459513          	slli	a0,a1,0x14
    8eca:	81b1                	srli	a1,a1,0xc
    8ecc:	4681                	li	a3,0
    8ece:	218d                	jal	9330 <__udivdi3>
    8ed0:	6641                	lui	a2,0x10
    8ed2:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
    8ed4:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
    8ed6:	8d31                	xor	a0,a0,a2
    8ed8:	8dc9                	or	a1,a1,a0
    8eda:	4511                	li	a0,4
    8edc:	e5b9                	bnez	a1,8f2a <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
    8ede:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8ee0:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
    8ee4:	4008                	lw	a0,0(s0)
    8ee6:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8ee8:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
    8eea:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8eec:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
    8ef0:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8ef2:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
    8ef6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8ef8:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
    8efc:	4008                	lw	a0,0(s0)
    8efe:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8f00:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
    8f02:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    8f04:	01061513          	slli	a0,a2,0x10
    8f08:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
    8f0c:	c291                	beqz	a3,8f10 <dif_uart_configure+0x62>
    8f0e:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
    8f10:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
    8f12:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
    8f14:	e219                	bnez	a2,8f1a <dif_uart_configure+0x6c>
    8f16:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
    8f1a:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8f1c:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
    8f1e:	400c                	lw	a1,0(s0)
    8f20:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8f22:	0005a223          	sw	zero,4(a1)
    8f26:	a011                	j	8f2a <dif_uart_configure+0x7c>
    8f28:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
    8f2a:	4492                	lw	s1,4(sp)
    8f2c:	4422                	lw	s0,8(sp)
    8f2e:	40b2                	lw	ra,12(sp)
    8f30:	0141                	addi	sp,sp,16
    8f32:	8082                	ret

00008f34 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
    8f34:	1141                	addi	sp,sp,-16
    8f36:	c606                	sw	ra,12(sp)
    8f38:	c422                	sw	s0,8(sp)
    8f3a:	c226                	sw	s1,4(sp)
    8f3c:	84aa                	mv	s1,a0
    8f3e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
    8f40:	c09d                	beqz	s1,8f66 <dif_uart_irq_is_pending+0x32>
    8f42:	8432                	mv	s0,a2
    8f44:	c20d                	beqz	a2,8f66 <dif_uart_irq_is_pending+0x32>
    8f46:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    8f48:	852e                	mv	a0,a1
    8f4a:	85b2                	mv	a1,a2
    8f4c:	2015                	jal	8f70 <uart_irq_offset_get>
    8f4e:	85aa                	mv	a1,a0
    8f50:	4505                	li	a0,1
    8f52:	c991                	beqz	a1,8f66 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
    8f54:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    8f56:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
    8f58:	4602                	lw	a2,0(sp)
    8f5a:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    8f5c:	00c5d5b3          	srl	a1,a1,a2
    8f60:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
    8f62:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
    8f66:	4492                	lw	s1,4(sp)
    8f68:	4422                	lw	s0,8(sp)
    8f6a:	40b2                	lw	ra,12(sp)
    8f6c:	0141                	addi	sp,sp,16
    8f6e:	8082                	ret

00008f70 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
    8f70:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
    8f72:	00a66563          	bltu	a2,a0,8f7c <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
    8f76:	c188                	sw	a0,0(a1)
    8f78:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
    8f7a:	8082                	ret
    8f7c:	4501                	li	a0,0
    8f7e:	8082                	ret

00008f80 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
    8f80:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
    8f82:	c606                	sw	ra,12(sp)
    8f84:	c422                	sw	s0,8(sp)
    8f86:	c10d                	beqz	a0,8fa8 <dif_uart_irq_acknowledge+0x28>
    8f88:	842a                	mv	s0,a0
    8f8a:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    8f8c:	852e                	mv	a0,a1
    8f8e:	85b2                	mv	a1,a2
    8f90:	37c5                	jal	8f70 <uart_irq_offset_get>
    8f92:	85aa                	mv	a1,a0
    8f94:	4505                	li	a0,1
    8f96:	c991                	beqz	a1,8faa <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
    8f98:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
    8f9a:	4010                	lw	a2,0(s0)
    8f9c:	4501                	li	a0,0
    8f9e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    8fa0:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    8fa4:	c20c                	sw	a1,0(a2)
    8fa6:	a011                	j	8faa <dif_uart_irq_acknowledge+0x2a>
    8fa8:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
    8faa:	4422                	lw	s0,8(sp)
    8fac:	40b2                	lw	ra,12(sp)
    8fae:	0141                	addi	sp,sp,16
    8fb0:	8082                	ret

00008fb2 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
    8fb2:	c911                	beqz	a0,8fc6 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
    8fb4:	c581                	beqz	a1,8fbc <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
    8fb6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    8fb8:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
    8fba:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
    8fbc:	410c                	lw	a1,0(a0)
    8fbe:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    8fc0:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
    8fc4:	8082                	ret
    8fc6:	4509                	li	a0,2
    8fc8:	8082                	ret

00008fca <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
    8fca:	862a                	mv	a2,a0
    8fcc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
    8fce:	c611                	beqz	a2,8fda <dif_uart_irq_restore_all+0x10>
    8fd0:	c589                	beqz	a1,8fda <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
    8fd2:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
    8fd4:	4210                	lw	a2,0(a2)
    8fd6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    8fd8:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
    8fda:	8082                	ret

00008fdc <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
    8fdc:	1141                	addi	sp,sp,-16
    8fde:	c606                	sw	ra,12(sp)
    8fe0:	c422                	sw	s0,8(sp)
    8fe2:	c226                	sw	s1,4(sp)
    8fe4:	84aa                	mv	s1,a0
    8fe6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
    8fe8:	c485                	beqz	s1,9010 <dif_uart_irq_get_enabled+0x34>
    8fea:	8432                	mv	s0,a2
    8fec:	c215                	beqz	a2,9010 <dif_uart_irq_get_enabled+0x34>
    8fee:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    8ff0:	852e                	mv	a0,a1
    8ff2:	85b2                	mv	a1,a2
    8ff4:	3fb5                	jal	8f70 <uart_irq_offset_get>
    8ff6:	85aa                	mv	a1,a0
    8ff8:	4505                	li	a0,1
    8ffa:	c999                	beqz	a1,9010 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
    8ffc:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    8ffe:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
    9000:	4602                	lw	a2,0(sp)
    9002:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    9004:	00c5d5b3          	srl	a1,a1,a2
    9008:	8985                	andi	a1,a1,1
    900a:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
    900e:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
    9010:	4492                	lw	s1,4(sp)
    9012:	4422                	lw	s0,8(sp)
    9014:	40b2                	lw	ra,12(sp)
    9016:	0141                	addi	sp,sp,16
    9018:	8082                	ret

0000901a <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
    901a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
    901c:	c606                	sw	ra,12(sp)
    901e:	c422                	sw	s0,8(sp)
    9020:	c226                	sw	s1,4(sp)
    9022:	c91d                	beqz	a0,9058 <dif_uart_irq_set_enabled+0x3e>
    9024:	8432                	mv	s0,a2
    9026:	84aa                	mv	s1,a0
    9028:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    902a:	852e                	mv	a0,a1
    902c:	85b2                	mv	a1,a2
    902e:	3789                	jal	8f70 <uart_irq_offset_get>
    9030:	85aa                	mv	a1,a0
    9032:	4505                	li	a0,1
    9034:	c19d                	beqz	a1,905a <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
    9036:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9038:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
    903a:	4682                	lw	a3,0(sp)
    903c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
    903e:	00143713          	seqz	a4,s0
    9042:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9044:	00d797b3          	sll	a5,a5,a3
    9048:	fff7c793          	not	a5,a5
    904c:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    904e:	00d716b3          	sll	a3,a4,a3
    9052:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9054:	c1d0                	sw	a2,4(a1)
    9056:	a011                	j	905a <dif_uart_irq_set_enabled+0x40>
    9058:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
    905a:	4492                	lw	s1,4(sp)
    905c:	4422                	lw	s0,8(sp)
    905e:	40b2                	lw	ra,12(sp)
    9060:	0141                	addi	sp,sp,16
    9062:	8082                	ret

00009064 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
    9064:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
    9066:	c606                	sw	ra,12(sp)
    9068:	c422                	sw	s0,8(sp)
    906a:	c10d                	beqz	a0,908c <dif_uart_irq_force+0x28>
    906c:	842a                	mv	s0,a0
    906e:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    9070:	852e                	mv	a0,a1
    9072:	85b2                	mv	a1,a2
    9074:	3df5                	jal	8f70 <uart_irq_offset_get>
    9076:	85aa                	mv	a1,a0
    9078:	4505                	li	a0,1
    907a:	c991                	beqz	a1,908e <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
    907c:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
    907e:	4010                	lw	a2,0(s0)
    9080:	4501                	li	a0,0
    9082:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9084:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9088:	c60c                	sw	a1,8(a2)
    908a:	a011                	j	908e <dif_uart_irq_force+0x2a>
    908c:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
    908e:	4422                	lw	s0,8(sp)
    9090:	40b2                	lw	ra,12(sp)
    9092:	0141                	addi	sp,sp,16
    9094:	8082                	ret

00009096 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
    9096:	cd09                	beqz	a0,90b0 <dif_uart_watermark_rx_set+0x1a>
    9098:	4691                	li	a3,4
    909a:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
    909c:	00b6eb63          	bltu	a3,a1,90b2 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
    90a0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    90a2:	4d54                	lw	a3,28(a0)
    90a4:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
    90a6:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    90a8:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    90aa:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    90ac:	cd4c                	sw	a1,28(a0)
    90ae:	a011                	j	90b2 <dif_uart_watermark_rx_set+0x1c>
    90b0:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    90b2:	8532                	mv	a0,a2
    90b4:	8082                	ret

000090b6 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
    90b6:	cd11                	beqz	a0,90d2 <dif_uart_watermark_tx_set+0x1c>
    90b8:	468d                	li	a3,3
    90ba:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
    90bc:	00b6ec63          	bltu	a3,a1,90d4 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
    90c0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    90c2:	4d54                	lw	a3,28(a0)
    90c4:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
    90c6:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    90c8:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    90cc:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    90ce:	cd4c                	sw	a1,28(a0)
    90d0:	a011                	j	90d4 <dif_uart_watermark_tx_set+0x1e>
    90d2:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    90d4:	8532                	mv	a0,a2
    90d6:	8082                	ret

000090d8 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
    90d8:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
    90da:	c51d                	beqz	a0,9108 <dif_uart_bytes_send+0x30>
    90dc:	c595                	beqz	a1,9108 <dif_uart_bytes_send+0x30>
    90de:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    90e0:	c20d                	beqz	a2,9102 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
    90e2:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    90e6:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    90ea:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    90ec:	eb19                	bnez	a4,9102 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
    90ee:	00f58733          	add	a4,a1,a5
    90f2:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
    90f6:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    90f8:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    90fc:	fef613e3          	bne	a2,a5,90e2 <dif_uart_bytes_send+0xa>
    9100:	87b2                	mv	a5,a2
    9102:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
    9104:	c291                	beqz	a3,9108 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
    9106:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
    9108:	853a                	mv	a0,a4
    910a:	8082                	ret

0000910c <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
    910c:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
    910e:	c515                	beqz	a0,913a <dif_uart_bytes_receive+0x2e>
    9110:	c60d                	beqz	a2,913a <dif_uart_bytes_receive+0x2e>
    9112:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    9114:	cd99                	beqz	a1,9132 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
    9116:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9118:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    911a:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    911e:	eb91                	bnez	a5,9132 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9120:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
    9122:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
    9126:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
    9128:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    912c:	ff0595e3          	bne	a1,a6,9116 <dif_uart_bytes_receive+0xa>
    9130:	882e                	mv	a6,a1
    9132:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
    9134:	c299                	beqz	a3,913a <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
    9136:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
    913a:	853a                	mv	a0,a4
    913c:	8082                	ret

0000913e <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
    913e:	cd19                	beqz	a0,915c <dif_uart_byte_send_polled+0x1e>
    9140:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9142:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    9144:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
    9146:	fef5                	bnez	a3,9142 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9148:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    914a:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    914c:	e299                	bnez	a3,9152 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    914e:	ce0c                	sw	a1,24(a2)
    9150:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9152:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    9154:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
    9156:	dd75                	beqz	a0,9152 <dif_uart_byte_send_polled+0x14>
    9158:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
    915a:	8082                	ret
    915c:	4509                	li	a0,2
    915e:	8082                	ret

00009160 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
    9160:	862a                	mv	a2,a0
    9162:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
    9164:	c205                	beqz	a2,9184 <dif_uart_byte_receive_polled+0x24>
    9166:	cd99                	beqz	a1,9184 <dif_uart_byte_receive_polled+0x24>
    9168:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    916a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    916c:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
    9170:	fd6d                	bnez	a0,916a <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9172:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    9174:	02057693          	andi	a3,a0,32
    9178:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    917a:	e689                	bnez	a3,9184 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    917c:	4a50                	lw	a2,20(a2)
    917e:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
    9180:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
    9184:	8082                	ret

00009186 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
    9186:	862a                	mv	a2,a0
    9188:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
    918a:	ca09                	beqz	a2,919c <dif_uart_rx_bytes_available+0x16>
    918c:	c981                	beqz	a1,919c <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
    918e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9190:	5110                	lw	a2,32(a0)
    9192:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
    9194:	8241                	srli	a2,a2,0x10
    9196:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
    919a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
    919c:	8082                	ret

0000919e <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
    919e:	862a                	mv	a2,a0
    91a0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
    91a2:	ce01                	beqz	a2,91ba <dif_uart_tx_bytes_available+0x1c>
    91a4:	c999                	beqz	a1,91ba <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
    91a6:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    91a8:	5110                	lw	a2,32(a0)
    91aa:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
    91ac:	03f67613          	andi	a2,a2,63
    91b0:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
    91b4:	40c68633          	sub	a2,a3,a2
    91b8:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
    91ba:	8082                	ret

000091bc <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
    91bc:	c11d                	beqz	a0,91e2 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
    91be:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    91c0:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
    91c2:	ffd5f693          	andi	a3,a1,-3
    91c6:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
    91ca:	fff58713          	addi	a4,a1,-1
    91ce:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
    91d0:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
    91d4:	00f77463          	bgeu	a4,a5,91dc <dif_uart_fifo_reset+0x20>
    91d8:	0025e593          	ori	a1,a1,2
    91dc:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    91de:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    91e0:	8082                	ret
    91e2:	4509                	li	a0,2
    91e4:	8082                	ret

000091e6 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
    91e6:	c515                	beqz	a0,9212 <dif_uart_loopback_set+0x2c>
    91e8:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
    91ea:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
    91ec:	0015b593          	seqz	a1,a1
    91f0:	4715                	li	a4,5
    91f2:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    91f6:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
    91f8:	00163613          	seqz	a2,a2
    91fc:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    91fe:	00b797b3          	sll	a5,a5,a1
    9202:	fff7c793          	not	a5,a5
    9206:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9208:	00b615b3          	sll	a1,a2,a1
    920c:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    920e:	c54c                	sw	a1,12(a0)
    9210:	a011                	j	9214 <dif_uart_loopback_set+0x2e>
    9212:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    9214:	8536                	mv	a0,a3
    9216:	8082                	ret

00009218 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
    9218:	862a                	mv	a2,a0
    921a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
    921c:	ca11                	beqz	a2,9230 <dif_uart_enable_rx_timeout+0x18>
    921e:	0185d693          	srli	a3,a1,0x18
    9222:	e699                	bnez	a3,9230 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
    9224:	4210                	lw	a2,0(a2)
    9226:	4501                	li	a0,0
    9228:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    922c:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    922e:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
    9230:	8082                	ret

00009232 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
    9232:	c511                	beqz	a0,923e <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
    9234:	410c                	lw	a1,0(a0)
    9236:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9238:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
    923c:	8082                	ret
    923e:	4509                	li	a0,2
    9240:	8082                	ret

00009242 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
    9242:	86aa                	mv	a3,a0
    9244:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
    9246:	ce99                	beqz	a3,9264 <dif_uart_get_rx_timeout+0x22>
    9248:	cd91                	beqz	a1,9264 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
    924a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    924c:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
    924e:	fff6c513          	not	a0,a3
    9252:	817d                	srli	a0,a0,0x1f
    9254:	c188                	sw	a0,0(a1)
    9256:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
    9258:	c611                	beqz	a2,9264 <dif_uart_get_rx_timeout+0x22>
    925a:	010005b7          	lui	a1,0x1000
    925e:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
    9260:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
    9262:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
    9264:	8082                	ret
	...

00009268 <hmac_sha256_init>:
hmac_sha256_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:15
#include "sw/device/silicon_creator/lib/error.h"

#include "hmac_regs.h"  // Generated.
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"

void hmac_sha256_init(void) {
    9268:	41110537          	lui	a0,0x41110
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    926c:	00052623          	sw	zero,12(a0) # 4111000c <_stack_end+0x310f000c>
    9270:	00052223          	sw	zero,4(a0)
    9274:	55fd                	li	a1,-1
    9276:	c10c                	sw	a1,0(a0)
    9278:	4599                	li	a1,6
    927a:	c54c                	sw	a1,12(a0)
    927c:	4585                	li	a1,1
    927e:	c90c                	sw	a1,16(a0)
hmac_sha256_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:36
  abs_mmio_write32(TOP_EARLGREY_HMAC_BASE_ADDR + HMAC_CFG_REG_OFFSET, reg);

  reg = 0;
  reg = bitfield_bit32_write(reg, HMAC_CMD_HASH_START_BIT, true);
  abs_mmio_write32(TOP_EARLGREY_HMAC_BASE_ADDR + HMAC_CMD_REG_OFFSET, reg);
}
    9280:	8082                	ret

00009282 <hmac_sha256_update>:
hmac_sha256_update():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:39

rom_error_t hmac_sha256_update(const void *data, size_t len) {
  if (data == NULL) {
    9282:	cd31                	beqz	a0,92de <hmac_sha256_update+0x5c>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:45
    return kErrorHmacInvalidArgument;
  }
  const uint8_t *data_sent = (const uint8_t *)data;

  // Individual byte writes are needed if the buffer isn't word aligned.
  for (; len != 0 && (uintptr_t)data_sent & 3; --len) {
    9284:	c19d                	beqz	a1,92aa <hmac_sha256_update+0x28>
    9286:	00357613          	andi	a2,a0,3
    928a:	c205                	beqz	a2,92aa <hmac_sha256_update+0x28>
    928c:	41111637          	lui	a2,0x41111
    9290:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:47
    abs_mmio_write8(TOP_EARLGREY_HMAC_BASE_ADDR + HMAC_MSG_FIFO_REG_OFFSET,
                    *data_sent++);
    9292:	00050703          	lb	a4,0(a0)
    9296:	87ae                	mv	a5,a1
    9298:	0505                	addi	a0,a0,1
abs_mmio_write8():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:58
  *((volatile uint8_t *)addr) = value;
    929a:	80e60023          	sb	a4,-2048(a2) # 41110800 <_stack_end+0x310f0800>
hmac_sha256_update():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:45
  for (; len != 0 && (uintptr_t)data_sent & 3; --len) {
    929e:	15fd                	addi	a1,a1,-1
    92a0:	00d78563          	beq	a5,a3,92aa <hmac_sha256_update+0x28>
    92a4:	00357713          	andi	a4,a0,3
    92a8:	f76d                	bnez	a4,9292 <hmac_sha256_update+0x10>
    92aa:	4611                	li	a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:50
  }

  for (; len >= sizeof(uint32_t); len -= sizeof(uint32_t)) {
    92ac:	00c5ec63          	bltu	a1,a2,92c4 <hmac_sha256_update+0x42>
    92b0:	41111637          	lui	a2,0x41111
    92b4:	468d                	li	a3,3
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:52
    // FIXME: read_32 does not work for unittests.
    uint32_t data_aligned = *(const uint32_t *)data_sent;
    92b6:	4118                	lw	a4,0(a0)
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    92b8:	80e62023          	sw	a4,-2048(a2) # 41110800 <_stack_end+0x310f0800>
hmac_sha256_update():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:50
  for (; len >= sizeof(uint32_t); len -= sizeof(uint32_t)) {
    92bc:	15f1                	addi	a1,a1,-4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:55
    abs_mmio_write32(TOP_EARLGREY_HMAC_BASE_ADDR + HMAC_MSG_FIFO_REG_OFFSET,
                     data_aligned);
    data_sent += sizeof(uint32_t);
    92be:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:50
  for (; len >= sizeof(uint32_t); len -= sizeof(uint32_t)) {
    92c0:	feb6ebe3          	bltu	a3,a1,92b6 <hmac_sha256_update+0x34>
    92c4:	73900613          	li	a2,1849
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:59
  }

  // Handle non-32bit aligned bytes at the end of the buffer.
  for (; len != 0; --len) {
    92c8:	cd99                	beqz	a1,92e6 <hmac_sha256_update+0x64>
    92ca:	411116b7          	lui	a3,0x41111
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:61
    abs_mmio_write8(TOP_EARLGREY_HMAC_BASE_ADDR + HMAC_MSG_FIFO_REG_OFFSET,
                    *data_sent++);
    92ce:	00050703          	lb	a4,0(a0)
    92d2:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:59
  for (; len != 0; --len) {
    92d4:	15fd                	addi	a1,a1,-1
abs_mmio_write8():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:58
  *((volatile uint8_t *)addr) = value;
    92d6:	80e68023          	sb	a4,-2048(a3) # 41110800 <_stack_end+0x310f0800>
hmac_sha256_update():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:59
    92da:	f9f5                	bnez	a1,92ce <hmac_sha256_update+0x4c>
    92dc:	a029                	j	92e6 <hmac_sha256_update+0x64>
    92de:	014d5537          	lui	a0,0x14d5
    92e2:	80350613          	addi	a2,a0,-2045 # 14d4803 <_chip_info_end+0x14c8803>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:64
  }
  return kErrorOk;
}
    92e6:	8532                	mv	a0,a2
    92e8:	8082                	ret

000092ea <hmac_sha256_final>:
hmac_sha256_final():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:67

rom_error_t hmac_sha256_final(hmac_digest_t *digest) {
  if (digest == NULL) {
    92ea:	cd15                	beqz	a0,9326 <hmac_sha256_final+0x3c>
    92ec:	41110637          	lui	a2,0x41110
    92f0:	01060593          	addi	a1,a2,16 # 41110010 <_stack_end+0x310f0010>
    92f4:	4689                	li	a3,2
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    92f6:	c194                	sw	a3,0(a1)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    92f8:	420c                	lw	a1,0(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    92fa:	0015f693          	andi	a3,a1,1
hmac_sha256_final():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:78
  abs_mmio_write32(TOP_EARLGREY_HMAC_BASE_ADDR + HMAC_CMD_REG_OFFSET, reg);

  do {
    reg = abs_mmio_read32(TOP_EARLGREY_HMAC_BASE_ADDR +
                          HMAC_INTR_STATE_REG_OFFSET);
  } while (!bitfield_bit32_read(reg, HMAC_INTR_STATE_HMAC_DONE_BIT));
    92fe:	deed                	beqz	a3,92f8 <hmac_sha256_final+0xe>
    9300:	4601                	li	a2,0
    9302:	411106b7          	lui	a3,0x41110
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
    9306:	c28c                	sw	a1,0(a3)
    9308:	05c68593          	addi	a1,a3,92 # 4111005c <_stack_end+0x310f005c>
    930c:	02000693          	li	a3,32
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
    9310:	4198                	lw	a4,0(a1)
hmac_sha256_final():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:85
                   reg);

  // Read the digest in reverse to preserve the numerical value.
  // The least significant word is at HMAC_DIGEST_7_REG_OFFSET.
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
    digest->digest[i] =
    9312:	00c507b3          	add	a5,a0,a2
    9316:	c398                	sw	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:84
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
    9318:	0611                	addi	a2,a2,4
    931a:	15f1                	addi	a1,a1,-4
    931c:	fed61ae3          	bne	a2,a3,9310 <hmac_sha256_final+0x26>
    9320:	73900513          	li	a0,1849
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/hmac.c:90
        abs_mmio_read32(TOP_EARLGREY_HMAC_BASE_ADDR + HMAC_DIGEST_7_REG_OFFSET -
                        (i * sizeof(uint32_t)));
  }
  return kErrorOk;
}
    9324:	8082                	ret
    9326:	014d5537          	lui	a0,0x14d5
    932a:	80350513          	addi	a0,a0,-2045 # 14d4803 <_chip_info_end+0x14c8803>
    932e:	8082                	ret

00009330 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
    9330:	88aa                	mv	a7,a0
    9332:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
    9334:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
    9336:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
    9338:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
    933a:	20069863          	bnez	a3,954a <__udivdi3+0x21a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
    933e:	66a9                	lui	a3,0xa
    9340:	a4468693          	addi	a3,a3,-1468 # 9a44 <__clz_tab>
    9344:	0cc5f063          	bgeu	a1,a2,9404 <__udivdi3+0xd4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
    9348:	6741                	lui	a4,0x10
    934a:	0ae67663          	bgeu	a2,a4,93f6 <__udivdi3+0xc6>
    934e:	0ff00713          	li	a4,255
    9352:	00c73733          	sltu	a4,a4,a2
    9356:	070e                	slli	a4,a4,0x3
    9358:	00e65533          	srl	a0,a2,a4
    935c:	96aa                	add	a3,a3,a0
    935e:	0006c683          	lbu	a3,0(a3)
    9362:	02000513          	li	a0,32
    9366:	9736                	add	a4,a4,a3
    9368:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
    936c:	00e50c63          	beq	a0,a4,9384 <__udivdi3+0x54>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
    9370:	00d797b3          	sll	a5,a5,a3
    9374:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
    9378:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
    937c:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
    9380:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
    9384:	01085893          	srli	a7,a6,0x10
    9388:	0315d7b3          	divu	a5,a1,a7
    938c:	01081613          	slli	a2,a6,0x10
    9390:	8241                	srli	a2,a2,0x10
    9392:	01035713          	srli	a4,t1,0x10
    9396:	0315f6b3          	remu	a3,a1,a7
    939a:	853e                	mv	a0,a5
    939c:	02f605b3          	mul	a1,a2,a5
    93a0:	06c2                	slli	a3,a3,0x10
    93a2:	8f55                	or	a4,a4,a3
    93a4:	00b77c63          	bgeu	a4,a1,93bc <__udivdi3+0x8c>
    93a8:	9742                	add	a4,a4,a6
    93aa:	fff78513          	addi	a0,a5,-1
    93ae:	01076763          	bltu	a4,a6,93bc <__udivdi3+0x8c>
    93b2:	00b77563          	bgeu	a4,a1,93bc <__udivdi3+0x8c>
    93b6:	ffe78513          	addi	a0,a5,-2
    93ba:	9742                	add	a4,a4,a6
    93bc:	8f0d                	sub	a4,a4,a1
    93be:	031777b3          	remu	a5,a4,a7
    93c2:	0342                	slli	t1,t1,0x10
    93c4:	01035313          	srli	t1,t1,0x10
    93c8:	03175733          	divu	a4,a4,a7
    93cc:	07c2                	slli	a5,a5,0x10
    93ce:	0067e333          	or	t1,a5,t1
    93d2:	02e606b3          	mul	a3,a2,a4
    93d6:	863a                	mv	a2,a4
    93d8:	00d37b63          	bgeu	t1,a3,93ee <__udivdi3+0xbe>
    93dc:	9342                	add	t1,t1,a6
    93de:	fff70613          	addi	a2,a4,-1 # ffff <_chip_info_end+0x3fff>
    93e2:	01036663          	bltu	t1,a6,93ee <__udivdi3+0xbe>
    93e6:	00d37463          	bgeu	t1,a3,93ee <__udivdi3+0xbe>
    93ea:	ffe70613          	addi	a2,a4,-2
    93ee:	0542                	slli	a0,a0,0x10
    93f0:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
    93f2:	4581                	li	a1,0
    93f4:	a85d                	j	94aa <__udivdi3+0x17a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
    93f6:	01000537          	lui	a0,0x1000
    93fa:	4741                	li	a4,16
    93fc:	f4a66ee3          	bltu	a2,a0,9358 <__udivdi3+0x28>
    9400:	4761                	li	a4,24
    9402:	bf99                	j	9358 <__udivdi3+0x28>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
    9404:	e601                	bnez	a2,940c <__udivdi3+0xdc>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
    9406:	4705                	li	a4,1
    9408:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
    940c:	6741                	lui	a4,0x10
    940e:	08e87f63          	bgeu	a6,a4,94ac <__udivdi3+0x17c>
    9412:	0ff00713          	li	a4,255
    9416:	01077363          	bgeu	a4,a6,941c <__udivdi3+0xec>
    941a:	4521                	li	a0,8
    941c:	00a85733          	srl	a4,a6,a0
    9420:	96ba                	add	a3,a3,a4
    9422:	0006c703          	lbu	a4,0(a3)
    9426:	02000613          	li	a2,32
    942a:	972a                	add	a4,a4,a0
    942c:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
    9430:	08e61563          	bne	a2,a4,94ba <__udivdi3+0x18a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
    9434:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
    9438:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
    943a:	01085893          	srli	a7,a6,0x10
    943e:	01081613          	slli	a2,a6,0x10
    9442:	8241                	srli	a2,a2,0x10
    9444:	01035713          	srli	a4,t1,0x10
    9448:	0317f6b3          	remu	a3,a5,a7
    944c:	0317d7b3          	divu	a5,a5,a7
    9450:	06c2                	slli	a3,a3,0x10
    9452:	8f55                	or	a4,a4,a3
    9454:	02f60e33          	mul	t3,a2,a5
    9458:	853e                	mv	a0,a5
    945a:	01c77c63          	bgeu	a4,t3,9472 <__udivdi3+0x142>
    945e:	9742                	add	a4,a4,a6
    9460:	fff78513          	addi	a0,a5,-1
    9464:	01076763          	bltu	a4,a6,9472 <__udivdi3+0x142>
    9468:	01c77563          	bgeu	a4,t3,9472 <__udivdi3+0x142>
    946c:	ffe78513          	addi	a0,a5,-2
    9470:	9742                	add	a4,a4,a6
    9472:	41c70733          	sub	a4,a4,t3
    9476:	031777b3          	remu	a5,a4,a7
    947a:	0342                	slli	t1,t1,0x10
    947c:	01035313          	srli	t1,t1,0x10
    9480:	03175733          	divu	a4,a4,a7
    9484:	07c2                	slli	a5,a5,0x10
    9486:	0067e333          	or	t1,a5,t1
    948a:	02e606b3          	mul	a3,a2,a4
    948e:	863a                	mv	a2,a4
    9490:	00d37b63          	bgeu	t1,a3,94a6 <__udivdi3+0x176>
    9494:	9342                	add	t1,t1,a6
    9496:	fff70613          	addi	a2,a4,-1 # ffff <_chip_info_end+0x3fff>
    949a:	01036663          	bltu	t1,a6,94a6 <__udivdi3+0x176>
    949e:	00d37463          	bgeu	t1,a3,94a6 <__udivdi3+0x176>
    94a2:	ffe70613          	addi	a2,a4,-2
    94a6:	0542                	slli	a0,a0,0x10
    94a8:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
    94aa:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
    94ac:	01000737          	lui	a4,0x1000
    94b0:	4541                	li	a0,16
    94b2:	f6e865e3          	bltu	a6,a4,941c <__udivdi3+0xec>
    94b6:	4561                	li	a0,24
    94b8:	b795                	j	941c <__udivdi3+0xec>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
    94ba:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
    94be:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
    94c2:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
    94c6:	00d797b3          	sll	a5,a5,a3
    94ca:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
    94ce:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
    94d2:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
    94d6:	0315f733          	remu	a4,a1,a7
    94da:	01081793          	slli	a5,a6,0x10
    94de:	83c1                	srli	a5,a5,0x10
    94e0:	01065513          	srli	a0,a2,0x10
    94e4:	0315d5b3          	divu	a1,a1,a7
    94e8:	0742                	slli	a4,a4,0x10
    94ea:	8f49                	or	a4,a4,a0
    94ec:	02b786b3          	mul	a3,a5,a1
    94f0:	852e                	mv	a0,a1
    94f2:	00d77c63          	bgeu	a4,a3,950a <__udivdi3+0x1da>
    94f6:	9742                	add	a4,a4,a6
    94f8:	fff58513          	addi	a0,a1,-1 # ffffff <_chip_info_end+0xff3fff>
    94fc:	01076763          	bltu	a4,a6,950a <__udivdi3+0x1da>
    9500:	00d77563          	bgeu	a4,a3,950a <__udivdi3+0x1da>
    9504:	ffe58513          	addi	a0,a1,-2
    9508:	9742                	add	a4,a4,a6
    950a:	40d706b3          	sub	a3,a4,a3
    950e:	0316f733          	remu	a4,a3,a7
    9512:	0642                	slli	a2,a2,0x10
    9514:	8241                	srli	a2,a2,0x10
    9516:	0316d6b3          	divu	a3,a3,a7
    951a:	0742                	slli	a4,a4,0x10
    951c:	02d788b3          	mul	a7,a5,a3
    9520:	00c767b3          	or	a5,a4,a2
    9524:	8736                	mv	a4,a3
    9526:	0117fc63          	bgeu	a5,a7,953e <__udivdi3+0x20e>
    952a:	97c2                	add	a5,a5,a6
    952c:	fff68713          	addi	a4,a3,-1
    9530:	0107e763          	bltu	a5,a6,953e <__udivdi3+0x20e>
    9534:	0117f563          	bgeu	a5,a7,953e <__udivdi3+0x20e>
    9538:	ffe68713          	addi	a4,a3,-2
    953c:	97c2                	add	a5,a5,a6
    953e:	01051593          	slli	a1,a0,0x10
    9542:	411787b3          	sub	a5,a5,a7
    9546:	8dd9                	or	a1,a1,a4
    9548:	bdcd                	j	943a <__udivdi3+0x10a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
    954a:	14d5e163          	bltu	a1,a3,968c <__udivdi3+0x35c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
    954e:	6741                	lui	a4,0x10
    9550:	02e6fe63          	bgeu	a3,a4,958c <__udivdi3+0x25c>
    9554:	0ff00713          	li	a4,255
    9558:	00d735b3          	sltu	a1,a4,a3
    955c:	058e                	slli	a1,a1,0x3
    955e:	6729                	lui	a4,0xa
    9560:	00b6d533          	srl	a0,a3,a1
    9564:	a4470713          	addi	a4,a4,-1468 # 9a44 <__clz_tab>
    9568:	972a                	add	a4,a4,a0
    956a:	00074703          	lbu	a4,0(a4)
    956e:	02000513          	li	a0,32
    9572:	972e                	add	a4,a4,a1
    9574:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
    9578:	02e51163          	bne	a0,a4,959a <__udivdi3+0x26a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
    957c:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
    957e:	f2f6e6e3          	bltu	a3,a5,94aa <__udivdi3+0x17a>
    9582:	00c8b533          	sltu	a0,a7,a2
    9586:	00154513          	xori	a0,a0,1
    958a:	b705                	j	94aa <__udivdi3+0x17a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
    958c:	01000737          	lui	a4,0x1000
    9590:	45c1                	li	a1,16
    9592:	fce6e6e3          	bltu	a3,a4,955e <__udivdi3+0x22e>
    9596:	45e1                	li	a1,24
    9598:	b7d9                	j	955e <__udivdi3+0x22e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
    959a:	00e65333          	srl	t1,a2,a4
    959e:	00b696b3          	sll	a3,a3,a1
    95a2:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    95a6:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
    95aa:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
    95ae:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    95b2:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
    95b6:	00b797b3          	sll	a5,a5,a1
    95ba:	00e8d733          	srl	a4,a7,a4
    95be:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    95c2:	01031793          	slli	a5,t1,0x10
    95c6:	83c1                	srli	a5,a5,0x10
    95c8:	01085713          	srli	a4,a6,0x10
    95cc:	02a65633          	divu	a2,a2,a0
    95d0:	06c2                	slli	a3,a3,0x10
    95d2:	8f55                	or	a4,a4,a3
    95d4:	02c78f33          	mul	t5,a5,a2
    95d8:	8e32                	mv	t3,a2
    95da:	01e77c63          	bgeu	a4,t5,95f2 <__udivdi3+0x2c2>
    95de:	971a                	add	a4,a4,t1
    95e0:	fff60e13          	addi	t3,a2,-1
    95e4:	00676763          	bltu	a4,t1,95f2 <__udivdi3+0x2c2>
    95e8:	01e77563          	bgeu	a4,t5,95f2 <__udivdi3+0x2c2>
    95ec:	ffe60e13          	addi	t3,a2,-2
    95f0:	971a                	add	a4,a4,t1
    95f2:	41e70733          	sub	a4,a4,t5
    95f6:	02a776b3          	remu	a3,a4,a0
    95fa:	02a75733          	divu	a4,a4,a0
    95fe:	06c2                	slli	a3,a3,0x10
    9600:	02e78633          	mul	a2,a5,a4
    9604:	01081793          	slli	a5,a6,0x10
    9608:	83c1                	srli	a5,a5,0x10
    960a:	8fd5                	or	a5,a5,a3
    960c:	86ba                	mv	a3,a4
    960e:	00c7fc63          	bgeu	a5,a2,9626 <__udivdi3+0x2f6>
    9612:	979a                	add	a5,a5,t1
    9614:	fff70693          	addi	a3,a4,-1 # ffffff <_chip_info_end+0xff3fff>
    9618:	0067e763          	bltu	a5,t1,9626 <__udivdi3+0x2f6>
    961c:	00c7f563          	bgeu	a5,a2,9626 <__udivdi3+0x2f6>
    9620:	ffe70693          	addi	a3,a4,-2
    9624:	979a                	add	a5,a5,t1
    9626:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    962a:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    962c:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    962e:	fffe0693          	addi	a3,t3,-1 # ffff <_chip_info_end+0x3fff>
    9632:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    9636:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    9638:	00def6b3          	and	a3,t4,a3
    963c:	01055613          	srli	a2,a0,0x10
    9640:	010ede93          	srli	t4,t4,0x10
    9644:	02d80333          	mul	t1,a6,a3
    9648:	02d606b3          	mul	a3,a2,a3
    964c:	01035713          	srli	a4,t1,0x10
    9650:	03d80833          	mul	a6,a6,t4
    9654:	9836                	add	a6,a6,a3
    9656:	9742                	add	a4,a4,a6
    9658:	03d60633          	mul	a2,a2,t4
    965c:	00d77363          	bgeu	a4,a3,9662 <__udivdi3+0x332>
    9660:	9672                	add	a2,a2,t3
    9662:	01075693          	srli	a3,a4,0x10
    9666:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
    9668:	02c7e063          	bltu	a5,a2,9688 <__udivdi3+0x358>
    966c:	d8c793e3          	bne	a5,a2,93f2 <__udivdi3+0xc2>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    9670:	67c1                	lui	a5,0x10
    9672:	17fd                	addi	a5,a5,-1
    9674:	8f7d                	and	a4,a4,a5
    9676:	0742                	slli	a4,a4,0x10
    9678:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
    967c:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    9680:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
    9682:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
    9684:	e2e8f3e3          	bgeu	a7,a4,94aa <__udivdi3+0x17a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
    9688:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
    968a:	b3a5                	j	93f2 <__udivdi3+0xc2>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
    968c:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
    968e:	4501                	li	a0,0
    9690:	bd29                	j	94aa <__udivdi3+0x17a>
