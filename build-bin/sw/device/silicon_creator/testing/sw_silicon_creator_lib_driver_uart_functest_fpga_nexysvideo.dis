
sw/device/silicon_creator/testing/sw_silicon_creator_lib_driver_uart_functest_fpga_nexysvideo.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000e0  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         000013ce  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000538  20001550  20001550  00002550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20001a88  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20001a90  00003008  2**2
                  ALLOC
  8 .logs.fields  000000f0  00010000  00010000  00003008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000063b7  00000000  00000000  0000311e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001403  00000000  00000000  000094d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003603  00000000  00000000  0000a970  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000321e  00000000  00000000  0000df73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d0  00000000  00000000  00011191  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001c62  00000000  00000000  00011361  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000006b4  00000000  00000000  00012fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2899                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2091                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	a3860613          	addi	a2,a2,-1480 # 20001a88 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2889                	jal	200000aa <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	52b000ef          	jal	ra,20000da8 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	7750006f          	j	20000ff6 <abort>

20000086 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000086:	00b57e63          	bgeu	a0,a1,200000a2 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
2000008a:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008e:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000092:	00029b63          	bnez	t0,200000a8 <L_clear_error>

20000096 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000096:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
2000009a:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009c:	feb56de3          	bltu	a0,a1,20000096 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
200000a0:	8082                	ret

200000a2 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a2:	00b51363          	bne	a0,a1,200000a8 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a6:	8082                	ret

200000a8 <L_clear_error>:
	...

200000aa <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000aa:	02b57963          	bgeu	a0,a1,200000dc <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ae:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b2:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b6:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000ba:	02029463          	bnez	t0,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000be:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c2:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c6:	0062ee63          	bltu	t0,t1,200000e2 <L_copy_error>

200000ca <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000ca:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000ce:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000d0:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d4:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d6:	feb56ae3          	bltu	a0,a1,200000ca <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000da:	8082                	ret

200000dc <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000dc:	00b51363          	bne	a0,a1,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000e0:	8082                	ret

200000e2 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0800006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1bc0006f          	j	200002c8 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2040006f          	j	20000320 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	24c0006f          	j	20000378 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000182:	de06                	sw	ra,60(sp)
20000184:	dc16                	sw	t0,56(sp)
20000186:	da1a                	sw	t1,52(sp)
20000188:	d81e                	sw	t2,48(sp)
2000018a:	d62a                	sw	a0,44(sp)
2000018c:	d42e                	sw	a1,40(sp)
2000018e:	d232                	sw	a2,36(sp)
20000190:	d036                	sw	a3,32(sp)
20000192:	ce3a                	sw	a4,28(sp)
20000194:	cc3e                	sw	a5,24(sp)
20000196:	ca42                	sw	a6,20(sp)
20000198:	c846                	sw	a7,16(sp)
2000019a:	c672                	sw	t3,12(sp)
2000019c:	c476                	sw	t4,8(sp)
2000019e:	c27a                	sw	t5,4(sp)
200001a0:	c07e                	sw	t6,0(sp)
200001a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200001a6:	897d                	andi	a0,a0,31
200001a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200001aa:	00a5dc63          	bge	a1,a0,200001c2 <handler_exception+0x42>
200001ae:	4599                	li	a1,6
200001b0:	02a5c263          	blt	a1,a0,200001d4 <handler_exception+0x54>
200001b4:	458d                	li	a1,3
200001b6:	02b50c63          	beq	a0,a1,200001ee <handler_exception+0x6e>
200001ba:	4595                	li	a1,5
200001bc:	02b50763          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001c0:	a015                	j	200001e4 <handler_exception+0x64>
200001c2:	c115                	beqz	a0,200001e6 <handler_exception+0x66>
200001c4:	4585                	li	a1,1
200001c6:	02b50063          	beq	a0,a1,200001e6 <handler_exception+0x66>
200001ca:	4589                	li	a1,2
200001cc:	00b51c63          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200001d0:	2095                	jal	20000234 <handler_instr_ill_fault>
200001d2:	a839                	j	200001f0 <handler_exception+0x70>
200001d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200001d6:	00b50a63          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001da:	45ad                	li	a1,11
200001dc:	00b51463          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200001e0:	2845                	jal	20000290 <handler_ecall>
200001e2:	a039                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200001e4:	a001                	j	200001e4 <handler_exception+0x64>
200001e6:	2805                	jal	20000216 <handler_instr_acc_fault>
200001e8:	a021                	j	200001f0 <handler_exception+0x70>
200001ea:	2061                	jal	20000272 <handler_lsu_fault>
200001ec:	a011                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200001ee:	209d                	jal	20000254 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200001f0:	4f82                	lw	t6,0(sp)
200001f2:	4f12                	lw	t5,4(sp)
200001f4:	4ea2                	lw	t4,8(sp)
200001f6:	4e32                	lw	t3,12(sp)
200001f8:	48c2                	lw	a7,16(sp)
200001fa:	4852                	lw	a6,20(sp)
200001fc:	47e2                	lw	a5,24(sp)
200001fe:	4772                	lw	a4,28(sp)
20000200:	5682                	lw	a3,32(sp)
20000202:	5612                	lw	a2,36(sp)
20000204:	55a2                	lw	a1,40(sp)
20000206:	5532                	lw	a0,44(sp)
20000208:	53c2                	lw	t2,48(sp)
2000020a:	5352                	lw	t1,52(sp)
2000020c:	52e2                	lw	t0,56(sp)
2000020e:	50f2                	lw	ra,60(sp)
20000210:	6121                	addi	sp,sp,64
20000212:	30200073          	mret

20000216 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20000216:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20000218:	de06                	sw	ra,60(sp)
2000021a:	dc22                	sw	s0,56(sp)
2000021c:	00001597          	auipc	a1,0x1
20000220:	61c58593          	addi	a1,a1,1564 # 20001838 <__clz_tab+0x160>
20000224:	0040                	addi	s0,sp,4
20000226:	03400613          	li	a2,52
2000022a:	8522                	mv	a0,s0
2000022c:	5dd000ef          	jal	ra,20001008 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
20000230:	8522                	mv	a0,s0
20000232:	2a71                	jal	200003ce <print_exc_msg>

20000234 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20000234:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20000236:	c686                	sw	ra,76(sp)
20000238:	c4a2                	sw	s0,72(sp)
2000023a:	00001597          	auipc	a1,0x1
2000023e:	63258593          	addi	a1,a1,1586 # 2000186c <__clz_tab+0x194>
20000242:	00d10413          	addi	s0,sp,13
20000246:	03b00613          	li	a2,59
2000024a:	8522                	mv	a0,s0
2000024c:	5bd000ef          	jal	ra,20001008 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20000250:	8522                	mv	a0,s0
20000252:	2ab5                	jal	200003ce <print_exc_msg>

20000254 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000254:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000256:	de06                	sw	ra,60(sp)
20000258:	dc22                	sw	s0,56(sp)
2000025a:	00001597          	auipc	a1,0x1
2000025e:	64d58593          	addi	a1,a1,1613 # 200018a7 <__clz_tab+0x1cf>
20000262:	840a                	mv	s0,sp
20000264:	03800613          	li	a2,56
20000268:	8522                	mv	a0,s0
2000026a:	59f000ef          	jal	ra,20001008 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
2000026e:	8522                	mv	a0,s0
20000270:	2ab9                	jal	200003ce <print_exc_msg>

20000272 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20000272:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20000274:	de06                	sw	ra,60(sp)
20000276:	dc22                	sw	s0,56(sp)
20000278:	00001597          	auipc	a1,0x1
2000027c:	66758593          	addi	a1,a1,1639 # 200018df <__clz_tab+0x207>
20000280:	0020                	addi	s0,sp,8
20000282:	03000613          	li	a2,48
20000286:	8522                	mv	a0,s0
20000288:	581000ef          	jal	ra,20001008 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000028c:	8522                	mv	a0,s0
2000028e:	2281                	jal	200003ce <print_exc_msg>

20000290 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000290:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20000292:	ce06                	sw	ra,28(sp)
20000294:	cc22                	sw	s0,24(sp)
20000296:	00001517          	auipc	a0,0x1
2000029a:	41250513          	addi	a0,a0,1042 # 200016a8 <kDeviceLogBypassUartAddress>
2000029e:	4108                	lw	a0,0(a0)
200002a0:	c901                	beqz	a0,200002b0 <handler_ecall+0x20>
200002a2:	e0010517          	auipc	a0,0xe0010
200002a6:	d9a50513          	addi	a0,a0,-614 # 1003c <handler_ecall.kLogFields>
200002aa:	4581                	li	a1,0
200002ac:	2c2d                	jal	200004e6 <base_log_internal_dv>
200002ae:	a821                	j	200002c6 <handler_ecall+0x36>
200002b0:	00001597          	auipc	a1,0x1
200002b4:	2dc58593          	addi	a1,a1,732 # 2000158c <__udivdi3+0x3a4>
200002b8:	840a                	mv	s0,sp
200002ba:	4651                	li	a2,20
200002bc:	8522                	mv	a0,s0
200002be:	54b000ef          	jal	ra,20001008 <memcpy>
200002c2:	8522                	mv	a0,s0
200002c4:	2aa5                	jal	2000043c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200002c6:	a001                	j	200002c6 <handler_ecall+0x36>

200002c8 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200002c8:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200002ca:	ce86                	sw	ra,92(sp)
200002cc:	cc96                	sw	t0,88(sp)
200002ce:	ca9a                	sw	t1,84(sp)
200002d0:	c89e                	sw	t2,80(sp)
200002d2:	c6a2                	sw	s0,76(sp)
200002d4:	c4aa                	sw	a0,72(sp)
200002d6:	c2ae                	sw	a1,68(sp)
200002d8:	c0b2                	sw	a2,64(sp)
200002da:	de36                	sw	a3,60(sp)
200002dc:	dc3a                	sw	a4,56(sp)
200002de:	da3e                	sw	a5,52(sp)
200002e0:	d842                	sw	a6,48(sp)
200002e2:	d646                	sw	a7,44(sp)
200002e4:	d472                	sw	t3,40(sp)
200002e6:	d276                	sw	t4,36(sp)
200002e8:	d07a                	sw	t5,32(sp)
200002ea:	ce7e                	sw	t6,28(sp)
200002ec:	00001517          	auipc	a0,0x1
200002f0:	3bc50513          	addi	a0,a0,956 # 200016a8 <kDeviceLogBypassUartAddress>
200002f4:	4108                	lw	a0,0(a0)
200002f6:	c901                	beqz	a0,20000306 <handler_irq_software+0x3e>
200002f8:	e0010517          	auipc	a0,0xe0010
200002fc:	d0850513          	addi	a0,a0,-760 # 10000 <_dv_log_offset>
20000300:	4581                	li	a1,0
20000302:	22d5                	jal	200004e6 <base_log_internal_dv>
20000304:	a821                	j	2000031c <handler_irq_software+0x54>
20000306:	00001597          	auipc	a1,0x1
2000030a:	24a58593          	addi	a1,a1,586 # 20001550 <__udivdi3+0x368>
2000030e:	0020                	addi	s0,sp,8
20000310:	4651                	li	a2,20
20000312:	8522                	mv	a0,s0
20000314:	4f5000ef          	jal	ra,20001008 <memcpy>
20000318:	8522                	mv	a0,s0
2000031a:	220d                	jal	2000043c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000031c:	a001                	j	2000031c <handler_irq_software+0x54>
2000031e:	0001                	nop

20000320 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
20000320:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
20000322:	ce86                	sw	ra,92(sp)
20000324:	cc96                	sw	t0,88(sp)
20000326:	ca9a                	sw	t1,84(sp)
20000328:	c89e                	sw	t2,80(sp)
2000032a:	c6a2                	sw	s0,76(sp)
2000032c:	c4aa                	sw	a0,72(sp)
2000032e:	c2ae                	sw	a1,68(sp)
20000330:	c0b2                	sw	a2,64(sp)
20000332:	de36                	sw	a3,60(sp)
20000334:	dc3a                	sw	a4,56(sp)
20000336:	da3e                	sw	a5,52(sp)
20000338:	d842                	sw	a6,48(sp)
2000033a:	d646                	sw	a7,44(sp)
2000033c:	d472                	sw	t3,40(sp)
2000033e:	d276                	sw	t4,36(sp)
20000340:	d07a                	sw	t5,32(sp)
20000342:	ce7e                	sw	t6,28(sp)
20000344:	00001517          	auipc	a0,0x1
20000348:	36450513          	addi	a0,a0,868 # 200016a8 <kDeviceLogBypassUartAddress>
2000034c:	4108                	lw	a0,0(a0)
2000034e:	c901                	beqz	a0,2000035e <handler_irq_timer+0x3e>
20000350:	e0010517          	auipc	a0,0xe0010
20000354:	cc450513          	addi	a0,a0,-828 # 10014 <handler_irq_timer.kLogFields>
20000358:	4581                	li	a1,0
2000035a:	2271                	jal	200004e6 <base_log_internal_dv>
2000035c:	a821                	j	20000374 <handler_irq_timer+0x54>
2000035e:	00001597          	auipc	a1,0x1
20000362:	20658593          	addi	a1,a1,518 # 20001564 <__udivdi3+0x37c>
20000366:	0020                	addi	s0,sp,8
20000368:	4651                	li	a2,20
2000036a:	8522                	mv	a0,s0
2000036c:	49d000ef          	jal	ra,20001008 <memcpy>
20000370:	8522                	mv	a0,s0
20000372:	20e9                	jal	2000043c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000374:	a001                	j	20000374 <handler_irq_timer+0x54>
20000376:	0001                	nop

20000378 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000378:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
2000037a:	ce86                	sw	ra,92(sp)
2000037c:	cc96                	sw	t0,88(sp)
2000037e:	ca9a                	sw	t1,84(sp)
20000380:	c89e                	sw	t2,80(sp)
20000382:	c6a2                	sw	s0,76(sp)
20000384:	c4aa                	sw	a0,72(sp)
20000386:	c2ae                	sw	a1,68(sp)
20000388:	c0b2                	sw	a2,64(sp)
2000038a:	de36                	sw	a3,60(sp)
2000038c:	dc3a                	sw	a4,56(sp)
2000038e:	da3e                	sw	a5,52(sp)
20000390:	d842                	sw	a6,48(sp)
20000392:	d646                	sw	a7,44(sp)
20000394:	d472                	sw	t3,40(sp)
20000396:	d276                	sw	t4,36(sp)
20000398:	d07a                	sw	t5,32(sp)
2000039a:	ce7e                	sw	t6,28(sp)
2000039c:	00001517          	auipc	a0,0x1
200003a0:	30c50513          	addi	a0,a0,780 # 200016a8 <kDeviceLogBypassUartAddress>
200003a4:	4108                	lw	a0,0(a0)
200003a6:	c901                	beqz	a0,200003b6 <handler_irq_external+0x3e>
200003a8:	e0010517          	auipc	a0,0xe0010
200003ac:	c8050513          	addi	a0,a0,-896 # 10028 <handler_irq_external.kLogFields>
200003b0:	4581                	li	a1,0
200003b2:	2a15                	jal	200004e6 <base_log_internal_dv>
200003b4:	a821                	j	200003cc <handler_irq_external+0x54>
200003b6:	00001597          	auipc	a1,0x1
200003ba:	1c258593          	addi	a1,a1,450 # 20001578 <__udivdi3+0x390>
200003be:	0020                	addi	s0,sp,8
200003c0:	4651                	li	a2,20
200003c2:	8522                	mv	a0,s0
200003c4:	445000ef          	jal	ra,20001008 <memcpy>
200003c8:	8522                	mv	a0,s0
200003ca:	288d                	jal	2000043c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200003cc:	a001                	j	200003cc <handler_irq_external+0x54>

200003ce <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200003ce:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200003d0:	ce06                	sw	ra,28(sp)
200003d2:	cc22                	sw	s0,24(sp)
200003d4:	ca26                	sw	s1,20(sp)
200003d6:	00001597          	auipc	a1,0x1
200003da:	2d258593          	addi	a1,a1,722 # 200016a8 <kDeviceLogBypassUartAddress>
200003de:	418c                	lw	a1,0(a1)
200003e0:	842a                	mv	s0,a0
200003e2:	c18d                	beqz	a1,20000404 <print_exc_msg+0x36>
200003e4:	e0010517          	auipc	a0,0xe0010
200003e8:	c6c50513          	addi	a0,a0,-916 # 10050 <print_exc_msg.kLogFields>
200003ec:	4585                	li	a1,1
200003ee:	8622                	mv	a2,s0
200003f0:	28dd                	jal	200004e6 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200003f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200003f6:	e0010517          	auipc	a0,0xe0010
200003fa:	c6e50513          	addi	a0,a0,-914 # 10064 <print_exc_msg.kLogFields.6>
200003fe:	4585                	li	a1,1
20000400:	20dd                	jal	200004e6 <base_log_internal_dv>
20000402:	a81d                	j	20000438 <print_exc_msg+0x6a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000404:	00001597          	auipc	a1,0x1
20000408:	19c58593          	addi	a1,a1,412 # 200015a0 <__udivdi3+0x3b8>
2000040c:	848a                	mv	s1,sp
2000040e:	4651                	li	a2,20
20000410:	8526                	mv	a0,s1
20000412:	3f7000ef          	jal	ra,20001008 <memcpy>
20000416:	8526                	mv	a0,s1
20000418:	85a2                	mv	a1,s0
2000041a:	200d                	jal	2000043c <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000041c:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000420:	00001597          	auipc	a1,0x1
20000424:	19458593          	addi	a1,a1,404 # 200015b4 <__udivdi3+0x3cc>
20000428:	848a                	mv	s1,sp
2000042a:	4651                	li	a2,20
2000042c:	8526                	mv	a0,s1
2000042e:	3db000ef          	jal	ra,20001008 <memcpy>
20000432:	8526                	mv	a0,s1
20000434:	85a2                	mv	a1,s0
20000436:	2019                	jal	2000043c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20000438:	a001                	j	20000438 <print_exc_msg+0x6a>
	...

2000043c <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
2000043c:	7139                	addi	sp,sp,-64
2000043e:	ce06                	sw	ra,28(sp)
20000440:	cc22                	sw	s0,24(sp)
20000442:	ca26                	sw	s1,20(sp)
20000444:	c84a                	sw	s2,16(sp)
20000446:	892a                	mv	s2,a0
20000448:	de46                	sw	a7,60(sp)
2000044a:	dc42                	sw	a6,56(sp)
2000044c:	da3e                	sw	a5,52(sp)
2000044e:	d83a                	sw	a4,48(sp)
20000450:	d636                	sw	a3,44(sp)
20000452:	d432                	sw	a2,40(sp)
20000454:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000456:	4144                	lw	s1,4(a0)
20000458:	80000537          	lui	a0,0x80000
2000045c:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffe577>
20000460:	8526                	mv	a0,s1
20000462:	4581                	li	a1,0
20000464:	3f5000ef          	jal	ra,20001058 <memchr>
20000468:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
2000046c:	02f00593          	li	a1,47
20000470:	8526                	mv	a0,s1
20000472:	3ff000ef          	jal	ra,20001070 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000476:	00092583          	lw	a1,0(s2)
2000047a:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
2000047c:	00b66b63          	bltu	a2,a1,20000492 <base_log_internal_core+0x56>
20000480:	058a                	slli	a1,a1,0x2
20000482:	00001617          	auipc	a2,0x1
20000486:	14660613          	addi	a2,a2,326 # 200015c8 <__udivdi3+0x3e0>
2000048a:	95b2                	add	a1,a1,a2
2000048c:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
2000048e:	e519                	bnez	a0,2000049c <base_log_internal_core+0x60>
20000490:	a801                	j	200004a0 <base_log_internal_core+0x64>
20000492:	00001597          	auipc	a1,0x1
20000496:	4c758593          	addi	a1,a1,1223 # 20001959 <__clz_tab+0x281>
2000049a:	c119                	beqz	a0,200004a0 <base_log_internal_core+0x64>
2000049c:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
200004a0:	f0000417          	auipc	s0,0xf0000
200004a4:	b6840413          	addi	s0,s0,-1176 # 10000008 <_data_end>
200004a8:	00045603          	lhu	a2,0(s0)
200004ac:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200004b0:	00001517          	auipc	a0,0x1
200004b4:	49350513          	addi	a0,a0,1171 # 20001943 <__clz_tab+0x26b>
200004b8:	86a6                	mv	a3,s1
200004ba:	28d1                	jal	2000058e <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
200004bc:	00041503          	lh	a0,0(s0)
200004c0:	0505                	addi	a0,a0,1
200004c2:	00a41023          	sh	a0,0(s0)
200004c6:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
200004c8:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
200004ca:	01092503          	lw	a0,16(s2)
200004ce:	28c5                	jal	200005be <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
200004d0:	00001517          	auipc	a0,0x1
200004d4:	54450513          	addi	a0,a0,1348 # 20001a14 <__clz_tab+0x33c>
200004d8:	285d                	jal	2000058e <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
200004da:	4942                	lw	s2,16(sp)
200004dc:	44d2                	lw	s1,20(sp)
200004de:	4462                	lw	s0,24(sp)
200004e0:	40f2                	lw	ra,28(sp)
200004e2:	6121                	addi	sp,sp,64
200004e4:	8082                	ret

200004e6 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
200004e6:	1101                	addi	sp,sp,-32
200004e8:	ce46                	sw	a7,28(sp)
200004ea:	cc42                	sw	a6,24(sp)
200004ec:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
200004ee:	00001797          	auipc	a5,0x1
200004f2:	1ba78793          	addi	a5,a5,442 # 200016a8 <kDeviceLogBypassUartAddress>
200004f6:	439c                	lw	a5,0(a5)
200004f8:	c83a                	sw	a4,16(sp)
200004fa:	c636                	sw	a3,12(sp)
200004fc:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200004fe:	c388                	sw	a0,0(a5)
20000500:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000502:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000504:	c989                	beqz	a1,20000516 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000506:	4512                	lw	a0,4(sp)
20000508:	00450613          	addi	a2,a0,4
2000050c:	c232                	sw	a2,4(sp)
2000050e:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000510:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000512:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000514:	f9ed                	bnez	a1,20000506 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000516:	6105                	addi	sp,sp,32
20000518:	8082                	ret
	...

2000051c <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
2000051c:	e589                	bnez	a1,20000526 <base_set_stdout+0xa>
2000051e:	00000597          	auipc	a1,0x0
20000522:	01658593          	addi	a1,a1,22 # 20000534 <base_dev_null>
20000526:	f0000617          	auipc	a2,0xf0000
2000052a:	ada60613          	addi	a2,a2,-1318 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
2000052e:	c208                	sw	a0,0(a2)
20000530:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20000532:	8082                	ret

20000534 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20000534:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20000536:	8082                	ret

20000538 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20000538:	f0000597          	auipc	a1,0xf0000
2000053c:	ac858593          	addi	a1,a1,-1336 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20000540:	c188                	sw	a0,0(a1)
20000542:	00000517          	auipc	a0,0x0
20000546:	00c50513          	addi	a0,a0,12 # 2000054e <base_dev_uart>
2000054a:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
2000054c:	8082                	ret

2000054e <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
2000054e:	1101                	addi	sp,sp,-32
20000550:	ce06                	sw	ra,28(sp)
20000552:	cc22                	sw	s0,24(sp)
20000554:	ca26                	sw	s1,20(sp)
20000556:	c84a                	sw	s2,16(sp)
20000558:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
2000055a:	c20d                	beqz	a2,2000057c <base_dev_uart+0x2e>
2000055c:	8432                	mv	s0,a2
2000055e:	892e                	mv	s2,a1
20000560:	89aa                	mv	s3,a0
20000562:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20000564:	00990533          	add	a0,s2,s1
20000568:	00054583          	lbu	a1,0(a0)
2000056c:	854e                	mv	a0,s3
2000056e:	2f09                	jal	20000c80 <dif_uart_byte_send_polled>
20000570:	e519                	bnez	a0,2000057e <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000572:	0485                	addi	s1,s1,1
20000574:	fe9418e3          	bne	s0,s1,20000564 <base_dev_uart+0x16>
20000578:	84a2                	mv	s1,s0
2000057a:	a011                	j	2000057e <base_dev_uart+0x30>
2000057c:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
2000057e:	8526                	mv	a0,s1
20000580:	49b2                	lw	s3,12(sp)
20000582:	4942                	lw	s2,16(sp)
20000584:	44d2                	lw	s1,20(sp)
20000586:	4462                	lw	s0,24(sp)
20000588:	40f2                	lw	ra,28(sp)
2000058a:	6105                	addi	sp,sp,32
2000058c:	8082                	ret

2000058e <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
2000058e:	7179                	addi	sp,sp,-48
20000590:	c606                	sw	ra,12(sp)
20000592:	d646                	sw	a7,44(sp)
20000594:	d442                	sw	a6,40(sp)
20000596:	d23e                	sw	a5,36(sp)
20000598:	d03a                	sw	a4,32(sp)
2000059a:	ce36                	sw	a3,28(sp)
2000059c:	cc32                	sw	a2,24(sp)
2000059e:	ca2e                	sw	a1,20(sp)
200005a0:	f0000597          	auipc	a1,0xf0000
200005a4:	a6058593          	addi	a1,a1,-1440 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
200005a8:	4190                	lw	a2,0(a1)
200005aa:	41cc                	lw	a1,4(a1)
200005ac:	872a                	mv	a4,a0
200005ae:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
200005b0:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200005b2:	8532                	mv	a0,a2
200005b4:	863a                	mv	a2,a4
200005b6:	200d                	jal	200005d8 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
200005b8:	40b2                	lw	ra,12(sp)
200005ba:	6145                	addi	sp,sp,48
200005bc:	8082                	ret

200005be <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
200005be:	f0000697          	auipc	a3,0xf0000
200005c2:	a4268693          	addi	a3,a3,-1470 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200005c6:	4290                	lw	a2,0(a3)
200005c8:	42d4                	lw	a3,4(a3)
200005ca:	872e                	mv	a4,a1
200005cc:	87aa                	mv	a5,a0
200005ce:	8532                	mv	a0,a2
200005d0:	85b6                	mv	a1,a3
200005d2:	863e                	mv	a2,a5
200005d4:	86ba                	mv	a3,a4
200005d6:	a009                	j	200005d8 <base_vfprintf>

200005d8 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
200005d8:	7139                	addi	sp,sp,-64
200005da:	de06                	sw	ra,60(sp)
200005dc:	dc22                	sw	s0,56(sp)
200005de:	da26                	sw	s1,52(sp)
200005e0:	d84a                	sw	s2,48(sp)
200005e2:	d64e                	sw	s3,44(sp)
200005e4:	d452                	sw	s4,40(sp)
200005e6:	d256                	sw	s5,36(sp)
200005e8:	d05a                	sw	s6,32(sp)
200005ea:	ce5e                	sw	s7,28(sp)
200005ec:	cc62                	sw	s8,24(sp)
200005ee:	ca66                	sw	s9,20(sp)
200005f0:	c86a                	sw	s10,16(sp)
200005f2:	c66e                	sw	s11,12(sp)
200005f4:	8bb2                	mv	s7,a2
200005f6:	892a                	mv	s2,a0
200005f8:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
200005fa:	c199                	beqz	a1,20000600 <base_vfprintf+0x28>
200005fc:	89ae                	mv	s3,a1
200005fe:	a029                	j	20000608 <base_vfprintf+0x30>
20000600:	00000997          	auipc	s3,0x0
20000604:	f3498993          	addi	s3,s3,-204 # 20000534 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000608:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
2000060a:	000bc503          	lbu	a0,0(s7)
2000060e:	28050f63          	beqz	a0,200008ac <base_vfprintf+0x2d4>
20000612:	4b01                	li	s6,0
20000614:	02500c13          	li	s8,37
20000618:	4ca5                	li	s9,9
2000061a:	02000d13          	li	s10,32
2000061e:	06800d93          	li	s11,104
20000622:	00001a17          	auipc	s4,0x1
20000626:	339a0a13          	addi	s4,s4,825 # 2000195b <__clz_tab+0x283>
2000062a:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
2000062c:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
2000062e:	0ff57413          	andi	s0,a0,255
20000632:	01840963          	beq	s0,s8,20000644 <base_vfprintf+0x6c>
20000636:	c419                	beqz	s0,20000644 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20000638:	009b8533          	add	a0,s7,s1
2000063c:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20000640:	0485                	addi	s1,s1,1
20000642:	b7f5                	j	2000062e <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20000644:	c491                	beqz	s1,20000650 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20000646:	854a                	mv	a0,s2
20000648:	85de                	mv	a1,s7
2000064a:	8626                	mv	a2,s1
2000064c:	9982                	jalr	s3
2000064e:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20000650:	24040f63          	beqz	s0,200008ae <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000654:	009b8633          	add	a2,s7,s1
20000658:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000065c:	22050f63          	beqz	a0,2000089a <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000660:	fd050593          	addi	a1,a0,-48
20000664:	0ff5f593          	andi	a1,a1,255
20000668:	00bcf863          	bgeu	s9,a1,20000678 <base_vfprintf+0xa0>
2000066c:	4401                	li	s0,0
2000066e:	4581                	li	a1,0
20000670:	4605                	li	a2,1
20000672:	028d7f63          	bgeu	s10,s0,200006b0 <base_vfprintf+0xd8>
20000676:	aca1                	j	200008ce <base_vfprintf+0x2f6>
20000678:	4581                	li	a1,0
2000067a:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000067c:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000067e:	00b606b3          	add	a3,a2,a1
20000682:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000686:	20068a63          	beqz	a3,2000089a <base_vfprintf+0x2c2>
2000068a:	0ff57513          	andi	a0,a0,255
2000068e:	03540733          	mul	a4,s0,s5
20000692:	953a                	add	a0,a0,a4
20000694:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000698:	fd068513          	addi	a0,a3,-48
2000069c:	0ff57713          	andi	a4,a0,255
200006a0:	0585                	addi	a1,a1,1
200006a2:	8536                	mv	a0,a3
200006a4:	fcecfde3          	bgeu	s9,a4,2000067e <base_vfprintf+0xa6>
200006a8:	4601                	li	a2,0
200006aa:	8536                	mv	a0,a3
200006ac:	228d6163          	bltu	s10,s0,200008ce <base_vfprintf+0x2f6>
200006b0:	008036b3          	snez	a3,s0
200006b4:	8e55                	or	a2,a2,a3
200006b6:	20060c63          	beqz	a2,200008ce <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200006ba:	95de                	add	a1,a1,s7
200006bc:	95a6                	add	a1,a1,s1
200006be:	00258b93          	addi	s7,a1,2
200006c2:	02adce63          	blt	s11,a0,200006fe <base_vfprintf+0x126>
200006c6:	06100593          	li	a1,97
200006ca:	06a5d563          	bge	a1,a0,20000734 <base_vfprintf+0x15c>
200006ce:	06300593          	li	a1,99
200006d2:	0ca5cb63          	blt	a1,a0,200007a8 <base_vfprintf+0x1d0>
200006d6:	06200593          	li	a1,98
200006da:	14b50a63          	beq	a0,a1,2000082e <base_vfprintf+0x256>
200006de:	06300593          	li	a1,99
200006e2:	18b51f63          	bne	a0,a1,20000880 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
200006e6:	4502                	lw	a0,0(sp)
200006e8:	00450593          	addi	a1,a0,4
200006ec:	c02e                	sw	a1,0(sp)
200006ee:	4108                	lw	a0,0(a0)
200006f0:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
200006f4:	4605                	li	a2,1
200006f6:	854a                	mv	a0,s2
200006f8:	00b10593          	addi	a1,sp,11
200006fc:	aa41                	j	2000088c <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200006fe:	07200593          	li	a1,114
20000702:	04a5dd63          	bge	a1,a0,2000075c <base_vfprintf+0x184>
20000706:	07700593          	li	a1,119
2000070a:	0aa5c663          	blt	a1,a0,200007b6 <base_vfprintf+0x1de>
2000070e:	07300593          	li	a1,115
20000712:	12b50963          	beq	a0,a1,20000844 <base_vfprintf+0x26c>
20000716:	07500593          	li	a1,117
2000071a:	16b51363          	bne	a0,a1,20000880 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
2000071e:	4502                	lw	a0,0(sp)
20000720:	00450593          	addi	a1,a0,4
20000724:	c02e                	sw	a1,0(sp)
20000726:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000728:	00001797          	auipc	a5,0x1
2000072c:	ecd78793          	addi	a5,a5,-307 # 200015f5 <kDigitsLow>
20000730:	4729                	li	a4,10
20000732:	a8cd                	j	20000824 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000734:	13850763          	beq	a0,s8,20000862 <base_vfprintf+0x28a>
20000738:	04800593          	li	a1,72
2000073c:	00b50663          	beq	a0,a1,20000748 <base_vfprintf+0x170>
20000740:	05800593          	li	a1,88
20000744:	12b51e63          	bne	a0,a1,20000880 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20000748:	4502                	lw	a0,0(sp)
2000074a:	00450593          	addi	a1,a0,4
2000074e:	c02e                	sw	a1,0(sp)
20000750:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20000752:	00001797          	auipc	a5,0x1
20000756:	eb378793          	addi	a5,a5,-333 # 20001605 <kDigitsHigh>
2000075a:	a0e1                	j	20000822 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000075c:	06900593          	li	a1,105
20000760:	06b50d63          	beq	a0,a1,200007da <base_vfprintf+0x202>
20000764:	06f00593          	li	a1,111
20000768:	10b50163          	beq	a0,a1,2000086a <base_vfprintf+0x292>
2000076c:	07000593          	li	a1,112
20000770:	10b51863          	bne	a0,a1,20000880 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000774:	00001597          	auipc	a1,0x1
20000778:	1eb58593          	addi	a1,a1,491 # 2000195f <__clz_tab+0x287>
2000077c:	4609                	li	a2,2
2000077e:	854a                	mv	a0,s2
20000780:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20000782:	4582                	lw	a1,0(sp)
20000784:	00458613          	addi	a2,a1,4
20000788:	c032                	sw	a2,0(sp)
2000078a:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
2000078c:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000790:	00001797          	auipc	a5,0x1
20000794:	e6578793          	addi	a5,a5,-411 # 200015f5 <kDigitsLow>
20000798:	46a1                	li	a3,8
2000079a:	4741                	li	a4,16
2000079c:	854a                	mv	a0,s2
2000079e:	85ce                	mv	a1,s3
200007a0:	2a55                	jal	20000954 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
200007a2:	00a40b33          	add	s6,s0,a0
200007a6:	a0ed                	j	20000890 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200007a8:	06400593          	li	a1,100
200007ac:	02b50763          	beq	a0,a1,200007da <base_vfprintf+0x202>
200007b0:	07b50063          	beq	a0,s11,20000810 <base_vfprintf+0x238>
200007b4:	a0f1                	j	20000880 <base_vfprintf+0x2a8>
200007b6:	07800593          	li	a1,120
200007ba:	04b50b63          	beq	a0,a1,20000810 <base_vfprintf+0x238>
200007be:	07a00593          	li	a1,122
200007c2:	0ab51f63          	bne	a0,a1,20000880 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
200007c6:	4502                	lw	a0,0(sp)
200007c8:	00450593          	addi	a1,a0,4
200007cc:	c02e                	sw	a1,0(sp)
200007ce:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
200007d0:	00850593          	addi	a1,a0,8
200007d4:	c02e                	sw	a1,0(sp)
200007d6:	414c                	lw	a1,4(a0)
200007d8:	a84d                	j	2000088a <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
200007da:	4502                	lw	a0,0(sp)
200007dc:	00450593          	addi	a1,a0,4
200007e0:	c02e                	sw	a1,0(sp)
200007e2:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
200007e4:	557d                	li	a0,-1
200007e6:	00954c63          	blt	a0,s1,200007fe <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
200007ea:	00001597          	auipc	a1,0x1
200007ee:	17358593          	addi	a1,a1,371 # 2000195d <__clz_tab+0x285>
200007f2:	4605                	li	a2,1
200007f4:	854a                	mv	a0,s2
200007f6:	9982                	jalr	s3
200007f8:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
200007fa:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200007fe:	00001797          	auipc	a5,0x1
20000802:	df778793          	addi	a5,a5,-521 # 200015f5 <kDigitsLow>
20000806:	4729                	li	a4,10
20000808:	854a                	mv	a0,s2
2000080a:	85ce                	mv	a1,s3
2000080c:	8626                	mv	a2,s1
2000080e:	a829                	j	20000828 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000810:	4502                	lw	a0,0(sp)
20000812:	00450593          	addi	a1,a0,4
20000816:	c02e                	sw	a1,0(sp)
20000818:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
2000081a:	00001797          	auipc	a5,0x1
2000081e:	ddb78793          	addi	a5,a5,-549 # 200015f5 <kDigitsLow>
20000822:	4741                	li	a4,16
20000824:	854a                	mv	a0,s2
20000826:	85ce                	mv	a1,s3
20000828:	86a2                	mv	a3,s0
2000082a:	222d                	jal	20000954 <write_digits>
2000082c:	a08d                	j	2000088e <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
2000082e:	4502                	lw	a0,0(sp)
20000830:	00450593          	addi	a1,a0,4
20000834:	c02e                	sw	a1,0(sp)
20000836:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20000838:	00001797          	auipc	a5,0x1
2000083c:	dbd78793          	addi	a5,a5,-579 # 200015f5 <kDigitsLow>
20000840:	4709                	li	a4,2
20000842:	b7cd                	j	20000824 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20000844:	4502                	lw	a0,0(sp)
20000846:	00450593          	addi	a1,a0,4
2000084a:	c02e                	sw	a1,0(sp)
2000084c:	410c                	lw	a1,0(a0)
2000084e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000850:	00a58633          	add	a2,a1,a0
20000854:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20000858:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
2000085a:	fa7d                	bnez	a2,20000850 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
2000085c:	fff50613          	addi	a2,a0,-1
20000860:	a02d                	j	2000088a <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20000862:	4605                	li	a2,1
20000864:	854a                	mv	a0,s2
20000866:	85d2                	mv	a1,s4
20000868:	a015                	j	2000088c <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
2000086a:	4502                	lw	a0,0(sp)
2000086c:	00450593          	addi	a1,a0,4
20000870:	c02e                	sw	a1,0(sp)
20000872:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20000874:	00001797          	auipc	a5,0x1
20000878:	d8178793          	addi	a5,a5,-639 # 200015f5 <kDigitsLow>
2000087c:	4721                	li	a4,8
2000087e:	b75d                	j	20000824 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20000880:	00001597          	auipc	a1,0x1
20000884:	d9558593          	addi	a1,a1,-619 # 20001615 <kUnknownSpec>
20000888:	463d                	li	a2,15
2000088a:	854a                	mv	a0,s2
2000088c:	9982                	jalr	s3
2000088e:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20000890:	000bc503          	lbu	a0,0(s7)
20000894:	d8051ce3          	bnez	a0,2000062c <base_vfprintf+0x54>
20000898:	a819                	j	200008ae <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
2000089a:	00001597          	auipc	a1,0x1
2000089e:	d3e58593          	addi	a1,a1,-706 # 200015d8 <kErrorNul>
200008a2:	4645                	li	a2,17
200008a4:	854a                	mv	a0,s2
200008a6:	9982                	jalr	s3
200008a8:	9b2a                	add	s6,s6,a0
200008aa:	a011                	j	200008ae <base_vfprintf+0x2d6>
200008ac:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
200008ae:	855a                	mv	a0,s6
200008b0:	4db2                	lw	s11,12(sp)
200008b2:	4d42                	lw	s10,16(sp)
200008b4:	4cd2                	lw	s9,20(sp)
200008b6:	4c62                	lw	s8,24(sp)
200008b8:	4bf2                	lw	s7,28(sp)
200008ba:	5b02                	lw	s6,32(sp)
200008bc:	5a92                	lw	s5,36(sp)
200008be:	5a22                	lw	s4,40(sp)
200008c0:	59b2                	lw	s3,44(sp)
200008c2:	5942                	lw	s2,48(sp)
200008c4:	54d2                	lw	s1,52(sp)
200008c6:	5462                	lw	s0,56(sp)
200008c8:	50f2                	lw	ra,60(sp)
200008ca:	6121                	addi	sp,sp,64
200008cc:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
200008ce:	00001597          	auipc	a1,0x1
200008d2:	d1b58593          	addi	a1,a1,-741 # 200015e9 <kErrorTooWide>
200008d6:	4631                	li	a2,12
200008d8:	b7f1                	j	200008a4 <base_vfprintf+0x2cc>

200008da <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
200008da:	7179                	addi	sp,sp,-48
200008dc:	ca06                	sw	ra,20(sp)
200008de:	d646                	sw	a7,44(sp)
200008e0:	d442                	sw	a6,40(sp)
200008e2:	d23e                	sw	a5,36(sp)
200008e4:	d03a                	sw	a4,32(sp)
200008e6:	ce36                	sw	a3,28(sp)
200008e8:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200008ea:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200008ec:	c42a                	sw	a0,8(sp)
200008ee:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200008f0:	00000597          	auipc	a1,0x0
200008f4:	01258593          	addi	a1,a1,18 # 20000902 <snprintf_sink>
200008f8:	0028                	addi	a0,sp,8
200008fa:	39f9                	jal	200005d8 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200008fc:	40d2                	lw	ra,20(sp)
200008fe:	6145                	addi	sp,sp,48
20000900:	8082                	ret

20000902 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20000902:	1141                	addi	sp,sp,-16
20000904:	c606                	sw	ra,12(sp)
20000906:	c422                	sw	s0,8(sp)
20000908:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
2000090a:	4140                	lw	s0,4(a0)
2000090c:	c005                	beqz	s0,2000092c <snprintf_sink+0x2a>
2000090e:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20000910:	00c46363          	bltu	s0,a2,20000916 <snprintf_sink+0x14>
20000914:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20000916:	4088                	lw	a0,0(s1)
20000918:	8622                	mv	a2,s0
2000091a:	25fd                	jal	20001008 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000091c:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
2000091e:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20000920:	9522                	add	a0,a0,s0
20000922:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20000924:	40858533          	sub	a0,a1,s0
20000928:	c0c8                	sw	a0,4(s1)
2000092a:	a011                	j	2000092e <snprintf_sink+0x2c>
2000092c:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
2000092e:	8522                	mv	a0,s0
20000930:	4492                	lw	s1,4(sp)
20000932:	4422                	lw	s0,8(sp)
20000934:	40b2                	lw	ra,12(sp)
20000936:	0141                	addi	sp,sp,16
20000938:	8082                	ret

2000093a <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
2000093a:	1101                	addi	sp,sp,-32
2000093c:	c206                	sw	ra,4(sp)
2000093e:	ce46                	sw	a7,28(sp)
20000940:	cc42                	sw	a6,24(sp)
20000942:	ca3e                	sw	a5,20(sp)
20000944:	c83a                	sw	a4,16(sp)
20000946:	c636                	sw	a3,12(sp)
20000948:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
2000094a:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
2000094c:	3171                	jal	200005d8 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
2000094e:	4092                	lw	ra,4(sp)
20000950:	6105                	addi	sp,sp,32
20000952:	8082                	ret

20000954 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20000954:	7139                	addi	sp,sp,-64
20000956:	de06                	sw	ra,60(sp)
20000958:	dc22                	sw	s0,56(sp)
2000095a:	da26                	sw	s1,52(sp)
2000095c:	d84a                	sw	s2,48(sp)
2000095e:	d64e                	sw	s3,44(sp)
20000960:	892e                	mv	s2,a1
20000962:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000964:	ca05                	beqz	a2,20000994 <write_digits+0x40>
20000966:	4501                	li	a0,0
20000968:	02b10813          	addi	a6,sp,43
2000096c:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
2000096e:	02e65633          	divu	a2,a2,a4
20000972:	02e60433          	mul	s0,a2,a4
20000976:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
2000097a:	943e                	add	s0,s0,a5
2000097c:	00040403          	lb	s0,0(s0)
20000980:	00a805b3          	add	a1,a6,a0
20000984:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000988:	157d                	addi	a0,a0,-1
2000098a:	fee4f1e3          	bgeu	s1,a4,2000096c <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
2000098e:	40a00633          	neg	a2,a0
20000992:	a011                	j	20000996 <write_digits+0x42>
20000994:	4601                	li	a2,0
20000996:	4485                	li	s1,1
20000998:	c291                	beqz	a3,2000099c <write_digits+0x48>
2000099a:	84b6                	mv	s1,a3
2000099c:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
200009a0:	00a4e463          	bltu	s1,a0,200009a8 <write_digits+0x54>
200009a4:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200009a8:	00967f63          	bgeu	a2,s1,200009c6 <write_digits+0x72>
200009ac:	0068                	addi	a0,sp,12
200009ae:	8d05                	sub	a0,a0,s1
200009b0:	02050513          	addi	a0,a0,32
200009b4:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
200009b8:	03000593          	li	a1,48
200009bc:	8622                	mv	a2,s0
200009be:	2585                	jal	2000101e <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200009c0:	147d                	addi	s0,s0,-1
200009c2:	fc7d                	bnez	s0,200009c0 <write_digits+0x6c>
200009c4:	8626                	mv	a2,s1
200009c6:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
200009c8:	8d11                	sub	a0,a0,a2
200009ca:	02050593          	addi	a1,a0,32
200009ce:	854e                	mv	a0,s3
200009d0:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200009d2:	59b2                	lw	s3,44(sp)
200009d4:	5942                	lw	s2,48(sp)
200009d6:	54d2                	lw	s1,52(sp)
200009d8:	5462                	lw	s0,56(sp)
200009da:	50f2                	lw	ra,60(sp)
200009dc:	6121                	addi	sp,sp,64
200009de:	8082                	ret

200009e0 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
200009e0:	c581                	beqz	a1,200009e8 <dif_uart_init+0x8>
200009e2:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200009e4:	c188                	sw	a0,0(a1)
200009e6:	a011                	j	200009ea <dif_uart_init+0xa>
200009e8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200009ea:	8532                	mv	a0,a2
200009ec:	8082                	ret

200009ee <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200009ee:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
200009f0:	c606                	sw	ra,12(sp)
200009f2:	c422                	sw	s0,8(sp)
200009f4:	c226                	sw	s1,4(sp)
200009f6:	c935                	beqz	a0,20000a6a <dif_uart_configure+0x7c>
200009f8:	84ae                	mv	s1,a1
200009fa:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
200009fc:	418c                	lw	a1,0(a1)
200009fe:	450d                	li	a0,3
20000a00:	c5b5                	beqz	a1,20000a6c <dif_uart_configure+0x7e>
20000a02:	40d0                	lw	a2,4(s1)
20000a04:	c625                	beqz	a2,20000a6c <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20000a06:	01459513          	slli	a0,a1,0x14
20000a0a:	81b1                	srli	a1,a1,0xc
20000a0c:	4681                	li	a3,0
20000a0e:	7da000ef          	jal	ra,200011e8 <__udivdi3>
20000a12:	6641                	lui	a2,0x10
20000a14:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20000a16:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20000a18:	8d31                	xor	a0,a0,a2
20000a1a:	8dc9                	or	a1,a1,a0
20000a1c:	4511                	li	a0,4
20000a1e:	e5b9                	bnez	a1,20000a6c <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20000a20:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a22:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20000a26:	4008                	lw	a0,0(s0)
20000a28:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a2a:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20000a2c:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a2e:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20000a32:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a34:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000a38:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a3a:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20000a3e:	4008                	lw	a0,0(s0)
20000a40:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a42:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20000a44:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
20000a46:	01061513          	slli	a0,a2,0x10
20000a4a:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20000a4e:	c291                	beqz	a3,20000a52 <dif_uart_configure+0x64>
20000a50:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20000a52:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20000a54:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20000a56:	e219                	bnez	a2,20000a5c <dif_uart_configure+0x6e>
20000a58:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20000a5c:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a5e:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000a60:	400c                	lw	a1,0(s0)
20000a62:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a64:	0005a223          	sw	zero,4(a1)
20000a68:	a011                	j	20000a6c <dif_uart_configure+0x7e>
20000a6a:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20000a6c:	4492                	lw	s1,4(sp)
20000a6e:	4422                	lw	s0,8(sp)
20000a70:	40b2                	lw	ra,12(sp)
20000a72:	0141                	addi	sp,sp,16
20000a74:	8082                	ret

20000a76 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20000a76:	1141                	addi	sp,sp,-16
20000a78:	c606                	sw	ra,12(sp)
20000a7a:	c422                	sw	s0,8(sp)
20000a7c:	c226                	sw	s1,4(sp)
20000a7e:	84aa                	mv	s1,a0
20000a80:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20000a82:	c09d                	beqz	s1,20000aa8 <dif_uart_irq_is_pending+0x32>
20000a84:	8432                	mv	s0,a2
20000a86:	c20d                	beqz	a2,20000aa8 <dif_uart_irq_is_pending+0x32>
20000a88:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000a8a:	852e                	mv	a0,a1
20000a8c:	85b2                	mv	a1,a2
20000a8e:	2015                	jal	20000ab2 <uart_irq_offset_get>
20000a90:	85aa                	mv	a1,a0
20000a92:	4505                	li	a0,1
20000a94:	c991                	beqz	a1,20000aa8 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20000a96:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a98:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20000a9a:	4602                	lw	a2,0(sp)
20000a9c:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000a9e:	00c5d5b3          	srl	a1,a1,a2
20000aa2:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20000aa4:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20000aa8:	4492                	lw	s1,4(sp)
20000aaa:	4422                	lw	s0,8(sp)
20000aac:	40b2                	lw	ra,12(sp)
20000aae:	0141                	addi	sp,sp,16
20000ab0:	8082                	ret

20000ab2 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20000ab2:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20000ab4:	00a66563          	bltu	a2,a0,20000abe <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20000ab8:	c188                	sw	a0,0(a1)
20000aba:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20000abc:	8082                	ret
20000abe:	4501                	li	a0,0
20000ac0:	8082                	ret

20000ac2 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20000ac2:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20000ac4:	c606                	sw	ra,12(sp)
20000ac6:	c422                	sw	s0,8(sp)
20000ac8:	c10d                	beqz	a0,20000aea <dif_uart_irq_acknowledge+0x28>
20000aca:	842a                	mv	s0,a0
20000acc:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000ace:	852e                	mv	a0,a1
20000ad0:	85b2                	mv	a1,a2
20000ad2:	37c5                	jal	20000ab2 <uart_irq_offset_get>
20000ad4:	85aa                	mv	a1,a0
20000ad6:	4505                	li	a0,1
20000ad8:	c991                	beqz	a1,20000aec <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000ada:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20000adc:	4010                	lw	a2,0(s0)
20000ade:	4501                	li	a0,0
20000ae0:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000ae2:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ae6:	c20c                	sw	a1,0(a2)
20000ae8:	a011                	j	20000aec <dif_uart_irq_acknowledge+0x2a>
20000aea:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20000aec:	4422                	lw	s0,8(sp)
20000aee:	40b2                	lw	ra,12(sp)
20000af0:	0141                	addi	sp,sp,16
20000af2:	8082                	ret

20000af4 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20000af4:	c911                	beqz	a0,20000b08 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20000af6:	c581                	beqz	a1,20000afe <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000af8:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000afa:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20000afc:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000afe:	410c                	lw	a1,0(a0)
20000b00:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b02:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20000b06:	8082                	ret
20000b08:	4509                	li	a0,2
20000b0a:	8082                	ret

20000b0c <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20000b0c:	862a                	mv	a2,a0
20000b0e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20000b10:	c611                	beqz	a2,20000b1c <dif_uart_irq_restore_all+0x10>
20000b12:	c589                	beqz	a1,20000b1c <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000b14:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20000b16:	4210                	lw	a2,0(a2)
20000b18:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b1a:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20000b1c:	8082                	ret

20000b1e <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20000b1e:	1141                	addi	sp,sp,-16
20000b20:	c606                	sw	ra,12(sp)
20000b22:	c422                	sw	s0,8(sp)
20000b24:	c226                	sw	s1,4(sp)
20000b26:	84aa                	mv	s1,a0
20000b28:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20000b2a:	c485                	beqz	s1,20000b52 <dif_uart_irq_get_enabled+0x34>
20000b2c:	8432                	mv	s0,a2
20000b2e:	c215                	beqz	a2,20000b52 <dif_uart_irq_get_enabled+0x34>
20000b30:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000b32:	852e                	mv	a0,a1
20000b34:	85b2                	mv	a1,a2
20000b36:	3fb5                	jal	20000ab2 <uart_irq_offset_get>
20000b38:	85aa                	mv	a1,a0
20000b3a:	4505                	li	a0,1
20000b3c:	c999                	beqz	a1,20000b52 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000b3e:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b40:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20000b42:	4602                	lw	a2,0(sp)
20000b44:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b46:	00c5d5b3          	srl	a1,a1,a2
20000b4a:	8985                	andi	a1,a1,1
20000b4c:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20000b50:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20000b52:	4492                	lw	s1,4(sp)
20000b54:	4422                	lw	s0,8(sp)
20000b56:	40b2                	lw	ra,12(sp)
20000b58:	0141                	addi	sp,sp,16
20000b5a:	8082                	ret

20000b5c <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20000b5c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20000b5e:	c606                	sw	ra,12(sp)
20000b60:	c422                	sw	s0,8(sp)
20000b62:	c226                	sw	s1,4(sp)
20000b64:	c91d                	beqz	a0,20000b9a <dif_uart_irq_set_enabled+0x3e>
20000b66:	8432                	mv	s0,a2
20000b68:	84aa                	mv	s1,a0
20000b6a:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000b6c:	852e                	mv	a0,a1
20000b6e:	85b2                	mv	a1,a2
20000b70:	3789                	jal	20000ab2 <uart_irq_offset_get>
20000b72:	85aa                	mv	a1,a0
20000b74:	4505                	li	a0,1
20000b76:	c19d                	beqz	a1,20000b9c <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000b78:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b7a:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20000b7c:	4682                	lw	a3,0(sp)
20000b7e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20000b80:	00143713          	seqz	a4,s0
20000b84:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b86:	00d797b3          	sll	a5,a5,a3
20000b8a:	fff7c793          	not	a5,a5
20000b8e:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000b90:	00d716b3          	sll	a3,a4,a3
20000b94:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b96:	c1d0                	sw	a2,4(a1)
20000b98:	a011                	j	20000b9c <dif_uart_irq_set_enabled+0x40>
20000b9a:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20000b9c:	4492                	lw	s1,4(sp)
20000b9e:	4422                	lw	s0,8(sp)
20000ba0:	40b2                	lw	ra,12(sp)
20000ba2:	0141                	addi	sp,sp,16
20000ba4:	8082                	ret

20000ba6 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20000ba6:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20000ba8:	c606                	sw	ra,12(sp)
20000baa:	c422                	sw	s0,8(sp)
20000bac:	c10d                	beqz	a0,20000bce <dif_uart_irq_force+0x28>
20000bae:	842a                	mv	s0,a0
20000bb0:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000bb2:	852e                	mv	a0,a1
20000bb4:	85b2                	mv	a1,a2
20000bb6:	3df5                	jal	20000ab2 <uart_irq_offset_get>
20000bb8:	85aa                	mv	a1,a0
20000bba:	4505                	li	a0,1
20000bbc:	c991                	beqz	a1,20000bd0 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000bbe:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20000bc0:	4010                	lw	a2,0(s0)
20000bc2:	4501                	li	a0,0
20000bc4:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000bc6:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bca:	c60c                	sw	a1,8(a2)
20000bcc:	a011                	j	20000bd0 <dif_uart_irq_force+0x2a>
20000bce:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20000bd0:	4422                	lw	s0,8(sp)
20000bd2:	40b2                	lw	ra,12(sp)
20000bd4:	0141                	addi	sp,sp,16
20000bd6:	8082                	ret

20000bd8 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000bd8:	cd09                	beqz	a0,20000bf2 <dif_uart_watermark_rx_set+0x1a>
20000bda:	4691                	li	a3,4
20000bdc:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000bde:	00b6eb63          	bltu	a3,a1,20000bf4 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000be2:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000be4:	4d54                	lw	a3,28(a0)
20000be6:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20000be8:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000bea:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000bec:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000bee:	cd4c                	sw	a1,28(a0)
20000bf0:	a011                	j	20000bf4 <dif_uart_watermark_rx_set+0x1c>
20000bf2:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000bf4:	8532                	mv	a0,a2
20000bf6:	8082                	ret

20000bf8 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000bf8:	cd11                	beqz	a0,20000c14 <dif_uart_watermark_tx_set+0x1c>
20000bfa:	468d                	li	a3,3
20000bfc:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000bfe:	00b6ec63          	bltu	a3,a1,20000c16 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000c02:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c04:	4d54                	lw	a3,28(a0)
20000c06:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20000c08:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c0a:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c0e:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c10:	cd4c                	sw	a1,28(a0)
20000c12:	a011                	j	20000c16 <dif_uart_watermark_tx_set+0x1e>
20000c14:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c16:	8532                	mv	a0,a2
20000c18:	8082                	ret

20000c1a <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20000c1a:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20000c1c:	c51d                	beqz	a0,20000c4a <dif_uart_bytes_send+0x30>
20000c1e:	c595                	beqz	a1,20000c4a <dif_uart_bytes_send+0x30>
20000c20:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000c22:	c20d                	beqz	a2,20000c44 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000c24:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c28:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000c2c:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000c2e:	eb19                	bnez	a4,20000c44 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20000c30:	00f58733          	add	a4,a1,a5
20000c34:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20000c38:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c3a:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000c3e:	fef613e3          	bne	a2,a5,20000c24 <dif_uart_bytes_send+0xa>
20000c42:	87b2                	mv	a5,a2
20000c44:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20000c46:	c291                	beqz	a3,20000c4a <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20000c48:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20000c4a:	853a                	mv	a0,a4
20000c4c:	8082                	ret

20000c4e <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20000c4e:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20000c50:	c515                	beqz	a0,20000c7c <dif_uart_bytes_receive+0x2e>
20000c52:	c60d                	beqz	a2,20000c7c <dif_uart_bytes_receive+0x2e>
20000c54:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000c56:	cd99                	beqz	a1,20000c74 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000c58:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c5a:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c5c:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000c60:	eb91                	bnez	a5,20000c74 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c62:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000c64:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20000c68:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000c6a:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000c6e:	ff0595e3          	bne	a1,a6,20000c58 <dif_uart_bytes_receive+0xa>
20000c72:	882e                	mv	a6,a1
20000c74:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20000c76:	c299                	beqz	a3,20000c7c <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20000c78:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20000c7c:	853a                	mv	a0,a4
20000c7e:	8082                	ret

20000c80 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20000c80:	cd19                	beqz	a0,20000c9e <dif_uart_byte_send_polled+0x1e>
20000c82:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c84:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c86:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20000c88:	fef5                	bnez	a3,20000c84 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c8a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c8c:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000c8e:	e299                	bnez	a3,20000c94 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c90:	ce0c                	sw	a1,24(a2)
20000c92:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c94:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c96:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20000c98:	dd75                	beqz	a0,20000c94 <dif_uart_byte_send_polled+0x14>
20000c9a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20000c9c:	8082                	ret
20000c9e:	4509                	li	a0,2
20000ca0:	8082                	ret

20000ca2 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20000ca2:	862a                	mv	a2,a0
20000ca4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20000ca6:	c205                	beqz	a2,20000cc6 <dif_uart_byte_receive_polled+0x24>
20000ca8:	cd99                	beqz	a1,20000cc6 <dif_uart_byte_receive_polled+0x24>
20000caa:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cac:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000cae:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20000cb2:	fd6d                	bnez	a0,20000cac <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cb4:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000cb6:	02057693          	andi	a3,a0,32
20000cba:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000cbc:	e689                	bnez	a3,20000cc6 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cbe:	4a50                	lw	a2,20(a2)
20000cc0:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000cc2:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20000cc6:	8082                	ret

20000cc8 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000cc8:	862a                	mv	a2,a0
20000cca:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20000ccc:	ca09                	beqz	a2,20000cde <dif_uart_rx_bytes_available+0x16>
20000cce:	c981                	beqz	a1,20000cde <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000cd0:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cd2:	5110                	lw	a2,32(a0)
20000cd4:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000cd6:	8241                	srli	a2,a2,0x10
20000cd8:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20000cdc:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20000cde:	8082                	ret

20000ce0 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000ce0:	862a                	mv	a2,a0
20000ce2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20000ce4:	ce01                	beqz	a2,20000cfc <dif_uart_tx_bytes_available+0x1c>
20000ce6:	c999                	beqz	a1,20000cfc <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000ce8:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cea:	5110                	lw	a2,32(a0)
20000cec:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20000cee:	03f67613          	andi	a2,a2,63
20000cf2:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20000cf6:	40c68633          	sub	a2,a3,a2
20000cfa:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20000cfc:	8082                	ret

20000cfe <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20000cfe:	c11d                	beqz	a0,20000d24 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000d00:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d02:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000d04:	ffd5f693          	andi	a3,a1,-3
20000d08:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000d0c:	fff58713          	addi	a4,a1,-1
20000d10:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000d12:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000d16:	00f77463          	bgeu	a4,a5,20000d1e <dif_uart_fifo_reset+0x20>
20000d1a:	0025e593          	ori	a1,a1,2
20000d1e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d20:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000d22:	8082                	ret
20000d24:	4509                	li	a0,2
20000d26:	8082                	ret

20000d28 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20000d28:	c515                	beqz	a0,20000d54 <dif_uart_loopback_set+0x2c>
20000d2a:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20000d2c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20000d2e:	0015b593          	seqz	a1,a1
20000d32:	4715                	li	a4,5
20000d34:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d38:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20000d3a:	00163613          	seqz	a2,a2
20000d3e:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000d40:	00b797b3          	sll	a5,a5,a1
20000d44:	fff7c793          	not	a5,a5
20000d48:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000d4a:	00b615b3          	sll	a1,a2,a1
20000d4e:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d50:	c54c                	sw	a1,12(a0)
20000d52:	a011                	j	20000d56 <dif_uart_loopback_set+0x2e>
20000d54:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000d56:	8536                	mv	a0,a3
20000d58:	8082                	ret

20000d5a <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20000d5a:	862a                	mv	a2,a0
20000d5c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20000d5e:	ca11                	beqz	a2,20000d72 <dif_uart_enable_rx_timeout+0x18>
20000d60:	0185d693          	srli	a3,a1,0x18
20000d64:	e699                	bnez	a3,20000d72 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000d66:	4210                	lw	a2,0(a2)
20000d68:	4501                	li	a0,0
20000d6a:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000d6e:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d70:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20000d72:	8082                	ret

20000d74 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20000d74:	c511                	beqz	a0,20000d80 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000d76:	410c                	lw	a1,0(a0)
20000d78:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d7a:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20000d7e:	8082                	ret
20000d80:	4509                	li	a0,2
20000d82:	8082                	ret

20000d84 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20000d84:	86aa                	mv	a3,a0
20000d86:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20000d88:	ce99                	beqz	a3,20000da6 <dif_uart_get_rx_timeout+0x22>
20000d8a:	cd91                	beqz	a1,20000da6 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20000d8c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d8e:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20000d90:	fff6c513          	not	a0,a3
20000d94:	817d                	srli	a0,a0,0x1f
20000d96:	c188                	sw	a0,0(a1)
20000d98:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20000d9a:	c611                	beqz	a2,20000da6 <dif_uart_get_rx_timeout+0x22>
20000d9c:	010005b7          	lui	a1,0x1000
20000da0:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000da2:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20000da4:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20000da6:	8082                	ret

20000da8 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20000da8:	1141                	addi	sp,sp,-16
20000daa:	c606                	sw	ra,12(sp)
20000dac:	c422                	sw	s0,8(sp)
20000dae:	6511                	lui	a0,0x4
20000db0:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000db4:	2221                	jal	20000ebc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20000db6:	00001517          	auipc	a0,0x1
20000dba:	8c250513          	addi	a0,a0,-1854 # 20001678 <kDeviceType>
20000dbe:	4108                	lw	a0,0(a0)
20000dc0:	c111                	beqz	a0,20000dc4 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000dc2:	280d                	jal	20000df4 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000dc4:	2611                	jal	200010c8 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20000dc6:	00001597          	auipc	a1,0x1
20000dca:	8e658593          	addi	a1,a1,-1818 # 200016ac <kTestConfig>
20000dce:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000dd2:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000dd4:	c191                	beqz	a1,20000dd8 <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20000dd6:	2839                	jal	20000df4 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20000dd8:	2415                	jal	20000ffc <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20000dda:	e409                	bnez	s0,20000de4 <main+0x3c>
20000ddc:	6531                	lui	a0,0xc
20000dde:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000de2:	a019                	j	20000de8 <main+0x40>
20000de4:	6525                	lui	a0,0x9
20000de6:	0535                	addi	a0,a0,13
20000de8:	28d1                	jal	20000ebc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20000dea:	4505                	li	a0,1
20000dec:	4422                	lw	s0,8(sp)
20000dee:	40b2                	lw	ra,12(sp)
20000df0:	0141                	addi	sp,sp,16
20000df2:	8082                	ret

20000df4 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000df4:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000df6:	ce06                	sw	ra,28(sp)
20000df8:	cc22                	sw	s0,24(sp)
20000dfa:	ca26                	sw	s1,20(sp)
20000dfc:	effff597          	auipc	a1,0xeffff
20000e00:	21058593          	addi	a1,a1,528 # 1000000c <uart0>
20000e04:	40000537          	lui	a0,0x40000
20000e08:	3ee1                	jal	200009e0 <dif_uart_init>
20000e0a:	00001497          	auipc	s1,0x1
20000e0e:	89e48493          	addi	s1,s1,-1890 # 200016a8 <kDeviceLogBypassUartAddress>
20000e12:	c915                	beqz	a0,20000e46 <init_uart+0x52>
20000e14:	4088                	lw	a0,0(s1)
20000e16:	c909                	beqz	a0,20000e28 <init_uart+0x34>
20000e18:	e000f517          	auipc	a0,0xe000f
20000e1c:	26050513          	addi	a0,a0,608 # 10078 <init_uart.kLogFields>
20000e20:	4581                	li	a1,0
20000e22:	ec4ff0ef          	jal	ra,200004e6 <base_log_internal_dv>
20000e26:	a821                	j	20000e3e <init_uart+0x4a>
20000e28:	00001597          	auipc	a1,0x1
20000e2c:	80058593          	addi	a1,a1,-2048 # 20001628 <kDifUartFifoSizeBytes+0x4>
20000e30:	840a                	mv	s0,sp
20000e32:	4651                	li	a2,20
20000e34:	8522                	mv	a0,s0
20000e36:	2ac9                	jal	20001008 <memcpy>
20000e38:	8522                	mv	a0,s0
20000e3a:	e02ff0ef          	jal	ra,2000043c <base_log_internal_core>
20000e3e:	6531                	lui	a0,0xc
20000e40:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000e44:	28a5                	jal	20000ebc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20000e46:	00001517          	auipc	a0,0x1
20000e4a:	85250513          	addi	a0,a0,-1966 # 20001698 <kUartBaudrate>
20000e4e:	4108                	lw	a0,0(a0)
20000e50:	00001597          	auipc	a1,0x1
20000e54:	83858593          	addi	a1,a1,-1992 # 20001688 <kClockFreqPeripheralHz>
20000e58:	418c                	lw	a1,0(a1)
20000e5a:	c02a                	sw	a0,0(sp)
20000e5c:	c22e                	sw	a1,4(sp)
20000e5e:	4505                	li	a0,1
20000e60:	c42a                	sw	a0,8(sp)
20000e62:	c62a                	sw	a0,12(sp)
20000e64:	effff517          	auipc	a0,0xeffff
20000e68:	1a850513          	addi	a0,a0,424 # 1000000c <uart0>
20000e6c:	858a                	mv	a1,sp
20000e6e:	3641                	jal	200009ee <dif_uart_configure>
20000e70:	c915                	beqz	a0,20000ea4 <init_uart+0xb0>
20000e72:	4088                	lw	a0,0(s1)
20000e74:	c909                	beqz	a0,20000e86 <init_uart+0x92>
20000e76:	e000f517          	auipc	a0,0xe000f
20000e7a:	21650513          	addi	a0,a0,534 # 1008c <init_uart.kLogFields.2>
20000e7e:	4581                	li	a1,0
20000e80:	e66ff0ef          	jal	ra,200004e6 <base_log_internal_dv>
20000e84:	a821                	j	20000e9c <init_uart+0xa8>
20000e86:	00000597          	auipc	a1,0x0
20000e8a:	7b658593          	addi	a1,a1,1974 # 2000163c <kDifUartFifoSizeBytes+0x18>
20000e8e:	840a                	mv	s0,sp
20000e90:	4651                	li	a2,20
20000e92:	8522                	mv	a0,s0
20000e94:	2a95                	jal	20001008 <memcpy>
20000e96:	8522                	mv	a0,s0
20000e98:	da4ff0ef          	jal	ra,2000043c <base_log_internal_core>
20000e9c:	6531                	lui	a0,0xc
20000e9e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ea2:	2829                	jal	20000ebc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
20000ea4:	effff517          	auipc	a0,0xeffff
20000ea8:	16850513          	addi	a0,a0,360 # 1000000c <uart0>
20000eac:	e8cff0ef          	jal	ra,20000538 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000eb0:	44d2                	lw	s1,20(sp)
20000eb2:	4462                	lw	s0,24(sp)
20000eb4:	40f2                	lw	ra,28(sp)
20000eb6:	6105                	addi	sp,sp,32
20000eb8:	8082                	ret
	...

20000ebc <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000ebc:	1101                	addi	sp,sp,-32
20000ebe:	ce06                	sw	ra,28(sp)
20000ec0:	cc22                	sw	s0,24(sp)
20000ec2:	65b1                	lui	a1,0xc
20000ec4:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000ec8:	02b50163          	beq	a0,a1,20000eea <test_status_set+0x2e>
20000ecc:	65a5                	lui	a1,0x9
20000ece:	05b5                	addi	a1,a1,13
20000ed0:	02b50f63          	beq	a0,a1,20000f0e <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000ed4:	00000597          	auipc	a1,0x0
20000ed8:	7d058593          	addi	a1,a1,2000 # 200016a4 <kDeviceTestStatusAddress>
20000edc:	418c                	lw	a1,0(a1)
20000ede:	c191                	beqz	a1,20000ee2 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ee0:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000ee2:	4462                	lw	s0,24(sp)
20000ee4:	40f2                	lw	ra,28(sp)
20000ee6:	6105                	addi	sp,sp,32
20000ee8:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000eea:	00000517          	auipc	a0,0x0
20000eee:	7be50513          	addi	a0,a0,1982 # 200016a8 <kDeviceLogBypassUartAddress>
20000ef2:	4108                	lw	a0,0(a0)
20000ef4:	ed1d                	bnez	a0,20000f32 <test_status_set+0x76>
20000ef6:	00000597          	auipc	a1,0x0
20000efa:	76e58593          	addi	a1,a1,1902 # 20001664 <kDifUartFifoSizeBytes+0x40>
20000efe:	840a                	mv	s0,sp
20000f00:	4651                	li	a2,20
20000f02:	8522                	mv	a0,s0
20000f04:	2211                	jal	20001008 <memcpy>
20000f06:	8522                	mv	a0,s0
20000f08:	d34ff0ef          	jal	ra,2000043c <base_log_internal_core>
20000f0c:	a815                	j	20000f40 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000f0e:	00000517          	auipc	a0,0x0
20000f12:	79a50513          	addi	a0,a0,1946 # 200016a8 <kDeviceLogBypassUartAddress>
20000f16:	4108                	lw	a0,0(a0)
20000f18:	ed15                	bnez	a0,20000f54 <test_status_set+0x98>
20000f1a:	00000597          	auipc	a1,0x0
20000f1e:	73658593          	addi	a1,a1,1846 # 20001650 <kDifUartFifoSizeBytes+0x2c>
20000f22:	840a                	mv	s0,sp
20000f24:	4651                	li	a2,20
20000f26:	8522                	mv	a0,s0
20000f28:	20c5                	jal	20001008 <memcpy>
20000f2a:	8522                	mv	a0,s0
20000f2c:	d10ff0ef          	jal	ra,2000043c <base_log_internal_core>
20000f30:	a80d                	j	20000f62 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000f32:	e000f517          	auipc	a0,0xe000f
20000f36:	18250513          	addi	a0,a0,386 # 100b4 <test_status_set.kLogFields.2>
20000f3a:	4581                	li	a1,0
20000f3c:	daaff0ef          	jal	ra,200004e6 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000f40:	00000517          	auipc	a0,0x0
20000f44:	76450513          	addi	a0,a0,1892 # 200016a4 <kDeviceTestStatusAddress>
20000f48:	4108                	lw	a0,0(a0)
20000f4a:	c50d                	beqz	a0,20000f74 <test_status_set+0xb8>
20000f4c:	65b1                	lui	a1,0xc
20000f4e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20000f52:	a005                	j	20000f72 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000f54:	e000f517          	auipc	a0,0xe000f
20000f58:	14c50513          	addi	a0,a0,332 # 100a0 <test_status_set.kLogFields>
20000f5c:	4581                	li	a1,0
20000f5e:	d88ff0ef          	jal	ra,200004e6 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000f62:	00000517          	auipc	a0,0x0
20000f66:	74250513          	addi	a0,a0,1858 # 200016a4 <kDeviceTestStatusAddress>
20000f6a:	4108                	lw	a0,0(a0)
20000f6c:	c501                	beqz	a0,20000f74 <test_status_set+0xb8>
20000f6e:	65a5                	lui	a1,0x9
20000f70:	05b5                	addi	a1,a1,13
20000f72:	c10c                	sw	a1,0(a0)
20000f74:	2049                	jal	20000ff6 <abort>
	...

20000f78 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000f78:	10500073          	wfi
20000f7c:	8082                	ret

20000f7e <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000f7e:	1141                	addi	sp,sp,-16
20000f80:	c606                	sw	ra,12(sp)
20000f82:	00000597          	auipc	a1,0x0
20000f86:	6fe58593          	addi	a1,a1,1790 # 20001680 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000f8a:	41d0                	lw	a2,4(a1)
20000f8c:	4194                	lw	a3,0(a1)
20000f8e:	02a605b3          	mul	a1,a2,a0
20000f92:	02a6b633          	mulhu	a2,a3,a0
20000f96:	95b2                	add	a1,a1,a2
20000f98:	02a68533          	mul	a0,a3,a0
20000f9c:	000f4637          	lui	a2,0xf4
20000fa0:	24060613          	addi	a2,a2,576 # f4240 <test_main.kLogFields.3+0xe4164>
20000fa4:	4681                	li	a3,0
20000fa6:	2489                	jal	200011e8 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000fa8:	4801                	li	a6,0
20000faa:	4701                	li	a4,0

20000fac <read0>:
20000fac:	b8002873          	csrr	a6,mcycleh
20000fb0:	b00026f3          	csrr	a3,mcycle
20000fb4:	b8002773          	csrr	a4,mcycleh
20000fb8:	fee81ae3          	bne	a6,a4,20000fac <read0>
20000fbc:	4781                	li	a5,0
20000fbe:	4601                	li	a2,0

20000fc0 <read1>:
20000fc0:	b80027f3          	csrr	a5,mcycleh
20000fc4:	b0002773          	csrr	a4,mcycle
20000fc8:	b8002673          	csrr	a2,mcycleh
20000fcc:	fec79ae3          	bne	a5,a2,20000fc0 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20000fd0:	00d73633          	sltu	a2,a4,a3
20000fd4:	410787b3          	sub	a5,a5,a6
20000fd8:	8f91                	sub	a5,a5,a2
20000fda:	00b78663          	beq	a5,a1,20000fe6 <read1+0x26>
20000fde:	00b7b733          	sltu	a4,a5,a1
20000fe2:	ff69                	bnez	a4,20000fbc <read0+0x10>
20000fe4:	a031                	j	20000ff0 <read1+0x30>
20000fe6:	40d70633          	sub	a2,a4,a3
20000fea:	00a63733          	sltu	a4,a2,a0
20000fee:	f779                	bnez	a4,20000fbc <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
20000ff0:	40b2                	lw	ra,12(sp)
20000ff2:	0141                	addi	sp,sp,16
20000ff4:	8082                	ret

20000ff6 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000ff6:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000ffa:	bff5                	j	20000ff6 <abort>

20000ffc <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000ffc:	8082                	ret
	...

20001000 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20001000:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20001002:	8082                	ret

20001004 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20001004:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20001006:	8082                	ret

20001008 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20001008:	ca11                	beqz	a2,2000101c <memcpy+0x14>
2000100a:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
2000100c:	00058703          	lb	a4,0(a1)
20001010:	00e68023          	sb	a4,0(a3) # 80000000 <_data_init_start+0x5fffe578>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20001014:	167d                	addi	a2,a2,-1
20001016:	0685                	addi	a3,a3,1
20001018:	0585                	addi	a1,a1,1
2000101a:	fa6d                	bnez	a2,2000100c <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
2000101c:	8082                	ret

2000101e <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000101e:	c619                	beqz	a2,2000102c <memset+0xe>
20001020:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20001022:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20001026:	167d                	addi	a2,a2,-1
20001028:	0685                	addi	a3,a3,1
2000102a:	fe65                	bnez	a2,20001022 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
2000102c:	8082                	ret

2000102e <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
2000102e:	ce09                	beqz	a2,20001048 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20001030:	00054683          	lbu	a3,0(a0)
20001034:	0005c703          	lbu	a4,0(a1)
20001038:	00e6ea63          	bltu	a3,a4,2000104c <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
2000103c:	00d76b63          	bltu	a4,a3,20001052 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20001040:	167d                	addi	a2,a2,-1
20001042:	0585                	addi	a1,a1,1
20001044:	0505                	addi	a0,a0,1
20001046:	f66d                	bnez	a2,20001030 <memcmp+0x2>
20001048:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
2000104a:	8082                	ret
2000104c:	fd600513          	li	a0,-42
20001050:	8082                	ret
20001052:	02a00513          	li	a0,42
20001056:	8082                	ret

20001058 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001058:	ca11                	beqz	a2,2000106c <memchr+0x14>
2000105a:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
2000105e:	00054683          	lbu	a3,0(a0)
20001062:	00b68663          	beq	a3,a1,2000106e <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20001066:	167d                	addi	a2,a2,-1
20001068:	0505                	addi	a0,a0,1
2000106a:	fa75                	bnez	a2,2000105e <memchr+0x6>
2000106c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000106e:	8082                	ret

20001070 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001070:	ce09                	beqz	a2,2000108a <memrchr+0x1a>
20001072:	fff50693          	addi	a3,a0,-1
20001076:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
2000107a:	00c68733          	add	a4,a3,a2
2000107e:	00074703          	lbu	a4,0(a4)
20001082:	00b70663          	beq	a4,a1,2000108e <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20001086:	167d                	addi	a2,a2,-1
20001088:	fa6d                	bnez	a2,2000107a <memrchr+0xa>
2000108a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
2000108c:	8082                	ret
2000108e:	9532                	add	a0,a0,a2
20001090:	157d                	addi	a0,a0,-1
20001092:	8082                	ret

20001094 <uart_test>:
uart_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:20

const test_config_t kTestConfig = {
    .can_clobber_uart = true,
};

rom_error_t uart_test(void) {
20001094:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:22
  // Configure UART0 as stdout.
  uart_init(kUartNCOValue);
20001096:	c606                	sw	ra,12(sp)
20001098:	00000517          	auipc	a0,0x0
2000109c:	60850513          	addi	a0,a0,1544 # 200016a0 <kUartNCOValue>
200010a0:	4108                	lw	a0,0(a0)
200010a2:	2849                	jal	20001134 <uart_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:23
  base_set_stdout((buffer_sink_t){
200010a4:	00000597          	auipc	a1,0x0
200010a8:	11a58593          	addi	a1,a1,282 # 200011be <uart_sink>
200010ac:	4501                	li	a0,0
200010ae:	c6eff0ef          	jal	ra,2000051c <base_set_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:28
      .data = NULL,
      .sink = uart_sink,
  });

  base_printf("uart functional test!\r\n");
200010b2:	00001517          	auipc	a0,0x1
200010b6:	94d50513          	addi	a0,a0,-1715 # 200019ff <__clz_tab+0x327>
200010ba:	cd4ff0ef          	jal	ra,2000058e <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:29
  return kErrorOk;
200010be:	73900513          	li	a0,1849
200010c2:	40b2                	lw	ra,12(sp)
200010c4:	0141                	addi	sp,sp,16
200010c6:	8082                	ret

200010c8 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:32
}

bool test_main(void) {
200010c8:	1101                	addi	sp,sp,-32
200010ca:	ce06                	sw	ra,28(sp)
200010cc:	cc22                	sw	s0,24(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:34
  rom_error_t result = kErrorOk;
  EXECUTE_TEST(result, uart_test);
200010ce:	00000517          	auipc	a0,0x0
200010d2:	5da50513          	addi	a0,a0,1498 # 200016a8 <kDeviceLogBypassUartAddress>
200010d6:	4108                	lw	a0,0(a0)
200010d8:	c10d                	beqz	a0,200010fa <test_main+0x32>
200010da:	e000f517          	auipc	a0,0xe000f
200010de:	fee50513          	addi	a0,a0,-18 # 100c8 <test_main.kLogFields>
200010e2:	4581                	li	a1,0
200010e4:	c02ff0ef          	jal	ra,200004e6 <base_log_internal_dv>
200010e8:	3775                	jal	20001094 <uart_test>
200010ea:	e000f517          	auipc	a0,0xe000f
200010ee:	ff250513          	addi	a0,a0,-14 # 100dc <test_main.kLogFields.3>
200010f2:	4581                	li	a1,0
200010f4:	bf2ff0ef          	jal	ra,200004e6 <base_log_internal_dv>
200010f8:	a805                	j	20001128 <test_main+0x60>
200010fa:	00000597          	auipc	a1,0x0
200010fe:	5b658593          	addi	a1,a1,1462 # 200016b0 <kTestConfig+0x4>
20001102:	840a                	mv	s0,sp
20001104:	4651                	li	a2,20
20001106:	8522                	mv	a0,s0
20001108:	3701                	jal	20001008 <memcpy>
2000110a:	8522                	mv	a0,s0
2000110c:	b30ff0ef          	jal	ra,2000043c <base_log_internal_core>
20001110:	3751                	jal	20001094 <uart_test>
20001112:	00000597          	auipc	a1,0x0
20001116:	5b258593          	addi	a1,a1,1458 # 200016c4 <kTestConfig+0x18>
2000111a:	840a                	mv	s0,sp
2000111c:	4651                	li	a2,20
2000111e:	8522                	mv	a0,s0
20001120:	35e5                	jal	20001008 <memcpy>
20001122:	8522                	mv	a0,s0
20001124:	b18ff0ef          	jal	ra,2000043c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart_functest.c:35
  return result == kErrorOk;
20001128:	4505                	li	a0,1
2000112a:	4462                	lw	s0,24(sp)
2000112c:	40f2                	lw	ra,28(sp)
2000112e:	6105                	addi	sp,sp,32
20001130:	8082                	ret
	...

20001134 <uart_init>:
uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:38
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_STATE_REG_OFFSET,
                   UINT32_MAX);
}

rom_error_t uart_init(uint32_t precalculated_nco) {
  if (precalculated_nco == 0 || precalculated_nco & ~UART_CTRL_NCO_MASK) {
20001134:	fff50593          	addi	a1,a0,-1
20001138:	6641                	lui	a2,0x10
2000113a:	1679                	addi	a2,a2,-2
2000113c:	00b67763          	bgeu	a2,a1,2000114a <uart_init+0x16>
20001140:	01415537          	lui	a0,0x1415
20001144:	50350513          	addi	a0,a0,1283 # 1415503 <test_main.kLogFields.3+0x1405427>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:56

  // Disable interrupts.
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_ENABLE_REG_OFFSET,
                   0u);
  return kErrorOk;
}
20001148:	8082                	ret
2000114a:	400005b7          	lui	a1,0x40000
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
 *
 * @param addr the address to write to.
 * @param value the value to write.
 */
inline void abs_mmio_write32(uint32_t addr, uint32_t value) {
  *((volatile uint32_t *)addr) = value;
2000114e:	0005a623          	sw	zero,12(a1) # 4000000c <_data_init_start+0x1fffe584>
20001152:	460d                	li	a2,3
20001154:	cdd0                	sw	a2,28(a1)
20001156:	0205a223          	sw	zero,36(a1)
2000115a:	0205a623          	sw	zero,44(a1)
2000115e:	0005a223          	sw	zero,4(a1)
20001162:	567d                	li	a2,-1
20001164:	c190                	sw	a2,0(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001166:	0542                	slli	a0,a0,0x10
20001168:	00156513          	ori	a0,a0,1
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
2000116c:	c5c8                	sw	a0,12(a1)
2000116e:	0005a223          	sw	zero,4(a1)
20001172:	73900513          	li	a0,1849
uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:56
20001176:	8082                	ret

20001178 <uart_putchar>:
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:70
  uint32_t reg =
      abs_mmio_read32(TOP_EARLGREY_UART0_BASE_ADDR + UART_STATUS_REG_OFFSET);
  return bitfield_bit32_read(reg, UART_STATUS_TXIDLE_BIT);
}

void uart_putchar(uint8_t byte) {
20001178:	400005b7          	lui	a1,0x40000
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
2000117c:	4990                	lw	a2,16(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000117e:	8a05                	andi	a2,a2,1
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:72
  // If the transmit FIFO is full, wait.
  while (uart_tx_full()) {
20001180:	fe75                	bnez	a2,2000117c <uart_putchar+0x4>
20001182:	400005b7          	lui	a1,0x40000
20001186:	01858613          	addi	a2,a1,24 # 40000018 <_data_init_start+0x1fffe590>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
2000118a:	c208                	sw	a0,0(a2)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
2000118c:	4988                	lw	a0,16(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000118e:	8921                	andi	a0,a0,8
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:78
  }
  uint32_t reg = bitfield_field32_write(0, UART_WDATA_WDATA_FIELD, byte);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_WDATA_REG_OFFSET, reg);

  // If the transmitter is active, wait.
  while (!uart_tx_idle()) {
20001190:	dd75                	beqz	a0,2000118c <uart_putchar+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:80
  }
}
20001192:	8082                	ret

20001194 <uart_write>:
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:85

/**
 * Write `len` bytes to the UART TX FIFO.
 */
size_t uart_write(const uint8_t *data, size_t len) {
20001194:	882e                	mv	a6,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  size_t total = len;
  while (len) {
20001196:	c195                	beqz	a1,200011ba <uart_write+0x26>
20001198:	40000637          	lui	a2,0x40000
2000119c:	01860693          	addi	a3,a2,24 # 40000018 <_data_init_start+0x1fffe590>
200011a0:	8742                	mv	a4,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:88
    uart_putchar(*data);
200011a2:	00054783          	lbu	a5,0(a0)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
200011a6:	4a0c                	lw	a1,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011a8:	8985                	andi	a1,a1,1
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:72
  while (uart_tx_full()) {
200011aa:	fdf5                	bnez	a1,200011a6 <uart_write+0x12>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
200011ac:	c29c                	sw	a5,0(a3)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
200011ae:	4a0c                	lw	a1,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011b0:	89a1                	andi	a1,a1,8
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:78
  while (!uart_tx_idle()) {
200011b2:	ddf5                	beqz	a1,200011ae <uart_write+0x1a>
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:90
    data++;
    len--;
200011b4:	177d                	addi	a4,a4,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:89
    data++;
200011b6:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  while (len) {
200011b8:	f76d                	bnez	a4,200011a2 <uart_write+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:92
  }
  return total;
200011ba:	8542                	mv	a0,a6
200011bc:	8082                	ret

200011be <uart_sink>:
uart_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:95
}

size_t uart_sink(void *uart, const char *data, size_t len) {
200011be:	8532                	mv	a0,a2
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  while (len) {
200011c0:	c21d                	beqz	a2,200011e6 <uart_sink+0x28>
200011c2:	40000637          	lui	a2,0x40000
200011c6:	01860813          	addi	a6,a2,24 # 40000018 <_data_init_start+0x1fffe590>
200011ca:	872a                	mv	a4,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:88
    uart_putchar(*data);
200011cc:	0005c783          	lbu	a5,0(a1)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
200011d0:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011d2:	8a85                	andi	a3,a3,1
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:72
  while (uart_tx_full()) {
200011d4:	fef5                	bnez	a3,200011d0 <uart_sink+0x12>
abs_mmio_write32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:79
  *((volatile uint32_t *)addr) = value;
200011d6:	00f82023          	sw	a5,0(a6)
abs_mmio_read32():
/home/gl/work/opentitan/repo/sw/device/silicon_creator/lib/base/abs_mmio.h:69
  return *((volatile uint32_t *)addr);
200011da:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011dc:	8aa1                	andi	a3,a3,8
uart_putchar():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:78
  while (!uart_tx_idle()) {
200011de:	def5                	beqz	a3,200011da <uart_sink+0x1c>
uart_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:90
    len--;
200011e0:	177d                	addi	a4,a4,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:89
    data++;
200011e2:	0585                	addi	a1,a1,1
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:87
  while (len) {
200011e4:	f765                	bnez	a4,200011cc <uart_sink+0xe>
uart_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/silicon_creator/lib/drivers/uart.c:97
  (void)uart;
  return uart_write((const uint8_t *)data, len);
200011e6:	8082                	ret

200011e8 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200011e8:	88aa                	mv	a7,a0
200011ea:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200011ec:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200011ee:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200011f0:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200011f2:	20069963          	bnez	a3,20001404 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200011f6:	200016b7          	lui	a3,0x20001
200011fa:	6d868693          	addi	a3,a3,1752 # 200016d8 <__clz_tab>
200011fe:	0cc5f063          	bgeu	a1,a2,200012be <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001202:	6741                	lui	a4,0x10
20001204:	0ae67663          	bgeu	a2,a4,200012b0 <__udivdi3+0xc8>
20001208:	0ff00713          	li	a4,255
2000120c:	00c73733          	sltu	a4,a4,a2
20001210:	070e                	slli	a4,a4,0x3
20001212:	00e65533          	srl	a0,a2,a4
20001216:	96aa                	add	a3,a3,a0
20001218:	0006c683          	lbu	a3,0(a3)
2000121c:	02000513          	li	a0,32
20001220:	9736                	add	a4,a4,a3
20001222:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001226:	00e50c63          	beq	a0,a4,2000123e <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000122a:	00d797b3          	sll	a5,a5,a3
2000122e:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001232:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001236:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
2000123a:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
2000123e:	01085893          	srli	a7,a6,0x10
20001242:	0315d7b3          	divu	a5,a1,a7
20001246:	01081613          	slli	a2,a6,0x10
2000124a:	8241                	srli	a2,a2,0x10
2000124c:	01035713          	srli	a4,t1,0x10
20001250:	0315f6b3          	remu	a3,a1,a7
20001254:	853e                	mv	a0,a5
20001256:	02f605b3          	mul	a1,a2,a5
2000125a:	06c2                	slli	a3,a3,0x10
2000125c:	8f55                	or	a4,a4,a3
2000125e:	00b77c63          	bgeu	a4,a1,20001276 <__udivdi3+0x8e>
20001262:	9742                	add	a4,a4,a6
20001264:	fff78513          	addi	a0,a5,-1
20001268:	01076763          	bltu	a4,a6,20001276 <__udivdi3+0x8e>
2000126c:	00b77563          	bgeu	a4,a1,20001276 <__udivdi3+0x8e>
20001270:	ffe78513          	addi	a0,a5,-2
20001274:	9742                	add	a4,a4,a6
20001276:	8f0d                	sub	a4,a4,a1
20001278:	031777b3          	remu	a5,a4,a7
2000127c:	0342                	slli	t1,t1,0x10
2000127e:	01035313          	srli	t1,t1,0x10
20001282:	03175733          	divu	a4,a4,a7
20001286:	07c2                	slli	a5,a5,0x10
20001288:	0067e333          	or	t1,a5,t1
2000128c:	02e606b3          	mul	a3,a2,a4
20001290:	863a                	mv	a2,a4
20001292:	00d37b63          	bgeu	t1,a3,200012a8 <__udivdi3+0xc0>
20001296:	9342                	add	t1,t1,a6
20001298:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000129c:	01036663          	bltu	t1,a6,200012a8 <__udivdi3+0xc0>
200012a0:	00d37463          	bgeu	t1,a3,200012a8 <__udivdi3+0xc0>
200012a4:	ffe70613          	addi	a2,a4,-2
200012a8:	0542                	slli	a0,a0,0x10
200012aa:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200012ac:	4581                	li	a1,0
200012ae:	a85d                	j	20001364 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200012b0:	01000537          	lui	a0,0x1000
200012b4:	4741                	li	a4,16
200012b6:	f4a66ee3          	bltu	a2,a0,20001212 <__udivdi3+0x2a>
200012ba:	4761                	li	a4,24
200012bc:	bf99                	j	20001212 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
200012be:	e601                	bnez	a2,200012c6 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
200012c0:	4705                	li	a4,1
200012c2:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200012c6:	6741                	lui	a4,0x10
200012c8:	08e87f63          	bgeu	a6,a4,20001366 <__udivdi3+0x17e>
200012cc:	0ff00713          	li	a4,255
200012d0:	01077363          	bgeu	a4,a6,200012d6 <__udivdi3+0xee>
200012d4:	4521                	li	a0,8
200012d6:	00a85733          	srl	a4,a6,a0
200012da:	96ba                	add	a3,a3,a4
200012dc:	0006c703          	lbu	a4,0(a3)
200012e0:	02000613          	li	a2,32
200012e4:	972a                	add	a4,a4,a0
200012e6:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
200012ea:	08e61563          	bne	a2,a4,20001374 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
200012ee:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
200012f2:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
200012f4:	01085893          	srli	a7,a6,0x10
200012f8:	01081613          	slli	a2,a6,0x10
200012fc:	8241                	srli	a2,a2,0x10
200012fe:	01035713          	srli	a4,t1,0x10
20001302:	0317f6b3          	remu	a3,a5,a7
20001306:	0317d7b3          	divu	a5,a5,a7
2000130a:	06c2                	slli	a3,a3,0x10
2000130c:	8f55                	or	a4,a4,a3
2000130e:	02f60e33          	mul	t3,a2,a5
20001312:	853e                	mv	a0,a5
20001314:	01c77c63          	bgeu	a4,t3,2000132c <__udivdi3+0x144>
20001318:	9742                	add	a4,a4,a6
2000131a:	fff78513          	addi	a0,a5,-1
2000131e:	01076763          	bltu	a4,a6,2000132c <__udivdi3+0x144>
20001322:	01c77563          	bgeu	a4,t3,2000132c <__udivdi3+0x144>
20001326:	ffe78513          	addi	a0,a5,-2
2000132a:	9742                	add	a4,a4,a6
2000132c:	41c70733          	sub	a4,a4,t3
20001330:	031777b3          	remu	a5,a4,a7
20001334:	0342                	slli	t1,t1,0x10
20001336:	01035313          	srli	t1,t1,0x10
2000133a:	03175733          	divu	a4,a4,a7
2000133e:	07c2                	slli	a5,a5,0x10
20001340:	0067e333          	or	t1,a5,t1
20001344:	02e606b3          	mul	a3,a2,a4
20001348:	863a                	mv	a2,a4
2000134a:	00d37b63          	bgeu	t1,a3,20001360 <__udivdi3+0x178>
2000134e:	9342                	add	t1,t1,a6
20001350:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001354:	01036663          	bltu	t1,a6,20001360 <__udivdi3+0x178>
20001358:	00d37463          	bgeu	t1,a3,20001360 <__udivdi3+0x178>
2000135c:	ffe70613          	addi	a2,a4,-2
20001360:	0542                	slli	a0,a0,0x10
20001362:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001364:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001366:	01000737          	lui	a4,0x1000
2000136a:	4541                	li	a0,16
2000136c:	f6e865e3          	bltu	a6,a4,200012d6 <__udivdi3+0xee>
20001370:	4561                	li	a0,24
20001372:	b795                	j	200012d6 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001374:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001378:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
2000137c:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001380:	00d797b3          	sll	a5,a5,a3
20001384:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001388:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000138c:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001390:	0315f733          	remu	a4,a1,a7
20001394:	01081793          	slli	a5,a6,0x10
20001398:	83c1                	srli	a5,a5,0x10
2000139a:	01065513          	srli	a0,a2,0x10
2000139e:	0315d5b3          	divu	a1,a1,a7
200013a2:	0742                	slli	a4,a4,0x10
200013a4:	8f49                	or	a4,a4,a0
200013a6:	02b786b3          	mul	a3,a5,a1
200013aa:	852e                	mv	a0,a1
200013ac:	00d77c63          	bgeu	a4,a3,200013c4 <__udivdi3+0x1dc>
200013b0:	9742                	add	a4,a4,a6
200013b2:	fff58513          	addi	a0,a1,-1
200013b6:	01076763          	bltu	a4,a6,200013c4 <__udivdi3+0x1dc>
200013ba:	00d77563          	bgeu	a4,a3,200013c4 <__udivdi3+0x1dc>
200013be:	ffe58513          	addi	a0,a1,-2
200013c2:	9742                	add	a4,a4,a6
200013c4:	40d706b3          	sub	a3,a4,a3
200013c8:	0316f733          	remu	a4,a3,a7
200013cc:	0642                	slli	a2,a2,0x10
200013ce:	8241                	srli	a2,a2,0x10
200013d0:	0316d6b3          	divu	a3,a3,a7
200013d4:	0742                	slli	a4,a4,0x10
200013d6:	02d788b3          	mul	a7,a5,a3
200013da:	00c767b3          	or	a5,a4,a2
200013de:	8736                	mv	a4,a3
200013e0:	0117fc63          	bgeu	a5,a7,200013f8 <__udivdi3+0x210>
200013e4:	97c2                	add	a5,a5,a6
200013e6:	fff68713          	addi	a4,a3,-1
200013ea:	0107e763          	bltu	a5,a6,200013f8 <__udivdi3+0x210>
200013ee:	0117f563          	bgeu	a5,a7,200013f8 <__udivdi3+0x210>
200013f2:	ffe68713          	addi	a4,a3,-2
200013f6:	97c2                	add	a5,a5,a6
200013f8:	01051593          	slli	a1,a0,0x10
200013fc:	411787b3          	sub	a5,a5,a7
20001400:	8dd9                	or	a1,a1,a4
20001402:	bdcd                	j	200012f4 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001404:	14d5e263          	bltu	a1,a3,20001548 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001408:	6741                	lui	a4,0x10
2000140a:	02e6ff63          	bgeu	a3,a4,20001448 <__udivdi3+0x260>
2000140e:	0ff00713          	li	a4,255
20001412:	00d735b3          	sltu	a1,a4,a3
20001416:	058e                	slli	a1,a1,0x3
20001418:	20001737          	lui	a4,0x20001
2000141c:	00b6d533          	srl	a0,a3,a1
20001420:	6d870713          	addi	a4,a4,1752 # 200016d8 <__clz_tab>
20001424:	972a                	add	a4,a4,a0
20001426:	00074703          	lbu	a4,0(a4)
2000142a:	02000513          	li	a0,32
2000142e:	972e                	add	a4,a4,a1
20001430:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001434:	02e51163          	bne	a0,a4,20001456 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001438:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
2000143a:	f2f6e5e3          	bltu	a3,a5,20001364 <__udivdi3+0x17c>
2000143e:	00c8b533          	sltu	a0,a7,a2
20001442:	00154513          	xori	a0,a0,1
20001446:	bf39                	j	20001364 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001448:	01000737          	lui	a4,0x1000
2000144c:	45c1                	li	a1,16
2000144e:	fce6e5e3          	bltu	a3,a4,20001418 <__udivdi3+0x230>
20001452:	45e1                	li	a1,24
20001454:	b7d1                	j	20001418 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001456:	00e65333          	srl	t1,a2,a4
2000145a:	00b696b3          	sll	a3,a3,a1
2000145e:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001462:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001466:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
2000146a:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000146e:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001472:	00b797b3          	sll	a5,a5,a1
20001476:	00e8d733          	srl	a4,a7,a4
2000147a:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000147e:	01031793          	slli	a5,t1,0x10
20001482:	83c1                	srli	a5,a5,0x10
20001484:	01085713          	srli	a4,a6,0x10
20001488:	02a65633          	divu	a2,a2,a0
2000148c:	06c2                	slli	a3,a3,0x10
2000148e:	8f55                	or	a4,a4,a3
20001490:	02c78f33          	mul	t5,a5,a2
20001494:	8e32                	mv	t3,a2
20001496:	01e77c63          	bgeu	a4,t5,200014ae <__udivdi3+0x2c6>
2000149a:	971a                	add	a4,a4,t1
2000149c:	fff60e13          	addi	t3,a2,-1
200014a0:	00676763          	bltu	a4,t1,200014ae <__udivdi3+0x2c6>
200014a4:	01e77563          	bgeu	a4,t5,200014ae <__udivdi3+0x2c6>
200014a8:	ffe60e13          	addi	t3,a2,-2
200014ac:	971a                	add	a4,a4,t1
200014ae:	41e70733          	sub	a4,a4,t5
200014b2:	02a776b3          	remu	a3,a4,a0
200014b6:	02a75733          	divu	a4,a4,a0
200014ba:	06c2                	slli	a3,a3,0x10
200014bc:	02e78633          	mul	a2,a5,a4
200014c0:	01081793          	slli	a5,a6,0x10
200014c4:	83c1                	srli	a5,a5,0x10
200014c6:	8fd5                	or	a5,a5,a3
200014c8:	86ba                	mv	a3,a4
200014ca:	00c7fc63          	bgeu	a5,a2,200014e2 <__udivdi3+0x2fa>
200014ce:	979a                	add	a5,a5,t1
200014d0:	fff70693          	addi	a3,a4,-1 # ffffff <test_main.kLogFields.3+0xfeff23>
200014d4:	0067e763          	bltu	a5,t1,200014e2 <__udivdi3+0x2fa>
200014d8:	00c7f563          	bgeu	a5,a2,200014e2 <__udivdi3+0x2fa>
200014dc:	ffe70693          	addi	a3,a4,-2
200014e0:	979a                	add	a5,a5,t1
200014e2:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200014e6:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200014e8:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200014ea:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
200014ee:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200014f2:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200014f4:	00def6b3          	and	a3,t4,a3
200014f8:	01055613          	srli	a2,a0,0x10
200014fc:	010ede93          	srli	t4,t4,0x10
20001500:	02d80333          	mul	t1,a6,a3
20001504:	02d606b3          	mul	a3,a2,a3
20001508:	01035713          	srli	a4,t1,0x10
2000150c:	03d80833          	mul	a6,a6,t4
20001510:	9836                	add	a6,a6,a3
20001512:	9742                	add	a4,a4,a6
20001514:	03d60633          	mul	a2,a2,t4
20001518:	00d77363          	bgeu	a4,a3,2000151e <__udivdi3+0x336>
2000151c:	9672                	add	a2,a2,t3
2000151e:	01075693          	srli	a3,a4,0x10
20001522:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001524:	02c7e063          	bltu	a5,a2,20001544 <__udivdi3+0x35c>
20001528:	d8c792e3          	bne	a5,a2,200012ac <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000152c:	67c1                	lui	a5,0x10
2000152e:	17fd                	addi	a5,a5,-1
20001530:	8f7d                	and	a4,a4,a5
20001532:	0742                	slli	a4,a4,0x10
20001534:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001538:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000153c:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000153e:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001540:	e2e8f2e3          	bgeu	a7,a4,20001364 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001544:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001546:	b39d                	j	200012ac <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001548:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
2000154a:	4501                	li	a0,0
2000154c:	bd21                	j	20001364 <__udivdi3+0x17c>
