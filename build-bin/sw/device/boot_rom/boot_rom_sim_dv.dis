
sw/device/boot_rom/boot_rom_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors      00000084  00008000  00008000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .crt          00000118  00008084  00008084  00001084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002584  0000819c  0000819c  0000119c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007ef  0000a720  0000a720  00003720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000008  10000000  0000af10  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .chip_info    00000080  0000bf60  0000bf60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .bss          00000008  10000008  0000af18  00004008  2**2
                  ALLOC
  7 .logs.fields  00000230  00000000  00000000  00004fe0  2**2
                  CONTENTS, READONLY
  8 .riscv.attributes 00000026  00000000  00000000  00005210  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c5e3  00000000  00000000  00005236  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e9a  00000000  00000000  00011819  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000a0  00000000  00000000  000136b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006576  00000000  00000000  00013753  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006fd7  00000000  00000000  00019cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000570  00000000  00000000  00020ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000503c  00000000  00000000  00021210  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000b54  00000000  00000000  0002624c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .vectors:

00008000 <_boot_address>:
    8000:	2510006f          	j	8a50 <exception_handler>
	...
    800c:	24b0006f          	j	8a56 <default_irq_handler>
	...
    801c:	23b0006f          	j	8a56 <default_irq_handler>
	...
    802c:	22b0006f          	j	8a56 <default_irq_handler>
	...
    8040:	2170006f          	j	8a56 <default_irq_handler>
    8044:	2130006f          	j	8a56 <default_irq_handler>
    8048:	20f0006f          	j	8a56 <default_irq_handler>
    804c:	20b0006f          	j	8a56 <default_irq_handler>
    8050:	2070006f          	j	8a56 <default_irq_handler>
    8054:	2030006f          	j	8a56 <default_irq_handler>
    8058:	1ff0006f          	j	8a56 <default_irq_handler>
    805c:	1fb0006f          	j	8a56 <default_irq_handler>
    8060:	1f70006f          	j	8a56 <default_irq_handler>
    8064:	1f30006f          	j	8a56 <default_irq_handler>
    8068:	1ef0006f          	j	8a56 <default_irq_handler>
    806c:	1eb0006f          	j	8a56 <default_irq_handler>
    8070:	1e70006f          	j	8a56 <default_irq_handler>
    8074:	1e30006f          	j	8a56 <default_irq_handler>
    8078:	1df0006f          	j	8a56 <default_irq_handler>
    807c:	1db0006f          	j	8a56 <default_irq_handler>
    8080:	0040006f          	j	8084 <_reset_start>

Disassembly of section .crt:

00008084 <_reset_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:31
 * Sets up the stack, then jumps to `_start`.
 */
_reset_start:
  .globl _reset_start
  // Clobber all writeable registers.
  li  x1, 0x0
    8084:	4081                	li	ra,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:32
  li  x2, 0x0
    8086:	4101                	li	sp,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:33
  li  x3, 0x0
    8088:	4181                	li	gp,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:34
  li  x4, 0x0
    808a:	4201                	li	tp,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:35
  li  x5, 0x0
    808c:	4281                	li	t0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:36
  li  x6, 0x0
    808e:	4301                	li	t1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:37
  li  x7, 0x0
    8090:	4381                	li	t2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:38
  li  x8, 0x0
    8092:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:39
  li  x9, 0x0
    8094:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:40
  li  x10, 0x0
    8096:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:41
  li  x11, 0x0
    8098:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:42
  li  x12, 0x0
    809a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:43
  li  x13, 0x0
    809c:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:44
  li  x14, 0x0
    809e:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:45
  li  x15, 0x0
    80a0:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:46
  li  x16, 0x0
    80a2:	4801                	li	a6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:47
  li  x17, 0x0
    80a4:	4881                	li	a7,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:48
  li  x18, 0x0
    80a6:	4901                	li	s2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:49
  li  x19, 0x0
    80a8:	4981                	li	s3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:50
  li  x20, 0x0
    80aa:	4a01                	li	s4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:51
  li  x21, 0x0
    80ac:	4a81                	li	s5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:52
  li  x22, 0x0
    80ae:	4b01                	li	s6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:53
  li  x23, 0x0
    80b0:	4b81                	li	s7,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:54
  li  x24, 0x0
    80b2:	4c01                	li	s8,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:55
  li  x25, 0x0
    80b4:	4c81                	li	s9,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:56
  li  x26, 0x0
    80b6:	4d01                	li	s10,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:57
  li  x27, 0x0
    80b8:	4d81                	li	s11,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:58
  li  x28, 0x0
    80ba:	4e01                	li	t3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:59
  li  x29, 0x0
    80bc:	4e81                	li	t4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:60
  li  x30, 0x0
    80be:	4f01                	li	t5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:61
  li  x31, 0x0
    80c0:	4f81                	li	t6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:64

  // Set up the stack.
  la  sp, _stack_end
    80c2:	10018117          	auipc	sp,0x10018
    80c6:	f3e10113          	addi	sp,sp,-194 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:70

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la  gp, __global_pointer$
    80ca:	0fff8197          	auipc	gp,0xfff8
    80ce:	73618193          	addi	gp,gp,1846 # 10000800 <__global_pointer$>

000080d2 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:85
 */
_start:
  .globl _start

  // Enable entropy complex - this is not the full enable
  li   a0, TOP_EARLGREY_ENTROPY_SRC_BASE_ADDR
    80d2:	41160537          	lui	a0,0x41160
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:86
  li   t0, 0x2
    80d6:	4289                	li	t0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:87
  sw   t0, ENTROPY_SRC_CONF_REG_OFFSET(a0)
    80d8:	00552c23          	sw	t0,24(a0) # 41160018 <_flash_header+0x21160018>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:89

  li   a0, TOP_EARLGREY_CSRNG_BASE_ADDR
    80dc:	41150537          	lui	a0,0x41150
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:90
  li   t0, 0x1
    80e0:	4285                	li	t0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:91
  sw   t0, CSRNG_CTRL_REG_OFFSET(a0)
    80e2:	00552a23          	sw	t0,20(a0) # 41150014 <_flash_header+0x21150014>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:93

  li   a0, TOP_EARLGREY_EDN0_BASE_ADDR
    80e6:	41170537          	lui	a0,0x41170
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:94
  li   t0, 0x9
    80ea:	42a5                	li	t0,9
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:95
  sw   t0, EDN_CTRL_REG_OFFSET(a0)
    80ec:	00552a23          	sw	t0,20(a0) # 41170014 <_flash_header+0x21170014>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:98

  // Request memory scrambling and init
  li a0, TOP_EARLGREY_SRAM_CTRL_MAIN_BASE_ADDR
    80f0:	411c0537          	lui	a0,0x411c0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:99
  li a1, (1<<SRAM_CTRL_CTRL_RENEW_SCR_KEY_BIT)|(1<<SRAM_CTRL_CTRL_INIT_BIT)
    80f4:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:100
  sw a1, SRAM_CTRL_CTRL_REG_OFFSET(a0)
    80f6:	c94c                	sw	a1,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:103

  // Zero out the `.bss` segment.
  la   a0, _bss_start
    80f8:	80818513          	addi	a0,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:104
  la   a1, _bss_end
    80fc:	81018593          	addi	a1,gp,-2032 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:105
  call crt_section_clear
    8100:	283d                	jal	813e <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:116
  //la   a0, _stack_start
  //la   a1, _stack_end
  //call crt_section_clear

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
    8102:	0fff8517          	auipc	a0,0xfff8
    8106:	efe50513          	addi	a0,a0,-258 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:117
  la   a1, _data_end
    810a:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:118
  la   a2, _data_init_start
    810e:	00003617          	auipc	a2,0x3
    8112:	e0260613          	addi	a2,a2,-510 # af10 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:119
  call crt_section_copy
    8116:	20b1                	jal	8162 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:122

  // Clobber all temporary registers.
  li t0, 0x0
    8118:	4281                	li	t0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:123
  li t1, 0x0
    811a:	4301                	li	t1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:124
  li t2, 0x0
    811c:	4381                	li	t2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:125
  li t3, 0x0
    811e:	4e01                	li	t3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:126
  li t4, 0x0
    8120:	4e81                	li	t4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:127
  li t5, 0x0
    8122:	4f01                	li	t5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:128
  li t6, 0x0
    8124:	4f81                	li	t6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:131

  // Clobber all argument registers.
  li a0, 0x0
    8126:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:132
  li a1, 0x0
    8128:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:133
  li a2, 0x0
    812a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:134
  li a3, 0x0
    812c:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:135
  li a4, 0x0
    812e:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:136
  li a5, 0x0
    8130:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:137
  li a6, 0x0
    8132:	4801                	li	a6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:138
  li a7, 0x0
    8134:	4881                	li	a7,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:141

  // Jump into the C program entry point.
  call _boot_start
    8136:	209d                	jal	819c <_boot_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:145

  // Loop forever if _boot_start somehow returns.
1:
  wfi
    8138:	10500073          	wfi
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/rom_crt.S:146
  j 1b
    813c:	bff5                	j	8138 <_start+0x66>

0000813e <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
    813e:	00b57e63          	bgeu	a0,a1,815a <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
    8142:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
    8146:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
    814a:	00029b63          	bnez	t0,8160 <L_clear_error>

0000814e <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
    814e:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
    8152:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
    8154:	feb56de3          	bltu	a0,a1,814e <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
    8158:	8082                	ret

0000815a <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
    815a:	00b51363          	bne	a0,a1,8160 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
    815e:	8082                	ret

00008160 <L_clear_error>:
	...

00008162 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
    8162:	02b57963          	bgeu	a0,a1,8194 <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
    8166:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
    816a:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
    816e:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
    8172:	02029463          	bnez	t0,819a <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
    8176:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
    817a:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
    817e:	0062ee63          	bltu	t0,t1,819a <L_copy_error>

00008182 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
    8182:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
    8186:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
    8188:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
    818c:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
    818e:	feb56ae3          	bltu	a0,a1,8182 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
    8192:	8082                	ret

00008194 <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
    8194:	00b51363          	bne	a0,a1,819a <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
    8198:	8082                	ret

0000819a <L_copy_error>:
	...

Disassembly of section .text:

0000819c <_boot_start>:
_boot_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:33
 */
extern struct { void (*entry)(void); } _flash_header;

static dif_uart_t uart0;

void _boot_start(void) {
    819c:	1101                	addi	sp,sp,-32
    819e:	ce06                	sw	ra,28(sp)
    81a0:	cc22                	sw	s0,24(sp)
    81a2:	ca26                	sw	s1,20(sp)
    81a4:	652d                	lui	a0,0xb
    81a6:	09050513          	addi	a0,a0,144 # b090 <_data_init_start+0x180>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:34
  test_status_set(kTestStatusInBootRom);
    81aa:	7c3010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:35
  pinmux_init();
    81ae:	502010ef          	jal	ra,96b0 <pinmux_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:36
  flash_init();
    81b2:	4f4010ef          	jal	ra,96a6 <flash_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:37
  while (flash_get_init_status())
    81b6:	4e2010ef          	jal	ra,9698 <flash_get_init_status>
    81ba:	fd75                	bnez	a0,81b6 <_boot_start+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:40
    ;

  CHECK(
    81bc:	0fff8597          	auipc	a1,0xfff8
    81c0:	e4c58593          	addi	a1,a1,-436 # 10000008 <_data_end>
    81c4:	40000537          	lui	a0,0x40000
    81c8:	675000ef          	jal	ra,903c <dif_uart_init>
    81cc:	00002497          	auipc	s1,0x2
    81d0:	7f448493          	addi	s1,s1,2036 # a9c0 <kDeviceLogBypassUartAddress>
    81d4:	c915                	beqz	a0,8208 <_boot_start+0x6c>
    81d6:	4088                	lw	a0,0(s1)
    81d8:	ed11                	bnez	a0,81f4 <_boot_start+0x58>
    81da:	00002597          	auipc	a1,0x2
    81de:	54658593          	addi	a1,a1,1350 # a720 <__udivdi3+0x362>
    81e2:	840a                	mv	s0,sp
    81e4:	4651                	li	a2,20
    81e6:	8522                	mv	a0,s0
    81e8:	105000ef          	jal	ra,8aec <memcpy>
    81ec:	8522                	mv	a0,s0
    81ee:	69f010ef          	jal	ra,a08c <base_log_internal_core>
    81f2:	a031                	j	81fe <_boot_start+0x62>
    81f4:	00000513          	li	a0,0
    81f8:	4581                	li	a1,0
    81fa:	73f010ef          	jal	ra,a138 <base_log_internal_dv>
    81fe:	6531                	lui	a0,0xc
    8200:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    8204:	769010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:47
          (dif_uart_params_t){
              .base_addr = mmio_region_from_addr(TOP_EARLGREY_UART0_BASE_ADDR),
          },
          &uart0) == kDifUartOk,
      "failed to init UART");
  CHECK(dif_uart_configure(&uart0,
    8208:	00002517          	auipc	a0,0x2
    820c:	7a850513          	addi	a0,a0,1960 # a9b0 <kUartBaudrate>
    8210:	4108                	lw	a0,0(a0)
    8212:	00002597          	auipc	a1,0x2
    8216:	78e58593          	addi	a1,a1,1934 # a9a0 <kClockFreqPeripheralHz>
    821a:	418c                	lw	a1,0(a1)
    821c:	c02a                	sw	a0,0(sp)
    821e:	c22e                	sw	a1,4(sp)
    8220:	4505                	li	a0,1
    8222:	c42a                	sw	a0,8(sp)
    8224:	c62a                	sw	a0,12(sp)
    8226:	0fff8517          	auipc	a0,0xfff8
    822a:	de250513          	addi	a0,a0,-542 # 10000008 <_data_end>
    822e:	858a                	mv	a1,sp
    8230:	61b000ef          	jal	ra,904a <dif_uart_configure>
    8234:	c915                	beqz	a0,8268 <_boot_start+0xcc>
    8236:	4088                	lw	a0,0(s1)
    8238:	ed11                	bnez	a0,8254 <_boot_start+0xb8>
    823a:	00002597          	auipc	a1,0x2
    823e:	4fa58593          	addi	a1,a1,1274 # a734 <__udivdi3+0x376>
    8242:	840a                	mv	s0,sp
    8244:	4651                	li	a2,20
    8246:	8522                	mv	a0,s0
    8248:	0a5000ef          	jal	ra,8aec <memcpy>
    824c:	8522                	mv	a0,s0
    824e:	63f010ef          	jal	ra,a08c <base_log_internal_core>
    8252:	a031                	j	825e <_boot_start+0xc2>
    8254:	01400513          	li	a0,20
    8258:	4581                	li	a1,0
    825a:	6df010ef          	jal	ra,a138 <base_log_internal_dv>
    825e:	6531                	lui	a0,0xc
    8260:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    8264:	709010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:55
                               .clk_freq_hz = kClockFreqPeripheralHz,
                               .parity_enable = kDifUartToggleDisabled,
                               .parity = kDifUartParityEven,
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
    8268:	0fff8517          	auipc	a0,0xfff8
    826c:	da050513          	addi	a0,a0,-608 # 10000008 <_data_end>
    8270:	125000ef          	jal	ra,8b94 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:57

  LOG_INFO("%s", chip_info);
    8274:	4088                	lw	a0,0(s1)
    8276:	e13d                	bnez	a0,82dc <_boot_start+0x140>
    8278:	00002597          	auipc	a1,0x2
    827c:	4d058593          	addi	a1,a1,1232 # a748 <__udivdi3+0x38a>
    8280:	840a                	mv	s0,sp
    8282:	4651                	li	a2,20
    8284:	8522                	mv	a0,s0
    8286:	067000ef          	jal	ra,8aec <memcpy>
    828a:	00004597          	auipc	a1,0x4
    828e:	cd658593          	addi	a1,a1,-810 # bf60 <_chip_info_start>
    8292:	8522                	mv	a0,s0
    8294:	5f9010ef          	jal	ra,a08c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:59

  int bootstrap_err = bootstrap();
    8298:	2071                	jal	8324 <bootstrap>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:60
  if (bootstrap_err != 0) {
    829a:	c505                	beqz	a0,82c2 <_boot_start+0x126>
    829c:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:61
    LOG_ERROR("Bootstrap failed with status code: %d", bootstrap_err);
    829e:	00002597          	auipc	a1,0x2
    82a2:	4be58593          	addi	a1,a1,1214 # a75c <__udivdi3+0x39e>
    82a6:	848a                	mv	s1,sp
    82a8:	4651                	li	a2,20
    82aa:	8526                	mv	a0,s1
    82ac:	041000ef          	jal	ra,8aec <memcpy>
    82b0:	8526                	mv	a0,s1
    82b2:	85a2                	mv	a1,s0
    82b4:	5d9010ef          	jal	ra,a08c <base_log_internal_core>
    82b8:	6531                	lui	a0,0xc
    82ba:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:63
    // Currently the only way to recover is by a hard reset.
    test_status_set(kTestStatusFailed);
    82be:	6af010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:66
  }

  LOG_INFO("Boot ROM initialisation has completed, jump into flash!");
    82c2:	00002597          	auipc	a1,0x2
    82c6:	4ae58593          	addi	a1,a1,1198 # a770 <__udivdi3+0x3b2>
    82ca:	840a                	mv	s0,sp
    82cc:	4651                	li	a2,20
    82ce:	8522                	mv	a0,s0
    82d0:	01d000ef          	jal	ra,8aec <memcpy>
    82d4:	8522                	mv	a0,s0
    82d6:	5b7010ef          	jal	ra,a08c <base_log_internal_core>
    82da:	a825                	j	8312 <_boot_start+0x176>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:57
  LOG_INFO("%s", chip_info);
    82dc:	02800513          	li	a0,40
    82e0:	00004617          	auipc	a2,0x4
    82e4:	c8060613          	addi	a2,a2,-896 # bf60 <_chip_info_start>
    82e8:	4585                	li	a1,1
    82ea:	64f010ef          	jal	ra,a138 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:59
  int bootstrap_err = bootstrap();
    82ee:	281d                	jal	8324 <bootstrap>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:60
  if (bootstrap_err != 0) {
    82f0:	cd01                	beqz	a0,8308 <_boot_start+0x16c>
    82f2:	862a                	mv	a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:61
    LOG_ERROR("Bootstrap failed with status code: %d", bootstrap_err);
    82f4:	03c00513          	li	a0,60
    82f8:	4585                	li	a1,1
    82fa:	63f010ef          	jal	ra,a138 <base_log_internal_dv>
    82fe:	6531                	lui	a0,0xc
    8300:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:63
    test_status_set(kTestStatusFailed);
    8304:	669010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:66
  LOG_INFO("Boot ROM initialisation has completed, jump into flash!");
    8308:	05000513          	li	a0,80
    830c:	4581                	li	a1,0
    830e:	62b010ef          	jal	ra,a138 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:72

  // Jump into flash. At this point, the contents of the flash binary have been
  // verified, and we can transfer control directly to it. It is the
  // flash binary's responsibily to set up its own stack, and to never
  // return.
  _flash_header.entry();
    8312:	1fff8517          	auipc	a0,0x1fff8
    8316:	cee50513          	addi	a0,a0,-786 # 20000000 <_flash_header>
    831a:	4108                	lw	a0,0(a0)
    831c:	9502                	jalr	a0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/boot_rom.c:75

  // If the flash image returns, we should abort anyway.
  abort();
    831e:	7be000ef          	jal	ra,8adc <abort>
	...

00008324 <bootstrap>:
bootstrap():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:186
      }
    }
  }
}

int bootstrap(void) {
    8324:	81010113          	addi	sp,sp,-2032
bootstrap_requested():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:33
  if (kDeviceType == kDeviceSimVerilator) {
    8328:	7e112623          	sw	ra,2028(sp)
    832c:	7e812423          	sw	s0,2024(sp)
    8330:	7e912223          	sw	s1,2020(sp)
    8334:	7f212023          	sw	s2,2016(sp)
    8338:	7d312e23          	sw	s3,2012(sp)
    833c:	7d412c23          	sw	s4,2008(sp)
    8340:	7d512a23          	sw	s5,2004(sp)
    8344:	7d612823          	sw	s6,2000(sp)
    8348:	7d712623          	sw	s7,1996(sp)
    834c:	7d812423          	sw	s8,1992(sp)
    8350:	7d912223          	sw	s9,1988(sp)
    8354:	7da12023          	sw	s10,1984(sp)
    8358:	7bb12e23          	sw	s11,1980(sp)
    835c:	7115                	addi	sp,sp,-224
    835e:	00002517          	auipc	a0,0x2
    8362:	63250513          	addi	a0,a0,1586 # a990 <kDeviceType>
    8366:	4108                	lw	a0,0(a0)
    8368:	4585                	li	a1,1
    836a:	00b51b63          	bne	a0,a1,8380 <bootstrap+0x5c>
    836e:	20000537          	lui	a0,0x20000
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
MMIO_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    8372:	4108                	lw	a0,0(a0)
bootstrap_requested():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:36
    return value == 0 || value == UINT32_MAX;
    8374:	0505                	addi	a0,a0,1
    8376:	4589                	li	a1,2
bootstrap():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:187
  if (!bootstrap_requested()) {
    8378:	0ab56c63          	bltu	a0,a1,8430 <bootstrap+0x10c>
    837c:	4401                	li	s0,0
    837e:	a9fd                	j	887c <bootstrap+0x558>
    8380:	6505                	lui	a0,0x1
    8382:	87850513          	addi	a0,a0,-1928 # 878 <test_status_set.kLogFields.2+0x65c>
    8386:	950a                	add	a0,a0,sp
    8388:	85aa                	mv	a1,a0
bootstrap_requested():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:43
  CHECK(dif_gpio_init(gpio_params, &gpio) == kDifGpioOk);
    838a:	40040537          	lui	a0,0x40040
    838e:	36a010ef          	jal	ra,96f8 <dif_gpio_init>
    8392:	00002497          	auipc	s1,0x2
    8396:	62e48493          	addi	s1,s1,1582 # a9c0 <kDeviceLogBypassUartAddress>
    839a:	c915                	beqz	a0,83ce <bootstrap+0xaa>
    839c:	4088                	lw	a0,0(s1)
    839e:	c519                	beqz	a0,83ac <bootstrap+0x88>
    83a0:	0dc00513          	li	a0,220
    83a4:	4581                	li	a1,0
    83a6:	593010ef          	jal	ra,a138 <base_log_internal_dv>
    83aa:	a829                	j	83c4 <bootstrap+0xa0>
    83ac:	00002597          	auipc	a1,0x2
    83b0:	45058593          	addi	a1,a1,1104 # a7fc <__udivdi3+0x43e>
    83b4:	0880                	addi	s0,sp,80
    83b6:	4651                	li	a2,20
    83b8:	8522                	mv	a0,s0
    83ba:	732000ef          	jal	ra,8aec <memcpy>
    83be:	8522                	mv	a0,s0
    83c0:	4cd010ef          	jal	ra,a08c <base_log_internal_core>
    83c4:	6531                	lui	a0,0xc
    83c6:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    83ca:	5a3010ef          	jal	ra,a16c <test_status_set>
    83ce:	6505                	lui	a0,0x1
    83d0:	87850513          	addi	a0,a0,-1928 # 878 <test_status_set.kLogFields.2+0x65c>
    83d4:	950a                	add	a0,a0,sp
    83d6:	852a                	mv	a0,a0
    83d8:	6585                	lui	a1,0x1
    83da:	85858593          	addi	a1,a1,-1960 # 858 <test_status_set.kLogFields.2+0x63c>
    83de:	958a                	add	a1,a1,sp
    83e0:	85ae                	mv	a1,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:46
  CHECK(dif_gpio_read_all(&gpio, &gpio_in) == kDifGpioOk);
    83e2:	500010ef          	jal	ra,98e2 <dif_gpio_read_all>
    83e6:	c915                	beqz	a0,841a <bootstrap+0xf6>
    83e8:	4088                	lw	a0,0(s1)
    83ea:	c519                	beqz	a0,83f8 <bootstrap+0xd4>
    83ec:	0f000513          	li	a0,240
    83f0:	4581                	li	a1,0
    83f2:	547010ef          	jal	ra,a138 <base_log_internal_dv>
    83f6:	a829                	j	8410 <bootstrap+0xec>
    83f8:	00002597          	auipc	a1,0x2
    83fc:	41858593          	addi	a1,a1,1048 # a810 <__udivdi3+0x452>
    8400:	0880                	addi	s0,sp,80
    8402:	4651                	li	a2,20
    8404:	8522                	mv	a0,s0
    8406:	6e6000ef          	jal	ra,8aec <memcpy>
    840a:	8522                	mv	a0,s0
    840c:	481010ef          	jal	ra,a08c <base_log_internal_core>
    8410:	6531                	lui	a0,0xc
    8412:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    8416:	557010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:47
  return (gpio_in & GPIO_BOOTSTRAP_BIT_MASK) != 0;
    841a:	6505                	lui	a0,0x1
    841c:	85850513          	addi	a0,a0,-1960 # 858 <test_status_set.kLogFields.2+0x63c>
    8420:	950a                	add	a0,a0,sp
    8422:	4108                	lw	a0,0(a0)
    8424:	000205b7          	lui	a1,0x20
    8428:	8d6d                	and	a0,a0,a1
    842a:	4401                	li	s0,0
bootstrap():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:187
  if (!bootstrap_requested()) {
    842c:	44050863          	beqz	a0,887c <bootstrap+0x558>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:192
    return 0;
  }

  // SPI device is only initialized in bootstrap mode.
  LOG_INFO("Bootstrap requested, initialising HW...");
    8430:	00002517          	auipc	a0,0x2
    8434:	59050513          	addi	a0,a0,1424 # a9c0 <kDeviceLogBypassUartAddress>
    8438:	00052a03          	lw	s4,0(a0)
    843c:	000a0863          	beqz	s4,844c <bootstrap+0x128>
    8440:	06400513          	li	a0,100
    8444:	4581                	li	a1,0
    8446:	4f3010ef          	jal	ra,a138 <base_log_internal_dv>
    844a:	a829                	j	8464 <bootstrap+0x140>
    844c:	00002597          	auipc	a1,0x2
    8450:	33858593          	addi	a1,a1,824 # a784 <__udivdi3+0x3c6>
    8454:	0880                	addi	s0,sp,80
    8456:	4651                	li	a2,20
    8458:	8522                	mv	a0,s0
    845a:	692000ef          	jal	ra,8aec <memcpy>
    845e:	8522                	mv	a0,s0
    8460:	42d010ef          	jal	ra,a08c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:193
  flash_init_block();
    8464:	7a1000ef          	jal	ra,9404 <flash_init_block>
    8468:	00ac                	addi	a1,sp,72
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:196

  dif_spi_device_t spi;
  CHECK(dif_spi_device_init(
    846a:	40050537          	lui	a0,0x40050
    846e:	5a6010ef          	jal	ra,9a14 <dif_spi_device_init>
    8472:	c915                	beqz	a0,84a6 <bootstrap+0x182>
    8474:	000a0863          	beqz	s4,8484 <bootstrap+0x160>
    8478:	07800513          	li	a0,120
    847c:	4581                	li	a1,0
    847e:	4bb010ef          	jal	ra,a138 <base_log_internal_dv>
    8482:	a829                	j	849c <bootstrap+0x178>
    8484:	00002597          	auipc	a1,0x2
    8488:	31458593          	addi	a1,a1,788 # a798 <__udivdi3+0x3da>
    848c:	0880                	addi	s0,sp,80
    848e:	4651                	li	a2,20
    8490:	8522                	mv	a0,s0
    8492:	65a000ef          	jal	ra,8aec <memcpy>
    8496:	8522                	mv	a0,s0
    8498:	3f5010ef          	jal	ra,a08c <base_log_internal_core>
    849c:	6531                	lui	a0,0xc
    849e:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    84a2:	4cb010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:203
                .base_addr =
                    mmio_region_from_addr(TOP_EARLGREY_SPI_DEVICE_BASE_ADDR),
            },
            &spi) == kDifSpiDeviceOk,
        "Failed to initialize SPI.");
  CHECK(
    84a6:	00002517          	auipc	a0,0x2
    84aa:	4d250513          	addi	a0,a0,1234 # a978 <kDifSpiDeviceBufferLen>
    84ae:	00055503          	lhu	a0,0(a0)
    84b2:	8105                	srli	a0,a0,0x1
    84b4:	c882                	sw	zero,80(sp)
    84b6:	4585                	li	a1,1
    84b8:	caae                	sw	a1,84(sp)
    84ba:	cc82                	sw	zero,88(sp)
    84bc:	ce82                	sw	zero,92(sp)
    84be:	03f00593          	li	a1,63
    84c2:	06b10023          	sb	a1,96(sp)
    84c6:	06a11123          	sh	a0,98(sp)
    84ca:	06a11223          	sh	a0,100(sp)
    84ce:	00a8                	addi	a0,sp,72
    84d0:	088c                	addi	a1,sp,80
    84d2:	554010ef          	jal	ra,9a26 <dif_spi_device_configure>
    84d6:	c915                	beqz	a0,850a <bootstrap+0x1e6>
    84d8:	000a0863          	beqz	s4,84e8 <bootstrap+0x1c4>
    84dc:	08c00513          	li	a0,140
    84e0:	4581                	li	a1,0
    84e2:	457010ef          	jal	ra,a138 <base_log_internal_dv>
    84e6:	a829                	j	8500 <bootstrap+0x1dc>
    84e8:	00002597          	auipc	a1,0x2
    84ec:	2c458593          	addi	a1,a1,708 # a7ac <__udivdi3+0x3ee>
    84f0:	0880                	addi	s0,sp,80
    84f2:	4651                	li	a2,20
    84f4:	8522                	mv	a0,s0
    84f6:	5f6000ef          	jal	ra,8aec <memcpy>
    84fa:	8522                	mv	a0,s0
    84fc:	391010ef          	jal	ra,a08c <base_log_internal_core>
    8500:	6531                	lui	a0,0xc
    8502:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    8506:	467010ef          	jal	ra,a16c <test_status_set>
    850a:	41110537          	lui	a0,0x41110
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:218
                               }) == kDifSpiDeviceOk,
      "Failed to configure SPI.");

  dif_hmac_t hmac;
  dif_hmac_config_t config = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_HMAC_BASE_ADDR),
    850e:	dc2a                	sw	a0,56(sp)
    8510:	1828                	addi	a0,sp,56
    8512:	008c                	addi	a1,sp,64
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:220
  };
  CHECK(dif_hmac_init(&config, &hmac) == kDifHmacOk,
    8514:	119010ef          	jal	ra,9e2c <dif_hmac_init>
    8518:	c90d                	beqz	a0,854a <bootstrap+0x226>
    851a:	000a0863          	beqz	s4,852a <bootstrap+0x206>
    851e:	0a000513          	li	a0,160
    8522:	4581                	li	a1,0
    8524:	415010ef          	jal	ra,a138 <base_log_internal_dv>
    8528:	a821                	j	8540 <bootstrap+0x21c>
    852a:	00002597          	auipc	a1,0x2
    852e:	29658593          	addi	a1,a1,662 # a7c0 <__udivdi3+0x402>
    8532:	0880                	addi	s0,sp,80
    8534:	4651                	li	a2,20
    8536:	8522                	mv	a0,s0
    8538:	2b55                	jal	8aec <memcpy>
    853a:	8522                	mv	a0,s0
    853c:	351010ef          	jal	ra,a08c <base_log_internal_core>
    8540:	6531                	lui	a0,0xc
    8542:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    8546:	427010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:223
        "Failed to configure HMAC.");

  LOG_INFO("HW initialisation completed, waiting for SPI input...");
    854a:	000a0863          	beqz	s4,855a <bootstrap+0x236>
    854e:	0b400513          	li	a0,180
    8552:	4581                	li	a1,0
    8554:	3e5010ef          	jal	ra,a138 <base_log_internal_dv>
    8558:	a821                	j	8570 <bootstrap+0x24c>
    855a:	00002597          	auipc	a1,0x2
    855e:	27a58593          	addi	a1,a1,634 # a7d4 <__udivdi3+0x416>
    8562:	0880                	addi	s0,sp,80
    8564:	4651                	li	a2,20
    8566:	8522                	mv	a0,s0
    8568:	2351                	jal	8aec <memcpy>
    856a:	8522                	mv	a0,s0
    856c:	321010ef          	jal	ra,a08c <base_log_internal_core>
    8570:	6505                	lui	a0,0x1
    8572:	85850513          	addi	a0,a0,-1960 # 858 <test_status_set.kLogFields.2+0x63c>
    8576:	950a                	add	a0,a0,sp
    8578:	852a                	mv	a0,a0
bootstrap_flash():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:123
  dif_hmac_digest_t ack = {0};
    857a:	02000613          	li	a2,32
    857e:	4581                	li	a1,0
    8580:	2349                	jal	8b02 <memset>
    8582:	4481                	li	s1,0
    8584:	04810c93          	addi	s9,sp,72
    8588:	6505                	lui	a0,0x1
    858a:	85450513          	addi	a0,a0,-1964 # 854 <test_status_set.kLogFields.2+0x638>
    858e:	950a                	add	a0,a0,sp
    8590:	8aaa                	mv	s5,a0
    8592:	6505                	lui	a0,0x1
    8594:	80050b13          	addi	s6,a0,-2048 # 800 <test_status_set.kLogFields.2+0x5e4>
    8598:	05010b93          	addi	s7,sp,80
    859c:	01000537          	lui	a0,0x1000
    85a0:	fff50d13          	addi	s10,a0,-1 # ffffff <_stack_size+0xfedfff>
    85a4:	00002517          	auipc	a0,0x2
    85a8:	2a850513          	addi	a0,a0,680 # a84c <__udivdi3+0x48e>
    85ac:	da2a                	sw	a0,52(sp)
    85ae:	6505                	lui	a0,0x1
    85b0:	87850513          	addi	a0,a0,-1928 # 878 <test_status_set.kLogFields.2+0x65c>
    85b4:	950a                	add	a0,a0,sp
    85b6:	842a                	mv	s0,a0
    85b8:	00002517          	auipc	a0,0x2
    85bc:	2e450513          	addi	a0,a0,740 # a89c <__udivdi3+0x4de>
    85c0:	c82a                	sw	a0,16(sp)
    85c2:	17c00513          	li	a0,380
    85c6:	ca2a                	sw	a0,20(sp)
    85c8:	00002517          	auipc	a0,0x2
    85cc:	2c050513          	addi	a0,a0,704 # a888 <__udivdi3+0x4ca>
    85d0:	cc2a                	sw	a0,24(sp)
    85d2:	6531                	lui	a0,0xc
    85d4:	aad50d93          	addi	s11,a0,-1363 # baad <_data_init_start+0xb9d>
    85d8:	16800513          	li	a0,360
    85dc:	d02a                	sw	a0,32(sp)
    85de:	00002517          	auipc	a0,0x2
    85e2:	28250513          	addi	a0,a0,642 # a860 <__udivdi3+0x4a2>
    85e6:	d62a                	sw	a0,44(sp)
    85e8:	00002517          	auipc	a0,0x2
    85ec:	28c50513          	addi	a0,a0,652 # a874 <__udivdi3+0x4b6>
    85f0:	d42a                	sw	a0,40(sp)
    85f2:	14000993          	li	s3,320
    85f6:	15400513          	li	a0,340
    85fa:	d82a                	sw	a0,48(sp)
    85fc:	00002517          	auipc	a0,0x2
    8600:	2c850513          	addi	a0,a0,712 # a8c4 <__udivdi3+0x506>
    8604:	ce2a                	sw	a0,28(sp)
    8606:	1a400513          	li	a0,420
    860a:	d22a                	sw	a0,36(sp)
    860c:	12c00c13          	li	s8,300
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:127
    CHECK(dif_spi_device_rx_pending(spi, &bytes_available) == kDifSpiDeviceOk,
    8610:	8566                	mv	a0,s9
    8612:	85d6                	mv	a1,s5
    8614:	58e010ef          	jal	ra,9ba2 <dif_spi_device_rx_pending>
    8618:	c515                	beqz	a0,8644 <bootstrap+0x320>
    861a:	000a0863          	beqz	s4,862a <bootstrap+0x306>
    861e:	10400513          	li	a0,260
    8622:	4581                	li	a1,0
    8624:	315010ef          	jal	ra,a138 <base_log_internal_dv>
    8628:	a819                	j	863e <bootstrap+0x31a>
    862a:	00002597          	auipc	a1,0x2
    862e:	1fa58593          	addi	a1,a1,506 # a824 <__udivdi3+0x466>
    8632:	4651                	li	a2,20
    8634:	855e                	mv	a0,s7
    8636:	295d                	jal	8aec <memcpy>
    8638:	855e                	mv	a0,s7
    863a:	253010ef          	jal	ra,a08c <base_log_internal_core>
    863e:	856e                	mv	a0,s11
    8640:	32d010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:129
    if (bytes_available >= sizeof(spiflash_frame_t)) {
    8644:	6505                	lui	a0,0x1
    8646:	85450513          	addi	a0,a0,-1964 # 854 <test_status_set.kLogFields.2+0x638>
    864a:	950a                	add	a0,a0,sp
    864c:	4108                	lw	a0,0(a0)
    864e:	812d                	srli	a0,a0,0xb
    8650:	d161                	beqz	a0,8610 <bootstrap+0x2ec>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:131
      CHECK(dif_spi_device_recv(spi, &frame, sizeof(spiflash_frame_t),
    8652:	8566                	mv	a0,s9
    8654:	85de                	mv	a1,s7
    8656:	865a                	mv	a2,s6
    8658:	4681                	li	a3,0
    865a:	5b8010ef          	jal	ra,9c12 <dif_spi_device_recv>
    865e:	c515                	beqz	a0,868a <bootstrap+0x366>
    8660:	000a0863          	beqz	s4,8670 <bootstrap+0x34c>
    8664:	11800513          	li	a0,280
    8668:	4581                	li	a1,0
    866a:	2cf010ef          	jal	ra,a138 <base_log_internal_dv>
    866e:	a819                	j	8684 <bootstrap+0x360>
    8670:	00002597          	auipc	a1,0x2
    8674:	1c858593          	addi	a1,a1,456 # a838 <__udivdi3+0x47a>
    8678:	4651                	li	a2,20
    867a:	8522                	mv	a0,s0
    867c:	2985                	jal	8aec <memcpy>
    867e:	8522                	mv	a0,s0
    8680:	20d010ef          	jal	ra,a08c <base_log_internal_core>
    8684:	856e                	mv	a0,s11
    8686:	2e7010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:135
      uint32_t frame_num = SPIFLASH_FRAME_NUM(frame.header.frame_num);
    868a:	5546                	lw	a0,112(sp)
    868c:	01a57933          	and	s2,a0,s10
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:136
      LOG_INFO("Processing frame #%d, expecting #%d", frame_num,
    8690:	040a0f63          	beqz	s4,86ee <bootstrap+0x3ca>
    8694:	4589                	li	a1,2
    8696:	8562                	mv	a0,s8
    8698:	864a                	mv	a2,s2
    869a:	86a6                	mv	a3,s1
    869c:	29d010ef          	jal	ra,a138 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:139
      if (frame_num == expected_frame_num) {
    86a0:	06991263          	bne	s2,s1,8704 <bootstrap+0x3e0>
check_frame_hash():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:111
  compute_sha256(hmac, data, sizeof(spiflash_frame_t) - digest_len, &digest);
    86a4:	7e000613          	li	a2,2016
    86a8:	0088                	addi	a0,sp,64
    86aa:	188c                	addi	a1,sp,112
    86ac:	86a2                	mv	a3,s0
    86ae:	2c25                	jal	88e6 <compute_sha256>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:113
  return memcmp(digest.digest, frame->header.hash.digest, digest_len) == 0;
    86b0:	02000613          	li	a2,32
    86b4:	8522                	mv	a0,s0
    86b6:	85de                	mv	a1,s7
    86b8:	29a9                	jal	8b12 <memcmp>
bootstrap_flash():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:140
        if (!check_frame_hash(hmac, &frame)) {
    86ba:	c555                	beqz	a0,8766 <bootstrap+0x442>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:141
          LOG_ERROR("Detected hash mismatch on frame #%d", frame_num);
    86bc:	060a0563          	beqz	s4,8726 <bootstrap+0x402>
    86c0:	4585                	li	a1,1
    86c2:	854e                	mv	a0,s3
    86c4:	8626                	mv	a2,s1
    86c6:	273010ef          	jal	ra,a138 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:142
          CHECK(dif_spi_device_send(spi, (uint8_t *)&ack.digest,
    86ca:	02000613          	li	a2,32
    86ce:	8566                	mv	a0,s9
    86d0:	6585                	lui	a1,0x1
    86d2:	85858593          	addi	a1,a1,-1960 # 858 <test_status_set.kLogFields.2+0x63c>
    86d6:	958a                	add	a1,a1,sp
    86d8:	85ae                	mv	a1,a1
    86da:	4681                	li	a3,0
    86dc:	6c0010ef          	jal	ra,9d9c <dif_spi_device_send>
    86e0:	f20508e3          	beqz	a0,8610 <bootstrap+0x2ec>
    86e4:	5542                	lw	a0,48(sp)
    86e6:	4581                	li	a1,0
    86e8:	251010ef          	jal	ra,a138 <base_log_internal_dv>
    86ec:	a88d                	j	875e <bootstrap+0x43a>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:136
      LOG_INFO("Processing frame #%d, expecting #%d", frame_num,
    86ee:	4651                	li	a2,20
    86f0:	8522                	mv	a0,s0
    86f2:	55d2                	lw	a1,52(sp)
    86f4:	2ee5                	jal	8aec <memcpy>
    86f6:	8522                	mv	a0,s0
    86f8:	85ca                	mv	a1,s2
    86fa:	8626                	mv	a2,s1
    86fc:	191010ef          	jal	ra,a08c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:139
      if (frame_num == expected_frame_num) {
    8700:	fa9902e3          	beq	s2,s1,86a4 <bootstrap+0x380>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:177
        CHECK(
    8704:	02000613          	li	a2,32
    8708:	8566                	mv	a0,s9
    870a:	6585                	lui	a1,0x1
    870c:	85858593          	addi	a1,a1,-1960 # 858 <test_status_set.kLogFields.2+0x63c>
    8710:	958a                	add	a1,a1,sp
    8712:	85ae                	mv	a1,a1
    8714:	4681                	li	a3,0
    8716:	686010ef          	jal	ra,9d9c <dif_spi_device_send>
    871a:	ee050be3          	beqz	a0,8610 <bootstrap+0x2ec>
    871e:	060a0d63          	beqz	s4,8798 <bootstrap+0x474>
    8722:	5512                	lw	a0,36(sp)
    8724:	b7c9                	j	86e6 <bootstrap+0x3c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:141
          LOG_ERROR("Detected hash mismatch on frame #%d", frame_num);
    8726:	4651                	li	a2,20
    8728:	8522                	mv	a0,s0
    872a:	55b2                	lw	a1,44(sp)
    872c:	26c1                	jal	8aec <memcpy>
    872e:	8522                	mv	a0,s0
    8730:	85a6                	mv	a1,s1
    8732:	15b010ef          	jal	ra,a08c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:142
          CHECK(dif_spi_device_send(spi, (uint8_t *)&ack.digest,
    8736:	02000613          	li	a2,32
    873a:	8566                	mv	a0,s9
    873c:	6585                	lui	a1,0x1
    873e:	85858593          	addi	a1,a1,-1960 # 858 <test_status_set.kLogFields.2+0x63c>
    8742:	958a                	add	a1,a1,sp
    8744:	85ae                	mv	a1,a1
    8746:	4681                	li	a3,0
    8748:	654010ef          	jal	ra,9d9c <dif_spi_device_send>
    874c:	ec0502e3          	beqz	a0,8610 <bootstrap+0x2ec>
    8750:	4651                	li	a2,20
    8752:	8522                	mv	a0,s0
    8754:	55a2                	lw	a1,40(sp)
    8756:	2e59                	jal	8aec <memcpy>
    8758:	8522                	mv	a0,s0
    875a:	133010ef          	jal	ra,a08c <base_log_internal_core>
    875e:	856e                	mv	a0,s11
    8760:	20d010ef          	jal	ra,a16c <test_status_set>
    8764:	b575                	j	8610 <bootstrap+0x2ec>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:149
        compute_sha256(hmac, &frame, sizeof(spiflash_frame_t), &ack);
    8766:	0088                	addi	a0,sp,64
    8768:	85de                	mv	a1,s7
    876a:	865a                	mv	a2,s6
    876c:	6685                	lui	a3,0x1
    876e:	85868693          	addi	a3,a3,-1960 # 858 <test_status_set.kLogFields.2+0x63c>
    8772:	968a                	add	a3,a3,sp
    8774:	8936                	mv	s2,a3
    8776:	86ca                	mv	a3,s2
    8778:	22bd                	jal	88e6 <compute_sha256>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:150
        CHECK(
    877a:	02000613          	li	a2,32
    877e:	8566                	mv	a0,s9
    8780:	85ca                	mv	a1,s2
    8782:	4681                	li	a3,0
    8784:	618010ef          	jal	ra,9d9c <dif_spi_device_send>
    8788:	c515                	beqz	a0,87b4 <bootstrap+0x490>
    878a:	000a0b63          	beqz	s4,87a0 <bootstrap+0x47c>
    878e:	5502                	lw	a0,32(sp)
    8790:	4581                	li	a1,0
    8792:	1a7010ef          	jal	ra,a138 <base_log_internal_dv>
    8796:	a821                	j	87ae <bootstrap+0x48a>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:177
        CHECK(
    8798:	4651                	li	a2,20
    879a:	8522                	mv	a0,s0
    879c:	45f2                	lw	a1,28(sp)
    879e:	bf65                	j	8756 <bootstrap+0x432>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:150
        CHECK(
    87a0:	4651                	li	a2,20
    87a2:	8522                	mv	a0,s0
    87a4:	45e2                	lw	a1,24(sp)
    87a6:	2699                	jal	8aec <memcpy>
    87a8:	8522                	mv	a0,s0
    87aa:	0e3010ef          	jal	ra,a08c <base_log_internal_core>
    87ae:	856e                	mv	a0,s11
    87b0:	1bd010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:155
        if (expected_frame_num == 0) {
    87b4:	e495                	bnez	s1,87e0 <bootstrap+0x4bc>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:156
          flash_default_region_access(/*rd_en=*/true, /*prog_en=*/true,
    87b6:	4505                	li	a0,1
    87b8:	4585                	li	a1,1
    87ba:	4605                	li	a2,1
    87bc:	60f000ef          	jal	ra,95ca <flash_default_region_access>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:158
          int flash_error = erase_flash();
    87c0:	28ed                	jal	88ba <erase_flash>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:159
          if (flash_error != 0) {
    87c2:	e929                	bnez	a0,8814 <bootstrap+0x4f0>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:162
          LOG_INFO("Flash erase successful");
    87c4:	000a0763          	beqz	s4,87d2 <bootstrap+0x4ae>
    87c8:	4552                	lw	a0,20(sp)
    87ca:	4581                	li	a1,0
    87cc:	16d010ef          	jal	ra,a138 <base_log_internal_dv>
    87d0:	a801                	j	87e0 <bootstrap+0x4bc>
    87d2:	4651                	li	a2,20
    87d4:	8522                	mv	a0,s0
    87d6:	45c2                	lw	a1,16(sp)
    87d8:	2e11                	jal	8aec <memcpy>
    87da:	8522                	mv	a0,s0
    87dc:	0b1010ef          	jal	ra,a08c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:165
        if (flash_write(frame.header.flash_offset, kDataPartition, frame.data,
    87e0:	5556                	lw	a0,116(sp)
    87e2:	1f600693          	li	a3,502
    87e6:	4581                	li	a1,0
    87e8:	18b0                	addi	a2,sp,120
    87ea:	50f000ef          	jal	ra,94f8 <flash_write>
    87ee:	e519                	bnez	a0,87fc <bootstrap+0x4d8>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:171
        if (SPIFLASH_FRAME_IS_EOF(frame.header.frame_num)) {
    87f0:	5546                	lw	a0,112(sp)
    87f2:	55fd                	li	a1,-1
    87f4:	00a5d863          	bge	a1,a0,8804 <bootstrap+0x4e0>
    87f8:	0485                	addi	s1,s1,1
    87fa:	bd19                	j	8610 <bootstrap+0x2ec>
    87fc:	4931                	li	s2,12
    87fe:	04091263          	bnez	s2,8842 <bootstrap+0x51e>
    8802:	a821                	j	881a <bootstrap+0x4f6>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:172
          LOG_INFO("Bootstrap: DONE!");
    8804:	000a0d63          	beqz	s4,881e <bootstrap+0x4fa>
    8808:	19000513          	li	a0,400
    880c:	4581                	li	a1,0
    880e:	12b010ef          	jal	ra,a138 <base_log_internal_dv>
    8812:	a02d                	j	883c <bootstrap+0x518>
    8814:	892a                	mv	s2,a0
bootstrap():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:225
  int error = bootstrap_flash(&spi, &hmac);
  if (error != 0) {
    8816:	02091663          	bnez	s2,8842 <bootstrap+0x51e>
    881a:	4401                	li	s0,0
    881c:	a899                	j	8872 <bootstrap+0x54e>
bootstrap_flash():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:172
          LOG_INFO("Bootstrap: DONE!");
    881e:	00002597          	auipc	a1,0x2
    8822:	09258593          	addi	a1,a1,146 # a8b0 <__udivdi3+0x4f2>
    8826:	6505                	lui	a0,0x1
    8828:	87850513          	addi	a0,a0,-1928 # 878 <test_status_set.kLogFields.2+0x65c>
    882c:	950a                	add	a0,a0,sp
    882e:	842a                	mv	s0,a0
    8830:	4651                	li	a2,20
    8832:	8522                	mv	a0,s0
    8834:	2c65                	jal	8aec <memcpy>
    8836:	8522                	mv	a0,s0
    8838:	055010ef          	jal	ra,a08c <base_log_internal_core>
    883c:	4901                	li	s2,0
bootstrap():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:225
  if (error != 0) {
    883e:	fc090ee3          	beqz	s2,881a <bootstrap+0x4f6>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:226
    error |= erase_flash();
    8842:	28a5                	jal	88ba <erase_flash>
    8844:	01256433          	or	s0,a0,s2
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:227
    LOG_ERROR("Bootstrap error: 0x%x", error);
    8848:	000a0963          	beqz	s4,885a <bootstrap+0x536>
    884c:	0c800513          	li	a0,200
    8850:	4585                	li	a1,1
    8852:	8622                	mv	a2,s0
    8854:	0e5010ef          	jal	ra,a138 <base_log_internal_dv>
    8858:	a829                	j	8872 <bootstrap+0x54e>
    885a:	00002597          	auipc	a1,0x2
    885e:	f8e58593          	addi	a1,a1,-114 # a7e8 <__udivdi3+0x42a>
    8862:	0884                	addi	s1,sp,80
    8864:	4651                	li	a2,20
    8866:	8526                	mv	a0,s1
    8868:	2451                	jal	8aec <memcpy>
    886a:	8526                	mv	a0,s1
    886c:	85a2                	mv	a1,s0
    886e:	01f010ef          	jal	ra,a08c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:232
  }

  // Always make sure to revert flash_ctrl access to default settings.
  // bootstrap_flash enables access to flash to perform update.
  flash_default_region_access(/*rd_en=*/false, /*prog_en=*/false,
    8872:	4501                	li	a0,0
    8874:	4581                	li	a1,0
    8876:	4601                	li	a2,0
    8878:	553000ef          	jal	ra,95ca <flash_default_region_access>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:235
                              /*erase_en=*/false);
  return error;
}
    887c:	8522                	mv	a0,s0
    887e:	612d                	addi	sp,sp,224
    8880:	7bc12d83          	lw	s11,1980(sp)
    8884:	7c012d03          	lw	s10,1984(sp)
    8888:	7c412c83          	lw	s9,1988(sp)
    888c:	7c812c03          	lw	s8,1992(sp)
    8890:	7cc12b83          	lw	s7,1996(sp)
    8894:	7d012b03          	lw	s6,2000(sp)
    8898:	7d412a83          	lw	s5,2004(sp)
    889c:	7d812a03          	lw	s4,2008(sp)
    88a0:	7dc12983          	lw	s3,2012(sp)
    88a4:	7e012903          	lw	s2,2016(sp)
    88a8:	7e412483          	lw	s1,2020(sp)
    88ac:	7e812403          	lw	s0,2024(sp)
    88b0:	7ec12083          	lw	ra,2028(sp)
    88b4:	7f010113          	addi	sp,sp,2032
    88b8:	8082                	ret

000088ba <erase_flash>:
erase_flash():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:53
static int erase_flash(void) {
    88ba:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:54
  if (flash_bank_erase(FLASH_BANK_0) != 0) {
    88bc:	c606                	sw	ra,12(sp)
    88be:	c422                	sw	s0,8(sp)
    88c0:	4501                	li	a0,0
    88c2:	397000ef          	jal	ra,9458 <flash_bank_erase>
    88c6:	4429                	li	s0,10
    88c8:	e911                	bnez	a0,88dc <erase_flash+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:57
  if (flash_bank_erase(FLASH_BANK_1) != 0) {
    88ca:	4505                	li	a0,1
    88cc:	38d000ef          	jal	ra,9458 <flash_bank_erase>
    88d0:	e511                	bnez	a0,88dc <erase_flash+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:60
  if (flash_check_empty() == 0) {
    88d2:	341000ef          	jal	ra,9412 <flash_check_empty>
    88d6:	442d                	li	s0,11
    88d8:	c111                	beqz	a0,88dc <erase_flash+0x22>
    88da:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:65
}
    88dc:	8522                	mv	a0,s0
    88de:	4422                	lw	s0,8(sp)
    88e0:	40b2                	lw	ra,12(sp)
    88e2:	0141                	addi	sp,sp,16
    88e4:	8082                	ret

000088e6 <compute_sha256>:
compute_sha256():
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:71
                           dif_hmac_digest_t *digest) {
    88e6:	715d                	addi	sp,sp,-80
    88e8:	c686                	sw	ra,76(sp)
    88ea:	c4a2                	sw	s0,72(sp)
    88ec:	c2a6                	sw	s1,68(sp)
    88ee:	c0ca                	sw	s2,64(sp)
    88f0:	de4e                	sw	s3,60(sp)
    88f2:	dc52                	sw	s4,56(sp)
    88f4:	da56                	sw	s5,52(sp)
    88f6:	d85a                	sw	s6,48(sp)
    88f8:	d65e                	sw	s7,44(sp)
    88fa:	d462                	sw	s8,40(sp)
    88fc:	d266                	sw	s9,36(sp)
    88fe:	d06a                	sw	s10,32(sp)
    8900:	ce6e                	sw	s11,28(sp)
    8902:	8936                	mv	s2,a3
    8904:	8432                	mv	s0,a2
    8906:	84ae                	mv	s1,a1
    8908:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:76
  CHECK(dif_hmac_mode_sha256_start(hmac, config) == kDifHmacOk,
    890a:	4585                	li	a1,1
    890c:	4605                	li	a2,1
    890e:	658010ef          	jal	ra,9f66 <dif_hmac_mode_sha256_start>
    8912:	00002c97          	auipc	s9,0x2
    8916:	0aec8c93          	addi	s9,s9,174 # a9c0 <kDeviceLogBypassUartAddress>
    891a:	c91d                	beqz	a0,8950 <compute_sha256+0x6a>
    891c:	000ca503          	lw	a0,0(s9)
    8920:	c519                	beqz	a0,892e <compute_sha256+0x48>
    8922:	1b800513          	li	a0,440
    8926:	4581                	li	a1,0
    8928:	011010ef          	jal	ra,a138 <base_log_internal_dv>
    892c:	a829                	j	8946 <compute_sha256+0x60>
    892e:	00002597          	auipc	a1,0x2
    8932:	faa58593          	addi	a1,a1,-86 # a8d8 <__udivdi3+0x51a>
    8936:	00810a13          	addi	s4,sp,8
    893a:	4651                	li	a2,20
    893c:	8552                	mv	a0,s4
    893e:	227d                	jal	8aec <memcpy>
    8940:	8552                	mv	a0,s4
    8942:	74a010ef          	jal	ra,a08c <base_log_internal_core>
    8946:	6531                	lui	a0,0xc
    8948:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    894c:	021010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:80
  while (data_left > 0) {
    8950:	cc39                	beqz	s0,89ae <compute_sha256+0xc8>
    8952:	000cad03          	lw	s10,0(s9)
    8956:	00410a13          	addi	s4,sp,4
    895a:	4d8d                	li	s11,3
    895c:	00002a97          	auipc	s5,0x2
    8960:	f90a8a93          	addi	s5,s5,-112 # a8ec <__udivdi3+0x52e>
    8964:	00810b13          	addi	s6,sp,8
    8968:	6531                	lui	a0,0xc
    896a:	aad50b93          	addi	s7,a0,-1363 # baad <_data_init_start+0xb9d>
    896e:	1cc00c13          	li	s8,460
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:83
        dif_hmac_fifo_push(hmac, data8, data_left, &bytes_sent);
    8972:	854e                	mv	a0,s3
    8974:	85a6                	mv	a1,s1
    8976:	8622                	mv	a2,s0
    8978:	86d2                	mv	a3,s4
    897a:	62c010ef          	jal	ra,9fa6 <dif_hmac_fifo_push>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:84
    if (result == kDifHmacFifoOk) {
    897e:	03b50463          	beq	a0,s11,89a6 <compute_sha256+0xc0>
    8982:	c515                	beqz	a0,89ae <compute_sha256+0xc8>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:87
    CHECK(result == kDifHmacFifoFull, "Error while pushing to FIFO.");
    8984:	000d0763          	beqz	s10,8992 <compute_sha256+0xac>
    8988:	8562                	mv	a0,s8
    898a:	4581                	li	a1,0
    898c:	7ac010ef          	jal	ra,a138 <base_log_internal_dv>
    8990:	a801                	j	89a0 <compute_sha256+0xba>
    8992:	4651                	li	a2,20
    8994:	855a                	mv	a0,s6
    8996:	85d6                	mv	a1,s5
    8998:	2a91                	jal	8aec <memcpy>
    899a:	855a                	mv	a0,s6
    899c:	6f0010ef          	jal	ra,a08c <base_log_internal_core>
    89a0:	855e                	mv	a0,s7
    89a2:	7ca010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:88
    data8 += bytes_sent;
    89a6:	4512                	lw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:89
    data_left -= bytes_sent;
    89a8:	8c09                	sub	s0,s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:88
    data8 += bytes_sent;
    89aa:	94aa                	add	s1,s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:80
  while (data_left > 0) {
    89ac:	f079                	bnez	s0,8972 <compute_sha256+0x8c>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:92
  CHECK(dif_hmac_process(hmac) == kDifHmacOk, "Error processing digest.");
    89ae:	854e                	mv	a0,s3
    89b0:	676010ef          	jal	ra,a026 <dif_hmac_process>
    89b4:	c915                	beqz	a0,89e8 <compute_sha256+0x102>
    89b6:	000ca503          	lw	a0,0(s9)
    89ba:	c519                	beqz	a0,89c8 <compute_sha256+0xe2>
    89bc:	1e000513          	li	a0,480
    89c0:	4581                	li	a1,0
    89c2:	776010ef          	jal	ra,a138 <base_log_internal_dv>
    89c6:	a821                	j	89de <compute_sha256+0xf8>
    89c8:	00002597          	auipc	a1,0x2
    89cc:	f3858593          	addi	a1,a1,-200 # a900 <__udivdi3+0x542>
    89d0:	0020                	addi	s0,sp,8
    89d2:	4651                	li	a2,20
    89d4:	8522                	mv	a0,s0
    89d6:	2a19                	jal	8aec <memcpy>
    89d8:	8522                	mv	a0,s0
    89da:	6b2010ef          	jal	ra,a08c <base_log_internal_core>
    89de:	6531                	lui	a0,0xc
    89e0:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    89e4:	788010ef          	jal	ra,a16c <test_status_set>
    89e8:	440d                	li	s0,3
    89ea:	450d                	li	a0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:94
  while (digest_result == kDifHmacDigestProcessing) {
    89ec:	00851863          	bne	a0,s0,89fc <compute_sha256+0x116>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:95
    digest_result = dif_hmac_finish(hmac, digest);
    89f0:	854e                	mv	a0,s3
    89f2:	85ca                	mv	a1,s2
    89f4:	646010ef          	jal	ra,a03a <dif_hmac_finish>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:94
  while (digest_result == kDifHmacDigestProcessing) {
    89f8:	fe850ce3          	beq	a0,s0,89f0 <compute_sha256+0x10a>
    89fc:	c915                	beqz	a0,8a30 <compute_sha256+0x14a>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:97
  CHECK(digest_result == kDifHmacDigestOk, "Error reading the digest.");
    89fe:	000ca503          	lw	a0,0(s9)
    8a02:	c519                	beqz	a0,8a10 <compute_sha256+0x12a>
    8a04:	1f400513          	li	a0,500
    8a08:	4581                	li	a1,0
    8a0a:	72e010ef          	jal	ra,a138 <base_log_internal_dv>
    8a0e:	a821                	j	8a26 <compute_sha256+0x140>
    8a10:	00002597          	auipc	a1,0x2
    8a14:	f0458593          	addi	a1,a1,-252 # a914 <__udivdi3+0x556>
    8a18:	0020                	addi	s0,sp,8
    8a1a:	4651                	li	a2,20
    8a1c:	8522                	mv	a0,s0
    8a1e:	20f9                	jal	8aec <memcpy>
    8a20:	8522                	mv	a0,s0
    8a22:	66a010ef          	jal	ra,a08c <base_log_internal_core>
    8a26:	6531                	lui	a0,0xc
    8a28:	aad50513          	addi	a0,a0,-1363 # baad <_data_init_start+0xb9d>
    8a2c:	740010ef          	jal	ra,a16c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/boot_rom/bootstrap.c:98
}
    8a30:	4df2                	lw	s11,28(sp)
    8a32:	5d02                	lw	s10,32(sp)
    8a34:	5c92                	lw	s9,36(sp)
    8a36:	5c22                	lw	s8,40(sp)
    8a38:	5bb2                	lw	s7,44(sp)
    8a3a:	5b42                	lw	s6,48(sp)
    8a3c:	5ad2                	lw	s5,52(sp)
    8a3e:	5a62                	lw	s4,56(sp)
    8a40:	59f2                	lw	s3,60(sp)
    8a42:	4906                	lw	s2,64(sp)
    8a44:	4496                	lw	s1,68(sp)
    8a46:	4426                	lw	s0,72(sp)
    8a48:	40b6                	lw	ra,76(sp)
    8a4a:	6161                	addi	sp,sp,80
    8a4c:	8082                	ret
	...

00008a50 <exception_handler>:
    8a50:	10500073          	wfi
    8a54:	bff5                	j	8a50 <exception_handler>

00008a56 <default_irq_handler>:
    8a56:	10500073          	wfi
    8a5a:	bff5                	j	8a56 <default_irq_handler>

00008a5c <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
    8a5c:	10500073          	wfi
    8a60:	8082                	ret

00008a62 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
    8a62:	1141                	addi	sp,sp,-16
    8a64:	c606                	sw	ra,12(sp)
    8a66:	00002597          	auipc	a1,0x2
    8a6a:	f3258593          	addi	a1,a1,-206 # a998 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
    8a6e:	41d0                	lw	a2,4(a1)
    8a70:	4194                	lw	a3,0(a1)
    8a72:	02a605b3          	mul	a1,a2,a0
    8a76:	02a6b633          	mulhu	a2,a3,a0
    8a7a:	95b2                	add	a1,a1,a2
    8a7c:	02a68533          	mul	a0,a3,a0
    8a80:	000f4637          	lui	a2,0xf4
    8a84:	24060613          	addi	a2,a2,576 # f4240 <_stack_size+0xe2240>
    8a88:	4681                	li	a3,0
    8a8a:	135010ef          	jal	ra,a3be <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
    8a8e:	4801                	li	a6,0
    8a90:	4701                	li	a4,0

00008a92 <read0>:
    8a92:	b8002873          	csrr	a6,mcycleh
    8a96:	b00026f3          	csrr	a3,mcycle
    8a9a:	b8002773          	csrr	a4,mcycleh
    8a9e:	fee81ae3          	bne	a6,a4,8a92 <read0>
    8aa2:	4781                	li	a5,0
    8aa4:	4601                	li	a2,0

00008aa6 <read1>:
    8aa6:	b80027f3          	csrr	a5,mcycleh
    8aaa:	b0002773          	csrr	a4,mcycle
    8aae:	b8002673          	csrr	a2,mcycleh
    8ab2:	fec79ae3          	bne	a5,a2,8aa6 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
    8ab6:	00d73633          	sltu	a2,a4,a3
    8aba:	410787b3          	sub	a5,a5,a6
    8abe:	8f91                	sub	a5,a5,a2
    8ac0:	00b78663          	beq	a5,a1,8acc <read1+0x26>
    8ac4:	00b7b733          	sltu	a4,a5,a1
    8ac8:	ff69                	bnez	a4,8aa2 <read0+0x10>
    8aca:	a031                	j	8ad6 <read1+0x30>
    8acc:	40d70633          	sub	a2,a4,a3
    8ad0:	00a63733          	sltu	a4,a2,a0
    8ad4:	f779                	bnez	a4,8aa2 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
    8ad6:	40b2                	lw	ra,12(sp)
    8ad8:	0141                	addi	sp,sp,16
    8ada:	8082                	ret

00008adc <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
    8adc:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
    8ae0:	bff5                	j	8adc <abort>
	...

00008ae4 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
    8ae4:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
    8ae6:	8082                	ret

00008ae8 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
    8ae8:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
    8aea:	8082                	ret

00008aec <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
    8aec:	ca11                	beqz	a2,8b00 <memcpy+0x14>
    8aee:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
    8af0:	00058703          	lb	a4,0(a1)
    8af4:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
    8af8:	167d                	addi	a2,a2,-1
    8afa:	0685                	addi	a3,a3,1
    8afc:	0585                	addi	a1,a1,1
    8afe:	fa6d                	bnez	a2,8af0 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
    8b00:	8082                	ret

00008b02 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
    8b02:	c619                	beqz	a2,8b10 <memset+0xe>
    8b04:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
    8b06:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
    8b0a:	167d                	addi	a2,a2,-1
    8b0c:	0685                	addi	a3,a3,1
    8b0e:	fe65                	bnez	a2,8b06 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
    8b10:	8082                	ret

00008b12 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
    8b12:	ce09                	beqz	a2,8b2c <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
    8b14:	00054683          	lbu	a3,0(a0)
    8b18:	0005c703          	lbu	a4,0(a1)
    8b1c:	00e6ea63          	bltu	a3,a4,8b30 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
    8b20:	00d76b63          	bltu	a4,a3,8b36 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
    8b24:	167d                	addi	a2,a2,-1
    8b26:	0585                	addi	a1,a1,1
    8b28:	0505                	addi	a0,a0,1
    8b2a:	f66d                	bnez	a2,8b14 <memcmp+0x2>
    8b2c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
    8b2e:	8082                	ret
    8b30:	fd600513          	li	a0,-42
    8b34:	8082                	ret
    8b36:	02a00513          	li	a0,42
    8b3a:	8082                	ret

00008b3c <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
    8b3c:	ca11                	beqz	a2,8b50 <memchr+0x14>
    8b3e:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
    8b42:	00054683          	lbu	a3,0(a0)
    8b46:	00b68663          	beq	a3,a1,8b52 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
    8b4a:	167d                	addi	a2,a2,-1
    8b4c:	0505                	addi	a0,a0,1
    8b4e:	fa75                	bnez	a2,8b42 <memchr+0x6>
    8b50:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
    8b52:	8082                	ret

00008b54 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
    8b54:	ce09                	beqz	a2,8b6e <memrchr+0x1a>
    8b56:	fff50693          	addi	a3,a0,-1
    8b5a:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
    8b5e:	00c68733          	add	a4,a3,a2
    8b62:	00074703          	lbu	a4,0(a4)
    8b66:	00b70663          	beq	a4,a1,8b72 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
    8b6a:	167d                	addi	a2,a2,-1
    8b6c:	fa6d                	bnez	a2,8b5e <memrchr+0xa>
    8b6e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
    8b70:	8082                	ret
    8b72:	9532                	add	a0,a0,a2
    8b74:	157d                	addi	a0,a0,-1
    8b76:	8082                	ret

00008b78 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
    8b78:	e589                	bnez	a1,8b82 <base_set_stdout+0xa>
    8b7a:	00000597          	auipc	a1,0x0
    8b7e:	01658593          	addi	a1,a1,22 # 8b90 <base_dev_null>
    8b82:	0fff7617          	auipc	a2,0xfff7
    8b86:	47e60613          	addi	a2,a2,1150 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
    8b8a:	c208                	sw	a0,0(a2)
    8b8c:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
    8b8e:	8082                	ret

00008b90 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
    8b90:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
    8b92:	8082                	ret

00008b94 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
    8b94:	0fff7597          	auipc	a1,0xfff7
    8b98:	46c58593          	addi	a1,a1,1132 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
    8b9c:	c188                	sw	a0,0(a1)
    8b9e:	00000517          	auipc	a0,0x0
    8ba2:	00c50513          	addi	a0,a0,12 # 8baa <base_dev_uart>
    8ba6:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
    8ba8:	8082                	ret

00008baa <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
    8baa:	1101                	addi	sp,sp,-32
    8bac:	ce06                	sw	ra,28(sp)
    8bae:	cc22                	sw	s0,24(sp)
    8bb0:	ca26                	sw	s1,20(sp)
    8bb2:	c84a                	sw	s2,16(sp)
    8bb4:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
    8bb6:	c20d                	beqz	a2,8bd8 <base_dev_uart+0x2e>
    8bb8:	8432                	mv	s0,a2
    8bba:	892e                	mv	s2,a1
    8bbc:	89aa                	mv	s3,a0
    8bbe:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
    8bc0:	00990533          	add	a0,s2,s1
    8bc4:	00054583          	lbu	a1,0(a0)
    8bc8:	854e                	mv	a0,s3
    8bca:	2f09                	jal	92dc <dif_uart_byte_send_polled>
    8bcc:	e519                	bnez	a0,8bda <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
    8bce:	0485                	addi	s1,s1,1
    8bd0:	fe9418e3          	bne	s0,s1,8bc0 <base_dev_uart+0x16>
    8bd4:	84a2                	mv	s1,s0
    8bd6:	a011                	j	8bda <base_dev_uart+0x30>
    8bd8:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
    8bda:	8526                	mv	a0,s1
    8bdc:	49b2                	lw	s3,12(sp)
    8bde:	4942                	lw	s2,16(sp)
    8be0:	44d2                	lw	s1,20(sp)
    8be2:	4462                	lw	s0,24(sp)
    8be4:	40f2                	lw	ra,28(sp)
    8be6:	6105                	addi	sp,sp,32
    8be8:	8082                	ret

00008bea <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
    8bea:	7179                	addi	sp,sp,-48
    8bec:	c606                	sw	ra,12(sp)
    8bee:	d646                	sw	a7,44(sp)
    8bf0:	d442                	sw	a6,40(sp)
    8bf2:	d23e                	sw	a5,36(sp)
    8bf4:	d03a                	sw	a4,32(sp)
    8bf6:	ce36                	sw	a3,28(sp)
    8bf8:	cc32                	sw	a2,24(sp)
    8bfa:	ca2e                	sw	a1,20(sp)
    8bfc:	0fff7597          	auipc	a1,0xfff7
    8c00:	40458593          	addi	a1,a1,1028 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
    8c04:	4190                	lw	a2,0(a1)
    8c06:	41cc                	lw	a1,4(a1)
    8c08:	872a                	mv	a4,a0
    8c0a:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
    8c0c:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
    8c0e:	8532                	mv	a0,a2
    8c10:	863a                	mv	a2,a4
    8c12:	200d                	jal	8c34 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
    8c14:	40b2                	lw	ra,12(sp)
    8c16:	6145                	addi	sp,sp,48
    8c18:	8082                	ret

00008c1a <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
    8c1a:	0fff7697          	auipc	a3,0xfff7
    8c1e:	3e668693          	addi	a3,a3,998 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
    8c22:	4290                	lw	a2,0(a3)
    8c24:	42d4                	lw	a3,4(a3)
    8c26:	872e                	mv	a4,a1
    8c28:	87aa                	mv	a5,a0
    8c2a:	8532                	mv	a0,a2
    8c2c:	85b6                	mv	a1,a3
    8c2e:	863e                	mv	a2,a5
    8c30:	86ba                	mv	a3,a4
    8c32:	a009                	j	8c34 <base_vfprintf>

00008c34 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
    8c34:	7139                	addi	sp,sp,-64
    8c36:	de06                	sw	ra,60(sp)
    8c38:	dc22                	sw	s0,56(sp)
    8c3a:	da26                	sw	s1,52(sp)
    8c3c:	d84a                	sw	s2,48(sp)
    8c3e:	d64e                	sw	s3,44(sp)
    8c40:	d452                	sw	s4,40(sp)
    8c42:	d256                	sw	s5,36(sp)
    8c44:	d05a                	sw	s6,32(sp)
    8c46:	ce5e                	sw	s7,28(sp)
    8c48:	cc62                	sw	s8,24(sp)
    8c4a:	ca66                	sw	s9,20(sp)
    8c4c:	c86a                	sw	s10,16(sp)
    8c4e:	c66e                	sw	s11,12(sp)
    8c50:	8bb2                	mv	s7,a2
    8c52:	892a                	mv	s2,a0
    8c54:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
    8c56:	c199                	beqz	a1,8c5c <base_vfprintf+0x28>
    8c58:	89ae                	mv	s3,a1
    8c5a:	a029                	j	8c64 <base_vfprintf+0x30>
    8c5c:	00000997          	auipc	s3,0x0
    8c60:	f3498993          	addi	s3,s3,-204 # 8b90 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
    8c64:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
    8c66:	000bc503          	lbu	a0,0(s7)
    8c6a:	28050f63          	beqz	a0,8f08 <base_vfprintf+0x2d4>
    8c6e:	4b01                	li	s6,0
    8c70:	02500c13          	li	s8,37
    8c74:	4ca5                	li	s9,9
    8c76:	02000d13          	li	s10,32
    8c7a:	06800d93          	li	s11,104
    8c7e:	00002a17          	auipc	s4,0x2
    8c82:	23ca0a13          	addi	s4,s4,572 # aeba <__clz_tab+0x4ce>
    8c86:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
    8c88:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
    8c8a:	0ff57413          	andi	s0,a0,255
    8c8e:	01840963          	beq	s0,s8,8ca0 <base_vfprintf+0x6c>
    8c92:	c419                	beqz	s0,8ca0 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
    8c94:	009b8533          	add	a0,s7,s1
    8c98:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
    8c9c:	0485                	addi	s1,s1,1
    8c9e:	b7f5                	j	8c8a <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
    8ca0:	c491                	beqz	s1,8cac <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
    8ca2:	854a                	mv	a0,s2
    8ca4:	85de                	mv	a1,s7
    8ca6:	8626                	mv	a2,s1
    8ca8:	9982                	jalr	s3
    8caa:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
    8cac:	24040f63          	beqz	s0,8f0a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
    8cb0:	009b8633          	add	a2,s7,s1
    8cb4:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
    8cb8:	22050f63          	beqz	a0,8ef6 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
    8cbc:	fd050593          	addi	a1,a0,-48
    8cc0:	0ff5f593          	andi	a1,a1,255
    8cc4:	00bcf863          	bgeu	s9,a1,8cd4 <base_vfprintf+0xa0>
    8cc8:	4401                	li	s0,0
    8cca:	4581                	li	a1,0
    8ccc:	4605                	li	a2,1
    8cce:	028d7f63          	bgeu	s10,s0,8d0c <base_vfprintf+0xd8>
    8cd2:	aca1                	j	8f2a <base_vfprintf+0x2f6>
    8cd4:	4581                	li	a1,0
    8cd6:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
    8cd8:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
    8cda:	00b606b3          	add	a3,a2,a1
    8cde:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
    8ce2:	20068a63          	beqz	a3,8ef6 <base_vfprintf+0x2c2>
    8ce6:	0ff57513          	andi	a0,a0,255
    8cea:	03540733          	mul	a4,s0,s5
    8cee:	953a                	add	a0,a0,a4
    8cf0:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
    8cf4:	fd068513          	addi	a0,a3,-48
    8cf8:	0ff57713          	andi	a4,a0,255
    8cfc:	0585                	addi	a1,a1,1
    8cfe:	8536                	mv	a0,a3
    8d00:	fcecfde3          	bgeu	s9,a4,8cda <base_vfprintf+0xa6>
    8d04:	4601                	li	a2,0
    8d06:	8536                	mv	a0,a3
    8d08:	228d6163          	bltu	s10,s0,8f2a <base_vfprintf+0x2f6>
    8d0c:	008036b3          	snez	a3,s0
    8d10:	8e55                	or	a2,a2,a3
    8d12:	20060c63          	beqz	a2,8f2a <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8d16:	95de                	add	a1,a1,s7
    8d18:	95a6                	add	a1,a1,s1
    8d1a:	00258b93          	addi	s7,a1,2
    8d1e:	02adce63          	blt	s11,a0,8d5a <base_vfprintf+0x126>
    8d22:	06100593          	li	a1,97
    8d26:	06a5d563          	bge	a1,a0,8d90 <base_vfprintf+0x15c>
    8d2a:	06300593          	li	a1,99
    8d2e:	0ca5cb63          	blt	a1,a0,8e04 <base_vfprintf+0x1d0>
    8d32:	06200593          	li	a1,98
    8d36:	14b50a63          	beq	a0,a1,8e8a <base_vfprintf+0x256>
    8d3a:	06300593          	li	a1,99
    8d3e:	18b51f63          	bne	a0,a1,8edc <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
    8d42:	4502                	lw	a0,0(sp)
    8d44:	00450593          	addi	a1,a0,4
    8d48:	c02e                	sw	a1,0(sp)
    8d4a:	4108                	lw	a0,0(a0)
    8d4c:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
    8d50:	4605                	li	a2,1
    8d52:	854a                	mv	a0,s2
    8d54:	00b10593          	addi	a1,sp,11
    8d58:	aa41                	j	8ee8 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8d5a:	07200593          	li	a1,114
    8d5e:	04a5dd63          	bge	a1,a0,8db8 <base_vfprintf+0x184>
    8d62:	07700593          	li	a1,119
    8d66:	0aa5c663          	blt	a1,a0,8e12 <base_vfprintf+0x1de>
    8d6a:	07300593          	li	a1,115
    8d6e:	12b50963          	beq	a0,a1,8ea0 <base_vfprintf+0x26c>
    8d72:	07500593          	li	a1,117
    8d76:	16b51363          	bne	a0,a1,8edc <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
    8d7a:	4502                	lw	a0,0(sp)
    8d7c:	00450593          	addi	a1,a0,4
    8d80:	c02e                	sw	a1,0(sp)
    8d82:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
    8d84:	00002797          	auipc	a5,0x2
    8d88:	bc178793          	addi	a5,a5,-1087 # a945 <kDigitsLow>
    8d8c:	4729                	li	a4,10
    8d8e:	a8cd                	j	8e80 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8d90:	13850763          	beq	a0,s8,8ebe <base_vfprintf+0x28a>
    8d94:	04800593          	li	a1,72
    8d98:	00b50663          	beq	a0,a1,8da4 <base_vfprintf+0x170>
    8d9c:	05800593          	li	a1,88
    8da0:	12b51e63          	bne	a0,a1,8edc <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
    8da4:	4502                	lw	a0,0(sp)
    8da6:	00450593          	addi	a1,a0,4
    8daa:	c02e                	sw	a1,0(sp)
    8dac:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
    8dae:	00002797          	auipc	a5,0x2
    8db2:	ba778793          	addi	a5,a5,-1113 # a955 <kDigitsHigh>
    8db6:	a0e1                	j	8e7e <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8db8:	06900593          	li	a1,105
    8dbc:	06b50d63          	beq	a0,a1,8e36 <base_vfprintf+0x202>
    8dc0:	06f00593          	li	a1,111
    8dc4:	10b50163          	beq	a0,a1,8ec6 <base_vfprintf+0x292>
    8dc8:	07000593          	li	a1,112
    8dcc:	10b51863          	bne	a0,a1,8edc <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
    8dd0:	00002597          	auipc	a1,0x2
    8dd4:	0ee58593          	addi	a1,a1,238 # aebe <__clz_tab+0x4d2>
    8dd8:	4609                	li	a2,2
    8dda:	854a                	mv	a0,s2
    8ddc:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
    8dde:	4582                	lw	a1,0(sp)
    8de0:	00458613          	addi	a2,a1,4
    8de4:	c032                	sw	a2,0(sp)
    8de6:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
    8de8:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
    8dec:	00002797          	auipc	a5,0x2
    8df0:	b5978793          	addi	a5,a5,-1191 # a945 <kDigitsLow>
    8df4:	46a1                	li	a3,8
    8df6:	4741                	li	a4,16
    8df8:	854a                	mv	a0,s2
    8dfa:	85ce                	mv	a1,s3
    8dfc:	2a55                	jal	8fb0 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
    8dfe:	00a40b33          	add	s6,s0,a0
    8e02:	a0ed                	j	8eec <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
    8e04:	06400593          	li	a1,100
    8e08:	02b50763          	beq	a0,a1,8e36 <base_vfprintf+0x202>
    8e0c:	07b50063          	beq	a0,s11,8e6c <base_vfprintf+0x238>
    8e10:	a0f1                	j	8edc <base_vfprintf+0x2a8>
    8e12:	07800593          	li	a1,120
    8e16:	04b50b63          	beq	a0,a1,8e6c <base_vfprintf+0x238>
    8e1a:	07a00593          	li	a1,122
    8e1e:	0ab51f63          	bne	a0,a1,8edc <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
    8e22:	4502                	lw	a0,0(sp)
    8e24:	00450593          	addi	a1,a0,4
    8e28:	c02e                	sw	a1,0(sp)
    8e2a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
    8e2c:	00850593          	addi	a1,a0,8
    8e30:	c02e                	sw	a1,0(sp)
    8e32:	414c                	lw	a1,4(a0)
    8e34:	a84d                	j	8ee6 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
    8e36:	4502                	lw	a0,0(sp)
    8e38:	00450593          	addi	a1,a0,4
    8e3c:	c02e                	sw	a1,0(sp)
    8e3e:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
    8e40:	557d                	li	a0,-1
    8e42:	00954c63          	blt	a0,s1,8e5a <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
    8e46:	00002597          	auipc	a1,0x2
    8e4a:	07658593          	addi	a1,a1,118 # aebc <__clz_tab+0x4d0>
    8e4e:	4605                	li	a2,1
    8e50:	854a                	mv	a0,s2
    8e52:	9982                	jalr	s3
    8e54:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
    8e56:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
    8e5a:	00002797          	auipc	a5,0x2
    8e5e:	aeb78793          	addi	a5,a5,-1301 # a945 <kDigitsLow>
    8e62:	4729                	li	a4,10
    8e64:	854a                	mv	a0,s2
    8e66:	85ce                	mv	a1,s3
    8e68:	8626                	mv	a2,s1
    8e6a:	a829                	j	8e84 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
    8e6c:	4502                	lw	a0,0(sp)
    8e6e:	00450593          	addi	a1,a0,4
    8e72:	c02e                	sw	a1,0(sp)
    8e74:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
    8e76:	00002797          	auipc	a5,0x2
    8e7a:	acf78793          	addi	a5,a5,-1329 # a945 <kDigitsLow>
    8e7e:	4741                	li	a4,16
    8e80:	854a                	mv	a0,s2
    8e82:	85ce                	mv	a1,s3
    8e84:	86a2                	mv	a3,s0
    8e86:	222d                	jal	8fb0 <write_digits>
    8e88:	a08d                	j	8eea <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
    8e8a:	4502                	lw	a0,0(sp)
    8e8c:	00450593          	addi	a1,a0,4
    8e90:	c02e                	sw	a1,0(sp)
    8e92:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
    8e94:	00002797          	auipc	a5,0x2
    8e98:	ab178793          	addi	a5,a5,-1359 # a945 <kDigitsLow>
    8e9c:	4709                	li	a4,2
    8e9e:	b7cd                	j	8e80 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
    8ea0:	4502                	lw	a0,0(sp)
    8ea2:	00450593          	addi	a1,a0,4
    8ea6:	c02e                	sw	a1,0(sp)
    8ea8:	410c                	lw	a1,0(a0)
    8eaa:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
    8eac:	00a58633          	add	a2,a1,a0
    8eb0:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
    8eb4:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
    8eb6:	fa7d                	bnez	a2,8eac <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
    8eb8:	fff50613          	addi	a2,a0,-1
    8ebc:	a02d                	j	8ee6 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
    8ebe:	4605                	li	a2,1
    8ec0:	854a                	mv	a0,s2
    8ec2:	85d2                	mv	a1,s4
    8ec4:	a015                	j	8ee8 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
    8ec6:	4502                	lw	a0,0(sp)
    8ec8:	00450593          	addi	a1,a0,4
    8ecc:	c02e                	sw	a1,0(sp)
    8ece:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
    8ed0:	00002797          	auipc	a5,0x2
    8ed4:	a7578793          	addi	a5,a5,-1419 # a945 <kDigitsLow>
    8ed8:	4721                	li	a4,8
    8eda:	b75d                	j	8e80 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    8edc:	00002597          	auipc	a1,0x2
    8ee0:	a8958593          	addi	a1,a1,-1399 # a965 <kUnknownSpec>
    8ee4:	463d                	li	a2,15
    8ee6:	854a                	mv	a0,s2
    8ee8:	9982                	jalr	s3
    8eea:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
    8eec:	000bc503          	lbu	a0,0(s7)
    8ef0:	d8051ce3          	bnez	a0,8c88 <base_vfprintf+0x54>
    8ef4:	a819                	j	8f0a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
    8ef6:	00002597          	auipc	a1,0x2
    8efa:	a3258593          	addi	a1,a1,-1486 # a928 <kErrorNul>
    8efe:	4645                	li	a2,17
    8f00:	854a                	mv	a0,s2
    8f02:	9982                	jalr	s3
    8f04:	9b2a                	add	s6,s6,a0
    8f06:	a011                	j	8f0a <base_vfprintf+0x2d6>
    8f08:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
    8f0a:	855a                	mv	a0,s6
    8f0c:	4db2                	lw	s11,12(sp)
    8f0e:	4d42                	lw	s10,16(sp)
    8f10:	4cd2                	lw	s9,20(sp)
    8f12:	4c62                	lw	s8,24(sp)
    8f14:	4bf2                	lw	s7,28(sp)
    8f16:	5b02                	lw	s6,32(sp)
    8f18:	5a92                	lw	s5,36(sp)
    8f1a:	5a22                	lw	s4,40(sp)
    8f1c:	59b2                	lw	s3,44(sp)
    8f1e:	5942                	lw	s2,48(sp)
    8f20:	54d2                	lw	s1,52(sp)
    8f22:	5462                	lw	s0,56(sp)
    8f24:	50f2                	lw	ra,60(sp)
    8f26:	6121                	addi	sp,sp,64
    8f28:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
    8f2a:	00002597          	auipc	a1,0x2
    8f2e:	a0f58593          	addi	a1,a1,-1521 # a939 <kErrorTooWide>
    8f32:	4631                	li	a2,12
    8f34:	b7f1                	j	8f00 <base_vfprintf+0x2cc>

00008f36 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
    8f36:	7179                	addi	sp,sp,-48
    8f38:	ca06                	sw	ra,20(sp)
    8f3a:	d646                	sw	a7,44(sp)
    8f3c:	d442                	sw	a6,40(sp)
    8f3e:	d23e                	sw	a5,36(sp)
    8f40:	d03a                	sw	a4,32(sp)
    8f42:	ce36                	sw	a3,28(sp)
    8f44:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
    8f46:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
    8f48:	c42a                	sw	a0,8(sp)
    8f4a:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
    8f4c:	00000597          	auipc	a1,0x0
    8f50:	01258593          	addi	a1,a1,18 # 8f5e <snprintf_sink>
    8f54:	0028                	addi	a0,sp,8
    8f56:	39f9                	jal	8c34 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
    8f58:	40d2                	lw	ra,20(sp)
    8f5a:	6145                	addi	sp,sp,48
    8f5c:	8082                	ret

00008f5e <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
    8f5e:	1141                	addi	sp,sp,-16
    8f60:	c606                	sw	ra,12(sp)
    8f62:	c422                	sw	s0,8(sp)
    8f64:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
    8f66:	4140                	lw	s0,4(a0)
    8f68:	c005                	beqz	s0,8f88 <snprintf_sink+0x2a>
    8f6a:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
    8f6c:	00c46363          	bltu	s0,a2,8f72 <snprintf_sink+0x14>
    8f70:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
    8f72:	4088                	lw	a0,0(s1)
    8f74:	8622                	mv	a2,s0
    8f76:	3e9d                	jal	8aec <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
    8f78:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
    8f7a:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
    8f7c:	9522                	add	a0,a0,s0
    8f7e:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
    8f80:	40858533          	sub	a0,a1,s0
    8f84:	c0c8                	sw	a0,4(s1)
    8f86:	a011                	j	8f8a <snprintf_sink+0x2c>
    8f88:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
    8f8a:	8522                	mv	a0,s0
    8f8c:	4492                	lw	s1,4(sp)
    8f8e:	4422                	lw	s0,8(sp)
    8f90:	40b2                	lw	ra,12(sp)
    8f92:	0141                	addi	sp,sp,16
    8f94:	8082                	ret

00008f96 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
    8f96:	1101                	addi	sp,sp,-32
    8f98:	c206                	sw	ra,4(sp)
    8f9a:	ce46                	sw	a7,28(sp)
    8f9c:	cc42                	sw	a6,24(sp)
    8f9e:	ca3e                	sw	a5,20(sp)
    8fa0:	c83a                	sw	a4,16(sp)
    8fa2:	c636                	sw	a3,12(sp)
    8fa4:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
    8fa6:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
    8fa8:	3171                	jal	8c34 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
    8faa:	4092                	lw	ra,4(sp)
    8fac:	6105                	addi	sp,sp,32
    8fae:	8082                	ret

00008fb0 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
    8fb0:	7139                	addi	sp,sp,-64
    8fb2:	de06                	sw	ra,60(sp)
    8fb4:	dc22                	sw	s0,56(sp)
    8fb6:	da26                	sw	s1,52(sp)
    8fb8:	d84a                	sw	s2,48(sp)
    8fba:	d64e                	sw	s3,44(sp)
    8fbc:	892e                	mv	s2,a1
    8fbe:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
    8fc0:	ca05                	beqz	a2,8ff0 <write_digits+0x40>
    8fc2:	4501                	li	a0,0
    8fc4:	02b10813          	addi	a6,sp,43
    8fc8:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
    8fca:	02e65633          	divu	a2,a2,a4
    8fce:	02e60433          	mul	s0,a2,a4
    8fd2:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
    8fd6:	943e                	add	s0,s0,a5
    8fd8:	00040403          	lb	s0,0(s0)
    8fdc:	00a805b3          	add	a1,a6,a0
    8fe0:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
    8fe4:	157d                	addi	a0,a0,-1
    8fe6:	fee4f1e3          	bgeu	s1,a4,8fc8 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
    8fea:	40a00633          	neg	a2,a0
    8fee:	a011                	j	8ff2 <write_digits+0x42>
    8ff0:	4601                	li	a2,0
    8ff2:	4485                	li	s1,1
    8ff4:	c291                	beqz	a3,8ff8 <write_digits+0x48>
    8ff6:	84b6                	mv	s1,a3
    8ff8:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
    8ffc:	00a4e463          	bltu	s1,a0,9004 <write_digits+0x54>
    9000:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
    9004:	00967f63          	bgeu	a2,s1,9022 <write_digits+0x72>
    9008:	0068                	addi	a0,sp,12
    900a:	8d05                	sub	a0,a0,s1
    900c:	02050513          	addi	a0,a0,32
    9010:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
    9014:	03000593          	li	a1,48
    9018:	8622                	mv	a2,s0
    901a:	34e5                	jal	8b02 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
    901c:	147d                	addi	s0,s0,-1
    901e:	fc7d                	bnez	s0,901c <write_digits+0x6c>
    9020:	8626                	mv	a2,s1
    9022:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
    9024:	8d11                	sub	a0,a0,a2
    9026:	02050593          	addi	a1,a0,32
    902a:	854e                	mv	a0,s3
    902c:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
    902e:	59b2                	lw	s3,44(sp)
    9030:	5942                	lw	s2,48(sp)
    9032:	54d2                	lw	s1,52(sp)
    9034:	5462                	lw	s0,56(sp)
    9036:	50f2                	lw	ra,60(sp)
    9038:	6121                	addi	sp,sp,64
    903a:	8082                	ret

0000903c <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
    903c:	c581                	beqz	a1,9044 <dif_uart_init+0x8>
    903e:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
    9040:	c188                	sw	a0,0(a1)
    9042:	a011                	j	9046 <dif_uart_init+0xa>
    9044:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
    9046:	8532                	mv	a0,a2
    9048:	8082                	ret

0000904a <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
    904a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
    904c:	c606                	sw	ra,12(sp)
    904e:	c422                	sw	s0,8(sp)
    9050:	c226                	sw	s1,4(sp)
    9052:	c935                	beqz	a0,90c6 <dif_uart_configure+0x7c>
    9054:	84ae                	mv	s1,a1
    9056:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
    9058:	418c                	lw	a1,0(a1)
    905a:	450d                	li	a0,3
    905c:	c5b5                	beqz	a1,90c8 <dif_uart_configure+0x7e>
    905e:	40d0                	lw	a2,4(s1)
    9060:	c625                	beqz	a2,90c8 <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
    9062:	01459513          	slli	a0,a1,0x14
    9066:	81b1                	srli	a1,a1,0xc
    9068:	4681                	li	a3,0
    906a:	354010ef          	jal	ra,a3be <__udivdi3>
    906e:	6641                	lui	a2,0x10
    9070:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
    9072:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
    9074:	8d31                	xor	a0,a0,a2
    9076:	8dc9                	or	a1,a1,a0
    9078:	4511                	li	a0,4
    907a:	e5b9                	bnez	a1,90c8 <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
    907c:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    907e:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
    9082:	4008                	lw	a0,0(s0)
    9084:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9086:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
    9088:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    908a:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
    908e:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9090:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
    9094:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9096:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
    909a:	4008                	lw	a0,0(s0)
    909c:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    909e:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
    90a0:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
    90a2:	01061513          	slli	a0,a2,0x10
    90a6:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
    90aa:	c291                	beqz	a3,90ae <dif_uart_configure+0x64>
    90ac:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
    90ae:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
    90b0:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
    90b2:	e219                	bnez	a2,90b8 <dif_uart_configure+0x6e>
    90b4:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
    90b8:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    90ba:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
    90bc:	400c                	lw	a1,0(s0)
    90be:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    90c0:	0005a223          	sw	zero,4(a1)
    90c4:	a011                	j	90c8 <dif_uart_configure+0x7e>
    90c6:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
    90c8:	4492                	lw	s1,4(sp)
    90ca:	4422                	lw	s0,8(sp)
    90cc:	40b2                	lw	ra,12(sp)
    90ce:	0141                	addi	sp,sp,16
    90d0:	8082                	ret

000090d2 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
    90d2:	1141                	addi	sp,sp,-16
    90d4:	c606                	sw	ra,12(sp)
    90d6:	c422                	sw	s0,8(sp)
    90d8:	c226                	sw	s1,4(sp)
    90da:	84aa                	mv	s1,a0
    90dc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
    90de:	c09d                	beqz	s1,9104 <dif_uart_irq_is_pending+0x32>
    90e0:	8432                	mv	s0,a2
    90e2:	c20d                	beqz	a2,9104 <dif_uart_irq_is_pending+0x32>
    90e4:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    90e6:	852e                	mv	a0,a1
    90e8:	85b2                	mv	a1,a2
    90ea:	2015                	jal	910e <uart_irq_offset_get>
    90ec:	85aa                	mv	a1,a0
    90ee:	4505                	li	a0,1
    90f0:	c991                	beqz	a1,9104 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
    90f2:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    90f4:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
    90f6:	4602                	lw	a2,0(sp)
    90f8:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    90fa:	00c5d5b3          	srl	a1,a1,a2
    90fe:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
    9100:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
    9104:	4492                	lw	s1,4(sp)
    9106:	4422                	lw	s0,8(sp)
    9108:	40b2                	lw	ra,12(sp)
    910a:	0141                	addi	sp,sp,16
    910c:	8082                	ret

0000910e <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
    910e:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
    9110:	00a66563          	bltu	a2,a0,911a <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
    9114:	c188                	sw	a0,0(a1)
    9116:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
    9118:	8082                	ret
    911a:	4501                	li	a0,0
    911c:	8082                	ret

0000911e <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
    911e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
    9120:	c606                	sw	ra,12(sp)
    9122:	c422                	sw	s0,8(sp)
    9124:	c10d                	beqz	a0,9146 <dif_uart_irq_acknowledge+0x28>
    9126:	842a                	mv	s0,a0
    9128:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    912a:	852e                	mv	a0,a1
    912c:	85b2                	mv	a1,a2
    912e:	37c5                	jal	910e <uart_irq_offset_get>
    9130:	85aa                	mv	a1,a0
    9132:	4505                	li	a0,1
    9134:	c991                	beqz	a1,9148 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
    9136:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
    9138:	4010                	lw	a2,0(s0)
    913a:	4501                	li	a0,0
    913c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    913e:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9142:	c20c                	sw	a1,0(a2)
    9144:	a011                	j	9148 <dif_uart_irq_acknowledge+0x2a>
    9146:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
    9148:	4422                	lw	s0,8(sp)
    914a:	40b2                	lw	ra,12(sp)
    914c:	0141                	addi	sp,sp,16
    914e:	8082                	ret

00009150 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
    9150:	c911                	beqz	a0,9164 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
    9152:	c581                	beqz	a1,915a <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
    9154:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9156:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
    9158:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
    915a:	410c                	lw	a1,0(a0)
    915c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    915e:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
    9162:	8082                	ret
    9164:	4509                	li	a0,2
    9166:	8082                	ret

00009168 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
    9168:	862a                	mv	a2,a0
    916a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
    916c:	c611                	beqz	a2,9178 <dif_uart_irq_restore_all+0x10>
    916e:	c589                	beqz	a1,9178 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
    9170:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
    9172:	4210                	lw	a2,0(a2)
    9174:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9176:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
    9178:	8082                	ret

0000917a <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
    917a:	1141                	addi	sp,sp,-16
    917c:	c606                	sw	ra,12(sp)
    917e:	c422                	sw	s0,8(sp)
    9180:	c226                	sw	s1,4(sp)
    9182:	84aa                	mv	s1,a0
    9184:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
    9186:	c485                	beqz	s1,91ae <dif_uart_irq_get_enabled+0x34>
    9188:	8432                	mv	s0,a2
    918a:	c215                	beqz	a2,91ae <dif_uart_irq_get_enabled+0x34>
    918c:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    918e:	852e                	mv	a0,a1
    9190:	85b2                	mv	a1,a2
    9192:	3fb5                	jal	910e <uart_irq_offset_get>
    9194:	85aa                	mv	a1,a0
    9196:	4505                	li	a0,1
    9198:	c999                	beqz	a1,91ae <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
    919a:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    919c:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
    919e:	4602                	lw	a2,0(sp)
    91a0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    91a2:	00c5d5b3          	srl	a1,a1,a2
    91a6:	8985                	andi	a1,a1,1
    91a8:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
    91ac:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
    91ae:	4492                	lw	s1,4(sp)
    91b0:	4422                	lw	s0,8(sp)
    91b2:	40b2                	lw	ra,12(sp)
    91b4:	0141                	addi	sp,sp,16
    91b6:	8082                	ret

000091b8 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
    91b8:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
    91ba:	c606                	sw	ra,12(sp)
    91bc:	c422                	sw	s0,8(sp)
    91be:	c226                	sw	s1,4(sp)
    91c0:	c91d                	beqz	a0,91f6 <dif_uart_irq_set_enabled+0x3e>
    91c2:	8432                	mv	s0,a2
    91c4:	84aa                	mv	s1,a0
    91c6:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    91c8:	852e                	mv	a0,a1
    91ca:	85b2                	mv	a1,a2
    91cc:	3789                	jal	910e <uart_irq_offset_get>
    91ce:	85aa                	mv	a1,a0
    91d0:	4505                	li	a0,1
    91d2:	c19d                	beqz	a1,91f8 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
    91d4:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    91d6:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
    91d8:	4682                	lw	a3,0(sp)
    91da:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
    91dc:	00143713          	seqz	a4,s0
    91e0:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    91e2:	00d797b3          	sll	a5,a5,a3
    91e6:	fff7c793          	not	a5,a5
    91ea:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    91ec:	00d716b3          	sll	a3,a4,a3
    91f0:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    91f2:	c1d0                	sw	a2,4(a1)
    91f4:	a011                	j	91f8 <dif_uart_irq_set_enabled+0x40>
    91f6:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
    91f8:	4492                	lw	s1,4(sp)
    91fa:	4422                	lw	s0,8(sp)
    91fc:	40b2                	lw	ra,12(sp)
    91fe:	0141                	addi	sp,sp,16
    9200:	8082                	ret

00009202 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
    9202:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
    9204:	c606                	sw	ra,12(sp)
    9206:	c422                	sw	s0,8(sp)
    9208:	c10d                	beqz	a0,922a <dif_uart_irq_force+0x28>
    920a:	842a                	mv	s0,a0
    920c:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
    920e:	852e                	mv	a0,a1
    9210:	85b2                	mv	a1,a2
    9212:	3df5                	jal	910e <uart_irq_offset_get>
    9214:	85aa                	mv	a1,a0
    9216:	4505                	li	a0,1
    9218:	c991                	beqz	a1,922c <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
    921a:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
    921c:	4010                	lw	a2,0(s0)
    921e:	4501                	li	a0,0
    9220:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9222:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9226:	c60c                	sw	a1,8(a2)
    9228:	a011                	j	922c <dif_uart_irq_force+0x2a>
    922a:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
    922c:	4422                	lw	s0,8(sp)
    922e:	40b2                	lw	ra,12(sp)
    9230:	0141                	addi	sp,sp,16
    9232:	8082                	ret

00009234 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
    9234:	cd09                	beqz	a0,924e <dif_uart_watermark_rx_set+0x1a>
    9236:	4691                	li	a3,4
    9238:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
    923a:	00b6eb63          	bltu	a3,a1,9250 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
    923e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9240:	4d54                	lw	a3,28(a0)
    9242:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
    9244:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    9246:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9248:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    924a:	cd4c                	sw	a1,28(a0)
    924c:	a011                	j	9250 <dif_uart_watermark_rx_set+0x1c>
    924e:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    9250:	8532                	mv	a0,a2
    9252:	8082                	ret

00009254 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
    9254:	cd11                	beqz	a0,9270 <dif_uart_watermark_tx_set+0x1c>
    9256:	468d                	li	a3,3
    9258:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
    925a:	00b6ec63          	bltu	a3,a1,9272 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
    925e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9260:	4d54                	lw	a3,28(a0)
    9262:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
    9264:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9266:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    926a:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    926c:	cd4c                	sw	a1,28(a0)
    926e:	a011                	j	9272 <dif_uart_watermark_tx_set+0x1e>
    9270:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    9272:	8532                	mv	a0,a2
    9274:	8082                	ret

00009276 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
    9276:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
    9278:	c51d                	beqz	a0,92a6 <dif_uart_bytes_send+0x30>
    927a:	c595                	beqz	a1,92a6 <dif_uart_bytes_send+0x30>
    927c:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    927e:	c20d                	beqz	a2,92a0 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
    9280:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9284:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    9288:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    928a:	eb19                	bnez	a4,92a0 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
    928c:	00f58733          	add	a4,a1,a5
    9290:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
    9294:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9296:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    929a:	fef613e3          	bne	a2,a5,9280 <dif_uart_bytes_send+0xa>
    929e:	87b2                	mv	a5,a2
    92a0:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
    92a2:	c291                	beqz	a3,92a6 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
    92a4:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
    92a6:	853a                	mv	a0,a4
    92a8:	8082                	ret

000092aa <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
    92aa:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
    92ac:	c515                	beqz	a0,92d8 <dif_uart_bytes_receive+0x2e>
    92ae:	c60d                	beqz	a2,92d8 <dif_uart_bytes_receive+0x2e>
    92b0:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    92b2:	cd99                	beqz	a1,92d0 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
    92b4:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    92b6:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    92b8:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    92bc:	eb91                	bnez	a5,92d0 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    92be:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
    92c0:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
    92c4:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
    92c6:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    92ca:	ff0595e3          	bne	a1,a6,92b4 <dif_uart_bytes_receive+0xa>
    92ce:	882e                	mv	a6,a1
    92d0:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
    92d2:	c299                	beqz	a3,92d8 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
    92d4:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
    92d8:	853a                	mv	a0,a4
    92da:	8082                	ret

000092dc <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
    92dc:	cd19                	beqz	a0,92fa <dif_uart_byte_send_polled+0x1e>
    92de:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    92e0:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    92e2:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
    92e4:	fef5                	bnez	a3,92e0 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    92e6:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    92e8:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
    92ea:	e299                	bnez	a3,92f0 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    92ec:	ce0c                	sw	a1,24(a2)
    92ee:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    92f0:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    92f2:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
    92f4:	dd75                	beqz	a0,92f0 <dif_uart_byte_send_polled+0x14>
    92f6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
    92f8:	8082                	ret
    92fa:	4509                	li	a0,2
    92fc:	8082                	ret

000092fe <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
    92fe:	862a                	mv	a2,a0
    9300:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
    9302:	c205                	beqz	a2,9322 <dif_uart_byte_receive_polled+0x24>
    9304:	cd99                	beqz	a1,9322 <dif_uart_byte_receive_polled+0x24>
    9306:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9308:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    930a:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
    930e:	fd6d                	bnez	a0,9308 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9310:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    9312:	02057693          	andi	a3,a0,32
    9316:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
    9318:	e689                	bnez	a3,9322 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    931a:	4a50                	lw	a2,20(a2)
    931c:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
    931e:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
    9322:	8082                	ret

00009324 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
    9324:	862a                	mv	a2,a0
    9326:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
    9328:	ca09                	beqz	a2,933a <dif_uart_rx_bytes_available+0x16>
    932a:	c981                	beqz	a1,933a <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
    932c:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    932e:	5110                	lw	a2,32(a0)
    9330:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
    9332:	8241                	srli	a2,a2,0x10
    9334:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
    9338:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
    933a:	8082                	ret

0000933c <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
    933c:	862a                	mv	a2,a0
    933e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
    9340:	ce01                	beqz	a2,9358 <dif_uart_tx_bytes_available+0x1c>
    9342:	c999                	beqz	a1,9358 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
    9344:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9346:	5110                	lw	a2,32(a0)
    9348:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
    934a:	03f67613          	andi	a2,a2,63
    934e:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
    9352:	40c68633          	sub	a2,a3,a2
    9356:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
    9358:	8082                	ret

0000935a <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
    935a:	c11d                	beqz	a0,9380 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
    935c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    935e:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
    9360:	ffd5f693          	andi	a3,a1,-3
    9364:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
    9368:	fff58713          	addi	a4,a1,-1
    936c:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
    936e:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
    9372:	00f77463          	bgeu	a4,a5,937a <dif_uart_fifo_reset+0x20>
    9376:	0025e593          	ori	a1,a1,2
    937a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    937c:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    937e:	8082                	ret
    9380:	4509                	li	a0,2
    9382:	8082                	ret

00009384 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
    9384:	c515                	beqz	a0,93b0 <dif_uart_loopback_set+0x2c>
    9386:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
    9388:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
    938a:	0015b593          	seqz	a1,a1
    938e:	4715                	li	a4,5
    9390:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9394:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
    9396:	00163613          	seqz	a2,a2
    939a:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    939c:	00b797b3          	sll	a5,a5,a1
    93a0:	fff7c793          	not	a5,a5
    93a4:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    93a6:	00b615b3          	sll	a1,a2,a1
    93aa:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    93ac:	c54c                	sw	a1,12(a0)
    93ae:	a011                	j	93b2 <dif_uart_loopback_set+0x2e>
    93b0:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
    93b2:	8536                	mv	a0,a3
    93b4:	8082                	ret

000093b6 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
    93b6:	862a                	mv	a2,a0
    93b8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
    93ba:	ca11                	beqz	a2,93ce <dif_uart_enable_rx_timeout+0x18>
    93bc:	0185d693          	srli	a3,a1,0x18
    93c0:	e699                	bnez	a3,93ce <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
    93c2:	4210                	lw	a2,0(a2)
    93c4:	4501                	li	a0,0
    93c6:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    93ca:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    93cc:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
    93ce:	8082                	ret

000093d0 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
    93d0:	c511                	beqz	a0,93dc <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
    93d2:	410c                	lw	a1,0(a0)
    93d4:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    93d6:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
    93da:	8082                	ret
    93dc:	4509                	li	a0,2
    93de:	8082                	ret

000093e0 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
    93e0:	86aa                	mv	a3,a0
    93e2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
    93e4:	ce99                	beqz	a3,9402 <dif_uart_get_rx_timeout+0x22>
    93e6:	cd91                	beqz	a1,9402 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
    93e8:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    93ea:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
    93ec:	fff6c513          	not	a0,a3
    93f0:	817d                	srli	a0,a0,0x1f
    93f2:	c188                	sw	a0,0(a1)
    93f4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
    93f6:	c611                	beqz	a2,9402 <dif_uart_get_rx_timeout+0x22>
    93f8:	010005b7          	lui	a1,0x1000
    93fc:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
    93fe:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
    9400:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
    9402:	8082                	ret

00009404 <flash_init_block>:
flash_init_block():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:38
          (1 << FLASH_CTRL_OP_STATUS_DONE_BIT)) == 0) {
  }
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
}

void flash_init_block(void) {
    9404:	41000537          	lui	a0,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:39
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_STATUS_REG_OFFSET) &
    9408:	14852583          	lw	a1,328(a0) # 41000148 <_flash_header+0x21000148>
    940c:	89c1                	andi	a1,a1,16
    940e:	fded                	bnez	a1,9408 <flash_init_block+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:42
          (1 << FLASH_CTRL_STATUS_INIT_WIP_BIT)) > 0) {
  }
}
    9410:	8082                	ret

00009412 <flash_check_empty>:
flash_check_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:52
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
  return err_status;
}

int flash_check_empty(void) {
    9412:	20000537          	lui	a0,0x20000
    9416:	40000893          	li	a7,1024
    941a:	587d                	li	a6,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:57
  uint32_t mask = -1u;
  uint32_t *p = (uint32_t *)FLASH_MEM_BASE_ADDR;
  // TODO: Update range to cover entire flash. Limited now to one bank while
  // we debu initialization.
  for (; p < (uint32_t *)(FLASH_MEM_BASE_ADDR + flash_get_bank_size());) {
    941c:	01355693          	srli	a3,a0,0x13
    9420:	02d8e763          	bltu	a7,a3,944e <flash_check_empty+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:58
    mask &= *p++;
    9424:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:59
    mask &= *p++;
    9426:	4158                	lw	a4,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:60
    mask &= *p++;
    9428:	451c                	lw	a5,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:61
    mask &= *p++;
    942a:	4550                	lw	a2,12(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:59
    mask &= *p++;
    942c:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:60
    mask &= *p++;
    942e:	8efd                	and	a3,a3,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:61
    mask &= *p++;
    9430:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:62
    mask &= *p++;
    9432:	4914                	lw	a3,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:63
    mask &= *p++;
    9434:	4958                	lw	a4,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:64
    mask &= *p++;
    9436:	4d1c                	lw	a5,24(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:65
    mask &= *p++;
    9438:	4d4c                	lw	a1,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:62
    mask &= *p++;
    943a:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:63
    mask &= *p++;
    943c:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:64
    mask &= *p++;
    943e:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:65
    mask &= *p++;
    9440:	8df1                	and	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:66
    if (mask != -1u) {
    9442:	02050513          	addi	a0,a0,32 # 20000020 <_flash_header+0x20>
    9446:	fd058be3          	beq	a1,a6,941c <flash_check_empty+0xa>
    944a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:71
      return 0;
    }
  }
  return 1;
}
    944c:	8082                	ret
    944e:	4505                	li	a0,1
    9450:	8082                	ret

00009452 <flash_get_bank_size>:
flash_get_bank_size():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:237

uint32_t flash_get_words_per_page(void) {
  return FLASH_CTRL_PARAM_WORDS_PER_PAGE;
}

uint32_t flash_get_bank_size(void) { return FLASH_CTRL_PARAM_BYTES_PER_BANK; }
    9452:	00080537          	lui	a0,0x80
    9456:	8082                	ret

00009458 <flash_bank_erase>:
flash_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:73
int flash_bank_erase(bank_index_t idx) {
    9458:	41000637          	lui	a2,0x41000
    945c:	14062683          	lw	a3,320(a2) # 41000140 <_flash_header+0x21000140>
    9460:	4585                	li	a1,1
    9462:	00a595b3          	sll	a1,a1,a0
flash_cfg_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:174
      (erase_en) ? SETBIT(REG32(FLASH_CTRL0_BASE_ADDR +
    9466:	8ecd                	or	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:173
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_BANK_CFG_REG_OFFSET) =
    9468:	14d62023          	sw	a3,320(a2)
    946c:	200006b7          	lui	a3,0x20000
flash_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:78
      (idx == FLASH_BANK_0) ? FLASH_MEM_BASE_ADDR
    9470:	c119                	beqz	a0,9476 <flash_bank_erase+0x1e>
    9472:	200806b7          	lui	a3,0x20080
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:77
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) =
    9476:	ce54                	sw	a3,28(a2)
    9478:	0a100513          	li	a0,161
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:80
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
    947c:	ce08                	sw	a0,24(a2)
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
    947e:	14462503          	lw	a0,324(a2)
    9482:	8905                	andi	a0,a0,1
    9484:	dd6d                	beqz	a0,947e <flash_bank_erase+0x26>
    9486:	41000637          	lui	a2,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
    948a:	14062223          	sw	zero,324(a2) # 41000144 <_flash_header+0x21000144>
    948e:	14062503          	lw	a0,320(a2)
flash_cfg_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:174
      (erase_en) ? SETBIT(REG32(FLASH_CTRL0_BASE_ADDR +
    9492:	fff5c593          	not	a1,a1
    9496:	8d6d                	and	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:173
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_BANK_CFG_REG_OFFSET) =
    9498:	14a62023          	sw	a0,320(a2)
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
    949c:	15062503          	lw	a0,336(a2)
    94a0:	55fd                	li	a1,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
    94a2:	14b62823          	sw	a1,336(a2)
flash_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:88
  return get_clr_err();
    94a6:	8082                	ret

000094a8 <flash_cfg_bank_erase>:
flash_cfg_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:172
void flash_cfg_bank_erase(bank_index_t bank, bool erase_en) {
    94a8:	41000637          	lui	a2,0x41000
    94ac:	14062683          	lw	a3,320(a2) # 41000140 <_flash_header+0x21000140>
    94b0:	4705                	li	a4,1
    94b2:	00a71533          	sll	a0,a4,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:174
      (erase_en) ? SETBIT(REG32(FLASH_CTRL0_BASE_ADDR +
    94b6:	e589                	bnez	a1,94c0 <flash_cfg_bank_erase+0x18>
    94b8:	fff54513          	not	a0,a0
    94bc:	8d75                	and	a0,a0,a3
    94be:	a011                	j	94c2 <flash_cfg_bank_erase+0x1a>
    94c0:	8d55                	or	a0,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:173
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_BANK_CFG_REG_OFFSET) =
    94c2:	14a62023          	sw	a0,320(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:180
}
    94c6:	8082                	ret

000094c8 <flash_page_erase>:
flash_page_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:91
int flash_page_erase(uint32_t addr, part_type_t part) {
    94c8:	41000637          	lui	a2,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:92
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) = addr;
    94cc:	ce48                	sw	a0,28(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:96
      part << FLASH_CTRL_CONTROL_PARTITION_SEL_BIT |
    94ce:	00859513          	slli	a0,a1,0x8
    94d2:	02156513          	ori	a0,a0,33
    94d6:	01860593          	addi	a1,a2,24 # 41000018 <_flash_header+0x21000018>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:93
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
    94da:	c188                	sw	a0,0(a1)
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
    94dc:	14462503          	lw	a0,324(a2)
    94e0:	8905                	andi	a0,a0,1
    94e2:	dd6d                	beqz	a0,94dc <flash_page_erase+0x14>
    94e4:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
    94e8:	1405a223          	sw	zero,324(a1) # 41000144 <_flash_header+0x21000144>
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
    94ec:	1505a503          	lw	a0,336(a1)
    94f0:	567d                	li	a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
    94f2:	14c5a823          	sw	a2,336(a1)
flash_page_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:99
  return get_clr_err();
    94f6:	8082                	ret

000094f8 <flash_write>:
flash_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:121
                uint32_t size) {
    94f8:	4301                	li	t1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:134
  while (words_remaining > 0) {
    94fa:	ceb5                	beqz	a3,9576 <flash_write+0x7e>
    94fc:	4381                	li	t2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:122
  uint32_t window_offset = (addr / sizeof(uint32_t)) % PROGRAM_RESOLUTION_WORDS;
    94fe:	00255713          	srli	a4,a0,0x2
    9502:	8b3d                	andi	a4,a4,15
    9504:	47c1                	li	a5,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:127
  max_words = PROGRAM_RESOLUTION_WORDS - window_offset;
    9506:	8f99                	sub	a5,a5,a4
    9508:	00859813          	slli	a6,a1,0x8
    950c:	41000eb7          	lui	t4,0x41000
    9510:	78c1                	lui	a7,0xffff0
    9512:	52fd                	li	t0,-1
    9514:	8e36                	mv	t3,a3
    9516:	00fe6363          	bltu	t3,a5,951c <flash_write+0x24>
    951a:	8e3e                	mv	t3,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:141
    err |= flash_write_internal(addr + current_word * sizeof(uint32_t), part,
    951c:	00239713          	slli	a4,t2,0x2
    9520:	972a                	add	a4,a4,a0
flash_write_internal():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:106
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) = addr;
    9522:	00eeae23          	sw	a4,28(t4) # 4100001c <_flash_header+0x2100001c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:110
       (size - 1) << FLASH_CTRL_CONTROL_NUM_OFFSET |
    9526:	010e1713          	slli	a4,t3,0x10
    952a:	9746                	add	a4,a4,a7
    952c:	00e86733          	or	a4,a6,a4
    9530:	01176713          	ori	a4,a4,17
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:107
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
    9534:	00eeac23          	sw	a4,24(t4)
    9538:	87b2                	mv	a5,a2
    953a:	8772                	mv	a4,t3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:112
  for (int i = 0; i < size; ++i) {
    953c:	000e0863          	beqz	t3,954c <flash_write+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:113
    REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_PROG_FIFO_REG_OFFSET) = data[i];
    9540:	438c                	lw	a1,0(a5)
    9542:	18bea623          	sw	a1,396(t4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:112
  for (int i = 0; i < size; ++i) {
    9546:	177d                	addi	a4,a4,-1
    9548:	0791                	addi	a5,a5,4
    954a:	fb7d                	bnez	a4,9540 <flash_write+0x48>
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
    954c:	144ea703          	lw	a4,324(t4)
    9550:	8b05                	andi	a4,a4,1
    9552:	df6d                	beqz	a4,954c <flash_write+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
    9554:	140ea223          	sw	zero,324(t4)
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
    9558:	150ea583          	lw	a1,336(t4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
    955c:	145ea823          	sw	t0,336(t4)
flash_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:141
    err |= flash_write_internal(addr + current_word * sizeof(uint32_t), part,
    9560:	0065e333          	or	t1,a1,t1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:143
    current_word += words_to_program;
    9564:	93f2                	add	t2,t2,t3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:144
    data += words_to_program;
    9566:	002e1593          	slli	a1,t3,0x2
    956a:	962e                	add	a2,a2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:148
    words_remaining = size - current_word;
    956c:	40768e33          	sub	t3,a3,t2
    9570:	47c1                	li	a5,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:134
  while (words_remaining > 0) {
    9572:	fa0e12e3          	bnez	t3,9516 <flash_write+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:150
  return err;
    9576:	851a                	mv	a0,t1
    9578:	8082                	ret

0000957a <flash_read>:
flash_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:153
int flash_read(uint32_t addr, part_type_t part, uint32_t size, uint32_t *data) {
    957a:	41000737          	lui	a4,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:154
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) = addr;
    957e:	cf48                	sw	a0,28(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:157
      part << FLASH_CTRL_CONTROL_PARTITION_SEL_BIT |
    9580:	00859513          	slli	a0,a1,0x8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:158
      (size - 1) << FLASH_CTRL_CONTROL_NUM_OFFSET |
    9584:	01061593          	slli	a1,a2,0x10
    9588:	77c1                	lui	a5,0xffff0
    958a:	95be                	add	a1,a1,a5
    958c:	8d4d                	or	a0,a0,a1
    958e:	00156513          	ori	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:155
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
    9592:	cf08                	sw	a0,24(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:160
  for (uint32_t i = 0; i < size;) {
    9594:	ce09                	beqz	a2,95ae <flash_read+0x34>
    9596:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:161
    if (((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_STATUS_REG_OFFSET) >>
    9598:	14872583          	lw	a1,328(a4) # 41000148 <_flash_header+0x21000148>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:163
         0x1) == 0) {
    959c:	8989                	andi	a1,a1,2
    959e:	e591                	bnez	a1,95aa <flash_read+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:164
      *data++ = REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_RD_FIFO_REG_OFFSET);
    95a0:	19072583          	lw	a1,400(a4)
    95a4:	c28c                	sw	a1,0(a3)
    95a6:	0691                	addi	a3,a3,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:165
      i++;
    95a8:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:160
  for (uint32_t i = 0; i < size;) {
    95aa:	fec567e3          	bltu	a0,a2,9598 <flash_read+0x1e>
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
    95ae:	14472503          	lw	a0,324(a4)
    95b2:	8905                	andi	a0,a0,1
    95b4:	dd6d                	beqz	a0,95ae <flash_read+0x34>
    95b6:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
    95ba:	1405a223          	sw	zero,324(a1) # 41000144 <_flash_header+0x21000144>
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
    95be:	1505a503          	lw	a0,336(a1)
    95c2:	567d                	li	a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
    95c4:	14c5a823          	sw	a2,336(a1)
flash_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:169
  return get_clr_err();
    95c8:	8082                	ret

000095ca <flash_default_region_access>:
flash_default_region_access():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:185
      prog_en << FLASH_CTRL_DEFAULT_REGION_PROG_EN_BIT |
    95ca:	0586                	slli	a1,a1,0x1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:184
      rd_en << FLASH_CTRL_DEFAULT_REGION_RD_EN_BIT |
    95cc:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:186
      erase_en << FLASH_CTRL_DEFAULT_REGION_ERASE_EN_BIT;
    95ce:	00261593          	slli	a1,a2,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:185
      prog_en << FLASH_CTRL_DEFAULT_REGION_PROG_EN_BIT |
    95d2:	8d4d                	or	a0,a0,a1
    95d4:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:183
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_DEFAULT_REGION_REG_OFFSET) =
    95d8:	d5a8                	sw	a0,104(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:187
}
    95da:	8082                	ret

000095dc <flash_cfg_region>:
flash_cfg_region():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:193
  if (region_cfg->part == kDataPartition) {
    95dc:	454c                	lw	a1,12(a0)
    95de:	4605                	li	a2,1
    95e0:	04c58263          	beq	a1,a2,9624 <flash_cfg_region+0x48>
    95e4:	e1c9                	bnez	a1,9666 <flash_cfg_region+0x8a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:196
        region_cfg->base << FLASH_CTRL_MP_REGION_CFG_0_BASE_0_OFFSET |
    95e6:	414c                	lw	a1,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:197
        region_cfg->size << FLASH_CTRL_MP_REGION_CFG_0_SIZE_0_OFFSET |
    95e8:	4510                	lw	a2,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:196
        region_cfg->base << FLASH_CTRL_MP_REGION_CFG_0_BASE_0_OFFSET |
    95ea:	00859813          	slli	a6,a1,0x8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:197
        region_cfg->size << FLASH_CTRL_MP_REGION_CFG_0_SIZE_0_OFFSET |
    95ee:	0646                	slli	a2,a2,0x11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:198
        region_cfg->rd_en << FLASH_CTRL_MP_REGION_CFG_0_RD_EN_0_BIT |
    95f0:	4914                	lw	a3,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:199
        region_cfg->prog_en << FLASH_CTRL_MP_REGION_CFG_0_PROG_EN_0_BIT |
    95f2:	4958                	lw	a4,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:200
        region_cfg->erase_en << FLASH_CTRL_MP_REGION_CFG_0_ERASE_EN_0_BIT |
    95f4:	4d1c                	lw	a5,24(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:201
        region_cfg->scramble_en
    95f6:	4d4c                	lw	a1,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:198
        region_cfg->rd_en << FLASH_CTRL_MP_REGION_CFG_0_RD_EN_0_BIT |
    95f8:	0686                	slli	a3,a3,0x1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:199
        region_cfg->prog_en << FLASH_CTRL_MP_REGION_CFG_0_PROG_EN_0_BIT |
    95fa:	070a                	slli	a4,a4,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:200
        region_cfg->erase_en << FLASH_CTRL_MP_REGION_CFG_0_ERASE_EN_0_BIT |
    95fc:	078e                	slli	a5,a5,0x3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:202
            << FLASH_CTRL_MP_REGION_CFG_0_SCRAMBLE_EN_0_BIT |
    95fe:	0592                	slli	a1,a1,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:197
        region_cfg->size << FLASH_CTRL_MP_REGION_CFG_0_SIZE_0_OFFSET |
    9600:	00c86633          	or	a2,a6,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:198
        region_cfg->rd_en << FLASH_CTRL_MP_REGION_CFG_0_RD_EN_0_BIT |
    9604:	8e55                	or	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:199
        region_cfg->prog_en << FLASH_CTRL_MP_REGION_CFG_0_PROG_EN_0_BIT |
    9606:	8e59                	or	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:194
    REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_REGION_CFG_0_REG_OFFSET +
    9608:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:200
        region_cfg->erase_en << FLASH_CTRL_MP_REGION_CFG_0_ERASE_EN_0_BIT |
    960a:	00f66533          	or	a0,a2,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:202
            << FLASH_CTRL_MP_REGION_CFG_0_SCRAMBLE_EN_0_BIT |
    960e:	8d4d                	or	a0,a0,a1
    9610:	00156513          	ori	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:194
    REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_REGION_CFG_0_REG_OFFSET +
    9614:	00269593          	slli	a1,a3,0x2
    9618:	41000637          	lui	a2,0x41000
    961c:	04860613          	addi	a2,a2,72 # 41000048 <_flash_header+0x21000048>
    9620:	95b2                	add	a1,a1,a2
    9622:	a089                	j	9664 <flash_cfg_region+0x88>
    9624:	410005b7          	lui	a1,0x41000
    9628:	04858593          	addi	a1,a1,72 # 41000048 <_flash_header+0x21000048>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:206
        region_cfg->rd_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_RD_EN_0_BIT |
    962c:	4910                	lw	a2,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:207
        region_cfg->prog_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_PROG_EN_0_BIT |
    962e:	4954                	lw	a3,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:208
        region_cfg->erase_en
    9630:	4d18                	lw	a4,24(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:210
        region_cfg->scramble_en
    9632:	4d5c                	lw	a5,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:206
        region_cfg->rd_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_RD_EN_0_BIT |
    9634:	0606                	slli	a2,a2,0x1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:207
        region_cfg->prog_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_PROG_EN_0_BIT |
    9636:	068a                	slli	a3,a3,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:209
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_ERASE_EN_0_BIT |
    9638:	070e                	slli	a4,a4,0x3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:211
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_SCRAMBLE_EN_0_BIT |
    963a:	0792                	slli	a5,a5,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:207
        region_cfg->prog_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_PROG_EN_0_BIT |
    963c:	8e55                	or	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:209
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_ERASE_EN_0_BIT |
    963e:	8e59                	or	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:214
    bank_sel = region_cfg->base / flash_get_pages_per_bank();
    9640:	4154                	lw	a3,4(a0)
    9642:	4118                	lw	a4,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:211
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_SCRAMBLE_EN_0_BIT |
    9644:	00f66533          	or	a0,a2,a5
    9648:	00156513          	ori	a0,a0,1
    964c:	0ff00793          	li	a5,255
    9650:	00271613          	slli	a2,a4,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:220
      REG32(FLASH_CTRL0_BASE_ADDR +
    9654:	95b2                	add	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:215
    if (bank_sel == FLASH_BANK_0) {
    9656:	00d7e563          	bltu	a5,a3,9660 <flash_cfg_region+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:216
      REG32(FLASH_CTRL0_BASE_ADDR +
    965a:	04c58593          	addi	a1,a1,76
    965e:	a019                	j	9664 <flash_cfg_region+0x88>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:220
      REG32(FLASH_CTRL0_BASE_ADDR +
    9660:	0b458593          	addi	a1,a1,180
    9664:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:225
}
    9666:	8082                	ret

00009668 <flash_get_pages_per_bank>:
flash_get_pages_per_bank():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:230
  return FLASH_CTRL_PARAM_REG_PAGES_PER_BANK;
    9668:	10000513          	li	a0,256
    966c:	8082                	ret

0000966e <flash_get_banks>:
flash_get_banks():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:227
uint32_t flash_get_banks(void) { return FLASH_CTRL_PARAM_REG_NUM_BANKS; }
    966e:	4509                	li	a0,2
    9670:	8082                	ret

00009672 <flash_get_words_per_page>:
flash_get_words_per_page():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:234
  return FLASH_CTRL_PARAM_WORDS_PER_PAGE;
    9672:	10000513          	li	a0,256
    9676:	8082                	ret

00009678 <flash_get_page_size>:
flash_get_page_size():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:239

uint32_t flash_get_page_size(void) { return FLASH_CTRL_PARAM_BYTES_PER_PAGE; }
    9678:	6505                	lui	a0,0x1
    967a:	80050513          	addi	a0,a0,-2048 # 800 <test_status_set.kLogFields.2+0x5e4>
    967e:	8082                	ret

00009680 <flash_get_word_size>:
flash_get_word_size():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:241

uint32_t flash_get_word_size(void) { return FLASH_CTRL_PARAM_BYTES_PER_WORD; }
    9680:	4521                	li	a0,8
    9682:	8082                	ret

00009684 <flash_write_scratch_reg>:
flash_write_scratch_reg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:243

void flash_write_scratch_reg(uint32_t value) {
    9684:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:244
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_SCRATCH_REG_OFFSET) = value;
    9688:	18a5a023          	sw	a0,384(a1) # 41000180 <_flash_header+0x21000180>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:245
}
    968c:	8082                	ret

0000968e <flash_read_scratch_reg>:
flash_read_scratch_reg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:247

uint32_t flash_read_scratch_reg(void) {
    968e:	41000537          	lui	a0,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:248
  return REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_SCRATCH_REG_OFFSET);
    9692:	18052503          	lw	a0,384(a0) # 41000180 <_flash_header+0x21000180>
    9696:	8082                	ret

00009698 <flash_get_init_status>:
flash_get_init_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:251
}

bool flash_get_init_status(void) {
    9698:	41000537          	lui	a0,0x41000
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    969c:	14852503          	lw	a0,328(a0) # 41000148 <_flash_header+0x21000148>
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    96a0:	8941                	andi	a0,a0,16
    96a2:	8111                	srli	a0,a0,0x4
flash_get_init_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:253
  mmio_region_t flash_base = mmio_region_from_addr(FLASH_CTRL0_BASE_ADDR);
  return mmio_region_get_bit32(flash_base, FLASH_CTRL_STATUS_REG_OFFSET,
    96a4:	8082                	ret

000096a6 <flash_init>:
flash_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:257
                               FLASH_CTRL_STATUS_INIT_WIP_BIT);
}

void flash_init(void) {
    96a6:	41000537          	lui	a0,0x41000
    96aa:	4585                	li	a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    96ac:	c90c                	sw	a1,16(a0)
flash_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:260
  mmio_region_t flash_base = mmio_region_from_addr(FLASH_CTRL0_BASE_ADDR);
  mmio_region_write32(flash_base, FLASH_CTRL_INIT_REG_OFFSET, 1);
}
    96ae:	8082                	ret

000096b0 <pinmux_init>:
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:29
    reg_value++;
    reg_offset += 4;
  }
}

void pinmux_init(void) {
    96b0:	4509                	li	a0,2
    96b2:	404605b7          	lui	a1,0x40460
    96b6:	0dc58593          	addi	a1,a1,220 # 404600dc <_flash_header+0x204600dc>
    96ba:	02200613          	li	a2,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    96be:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
    96c0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
    96c2:	0591                	addi	a1,a1,4
    96c4:	fec51de3          	bne	a0,a2,96be <pinmux_init+0xe>
    96c8:	450d                	li	a0,3
    96ca:	404605b7          	lui	a1,0x40460
    96ce:	27458593          	addi	a1,a1,628 # 40460274 <_flash_header+0x20460274>
    96d2:	02300613          	li	a2,35
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    96d6:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
    96d8:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
    96da:	0591                	addi	a1,a1,4
    96dc:	fec51de3          	bne	a0,a2,96d6 <pinmux_init+0x26>
    96e0:	40460537          	lui	a0,0x40460
    96e4:	02200593          	li	a1,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    96e8:	18b52223          	sw	a1,388(a0) # 40460184 <_flash_header+0x20460184>
    96ec:	02d00593          	li	a1,45
    96f0:	2eb52c23          	sw	a1,760(a0)
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:63
  // We've got one insel configuration field per register. Hence, we have to
  // convert the enumeration index into a byte address using << 2.
  reg_offset = kTopEarlgreyPinmuxMioOutIoc11 << 2;
  mask = PINMUX_MIO_OUTSEL_0_OUT_0_MASK;
  mmio_region_write32(reg32, reg_offset, reg_value & mask);
}
    96f4:	8082                	ret
	...

000096f8 <dif_gpio_init>:
dif_gpio_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:103

  return kDifGpioOk;
}

dif_gpio_result_t dif_gpio_init(dif_gpio_params_t params, dif_gpio_t *gpio) {
  if (gpio == NULL) {
    96f8:	c581                	beqz	a1,9700 <dif_gpio_init+0x8>
    96fa:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:107
    return kDifGpioBadArg;
  }

  gpio->params = params;
    96fc:	c188                	sw	a0,0(a1)
    96fe:	a011                	j	9702 <dif_gpio_init+0xa>
    9700:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:110

  return kDifGpioOk;
}
    9702:	8532                	mv	a0,a2
    9704:	8082                	ret

00009706 <dif_gpio_reset>:
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:113

dif_gpio_result_t dif_gpio_reset(const dif_gpio_t *gpio) {
  if (gpio == NULL) {
    9706:	cd15                	beqz	a0,9742 <dif_gpio_reset+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:119
    return kDifGpioBadArg;
  }

  // We don't need to write to `GPIO_MASKED_OE_*` and `GPIO_MASKED_OUT_*`
  // since we directly reset `GPIO_DIRECT_OE` and `GPIO_DIRECT_OUT` below.
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
    9708:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    970a:	0005a223          	sw	zero,4(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:120
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, 0);
    970e:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9710:	0005ae23          	sw	zero,28(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:121
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET, 0);
    9714:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9716:	0005a823          	sw	zero,16(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:122
  mmio_region_write32(gpio->params.base_addr,
    971a:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    971c:	0205a423          	sw	zero,40(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:124
                      GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
    9720:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9722:	0205a623          	sw	zero,44(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:126
                      GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
    9726:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9728:	0205a823          	sw	zero,48(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:128
                      GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
    972c:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    972e:	0205aa23          	sw	zero,52(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:130
                      GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
    9732:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9734:	0205ac23          	sw	zero,56(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:133
                      GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET, 0);
  // Also clear all pending interrupts
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
    9738:	410c                	lw	a1,0(a0)
    973a:	4501                	li	a0,0
    973c:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    973e:	c190                	sw	a2,0(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:137
                      0xFFFFFFFFu);

  return kDifGpioOk;
}
    9740:	8082                	ret
    9742:	4509                	li	a0,2
    9744:	8082                	ret

00009746 <dif_gpio_irq_is_pending>:
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:141

dif_gpio_result_t dif_gpio_irq_is_pending(const dif_gpio_t *gpio,
                                          dif_gpio_pin_t pin,
                                          bool *is_pending) {
    9746:	86aa                	mv	a3,a0
    9748:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:142
  if (gpio == NULL || is_pending == NULL) {
    974a:	ca91                	beqz	a3,975e <dif_gpio_irq_is_pending+0x18>
    974c:	ca09                	beqz	a2,975e <dif_gpio_irq_is_pending+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
    return kDifGpioBadArg;
  }

  *is_pending = mmio_region_get_bit32(gpio->params.base_addr,
    974e:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9750:	4114                	lw	a3,0(a0)
    9752:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    9754:	00b6d5b3          	srl	a1,a3,a1
    9758:	8985                	andi	a1,a1,1
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
    975a:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:150
                                      GPIO_INTR_STATE_REG_OFFSET, pin);

  return kDifGpioOk;
}
    975e:	8082                	ret

00009760 <dif_gpio_irq_is_pending_all>:
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:153

dif_gpio_result_t dif_gpio_irq_is_pending_all(const dif_gpio_t *gpio,
                                              dif_gpio_state_t *is_pending) {
    9760:	862a                	mv	a2,a0
    9762:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:154
  if (gpio == NULL || is_pending == NULL) {
    9764:	c611                	beqz	a2,9770 <dif_gpio_irq_is_pending_all+0x10>
    9766:	c589                	beqz	a1,9770 <dif_gpio_irq_is_pending_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:159
    return kDifGpioBadArg;
  }

  *is_pending =
      mmio_region_read32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET);
    9768:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    976a:	4110                	lw	a2,0(a0)
    976c:	4501                	li	a0,0
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:158
  *is_pending =
    976e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:162

  return kDifGpioOk;
}
    9770:	8082                	ret

00009772 <dif_gpio_irq_acknowledge>:
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:166

dif_gpio_result_t dif_gpio_irq_acknowledge(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin) {
  if (gpio == NULL) {
    9772:	c901                	beqz	a0,9782 <dif_gpio_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:170
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
    9774:	4110                	lw	a2,0(a0)
    9776:	4501                	li	a0,0
    9778:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
    977a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    977e:	c20c                	sw	a1,0(a2)
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:174
                      index_to_mask(pin));

  return kDifGpioOk;
}
    9780:	8082                	ret
    9782:	4509                	li	a0,2
    9784:	8082                	ret

00009786 <dif_gpio_irq_get_enabled>:
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:178

dif_gpio_result_t dif_gpio_irq_get_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t *state) {
    9786:	86aa                	mv	a3,a0
    9788:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:179
  if (gpio == NULL || state == NULL) {
    978a:	ca89                	beqz	a3,979c <dif_gpio_irq_get_enabled+0x16>
    978c:	ca01                	beqz	a2,979c <dif_gpio_irq_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:183
    return kDifGpioBadArg;
  }

  bool is_enabled = mmio_region_get_bit32(gpio->params.base_addr,
    978e:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9790:	4154                	lw	a3,4(a0)
    9792:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    9794:	00b6d5b3          	srl	a1,a3,a1
    9798:	8985                	andi	a1,a1,1
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:185
                                          GPIO_INTR_ENABLE_REG_OFFSET, pin);
  *state = is_enabled ? kDifGpioToggleEnabled : kDifGpioToggleDisabled;
    979a:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:188

  return kDifGpioOk;
}
    979c:	8082                	ret

0000979e <dif_gpio_irq_set_enabled>:
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:192

dif_gpio_result_t dif_gpio_irq_set_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t state) {
    979e:	86aa                	mv	a3,a0
    97a0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:193
  if (gpio == NULL) {
    97a2:	c695                	beqz	a3,97ce <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:197
    return kDifGpioBadArg;
  }

  switch (state) {
    97a4:	ca19                	beqz	a2,97ba <dif_gpio_irq_set_enabled+0x1c>
    97a6:	4705                	li	a4,1
    97a8:	02e61363          	bne	a2,a4,97ce <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:199
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_bit32(gpio->params.base_addr,
    97ac:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    97ae:	4254                	lw	a3,4(a2)
    97b0:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    97b2:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    97b6:	8dd5                	or	a1,a1,a3
    97b8:	a811                	j	97cc <dif_gpio_irq_set_enabled+0x2e>
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:203
                                      GPIO_INTR_ENABLE_REG_OFFSET, pin);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_bit32(gpio->params.base_addr,
    97ba:	4290                	lw	a2,0(a3)
    97bc:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    97be:	4254                	lw	a3,4(a2)
    97c0:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    97c2:	00b715b3          	sll	a1,a4,a1
    97c6:	fff5c593          	not	a1,a1
    97ca:	8df5                	and	a1,a1,a3
    97cc:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:211
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
    97ce:	8082                	ret

000097d0 <dif_gpio_irq_set_enabled_masked>:
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:215

dif_gpio_result_t dif_gpio_irq_set_enabled_masked(const dif_gpio_t *gpio,
                                                  dif_gpio_mask_t mask,
                                                  dif_gpio_toggle_t state) {
    97d0:	86aa                	mv	a3,a0
    97d2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:216
  if (gpio == NULL) {
    97d4:	c28d                	beqz	a3,97f6 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:220
    return kDifGpioBadArg;
  }

  switch (state) {
    97d6:	ca09                	beqz	a2,97e8 <dif_gpio_irq_set_enabled_masked+0x18>
    97d8:	4705                	li	a4,1
    97da:	00e61e63          	bne	a2,a4,97f6 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:222
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
    97de:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    97e0:	4254                	lw	a3,4(a2)
    97e2:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    97e4:	8dd5                	or	a1,a1,a3
    97e6:	a039                	j	97f4 <dif_gpio_irq_set_enabled_masked+0x24>
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:226
                                       GPIO_INTR_ENABLE_REG_OFFSET, mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
    97e8:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    97ea:	4254                	lw	a3,4(a2)
    97ec:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    97ee:	fff5c593          	not	a1,a1
    97f2:	8df5                	and	a1,a1,a3
    97f4:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:234
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
    97f6:	8082                	ret

000097f8 <dif_gpio_irq_force>:
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:238

dif_gpio_result_t dif_gpio_irq_force(const dif_gpio_t *gpio,
                                     dif_gpio_pin_t pin) {
  if (gpio == NULL) {
    97f8:	c901                	beqz	a0,9808 <dif_gpio_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:242
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_TEST_REG_OFFSET,
    97fa:	4110                	lw	a2,0(a0)
    97fc:	4501                	li	a0,0
    97fe:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
    9800:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9804:	c60c                	sw	a1,8(a2)
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:246
                      index_to_mask(pin));

  return kDifGpioOk;
}
    9806:	8082                	ret
    9808:	4509                	li	a0,2
    980a:	8082                	ret

0000980c <dif_gpio_irq_disable_all>:
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:250

dif_gpio_result_t dif_gpio_irq_disable_all(const dif_gpio_t *gpio,
                                           dif_gpio_state_t *snapshot) {
  if (gpio == NULL) {
    980c:	c911                	beqz	a0,9820 <dif_gpio_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:254
    return kDifGpioBadArg;
  }

  if (snapshot != NULL) {
    980e:	c581                	beqz	a1,9816 <dif_gpio_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:256
    *snapshot =
        mmio_region_read32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET);
    9810:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9812:	4250                	lw	a2,4(a2)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:255
    *snapshot =
    9814:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:258
  }
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
    9816:	410c                	lw	a1,0(a0)
    9818:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    981a:	0005a223          	sw	zero,4(a1)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:261

  return kDifGpioOk;
}
    981e:	8082                	ret
    9820:	4509                	li	a0,2
    9822:	8082                	ret

00009824 <dif_gpio_irq_restore_all>:
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:264

dif_gpio_result_t dif_gpio_irq_restore_all(const dif_gpio_t *gpio,
                                           const dif_gpio_state_t *snapshot) {
    9824:	862a                	mv	a2,a0
    9826:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:265
  if (gpio == NULL || snapshot == NULL) {
    9828:	c611                	beqz	a2,9834 <dif_gpio_irq_restore_all+0x10>
    982a:	c589                	beqz	a1,9834 <dif_gpio_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:270
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
    982c:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:269
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
    982e:	4210                	lw	a2,0(a2)
    9830:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9832:	c24c                	sw	a1,4(a2)
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:273

  return kDifGpioOk;
}
    9834:	8082                	ret

00009836 <dif_gpio_irq_set_trigger>:
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:278

dif_gpio_result_t dif_gpio_irq_set_trigger(const dif_gpio_t *gpio,
                                           dif_gpio_mask_t mask,
                                           dif_gpio_irq_trigger_t trigger) {
  if (gpio == NULL) {
    9836:	c529                	beqz	a0,9880 <dif_gpio_irq_set_trigger+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:283
    return kDifGpioBadArg;
  }

  // Disable all interrupt triggers for the given mask.
  mmio_region_nonatomic_clear_mask32(
    9838:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    983a:	5698                	lw	a4,40(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    983c:	fff5c793          	not	a5,a1
    9840:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9842:	d698                	sw	a4,40(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:285
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
    9844:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9846:	56d8                	lw	a4,44(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    9848:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    984a:	d6d8                	sw	a4,44(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:287
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
    984c:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    984e:	5a98                	lw	a4,48(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    9850:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9852:	da98                	sw	a4,48(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:289
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
    9854:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9856:	5ad8                	lw	a4,52(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    9858:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    985a:	dad8                	sw	a4,52(a3)
    985c:	4709                	li	a4,2
    985e:	4685                	li	a3,1
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);

  switch (trigger) {
    9860:	02c75263          	bge	a4,a2,9884 <dif_gpio_irq_set_trigger+0x4e>
    9864:	4711                	li	a4,4
    9866:	02c74763          	blt	a4,a2,9894 <dif_gpio_irq_set_trigger+0x5e>
    986a:	470d                	li	a4,3
    986c:	02e60e63          	beq	a2,a4,98a8 <dif_gpio_irq_set_trigger+0x72>
    9870:	4711                	li	a4,4
    9872:	06e61663          	bne	a2,a4,98de <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:312
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
                                       GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeRisingFalling:
      mmio_region_nonatomic_set_mask32(
    9876:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9878:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    987a:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    987c:	d614                	sw	a3,40(a2)
    987e:	a81d                	j	98b4 <dif_gpio_irq_set_trigger+0x7e>
    9880:	4689                	li	a3,2
    9882:	a8b1                	j	98de <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
  switch (trigger) {
    9884:	ce15                	beqz	a2,98c0 <dif_gpio_irq_set_trigger+0x8a>
    9886:	4705                	li	a4,1
    9888:	02e60663          	beq	a2,a4,98b4 <dif_gpio_irq_set_trigger+0x7e>
    988c:	4709                	li	a4,2
    988e:	04e60363          	beq	a2,a4,98d4 <dif_gpio_irq_set_trigger+0x9e>
    9892:	a0b1                	j	98de <dif_gpio_irq_set_trigger+0xa8>
    9894:	4715                	li	a4,5
    9896:	02e60b63          	beq	a2,a4,98cc <dif_gpio_irq_set_trigger+0x96>
    989a:	4719                	li	a4,6
    989c:	04e61163          	bne	a2,a4,98de <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:325
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
      mmio_region_nonatomic_set_mask32(
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeFallingLevelHigh:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
    98a0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    98a2:	5654                	lw	a3,44(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    98a4:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    98a6:	d654                	sw	a3,44(a2)
    98a8:	4108                	lw	a0,0(a0)
    98aa:	5910                	lw	a2,48(a0)
    98ac:	4681                	li	a3,0
    98ae:	8dd1                	or	a1,a1,a2
    98b0:	d90c                	sw	a1,48(a0)
    98b2:	a035                	j	98de <dif_gpio_irq_set_trigger+0xa8>
    98b4:	4108                	lw	a0,0(a0)
    98b6:	5550                	lw	a2,44(a0)
    98b8:	4681                	li	a3,0
    98ba:	8dd1                	or	a1,a1,a2
    98bc:	d54c                	sw	a1,44(a0)
    98be:	a005                	j	98de <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:294
      mmio_region_nonatomic_set_mask32(
    98c0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    98c2:	5510                	lw	a2,40(a0)
    98c4:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    98c6:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    98c8:	d50c                	sw	a1,40(a0)
    98ca:	a811                	j	98de <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:319
      mmio_region_nonatomic_set_mask32(
    98cc:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    98ce:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    98d0:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    98d2:	d614                	sw	a3,40(a2)
    98d4:	4108                	lw	a0,0(a0)
    98d6:	5950                	lw	a2,52(a0)
    98d8:	4681                	li	a3,0
    98da:	8dd1                	or	a1,a1,a2
    98dc:	d94c                	sw	a1,52(a0)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:337
    default:
      return kDifGpioError;
  }

  return kDifGpioOk;
}
    98de:	8536                	mv	a0,a3
    98e0:	8082                	ret

000098e2 <dif_gpio_read_all>:
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:340

dif_gpio_result_t dif_gpio_read_all(const dif_gpio_t *gpio,
                                    dif_gpio_state_t *state) {
    98e2:	862a                	mv	a2,a0
    98e4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:341
  if (gpio == NULL || state == NULL) {
    98e6:	c611                	beqz	a2,98f2 <dif_gpio_read_all+0x10>
    98e8:	c589                	beqz	a1,98f2 <dif_gpio_read_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
    return kDifGpioBadArg;
  }

  *state = mmio_region_read32(gpio->params.base_addr, GPIO_DATA_IN_REG_OFFSET);
    98ea:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    98ec:	4550                	lw	a2,12(a0)
    98ee:	4501                	li	a0,0
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
    98f0:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:348

  return kDifGpioOk;
}
    98f2:	8082                	ret

000098f4 <dif_gpio_read>:
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:351

dif_gpio_result_t dif_gpio_read(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                bool *state) {
    98f4:	86aa                	mv	a3,a0
    98f6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:352
  if (gpio == NULL || state == NULL) {
    98f8:	ca91                	beqz	a3,990c <dif_gpio_read+0x18>
    98fa:	ca09                	beqz	a2,990c <dif_gpio_read+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
    return kDifGpioBadArg;
  }

  *state = mmio_region_get_bit32(gpio->params.base_addr,
    98fc:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    98fe:	4554                	lw	a3,12(a0)
    9900:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    9902:	00b6d5b3          	srl	a1,a3,a1
    9906:	8985                	andi	a1,a1,1
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
    9908:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:360
                                 GPIO_DATA_IN_REG_OFFSET, pin);

  return kDifGpioOk;
}
    990c:	8082                	ret

0000990e <dif_gpio_write_all>:
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:364

dif_gpio_result_t dif_gpio_write_all(const dif_gpio_t *gpio,
                                     dif_gpio_state_t state) {
  if (gpio == NULL) {
    990e:	c509                	beqz	a0,9918 <dif_gpio_write_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:368
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET,
    9910:	4110                	lw	a2,0(a0)
    9912:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9914:	ca0c                	sw	a1,16(a2)
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:372
                      state);

  return kDifGpioOk;
}
    9916:	8082                	ret
    9918:	4509                	li	a0,2
    991a:	8082                	ret

0000991c <dif_gpio_write>:
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:86
  if (gpio == NULL) {
    991c:	c505                	beqz	a0,9944 <dif_gpio_write+0x28>
    991e:	4741                	li	a4,16
    9920:	46d1                	li	a3,20
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
    9922:	00e5e363          	bltu	a1,a4,9928 <dif_gpio_write+0xc>
    9926:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
    9928:	89bd                	andi	a1,a1,15
    992a:	4705                	li	a4,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
    992c:	00b71733          	sll	a4,a4,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
    9930:	01071593          	slli	a1,a4,0x10
    9934:	e211                	bnez	a2,9938 <dif_gpio_write+0x1c>
    9936:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
    9938:	4110                	lw	a2,0(a0)
    993a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
    993c:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    993e:	9636                	add	a2,a2,a3
    9940:	c20c                	sw	a1,0(a2)
dif_gpio_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:376

dif_gpio_result_t dif_gpio_write(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                 bool state) {
  return gpio_masked_bit_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
    9942:	8082                	ret
    9944:	4509                	li	a0,2
    9946:	8082                	ret

00009948 <dif_gpio_write_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
    9948:	c50d                	beqz	a0,9972 <dif_gpio_write_masked+0x2a>
    994a:	66c1                	lui	a3,0x10
    994c:	fff68713          	addi	a4,a3,-1 # ffff <_heap_size+0x1fff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
    9950:	00e5f7b3          	and	a5,a1,a4
    9954:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
    9956:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
    9958:	c791                	beqz	a5,9964 <dif_gpio_write_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
    995a:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
    995c:	05c2                	slli	a1,a1,0x10
    995e:	8f71                	and	a4,a4,a2
    9960:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9962:	cbcc                	sw	a1,20(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
    9964:	ca89                	beqz	a3,9976 <dif_gpio_write_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
    9966:	410c                	lw	a1,0(a0)
    9968:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
    996a:	8241                	srli	a2,a2,0x10
    996c:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    996e:	cd90                	sw	a2,24(a1)
dif_gpio_write_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:383
}

dif_gpio_result_t dif_gpio_write_masked(const dif_gpio_t *gpio,
                                        dif_gpio_mask_t mask,
                                        dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
    9970:	8082                	ret
    9972:	4509                	li	a0,2
    9974:	8082                	ret
    9976:	4501                	li	a0,0
    9978:	8082                	ret

0000997a <dif_gpio_output_set_enabled_all>:
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:389
                           GPIO_MASKED_OUT_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_output_set_enabled_all(const dif_gpio_t *gpio,
                                                  dif_gpio_state_t state) {
  if (gpio == NULL) {
    997a:	c509                	beqz	a0,9984 <dif_gpio_output_set_enabled_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:393
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, state);
    997c:	4110                	lw	a2,0(a0)
    997e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9980:	ce4c                	sw	a1,28(a2)
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:396

  return kDifGpioOk;
}
    9982:	8082                	ret
    9984:	4509                	li	a0,2
    9986:	8082                	ret

00009988 <dif_gpio_output_set_enabled>:
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:401

dif_gpio_result_t dif_gpio_output_set_enabled(const dif_gpio_t *gpio,
                                              dif_gpio_pin_t pin,
                                              dif_gpio_toggle_t state) {
  if (gpio == NULL) {
    9988:	c51d                	beqz	a0,99b6 <dif_gpio_output_set_enabled+0x2e>
    998a:	4741                	li	a4,16
    998c:	02000693          	li	a3,32
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
    9990:	00e5e463          	bltu	a1,a4,9998 <dif_gpio_output_set_enabled+0x10>
    9994:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
    9998:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
    999a:	89bd                	andi	a1,a1,15
    999c:	4785                	li	a5,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
    999e:	00b797b3          	sll	a5,a5,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
    99a2:	01079593          	slli	a1,a5,0x10
    99a6:	c211                	beqz	a2,99aa <dif_gpio_output_set_enabled+0x22>
    99a8:	873e                	mv	a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
    99aa:	4110                	lw	a2,0(a0)
    99ac:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
    99ae:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    99b0:	9636                	add	a2,a2,a3
    99b2:	c20c                	sw	a1,0(a2)
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:409

  return gpio_masked_bit_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
                               GPIO_MASKED_OE_UPPER_REG_OFFSET, pin, state);

  return kDifGpioOk;
}
    99b4:	8082                	ret
    99b6:	4509                	li	a0,2
    99b8:	8082                	ret

000099ba <dif_gpio_output_set_enabled_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
    99ba:	c50d                	beqz	a0,99e4 <dif_gpio_output_set_enabled_masked+0x2a>
    99bc:	66c1                	lui	a3,0x10
    99be:	fff68713          	addi	a4,a3,-1 # ffff <_heap_size+0x1fff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
    99c2:	00e5f7b3          	and	a5,a1,a4
    99c6:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
    99c8:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
    99ca:	c791                	beqz	a5,99d6 <dif_gpio_output_set_enabled_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
    99cc:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
    99ce:	05c2                	slli	a1,a1,0x10
    99d0:	8f71                	and	a4,a4,a2
    99d2:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    99d4:	d38c                	sw	a1,32(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
    99d6:	ca89                	beqz	a3,99e8 <dif_gpio_output_set_enabled_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
    99d8:	410c                	lw	a1,0(a0)
    99da:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
    99dc:	8241                	srli	a2,a2,0x10
    99de:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    99e0:	d1d0                	sw	a2,36(a1)
dif_gpio_output_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:414

dif_gpio_result_t dif_gpio_output_set_enabled_masked(const dif_gpio_t *gpio,
                                                     dif_gpio_mask_t mask,
                                                     dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
    99e2:	8082                	ret
    99e4:	4509                	li	a0,2
    99e6:	8082                	ret
    99e8:	4501                	li	a0,0
    99ea:	8082                	ret

000099ec <dif_gpio_input_noise_filter_set_enabled>:
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:419
                           GPIO_MASKED_OE_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_input_noise_filter_set_enabled(
    const dif_gpio_t *gpio, dif_gpio_mask_t mask, dif_gpio_toggle_t state) {
    99ec:	86aa                	mv	a3,a0
    99ee:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:420
  if (gpio == NULL) {
    99f0:	c28d                	beqz	a3,9a12 <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:424
    return kDifGpioBadArg;
  }

  switch (state) {
    99f2:	ca09                	beqz	a2,9a04 <dif_gpio_input_noise_filter_set_enabled+0x18>
    99f4:	4705                	li	a4,1
    99f6:	00e61e63          	bne	a2,a4,9a12 <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:426
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
    99fa:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    99fc:	5e14                	lw	a3,56(a2)
    99fe:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9a00:	8dd5                	or	a1,a1,a3
    9a02:	a039                	j	9a10 <dif_gpio_input_noise_filter_set_enabled+0x24>
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:431
                                       GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
    9a04:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9a06:	5e14                	lw	a3,56(a2)
    9a08:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9a0a:	fff5c593          	not	a1,a1
    9a0e:	8df5                	and	a1,a1,a3
    9a10:	de0c                	sw	a1,56(a2)
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:440
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
    9a12:	8082                	ret

00009a14 <dif_spi_device_init>:
dif_spi_device_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:15

const uint16_t kDifSpiDeviceBufferLen = SPI_DEVICE_BUFFER_SIZE_BYTES;

dif_spi_device_result_t dif_spi_device_init(dif_spi_device_params_t params,
                                            dif_spi_device_t *spi) {
  if (spi == NULL) {
    9a14:	c591                	beqz	a1,9a20 <dif_spi_device_init+0xc>
    9a16:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:20
    return kDifSpiDeviceBadArg;
  }

  // This ensures all other fields are zeroed.
  *spi = (dif_spi_device_t){.params = params};
    9a18:	c188                	sw	a0,0(a1)
    9a1a:	0005a223          	sw	zero,4(a1)
    9a1e:	a011                	j	9a22 <dif_spi_device_init+0xe>
    9a20:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:23

  return kDifSpiDeviceOk;
}
    9a22:	8532                	mv	a0,a2
    9a24:	8082                	ret

00009a26 <dif_spi_device_configure>:
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:48

  return val;
}

dif_spi_device_result_t dif_spi_device_configure(
    dif_spi_device_t *spi, dif_spi_device_config_t config) {
    9a26:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:49
  if (spi == NULL) {
    9a28:	c935                	beqz	a0,9a9c <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:59
  // function argument checks, to avoid a halfway-configured SPI.

  uint32_t device_config = build_control_word(config);

  uint16_t rx_fifo_start = 0x0;
  uint16_t rx_fifo_end = config.rx_fifo_len - 1;
    9a2a:	0125d683          	lhu	a3,18(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:61
  uint16_t tx_fifo_start = rx_fifo_end + 1;
  uint16_t tx_fifo_end = tx_fifo_start + config.tx_fifo_len - 1;
    9a2e:	0145d703          	lhu	a4,20(a1)
    9a32:	fff68893          	addi	a7,a3,-1 # fffeffff <_flash_header+0xdffeffff>
    9a36:	00e88833          	add	a6,a7,a4
    9a3a:	67bd                	lui	a5,0xf
    9a3c:	00f877b3          	and	a5,a6,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:62
  if (tx_fifo_end >= kDifSpiDeviceBufferLen) {
    9a40:	83b1                	srli	a5,a5,0xc
    9a42:	efa9                	bnez	a5,9a9c <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
    9a44:	41d0                	lw	a2,4(a1)
    9a46:	419c                	lw	a5,0(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:36
                             config.data_phase == kDifSpiDeviceEdgePositive);
    9a48:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9a4c:	00161293          	slli	t0,a2,0x1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
    9a50:	4590                	lw	a2,8(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:34
                           config.clock_polarity == kDifSpiDeviceEdgeNegative);
    9a52:	17fd                	addi	a5,a5,-1
    9a54:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9a58:	00f2e2b3          	or	t0,t0,a5
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
    9a5c:	167d                	addi	a2,a2,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
    9a5e:	45dc                	lw	a5,12(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
    9a60:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9a64:	060a                	slli	a2,a2,0x2
    9a66:	00c2e633          	or	a2,t0,a2
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
    9a6a:	17fd                	addi	a5,a5,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
    9a6c:	0105c583          	lbu	a1,16(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
    9a70:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9a74:	078e                	slli	a5,a5,0x3
    9a76:	8e5d                	or	a2,a2,a5
    9a78:	05a2                	slli	a1,a1,0x8
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:82
      tx_fifo_bounds, SPI_DEVICE_TXF_ADDR_LIMIT_FIELD, tx_fifo_end);

  spi->rx_fifo_len = config.rx_fifo_len;
  spi->tx_fifo_len = config.tx_fifo_len;

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_CFG_REG_OFFSET,
    9a7a:	411c                	lw	a5,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9a7c:	8dd1                	or	a1,a1,a2
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:79
  spi->rx_fifo_len = config.rx_fifo_len;
    9a7e:	00d51223          	sh	a3,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:80
  spi->tx_fifo_len = config.tx_fifo_len;
    9a82:	00e51323          	sh	a4,6(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9a86:	cb8c                	sw	a1,16(a5)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:84
                      device_config);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_RXF_ADDR_REG_OFFSET,
    9a88:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9a8a:	01089613          	slli	a2,a7,0x10
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9a8e:	d590                	sw	a2,40(a1)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:86
                      rx_fifo_bounds);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_TXF_ADDR_REG_OFFSET,
    9a90:	4108                	lw	a0,0(a0)
    9a92:	4601                	li	a2,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9a94:	01081593          	slli	a1,a6,0x10
    9a98:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9a9a:	d54c                	sw	a1,44(a0)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:90
                      tx_fifo_bounds);

  return kDifSpiDeviceOk;
}
    9a9c:	8532                	mv	a0,a2
    9a9e:	8082                	ret

00009aa0 <dif_spi_device_abort>:
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:93

dif_spi_device_result_t dif_spi_device_abort(const dif_spi_device_t *spi) {
  if (spi == NULL) {
    9aa0:	cd01                	beqz	a0,9ab8 <dif_spi_device_abort+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:99
    return kDifSpiDeviceBadArg;
  }

  // Set the `abort` bit, and then spin until `abort_done` is asserted.
  uint32_t reg =
      mmio_region_read32(spi->params.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET);
    9aa2:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9aa4:	45d0                	lw	a2,12(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9aa6:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9aaa:	c5d0                	sw	a2,12(a1)
    9aac:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9aae:	4d4c                	lw	a1,28(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    9ab0:	89c1                	andi	a1,a1,16
    9ab2:	ddf5                	beqz	a1,9aae <dif_spi_device_abort+0xe>
    9ab4:	4501                	li	a0,0
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:111
        mmio_region_read32(spi->params.base_addr, SPI_DEVICE_STATUS_REG_OFFSET);
    if (bitfield_bit32_read(reg, SPI_DEVICE_STATUS_ABORT_DONE_BIT)) {
      return kDifSpiDeviceOk;
    }
  }
}
    9ab6:	8082                	ret
    9ab8:	4509                	li	a0,2
    9aba:	8082                	ret

00009abc <dif_spi_device_irq_is_pending>:
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:141
  }
  return true;
}

dif_spi_device_result_t dif_spi_device_irq_is_pending(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq, bool *is_pending) {
    9abc:	86aa                	mv	a3,a0
    9abe:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:142
  if (spi == NULL || is_pending == NULL) {
    9ac0:	ce89                	beqz	a3,9ada <dif_spi_device_irq_is_pending+0x1e>
    9ac2:	ce01                	beqz	a2,9ada <dif_spi_device_irq_is_pending+0x1e>
    9ac4:	4715                	li	a4,5
    9ac6:	00b76a63          	bltu	a4,a1,9ada <dif_spi_device_irq_is_pending+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:151
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
    9aca:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9acc:	4114                	lw	a3,0(a0)
    9ace:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
    9ad0:	00b6d5b3          	srl	a1,a3,a1
    9ad4:	8985                	andi	a1,a1,1
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:153
                                    SPI_DEVICE_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg, index);
    9ad6:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:156

  return kDifSpiDeviceOk;
}
    9ada:	8082                	ret

00009adc <dif_spi_device_irq_acknowledge>:
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:159

dif_spi_device_result_t dif_spi_device_irq_acknowledge(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq) {
    9adc:	862a                	mv	a2,a0
    9ade:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:160
  if (spi == NULL) {
    9ae0:	ca11                	beqz	a2,9af4 <dif_spi_device_irq_acknowledge+0x18>
    9ae2:	4695                	li	a3,5
    9ae4:	00b6e863          	bltu	a3,a1,9af4 <dif_spi_device_irq_acknowledge+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:170
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_STATE_REG_OFFSET,
    9ae8:	4210                	lw	a2,0(a2)
    9aea:	4501                	li	a0,0
    9aec:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9aee:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9af2:	c20c                	sw	a1,0(a2)
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:174
                      reg);

  return kDifSpiDeviceOk;
}
    9af4:	8082                	ret

00009af6 <dif_spi_device_irq_get_enabled>:
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:178

dif_spi_device_result_t dif_spi_device_irq_get_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t *state) {
    9af6:	86aa                	mv	a3,a0
    9af8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:179
  if (spi == NULL || state == NULL) {
    9afa:	ce91                	beqz	a3,9b16 <dif_spi_device_irq_get_enabled+0x20>
    9afc:	ce09                	beqz	a2,9b16 <dif_spi_device_irq_get_enabled+0x20>
    9afe:	4715                	li	a4,5
    9b00:	00b76b63          	bltu	a4,a1,9b16 <dif_spi_device_irq_get_enabled+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:188
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
    9b04:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9b06:	4154                	lw	a3,4(a0)
    9b08:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    9b0a:	00b6d5b3          	srl	a1,a3,a1
    9b0e:	8985                	andi	a1,a1,1
    9b10:	0015b593          	seqz	a1,a1
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:190
                                    SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  *state = bitfield_bit32_read(reg, index) ? kDifSpiDeviceToggleEnabled
    9b14:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:194
                                           : kDifSpiDeviceToggleDisabled;

  return kDifSpiDeviceOk;
}
    9b16:	8082                	ret

00009b18 <dif_spi_device_irq_set_enabled>:
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:198

dif_spi_device_result_t dif_spi_device_irq_set_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t state) {
    9b18:	86aa                	mv	a3,a0
    9b1a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:199
  if (spi == NULL) {
    9b1c:	c69d                	beqz	a3,9b4a <dif_spi_device_irq_set_enabled+0x32>
    9b1e:	4715                	li	a4,5
    9b20:	02b76563          	bltu	a4,a1,9b4a <dif_spi_device_irq_set_enabled+0x32>
    9b24:	4705                	li	a4,1
    9b26:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:209
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  bool flag;
  switch (state) {
    9b28:	c609                	beqz	a2,9b32 <dif_spi_device_irq_set_enabled+0x1a>
    9b2a:	4785                	li	a5,1
    9b2c:	00f61f63          	bne	a2,a5,9b4a <dif_spi_device_irq_set_enabled+0x32>
    9b30:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:220
      break;
    default:
      return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
    9b32:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9b34:	4254                	lw	a3,4(a2)
    9b36:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9b38:	00b71733          	sll	a4,a4,a1
    9b3c:	fff74713          	not	a4,a4
    9b40:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9b42:	00b795b3          	sll	a1,a5,a1
    9b46:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9b48:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:227
  reg = bitfield_bit32_write(reg, index, flag);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      reg);

  return kDifSpiDeviceOk;
}
    9b4a:	8082                	ret

00009b4c <dif_spi_device_irq_force>:
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:230

dif_spi_device_result_t dif_spi_device_irq_force(const dif_spi_device_t *spi,
                                                 dif_spi_device_irq_t irq) {
    9b4c:	862a                	mv	a2,a0
    9b4e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:231
  if (spi == NULL) {
    9b50:	ca11                	beqz	a2,9b64 <dif_spi_device_irq_force+0x18>
    9b52:	4695                	li	a3,5
    9b54:	00b6e863          	bltu	a3,a1,9b64 <dif_spi_device_irq_force+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:241
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_TEST_REG_OFFSET,
    9b58:	4210                	lw	a2,0(a2)
    9b5a:	4501                	li	a0,0
    9b5c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9b5e:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9b62:	c60c                	sw	a1,8(a2)
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:245
                      reg);

  return kDifSpiDeviceOk;
}
    9b64:	8082                	ret

00009b66 <dif_spi_device_irq_disable_all>:
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:249

dif_spi_device_result_t dif_spi_device_irq_disable_all(
    const dif_spi_device_t *spi, dif_spi_device_irq_snapshot_t *snapshot) {
  if (spi == NULL) {
    9b66:	c911                	beqz	a0,9b7a <dif_spi_device_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:253
    return kDifSpiDeviceBadArg;
  }

  if (snapshot != NULL) {
    9b68:	c581                	beqz	a1,9b70 <dif_spi_device_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
    *snapshot = mmio_region_read32(spi->params.base_addr,
    9b6a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9b6c:	4250                	lw	a2,4(a2)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
    9b6e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:258
                                   SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
    9b70:	410c                	lw	a1,0(a0)
    9b72:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9b74:	0005a223          	sw	zero,4(a1)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:262
                      0);

  return kDifSpiDeviceOk;
}
    9b78:	8082                	ret
    9b7a:	4509                	li	a0,2
    9b7c:	8082                	ret

00009b7e <dif_spi_device_irq_restore_all>:
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:266

dif_spi_device_result_t dif_spi_device_irq_restore_all(
    const dif_spi_device_t *spi,
    const dif_spi_device_irq_snapshot_t *snapshot) {
    9b7e:	862a                	mv	a2,a0
    9b80:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:267
  if (spi == NULL || snapshot == NULL) {
    9b82:	c611                	beqz	a2,9b8e <dif_spi_device_irq_restore_all+0x10>
    9b84:	c589                	beqz	a1,9b8e <dif_spi_device_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:272
    return kDifSpiDeviceBadArg;
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
    9b86:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:271
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
    9b88:	4210                	lw	a2,0(a2)
    9b8a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9b8c:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:275

  return kDifSpiDeviceOk;
}
    9b8e:	8082                	ret

00009b90 <dif_spi_device_set_irq_levels>:
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:279

dif_spi_device_result_t dif_spi_device_set_irq_levels(
    const dif_spi_device_t *spi, uint16_t rx_level, uint16_t tx_level) {
  if (spi == NULL) {
    9b90:	c519                	beqz	a0,9b9e <dif_spi_device_set_irq_levels+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:288
  uint32_t compressed_limit = 0;
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_RXLVL_FIELD, rx_level);
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_TXLVL_FIELD, tx_level);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_FIFO_LEVEL_REG_OFFSET,
    9b92:	4114                	lw	a3,0(a0)
    9b94:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9b96:	0642                	slli	a2,a2,0x10
    9b98:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9b9a:	cacc                	sw	a1,20(a3)
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:292
                      compressed_limit);

  return kDifSpiDeviceOk;
}
    9b9c:	8082                	ret
    9b9e:	4509                	li	a0,2
    9ba0:	8082                	ret

00009ba2 <dif_spi_device_rx_pending>:
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:473
  // In particular, when r == w, the fifo is full.
  return fifo_len - (ptrs.read_ptr.offset - ptrs.write_ptr.offset);
}

dif_spi_device_result_t dif_spi_device_rx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
    9ba2:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:474
  if (spi == NULL || bytes_pending == NULL) {
    9ba4:	c90d                	beqz	a0,9bd6 <dif_spi_device_rx_pending+0x34>
    9ba6:	c985                	beqz	a1,9bd6 <dif_spi_device_rx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
    9ba8:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9baa:	5214                	lw	a3,32(a2)
    9bac:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
    9bae:	0106d713          	srli	a4,a3,0x10
    9bb2:	6785                	lui	a5,0x1
    9bb4:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
    9bb6:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
    9bba:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
    9bbc:	8eb9                	xor	a3,a3,a4
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kRxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
    9bbe:	00451503          	lh	a0,4(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
    9bc2:	06ce                	slli	a3,a3,0x13
    9bc4:	86fd                	srai	a3,a3,0x1f
    9bc6:	40f80733          	sub	a4,a6,a5
    9bca:	8d75                	and	a0,a0,a3
    9bcc:	953a                	add	a0,a0,a4
    9bce:	66c1                	lui	a3,0x10
    9bd0:	16fd                	addi	a3,a3,-1
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
    9bd2:	8d75                	and	a0,a0,a3
    9bd4:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:482

  return kDifSpiDeviceOk;
}
    9bd6:	8532                	mv	a0,a2
    9bd8:	8082                	ret

00009bda <dif_spi_device_tx_pending>:
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:485

dif_spi_device_result_t dif_spi_device_tx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
    9bda:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:486
  if (spi == NULL || bytes_pending == NULL) {
    9bdc:	c90d                	beqz	a0,9c0e <dif_spi_device_tx_pending+0x34>
    9bde:	c985                	beqz	a1,9c0e <dif_spi_device_tx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
    9be0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9be2:	5254                	lw	a3,36(a2)
    9be4:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
    9be6:	0106d713          	srli	a4,a3,0x10
    9bea:	6785                	lui	a5,0x1
    9bec:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
    9bee:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
    9bf2:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
    9bf4:	8eb9                	xor	a3,a3,a4
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kTxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
    9bf6:	00651503          	lh	a0,6(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
    9bfa:	06ce                	slli	a3,a3,0x13
    9bfc:	86fd                	srai	a3,a3,0x1f
    9bfe:	40f80733          	sub	a4,a6,a5
    9c02:	8d75                	and	a0,a0,a3
    9c04:	953a                	add	a0,a0,a4
    9c06:	66c1                	lui	a3,0x10
    9c08:	16fd                	addi	a3,a3,-1
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
    9c0a:	8d75                	and	a0,a0,a3
    9c0c:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:494

  return kDifSpiDeviceOk;
}
    9c0e:	8532                	mv	a0,a2
    9c10:	8082                	ret

00009c12 <dif_spi_device_recv>:
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:569
  return total_bytes;
}

dif_spi_device_result_t dif_spi_device_recv(const dif_spi_device_t *spi,
                                            void *buf, size_t buf_len,
                                            size_t *bytes_received) {
    9c12:	1101                	addi	sp,sp,-32
    9c14:	ce06                	sw	ra,28(sp)
    9c16:	cc22                	sw	s0,24(sp)
    9c18:	ca26                	sw	s1,20(sp)
    9c1a:	c84a                	sw	s2,16(sp)
    9c1c:	842a                	mv	s0,a0
    9c1e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:570
  if (spi == NULL || buf == NULL) {
    9c20:	c43d                	beqz	s0,9c8e <dif_spi_device_recv+0x7c>
    9c22:	872e                	mv	a4,a1
    9c24:	c5ad                	beqz	a1,9c8e <dif_spi_device_recv+0x7c>
    9c26:	8936                	mv	s2,a3
    9c28:	88b2                	mv	a7,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
    9c2a:	4008                	lw	a0,0(s0)
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:575
    return kDifSpiDeviceBadArg;
  }

  uint16_t fifo_base = 0;
  uint16_t fifo_len = spi->rx_fifo_len;
    9c2c:	00445683          	lhu	a3,4(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    9c30:	5108                	lw	a0,32(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
    9c32:	01055593          	srli	a1,a0,0x10
    9c36:	6605                	lui	a2,0x1
    9c38:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
    9c3a:	8df1                	and	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
    9c3c:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
    9c3e:	00c55793          	srli	a5,a0,0xc
    9c42:	64c1                	lui	s1,0x10
    9c44:	8fe5                	and	a5,a5,s1
    9c46:	8ddd                	or	a1,a1,a5
    9c48:	0512                	slli	a0,a0,0x4
    9c4a:	8d65                	and	a0,a0,s1
    9c4c:	8d51                	or	a0,a0,a2
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:576
  fifo_ptrs_t fifo = decompress_ptrs(spi, kRxFifoParams);
    9c4e:	c42e                	sw	a1,8(sp)
    9c50:	c62a                	sw	a0,12(sp)
    9c52:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:578

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
    9c54:	4805                	li	a6,1
    9c56:	8522                	mv	a0,s0
    9c58:	4601                	li	a2,0
    9c5a:	87c6                	mv	a5,a7
    9c5c:	283d                	jal	9c9a <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:580
                            buf_len, /*is_recv=*/true);
  if (bytes_received != NULL) {
    9c5e:	00090463          	beqz	s2,9c66 <dif_spi_device_recv+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:581
    *bytes_received = bytes;
    9c62:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:583
  }
  if (bytes > 0) {
    9c66:	c11d                	beqz	a0,9c8c <dif_spi_device_recv+0x7a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:585
    // Commit the new RX FIFO pointers.
    compress_ptrs(spi, kRxFifoParams, fifo);
    9c68:	4522                	lw	a0,8(sp)
    9c6a:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
    9c6c:	00455613          	srli	a2,a0,0x4
    9c70:	6685                	lui	a3,0x1
    9c72:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
    9c74:	0045d713          	srli	a4,a1,0x4
    9c78:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
    9c7a:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9c7c:	0542                	slli	a0,a0,0x10
    9c7e:	6641                	lui	a2,0x10
    9c80:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
    9c82:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
    9c84:	8df1                	and	a1,a1,a2
    9c86:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9c88:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9c8a:	d308                	sw	a0,32(a4)
    9c8c:	4501                	li	a0,0
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:588
  }
  return kDifSpiDeviceOk;
}
    9c8e:	4942                	lw	s2,16(sp)
    9c90:	44d2                	lw	s1,20(sp)
    9c92:	4462                	lw	s0,24(sp)
    9c94:	40f2                	lw	ra,28(sp)
    9c96:	6105                	addi	sp,sp,32
    9c98:	8082                	ret

00009c9a <spi_memcpy>:
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:514
                         uint8_t *byte_buf, size_t buf_len, bool is_recv) {
    9c9a:	7139                	addi	sp,sp,-64
    9c9c:	de06                	sw	ra,60(sp)
    9c9e:	dc22                	sw	s0,56(sp)
    9ca0:	da26                	sw	s1,52(sp)
    9ca2:	d84a                	sw	s2,48(sp)
    9ca4:	d64e                	sw	s3,44(sp)
    9ca6:	d452                	sw	s4,40(sp)
    9ca8:	d256                	sw	s5,36(sp)
    9caa:	d05a                	sw	s6,32(sp)
    9cac:	ce5e                	sw	s7,28(sp)
    9cae:	cc62                	sw	s8,24(sp)
    9cb0:	ca66                	sw	s9,20(sp)
    9cb2:	c86a                	sw	s10,16(sp)
    9cb4:	c66e                	sw	s11,12(sp)
    9cb6:	89c2                	mv	s3,a6
    9cb8:	893e                	mv	s2,a5
    9cba:	8d3a                	mv	s10,a4
    9cbc:	8a36                	mv	s4,a3
    9cbe:	8b2e                	mv	s6,a1
    9cc0:	8aaa                	mv	s5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:515
  uint16_t bytes_left = fifo_bytes_in_use(*fifo, fifo_len);
    9cc2:	0025d503          	lhu	a0,2(a1)
    9cc6:	0005d583          	lhu	a1,0(a1)
    9cca:	006b5683          	lhu	a3,6(s6)
    9cce:	004b5703          	lhu	a4,4(s6)
    9cd2:	0542                	slli	a0,a0,0x10
    9cd4:	8dc9                	or	a1,a1,a0
    9cd6:	06c2                	slli	a3,a3,0x10
    9cd8:	8f55                	or	a4,a4,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
    9cda:	8d35                	xor	a0,a0,a3
    9cdc:	053e                	slli	a0,a0,0xf
    9cde:	857d                	srai	a0,a0,0x1f
    9ce0:	8d99                	sub	a1,a1,a4
    9ce2:	01457533          	and	a0,a0,s4
    9ce6:	952e                	add	a0,a0,a1
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:517
  if (!is_recv) {
    9ce8:	00081463          	bnez	a6,9cf0 <spi_memcpy+0x56>
    9cec:	40aa0533          	sub	a0,s4,a0
    9cf0:	65c1                	lui	a1,0x10
    9cf2:	15fd                	addi	a1,a1,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:521
  if (bytes_left > buf_len) {
    9cf4:	00b576b3          	and	a3,a0,a1
    9cf8:	00d96363          	bltu	s2,a3,9cfe <spi_memcpy+0x64>
    9cfc:	892a                	mv	s2,a0
    9cfe:	00b97533          	and	a0,s2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
    9d02:	c935                	beqz	a0,9d76 <spi_memcpy+0xdc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:533
  if (is_recv) {
    9d04:	00098363          	beqz	s3,9d0a <spi_memcpy+0x70>
    9d08:	0b11                	addi	s6,s6,4
    9d0a:	6585                	lui	a1,0x1
    9d0c:	00b60bb3          	add	s7,a2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
    9d10:	000b5503          	lhu	a0,0(s6)
    9d14:	6641                	lui	a2,0x10
    9d16:	fff60c13          	addi	s8,a2,-1 # ffff <_heap_size+0x1fff>
    9d1a:	fff58c93          	addi	s9,a1,-1 # fff <test_status_set.kLogFields.2+0xde3>
    9d1e:	844a                	mv	s0,s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
    9d20:	01847633          	and	a2,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
    9d24:	018575b3          	and	a1,a0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:545
    const uint32_t bytes_until_wrap = fifo_len - ptr->offset;
    9d28:	40ba04b3          	sub	s1,s4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:547
    if (bytes_to_copy > bytes_until_wrap) {
    9d2c:	00c4e363          	bltu	s1,a2,9d32 <spi_memcpy+0x98>
    9d30:	84a2                	mv	s1,s0
    9d32:	000aa503          	lw	a0,0(s5)
    9d36:	95de                	add	a1,a1,s7
    9d38:	0184fdb3          	and	s11,s1,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
    9d3c:	866a                	mv	a2,s10
    9d3e:	86ee                	mv	a3,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:550
    if (is_recv) {
    9d40:	00098463          	beqz	s3,9d48 <spi_memcpy+0xae>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:552
      mmio_region_memcpy_from_mmio32(spi->params.base_addr, mmio_offset,
    9d44:	29e1                	jal	a21c <mmio_region_memcpy_from_mmio32>
    9d46:	a011                	j	9d4a <spi_memcpy+0xb0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
    9d48:	235d                	jal	a2ee <mmio_region_memcpy_to_mmio32>
fifo_ptr_increment():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:355
  uint32_t inc_with_overflow = ptr->offset + increment;
    9d4a:	000b5503          	lhu	a0,0(s6)
    9d4e:	956e                	add	a0,a0,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:357
  if (inc_with_overflow >= fifo_len) {
    9d50:	01456a63          	bltu	a0,s4,9d64 <spi_memcpy+0xca>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
    9d54:	002b0583          	lb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:358
    inc_with_overflow -= fifo_len;
    9d58:	41450533          	sub	a0,a0,s4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
    9d5c:	0015c593          	xori	a1,a1,1
    9d60:	00bb0123          	sb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:362
  ptr->offset = inc_with_overflow & kFifoOffsetMask;
    9d64:	01957533          	and	a0,a0,s9
    9d68:	00ab1023          	sh	a0,0(s6)
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:561
    bytes_left -= bytes_to_copy;
    9d6c:	8c05                	sub	s0,s0,s1
    9d6e:	018475b3          	and	a1,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:560
    byte_buf += bytes_to_copy;
    9d72:	9d6e                	add	s10,s10,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
    9d74:	f5d5                	bnez	a1,9d20 <spi_memcpy+0x86>
    9d76:	6541                	lui	a0,0x10
    9d78:	157d                	addi	a0,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
    9d7a:	00a97533          	and	a0,s2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:565
}
    9d7e:	4db2                	lw	s11,12(sp)
    9d80:	4d42                	lw	s10,16(sp)
    9d82:	4cd2                	lw	s9,20(sp)
    9d84:	4c62                	lw	s8,24(sp)
    9d86:	4bf2                	lw	s7,28(sp)
    9d88:	5b02                	lw	s6,32(sp)
    9d8a:	5a92                	lw	s5,36(sp)
    9d8c:	5a22                	lw	s4,40(sp)
    9d8e:	59b2                	lw	s3,44(sp)
    9d90:	5942                	lw	s2,48(sp)
    9d92:	54d2                	lw	s1,52(sp)
    9d94:	5462                	lw	s0,56(sp)
    9d96:	50f2                	lw	ra,60(sp)
    9d98:	6121                	addi	sp,sp,64
    9d9a:	8082                	ret

00009d9c <dif_spi_device_send>:
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:592

dif_spi_device_result_t dif_spi_device_send(const dif_spi_device_t *spi,
                                            const void *buf, size_t buf_len,
                                            size_t *bytes_sent) {
    9d9c:	1101                	addi	sp,sp,-32
    9d9e:	ce06                	sw	ra,28(sp)
    9da0:	cc22                	sw	s0,24(sp)
    9da2:	ca26                	sw	s1,20(sp)
    9da4:	c84a                	sw	s2,16(sp)
    9da6:	842a                	mv	s0,a0
    9da8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:593
  if (spi == NULL || buf == NULL) {
    9daa:	c835                	beqz	s0,9e1e <dif_spi_device_send+0x82>
    9dac:	872e                	mv	a4,a1
    9dae:	c9a5                	beqz	a1,9e1e <dif_spi_device_send+0x82>
    9db0:	8936                	mv	s2,a3
    9db2:	8832                	mv	a6,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
    9db4:	4008                	lw	a0,0(s0)
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:598
    return kDifSpiDeviceBadArg;
  }

  // Start of the TX FIFO is the end of the RX FIFO.
  uint16_t fifo_base = spi->rx_fifo_len;
    9db6:	00445603          	lhu	a2,4(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:599
  uint16_t fifo_len = spi->tx_fifo_len;
    9dba:	00645683          	lhu	a3,6(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9dbe:	5148                	lw	a0,36(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
    9dc0:	01055593          	srli	a1,a0,0x10
    9dc4:	6785                	lui	a5,0x1
    9dc6:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
    9dc8:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
    9dca:	8fe9                	and	a5,a5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
    9dcc:	00c55493          	srli	s1,a0,0xc
    9dd0:	68c1                	lui	a7,0x10
    9dd2:	0114f4b3          	and	s1,s1,a7
    9dd6:	8dc5                	or	a1,a1,s1
    9dd8:	0512                	slli	a0,a0,0x4
    9dda:	01157533          	and	a0,a0,a7
    9dde:	8d5d                	or	a0,a0,a5
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:600
  fifo_ptrs_t fifo = decompress_ptrs(spi, kTxFifoParams);
    9de0:	c42e                	sw	a1,8(sp)
    9de2:	c62a                	sw	a0,12(sp)
    9de4:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:602

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
    9de6:	8522                	mv	a0,s0
    9de8:	87c2                	mv	a5,a6
    9dea:	4801                	li	a6,0
    9dec:	357d                	jal	9c9a <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:604
                            buf_len, /*is_recv=*/false);
  if (bytes_sent != NULL) {
    9dee:	00090463          	beqz	s2,9df6 <dif_spi_device_send+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:605
    *bytes_sent = bytes;
    9df2:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:607
  }
  if (bytes > 0) {
    9df6:	c11d                	beqz	a0,9e1c <dif_spi_device_send+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:609
    // Commit the new TX FIFO pointers.
    compress_ptrs(spi, kTxFifoParams, fifo);
    9df8:	4522                	lw	a0,8(sp)
    9dfa:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
    9dfc:	00455613          	srli	a2,a0,0x4
    9e00:	6685                	lui	a3,0x1
    9e02:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
    9e04:	0045d713          	srli	a4,a1,0x4
    9e08:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
    9e0a:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9e0c:	0542                	slli	a0,a0,0x10
    9e0e:	6641                	lui	a2,0x10
    9e10:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
    9e12:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
    9e14:	8df1                	and	a1,a1,a2
    9e16:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9e18:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9e1a:	d348                	sw	a0,36(a4)
    9e1c:	4501                	li	a0,0
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:612
  }
  return kDifSpiDeviceOk;
}
    9e1e:	4942                	lw	s2,16(sp)
    9e20:	44d2                	lw	s1,20(sp)
    9e22:	4462                	lw	s0,24(sp)
    9e24:	40f2                	lw	ra,28(sp)
    9e26:	6105                	addi	sp,sp,32
    9e28:	8082                	ret
	...

00009e2c <dif_hmac_init>:
dif_hmac_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:69

  return true;
}

dif_hmac_result_t dif_hmac_init(const dif_hmac_config_t *config,
                                dif_hmac_t *hmac) {
    9e2c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:71
  // Basic checks on parameters. In `kDifHmacModeHmac` mode a key is required.
  if (config == NULL || hmac == NULL) {
    9e2e:	c919                	beqz	a0,9e44 <dif_hmac_init+0x18>
    9e30:	c991                	beqz	a1,9e44 <dif_hmac_init+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:75
    return kDifHmacBadArg;
  }

  hmac->base_addr = config->base_addr;
    9e32:	4110                	lw	a2,0(a0)
    9e34:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:78

  // Clear the config, stopping the SHA engine.
  mmio_region_write32(config->base_addr, HMAC_CFG_REG_OFFSET, 0);
    9e36:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9e38:	0005a623          	sw	zero,12(a1)
dif_hmac_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:81

  // Clear INTER.
  mmio_region_write32(config->base_addr, HMAC_INTR_STATE_REG_OFFSET,
    9e3c:	4108                	lw	a0,0(a0)
    9e3e:	4601                	li	a2,0
    9e40:	459d                	li	a1,7
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9e42:	c10c                	sw	a1,0(a0)
dif_hmac_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:87
                      (1 << HMAC_INTR_STATE_HMAC_DONE_BIT) |
                          (1 << HMAC_INTR_STATE_FIFO_EMPTY_BIT) |
                          (1 << HMAC_INTR_STATE_HMAC_ERR_BIT));

  return kDifHmacOk;
}
    9e44:	8532                	mv	a0,a2
    9e46:	8082                	ret

00009e48 <dif_hmac_irq_state_get>:
dif_hmac_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:91

dif_hmac_result_t dif_hmac_irq_state_get(const dif_hmac_t *hmac,
                                         dif_hmac_interrupt_t irq_type,
                                         dif_hmac_enable_t *state) {
    9e48:	86aa                	mv	a3,a0
    9e4a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:92
  if (hmac == NULL || state == NULL) {
    9e4c:	ce99                	beqz	a3,9e6a <dif_hmac_irq_state_get+0x22>
    9e4e:	ce11                	beqz	a2,9e6a <dif_hmac_irq_state_get+0x22>
    9e50:	4709                	li	a4,2
    9e52:	4505                	li	a0,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
    9e54:	00b76b63          	bltu	a4,a1,9e6a <dif_hmac_irq_state_get+0x22>
dif_hmac_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:102
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Get the interrupt state.
  bool enabled = mmio_region_get_bit32(hmac->base_addr,
    9e58:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9e5a:	4114                	lw	a3,0(a0)
    9e5c:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    9e5e:	00b6d5b3          	srl	a1,a3,a1
    9e62:	8985                	andi	a1,a1,1
    9e64:	0015b593          	seqz	a1,a1
dif_hmac_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:104
                                       HMAC_INTR_STATE_REG_OFFSET, offset);
  *state = (enabled ? kDifHmacEnable : kDifHmacDisable);
    9e68:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:107

  return kDifHmacOk;
}
    9e6a:	8082                	ret

00009e6c <dif_hmac_irq_state_clear>:
dif_hmac_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:111

dif_hmac_result_t dif_hmac_irq_state_clear(const dif_hmac_t *hmac,
                                           dif_hmac_interrupt_t irq_type) {
  if (hmac == NULL) {
    9e6c:	cd01                	beqz	a0,9e84 <dif_hmac_irq_state_clear+0x18>
    9e6e:	4689                	li	a3,2
    9e70:	4605                	li	a2,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
    9e72:	00b6ea63          	bltu	a3,a1,9e86 <dif_hmac_irq_state_clear+0x1a>
dif_hmac_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:121
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Clear the interrupt state.
  mmio_region_write_only_set_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
    9e76:	4108                	lw	a0,0(a0)
    9e78:	4601                	li	a2,0
    9e7a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9e7c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9e80:	c10c                	sw	a1,0(a0)
    9e82:	a011                	j	9e86 <dif_hmac_irq_state_clear+0x1a>
    9e84:	4609                	li	a2,2
dif_hmac_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:125
                                   offset);

  return kDifHmacOk;
}
    9e86:	8532                	mv	a0,a2
    9e88:	8082                	ret

00009e8a <dif_hmac_irqs_disable>:
dif_hmac_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:129

dif_hmac_result_t dif_hmac_irqs_disable(const dif_hmac_t *hmac,
                                        uint32_t *state) {
  if (hmac == NULL) {
    9e8a:	c911                	beqz	a0,9e9e <dif_hmac_irqs_disable+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:134
    return kDifHmacBadArg;
  }

  // Pass the interrupt state back to the caller.
  if (state != NULL) {
    9e8c:	c581                	beqz	a1,9e94 <dif_hmac_irqs_disable+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:135
    *state = mmio_region_read32(hmac->base_addr, HMAC_INTR_ENABLE_REG_OFFSET);
    9e8e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9e90:	4250                	lw	a2,4(a2)
dif_hmac_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:135
    9e92:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:139
  }

  // Disable all interrupts.
  mmio_region_write32(hmac->base_addr, HMAC_INTR_ENABLE_REG_OFFSET, 0u);
    9e94:	410c                	lw	a1,0(a0)
    9e96:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9e98:	0005a223          	sw	zero,4(a1)
dif_hmac_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:142

  return kDifHmacOk;
}
    9e9c:	8082                	ret
    9e9e:	4509                	li	a0,2
    9ea0:	8082                	ret

00009ea2 <dif_hmac_irqs_restore>:
dif_hmac_irqs_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:146

dif_hmac_result_t dif_hmac_irqs_restore(const dif_hmac_t *hmac,
                                        uint32_t state) {
  if (hmac == NULL) {
    9ea2:	c509                	beqz	a0,9eac <dif_hmac_irqs_restore+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:151
    return kDifHmacBadArg;
  }

  // Restore interrupt state.
  mmio_region_write32(hmac->base_addr, HMAC_INTR_ENABLE_REG_OFFSET, state);
    9ea4:	4110                	lw	a2,0(a0)
    9ea6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    9ea8:	c24c                	sw	a1,4(a2)
dif_hmac_irqs_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:154

  return kDifHmacOk;
}
    9eaa:	8082                	ret
    9eac:	4509                	li	a0,2
    9eae:	8082                	ret

00009eb0 <dif_hmac_irq_control>:
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:159

dif_hmac_result_t dif_hmac_irq_control(const dif_hmac_t *hmac,
                                       dif_hmac_interrupt_t irq_type,
                                       dif_hmac_enable_t enable) {
  if (hmac == NULL) {
    9eb0:	c10d                	beqz	a0,9ed2 <dif_hmac_irq_control+0x22>
    9eb2:	86aa                	mv	a3,a0
    9eb4:	4709                	li	a4,2
    9eb6:	4505                	li	a0,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
    9eb8:	02b76163          	bltu	a4,a1,9eda <dif_hmac_irq_control+0x2a>
    9ebc:	4294                	lw	a3,0(a3)
    9ebe:	42d8                	lw	a4,4(a3)
    9ec0:	4505                	li	a0,1
    9ec2:	00b515b3          	sll	a1,a0,a1
    9ec6:	4501                	li	a0,0
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:169
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Enable/Disable interrupt.
  if (enable == kDifHmacEnable) {
    9ec8:	c619                	beqz	a2,9ed6 <dif_hmac_irq_control+0x26>
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    9eca:	fff5c593          	not	a1,a1
    9ece:	8df9                	and	a1,a1,a4
    9ed0:	a021                	j	9ed8 <dif_hmac_irq_control+0x28>
    9ed2:	4509                	li	a0,2
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:178
    mmio_region_nonatomic_clear_bit32(hmac->base_addr,
                                      HMAC_INTR_ENABLE_REG_OFFSET, offset);
  }

  return kDifHmacOk;
}
    9ed4:	8082                	ret
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9ed6:	8dd9                	or	a1,a1,a4
    9ed8:	c2cc                	sw	a1,4(a3)
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:178
    9eda:	8082                	ret

00009edc <dif_hmac_irq_force>:
dif_hmac_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:182

dif_hmac_result_t dif_hmac_irq_force(const dif_hmac_t *hmac,
                                     dif_hmac_interrupt_t irq_type) {
  if (hmac == NULL) {
    9edc:	cd11                	beqz	a0,9ef8 <dif_hmac_irq_force+0x1c>
    9ede:	4689                	li	a3,2
    9ee0:	4605                	li	a2,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
    9ee2:	00b6ec63          	bltu	a3,a1,9efa <dif_hmac_irq_force+0x1e>
dif_hmac_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:192
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Force the requested interrupt.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_INTR_TEST_REG_OFFSET,
    9ee6:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9ee8:	4514                	lw	a3,8(a0)
    9eea:	4601                	li	a2,0
    9eec:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9eee:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9ef2:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9ef4:	c50c                	sw	a1,8(a0)
    9ef6:	a011                	j	9efa <dif_hmac_irq_force+0x1e>
    9ef8:	4609                	li	a2,2
dif_hmac_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:196
                                  offset);

  return kDifHmacOk;
}
    9efa:	8532                	mv	a0,a2
    9efc:	8082                	ret

00009efe <dif_hmac_mode_hmac_start>:
dif_hmac_mode_hmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:254
  return kDifHmacOk;
}

dif_hmac_result_t dif_hmac_mode_hmac_start(
    const dif_hmac_t *hmac, const uint8_t *key,
    const dif_hmac_transaction_t config) {
    9efe:	1141                	addi	sp,sp,-16
    9f00:	c606                	sw	ra,12(sp)
    9f02:	c422                	sw	s0,8(sp)
    9f04:	c226                	sw	s1,4(sp)
    9f06:	c04a                	sw	s2,0(sp)
    9f08:	842a                	mv	s0,a0
    9f0a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:255
  if (hmac == NULL || key == NULL) {
    9f0c:	c439                	beqz	s0,9f5a <dif_hmac_mode_hmac_start+0x5c>
    9f0e:	84b2                	mv	s1,a2
    9f10:	862e                	mv	a2,a1
    9f12:	c5a1                	beqz	a1,9f5a <dif_hmac_mode_hmac_start+0x5c>
    9f14:	8936                	mv	s2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:261
    return kDifHmacBadArg;
  }

  // Set the HMAC key.
  // TODO Static assert register layout.
  mmio_region_memcpy_to_mmio32(hmac->base_addr, HMAC_KEY_0_REG_OFFSET, key,
    9f16:	4008                	lw	a0,0(s0)
    9f18:	02000593          	li	a1,32
    9f1c:	02000693          	li	a3,32
    9f20:	26f9                	jal	a2ee <mmio_region_memcpy_to_mmio32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:266
                               HMAC_PARAM_NUM_WORDS * sizeof(uint32_t));

  // Read current CFG register value.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
    9f22:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9f24:	45d0                	lw	a2,12(a1)
    9f26:	4505                	li	a0,1
dif_hmac_calculate_device_config_value():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:218
  switch (config.message_endianness) {
    9f28:	c489                	beqz	s1,9f32 <dif_hmac_mode_hmac_start+0x34>
    9f2a:	4685                	li	a3,1
    9f2c:	02d49763          	bne	s1,a3,9f5a <dif_hmac_mode_hmac_start+0x5c>
    9f30:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:231
  switch (config.digest_endianness) {
    9f32:	00090663          	beqz	s2,9f3e <dif_hmac_mode_hmac_start+0x40>
    9f36:	4685                	li	a3,1
    9f38:	02d91163          	bne	s2,a3,9f5a <dif_hmac_mode_hmac_start+0x5c>
    9f3c:	4921                	li	s2,8
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9f3e:	ff067513          	andi	a0,a2,-16
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9f42:	8d45                	or	a0,a0,s1
    9f44:	01256533          	or	a0,a0,s2
    9f48:	00356513          	ori	a0,a0,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9f4c:	c5c8                	sw	a0,12(a1)
dif_hmac_mode_hmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:283
  device_config =
      bitfield_bit32_write(device_config, HMAC_CFG_HMAC_EN_BIT, true);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  // Begin HMAC operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
    9f4e:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9f50:	4990                	lw	a2,16(a1)
    9f52:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9f54:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9f58:	c990                	sw	a2,16(a1)
dif_hmac_mode_hmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:286
                                  HMAC_CMD_HASH_START_BIT);
  return kDifHmacOk;
}
    9f5a:	4902                	lw	s2,0(sp)
    9f5c:	4492                	lw	s1,4(sp)
    9f5e:	4422                	lw	s0,8(sp)
    9f60:	40b2                	lw	ra,12(sp)
    9f62:	0141                	addi	sp,sp,16
    9f64:	8082                	ret

00009f66 <dif_hmac_mode_sha256_start>:
dif_hmac_mode_sha256_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:290

dif_hmac_result_t dif_hmac_mode_sha256_start(
    const dif_hmac_t *hmac, const dif_hmac_transaction_t config) {
  if (hmac == NULL) {
    9f66:	cd0d                	beqz	a0,9fa0 <dif_hmac_mode_sha256_start+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:298

  // TODO: Clear HMAC Key? Write Zeroed HMAC Key?

  // Read current CFG register value.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
    9f68:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9f6a:	00c72803          	lw	a6,12(a4)
    9f6e:	4685                	li	a3,1
dif_hmac_calculate_device_config_value():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:218
  switch (config.message_endianness) {
    9f70:	c589                	beqz	a1,9f7a <dif_hmac_mode_sha256_start+0x14>
    9f72:	4785                	li	a5,1
    9f74:	02f59763          	bne	a1,a5,9fa2 <dif_hmac_mode_sha256_start+0x3c>
    9f78:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:231
  switch (config.digest_endianness) {
    9f7a:	c609                	beqz	a2,9f84 <dif_hmac_mode_sha256_start+0x1e>
    9f7c:	4785                	li	a5,1
    9f7e:	02f61263          	bne	a2,a5,9fa2 <dif_hmac_mode_sha256_start+0x3c>
    9f82:	4621                	li	a2,8
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    9f84:	ff087693          	andi	a3,a6,-16
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    9f88:	8dd5                	or	a1,a1,a3
    9f8a:	8dd1                	or	a1,a1,a2
    9f8c:	0025e593          	ori	a1,a1,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9f90:	c74c                	sw	a1,12(a4)
dif_hmac_mode_sha256_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:317

  // Write new CFG register value.
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  // Begin SHA256-only operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
    9f92:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9f94:	490c                	lw	a1,16(a0)
    9f96:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    9f98:	0015e593          	ori	a1,a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9f9c:	c90c                	sw	a1,16(a0)
    9f9e:	a011                	j	9fa2 <dif_hmac_mode_sha256_start+0x3c>
    9fa0:	4689                	li	a3,2
dif_hmac_mode_sha256_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:321
                                  HMAC_CMD_HASH_START_BIT);

  return kDifHmacOk;
}
    9fa2:	8536                	mv	a0,a3
    9fa4:	8082                	ret

00009fa6 <dif_hmac_fifo_push>:
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:325

dif_hmac_fifo_result_t dif_hmac_fifo_push(const dif_hmac_t *hmac,
                                          const void *data, size_t len,
                                          size_t *bytes_sent) {
    9fa6:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:326
  if (hmac == NULL || data == NULL) {
    9fa8:	c539                	beqz	a0,9ff6 <dif_hmac_fifo_push+0x50>
    9faa:	c5b1                	beqz	a1,9ff6 <dif_hmac_fifo_push+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:333
  }

  const uint8_t *data_sent = (const uint8_t *)data;
  size_t bytes_remaining = len;

  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
    9fac:	c231                	beqz	a2,9ff0 <dif_hmac_fifo_push+0x4a>
    9fae:	4811                	li	a6,4
    9fb0:	6705                	lui	a4,0x1
    9fb2:	80070893          	addi	a7,a4,-2048 # 800 <test_status_set.kLogFields.2+0x5e4>
    9fb6:	8732                	mv	a4,a2
get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
    9fb8:	00052283          	lw	t0,0(a0) # 10000 <_heap_size+0x2000>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    9fbc:	0142a783          	lw	a5,20(t0)
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:337
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
    size_t bytes_written = 0;

    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
    9fc0:	01076563          	bltu	a4,a6,9fca <dif_hmac_fifo_push+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:334
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
    9fc4:	0035f793          	andi	a5,a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:337
    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
    9fc8:	cf81                	beqz	a5,9fe0 <dif_hmac_fifo_push+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:340
      // Individual byte writes are needed if the buffer isn't aligned or there
      // are no more full words to write.
      mmio_region_write8(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, *data_sent);
    9fca:	00058303          	lb	t1,0(a1)
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
    9fce:	011287b3          	add	a5,t0,a7
    9fd2:	00678023          	sb	t1,0(a5) # 1000 <test_status_set.kLogFields.2+0xde4>
    9fd6:	4785                	li	a5,1
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:349
      uint32_t word = read_32(data_sent);
      mmio_region_write32(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, word);
      bytes_written = sizeof(uint32_t);
    }

    bytes_remaining -= bytes_written;
    9fd8:	8f1d                	sub	a4,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:350
    data_sent += bytes_written;
    9fda:	95be                	add	a1,a1,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:333
  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
    9fdc:	ff71                	bnez	a4,9fb8 <dif_hmac_fifo_push+0x12>
    9fde:	a809                	j	9ff0 <dif_hmac_fifo_push+0x4a>
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
    9fe0:	0005a303          	lw	t1,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    9fe4:	011287b3          	add	a5,t0,a7
    9fe8:	0067a023          	sw	t1,0(a5)
    9fec:	4791                	li	a5,4
    9fee:	b7ed                	j	9fd8 <dif_hmac_fifo_push+0x32>
    9ff0:	4701                	li	a4,0
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:353
  }

  if (bytes_sent != NULL) {
    9ff2:	c291                	beqz	a3,9ff6 <dif_hmac_fifo_push+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:354
    *bytes_sent = len - bytes_remaining;
    9ff4:	c290                	sw	a2,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:362
  if (bytes_remaining > 0) {
    return kDifHmacFifoFull;
  }

  return kDifHmacFifoOk;
}
    9ff6:	853a                	mv	a0,a4
    9ff8:	8082                	ret

00009ffa <dif_hmac_fifo_count_entries>:
dif_hmac_fifo_count_entries():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:365

dif_hmac_result_t dif_hmac_fifo_count_entries(const dif_hmac_t *hmac,
                                              uint32_t *num_entries) {
    9ffa:	862a                	mv	a2,a0
    9ffc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:366
  if (hmac == NULL || num_entries == NULL) {
    9ffe:	ca01                	beqz	a2,a00e <dif_hmac_fifo_count_entries+0x14>
    a000:	c599                	beqz	a1,a00e <dif_hmac_fifo_count_entries+0x14>
get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
    a002:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a004:	4950                	lw	a2,20(a0)
    a006:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
    a008:	8211                	srli	a2,a2,0x4
    a00a:	8a7d                	andi	a2,a2,31
dif_hmac_fifo_count_entries():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:370
    return kDifHmacBadArg;
  }

  *num_entries = get_fifo_entry_count(hmac);
    a00c:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:373

  return kDifHmacOk;
}
    a00e:	8082                	ret

0000a010 <dif_hmac_get_message_length>:
dif_hmac_get_message_length():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:376

dif_hmac_result_t dif_hmac_get_message_length(const dif_hmac_t *hmac,
                                              uint64_t *msg_len) {
    a010:	862a                	mv	a2,a0
    a012:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:377
  if (hmac == NULL || msg_len == NULL) {
    a014:	ca01                	beqz	a2,a024 <dif_hmac_get_message_length+0x14>
    a016:	c599                	beqz	a1,a024 <dif_hmac_get_message_length+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:382
    return kDifHmacBadArg;
  }

  uint64_t msg_lower =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_LOWER_REG_OFFSET);
    a018:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    a01a:	5130                	lw	a2,96(a0)
dif_hmac_get_message_length():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:384
  uint64_t msg_upper =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_UPPER_REG_OFFSET);
    a01c:	5174                	lw	a3,100(a0)
    a01e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:386

  *msg_len = (msg_upper << 32) | msg_lower;
    a020:	c1d4                	sw	a3,4(a1)
    a022:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:389

  return kDifHmacOk;
}
    a024:	8082                	ret

0000a026 <dif_hmac_process>:
dif_hmac_process():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:392

dif_hmac_result_t dif_hmac_process(const dif_hmac_t *hmac) {
  if (hmac == NULL) {
    a026:	c901                	beqz	a0,a036 <dif_hmac_process+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:396
    return kDifHmacBadArg;
  }

  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
    a028:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    a02a:	4990                	lw	a2,16(a1)
    a02c:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    a02e:	00266613          	ori	a2,a2,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a032:	c990                	sw	a2,16(a1)
dif_hmac_process():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:399
                                  HMAC_CMD_HASH_PROCESS_BIT);
  return kDifHmacOk;
}
    a034:	8082                	ret
    a036:	4509                	li	a0,2
    a038:	8082                	ret

0000a03a <dif_hmac_finish>:
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:402

dif_hmac_digest_result_t dif_hmac_finish(const dif_hmac_t *hmac,
                                         dif_hmac_digest_t *digest) {
    a03a:	1141                	addi	sp,sp,-16
    a03c:	c606                	sw	ra,12(sp)
    a03e:	c422                	sw	s0,8(sp)
    a040:	842a                	mv	s0,a0
    a042:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:403
  if (hmac == NULL || digest == NULL) {
    a044:	c805                	beqz	s0,a074 <dif_hmac_finish+0x3a>
    a046:	862e                	mv	a2,a1
    a048:	c595                	beqz	a1,a074 <dif_hmac_finish+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:408
    return kDifHmacDigestBadArg;
  }

  // Check if hmac_done is asserted.
  bool done = mmio_region_get_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
    a04a:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a04c:	4188                	lw	a0,0(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    a04e:	00157693          	andi	a3,a0,1
    a052:	450d                	li	a0,3
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:411
                                    HMAC_INTR_STATE_HMAC_DONE_BIT);

  if (done) {
    a054:	c285                	beqz	a3,a074 <dif_hmac_finish+0x3a>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
    a056:	4188                	lw	a0,0(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    a058:	00156513          	ori	a0,a0,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a05c:	c188                	sw	a0,0(a1)
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:421
    return kDifHmacDigestProcessing;
  }

  // Read the digest.
  // TODO Static assert register layout.
  mmio_region_memcpy_from_mmio32(hmac->base_addr, HMAC_DIGEST_0_REG_OFFSET,
    a05e:	4008                	lw	a0,0(s0)
    a060:	04000593          	li	a1,64
    a064:	02000693          	li	a3,32
    a068:	2a55                	jal	a21c <mmio_region_memcpy_from_mmio32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:428
                                 HMAC_PARAM_NUM_WORDS * sizeof(uint32_t));

  // Disable HMAC and SHA256 until the next transaction, clearing the current
  // digest.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
    a06a:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a06c:	45d0                	lw	a2,12(a1)
    a06e:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    a070:	9a71                	andi	a2,a2,-4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a072:	c5d0                	sw	a2,12(a1)
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:436
  device_config =
      bitfield_bit32_write(device_config, HMAC_CFG_HMAC_EN_BIT, false);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  return kDifHmacDigestOk;
}
    a074:	4422                	lw	s0,8(sp)
    a076:	40b2                	lw	ra,12(sp)
    a078:	0141                	addi	sp,sp,16
    a07a:	8082                	ret

0000a07c <dif_hmac_wipe_secret>:
dif_hmac_wipe_secret():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:440

dif_hmac_result_t dif_hmac_wipe_secret(const dif_hmac_t *hmac,
                                       uint32_t entropy) {
  if (hmac == NULL) {
    a07c:	c509                	beqz	a0,a086 <dif_hmac_wipe_secret+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:444
    return kDifHmacBadArg;
  }

  mmio_region_write32(hmac->base_addr, HMAC_WIPE_SECRET_REG_OFFSET, entropy);
    a07e:	4110                	lw	a2,0(a0)
    a080:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    a082:	ce4c                	sw	a1,28(a2)
dif_hmac_wipe_secret():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:447

  return kDifHmacOk;
}
    a084:	8082                	ret
    a086:	4509                	li	a0,2
    a088:	8082                	ret
	...

0000a08c <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
    a08c:	7139                	addi	sp,sp,-64
    a08e:	ce06                	sw	ra,28(sp)
    a090:	cc22                	sw	s0,24(sp)
    a092:	ca26                	sw	s1,20(sp)
    a094:	c84a                	sw	s2,16(sp)
    a096:	892a                	mv	s2,a0
    a098:	de46                	sw	a7,60(sp)
    a09a:	dc42                	sw	a6,56(sp)
    a09c:	da3e                	sw	a5,52(sp)
    a09e:	d83a                	sw	a4,48(sp)
    a0a0:	d636                	sw	a3,44(sp)
    a0a2:	d432                	sw	a2,40(sp)
    a0a4:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
    a0a6:	4144                	lw	s1,4(a0)
    a0a8:	80000537          	lui	a0,0x80000
    a0ac:	fff50613          	addi	a2,a0,-1 # 7fffffff <_flash_header+0x5fffffff>
    a0b0:	8526                	mv	a0,s1
    a0b2:	4581                	li	a1,0
    a0b4:	a89fe0ef          	jal	ra,8b3c <memchr>
    a0b8:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
    a0bc:	02f00593          	li	a1,47
    a0c0:	8526                	mv	a0,s1
    a0c2:	a93fe0ef          	jal	ra,8b54 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
    a0c6:	00092583          	lw	a1,0(s2)
    a0ca:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
    a0cc:	00b66b63          	bltu	a2,a1,a0e2 <base_log_internal_core+0x56>
    a0d0:	058a                	slli	a1,a1,0x2
    a0d2:	00001617          	auipc	a2,0x1
    a0d6:	8aa60613          	addi	a2,a2,-1878 # a97c <kDifSpiDeviceBufferLen+0x4>
    a0da:	95b2                	add	a1,a1,a2
    a0dc:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
    a0de:	e519                	bnez	a0,a0ec <base_log_internal_core+0x60>
    a0e0:	a801                	j	a0f0 <base_log_internal_core+0x64>
    a0e2:	00001597          	auipc	a1,0x1
    a0e6:	df858593          	addi	a1,a1,-520 # aeda <__clz_tab+0x4ee>
    a0ea:	c119                	beqz	a0,a0f0 <base_log_internal_core+0x64>
    a0ec:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
    a0f0:	80c18413          	addi	s0,gp,-2036 # 1000000c <base_log_internal_core.global_log_counter>
    a0f4:	00045603          	lhu	a2,0(s0)
    a0f8:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
    a0fc:	00001517          	auipc	a0,0x1
    a100:	dc550513          	addi	a0,a0,-571 # aec1 <__clz_tab+0x4d5>
    a104:	86a6                	mv	a3,s1
    a106:	ae5fe0ef          	jal	ra,8bea <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
    a10a:	00041503          	lh	a0,0(s0)
    a10e:	0505                	addi	a0,a0,1
    a110:	00a41023          	sh	a0,0(s0)
    a114:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
    a116:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
    a118:	01092503          	lw	a0,16(s2)
    a11c:	afffe0ef          	jal	ra,8c1a <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
    a120:	00001517          	auipc	a0,0x1
    a124:	daf50513          	addi	a0,a0,-593 # aecf <__clz_tab+0x4e3>
    a128:	ac3fe0ef          	jal	ra,8bea <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
    a12c:	4942                	lw	s2,16(sp)
    a12e:	44d2                	lw	s1,20(sp)
    a130:	4462                	lw	s0,24(sp)
    a132:	40f2                	lw	ra,28(sp)
    a134:	6121                	addi	sp,sp,64
    a136:	8082                	ret

0000a138 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
    a138:	1101                	addi	sp,sp,-32
    a13a:	ce46                	sw	a7,28(sp)
    a13c:	cc42                	sw	a6,24(sp)
    a13e:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
    a140:	00001797          	auipc	a5,0x1
    a144:	88078793          	addi	a5,a5,-1920 # a9c0 <kDeviceLogBypassUartAddress>
    a148:	439c                	lw	a5,0(a5)
    a14a:	c83a                	sw	a4,16(sp)
    a14c:	c636                	sw	a3,12(sp)
    a14e:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    a150:	c388                	sw	a0,0(a5)
    a152:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
    a154:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
    a156:	c989                	beqz	a1,a168 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
    a158:	4512                	lw	a0,4(sp)
    a15a:	00450613          	addi	a2,a0,4
    a15e:	c232                	sw	a2,4(sp)
    a160:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
    a162:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    a164:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
    a166:	f9ed                	bnez	a1,a158 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
    a168:	6105                	addi	sp,sp,32
    a16a:	8082                	ret

0000a16c <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
    a16c:	1101                	addi	sp,sp,-32
    a16e:	ce06                	sw	ra,28(sp)
    a170:	cc22                	sw	s0,24(sp)
    a172:	65b1                	lui	a1,0xc
    a174:	aad58593          	addi	a1,a1,-1363 # baad <_data_init_start+0xb9d>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
    a178:	02b50163          	beq	a0,a1,a19a <test_status_set+0x2e>
    a17c:	65a5                	lui	a1,0x9
    a17e:	05b5                	addi	a1,a1,13
    a180:	02b50f63          	beq	a0,a1,a1be <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
    a184:	00001597          	auipc	a1,0x1
    a188:	83858593          	addi	a1,a1,-1992 # a9bc <kDeviceTestStatusAddress>
    a18c:	418c                	lw	a1,0(a1)
    a18e:	c191                	beqz	a1,a192 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
    a190:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
    a192:	4462                	lw	s0,24(sp)
    a194:	40f2                	lw	ra,28(sp)
    a196:	6105                	addi	sp,sp,32
    a198:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
    a19a:	00001517          	auipc	a0,0x1
    a19e:	82650513          	addi	a0,a0,-2010 # a9c0 <kDeviceLogBypassUartAddress>
    a1a2:	4108                	lw	a0,0(a0)
    a1a4:	ed1d                	bnez	a0,a1e2 <test_status_set+0x76>
    a1a6:	00001597          	auipc	a1,0x1
    a1aa:	83258593          	addi	a1,a1,-1998 # a9d8 <kDeviceLogBypassUartAddress+0x18>
    a1ae:	840a                	mv	s0,sp
    a1b0:	4651                	li	a2,20
    a1b2:	8522                	mv	a0,s0
    a1b4:	939fe0ef          	jal	ra,8aec <memcpy>
    a1b8:	8522                	mv	a0,s0
    a1ba:	3dc9                	jal	a08c <base_log_internal_core>
    a1bc:	a03d                	j	a1ea <test_status_set+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
    a1be:	00001517          	auipc	a0,0x1
    a1c2:	80250513          	addi	a0,a0,-2046 # a9c0 <kDeviceLogBypassUartAddress>
    a1c6:	4108                	lw	a0,0(a0)
    a1c8:	e91d                	bnez	a0,a1fe <test_status_set+0x92>
    a1ca:	00000597          	auipc	a1,0x0
    a1ce:	7fa58593          	addi	a1,a1,2042 # a9c4 <kDeviceLogBypassUartAddress+0x4>
    a1d2:	840a                	mv	s0,sp
    a1d4:	4651                	li	a2,20
    a1d6:	8522                	mv	a0,s0
    a1d8:	915fe0ef          	jal	ra,8aec <memcpy>
    a1dc:	8522                	mv	a0,s0
    a1de:	357d                	jal	a08c <base_log_internal_core>
    a1e0:	a01d                	j	a206 <test_status_set+0x9a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
    a1e2:	21c00513          	li	a0,540
    a1e6:	4581                	li	a1,0
    a1e8:	3f81                	jal	a138 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
    a1ea:	00000517          	auipc	a0,0x0
    a1ee:	7d250513          	addi	a0,a0,2002 # a9bc <kDeviceTestStatusAddress>
    a1f2:	4108                	lw	a0,0(a0)
    a1f4:	c115                	beqz	a0,a218 <test_status_set+0xac>
    a1f6:	65b1                	lui	a1,0xc
    a1f8:	aad58593          	addi	a1,a1,-1363 # baad <_data_init_start+0xb9d>
    a1fc:	a829                	j	a216 <test_status_set+0xaa>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
    a1fe:	20800513          	li	a0,520
    a202:	4581                	li	a1,0
    a204:	3f15                	jal	a138 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
    a206:	00000517          	auipc	a0,0x0
    a20a:	7b650513          	addi	a0,a0,1974 # a9bc <kDeviceTestStatusAddress>
    a20e:	4108                	lw	a0,0(a0)
    a210:	c501                	beqz	a0,a218 <test_status_set+0xac>
    a212:	65a5                	lui	a1,0x9
    a214:	05b5                	addi	a1,a1,13
    a216:	c10c                	sw	a1,0(a0)
    a218:	8c5fe0ef          	jal	ra,8adc <abort>

0000a21c <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:112
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
    a21c:	4705                	li	a4,1
    a21e:	a009                	j	a220 <mmio_region_memcpy32>

0000a220 <mmio_region_memcpy32>:
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:35
                                 size_t len, bool from_mmio) {
    a220:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:36
  if (len == 0) {
    a222:	d606                	sw	ra,44(sp)
    a224:	d422                	sw	s0,40(sp)
    a226:	d226                	sw	s1,36(sp)
    a228:	d04a                	sw	s2,32(sp)
    a22a:	ce4e                	sw	s3,28(sp)
    a22c:	cc52                	sw	s4,24(sp)
    a22e:	ca56                	sw	s5,20(sp)
    a230:	c85a                	sw	s6,16(sp)
    a232:	c6c5                	beqz	a3,a2da <mmio_region_memcpy32+0xba>
    a234:	893a                	mv	s2,a4
    a236:	8436                	mv	s0,a3
    a238:	89b2                	mv	s3,a2
    a23a:	8b2e                	mv	s6,a1
    a23c:	8a2a                	mv	s4,a0
misalignment32_of():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:16
  return addr % alignof(uint32_t);
    a23e:	0035f513          	andi	a0,a1,3
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:43
  if (misalignment != 0) {
    a242:	c139                	beqz	a0,a288 <mmio_region_memcpy32+0x68>
    a244:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:46
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
    a246:	8d89                	sub	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:50
    if (realignment > len) {
    a248:	84a2                	mv	s1,s0
    a24a:	00b46363          	bltu	s0,a1,a250 <mmio_region_memcpy32+0x30>
    a24e:	84ae                	mv	s1,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a250:	ffcb7593          	andi	a1,s6,-4
    a254:	00ba0ab3          	add	s5,s4,a1
    a258:	000aa583          	lw	a1,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:57
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
    a25c:	c62e                	sw	a1,12(sp)
    a25e:	006c                	addi	a1,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:61
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
    a260:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:62
    if (from_mmio) {
    a262:	00090763          	beqz	s2,a270 <mmio_region_memcpy32+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:63
      memcpy(buf, current_byte, realignment);
    a266:	854e                	mv	a0,s3
    a268:	8626                	mv	a2,s1
    a26a:	883fe0ef          	jal	ra,8aec <memcpy>
    a26e:	a809                	j	a280 <mmio_region_memcpy32+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:66
      memcpy(current_byte, buf, realignment);
    a270:	852e                	mv	a0,a1
    a272:	85ce                	mv	a1,s3
    a274:	8626                	mv	a2,s1
    a276:	877fe0ef          	jal	ra,8aec <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:67
      mmio_region_write32(base, current_word_offset, current_word);
    a27a:	4532                	lw	a0,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a27c:	00aaa023          	sw	a0,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:72
    len -= realignment;
    a280:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
    a282:	cc21                	beqz	s0,a2da <mmio_region_memcpy32+0xba>
    a284:	9b26                	add	s6,s6,s1
    a286:	99a6                	add	s3,s3,s1
    a288:	00810a93          	addi	s5,sp,8
    a28c:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:81
    if (bytes_to_copy > len) {
    a28e:	84a2                	mv	s1,s0
    a290:	00a46363          	bltu	s0,a0,a296 <mmio_region_memcpy32+0x76>
    a294:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:86
    uint32_t current_word = 0;
    a296:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:87
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
    a298:	00a46c63          	bltu	s0,a0,a2b0 <mmio_region_memcpy32+0x90>
    a29c:	00091a63          	bnez	s2,a2b0 <mmio_region_memcpy32+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
    a2a0:	00090f63          	beqz	s2,a2be <mmio_region_memcpy32+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:97
      memcpy(buf, &current_word, bytes_to_copy);
    a2a4:	854e                	mv	a0,s3
    a2a6:	85d6                	mv	a1,s5
    a2a8:	8626                	mv	a2,s1
    a2aa:	843fe0ef          	jal	ra,8aec <memcpy>
    a2ae:	a015                	j	a2d2 <mmio_region_memcpy32+0xb2>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a2b0:	ffcb7513          	andi	a0,s6,-4
    a2b4:	9552                	add	a0,a0,s4
    a2b6:	4108                	lw	a0,0(a0)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:92
      current_word = mmio_region_read32(base, offset);
    a2b8:	c42a                	sw	a0,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
    a2ba:	fe0915e3          	bnez	s2,a2a4 <mmio_region_memcpy32+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:100
      memcpy(&current_word, buf, bytes_to_copy);
    a2be:	8556                	mv	a0,s5
    a2c0:	85ce                	mv	a1,s3
    a2c2:	8626                	mv	a2,s1
    a2c4:	829fe0ef          	jal	ra,8aec <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:101
      mmio_region_write32(base, offset, current_word);
    a2c8:	4522                	lw	a0,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a2ca:	ffcb7593          	andi	a1,s6,-4
    a2ce:	95d2                	add	a1,a1,s4
    a2d0:	c188                	sw	a0,0(a1)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:104
    offset += bytes_to_copy;
    a2d2:	9b26                	add	s6,s6,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:106
    len -= bytes_to_copy;
    a2d4:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:105
    buf += bytes_to_copy;
    a2d6:	99a6                	add	s3,s3,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
    a2d8:	f855                	bnez	s0,a28c <mmio_region_memcpy32+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:108
}
    a2da:	4b42                	lw	s6,16(sp)
    a2dc:	4ad2                	lw	s5,20(sp)
    a2de:	4a62                	lw	s4,24(sp)
    a2e0:	49f2                	lw	s3,28(sp)
    a2e2:	5902                	lw	s2,32(sp)
    a2e4:	5492                	lw	s1,36(sp)
    a2e6:	5422                	lw	s0,40(sp)
    a2e8:	50b2                	lw	ra,44(sp)
    a2ea:	6145                	addi	sp,sp,48
    a2ec:	8082                	ret

0000a2ee <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:120
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
    a2ee:	4701                	li	a4,0
    a2f0:	bf05                	j	a220 <mmio_region_memcpy32>

0000a2f2 <mmio_region_read8>:
mmio_region_read8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:85
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
    a2f2:	952e                	add	a0,a0,a1
    a2f4:	00054503          	lbu	a0,0(a0)
    a2f8:	8082                	ret

0000a2fa <mmio_region_read32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a2fa:	99f1                	andi	a1,a1,-4
    a2fc:	952e                	add	a0,a0,a1
    a2fe:	4108                	lw	a0,0(a0)
    a300:	8082                	ret

0000a302 <mmio_region_write8>:
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
    a302:	952e                	add	a0,a0,a1
    a304:	00c50023          	sb	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:118
}
    a308:	8082                	ret

0000a30a <mmio_region_write32>:
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a30a:	99f1                	andi	a1,a1,-4
    a30c:	952e                	add	a0,a0,a1
    a30e:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:134
}
    a310:	8082                	ret

0000a312 <mmio_region_read_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a312:	99f1                	andi	a1,a1,-4
    a314:	952e                	add	a0,a0,a1
    a316:	4108                	lw	a0,0(a0)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
    a318:	00d55533          	srl	a0,a0,a3
    a31c:	8d71                	and	a0,a0,a2
mmio_region_read_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:176
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
    a31e:	8082                	ret

0000a320 <mmio_region_get_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a320:	99f1                	andi	a1,a1,-4
    a322:	952e                	add	a0,a0,a1
    a324:	4108                	lw	a0,0(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
    a326:	00c55533          	srl	a0,a0,a2
    a32a:	8905                	andi	a0,a0,1
mmio_region_get_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:197
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
    a32c:	8082                	ret

0000a32e <mmio_region_nonatomic_clear_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a32e:	99f1                	andi	a1,a1,-4
    a330:	952e                	add	a0,a0,a1
    a332:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    a334:	00d61633          	sll	a2,a2,a3
    a338:	fff64613          	not	a2,a2
    a33c:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a33e:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:220
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
    a340:	8082                	ret

0000a342 <mmio_region_nonatomic_set_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a342:	99f1                	andi	a1,a1,-4
    a344:	952e                	add	a0,a0,a1
    a346:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    a348:	00d61633          	sll	a2,a2,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    a34c:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a34e:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:242
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
    a350:	8082                	ret

0000a352 <mmio_region_write_only_set_mask32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    a352:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a356:	99f1                	andi	a1,a1,-4
    a358:	952e                	add	a0,a0,a1
    a35a:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:264
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
    a35c:	8082                	ret

0000a35e <mmio_region_nonatomic_set_field32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a35e:	99f1                	andi	a1,a1,-4
    a360:	952e                	add	a0,a0,a1
    a362:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    a364:	00d617b3          	sll	a5,a2,a3
    a368:	fff7c793          	not	a5,a5
    a36c:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    a36e:	8e79                	and	a2,a2,a4
    a370:	00d61633          	sll	a2,a2,a3
    a374:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a376:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:288
                                              bitfield_field32_t field,
                                              uint32_t value) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
    a378:	8082                	ret

0000a37a <mmio_region_write_only_set_field32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
    a37a:	8e79                	and	a2,a2,a4
    a37c:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a380:	99f1                	andi	a1,a1,-4
    a382:	952e                	add	a0,a0,a1
    a384:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:309
                                               bitfield_field32_t field,
                                               uint32_t value) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
    a386:	8082                	ret

0000a388 <mmio_region_nonatomic_clear_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a388:	99f1                	andi	a1,a1,-4
    a38a:	952e                	add	a0,a0,a1
    a38c:	410c                	lw	a1,0(a0)
    a38e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    a390:	00c69633          	sll	a2,a3,a2
    a394:	fff64613          	not	a2,a2
    a398:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a39a:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:328
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
    a39c:	8082                	ret

0000a39e <mmio_region_nonatomic_set_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    a39e:	99f1                	andi	a1,a1,-4
    a3a0:	952e                	add	a0,a0,a1
    a3a2:	410c                	lw	a1,0(a0)
    a3a4:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
    a3a6:	00c69633          	sll	a2,a3,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
    a3aa:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a3ac:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:346
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
    a3ae:	8082                	ret

0000a3b0 <mmio_region_write_only_set_bit32>:
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:363
 * @param bit_index the bit to set.
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_bit32(mmio_region_t base,
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
    a3b0:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
    a3b2:	00c69633          	sll	a2,a3,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    a3b6:	99f1                	andi	a1,a1,-4
    a3b8:	952e                	add	a0,a0,a1
    a3ba:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:367
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
    a3bc:	8082                	ret

0000a3be <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
    a3be:	88aa                	mv	a7,a0
    a3c0:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
    a3c2:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
    a3c4:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
    a3c6:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
    a3c8:	20069863          	bnez	a3,a5d8 <__udivdi3+0x21a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
    a3cc:	66ad                	lui	a3,0xb
    a3ce:	9ec68693          	addi	a3,a3,-1556 # a9ec <__clz_tab>
    a3d2:	0cc5f063          	bgeu	a1,a2,a492 <__udivdi3+0xd4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
    a3d6:	6741                	lui	a4,0x10
    a3d8:	0ae67663          	bgeu	a2,a4,a484 <__udivdi3+0xc6>
    a3dc:	0ff00713          	li	a4,255
    a3e0:	00c73733          	sltu	a4,a4,a2
    a3e4:	070e                	slli	a4,a4,0x3
    a3e6:	00e65533          	srl	a0,a2,a4
    a3ea:	96aa                	add	a3,a3,a0
    a3ec:	0006c683          	lbu	a3,0(a3)
    a3f0:	02000513          	li	a0,32
    a3f4:	9736                	add	a4,a4,a3
    a3f6:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
    a3fa:	00e50c63          	beq	a0,a4,a412 <__udivdi3+0x54>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
    a3fe:	00d797b3          	sll	a5,a5,a3
    a402:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
    a406:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
    a40a:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
    a40e:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
    a412:	01085893          	srli	a7,a6,0x10
    a416:	0315d7b3          	divu	a5,a1,a7
    a41a:	01081613          	slli	a2,a6,0x10
    a41e:	8241                	srli	a2,a2,0x10
    a420:	01035713          	srli	a4,t1,0x10
    a424:	0315f6b3          	remu	a3,a1,a7
    a428:	853e                	mv	a0,a5
    a42a:	02f605b3          	mul	a1,a2,a5
    a42e:	06c2                	slli	a3,a3,0x10
    a430:	8f55                	or	a4,a4,a3
    a432:	00b77c63          	bgeu	a4,a1,a44a <__udivdi3+0x8c>
    a436:	9742                	add	a4,a4,a6
    a438:	fff78513          	addi	a0,a5,-1
    a43c:	01076763          	bltu	a4,a6,a44a <__udivdi3+0x8c>
    a440:	00b77563          	bgeu	a4,a1,a44a <__udivdi3+0x8c>
    a444:	ffe78513          	addi	a0,a5,-2
    a448:	9742                	add	a4,a4,a6
    a44a:	8f0d                	sub	a4,a4,a1
    a44c:	031777b3          	remu	a5,a4,a7
    a450:	0342                	slli	t1,t1,0x10
    a452:	01035313          	srli	t1,t1,0x10
    a456:	03175733          	divu	a4,a4,a7
    a45a:	07c2                	slli	a5,a5,0x10
    a45c:	0067e333          	or	t1,a5,t1
    a460:	02e606b3          	mul	a3,a2,a4
    a464:	863a                	mv	a2,a4
    a466:	00d37b63          	bgeu	t1,a3,a47c <__udivdi3+0xbe>
    a46a:	9342                	add	t1,t1,a6
    a46c:	fff70613          	addi	a2,a4,-1 # ffff <_heap_size+0x1fff>
    a470:	01036663          	bltu	t1,a6,a47c <__udivdi3+0xbe>
    a474:	00d37463          	bgeu	t1,a3,a47c <__udivdi3+0xbe>
    a478:	ffe70613          	addi	a2,a4,-2
    a47c:	0542                	slli	a0,a0,0x10
    a47e:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
    a480:	4581                	li	a1,0
    a482:	a85d                	j	a538 <__udivdi3+0x17a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
    a484:	01000537          	lui	a0,0x1000
    a488:	4741                	li	a4,16
    a48a:	f4a66ee3          	bltu	a2,a0,a3e6 <__udivdi3+0x28>
    a48e:	4761                	li	a4,24
    a490:	bf99                	j	a3e6 <__udivdi3+0x28>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
    a492:	e601                	bnez	a2,a49a <__udivdi3+0xdc>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
    a494:	4705                	li	a4,1
    a496:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
    a49a:	6741                	lui	a4,0x10
    a49c:	08e87f63          	bgeu	a6,a4,a53a <__udivdi3+0x17c>
    a4a0:	0ff00713          	li	a4,255
    a4a4:	01077363          	bgeu	a4,a6,a4aa <__udivdi3+0xec>
    a4a8:	4521                	li	a0,8
    a4aa:	00a85733          	srl	a4,a6,a0
    a4ae:	96ba                	add	a3,a3,a4
    a4b0:	0006c703          	lbu	a4,0(a3)
    a4b4:	02000613          	li	a2,32
    a4b8:	972a                	add	a4,a4,a0
    a4ba:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
    a4be:	08e61563          	bne	a2,a4,a548 <__udivdi3+0x18a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
    a4c2:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
    a4c6:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
    a4c8:	01085893          	srli	a7,a6,0x10
    a4cc:	01081613          	slli	a2,a6,0x10
    a4d0:	8241                	srli	a2,a2,0x10
    a4d2:	01035713          	srli	a4,t1,0x10
    a4d6:	0317f6b3          	remu	a3,a5,a7
    a4da:	0317d7b3          	divu	a5,a5,a7
    a4de:	06c2                	slli	a3,a3,0x10
    a4e0:	8f55                	or	a4,a4,a3
    a4e2:	02f60e33          	mul	t3,a2,a5
    a4e6:	853e                	mv	a0,a5
    a4e8:	01c77c63          	bgeu	a4,t3,a500 <__udivdi3+0x142>
    a4ec:	9742                	add	a4,a4,a6
    a4ee:	fff78513          	addi	a0,a5,-1
    a4f2:	01076763          	bltu	a4,a6,a500 <__udivdi3+0x142>
    a4f6:	01c77563          	bgeu	a4,t3,a500 <__udivdi3+0x142>
    a4fa:	ffe78513          	addi	a0,a5,-2
    a4fe:	9742                	add	a4,a4,a6
    a500:	41c70733          	sub	a4,a4,t3
    a504:	031777b3          	remu	a5,a4,a7
    a508:	0342                	slli	t1,t1,0x10
    a50a:	01035313          	srli	t1,t1,0x10
    a50e:	03175733          	divu	a4,a4,a7
    a512:	07c2                	slli	a5,a5,0x10
    a514:	0067e333          	or	t1,a5,t1
    a518:	02e606b3          	mul	a3,a2,a4
    a51c:	863a                	mv	a2,a4
    a51e:	00d37b63          	bgeu	t1,a3,a534 <__udivdi3+0x176>
    a522:	9342                	add	t1,t1,a6
    a524:	fff70613          	addi	a2,a4,-1 # ffff <_heap_size+0x1fff>
    a528:	01036663          	bltu	t1,a6,a534 <__udivdi3+0x176>
    a52c:	00d37463          	bgeu	t1,a3,a534 <__udivdi3+0x176>
    a530:	ffe70613          	addi	a2,a4,-2
    a534:	0542                	slli	a0,a0,0x10
    a536:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
    a538:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
    a53a:	01000737          	lui	a4,0x1000
    a53e:	4541                	li	a0,16
    a540:	f6e865e3          	bltu	a6,a4,a4aa <__udivdi3+0xec>
    a544:	4561                	li	a0,24
    a546:	b795                	j	a4aa <__udivdi3+0xec>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
    a548:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
    a54c:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
    a550:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
    a554:	00d797b3          	sll	a5,a5,a3
    a558:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
    a55c:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
    a560:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
    a564:	0315f733          	remu	a4,a1,a7
    a568:	01081793          	slli	a5,a6,0x10
    a56c:	83c1                	srli	a5,a5,0x10
    a56e:	01065513          	srli	a0,a2,0x10
    a572:	0315d5b3          	divu	a1,a1,a7
    a576:	0742                	slli	a4,a4,0x10
    a578:	8f49                	or	a4,a4,a0
    a57a:	02b786b3          	mul	a3,a5,a1
    a57e:	852e                	mv	a0,a1
    a580:	00d77c63          	bgeu	a4,a3,a598 <__udivdi3+0x1da>
    a584:	9742                	add	a4,a4,a6
    a586:	fff58513          	addi	a0,a1,-1 # 8fff <write_digits+0x4f>
    a58a:	01076763          	bltu	a4,a6,a598 <__udivdi3+0x1da>
    a58e:	00d77563          	bgeu	a4,a3,a598 <__udivdi3+0x1da>
    a592:	ffe58513          	addi	a0,a1,-2
    a596:	9742                	add	a4,a4,a6
    a598:	40d706b3          	sub	a3,a4,a3
    a59c:	0316f733          	remu	a4,a3,a7
    a5a0:	0642                	slli	a2,a2,0x10
    a5a2:	8241                	srli	a2,a2,0x10
    a5a4:	0316d6b3          	divu	a3,a3,a7
    a5a8:	0742                	slli	a4,a4,0x10
    a5aa:	02d788b3          	mul	a7,a5,a3
    a5ae:	00c767b3          	or	a5,a4,a2
    a5b2:	8736                	mv	a4,a3
    a5b4:	0117fc63          	bgeu	a5,a7,a5cc <__udivdi3+0x20e>
    a5b8:	97c2                	add	a5,a5,a6
    a5ba:	fff68713          	addi	a4,a3,-1
    a5be:	0107e763          	bltu	a5,a6,a5cc <__udivdi3+0x20e>
    a5c2:	0117f563          	bgeu	a5,a7,a5cc <__udivdi3+0x20e>
    a5c6:	ffe68713          	addi	a4,a3,-2
    a5ca:	97c2                	add	a5,a5,a6
    a5cc:	01051593          	slli	a1,a0,0x10
    a5d0:	411787b3          	sub	a5,a5,a7
    a5d4:	8dd9                	or	a1,a1,a4
    a5d6:	bdcd                	j	a4c8 <__udivdi3+0x10a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
    a5d8:	14d5e163          	bltu	a1,a3,a71a <__udivdi3+0x35c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
    a5dc:	6741                	lui	a4,0x10
    a5de:	02e6fe63          	bgeu	a3,a4,a61a <__udivdi3+0x25c>
    a5e2:	0ff00713          	li	a4,255
    a5e6:	00d735b3          	sltu	a1,a4,a3
    a5ea:	058e                	slli	a1,a1,0x3
    a5ec:	672d                	lui	a4,0xb
    a5ee:	00b6d533          	srl	a0,a3,a1
    a5f2:	9ec70713          	addi	a4,a4,-1556 # a9ec <__clz_tab>
    a5f6:	972a                	add	a4,a4,a0
    a5f8:	00074703          	lbu	a4,0(a4)
    a5fc:	02000513          	li	a0,32
    a600:	972e                	add	a4,a4,a1
    a602:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
    a606:	02e51163          	bne	a0,a4,a628 <__udivdi3+0x26a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
    a60a:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
    a60c:	f2f6e6e3          	bltu	a3,a5,a538 <__udivdi3+0x17a>
    a610:	00c8b533          	sltu	a0,a7,a2
    a614:	00154513          	xori	a0,a0,1
    a618:	b705                	j	a538 <__udivdi3+0x17a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
    a61a:	01000737          	lui	a4,0x1000
    a61e:	45c1                	li	a1,16
    a620:	fce6e6e3          	bltu	a3,a4,a5ec <__udivdi3+0x22e>
    a624:	45e1                	li	a1,24
    a626:	b7d9                	j	a5ec <__udivdi3+0x22e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
    a628:	00e65333          	srl	t1,a2,a4
    a62c:	00b696b3          	sll	a3,a3,a1
    a630:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    a634:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
    a638:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
    a63c:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    a640:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
    a644:	00b797b3          	sll	a5,a5,a1
    a648:	00e8d733          	srl	a4,a7,a4
    a64c:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    a650:	01031793          	slli	a5,t1,0x10
    a654:	83c1                	srli	a5,a5,0x10
    a656:	01085713          	srli	a4,a6,0x10
    a65a:	02a65633          	divu	a2,a2,a0
    a65e:	06c2                	slli	a3,a3,0x10
    a660:	8f55                	or	a4,a4,a3
    a662:	02c78f33          	mul	t5,a5,a2
    a666:	8e32                	mv	t3,a2
    a668:	01e77c63          	bgeu	a4,t5,a680 <__udivdi3+0x2c2>
    a66c:	971a                	add	a4,a4,t1
    a66e:	fff60e13          	addi	t3,a2,-1
    a672:	00676763          	bltu	a4,t1,a680 <__udivdi3+0x2c2>
    a676:	01e77563          	bgeu	a4,t5,a680 <__udivdi3+0x2c2>
    a67a:	ffe60e13          	addi	t3,a2,-2
    a67e:	971a                	add	a4,a4,t1
    a680:	41e70733          	sub	a4,a4,t5
    a684:	02a776b3          	remu	a3,a4,a0
    a688:	02a75733          	divu	a4,a4,a0
    a68c:	06c2                	slli	a3,a3,0x10
    a68e:	02e78633          	mul	a2,a5,a4
    a692:	01081793          	slli	a5,a6,0x10
    a696:	83c1                	srli	a5,a5,0x10
    a698:	8fd5                	or	a5,a5,a3
    a69a:	86ba                	mv	a3,a4
    a69c:	00c7fc63          	bgeu	a5,a2,a6b4 <__udivdi3+0x2f6>
    a6a0:	979a                	add	a5,a5,t1
    a6a2:	fff70693          	addi	a3,a4,-1 # ffffff <_stack_size+0xfedfff>
    a6a6:	0067e763          	bltu	a5,t1,a6b4 <__udivdi3+0x2f6>
    a6aa:	00c7f563          	bgeu	a5,a2,a6b4 <__udivdi3+0x2f6>
    a6ae:	ffe70693          	addi	a3,a4,-2
    a6b2:	979a                	add	a5,a5,t1
    a6b4:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    a6b8:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    a6ba:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    a6bc:	fffe0693          	addi	a3,t3,-1 # ffff <_heap_size+0x1fff>
    a6c0:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
    a6c4:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    a6c6:	00def6b3          	and	a3,t4,a3
    a6ca:	01055613          	srli	a2,a0,0x10
    a6ce:	010ede93          	srli	t4,t4,0x10
    a6d2:	02d80333          	mul	t1,a6,a3
    a6d6:	02d606b3          	mul	a3,a2,a3
    a6da:	01035713          	srli	a4,t1,0x10
    a6de:	03d80833          	mul	a6,a6,t4
    a6e2:	9836                	add	a6,a6,a3
    a6e4:	9742                	add	a4,a4,a6
    a6e6:	03d60633          	mul	a2,a2,t4
    a6ea:	00d77363          	bgeu	a4,a3,a6f0 <__udivdi3+0x332>
    a6ee:	9672                	add	a2,a2,t3
    a6f0:	01075693          	srli	a3,a4,0x10
    a6f4:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
    a6f6:	02c7e063          	bltu	a5,a2,a716 <__udivdi3+0x358>
    a6fa:	d8c793e3          	bne	a5,a2,a480 <__udivdi3+0xc2>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    a6fe:	67c1                	lui	a5,0x10
    a700:	17fd                	addi	a5,a5,-1
    a702:	8f7d                	and	a4,a4,a5
    a704:	0742                	slli	a4,a4,0x10
    a706:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
    a70a:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
    a70e:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
    a710:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
    a712:	e2e8f3e3          	bgeu	a7,a4,a538 <__udivdi3+0x17a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
    a716:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
    a718:	b3a5                	j	a480 <__udivdi3+0xc2>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
    a71a:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
    a71c:	4501                	li	a0,0
    a71e:	bd29                	j	a538 <__udivdi3+0x17a>
