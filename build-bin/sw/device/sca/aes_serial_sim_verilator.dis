
sw/device/sca/aes_serial_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000da  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         0000282c  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       000003d8  200029b0  200029b0  000039b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000000c  10000000  20002d88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a4c  1000000c  20002d94  0000400c  2**2
                  ALLOC
  8 .logs.fields  00000078  00010000  00010000  0000400c  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c7c3  00000000  00000000  000040aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002149  00000000  00000000  0001086d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000b8  00000000  00000000  000129b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006bbb  00000000  00000000  00012a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000068d1  00000000  00000000  00019629  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  0001fefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004f80  00000000  00000000  000205c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c38  00000000  00000000  00025544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fec50513          	addi	a0,a0,-20 # 1000000c <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	25818593          	addi	a1,gp,600 # 10000a58 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
2000002c:	2891                	jal	20000080 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
2000002e:	f001e517          	auipc	a0,0xf001e
20000032:	fd250513          	addi	a0,a0,-46 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
20000036:	f0020597          	auipc	a1,0xf0020
2000003a:	fca58593          	addi	a1,a1,-54 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
2000003e:	2089                	jal	20000080 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000040:	f0000517          	auipc	a0,0xf0000
20000044:	fc050513          	addi	a0,a0,-64 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
20000048:	80c18593          	addi	a1,gp,-2036 # 1000000c <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
2000004c:	00003617          	auipc	a2,0x3
20000050:	d3c60613          	addi	a2,a2,-708 # 20002d88 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000054:	2881                	jal	200000a4 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
20000056:	00000417          	auipc	s0,0x0
2000005a:	12a40413          	addi	s0,s0,298 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
2000005e:	00000497          	auipc	s1,0x0
20000062:	12248493          	addi	s1,s1,290 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
20000066:	00947863          	bgeu	s0,s1,20000076 <init_array_loop_end>

2000006a <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006a:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
2000006e:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000070:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000072:	fe946ce3          	bltu	s0,s1,2000006a <init_array_loop>

20000076 <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
20000076:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
20000078:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007a:	2219                	jal	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
2000007c:	0650006f          	j	200008e0 <abort>

20000080 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000080:	00b57e63          	bgeu	a0,a1,2000009c <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000084:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
20000088:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
2000008c:	00029b63          	bnez	t0,200000a2 <L_clear_error>

20000090 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000090:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000094:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
20000096:	feb56de3          	bltu	a0,a1,20000090 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009a:	8082                	ret

2000009c <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
2000009c:	00b51363          	bne	a0,a1,200000a2 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a0:	8082                	ret

200000a2 <L_clear_error>:
	...

200000a4 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a4:	02b57963          	bgeu	a0,a1,200000d6 <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000a8:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000ac:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b0:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b4:	02029463          	bnez	t0,200000dc <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000b8:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000bc:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c0:	0062ee63          	bltu	t0,t1,200000dc <L_copy_error>

200000c4 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c4:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000c8:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ca:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000ce:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d0:	feb56ae3          	bltu	a0,a1,200000c4 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d4:	8082                	ret

200000d6 <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000d6:	00b51363          	bne	a0,a1,200000dc <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000da:	8082                	ret

200000dc <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	2800106f          	j	20001380 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	3bc0106f          	j	200014c8 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2810006f          	j	20000b9c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	44c0106f          	j	20001578 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:200
 * Main function.
 *
 * Initializes peripherals and processes simple serial packets received over
 * UART.
 */
int main(void) {
20000180:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:203
  const dif_uart_t *uart;

  sca_init();
20000182:	c606                	sw	ra,12(sp)
20000184:	279000ef          	jal	ra,20000bfc <sca_init>
20000188:	0028                	addi	a0,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:204
  sca_get_uart(&uart);
2000018a:	32b000ef          	jal	ra,20000cb4 <sca_get_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:206

  simple_serial_init(uart);
2000018e:	4522                	lw	a0,8(sp)
20000190:	4f4010ef          	jal	ra,20001684 <simple_serial_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:207
  simple_serial_register_handler('k', aes_serial_set_key);
20000194:	00000597          	auipc	a1,0x0
20000198:	05858593          	addi	a1,a1,88 # 200001ec <aes_serial_set_key>
2000019c:	06b00513          	li	a0,107
200001a0:	586010ef          	jal	ra,20001726 <simple_serial_register_handler>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:208
  simple_serial_register_handler('p', aes_serial_single_encrypt);
200001a4:	00000597          	auipc	a1,0x0
200001a8:	0c058593          	addi	a1,a1,192 # 20000264 <aes_serial_single_encrypt>
200001ac:	07000513          	li	a0,112
200001b0:	576010ef          	jal	ra,20001726 <simple_serial_register_handler>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:209
  simple_serial_register_handler('b', aes_serial_batch_encrypt);
200001b4:	00000597          	auipc	a1,0x0
200001b8:	12658593          	addi	a1,a1,294 # 200002da <aes_serial_batch_encrypt>
200001bc:	06200513          	li	a0,98
200001c0:	566010ef          	jal	ra,20001726 <simple_serial_register_handler>
init_aes():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:190
  SS_CHECK(dif_aes_init(params, &aes) == kDifAesOk);
200001c4:	f0000597          	auipc	a1,0xf0000
200001c8:	e4858593          	addi	a1,a1,-440 # 1000000c <_data_end>
200001cc:	41100537          	lui	a0,0x41100
200001d0:	2615                	jal	200004f4 <dif_aes_init>
200001d2:	e519                	bnez	a0,200001e0 <main+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:191
  SS_CHECK(dif_aes_reset(&aes) == kDifAesOk);
200001d4:	f0000517          	auipc	a0,0xf0000
200001d8:	e3850513          	addi	a0,a0,-456 # 1000000c <_data_end>
200001dc:	261d                	jal	20000502 <dif_aes_reset>
200001de:	c501                	beqz	a0,200001e6 <main+0x66>
200001e0:	4505                	li	a0,1
200001e2:	72a010ef          	jal	ra,2000190c <simple_serial_send_status>
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:214

  init_aes();

  while (true) {
    simple_serial_process_packet();
200001e6:	572010ef          	jal	ra,20001758 <simple_serial_process_packet>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:213
  while (true) {
200001ea:	bff5                	j	200001e6 <main+0x66>

200001ec <aes_serial_set_key>:
aes_serial_set_key():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:54
static void aes_serial_set_key(const uint8_t *key, size_t key_len) {
200001ec:	7135                	addi	sp,sp,-160
200001ee:	cf06                	sw	ra,156(sp)
200001f0:	cd22                	sw	s0,152(sp)
200001f2:	cb26                	sw	s1,148(sp)
200001f4:	4641                	li	a2,16
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:55
  SS_CHECK(key_len == kAesKeyLength);
200001f6:	06c59063          	bne	a1,a2,20000256 <aes_serial_set_key+0x6a>
200001fa:	86aa                	mv	a3,a0
200001fc:	00003517          	auipc	a0,0x3
20000200:	9d050513          	addi	a0,a0,-1584 # 20002bcc <__clz_tab+0x100>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:56
  dif_aes_transaction_t transaction = {
20000204:	454c                	lw	a1,12(a0)
20000206:	4510                	lw	a2,8(a0)
20000208:	4158                	lw	a4,4(a0)
2000020a:	4108                	lw	a0,0(a0)
2000020c:	c72e                	sw	a1,140(sp)
2000020e:	c532                	sw	a2,136(sp)
20000210:	c33a                	sw	a4,132(sp)
20000212:	c12a                	sw	a0,128(sp)
20000214:	0080                	addi	s0,sp,64
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:63
  memcpy(key_shares.share0, key, sizeof(key_shares.share0));
20000216:	02000613          	li	a2,32
2000021a:	8522                	mv	a0,s0
2000021c:	85b6                	mv	a1,a3
2000021e:	24a9                	jal	20000468 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:64
  memset(key_shares.share1, 0, sizeof(key_shares.share1));
20000220:	1088                	addi	a0,sp,96
20000222:	02000613          	li	a2,32
20000226:	4581                	li	a1,0
20000228:	2c99                	jal	2000047e <memset>
2000022a:	848a                	mv	s1,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:65
  SS_CHECK(dif_aes_start_ecb(&aes, &transaction, key_shares) == kDifAesOk);
2000022c:	04000613          	li	a2,64
20000230:	8526                	mv	a0,s1
20000232:	85a2                	mv	a1,s0
20000234:	2c15                	jal	20000468 <memcpy>
20000236:	f0000517          	auipc	a0,0xf0000
2000023a:	dd650513          	addi	a0,a0,-554 # 1000000c <_data_end>
2000023e:	010c                	addi	a1,sp,128
20000240:	8626                	mv	a2,s1
20000242:	2cc5                	jal	20000532 <dif_aes_start_ecb>
20000244:	c501                	beqz	a0,2000024c <aes_serial_set_key+0x60>
20000246:	4505                	li	a0,1
20000248:	6c4010ef          	jal	ra,2000190c <simple_serial_send_status>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:66
}
2000024c:	44da                	lw	s1,148(sp)
2000024e:	446a                	lw	s0,152(sp)
20000250:	40fa                	lw	ra,156(sp)
20000252:	610d                	addi	sp,sp,160
20000254:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:55
  SS_CHECK(key_len == kAesKeyLength);
20000256:	4505                	li	a0,1
20000258:	44da                	lw	s1,148(sp)
2000025a:	446a                	lw	s0,152(sp)
2000025c:	40fa                	lw	ra,156(sp)
2000025e:	610d                	addi	sp,sp,160
20000260:	6ac0106f          	j	2000190c <simple_serial_send_status>

20000264 <aes_serial_single_encrypt>:
aes_serial_single_encrypt():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:115
                                      size_t plaintext_len) {
20000264:	1101                	addi	sp,sp,-32
20000266:	ce06                	sw	ra,28(sp)
20000268:	cc22                	sw	s0,24(sp)
2000026a:	ca26                	sw	s1,20(sp)
2000026c:	4641                	li	a2,16
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:116
  SS_CHECK(plaintext_len == kAesTextLength);
2000026e:	04c59863          	bne	a1,a2,200002be <aes_serial_single_encrypt+0x5a>
20000272:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:118
  sca_set_trigger_high();
20000274:	24d000ef          	jal	ra,20000cc0 <sca_set_trigger_high>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:119
  aes_serial_encrypt(plaintext, plaintext_len);
20000278:	8522                	mv	a0,s0
2000027a:	20dd                	jal	20000360 <aes_serial_encrypt>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:120
  sca_set_trigger_low();
2000027c:	255000ef          	jal	ra,20000cd0 <sca_set_trigger_low>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:122
  bool ready = false;
20000280:	000109a3          	sb	zero,19(sp)
20000284:	f0000417          	auipc	s0,0xf0000
20000288:	d8840413          	addi	s0,s0,-632 # 1000000c <_data_end>
2000028c:	01310493          	addi	s1,sp,19
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:124
    SS_CHECK(dif_aes_get_status(&aes, kDifAesStatusOutputValid, &ready) ==
20000290:	458d                	li	a1,3
20000292:	8522                	mv	a0,s0
20000294:	8626                	mv	a2,s1
20000296:	2305                	jal	200007b6 <dif_aes_get_status>
20000298:	e919                	bnez	a0,200002ae <aes_serial_single_encrypt+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:126
  } while (!ready);
2000029a:	01314503          	lbu	a0,19(sp)
2000029e:	d96d                	beqz	a0,20000290 <aes_serial_single_encrypt+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:129
  SS_CHECK(dif_aes_read_output(&aes, &ciphertext) == kDifAesOk);
200002a0:	f0000517          	auipc	a0,0xf0000
200002a4:	d6c50513          	addi	a0,a0,-660 # 1000000c <_data_end>
200002a8:	858a                	mv	a1,sp
200002aa:	294d                	jal	2000075c <dif_aes_read_output>
200002ac:	c105                	beqz	a0,200002cc <aes_serial_single_encrypt+0x68>
200002ae:	4505                	li	a0,1
200002b0:	65c010ef          	jal	ra,2000190c <simple_serial_send_status>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:132
}
200002b4:	44d2                	lw	s1,20(sp)
200002b6:	4462                	lw	s0,24(sp)
200002b8:	40f2                	lw	ra,28(sp)
200002ba:	6105                	addi	sp,sp,32
200002bc:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:116
  SS_CHECK(plaintext_len == kAesTextLength);
200002be:	4505                	li	a0,1
200002c0:	44d2                	lw	s1,20(sp)
200002c2:	4462                	lw	s0,24(sp)
200002c4:	40f2                	lw	ra,28(sp)
200002c6:	6105                	addi	sp,sp,32
200002c8:	6440106f          	j	2000190c <simple_serial_send_status>
200002cc:	858a                	mv	a1,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:130
  simple_serial_send_packet('r', (uint8_t *)ciphertext.data,
200002ce:	07200513          	li	a0,114
200002d2:	4641                	li	a2,16
200002d4:	5c0010ef          	jal	ra,20001894 <simple_serial_send_packet>
200002d8:	bff1                	j	200002b4 <aes_serial_single_encrypt+0x50>

200002da <aes_serial_batch_encrypt>:
aes_serial_batch_encrypt():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:158
static void aes_serial_batch_encrypt(const uint8_t *data, size_t data_len) {
200002da:	7179                	addi	sp,sp,-48
200002dc:	d606                	sw	ra,44(sp)
200002de:	d422                	sw	s0,40(sp)
200002e0:	d226                	sw	s1,36(sp)
200002e2:	4611                	li	a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:160
  SS_CHECK(data_len == sizeof(num_encryptions));
200002e4:	06c59063          	bne	a1,a2,20000344 <aes_serial_batch_encrypt+0x6a>
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200002e8:	4104                	lw	s1,0(a0)
aes_serial_batch_encrypt():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:163
  sca_set_trigger_high();
200002ea:	1d7000ef          	jal	ra,20000cc0 <sca_set_trigger_high>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:164
  for (uint32_t i = 0; i < num_encryptions; ++i) {
200002ee:	c891                	beqz	s1,20000302 <aes_serial_batch_encrypt+0x28>
200002f0:	0800                	addi	s0,sp,16
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:166
    prng_rand_bytes(plaintext, kAesTextLength);
200002f2:	45c1                	li	a1,16
200002f4:	8522                	mv	a0,s0
200002f6:	071000ef          	jal	ra,20000b66 <prng_rand_bytes>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:167
    aes_serial_encrypt(plaintext, kAesTextLength);
200002fa:	8522                	mv	a0,s0
200002fc:	2095                	jal	20000360 <aes_serial_encrypt>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:164
  for (uint32_t i = 0; i < num_encryptions; ++i) {
200002fe:	14fd                	addi	s1,s1,-1
20000300:	f8ed                	bnez	s1,200002f2 <aes_serial_batch_encrypt+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:169
  sca_set_trigger_low();
20000302:	1cf000ef          	jal	ra,20000cd0 <sca_set_trigger_low>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:171
  bool ready = false;
20000306:	000107a3          	sb	zero,15(sp)
2000030a:	f0000417          	auipc	s0,0xf0000
2000030e:	d0240413          	addi	s0,s0,-766 # 1000000c <_data_end>
20000312:	00f10493          	addi	s1,sp,15
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:173
    SS_CHECK(dif_aes_get_status(&aes, kDifAesStatusOutputValid, &ready) ==
20000316:	458d                	li	a1,3
20000318:	8522                	mv	a0,s0
2000031a:	8626                	mv	a2,s1
2000031c:	2969                	jal	200007b6 <dif_aes_get_status>
2000031e:	e919                	bnez	a0,20000334 <aes_serial_batch_encrypt+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:175
  } while (!ready);
20000320:	00f14503          	lbu	a0,15(sp)
20000324:	d96d                	beqz	a0,20000316 <aes_serial_batch_encrypt+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:178
  SS_CHECK(dif_aes_read_output(&aes, &ciphertext) == kDifAesOk);
20000326:	f0000517          	auipc	a0,0xf0000
2000032a:	ce650513          	addi	a0,a0,-794 # 1000000c <_data_end>
2000032e:	080c                	addi	a1,sp,16
20000330:	2135                	jal	2000075c <dif_aes_read_output>
20000332:	c105                	beqz	a0,20000352 <aes_serial_batch_encrypt+0x78>
20000334:	4505                	li	a0,1
20000336:	5d6010ef          	jal	ra,2000190c <simple_serial_send_status>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:181
}
2000033a:	5492                	lw	s1,36(sp)
2000033c:	5422                	lw	s0,40(sp)
2000033e:	50b2                	lw	ra,44(sp)
20000340:	6145                	addi	sp,sp,48
20000342:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:160
  SS_CHECK(data_len == sizeof(num_encryptions));
20000344:	4505                	li	a0,1
20000346:	5492                	lw	s1,36(sp)
20000348:	5422                	lw	s0,40(sp)
2000034a:	50b2                	lw	ra,44(sp)
2000034c:	6145                	addi	sp,sp,48
2000034e:	5be0106f          	j	2000190c <simple_serial_send_status>
20000352:	080c                	addi	a1,sp,16
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:179
  simple_serial_send_packet('r', (uint8_t *)ciphertext.data,
20000354:	07200513          	li	a0,114
20000358:	4641                	li	a2,16
2000035a:	53a010ef          	jal	ra,20001894 <simple_serial_send_packet>
2000035e:	bff1                	j	2000033a <aes_serial_batch_encrypt+0x60>

20000360 <aes_serial_encrypt>:
aes_serial_encrypt():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:86
static void aes_serial_encrypt(const uint8_t *plaintext, size_t plaintext_len) {
20000360:	7179                	addi	sp,sp,-48
20000362:	d606                	sw	ra,44(sp)
20000364:	d422                	sw	s0,40(sp)
20000366:	d226                	sw	s1,36(sp)
20000368:	d04a                	sw	s2,32(sp)
2000036a:	892a                	mv	s2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:87
  bool ready = false;
2000036c:	00010fa3          	sb	zero,31(sp)
20000370:	f0000497          	auipc	s1,0xf0000
20000374:	c9c48493          	addi	s1,s1,-868 # 1000000c <_data_end>
20000378:	01f10413          	addi	s0,sp,31
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:89
    SS_CHECK(dif_aes_get_status(&aes, kDifAesStatusInputReady, &ready) ==
2000037c:	4591                	li	a1,4
2000037e:	8526                	mv	a0,s1
20000380:	8622                	mv	a2,s0
20000382:	2915                	jal	200007b6 <dif_aes_get_status>
20000384:	e959                	bnez	a0,2000041a <aes_serial_encrypt+0xba>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:91
  } while (!ready);
20000386:	01f14503          	lbu	a0,31(sp)
2000038a:	d96d                	beqz	a0,2000037c <aes_serial_encrypt+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:95
  SS_CHECK(dif_aes_load_data(&aes, data) == kDifAesOk);
2000038c:	00d94503          	lbu	a0,13(s2)
20000390:	00c94583          	lbu	a1,12(s2)
20000394:	00f94603          	lbu	a2,15(s2)
20000398:	00e94683          	lbu	a3,14(s2)
2000039c:	0522                	slli	a0,a0,0x8
2000039e:	8d4d                	or	a0,a0,a1
200003a0:	00861593          	slli	a1,a2,0x8
200003a4:	8dd5                	or	a1,a1,a3
200003a6:	05c2                	slli	a1,a1,0x10
200003a8:	8d4d                	or	a0,a0,a1
200003aa:	ca2a                	sw	a0,20(sp)
200003ac:	00994503          	lbu	a0,9(s2)
200003b0:	00894583          	lbu	a1,8(s2)
200003b4:	00b94603          	lbu	a2,11(s2)
200003b8:	00a94683          	lbu	a3,10(s2)
200003bc:	0522                	slli	a0,a0,0x8
200003be:	8d4d                	or	a0,a0,a1
200003c0:	00861593          	slli	a1,a2,0x8
200003c4:	8dd5                	or	a1,a1,a3
200003c6:	05c2                	slli	a1,a1,0x10
200003c8:	8d4d                	or	a0,a0,a1
200003ca:	c82a                	sw	a0,16(sp)
200003cc:	00594503          	lbu	a0,5(s2)
200003d0:	00494583          	lbu	a1,4(s2)
200003d4:	00794603          	lbu	a2,7(s2)
200003d8:	00694683          	lbu	a3,6(s2)
200003dc:	0522                	slli	a0,a0,0x8
200003de:	8d4d                	or	a0,a0,a1
200003e0:	00861593          	slli	a1,a2,0x8
200003e4:	8dd5                	or	a1,a1,a3
200003e6:	05c2                	slli	a1,a1,0x10
200003e8:	8d4d                	or	a0,a0,a1
200003ea:	c62a                	sw	a0,12(sp)
200003ec:	00194503          	lbu	a0,1(s2)
200003f0:	00094583          	lbu	a1,0(s2)
200003f4:	00394603          	lbu	a2,3(s2)
200003f8:	00294683          	lbu	a3,2(s2)
200003fc:	0522                	slli	a0,a0,0x8
200003fe:	8d4d                	or	a0,a0,a1
20000400:	00861593          	slli	a1,a2,0x8
20000404:	8dd5                	or	a1,a1,a3
20000406:	05c2                	slli	a1,a1,0x10
20000408:	8d4d                	or	a0,a0,a1
2000040a:	c42a                	sw	a0,8(sp)
2000040c:	f0000517          	auipc	a0,0xf0000
20000410:	c0050513          	addi	a0,a0,-1024 # 1000000c <_data_end>
20000414:	002c                	addi	a1,sp,8
20000416:	2e09                	jal	20000728 <dif_aes_load_data>
20000418:	c911                	beqz	a0,2000042c <aes_serial_encrypt+0xcc>
2000041a:	4505                	li	a0,1
2000041c:	4f0010ef          	jal	ra,2000190c <simple_serial_send_status>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:102
}
20000420:	5902                	lw	s2,32(sp)
20000422:	5492                	lw	s1,36(sp)
20000424:	5422                	lw	s0,40(sp)
20000426:	50b2                	lw	ra,44(sp)
20000428:	6145                	addi	sp,sp,48
2000042a:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:101
  sca_call_and_sleep(aes_manual_trigger, kIbexAesSleepCycles);
2000042c:	00000517          	auipc	a0,0x0
20000430:	01250513          	addi	a0,a0,18 # 2000043e <aes_manual_trigger>
20000434:	19000593          	li	a1,400
20000438:	0a5000ef          	jal	ra,20000cdc <sca_call_and_sleep>
2000043c:	b7d5                	j	20000420 <aes_serial_encrypt+0xc0>

2000043e <aes_manual_trigger>:
aes_manual_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:71
static void aes_manual_trigger(void) {
2000043e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:72
  SS_CHECK(dif_aes_trigger(&aes, kDifAesTriggerStart) == kDifAesOk);
20000440:	c606                	sw	ra,12(sp)
20000442:	f0000517          	auipc	a0,0xf0000
20000446:	bca50513          	addi	a0,a0,-1078 # 1000000c <_data_end>
2000044a:	4581                	li	a1,0
2000044c:	2691                	jal	20000790 <dif_aes_trigger>
2000044e:	c511                	beqz	a0,2000045a <aes_manual_trigger+0x1c>
20000450:	4505                	li	a0,1
20000452:	40b2                	lw	ra,12(sp)
20000454:	0141                	addi	sp,sp,16
20000456:	4b60106f          	j	2000190c <simple_serial_send_status>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/aes_serial.c:73
}
2000045a:	40b2                	lw	ra,12(sp)
2000045c:	0141                	addi	sp,sp,16
2000045e:	8082                	ret

20000460 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
20000460:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20000462:	8082                	ret

20000464 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20000464:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20000466:	8082                	ret

20000468 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20000468:	ca11                	beqz	a2,2000047c <memcpy+0x14>
2000046a:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
2000046c:	00058703          	lb	a4,0(a1)
20000470:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20000474:	167d                	addi	a2,a2,-1
20000476:	0685                	addi	a3,a3,1
20000478:	0585                	addi	a1,a1,1
2000047a:	fa6d                	bnez	a2,2000046c <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
2000047c:	8082                	ret

2000047e <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000047e:	c619                	beqz	a2,2000048c <memset+0xe>
20000480:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20000482:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20000486:	167d                	addi	a2,a2,-1
20000488:	0685                	addi	a3,a3,1
2000048a:	fe65                	bnez	a2,20000482 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
2000048c:	8082                	ret

2000048e <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
2000048e:	ce09                	beqz	a2,200004a8 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20000490:	00054683          	lbu	a3,0(a0)
20000494:	0005c703          	lbu	a4,0(a1)
20000498:	00e6ea63          	bltu	a3,a4,200004ac <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
2000049c:	00d76b63          	bltu	a4,a3,200004b2 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200004a0:	167d                	addi	a2,a2,-1
200004a2:	0585                	addi	a1,a1,1
200004a4:	0505                	addi	a0,a0,1
200004a6:	f66d                	bnez	a2,20000490 <memcmp+0x2>
200004a8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200004aa:	8082                	ret
200004ac:	fd600513          	li	a0,-42
200004b0:	8082                	ret
200004b2:	02a00513          	li	a0,42
200004b6:	8082                	ret

200004b8 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200004b8:	ca11                	beqz	a2,200004cc <memchr+0x14>
200004ba:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200004be:	00054683          	lbu	a3,0(a0)
200004c2:	00b68663          	beq	a3,a1,200004ce <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
200004c6:	167d                	addi	a2,a2,-1
200004c8:	0505                	addi	a0,a0,1
200004ca:	fa75                	bnez	a2,200004be <memchr+0x6>
200004cc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
200004ce:	8082                	ret

200004d0 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200004d0:	ce09                	beqz	a2,200004ea <memrchr+0x1a>
200004d2:	fff50693          	addi	a3,a0,-1
200004d6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
200004da:	00c68733          	add	a4,a3,a2
200004de:	00074703          	lbu	a4,0(a4)
200004e2:	00b70663          	beq	a4,a1,200004ee <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
200004e6:	167d                	addi	a2,a2,-1
200004e8:	fa6d                	bnez	a2,200004da <memrchr+0xa>
200004ea:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
200004ec:	8082                	ret
200004ee:	9532                	add	a0,a0,a2
200004f0:	157d                	addi	a0,a0,-1
200004f2:	8082                	ret

200004f4 <dif_aes_init>:
dif_aes_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:196
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
  }
}

dif_aes_result_t dif_aes_init(dif_aes_params_t params, dif_aes_t *aes) {
  if (aes == NULL) {
200004f4:	c581                	beqz	a1,200004fc <dif_aes_init+0x8>
200004f6:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:200
    return kDifAesBadArg;
  }

  aes->params = params;
200004f8:	c188                	sw	a0,0(a1)
200004fa:	a011                	j	200004fe <dif_aes_init+0xa>
200004fc:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:203

  return kDifAesOk;
}
200004fe:	8532                	mv	a0,a2
20000500:	8082                	ret

20000502 <dif_aes_reset>:
dif_aes_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:206

dif_aes_result_t dif_aes_reset(const dif_aes_t *aes) {
  if (aes == NULL) {
20000502:	c515                	beqz	a0,2000052e <dif_aes_reset+0x2c>
20000504:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
MMIO_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000506:	5df0                	lw	a2,124(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000508:	8a05                	andi	a2,a2,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:91
  while (!aes_idle(aes)) {
2000050a:	de75                	beqz	a2,20000506 <dif_aes_reset+0x4>
2000050c:	40000613          	li	a2,1024
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000510:	d9f0                	sw	a2,116(a1)
20000512:	d9f0                	sw	a2,116(a1)
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:108
  mmio_region_write32(aes->params.base_addr, AES_TRIGGER_REG_OFFSET,
20000514:	410c                	lw	a1,0(a0)
20000516:	4619                	li	a2,6
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000518:	ddb0                	sw	a2,120(a1)
2000051a:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000051c:	5de8                	lw	a0,124(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000051e:	8905                	andi	a0,a0,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:112
  while (!aes_idle(aes)) {
20000520:	dd75                	beqz	a0,2000051c <dif_aes_reset+0x1a>
20000522:	4501                	li	a0,0
20000524:	7c000613          	li	a2,1984
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000528:	d9f0                	sw	a2,116(a1)
2000052a:	d9f0                	sw	a2,116(a1)
dif_aes_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:225
      bitfield_field32_write(reg, AES_CTRL_SHADOWED_KEY_LEN_FIELD, 0xffffffff);

  aes_shadowed_write(aes->params.base_addr, AES_CTRL_SHADOWED_REG_OFFSET, reg);

  return kDifAesOk;
}
2000052c:	8082                	ret
2000052e:	4509                	li	a0,2
20000530:	8082                	ret

20000532 <dif_aes_start_ecb>:
dif_aes_start_ecb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:229

dif_aes_result_t dif_aes_start_ecb(const dif_aes_t *aes,
                                   const dif_aes_transaction_t *transaction,
                                   dif_aes_key_share_t key) {
20000532:	1141                	addi	sp,sp,-16
20000534:	c606                	sw	ra,12(sp)
20000536:	c422                	sw	s0,8(sp)
20000538:	c226                	sw	s1,4(sp)
2000053a:	842a                	mv	s0,a0
2000053c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:230
  if (aes == NULL || transaction == NULL) {
2000053e:	c821                	beqz	s0,2000058e <dif_aes_start_ecb+0x5c>
20000540:	c5b9                	beqz	a1,2000058e <dif_aes_start_ecb+0x5c>
20000542:	84b2                	mv	s1,a2
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000544:	4008                	lw	a0,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000546:	5d68                	lw	a0,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000548:	00157613          	andi	a2,a0,1
2000054c:	450d                	li	a0,3
dif_aes_start_ecb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:234
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
2000054e:	c221                	beqz	a2,2000058e <dif_aes_start_ecb+0x5c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:238
    return kDifAesBusy;
  }

  dif_aes_result_t result = configure(aes, transaction, kAesModeFieldValEcb);
20000550:	4605                	li	a2,1
20000552:	8522                	mv	a0,s0
20000554:	2091                	jal	20000598 <configure>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:239
  if (result != kDifAesOk) {
20000556:	ed05                	bnez	a0,2000058e <dif_aes_start_ecb+0x5c>
20000558:	4501                	li	a0,0
2000055a:	02000593          	li	a1,32
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
2000055e:	4010                	lw	a2,0(s0)
20000560:	00a486b3          	add	a3,s1,a0
20000564:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000566:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000568:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000056a:	c254                	sw	a3,4(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
2000056c:	feb519e3          	bne	a0,a1,2000055e <dif_aes_start_ecb+0x2c>
20000570:	4501                	li	a0,0
20000572:	02048593          	addi	a1,s1,32
20000576:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
2000057a:	4014                	lw	a3,0(s0)
2000057c:	00a58733          	add	a4,a1,a0
20000580:	4318                	lw	a4,0(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000582:	96aa                	add	a3,a3,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000584:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000586:	d2d8                	sw	a4,36(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000588:	fec519e3          	bne	a0,a2,2000057a <dif_aes_start_ecb+0x48>
2000058c:	4501                	li	a0,0
dif_aes_start_ecb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:250

  aes_set_multireg(aes, &key.share1[0], AES_KEY_SHARE1_MULTIREG_COUNT,
                   AES_KEY_SHARE1_0_REG_OFFSET);

  return kDifAesOk;
}
2000058e:	4492                	lw	s1,4(sp)
20000590:	4422                	lw	s0,8(sp)
20000592:	40b2                	lw	ra,12(sp)
20000594:	0141                	addi	sp,sp,16
20000596:	8082                	ret

20000598 <configure>:
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:140
  aes_key_field_val_t key_len_val = key_to_field(transaction->key_len);
20000598:	4198                	lw	a4,0(a1)
2000059a:	4789                	li	a5,2
2000059c:	4685                	li	a3,1
key_to_field():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:117
  switch (key) {
2000059e:	04e7e763          	bltu	a5,a4,200005ec <configure+0x54>
200005a2:	00271693          	slli	a3,a4,0x2
200005a6:	00002717          	auipc	a4,0x2
200005aa:	40a70713          	addi	a4,a4,1034 # 200029b0 <__umoddi3+0x358>
200005ae:	96ba                	add	a3,a3,a4
200005b0:	4294                	lw	a3,0(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200005b2:	0606                	slli	a2,a2,0x1
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:151
  if (transaction->mode == kDifAesModeDecrypt) {
200005b4:	41d8                	lw	a4,4(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200005b6:	07e67613          	andi	a2,a2,126
200005ba:	8e55                	or	a2,a2,a3
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:157
  if (transaction->operation == kDifAesOperationManual) {
200005bc:	4594                	lw	a3,8(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:151
  if (transaction->mode == kDifAesModeDecrypt) {
200005be:	177d                	addi	a4,a4,-1
200005c0:	00173713          	seqz	a4,a4
200005c4:	4785                	li	a5,1
200005c6:	8e59                	or	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:157
  if (transaction->operation == kDifAesOperationManual) {
200005c8:	00f69463          	bne	a3,a5,200005d0 <configure+0x38>
200005cc:	40066613          	ori	a2,a2,1024
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:165
  if (transaction->masking == kDifAesMaskingForceZero) {
200005d0:	45cc                	lw	a1,12(a1)
200005d2:	4681                	li	a3,0
200005d4:	15fd                	addi	a1,a1,-1
200005d6:	0015b593          	seqz	a1,a1
200005da:	777d                	lui	a4,0xfffff
200005dc:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_data_init_start+0xdfffca77>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:173
  aes_shadowed_write(aes->params.base_addr, AES_CTRL_SHADOWED_REG_OFFSET, reg);
200005e0:	4108                	lw	a0,0(a0)
200005e2:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:165
  if (transaction->masking == kDifAesMaskingForceZero) {
200005e4:	05ae                	slli	a1,a1,0xb
200005e6:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200005e8:	d96c                	sw	a1,116(a0)
200005ea:	d96c                	sw	a1,116(a0)
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:176
}
200005ec:	8536                	mv	a0,a3
200005ee:	8082                	ret

200005f0 <dif_aes_start_cbc>:
dif_aes_start_cbc():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:254

dif_aes_result_t dif_aes_start_cbc(const dif_aes_t *aes,
                                   const dif_aes_transaction_t *transaction,
                                   dif_aes_key_share_t key, dif_aes_iv_t iv) {
200005f0:	1141                	addi	sp,sp,-16
200005f2:	c606                	sw	ra,12(sp)
200005f4:	c422                	sw	s0,8(sp)
200005f6:	c226                	sw	s1,4(sp)
200005f8:	c04a                	sw	s2,0(sp)
200005fa:	84aa                	mv	s1,a0
200005fc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:255
  if (aes == NULL || transaction == NULL) {
200005fe:	c4a5                	beqz	s1,20000666 <dif_aes_start_cbc+0x76>
20000600:	c1bd                	beqz	a1,20000666 <dif_aes_start_cbc+0x76>
20000602:	8432                	mv	s0,a2
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000604:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000606:	5d68                	lw	a0,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000608:	00157613          	andi	a2,a0,1
2000060c:	450d                	li	a0,3
dif_aes_start_cbc():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:259
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
2000060e:	ce21                	beqz	a2,20000666 <dif_aes_start_cbc+0x76>
20000610:	8936                	mv	s2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:263
    return kDifAesBusy;
  }

  dif_aes_result_t result = configure(aes, transaction, kAesModeFieldValCbc);
20000612:	4609                	li	a2,2
20000614:	8526                	mv	a0,s1
20000616:	3749                	jal	20000598 <configure>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:264
  if (result != kDifAesOk) {
20000618:	e539                	bnez	a0,20000666 <dif_aes_start_cbc+0x76>
2000061a:	4501                	li	a0,0
2000061c:	02000593          	li	a1,32
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000620:	4090                	lw	a2,0(s1)
20000622:	00a406b3          	add	a3,s0,a0
20000626:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000628:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
2000062a:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000062c:	c254                	sw	a3,4(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
2000062e:	feb519e3          	bne	a0,a1,20000620 <dif_aes_start_cbc+0x30>
20000632:	4501                	li	a0,0
20000634:	02040593          	addi	a1,s0,32
20000638:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
2000063c:	4094                	lw	a3,0(s1)
2000063e:	00a58733          	add	a4,a1,a0
20000642:	4318                	lw	a4,0(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000644:	96aa                	add	a3,a3,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000646:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000648:	d2d8                	sw	a4,36(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
2000064a:	fec519e3          	bne	a0,a2,2000063c <dif_aes_start_cbc+0x4c>
2000064e:	4501                	li	a0,0
20000650:	45c1                	li	a1,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000652:	4090                	lw	a2,0(s1)
20000654:	00a906b3          	add	a3,s2,a0
20000658:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000065a:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
2000065c:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000065e:	c274                	sw	a3,68(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000660:	feb519e3          	bne	a0,a1,20000652 <dif_aes_start_cbc+0x62>
20000664:	4501                	li	a0,0
dif_aes_start_cbc():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:277
                   AES_KEY_SHARE1_0_REG_OFFSET);

  aes_set_multireg(aes, &iv.iv[0], AES_IV_MULTIREG_COUNT, AES_IV_0_REG_OFFSET);

  return kDifAesOk;
}
20000666:	4902                	lw	s2,0(sp)
20000668:	4492                	lw	s1,4(sp)
2000066a:	4422                	lw	s0,8(sp)
2000066c:	40b2                	lw	ra,12(sp)
2000066e:	0141                	addi	sp,sp,16
20000670:	8082                	ret

20000672 <dif_aes_start_ctr>:
dif_aes_start_ctr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:281

dif_aes_result_t dif_aes_start_ctr(const dif_aes_t *aes,
                                   const dif_aes_transaction_t *transaction,
                                   dif_aes_key_share_t key, dif_aes_iv_t iv) {
20000672:	1141                	addi	sp,sp,-16
20000674:	c606                	sw	ra,12(sp)
20000676:	c422                	sw	s0,8(sp)
20000678:	c226                	sw	s1,4(sp)
2000067a:	c04a                	sw	s2,0(sp)
2000067c:	84aa                	mv	s1,a0
2000067e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:282
  if (aes == NULL || transaction == NULL) {
20000680:	c4a5                	beqz	s1,200006e8 <dif_aes_start_ctr+0x76>
20000682:	c1bd                	beqz	a1,200006e8 <dif_aes_start_ctr+0x76>
20000684:	8432                	mv	s0,a2
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000686:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000688:	5d68                	lw	a0,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000068a:	00157613          	andi	a2,a0,1
2000068e:	450d                	li	a0,3
dif_aes_start_ctr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:286
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
20000690:	ce21                	beqz	a2,200006e8 <dif_aes_start_ctr+0x76>
20000692:	8936                	mv	s2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:290
    return kDifAesBusy;
  }

  dif_aes_result_t result = configure(aes, transaction, kAesModeFieldValCtr);
20000694:	4641                	li	a2,16
20000696:	8526                	mv	a0,s1
20000698:	3701                	jal	20000598 <configure>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:291
  if (result != kDifAesOk) {
2000069a:	e539                	bnez	a0,200006e8 <dif_aes_start_ctr+0x76>
2000069c:	4501                	li	a0,0
2000069e:	02000593          	li	a1,32
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
200006a2:	4090                	lw	a2,0(s1)
200006a4:	00a406b3          	add	a3,s0,a0
200006a8:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200006aa:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
200006ac:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200006ae:	c254                	sw	a3,4(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
200006b0:	feb519e3          	bne	a0,a1,200006a2 <dif_aes_start_ctr+0x30>
200006b4:	4501                	li	a0,0
200006b6:	02040593          	addi	a1,s0,32
200006ba:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
200006be:	4094                	lw	a3,0(s1)
200006c0:	00a58733          	add	a4,a1,a0
200006c4:	4318                	lw	a4,0(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200006c6:	96aa                	add	a3,a3,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
200006c8:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200006ca:	d2d8                	sw	a4,36(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
200006cc:	fec519e3          	bne	a0,a2,200006be <dif_aes_start_ctr+0x4c>
200006d0:	4501                	li	a0,0
200006d2:	45c1                	li	a1,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
200006d4:	4090                	lw	a2,0(s1)
200006d6:	00a906b3          	add	a3,s2,a0
200006da:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200006dc:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
200006de:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200006e0:	c274                	sw	a3,68(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
200006e2:	feb519e3          	bne	a0,a1,200006d4 <dif_aes_start_ctr+0x62>
200006e6:	4501                	li	a0,0
dif_aes_start_ctr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:304
                   AES_KEY_SHARE1_0_REG_OFFSET);

  aes_set_multireg(aes, &iv.iv[0], AES_IV_MULTIREG_COUNT, AES_IV_0_REG_OFFSET);

  return kDifAesOk;
}
200006e8:	4902                	lw	s2,0(sp)
200006ea:	4492                	lw	s1,4(sp)
200006ec:	4422                	lw	s0,8(sp)
200006ee:	40b2                	lw	ra,12(sp)
200006f0:	0141                	addi	sp,sp,16
200006f2:	8082                	ret

200006f4 <dif_aes_end>:
dif_aes_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:307

dif_aes_result_t dif_aes_end(const dif_aes_t *aes) {
  if (aes == NULL) {
200006f4:	c51d                	beqz	a0,20000722 <dif_aes_end+0x2e>
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
200006f6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200006f8:	5e6c                	lw	a1,124(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200006fa:	0015f693          	andi	a3,a1,1
200006fe:	458d                	li	a1,3
dif_aes_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:311
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
20000700:	c295                	beqz	a3,20000724 <dif_aes_end+0x30>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000702:	5e6c                	lw	a1,124(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000704:	8985                	andi	a1,a1,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:91
  while (!aes_idle(aes)) {
20000706:	ddf5                	beqz	a1,20000702 <dif_aes_end+0xe>
20000708:	40000593          	li	a1,1024
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000070c:	da6c                	sw	a1,116(a2)
2000070e:	da6c                	sw	a1,116(a2)
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:108
  mmio_region_write32(aes->params.base_addr, AES_TRIGGER_REG_OFFSET,
20000710:	410c                	lw	a1,0(a0)
20000712:	4619                	li	a2,6
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000714:	ddb0                	sw	a2,120(a1)
20000716:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000718:	5d6c                	lw	a1,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000071a:	8985                	andi	a1,a1,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:112
  while (!aes_idle(aes)) {
2000071c:	ddf5                	beqz	a1,20000718 <dif_aes_end+0x24>
2000071e:	4581                	li	a1,0
20000720:	a011                	j	20000724 <dif_aes_end+0x30>
20000722:	4589                	li	a1,2
dif_aes_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:318
  }

  aes_clear_internal_state(aes);

  return kDifAesOk;
}
20000724:	852e                	mv	a0,a1
20000726:	8082                	ret

20000728 <dif_aes_load_data>:
dif_aes_load_data():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:322

dif_aes_result_t dif_aes_load_data(const dif_aes_t *aes,
                                   const dif_aes_data_t data) {
  if (aes == NULL) {
20000728:	c51d                	beqz	a0,20000756 <dif_aes_load_data+0x2e>
aes_input_ready():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:69
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
2000072a:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000072c:	5ef0                	lw	a2,124(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000072e:	01067713          	andi	a4,a2,16
20000732:	460d                	li	a2,3
dif_aes_load_data():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:326
    return kDifAesBadArg;
  }

  if (!aes_input_ready(aes)) {
20000734:	c315                	beqz	a4,20000758 <dif_aes_load_data+0x30>
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000736:	4198                	lw	a4,0(a1)
20000738:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000073a:	caf8                	sw	a4,84(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
2000073c:	0591                	addi	a1,a1,4
2000073e:	46b1                	li	a3,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000740:	4118                	lw	a4,0(a0)
20000742:	00c587b3          	add	a5,a1,a2
20000746:	439c                	lw	a5,0(a5)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000748:	9732                	add	a4,a4,a2
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
2000074a:	0611                	addi	a2,a2,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000074c:	cf3c                	sw	a5,88(a4)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
2000074e:	fed619e3          	bne	a2,a3,20000740 <dif_aes_load_data+0x18>
20000752:	4601                	li	a2,0
20000754:	a011                	j	20000758 <dif_aes_load_data+0x30>
20000756:	4609                	li	a2,2
dif_aes_load_data():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:334

  aes_set_multireg(aes, &data.data[0], AES_DATA_IN_MULTIREG_COUNT,
                   AES_DATA_IN_0_REG_OFFSET);

  return kDifAesOk;
}
20000758:	8532                	mv	a0,a2
2000075a:	8082                	ret

2000075c <dif_aes_read_output>:
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:337

dif_aes_result_t dif_aes_read_output(const dif_aes_t *aes,
                                     dif_aes_data_t *data) {
2000075c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:338
  if (aes == NULL || data == NULL) {
2000075e:	c51d                	beqz	a0,2000078c <dif_aes_read_output+0x30>
20000760:	c595                	beqz	a1,2000078c <dif_aes_read_output+0x30>
aes_output_valid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:64
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000762:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000764:	5ef0                	lw	a2,124(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000766:	00867713          	andi	a4,a2,8
2000076a:	4611                	li	a2,4
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:342
    return kDifAesBadArg;
  }

  if (!aes_output_valid(aes)) {
2000076c:	c305                	beqz	a4,2000078c <dif_aes_read_output+0x30>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000076e:	52f4                	lw	a3,100(a3)
20000770:	4601                	li	a2,0
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
  }

  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
    ptrdiff_t offset = AES_DATA_OUT_0_REG_OFFSET + (i * sizeof(uint32_t));

    data->data[i] = mmio_region_read32(aes->params.base_addr, offset);
20000772:	c194                	sw	a3,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:346
  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
20000774:	0591                	addi	a1,a1,4
20000776:	46b1                	li	a3,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
    data->data[i] = mmio_region_read32(aes->params.base_addr, offset);
20000778:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000077a:	9732                	add	a4,a4,a2
2000077c:	5738                	lw	a4,104(a4)
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
2000077e:	00c587b3          	add	a5,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:346
  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
20000782:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
    data->data[i] = mmio_region_read32(aes->params.base_addr, offset);
20000784:	c398                	sw	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:346
  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
20000786:	fed619e3          	bne	a2,a3,20000778 <dif_aes_read_output+0x1c>
2000078a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:353
  }

  return kDifAesOk;
}
2000078c:	8532                	mv	a0,a2
2000078e:	8082                	ret

20000790 <dif_aes_trigger>:
dif_aes_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:357

dif_aes_result_t dif_aes_trigger(const dif_aes_t *aes,
                                 dif_aes_trigger_t trigger) {
  if (aes == NULL) {
20000790:	c105                	beqz	a0,200007b0 <dif_aes_trigger+0x20>
20000792:	468d                	li	a3,3
20000794:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:362
    return kDifAesBadArg;
  }

  uint32_t reg;
  switch (trigger) {
20000796:	00b6ee63          	bltu	a3,a1,200007b2 <dif_aes_trigger+0x22>
2000079a:	058a                	slli	a1,a1,0x2
2000079c:	00002617          	auipc	a2,0x2
200007a0:	44060613          	addi	a2,a2,1088 # 20002bdc <__clz_tab+0x110>
200007a4:	95b2                	add	a1,a1,a2
200007a6:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:379
      break;
    default:
      return kDifAesError;
  }

  mmio_region_write32(aes->params.base_addr, AES_TRIGGER_REG_OFFSET, reg);
200007a8:	4108                	lw	a0,0(a0)
200007aa:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200007ac:	dd2c                	sw	a1,120(a0)
200007ae:	a011                	j	200007b2 <dif_aes_trigger+0x22>
200007b0:	4609                	li	a2,2
dif_aes_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:382

  return kDifAesOk;
}
200007b2:	8532                	mv	a0,a2
200007b4:	8082                	ret

200007b6 <dif_aes_get_status>:
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:385

dif_aes_result_t dif_aes_get_status(const dif_aes_t *aes, dif_aes_status_t flag,
                                    bool *set) {
200007b6:	86aa                	mv	a3,a0
200007b8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:386
  if (aes == NULL || set == NULL) {
200007ba:	c2c1                	beqz	a3,2000083a <dif_aes_get_status+0x84>
200007bc:	ce3d                	beqz	a2,2000083a <dif_aes_get_status+0x84>
200007be:	4709                	li	a4,2
200007c0:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:390
    return kDifAesBadArg;
  }

  switch (flag) {
200007c2:	02b75063          	bge	a4,a1,200007e2 <dif_aes_get_status+0x2c>
200007c6:	4711                	li	a4,4
200007c8:	02b74963          	blt	a4,a1,200007fa <dif_aes_get_status+0x44>
200007cc:	470d                	li	a4,3
200007ce:	04e58163          	beq	a1,a4,20000810 <dif_aes_get_status+0x5a>
200007d2:	4711                	li	a4,4
200007d4:	06e59363          	bne	a1,a4,2000083a <dif_aes_get_status+0x84>
aes_input_ready():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:69
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
200007d8:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200007da:	5d6c                	lw	a1,124(a0)
200007dc:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:404
      break;
    case kDifAesStatusOutputValid:
      *set = aes_output_valid(aes);
      break;
    case kDifAesStatusInputReady:
      *set = aes_input_ready(aes);
200007de:	8191                	srli	a1,a1,0x4
200007e0:	a891                	j	20000834 <dif_aes_get_status+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:390
  switch (flag) {
200007e2:	cd85                	beqz	a1,2000081a <dif_aes_get_status+0x64>
200007e4:	4705                	li	a4,1
200007e6:	02e58e63          	beq	a1,a4,20000822 <dif_aes_get_status+0x6c>
200007ea:	4709                	li	a4,2
200007ec:	04e59763          	bne	a1,a4,2000083a <dif_aes_get_status+0x84>
aes_output_lost():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:59
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
200007f0:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200007f2:	5d6c                	lw	a1,124(a0)
200007f4:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:398
      *set = aes_output_lost(aes);
200007f6:	8189                	srli	a1,a1,0x2
200007f8:	a835                	j	20000834 <dif_aes_get_status+0x7e>
200007fa:	4715                	li	a4,5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:390
  switch (flag) {
200007fc:	02e58863          	beq	a1,a4,2000082c <dif_aes_get_status+0x76>
20000800:	4719                	li	a4,6
20000802:	02e59c63          	bne	a1,a4,2000083a <dif_aes_get_status+0x84>
aes_alert_recoverable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:79
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000806:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000808:	5d6c                	lw	a1,124(a0)
2000080a:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:410
      break;
    case kDifAesStatusAlertFatalFault:
      *set = aes_alert_fatal(aes);
      break;
    case kDifAesStatusAlertRecovCtrlUpdateErr:
      *set = aes_alert_recoverable(aes);
2000080c:	8195                	srli	a1,a1,0x5
2000080e:	a01d                	j	20000834 <dif_aes_get_status+0x7e>
aes_output_valid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:64
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000810:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000812:	5d6c                	lw	a1,124(a0)
20000814:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:401
      *set = aes_output_valid(aes);
20000816:	818d                	srli	a1,a1,0x3
20000818:	a831                	j	20000834 <dif_aes_get_status+0x7e>
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
2000081a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000081c:	5d6c                	lw	a1,124(a0)
2000081e:	4501                	li	a0,0
20000820:	a811                	j	20000834 <dif_aes_get_status+0x7e>
aes_stalled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:54
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000822:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000824:	5d6c                	lw	a1,124(a0)
20000826:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:395
      *set = aes_stalled(aes);
20000828:	8185                	srli	a1,a1,0x1
2000082a:	a029                	j	20000834 <dif_aes_get_status+0x7e>
aes_alert_fatal():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:74
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
2000082c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000082e:	5d6c                	lw	a1,124(a0)
20000830:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:407
      *set = aes_alert_fatal(aes);
20000832:	8199                	srli	a1,a1,0x6
20000834:	8985                	andi	a1,a1,1
20000836:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:417
    default:
      return kDifAesError;
  }

  return kDifAesOk;
}
2000083a:	8082                	ret

2000083c <dif_aes_alert_force>:
dif_aes_alert_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:422

DIF_WARN_UNUSED_RESULT
dif_aes_result_t dif_aes_alert_force(const dif_aes_t *aes,
                                     dif_aes_alert_t alert) {
  if (aes == NULL) {
2000083c:	cd19                	beqz	a0,2000085a <dif_aes_alert_force+0x1e>
2000083e:	862a                	mv	a2,a0
20000840:	4505                	li	a0,1
20000842:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:427
    return kDifAesBadArg;
  }

  bitfield_bit32_index_t index;
  switch (alert) {
20000844:	c589                	beqz	a1,2000084e <dif_aes_alert_force+0x12>
20000846:	4685                	li	a3,1
20000848:	00d59863          	bne	a1,a3,20000858 <dif_aes_alert_force+0x1c>
2000084c:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:439
    default:
      return kDifAesError;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(aes->params.base_addr, AES_ALERT_TEST_REG_OFFSET, reg);
2000084e:	420c                	lw	a1,0(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000850:	00d51533          	sll	a0,a0,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000854:	c188                	sw	a0,0(a1)
20000856:	4501                	li	a0,0
dif_aes_alert_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:442

  return kDifAesOk;
}
20000858:	8082                	ret
2000085a:	4509                	li	a0,2
2000085c:	8082                	ret
	...

20000860 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000860:	10500073          	wfi
20000864:	8082                	ret

20000866 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000866:	1141                	addi	sp,sp,-16
20000868:	c606                	sw	ra,12(sp)
2000086a:	00002597          	auipc	a1,0x2
2000086e:	1d658593          	addi	a1,a1,470 # 20002a40 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000872:	41d0                	lw	a2,4(a1)
20000874:	4194                	lw	a3,0(a1)
20000876:	02a605b3          	mul	a1,a2,a0
2000087a:	02a6b633          	mulhu	a2,a3,a0
2000087e:	95b2                	add	a1,a1,a2
20000880:	02a68533          	mul	a0,a3,a0
20000884:	000f4637          	lui	a2,0xf4
20000888:	24060613          	addi	a2,a2,576 # f4240 <print_exc_msg.kLogFields.6+0xe41dc>
2000088c:	4681                	li	a3,0
2000088e:	265010ef          	jal	ra,200022f2 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000892:	4801                	li	a6,0
20000894:	4701                	li	a4,0

20000896 <read0>:
20000896:	b8002873          	csrr	a6,mcycleh
2000089a:	b00026f3          	csrr	a3,mcycle
2000089e:	b8002773          	csrr	a4,mcycleh
200008a2:	fee81ae3          	bne	a6,a4,20000896 <read0>
200008a6:	4781                	li	a5,0
200008a8:	4601                	li	a2,0

200008aa <read1>:
200008aa:	b80027f3          	csrr	a5,mcycleh
200008ae:	b0002773          	csrr	a4,mcycle
200008b2:	b8002673          	csrr	a2,mcycleh
200008b6:	fec79ae3          	bne	a5,a2,200008aa <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200008ba:	00d73633          	sltu	a2,a4,a3
200008be:	410787b3          	sub	a5,a5,a6
200008c2:	8f91                	sub	a5,a5,a2
200008c4:	00b78663          	beq	a5,a1,200008d0 <read1+0x26>
200008c8:	00b7b733          	sltu	a4,a5,a1
200008cc:	ff69                	bnez	a4,200008a6 <read0+0x10>
200008ce:	a031                	j	200008da <read1+0x30>
200008d0:	40d70633          	sub	a2,a4,a3
200008d4:	00a63733          	sltu	a4,a2,a0
200008d8:	f779                	bnez	a4,200008a6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200008da:	40b2                	lw	ra,12(sp)
200008dc:	0141                	addi	sp,sp,16
200008de:	8082                	ret

200008e0 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
200008e0:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
200008e4:	bff5                	j	200008e0 <abort>
	...

200008e8 <prng_seed>:
prng_seed():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:159
 * TODO(alphan): Using MT for now as a proof of concept to minimize host-side
 * changes. We should probably replace this with a PRNG from xoshiro* family
 * for PRNGs, e.g. xoshiro128++, for better performance and less overhead.
 */

void prng_seed(uint32_t seed) { init_by_array(&seed, 1); }
200008e8:	012bd5b7          	lui	a1,0x12bd
200008ec:	6aa58693          	addi	a3,a1,1706 # 12bd6aa <print_exc_msg.kLogFields.6+0x12ad646>
200008f0:	effff297          	auipc	t0,0xeffff
200008f4:	73028293          	addi	t0,t0,1840 # 10000020 <mt>
init_genrand():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:61
  mt[0] = s & 0xffffffffUL;
200008f8:	00d2a023          	sw	a3,0(t0)
200008fc:	effff817          	auipc	a6,0xeffff
20000900:	70480813          	addi	a6,a6,1796 # 10000000 <_data_start>
20000904:	4705                	li	a4,1
20000906:	00e82023          	sw	a4,0(a6)
2000090a:	00428793          	addi	a5,t0,4
2000090e:	6c079637          	lui	a2,0x6c079
20000912:	96560613          	addi	a2,a2,-1691 # 6c078965 <_data_init_start+0x4c075bdd>
20000916:	27000893          	li	a7,624
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:63
    mt[mti] = (1812433253UL * (mt[mti - 1] ^ (mt[mti - 1] >> 30)) + mti);
2000091a:	01e6d593          	srli	a1,a3,0x1e
2000091e:	8db5                	xor	a1,a1,a3
20000920:	02c585b3          	mul	a1,a1,a2
20000924:	00e586b3          	add	a3,a1,a4
20000928:	c394                	sw	a3,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:62
  for (mti = 1; mti < N; mti++) {
2000092a:	0705                	addi	a4,a4,1
2000092c:	0791                	addi	a5,a5,4
2000092e:	ff1716e3          	bne	a4,a7,2000091a <prng_seed+0x32>
20000932:	27000593          	li	a1,624
20000936:	00b82023          	sw	a1,0(a6)
2000093a:	4605                	li	a2,1
2000093c:	d9000793          	li	a5,-624
20000940:	001965b7          	lui	a1,0x196
20000944:	60d58313          	addi	t1,a1,1549 # 19660d <print_exc_msg.kLogFields.6+0x1865a9>
20000948:	26f00893          	li	a7,623
2000094c:	6585                	lui	a1,0x1
2000094e:	9bc58593          	addi	a1,a1,-1604 # 9bc <__DYNAMIC+0x9bc>
20000952:	00b28833          	add	a6,t0,a1
init_by_array():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:84
    mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >> 30)) * 1664525UL)) +
20000956:	00261593          	slli	a1,a2,0x2
2000095a:	9596                	add	a1,a1,t0
2000095c:	ffc5a683          	lw	a3,-4(a1)
20000960:	83be                	mv	t2,a5
20000962:	419c                	lw	a5,0(a1)
20000964:	01e6d713          	srli	a4,a3,0x1e
20000968:	8eb9                	xor	a3,a3,a4
2000096a:	026686b3          	mul	a3,a3,t1
2000096e:	8ebd                	xor	a3,a3,a5
20000970:	96aa                	add	a3,a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:86
    mt[i] &= 0xffffffffUL;   /* for WORDSIZE > 32 machines */
20000972:	c194                	sw	a3,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:89
    if (i >= N) {
20000974:	01165463          	bge	a2,a7,2000097c <prng_seed+0x94>
20000978:	0605                	addi	a2,a2,1
2000097a:	a031                	j	20000986 <prng_seed+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:90
      mt[0] = mt[N - 1];
2000097c:	00082583          	lw	a1,0(a6)
20000980:	00b2a023          	sw	a1,0(t0)
20000984:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:83
  for (; k; k--) {
20000986:	00138793          	addi	a5,t2,1
2000098a:	fc77f6e3          	bgeu	a5,t2,20000956 <prng_seed+0x6e>
2000098e:	d9100793          	li	a5,-623
20000992:	5d589537          	lui	a0,0x5d589
20000996:	b6550313          	addi	t1,a0,-1179 # 5d588b65 <_data_init_start+0x3d585ddd>
2000099a:	26f00893          	li	a7,623
2000099e:	6585                	lui	a1,0x1
200009a0:	9bc58593          	addi	a1,a1,-1604 # 9bc <__DYNAMIC+0x9bc>
200009a4:	00b28833          	add	a6,t0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:97
    mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >> 30)) * 1566083941UL)) -
200009a8:	00261593          	slli	a1,a2,0x2
200009ac:	9596                	add	a1,a1,t0
200009ae:	ffc5a683          	lw	a3,-4(a1)
200009b2:	873e                	mv	a4,a5
200009b4:	419c                	lw	a5,0(a1)
200009b6:	01e6d513          	srli	a0,a3,0x1e
200009ba:	8d35                	xor	a0,a0,a3
200009bc:	02650533          	mul	a0,a0,t1
200009c0:	8d3d                	xor	a0,a0,a5
200009c2:	8d11                	sub	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:99
    mt[i] &= 0xffffffffUL; /* for WORDSIZE > 32 machines */
200009c4:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:101
    if (i >= N) {
200009c6:	01165463          	bge	a2,a7,200009ce <prng_seed+0xe6>
200009ca:	0605                	addi	a2,a2,1
200009cc:	a031                	j	200009d8 <prng_seed+0xf0>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:102
      mt[0] = mt[N - 1];
200009ce:	00082503          	lw	a0,0(a6)
200009d2:	00a2a023          	sw	a0,0(t0)
200009d6:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:96
  for (k = N - 1; k; k--) {
200009d8:	00170793          	addi	a5,a4,1
200009dc:	fce7f6e3          	bgeu	a5,a4,200009a8 <prng_seed+0xc0>
200009e0:	80000537          	lui	a0,0x80000
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:107
  mt[0] = 0x80000000UL; /* MSB is 1; assuring non-zero initial array */
200009e4:	00a2a023          	sw	a0,0(t0)
prng_seed():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:159
void prng_seed(uint32_t seed) { init_by_array(&seed, 1); }
200009e8:	8082                	ret

200009ea <prng_rand_byte>:
prng_rand_byte():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:161

uint8_t prng_rand_byte(void) {
200009ea:	1141                	addi	sp,sp,-16
200009ec:	c606                	sw	ra,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:172
     * efficient since it introduces a random delay for each byte.
     *
     * TODO(alphan): Use `random.randbytes()` on the host side instead of
     * `ktp.next()` and update this function to match.
     */
    rand = genrand_int32() >> 23;
200009ee:	2809                	jal	20000a00 <genrand_int32>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:173
  } while (rand > 255);
200009f0:	fe054fe3          	bltz	a0,200009ee <prng_rand_byte+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:172
    rand = genrand_int32() >> 23;
200009f4:	815d                	srli	a0,a0,0x17
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:174
  return rand;
200009f6:	0ff57513          	andi	a0,a0,255
200009fa:	40b2                	lw	ra,12(sp)
200009fc:	0141                	addi	sp,sp,16
200009fe:	8082                	ret

20000a00 <genrand_int32>:
genrand_int32():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:117
  if (mti >= N) { /* generate N words at one time */
20000a00:	effff817          	auipc	a6,0xeffff
20000a04:	60080813          	addi	a6,a6,1536 # 10000000 <_data_start>
20000a08:	00082503          	lw	a0,0(a6)
20000a0c:	26f00593          	li	a1,623
20000a10:	10a5da63          	bge	a1,a0,20000b24 <genrand_int32+0x124>
20000a14:	27100593          	li	a1,625
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:120
    if (mti == N + 1)       /* if init_genrand() has not been called, */
20000a18:	04b51363          	bne	a0,a1,20000a5e <genrand_int32+0x5e>
20000a1c:	6505                	lui	a0,0x1
20000a1e:	57150513          	addi	a0,a0,1393 # 1571 <__DYNAMIC+0x1571>
20000a22:	effff597          	auipc	a1,0xeffff
20000a26:	5fe58593          	addi	a1,a1,1534 # 10000020 <mt>
init_genrand():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:61
  mt[0] = s & 0xffffffffUL;
20000a2a:	c188                	sw	a0,0(a1)
20000a2c:	4605                	li	a2,1
20000a2e:	00c82023          	sw	a2,0(a6)
20000a32:	0591                	addi	a1,a1,4
20000a34:	6c0796b7          	lui	a3,0x6c079
20000a38:	96568693          	addi	a3,a3,-1691 # 6c078965 <_data_init_start+0x4c075bdd>
20000a3c:	27000713          	li	a4,624
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:63
    mt[mti] = (1812433253UL * (mt[mti - 1] ^ (mt[mti - 1] >> 30)) + mti);
20000a40:	01e55793          	srli	a5,a0,0x1e
20000a44:	8d3d                	xor	a0,a0,a5
20000a46:	02d50533          	mul	a0,a0,a3
20000a4a:	9532                	add	a0,a0,a2
20000a4c:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:62
  for (mti = 1; mti < N; mti++) {
20000a4e:	0605                	addi	a2,a2,1
20000a50:	0591                	addi	a1,a1,4
20000a52:	fee617e3          	bne	a2,a4,20000a40 <genrand_int32+0x40>
20000a56:	27000513          	li	a0,624
20000a5a:	00a82023          	sw	a0,0(a6)
genrand_int32():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:124
      y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
20000a5e:	4701                	li	a4,0
20000a60:	800008b7          	lui	a7,0x80000
20000a64:	effffe17          	auipc	t3,0xeffff
20000a68:	5bce0e13          	addi	t3,t3,1468 # 10000020 <mt>
20000a6c:	000e2583          	lw	a1,0(t3)
20000a70:	ffe88313          	addi	t1,a7,-2 # 7ffffffe <_data_init_start+0x5fffd276>
20000a74:	00002397          	auipc	t2,0x2
20000a78:	17838393          	addi	t2,t2,376 # 20002bec <genrand_int32.mag01>
20000a7c:	38c00293          	li	t0,908
20000a80:	01c707b3          	add	a5,a4,t3
20000a84:	0115feb3          	and	t4,a1,a7
20000a88:	43cc                	lw	a1,4(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:125
      mt[kk] = mt[kk + M] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000a8a:	6347a683          	lw	a3,1588(a5)
20000a8e:	0015f613          	andi	a2,a1,1
20000a92:	060a                	slli	a2,a2,0x2
20000a94:	961e                	add	a2,a2,t2
20000a96:	4210                	lw	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:124
      y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
20000a98:	0065f533          	and	a0,a1,t1
20000a9c:	01d56533          	or	a0,a0,t4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:125
      mt[kk] = mt[kk + M] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000aa0:	8105                	srli	a0,a0,0x1
20000aa2:	8e35                	xor	a2,a2,a3
20000aa4:	8d31                	xor	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:123
    for (kk = 0; kk < N - M; kk++) {
20000aa6:	0711                	addi	a4,a4,4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:125
      mt[kk] = mt[kk + M] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000aa8:	c388                	sw	a0,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:123
    for (kk = 0; kk < N - M; kk++) {
20000aaa:	fc571be3          	bne	a4,t0,20000a80 <genrand_int32+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:128
      y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
20000aae:	38ce2703          	lw	a4,908(t3)
20000ab2:	4781                	li	a5,0
20000ab4:	800008b7          	lui	a7,0x80000
20000ab8:	63000293          	li	t0,1584
20000abc:	01c78533          	add	a0,a5,t3
20000ac0:	01177eb3          	and	t4,a4,a7
20000ac4:	39052703          	lw	a4,912(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:129
      mt[kk] = mt[kk + (M - N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000ac8:	4114                	lw	a3,0(a0)
20000aca:	00177593          	andi	a1,a4,1
20000ace:	058a                	slli	a1,a1,0x2
20000ad0:	959e                	add	a1,a1,t2
20000ad2:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:128
      y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
20000ad4:	00677633          	and	a2,a4,t1
20000ad8:	01d66633          	or	a2,a2,t4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:129
      mt[kk] = mt[kk + (M - N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000adc:	8205                	srli	a2,a2,0x1
20000ade:	8db5                	xor	a1,a1,a3
20000ae0:	8db1                	xor	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:127
    for (; kk < N - 1; kk++) {
20000ae2:	0791                	addi	a5,a5,4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:129
      mt[kk] = mt[kk + (M - N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000ae4:	38b52623          	sw	a1,908(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:127
    for (; kk < N - 1; kk++) {
20000ae8:	fc579ae3          	bne	a5,t0,20000abc <genrand_int32+0xbc>
20000aec:	6505                	lui	a0,0x1
20000aee:	9bc50513          	addi	a0,a0,-1604 # 9bc <__DYNAMIC+0x9bc>
20000af2:	9572                	add	a0,a0,t3
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:131
    y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
20000af4:	410c                	lw	a1,0(a0)
20000af6:	000e2703          	lw	a4,0(t3)
20000afa:	80000637          	lui	a2,0x80000
20000afe:	8df1                	and	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:132
    mt[N - 1] = mt[M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000b00:	00177613          	andi	a2,a4,1
20000b04:	060a                	slli	a2,a2,0x2
20000b06:	961e                	add	a2,a2,t2
20000b08:	630e2683          	lw	a3,1584(t3)
20000b0c:	4210                	lw	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:131
    y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
20000b0e:	006777b3          	and	a5,a4,t1
20000b12:	8ddd                	or	a1,a1,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:132
    mt[N - 1] = mt[M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
20000b14:	8185                	srli	a1,a1,0x1
20000b16:	8e35                	xor	a2,a2,a3
20000b18:	8db1                	xor	a1,a1,a2
20000b1a:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:134
    mti = 0;
20000b1c:	00082023          	sw	zero,0(a6)
20000b20:	4585                	li	a1,1
20000b22:	a819                	j	20000b38 <genrand_int32+0x138>
20000b24:	00251593          	slli	a1,a0,0x2
20000b28:	effff617          	auipc	a2,0xeffff
20000b2c:	4f860613          	addi	a2,a2,1272 # 10000020 <mt>
20000b30:	95b2                	add	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:137
  y = mt[mti++];
20000b32:	4198                	lw	a4,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:117
  if (mti >= N) { /* generate N words at one time */
20000b34:	00150593          	addi	a1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:140
  y ^= (y >> 11);
20000b38:	00b75513          	srli	a0,a4,0xb
20000b3c:	8d39                	xor	a0,a0,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:141
  y ^= (y << 7) & 0x9d2c5680UL;
20000b3e:	00751613          	slli	a2,a0,0x7
20000b42:	9d2c56b7          	lui	a3,0x9d2c5
20000b46:	68068693          	addi	a3,a3,1664 # 9d2c5680 <_data_init_start+0x7d2c28f8>
20000b4a:	8e75                	and	a2,a2,a3
20000b4c:	8d31                	xor	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:142
  y ^= (y << 15) & 0xefc60000UL;
20000b4e:	00f51613          	slli	a2,a0,0xf
20000b52:	efc606b7          	lui	a3,0xefc60
20000b56:	8e75                	and	a2,a2,a3
20000b58:	8d31                	xor	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:143
  y ^= (y >> 18);
20000b5a:	01255613          	srli	a2,a0,0x12
20000b5e:	8d31                	xor	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:137
  y = mt[mti++];
20000b60:	00b82023          	sw	a1,0(a6)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:145
  return y;
20000b64:	8082                	ret

20000b66 <prng_rand_bytes>:
prng_rand_bytes():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:177
}

void prng_rand_bytes(uint8_t *buffer, size_t buffer_len) {
20000b66:	1141                	addi	sp,sp,-16
20000b68:	c606                	sw	ra,12(sp)
20000b6a:	c422                	sw	s0,8(sp)
20000b6c:	c226                	sw	s1,4(sp)
20000b6e:	c04a                	sw	s2,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:178
  for (size_t i = 0; i < buffer_len; ++i) {
20000b70:	cd99                	beqz	a1,20000b8e <prng_rand_bytes+0x28>
20000b72:	842e                	mv	s0,a1
20000b74:	892a                	mv	s2,a0
20000b76:	4481                	li	s1,0
prng_rand_byte():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:172
    rand = genrand_int32() >> 23;
20000b78:	3561                	jal	20000a00 <genrand_int32>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:173
  } while (rand > 255);
20000b7a:	fe054fe3          	bltz	a0,20000b78 <prng_rand_bytes+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:172
    rand = genrand_int32() >> 23;
20000b7e:	815d                	srli	a0,a0,0x17
prng_rand_bytes():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:179
    buffer[i] = prng_rand_byte();
20000b80:	009905b3          	add	a1,s2,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:178
  for (size_t i = 0; i < buffer_len; ++i) {
20000b84:	0485                	addi	s1,s1,1
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:179
    buffer[i] = prng_rand_byte();
20000b86:	00a58023          	sb	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:178
  for (size_t i = 0; i < buffer_len; ++i) {
20000b8a:	fe8497e3          	bne	s1,s0,20000b78 <prng_rand_bytes+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/prng.c:181
  }
}
20000b8e:	4902                	lw	s2,0(sp)
20000b90:	4492                	lw	s1,4(sp)
20000b92:	4422                	lw	s0,8(sp)
20000b94:	40b2                	lw	ra,12(sp)
20000b96:	0141                	addi	sp,sp,16
20000b98:	8082                	ret
	...

20000b9c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:99
/**
 * Timer IRQ handler.
 *
 * Disables the counter and clears pending interrupts.
 */
void handler_irq_timer(void) {
20000b9c:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:102
  // Return values of below functions are ignored to improve capture
  // performance.
  IGNORE_RESULT(dif_rv_timer_counter_set_enabled(&timer, kRvTimerHart,
20000b9e:	c686                	sw	ra,76(sp)
20000ba0:	c496                	sw	t0,72(sp)
20000ba2:	c29a                	sw	t1,68(sp)
20000ba4:	c09e                	sw	t2,64(sp)
20000ba6:	de22                	sw	s0,60(sp)
20000ba8:	dc2a                	sw	a0,56(sp)
20000baa:	da2e                	sw	a1,52(sp)
20000bac:	d832                	sw	a2,48(sp)
20000bae:	d636                	sw	a3,44(sp)
20000bb0:	d43a                	sw	a4,40(sp)
20000bb2:	d23e                	sw	a5,36(sp)
20000bb4:	d042                	sw	a6,32(sp)
20000bb6:	ce46                	sw	a7,28(sp)
20000bb8:	cc72                	sw	t3,24(sp)
20000bba:	ca76                	sw	t4,20(sp)
20000bbc:	c87a                	sw	t5,16(sp)
20000bbe:	c67e                	sw	t6,12(sp)
20000bc0:	1e018413          	addi	s0,gp,480 # 100009e0 <timer>
20000bc4:	8522                	mv	a0,s0
20000bc6:	4581                	li	a1,0
20000bc8:	4601                	li	a2,0
20000bca:	23f5                	jal	200011b6 <dif_rv_timer_counter_set_enabled>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:104
                                                 kDifRvTimerDisabled));
  IGNORE_RESULT(
20000bcc:	8522                	mv	a0,s0
20000bce:	4581                	li	a1,0
20000bd0:	4601                	li	a2,0
20000bd2:	2709                	jal	200012d4 <dif_rv_timer_irq_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:106
      dif_rv_timer_irq_clear(&timer, kRvTimerHart, kRvTimerComparator));
}
20000bd4:	4fb2                	lw	t6,12(sp)
20000bd6:	4f42                	lw	t5,16(sp)
20000bd8:	4ed2                	lw	t4,20(sp)
20000bda:	4e62                	lw	t3,24(sp)
20000bdc:	48f2                	lw	a7,28(sp)
20000bde:	5802                	lw	a6,32(sp)
20000be0:	5792                	lw	a5,36(sp)
20000be2:	5722                	lw	a4,40(sp)
20000be4:	56b2                	lw	a3,44(sp)
20000be6:	5642                	lw	a2,48(sp)
20000be8:	55d2                	lw	a1,52(sp)
20000bea:	5562                	lw	a0,56(sp)
20000bec:	5472                	lw	s0,60(sp)
20000bee:	4386                	lw	t2,64(sp)
20000bf0:	4316                	lw	t1,68(sp)
20000bf2:	42a6                	lw	t0,72(sp)
20000bf4:	40b6                	lw	ra,76(sp)
20000bf6:	6161                	addi	sp,sp,80
20000bf8:	30200073          	mret

20000bfc <sca_init>:
sca_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:108

void sca_init(void) {
20000bfc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:109
  pinmux_init();
20000bfe:	ce06                	sw	ra,28(sp)
20000c00:	cc22                	sw	s0,24(sp)
20000c02:	ca26                	sw	s1,20(sp)
20000c04:	c84a                	sw	s2,16(sp)
20000c06:	237000ef          	jal	ra,2000163c <pinmux_init>
sca_init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:50
  IGNORE_RESULT(dif_uart_init(
20000c0a:	effff417          	auipc	s0,0xeffff
20000c0e:	40640413          	addi	s0,s0,1030 # 10000010 <uart>
20000c12:	40000537          	lui	a0,0x40000
20000c16:	85a2                	mv	a1,s0
20000c18:	314010ef          	jal	ra,20001f2c <dif_uart_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:55
  IGNORE_RESULT(
20000c1c:	00002517          	auipc	a0,0x2
20000c20:	e3c50513          	addi	a0,a0,-452 # 20002a58 <kUartBaudrate>
20000c24:	4108                	lw	a0,0(a0)
20000c26:	00002597          	auipc	a1,0x2
20000c2a:	e2258593          	addi	a1,a1,-478 # 20002a48 <kClockFreqPeripheralHz>
20000c2e:	4184                	lw	s1,0(a1)
20000c30:	0045a903          	lw	s2,4(a1)
20000c34:	c02a                	sw	a0,0(sp)
20000c36:	c226                	sw	s1,4(sp)
20000c38:	4505                	li	a0,1
20000c3a:	c42a                	sw	a0,8(sp)
20000c3c:	c62a                	sw	a0,12(sp)
20000c3e:	858a                	mv	a1,sp
20000c40:	8522                	mv	a0,s0
20000c42:	2f8010ef          	jal	ra,20001f3a <dif_uart_configure>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:62
  base_uart_stdout(&uart);
20000c46:	8522                	mv	a0,s0
20000c48:	639000ef          	jal	ra,20001a80 <base_uart_stdout>
sca_init_gpio():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:71
  IGNORE_RESULT(dif_gpio_init(gpio_params, &gpio));
20000c4c:	effff417          	auipc	s0,0xeffff
20000c50:	3c840413          	addi	s0,s0,968 # 10000014 <gpio>
20000c54:	40040537          	lui	a0,0x40040
20000c58:	85a2                	mv	a1,s0
20000c5a:	20f9                	jal	20000d28 <dif_gpio_init>
20000c5c:	6521                	lui	a0,0x8
20000c5e:	20050593          	addi	a1,a0,512 # 8200 <_stack_size+0x6200>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:72
  IGNORE_RESULT(
20000c62:	8522                	mv	a0,s0
20000c64:	2699                	jal	20000faa <dif_gpio_output_set_enabled_all>
sca_init_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:80
  IGNORE_RESULT(dif_rv_timer_init(
20000c66:	1e018413          	addi	s0,gp,480 # 100009e0 <timer>
20000c6a:	40100537          	lui	a0,0x40100
20000c6e:	4585                	li	a1,1
20000c70:	4605                	li	a2,1
20000c72:	86a2                	mv	a3,s0
20000c74:	2ec1                	jal	20001044 <dif_rv_timer_init>
20000c76:	00002517          	auipc	a0,0x2
20000c7a:	dca50513          	addi	a0,a0,-566 # 20002a40 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:84
  IGNORE_RESULT(dif_rv_timer_approximate_tick_params(
20000c7e:	4110                	lw	a2,0(a0)
20000c80:	4154                	lw	a3,4(a0)
20000c82:	870a                	mv	a4,sp
20000c84:	8526                	mv	a0,s1
20000c86:	85ca                	mv	a1,s2
20000c88:	2991                	jal	200010dc <dif_rv_timer_approximate_tick_params>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:86
  IGNORE_RESULT(
20000c8a:	4602                	lw	a2,0(sp)
20000c8c:	8522                	mv	a0,s0
20000c8e:	4581                	li	a1,0
20000c90:	2311                	jal	20001194 <dif_rv_timer_set_tick_params>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:88
  IGNORE_RESULT(dif_rv_timer_irq_enable(
20000c92:	4685                	li	a3,1
20000c94:	8522                	mv	a0,s0
20000c96:	4581                	li	a1,0
20000c98:	4601                	li	a2,0
20000c9a:	2b75                	jal	20001256 <dif_rv_timer_irq_enable>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:90
  irq_timer_ctrl(true);
20000c9c:	4505                	li	a0,1
20000c9e:	4bd000ef          	jal	ra,2000195a <irq_timer_ctrl>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:91
  irq_global_ctrl(true);
20000ca2:	4505                	li	a0,1
20000ca4:	48b000ef          	jal	ra,2000192e <irq_global_ctrl>
sca_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:113
  sca_init_uart();
  sca_init_gpio();
  sca_init_timer();
}
20000ca8:	4942                	lw	s2,16(sp)
20000caa:	44d2                	lw	s1,20(sp)
20000cac:	4462                	lw	s0,24(sp)
20000cae:	40f2                	lw	ra,28(sp)
20000cb0:	6105                	addi	sp,sp,32
20000cb2:	8082                	ret

20000cb4 <sca_get_uart>:
sca_get_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:115

void sca_get_uart(const dif_uart_t **uart_out) { *uart_out = &uart; }
20000cb4:	effff597          	auipc	a1,0xeffff
20000cb8:	35c58593          	addi	a1,a1,860 # 10000010 <uart>
20000cbc:	c10c                	sw	a1,0(a0)
20000cbe:	8082                	ret

20000cc0 <sca_set_trigger_high>:
sca_set_trigger_high():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:118

void sca_set_trigger_high() {
  IGNORE_RESULT(dif_gpio_write_all(&gpio, kGpioCaptureTriggerHigh));
20000cc0:	effff517          	auipc	a0,0xeffff
20000cc4:	35450513          	addi	a0,a0,852 # 10000014 <gpio>
20000cc8:	65a1                	lui	a1,0x8
20000cca:	20058593          	addi	a1,a1,512 # 8200 <_stack_size+0x6200>
20000cce:	ac85                	j	20000f3e <dif_gpio_write_all>

20000cd0 <sca_set_trigger_low>:
sca_set_trigger_low():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:122
}

void sca_set_trigger_low() {
  IGNORE_RESULT(dif_gpio_write_all(&gpio, kGpioCaptureTriggerLow));
20000cd0:	effff517          	auipc	a0,0xeffff
20000cd4:	34450513          	addi	a0,a0,836 # 10000014 <gpio>
20000cd8:	4581                	li	a1,0
20000cda:	a495                	j	20000f3e <dif_gpio_write_all>

20000cdc <sca_call_and_sleep>:
sca_call_and_sleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:125
}

void sca_call_and_sleep(sca_callee callee, uint32_t sleep_cycles) {
20000cdc:	1101                	addi	sp,sp,-32
20000cde:	ce06                	sw	ra,28(sp)
20000ce0:	cc22                	sw	s0,24(sp)
20000ce2:	ca26                	sw	s1,20(sp)
20000ce4:	c84a                	sw	s2,16(sp)
20000ce6:	842e                	mv	s0,a1
20000ce8:	892a                	mv	s2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:130
  // Start timer to wake Ibex after the callee is done.
  uint64_t current_time;
  // Return values of below functions are ignored to improve capture
  // performance.
  IGNORE_RESULT(dif_rv_timer_counter_read(&timer, kRvTimerHart, &current_time));
20000cea:	1e018493          	addi	s1,gp,480 # 100009e0 <timer>
20000cee:	0030                	addi	a2,sp,8
20000cf0:	8526                	mv	a0,s1
20000cf2:	4581                	li	a1,0
20000cf4:	29ed                	jal	200011ee <dif_rv_timer_counter_read>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:131
  IGNORE_RESULT(dif_rv_timer_arm(&timer, kRvTimerHart, kRvTimerComparator,
20000cf6:	4522                	lw	a0,8(sp)
20000cf8:	45b2                	lw	a1,12(sp)
20000cfa:	008506b3          	add	a3,a0,s0
20000cfe:	00a6b533          	sltu	a0,a3,a0
20000d02:	00a58733          	add	a4,a1,a0
20000d06:	8526                	mv	a0,s1
20000d08:	4581                	li	a1,0
20000d0a:	4601                	li	a2,0
20000d0c:	2b01                	jal	2000121c <dif_rv_timer_arm>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:133
                                 current_time + sleep_cycles));
  IGNORE_RESULT(dif_rv_timer_counter_set_enabled(&timer, kRvTimerHart,
20000d0e:	4605                	li	a2,1
20000d10:	8526                	mv	a0,s1
20000d12:	4581                	li	a1,0
20000d14:	214d                	jal	200011b6 <dif_rv_timer_counter_set_enabled>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:136
                                                 kDifRvTimerEnabled));

  callee();
20000d16:	9902                	jalr	s2
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000d18:	10500073          	wfi
sca_call_and_sleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/sca.c:139

  wait_for_interrupt();
}
20000d1c:	4942                	lw	s2,16(sp)
20000d1e:	44d2                	lw	s1,20(sp)
20000d20:	4462                	lw	s0,24(sp)
20000d22:	40f2                	lw	ra,28(sp)
20000d24:	6105                	addi	sp,sp,32
20000d26:	8082                	ret

20000d28 <dif_gpio_init>:
dif_gpio_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:103

  return kDifGpioOk;
}

dif_gpio_result_t dif_gpio_init(dif_gpio_params_t params, dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000d28:	c581                	beqz	a1,20000d30 <dif_gpio_init+0x8>
20000d2a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:107
    return kDifGpioBadArg;
  }

  gpio->params = params;
20000d2c:	c188                	sw	a0,0(a1)
20000d2e:	a011                	j	20000d32 <dif_gpio_init+0xa>
20000d30:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:110

  return kDifGpioOk;
}
20000d32:	8532                	mv	a0,a2
20000d34:	8082                	ret

20000d36 <dif_gpio_reset>:
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:113

dif_gpio_result_t dif_gpio_reset(const dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000d36:	cd15                	beqz	a0,20000d72 <dif_gpio_reset+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:119
    return kDifGpioBadArg;
  }

  // We don't need to write to `GPIO_MASKED_OE_*` and `GPIO_MASKED_OUT_*`
  // since we directly reset `GPIO_DIRECT_OE` and `GPIO_DIRECT_OUT` below.
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000d38:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d3a:	0005a223          	sw	zero,4(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:120
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, 0);
20000d3e:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d40:	0005ae23          	sw	zero,28(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:121
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET, 0);
20000d44:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d46:	0005a823          	sw	zero,16(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:122
  mmio_region_write32(gpio->params.base_addr,
20000d4a:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d4c:	0205a423          	sw	zero,40(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:124
                      GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000d50:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d52:	0205a623          	sw	zero,44(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:126
                      GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000d56:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d58:	0205a823          	sw	zero,48(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:128
                      GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000d5c:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d5e:	0205aa23          	sw	zero,52(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:130
                      GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000d62:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d64:	0205ac23          	sw	zero,56(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:133
                      GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET, 0);
  // Also clear all pending interrupts
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000d68:	410c                	lw	a1,0(a0)
20000d6a:	4501                	li	a0,0
20000d6c:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d6e:	c190                	sw	a2,0(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:137
                      0xFFFFFFFFu);

  return kDifGpioOk;
}
20000d70:	8082                	ret
20000d72:	4509                	li	a0,2
20000d74:	8082                	ret

20000d76 <dif_gpio_irq_is_pending>:
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:141

dif_gpio_result_t dif_gpio_irq_is_pending(const dif_gpio_t *gpio,
                                          dif_gpio_pin_t pin,
                                          bool *is_pending) {
20000d76:	86aa                	mv	a3,a0
20000d78:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:142
  if (gpio == NULL || is_pending == NULL) {
20000d7a:	ca91                	beqz	a3,20000d8e <dif_gpio_irq_is_pending+0x18>
20000d7c:	ca09                	beqz	a2,20000d8e <dif_gpio_irq_is_pending+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
    return kDifGpioBadArg;
  }

  *is_pending = mmio_region_get_bit32(gpio->params.base_addr,
20000d7e:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d80:	4114                	lw	a3,0(a0)
20000d82:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000d84:	00b6d5b3          	srl	a1,a3,a1
20000d88:	8985                	andi	a1,a1,1
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
20000d8a:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:150
                                      GPIO_INTR_STATE_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000d8e:	8082                	ret

20000d90 <dif_gpio_irq_is_pending_all>:
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:153

dif_gpio_result_t dif_gpio_irq_is_pending_all(const dif_gpio_t *gpio,
                                              dif_gpio_state_t *is_pending) {
20000d90:	862a                	mv	a2,a0
20000d92:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:154
  if (gpio == NULL || is_pending == NULL) {
20000d94:	c611                	beqz	a2,20000da0 <dif_gpio_irq_is_pending_all+0x10>
20000d96:	c589                	beqz	a1,20000da0 <dif_gpio_irq_is_pending_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:159
    return kDifGpioBadArg;
  }

  *is_pending =
      mmio_region_read32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET);
20000d98:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d9a:	4110                	lw	a2,0(a0)
20000d9c:	4501                	li	a0,0
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:158
  *is_pending =
20000d9e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:162

  return kDifGpioOk;
}
20000da0:	8082                	ret

20000da2 <dif_gpio_irq_acknowledge>:
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:166

dif_gpio_result_t dif_gpio_irq_acknowledge(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000da2:	c901                	beqz	a0,20000db2 <dif_gpio_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:170
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000da4:	4110                	lw	a2,0(a0)
20000da6:	4501                	li	a0,0
20000da8:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000daa:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dae:	c20c                	sw	a1,0(a2)
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:174
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000db0:	8082                	ret
20000db2:	4509                	li	a0,2
20000db4:	8082                	ret

20000db6 <dif_gpio_irq_get_enabled>:
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:178

dif_gpio_result_t dif_gpio_irq_get_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t *state) {
20000db6:	86aa                	mv	a3,a0
20000db8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:179
  if (gpio == NULL || state == NULL) {
20000dba:	ca89                	beqz	a3,20000dcc <dif_gpio_irq_get_enabled+0x16>
20000dbc:	ca01                	beqz	a2,20000dcc <dif_gpio_irq_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:183
    return kDifGpioBadArg;
  }

  bool is_enabled = mmio_region_get_bit32(gpio->params.base_addr,
20000dbe:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dc0:	4154                	lw	a3,4(a0)
20000dc2:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000dc4:	00b6d5b3          	srl	a1,a3,a1
20000dc8:	8985                	andi	a1,a1,1
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:185
                                          GPIO_INTR_ENABLE_REG_OFFSET, pin);
  *state = is_enabled ? kDifGpioToggleEnabled : kDifGpioToggleDisabled;
20000dca:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:188

  return kDifGpioOk;
}
20000dcc:	8082                	ret

20000dce <dif_gpio_irq_set_enabled>:
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:192

dif_gpio_result_t dif_gpio_irq_set_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t state) {
20000dce:	86aa                	mv	a3,a0
20000dd0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:193
  if (gpio == NULL) {
20000dd2:	c695                	beqz	a3,20000dfe <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:197
    return kDifGpioBadArg;
  }

  switch (state) {
20000dd4:	ca19                	beqz	a2,20000dea <dif_gpio_irq_set_enabled+0x1c>
20000dd6:	4705                	li	a4,1
20000dd8:	02e61363          	bne	a2,a4,20000dfe <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:199
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_bit32(gpio->params.base_addr,
20000ddc:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000dde:	4254                	lw	a3,4(a2)
20000de0:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000de2:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000de6:	8dd5                	or	a1,a1,a3
20000de8:	a811                	j	20000dfc <dif_gpio_irq_set_enabled+0x2e>
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:203
                                      GPIO_INTR_ENABLE_REG_OFFSET, pin);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_bit32(gpio->params.base_addr,
20000dea:	4290                	lw	a2,0(a3)
20000dec:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000dee:	4254                	lw	a3,4(a2)
20000df0:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000df2:	00b715b3          	sll	a1,a4,a1
20000df6:	fff5c593          	not	a1,a1
20000dfa:	8df5                	and	a1,a1,a3
20000dfc:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:211
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000dfe:	8082                	ret

20000e00 <dif_gpio_irq_set_enabled_masked>:
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:215

dif_gpio_result_t dif_gpio_irq_set_enabled_masked(const dif_gpio_t *gpio,
                                                  dif_gpio_mask_t mask,
                                                  dif_gpio_toggle_t state) {
20000e00:	86aa                	mv	a3,a0
20000e02:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:216
  if (gpio == NULL) {
20000e04:	c28d                	beqz	a3,20000e26 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:220
    return kDifGpioBadArg;
  }

  switch (state) {
20000e06:	ca09                	beqz	a2,20000e18 <dif_gpio_irq_set_enabled_masked+0x18>
20000e08:	4705                	li	a4,1
20000e0a:	00e61e63          	bne	a2,a4,20000e26 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:222
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000e0e:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e10:	4254                	lw	a3,4(a2)
20000e12:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e14:	8dd5                	or	a1,a1,a3
20000e16:	a039                	j	20000e24 <dif_gpio_irq_set_enabled_masked+0x24>
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:226
                                       GPIO_INTR_ENABLE_REG_OFFSET, mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20000e18:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e1a:	4254                	lw	a3,4(a2)
20000e1c:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e1e:	fff5c593          	not	a1,a1
20000e22:	8df5                	and	a1,a1,a3
20000e24:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:234
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000e26:	8082                	ret

20000e28 <dif_gpio_irq_force>:
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:238

dif_gpio_result_t dif_gpio_irq_force(const dif_gpio_t *gpio,
                                     dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000e28:	c901                	beqz	a0,20000e38 <dif_gpio_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:242
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_TEST_REG_OFFSET,
20000e2a:	4110                	lw	a2,0(a0)
20000e2c:	4501                	li	a0,0
20000e2e:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000e30:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e34:	c60c                	sw	a1,8(a2)
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:246
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000e36:	8082                	ret
20000e38:	4509                	li	a0,2
20000e3a:	8082                	ret

20000e3c <dif_gpio_irq_disable_all>:
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:250

dif_gpio_result_t dif_gpio_irq_disable_all(const dif_gpio_t *gpio,
                                           dif_gpio_state_t *snapshot) {
  if (gpio == NULL) {
20000e3c:	c911                	beqz	a0,20000e50 <dif_gpio_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:254
    return kDifGpioBadArg;
  }

  if (snapshot != NULL) {
20000e3e:	c581                	beqz	a1,20000e46 <dif_gpio_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:256
    *snapshot =
        mmio_region_read32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET);
20000e40:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e42:	4250                	lw	a2,4(a2)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:255
    *snapshot =
20000e44:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:258
  }
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000e46:	410c                	lw	a1,0(a0)
20000e48:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e4a:	0005a223          	sw	zero,4(a1)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:261

  return kDifGpioOk;
}
20000e4e:	8082                	ret
20000e50:	4509                	li	a0,2
20000e52:	8082                	ret

20000e54 <dif_gpio_irq_restore_all>:
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:264

dif_gpio_result_t dif_gpio_irq_restore_all(const dif_gpio_t *gpio,
                                           const dif_gpio_state_t *snapshot) {
20000e54:	862a                	mv	a2,a0
20000e56:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:265
  if (gpio == NULL || snapshot == NULL) {
20000e58:	c611                	beqz	a2,20000e64 <dif_gpio_irq_restore_all+0x10>
20000e5a:	c589                	beqz	a1,20000e64 <dif_gpio_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:270
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000e5c:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:269
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
20000e5e:	4210                	lw	a2,0(a2)
20000e60:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e62:	c24c                	sw	a1,4(a2)
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:273

  return kDifGpioOk;
}
20000e64:	8082                	ret

20000e66 <dif_gpio_irq_set_trigger>:
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:278

dif_gpio_result_t dif_gpio_irq_set_trigger(const dif_gpio_t *gpio,
                                           dif_gpio_mask_t mask,
                                           dif_gpio_irq_trigger_t trigger) {
  if (gpio == NULL) {
20000e66:	c529                	beqz	a0,20000eb0 <dif_gpio_irq_set_trigger+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:283
    return kDifGpioBadArg;
  }

  // Disable all interrupt triggers for the given mask.
  mmio_region_nonatomic_clear_mask32(
20000e68:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e6a:	5698                	lw	a4,40(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e6c:	fff5c793          	not	a5,a1
20000e70:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e72:	d698                	sw	a4,40(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:285
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000e74:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e76:	56d8                	lw	a4,44(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e78:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e7a:	d6d8                	sw	a4,44(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:287
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000e7c:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e7e:	5a98                	lw	a4,48(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e80:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e82:	da98                	sw	a4,48(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:289
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000e84:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e86:	5ad8                	lw	a4,52(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e88:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e8a:	dad8                	sw	a4,52(a3)
20000e8c:	4709                	li	a4,2
20000e8e:	4685                	li	a3,1
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);

  switch (trigger) {
20000e90:	02c75263          	bge	a4,a2,20000eb4 <dif_gpio_irq_set_trigger+0x4e>
20000e94:	4711                	li	a4,4
20000e96:	02c74763          	blt	a4,a2,20000ec4 <dif_gpio_irq_set_trigger+0x5e>
20000e9a:	470d                	li	a4,3
20000e9c:	02e60e63          	beq	a2,a4,20000ed8 <dif_gpio_irq_set_trigger+0x72>
20000ea0:	4711                	li	a4,4
20000ea2:	06e61663          	bne	a2,a4,20000f0e <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:312
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
                                       GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeRisingFalling:
      mmio_region_nonatomic_set_mask32(
20000ea6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ea8:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000eaa:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000eac:	d614                	sw	a3,40(a2)
20000eae:	a81d                	j	20000ee4 <dif_gpio_irq_set_trigger+0x7e>
20000eb0:	4689                	li	a3,2
20000eb2:	a8b1                	j	20000f0e <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
  switch (trigger) {
20000eb4:	ce15                	beqz	a2,20000ef0 <dif_gpio_irq_set_trigger+0x8a>
20000eb6:	4705                	li	a4,1
20000eb8:	02e60663          	beq	a2,a4,20000ee4 <dif_gpio_irq_set_trigger+0x7e>
20000ebc:	4709                	li	a4,2
20000ebe:	04e60363          	beq	a2,a4,20000f04 <dif_gpio_irq_set_trigger+0x9e>
20000ec2:	a0b1                	j	20000f0e <dif_gpio_irq_set_trigger+0xa8>
20000ec4:	4715                	li	a4,5
20000ec6:	02e60b63          	beq	a2,a4,20000efc <dif_gpio_irq_set_trigger+0x96>
20000eca:	4719                	li	a4,6
20000ecc:	04e61163          	bne	a2,a4,20000f0e <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:325
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
      mmio_region_nonatomic_set_mask32(
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeFallingLevelHigh:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000ed0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ed2:	5654                	lw	a3,44(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000ed4:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ed6:	d654                	sw	a3,44(a2)
20000ed8:	4108                	lw	a0,0(a0)
20000eda:	5910                	lw	a2,48(a0)
20000edc:	4681                	li	a3,0
20000ede:	8dd1                	or	a1,a1,a2
20000ee0:	d90c                	sw	a1,48(a0)
20000ee2:	a035                	j	20000f0e <dif_gpio_irq_set_trigger+0xa8>
20000ee4:	4108                	lw	a0,0(a0)
20000ee6:	5550                	lw	a2,44(a0)
20000ee8:	4681                	li	a3,0
20000eea:	8dd1                	or	a1,a1,a2
20000eec:	d54c                	sw	a1,44(a0)
20000eee:	a005                	j	20000f0e <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:294
      mmio_region_nonatomic_set_mask32(
20000ef0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ef2:	5510                	lw	a2,40(a0)
20000ef4:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000ef6:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ef8:	d50c                	sw	a1,40(a0)
20000efa:	a811                	j	20000f0e <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:319
      mmio_region_nonatomic_set_mask32(
20000efc:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000efe:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000f00:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f02:	d614                	sw	a3,40(a2)
20000f04:	4108                	lw	a0,0(a0)
20000f06:	5950                	lw	a2,52(a0)
20000f08:	4681                	li	a3,0
20000f0a:	8dd1                	or	a1,a1,a2
20000f0c:	d94c                	sw	a1,52(a0)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:337
    default:
      return kDifGpioError;
  }

  return kDifGpioOk;
}
20000f0e:	8536                	mv	a0,a3
20000f10:	8082                	ret

20000f12 <dif_gpio_read_all>:
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:340

dif_gpio_result_t dif_gpio_read_all(const dif_gpio_t *gpio,
                                    dif_gpio_state_t *state) {
20000f12:	862a                	mv	a2,a0
20000f14:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:341
  if (gpio == NULL || state == NULL) {
20000f16:	c611                	beqz	a2,20000f22 <dif_gpio_read_all+0x10>
20000f18:	c589                	beqz	a1,20000f22 <dif_gpio_read_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
    return kDifGpioBadArg;
  }

  *state = mmio_region_read32(gpio->params.base_addr, GPIO_DATA_IN_REG_OFFSET);
20000f1a:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f1c:	4550                	lw	a2,12(a0)
20000f1e:	4501                	li	a0,0
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
20000f20:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:348

  return kDifGpioOk;
}
20000f22:	8082                	ret

20000f24 <dif_gpio_read>:
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:351

dif_gpio_result_t dif_gpio_read(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                bool *state) {
20000f24:	86aa                	mv	a3,a0
20000f26:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:352
  if (gpio == NULL || state == NULL) {
20000f28:	ca91                	beqz	a3,20000f3c <dif_gpio_read+0x18>
20000f2a:	ca09                	beqz	a2,20000f3c <dif_gpio_read+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
    return kDifGpioBadArg;
  }

  *state = mmio_region_get_bit32(gpio->params.base_addr,
20000f2c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f2e:	4554                	lw	a3,12(a0)
20000f30:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000f32:	00b6d5b3          	srl	a1,a3,a1
20000f36:	8985                	andi	a1,a1,1
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
20000f38:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:360
                                 GPIO_DATA_IN_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000f3c:	8082                	ret

20000f3e <dif_gpio_write_all>:
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:364

dif_gpio_result_t dif_gpio_write_all(const dif_gpio_t *gpio,
                                     dif_gpio_state_t state) {
  if (gpio == NULL) {
20000f3e:	c509                	beqz	a0,20000f48 <dif_gpio_write_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:368
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET,
20000f40:	4110                	lw	a2,0(a0)
20000f42:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f44:	ca0c                	sw	a1,16(a2)
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:372
                      state);

  return kDifGpioOk;
}
20000f46:	8082                	ret
20000f48:	4509                	li	a0,2
20000f4a:	8082                	ret

20000f4c <dif_gpio_write>:
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:86
  if (gpio == NULL) {
20000f4c:	c505                	beqz	a0,20000f74 <dif_gpio_write+0x28>
20000f4e:	4741                	li	a4,16
20000f50:	46d1                	li	a3,20
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000f52:	00e5e363          	bltu	a1,a4,20000f58 <dif_gpio_write+0xc>
20000f56:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000f58:	89bd                	andi	a1,a1,15
20000f5a:	4705                	li	a4,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000f5c:	00b71733          	sll	a4,a4,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000f60:	01071593          	slli	a1,a4,0x10
20000f64:	e211                	bnez	a2,20000f68 <dif_gpio_write+0x1c>
20000f66:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000f68:	4110                	lw	a2,0(a0)
20000f6a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000f6c:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f6e:	9636                	add	a2,a2,a3
20000f70:	c20c                	sw	a1,0(a2)
dif_gpio_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:376

dif_gpio_result_t dif_gpio_write(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                 bool state) {
  return gpio_masked_bit_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000f72:	8082                	ret
20000f74:	4509                	li	a0,2
20000f76:	8082                	ret

20000f78 <dif_gpio_write_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000f78:	c50d                	beqz	a0,20000fa2 <dif_gpio_write_masked+0x2a>
20000f7a:	66c1                	lui	a3,0x10
20000f7c:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000f80:	00e5f7b3          	and	a5,a1,a4
20000f84:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000f86:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000f88:	c791                	beqz	a5,20000f94 <dif_gpio_write_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000f8a:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000f8c:	05c2                	slli	a1,a1,0x10
20000f8e:	8f71                	and	a4,a4,a2
20000f90:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f92:	cbcc                	sw	a1,20(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20000f94:	ca89                	beqz	a3,20000fa6 <dif_gpio_write_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20000f96:	410c                	lw	a1,0(a0)
20000f98:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20000f9a:	8241                	srli	a2,a2,0x10
20000f9c:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f9e:	cd90                	sw	a2,24(a1)
dif_gpio_write_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:383
}

dif_gpio_result_t dif_gpio_write_masked(const dif_gpio_t *gpio,
                                        dif_gpio_mask_t mask,
                                        dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000fa0:	8082                	ret
20000fa2:	4509                	li	a0,2
20000fa4:	8082                	ret
20000fa6:	4501                	li	a0,0
20000fa8:	8082                	ret

20000faa <dif_gpio_output_set_enabled_all>:
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:389
                           GPIO_MASKED_OUT_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_output_set_enabled_all(const dif_gpio_t *gpio,
                                                  dif_gpio_state_t state) {
  if (gpio == NULL) {
20000faa:	c509                	beqz	a0,20000fb4 <dif_gpio_output_set_enabled_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:393
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, state);
20000fac:	4110                	lw	a2,0(a0)
20000fae:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fb0:	ce4c                	sw	a1,28(a2)
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:396

  return kDifGpioOk;
}
20000fb2:	8082                	ret
20000fb4:	4509                	li	a0,2
20000fb6:	8082                	ret

20000fb8 <dif_gpio_output_set_enabled>:
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:401

dif_gpio_result_t dif_gpio_output_set_enabled(const dif_gpio_t *gpio,
                                              dif_gpio_pin_t pin,
                                              dif_gpio_toggle_t state) {
  if (gpio == NULL) {
20000fb8:	c51d                	beqz	a0,20000fe6 <dif_gpio_output_set_enabled+0x2e>
20000fba:	4741                	li	a4,16
20000fbc:	02000693          	li	a3,32
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000fc0:	00e5e463          	bltu	a1,a4,20000fc8 <dif_gpio_output_set_enabled+0x10>
20000fc4:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000fc8:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000fca:	89bd                	andi	a1,a1,15
20000fcc:	4785                	li	a5,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000fce:	00b797b3          	sll	a5,a5,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000fd2:	01079593          	slli	a1,a5,0x10
20000fd6:	c211                	beqz	a2,20000fda <dif_gpio_output_set_enabled+0x22>
20000fd8:	873e                	mv	a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000fda:	4110                	lw	a2,0(a0)
20000fdc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000fde:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fe0:	9636                	add	a2,a2,a3
20000fe2:	c20c                	sw	a1,0(a2)
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:409

  return gpio_masked_bit_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
                               GPIO_MASKED_OE_UPPER_REG_OFFSET, pin, state);

  return kDifGpioOk;
}
20000fe4:	8082                	ret
20000fe6:	4509                	li	a0,2
20000fe8:	8082                	ret

20000fea <dif_gpio_output_set_enabled_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000fea:	c50d                	beqz	a0,20001014 <dif_gpio_output_set_enabled_masked+0x2a>
20000fec:	66c1                	lui	a3,0x10
20000fee:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000ff2:	00e5f7b3          	and	a5,a1,a4
20000ff6:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000ff8:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000ffa:	c791                	beqz	a5,20001006 <dif_gpio_output_set_enabled_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000ffc:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000ffe:	05c2                	slli	a1,a1,0x10
20001000:	8f71                	and	a4,a4,a2
20001002:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001004:	d38c                	sw	a1,32(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20001006:	ca89                	beqz	a3,20001018 <dif_gpio_output_set_enabled_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20001008:	410c                	lw	a1,0(a0)
2000100a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
2000100c:	8241                	srli	a2,a2,0x10
2000100e:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001010:	d1d0                	sw	a2,36(a1)
dif_gpio_output_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:414

dif_gpio_result_t dif_gpio_output_set_enabled_masked(const dif_gpio_t *gpio,
                                                     dif_gpio_mask_t mask,
                                                     dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
20001012:	8082                	ret
20001014:	4509                	li	a0,2
20001016:	8082                	ret
20001018:	4501                	li	a0,0
2000101a:	8082                	ret

2000101c <dif_gpio_input_noise_filter_set_enabled>:
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:419
                           GPIO_MASKED_OE_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_input_noise_filter_set_enabled(
    const dif_gpio_t *gpio, dif_gpio_mask_t mask, dif_gpio_toggle_t state) {
2000101c:	86aa                	mv	a3,a0
2000101e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:420
  if (gpio == NULL) {
20001020:	c28d                	beqz	a3,20001042 <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:424
    return kDifGpioBadArg;
  }

  switch (state) {
20001022:	ca09                	beqz	a2,20001034 <dif_gpio_input_noise_filter_set_enabled+0x18>
20001024:	4705                	li	a4,1
20001026:	00e61e63          	bne	a2,a4,20001042 <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:426
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
2000102a:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000102c:	5e14                	lw	a3,56(a2)
2000102e:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001030:	8dd5                	or	a1,a1,a3
20001032:	a039                	j	20001040 <dif_gpio_input_noise_filter_set_enabled+0x24>
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:431
                                       GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20001034:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001036:	5e14                	lw	a3,56(a2)
20001038:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000103a:	fff5c593          	not	a1,a1
2000103e:	8df5                	and	a1,a1,a3
20001040:	de0c                	sw	a1,56(a2)
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:440
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20001042:	8082                	ret

20001044 <dif_rv_timer_init>:
dif_rv_timer_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:35
}

dif_rv_timer_result_t dif_rv_timer_init(mmio_region_t base_addr,
                                        dif_rv_timer_config_t config,
                                        dif_rv_timer_t *timer_out) {
  if (timer_out == NULL || config.hart_count < 1 ||
20001044:	ca01                	beqz	a2,20001054 <dif_rv_timer_init+0x10>
20001046:	c699                	beqz	a3,20001054 <dif_rv_timer_init+0x10>
20001048:	c591                	beqz	a1,20001054 <dif_rv_timer_init+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:40
      config.comparator_count < 1) {
    return kDifRvTimerBadArg;
  }

  timer_out->base_addr = base_addr;
2000104a:	c288                	sw	a0,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:41
  timer_out->config = config;
2000104c:	c2cc                	sw	a1,4(a3)
2000104e:	c690                	sw	a2,8(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:43

  return dif_rv_timer_reset(timer_out);
20001050:	8536                	mv	a0,a3
20001052:	a019                	j	20001058 <dif_rv_timer_reset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:44
}
20001054:	4505                	li	a0,1
20001056:	8082                	ret

20001058 <dif_rv_timer_reset>:
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:333
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);

  return kDifRvTimerOk;
}

dif_rv_timer_result_t dif_rv_timer_reset(const dif_rv_timer_t *timer) {
20001058:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:334
  if (timer == NULL) {
2000105a:	ce06                	sw	ra,28(sp)
2000105c:	cc22                	sw	s0,24(sp)
2000105e:	ca26                	sw	s1,20(sp)
20001060:	c84a                	sw	s2,16(sp)
20001062:	c64e                	sw	s3,12(sp)
20001064:	c452                	sw	s4,8(sp)
20001066:	c135                	beqz	a0,200010ca <dif_rv_timer_reset+0x72>
20001068:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:339
    return kDifRvTimerBadArg;
  }

  // Disable all counters.
  mmio_region_write32(timer->base_addr, RV_TIMER_CTRL_REG_OFFSET, 0x0);
2000106a:	4108                	lw	a0,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000106c:	00052023          	sw	zero,0(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:341

  for (uint32_t hart_id = 0; hart_id < timer->config.hart_count; ++hart_id) {
20001070:	4048                	lw	a0,4(s0)
20001072:	c931                	beqz	a0,200010c6 <dif_rv_timer_reset+0x6e>
20001074:	4901                	li	s2,0
20001076:	59fd                	li	s3,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:344
    // Clear and disable all interrupts.
    ptrdiff_t irq_status =
        irq_reg_for_hart(hart_id, timer->config.comparator_count,
20001078:	4408                	lw	a0,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:349
                         RV_TIMER_INTR_STATE0_REG_OFFSET);
    ptrdiff_t irq_enable =
        irq_reg_for_hart(hart_id, timer->config.comparator_count,
                         RV_TIMER_INTR_ENABLE0_REG_OFFSET);
    mmio_region_write32(timer->base_addr, irq_enable, 0x0);
2000107a:	400c                	lw	a1,0(s0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
2000107c:	050e                	slli	a0,a0,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000107e:	00891a13          	slli	s4,s2,0x8
20001082:	9552                	add	a0,a0,s4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
20001084:	95aa                	add	a1,a1,a0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001086:	1005a623          	sw	zero,268(a1)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:350
    mmio_region_write32(timer->base_addr, irq_status, UINT32_MAX);
2000108a:	400c                	lw	a1,0(s0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
2000108c:	952e                	add	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000108e:	11352823          	sw	s3,272(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:353

    // Reset all comparators to their default all-ones state.
    for (uint32_t comp_id = 0; comp_id < timer->config.comparator_count;
20001092:	4408                	lw	a0,8(s0)
20001094:	cd09                	beqz	a0,200010ae <dif_rv_timer_reset+0x56>
20001096:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:356
         ++comp_id) {
      dif_rv_timer_result_t error =
          dif_rv_timer_arm(timer, hart_id, comp_id, UINT64_MAX);
20001098:	56fd                	li	a3,-1
2000109a:	577d                	li	a4,-1
2000109c:	8522                	mv	a0,s0
2000109e:	85ca                	mv	a1,s2
200010a0:	8626                	mv	a2,s1
200010a2:	2aad                	jal	2000121c <dif_rv_timer_arm>
200010a4:	e505                	bnez	a0,200010cc <dif_rv_timer_reset+0x74>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:353
    for (uint32_t comp_id = 0; comp_id < timer->config.comparator_count;
200010a6:	4408                	lw	a0,8(s0)
200010a8:	0485                	addi	s1,s1,1
200010aa:	fea4e7e3          	bltu	s1,a0,20001098 <dif_rv_timer_reset+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:363
        return error;
      }
    }

    // Reset the counter to zero.
    mmio_region_write32(
200010ae:	4008                	lw	a0,0(s0)
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200010b0:	9552                	add	a0,a0,s4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010b2:	10052223          	sw	zero,260(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:366
        timer->base_addr,
        reg_for_hart(hart_id, RV_TIMER_TIMER_V_LOWER0_REG_OFFSET), 0x0);
    mmio_region_write32(
200010b6:	4008                	lw	a0,0(s0)
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200010b8:	9552                	add	a0,a0,s4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010ba:	10052423          	sw	zero,264(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:341
  for (uint32_t hart_id = 0; hart_id < timer->config.hart_count; ++hart_id) {
200010be:	4048                	lw	a0,4(s0)
200010c0:	0905                	addi	s2,s2,1
200010c2:	faa96be3          	bltu	s2,a0,20001078 <dif_rv_timer_reset+0x20>
200010c6:	4501                	li	a0,0
200010c8:	a011                	j	200010cc <dif_rv_timer_reset+0x74>
200010ca:	4505                	li	a0,1
200010cc:	4a22                	lw	s4,8(sp)
200010ce:	49b2                	lw	s3,12(sp)
200010d0:	4942                	lw	s2,16(sp)
200010d2:	44d2                	lw	s1,20(sp)
200010d4:	4462                	lw	s0,24(sp)
200010d6:	40f2                	lw	ra,28(sp)
200010d8:	6105                	addi	sp,sp,32
200010da:	8082                	ret

200010dc <dif_rv_timer_approximate_tick_params>:
dif_rv_timer_approximate_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:63
                                     dif_rv_timer_tick_params_t *out) {
200010dc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:64
  if (out == NULL) {
200010de:	ce06                	sw	ra,28(sp)
200010e0:	cc22                	sw	s0,24(sp)
200010e2:	ca26                	sw	s1,20(sp)
200010e4:	c84a                	sw	s2,16(sp)
200010e6:	c64e                	sw	s3,12(sp)
200010e8:	c452                	sw	s4,8(sp)
200010ea:	c256                	sw	s5,4(sp)
200010ec:	c05a                	sw	s6,0(sp)
200010ee:	cf25                	beqz	a4,20001166 <dif_rv_timer_approximate_tick_params+0x8a>
200010f0:	893a                	mv	s2,a4
200010f2:	89b6                	mv	s3,a3
200010f4:	8a32                	mv	s4,a2
200010f6:	8aae                	mv	s5,a1
200010f8:	8b2a                	mv	s6,a0
euclidean_gcd():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:52
  while (b != 0) {
200010fa:	00d66533          	or	a0,a2,a3
200010fe:	845a                	mv	s0,s6
20001100:	84ae                	mv	s1,a1
20001102:	c105                	beqz	a0,20001122 <dif_rv_timer_approximate_tick_params+0x46>
20001104:	855a                	mv	a0,s6
20001106:	85d6                	mv	a1,s5
20001108:	8652                	mv	a2,s4
2000110a:	86ce                	mv	a3,s3
2000110c:	84b6                	mv	s1,a3
2000110e:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:54
    b = a % b;
20001110:	548010ef          	jal	ra,20002658 <__umoddi3>
20001114:	862a                	mv	a2,a0
20001116:	86ae                	mv	a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:52
  while (b != 0) {
20001118:	00b56733          	or	a4,a0,a1
2000111c:	8522                	mv	a0,s0
2000111e:	85a6                	mv	a1,s1
20001120:	f775                	bnez	a4,2000110c <dif_rv_timer_approximate_tick_params+0x30>
dif_rv_timer_approximate_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:75
  uint64_t prescale = clock_freq / gcd - 1;
20001122:	855a                	mv	a0,s6
20001124:	85d6                	mv	a1,s5
20001126:	8622                	mv	a2,s0
20001128:	86a6                	mv	a3,s1
2000112a:	1c8010ef          	jal	ra,200022f2 <__udivdi3>
2000112e:	fff50a93          	addi	s5,a0,-1
20001132:	00aab533          	sltu	a0,s5,a0
20001136:	952e                	add	a0,a0,a1
20001138:	fff50b13          	addi	s6,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:76
  uint64_t step = counter_freq / gcd;
2000113c:	8552                	mv	a0,s4
2000113e:	85ce                	mv	a1,s3
20001140:	8622                	mv	a2,s0
20001142:	86a6                	mv	a3,s1
20001144:	1ae010ef          	jal	ra,200022f2 <__udivdi3>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:78
  if (prescale > RV_TIMER_CFG0_PRESCALE_MASK ||
20001148:	014b1613          	slli	a2,s6,0x14
2000114c:	00cad693          	srli	a3,s5,0xc
20001150:	8e55                	or	a2,a2,a3
20001152:	00cb5693          	srli	a3,s6,0xc
20001156:	8ed1                	or	a3,a3,a2
20001158:	460d                	li	a2,3
2000115a:	e295                	bnez	a3,2000117e <dif_rv_timer_approximate_tick_params+0xa2>
2000115c:	c599                	beqz	a1,2000116a <dif_rv_timer_approximate_tick_params+0x8e>
2000115e:	00b035b3          	snez	a1,a1
20001162:	c989                	beqz	a1,20001174 <dif_rv_timer_approximate_tick_params+0x98>
20001164:	a829                	j	2000117e <dif_rv_timer_approximate_tick_params+0xa2>
20001166:	4605                	li	a2,1
20001168:	a819                	j	2000117e <dif_rv_timer_approximate_tick_params+0xa2>
2000116a:	0ff00593          	li	a1,255
2000116e:	00a5b5b3          	sltu	a1,a1,a0
20001172:	e591                	bnez	a1,2000117e <dif_rv_timer_approximate_tick_params+0xa2>
20001174:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:83
  out->prescale = (uint16_t)prescale;
20001176:	01591023          	sh	s5,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:84
  out->tick_step = (uint8_t)step;
2000117a:	00a90123          	sb	a0,2(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:87
}
2000117e:	8532                	mv	a0,a2
20001180:	4b02                	lw	s6,0(sp)
20001182:	4a92                	lw	s5,4(sp)
20001184:	4a22                	lw	s4,8(sp)
20001186:	49b2                	lw	s3,12(sp)
20001188:	4942                	lw	s2,16(sp)
2000118a:	44d2                	lw	s1,20(sp)
2000118c:	4462                	lw	s0,24(sp)
2000118e:	40f2                	lw	ra,28(sp)
20001190:	6105                	addi	sp,sp,32
20001192:	8082                	ret

20001194 <dif_rv_timer_set_tick_params>:
dif_rv_timer_set_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:91
    dif_rv_timer_tick_params_t params) {
20001194:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:92
  if (timer == NULL || hart_id >= timer->config.hart_count) {
20001196:	cd11                	beqz	a0,200011b2 <dif_rv_timer_set_tick_params+0x1e>
20001198:	4158                	lw	a4,4(a0)
2000119a:	00e5fc63          	bgeu	a1,a4,200011b2 <dif_rv_timer_set_tick_params+0x1e>
2000119e:	4681                	li	a3,0
200011a0:	00ff1737          	lui	a4,0xff1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:101
  mmio_region_write32(timer->base_addr,
200011a4:	4108                	lw	a0,0(a0)
200011a6:	177d                	addi	a4,a4,-1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200011a8:	8e79                	and	a2,a2,a4
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200011aa:	05a2                	slli	a1,a1,0x8
200011ac:	952e                	add	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011ae:	10c52023          	sw	a2,256(a0)
dif_rv_timer_set_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:106
}
200011b2:	8536                	mv	a0,a3
200011b4:	8082                	ret

200011b6 <dif_rv_timer_counter_set_enabled>:
dif_rv_timer_counter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:110
    dif_rv_timer_enabled_t state) {
200011b6:	86aa                	mv	a3,a0
200011b8:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:111
  if (timer == NULL || hart_id >= timer->config.hart_count) {
200011ba:	ca8d                	beqz	a3,200011ec <dif_rv_timer_counter_set_enabled+0x36>
200011bc:	42d8                	lw	a4,4(a3)
200011be:	02e5f763          	bgeu	a1,a4,200011ec <dif_rv_timer_counter_set_enabled+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:115
  switch (state) {
200011c2:	ca19                	beqz	a2,200011d8 <dif_rv_timer_counter_set_enabled+0x22>
200011c4:	4705                	li	a4,1
200011c6:	02e61363          	bne	a2,a4,200011ec <dif_rv_timer_counter_set_enabled+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:117
      mmio_region_nonatomic_set_bit32(timer->base_addr,
200011ca:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011cc:	4214                	lw	a3,0(a2)
200011ce:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200011d0:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200011d4:	8dd5                	or	a1,a1,a3
200011d6:	a811                	j	200011ea <dif_rv_timer_counter_set_enabled+0x34>
dif_rv_timer_counter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:121
      mmio_region_nonatomic_clear_bit32(timer->base_addr,
200011d8:	4290                	lw	a2,0(a3)
200011da:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011dc:	4214                	lw	a3,0(a2)
200011de:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200011e0:	00b715b3          	sll	a1,a4,a1
200011e4:	fff5c593          	not	a1,a1
200011e8:	8df5                	and	a1,a1,a3
200011ea:	c20c                	sw	a1,0(a2)
dif_rv_timer_counter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:129
}
200011ec:	8082                	ret

200011ee <dif_rv_timer_counter_read>:
dif_rv_timer_counter_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:133
                                                uint64_t *out) {
200011ee:	86aa                	mv	a3,a0
200011f0:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:134
  if (timer == NULL || out == NULL || hart_id >= timer->config.hart_count) {
200011f2:	c685                	beqz	a3,2000121a <dif_rv_timer_counter_read+0x2c>
200011f4:	c21d                	beqz	a2,2000121a <dif_rv_timer_counter_read+0x2c>
200011f6:	42d8                	lw	a4,4(a3)
200011f8:	02e5f163          	bgeu	a1,a4,2000121a <dif_rv_timer_counter_read+0x2c>
200011fc:	4288                	lw	a0,0(a3)
200011fe:	05a2                	slli	a1,a1,0x8
20001200:	95aa                	add	a1,a1,a0
20001202:	10858513          	addi	a0,a1,264
20001206:	10458713          	addi	a4,a1,260
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000120a:	410c                	lw	a1,0(a0)
2000120c:	4314                	lw	a3,0(a4)
2000120e:	411c                	lw	a5,0(a0)
dif_rv_timer_counter_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:154
    if (upper == overflow_check) {
20001210:	fef59de3          	bne	a1,a5,2000120a <dif_rv_timer_counter_read+0x1c>
20001214:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:155
      *out = (((uint64_t)upper) << 32) | lower;
20001216:	c24c                	sw	a1,4(a2)
20001218:	c214                	sw	a3,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:159
}
2000121a:	8082                	ret

2000121c <dif_rv_timer_arm>:
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:163
                                       uint64_t threshold) {
2000121c:	4805                	li	a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:164
  if (timer == NULL || hart_id >= timer->config.hart_count ||
2000121e:	c915                	beqz	a0,20001252 <dif_rv_timer_arm+0x36>
20001220:	415c                	lw	a5,4(a0)
20001222:	02f5f863          	bgeu	a1,a5,20001252 <dif_rv_timer_arm+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:165
      comp_id >= timer->config.comparator_count) {
20001226:	451c                	lw	a5,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:164
  if (timer == NULL || hart_id >= timer->config.hart_count ||
20001228:	02f67563          	bgeu	a2,a5,20001252 <dif_rv_timer_arm+0x36>
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000122c:	05a2                	slli	a1,a1,0x8
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:182
  mmio_region_write32(timer->base_addr, upper_reg, UINT32_MAX);
2000122e:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:174
      (sizeof(uint64_t) * comp_id);
20001230:	060e                	slli	a2,a2,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
20001232:	95b2                	add	a1,a1,a2
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:176
      reg_for_hart(hart_id, RV_TIMER_COMPARE_UPPER0_0_REG_OFFSET) +
20001234:	11058613          	addi	a2,a1,272
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001238:	00c78833          	add	a6,a5,a2
2000123c:	57fd                	li	a5,-1
2000123e:	00f82023          	sw	a5,0(a6)
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:185
  mmio_region_write32(timer->base_addr, lower_reg, lower);
20001242:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:173
      reg_for_hart(hart_id, RV_TIMER_COMPARE_LOWER0_0_REG_OFFSET) +
20001244:	95be                	add	a1,a1,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001246:	10d5a623          	sw	a3,268(a1)
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:187
  mmio_region_write32(timer->base_addr, upper_reg, upper);
2000124a:	4108                	lw	a0,0(a0)
2000124c:	4801                	li	a6,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000124e:	9532                	add	a0,a0,a2
20001250:	c118                	sw	a4,0(a0)
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:190
}
20001252:	8542                	mv	a0,a6
20001254:	8082                	ret

20001256 <dif_rv_timer_irq_enable>:
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:227
                                              dif_rv_timer_enabled_t state) {
20001256:	872a                	mv	a4,a0
20001258:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:228
  if (timer == NULL || hart_id >= timer->config.hart_count ||
2000125a:	c339                	beqz	a4,200012a0 <dif_rv_timer_irq_enable+0x4a>
2000125c:	435c                	lw	a5,4(a4)
2000125e:	04f5f163          	bgeu	a1,a5,200012a0 <dif_rv_timer_irq_enable+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:229
      comp_id >= timer->config.comparator_count) {
20001262:	471c                	lw	a5,8(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:228
  if (timer == NULL || hart_id >= timer->config.hart_count ||
20001264:	02f67e63          	bgeu	a2,a5,200012a0 <dif_rv_timer_irq_enable+0x4a>
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
20001268:	078e                	slli	a5,a5,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000126a:	05a2                	slli	a1,a1,0x8
2000126c:	95be                	add	a1,a1,a5
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
2000126e:	10c58593          	addi	a1,a1,268
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:236
  switch (state) {
20001272:	ce81                	beqz	a3,2000128a <dif_rv_timer_irq_enable+0x34>
20001274:	4785                	li	a5,1
20001276:	02f69563          	bne	a3,a5,200012a0 <dif_rv_timer_irq_enable+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:238
      mmio_region_nonatomic_set_bit32(timer->base_addr, reg, comp_id);
2000127a:	4308                	lw	a0,0(a4)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000127c:	95aa                	add	a1,a1,a0
2000127e:	4194                	lw	a3,0(a1)
20001280:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001282:	00c79633          	sll	a2,a5,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001286:	8e55                	or	a2,a2,a3
20001288:	a819                	j	2000129e <dif_rv_timer_irq_enable+0x48>
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:241
      mmio_region_nonatomic_clear_bit32(timer->base_addr, reg, comp_id);
2000128a:	4314                	lw	a3,0(a4)
2000128c:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000128e:	95b6                	add	a1,a1,a3
20001290:	4194                	lw	a3,0(a1)
20001292:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001294:	00c71633          	sll	a2,a4,a2
20001298:	fff64613          	not	a2,a2
2000129c:	8e75                	and	a2,a2,a3
2000129e:	c190                	sw	a2,0(a1)
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:248
}
200012a0:	8082                	ret

200012a2 <dif_rv_timer_irq_get>:
dif_rv_timer_irq_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:252
                                           bool *flag_out) {
200012a2:	872a                	mv	a4,a0
200012a4:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:253
  if (timer == NULL || flag_out == NULL ||
200012a6:	c715                	beqz	a4,200012d2 <dif_rv_timer_irq_get+0x30>
200012a8:	c68d                	beqz	a3,200012d2 <dif_rv_timer_irq_get+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:254
      hart_id >= timer->config.hart_count ||
200012aa:	435c                	lw	a5,4(a4)
200012ac:	02f5f363          	bgeu	a1,a5,200012d2 <dif_rv_timer_irq_get+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:255
      comp_id >= timer->config.comparator_count) {
200012b0:	471c                	lw	a5,8(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:253
  if (timer == NULL || flag_out == NULL ||
200012b2:	02f67063          	bgeu	a2,a5,200012d2 <dif_rv_timer_irq_get+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:262
  *flag_out = mmio_region_get_bit32(timer->base_addr, reg, comp_id);
200012b6:	4308                	lw	a0,0(a4)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
200012b8:	00379713          	slli	a4,a5,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200012bc:	05a2                	slli	a1,a1,0x8
200012be:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
200012c0:	952e                	add	a0,a0,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200012c2:	11052583          	lw	a1,272(a0)
200012c6:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200012c8:	00c5d5b3          	srl	a1,a1,a2
200012cc:	8985                	andi	a1,a1,1
dif_rv_timer_irq_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:262
  *flag_out = mmio_region_get_bit32(timer->base_addr, reg, comp_id);
200012ce:	00b68023          	sb	a1,0(a3) # ffff0000 <_data_init_start+0xdffed278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:265
}
200012d2:	8082                	ret

200012d4 <dif_rv_timer_irq_clear>:
dif_rv_timer_irq_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:269
                                             uint32_t comp_id) {
200012d4:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:270
  if (timer == NULL || hart_id >= timer->config.hart_count ||
200012d6:	c115                	beqz	a0,200012fa <dif_rv_timer_irq_clear+0x26>
200012d8:	4158                	lw	a4,4(a0)
200012da:	02e5f063          	bgeu	a1,a4,200012fa <dif_rv_timer_irq_clear+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:271
      comp_id >= timer->config.comparator_count) {
200012de:	4518                	lw	a4,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:270
  if (timer == NULL || hart_id >= timer->config.hart_count ||
200012e0:	00e67d63          	bgeu	a2,a4,200012fa <dif_rv_timer_irq_clear+0x26>
200012e4:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:278
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
200012e6:	4108                	lw	a0,0(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
200012e8:	070e                	slli	a4,a4,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200012ea:	05a2                	slli	a1,a1,0x8
200012ec:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
200012ee:	952e                	add	a0,a0,a1
200012f0:	4585                	li	a1,1
dif_rv_timer_irq_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:278
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
200012f2:	00c595b3          	sll	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200012f6:	10b52823          	sw	a1,272(a0)
dif_rv_timer_irq_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:281
}
200012fa:	8536                	mv	a0,a3
200012fc:	8082                	ret

200012fe <dif_rv_timer_irq_disable>:
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:285
                                               uint32_t *state) {
200012fe:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:286
  if (timer == NULL || hart_id >= timer->config.hart_count) {
20001300:	c905                	beqz	a0,20001330 <dif_rv_timer_irq_disable+0x32>
20001302:	4158                	lw	a4,4(a0)
20001304:	02e5f663          	bgeu	a1,a4,20001330 <dif_rv_timer_irq_disable+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:290
  ptrdiff_t reg = irq_reg_for_hart(hart_id, timer->config.comparator_count,
20001308:	4514                	lw	a3,8(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
2000130a:	068e                	slli	a3,a3,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000130c:	05a2                	slli	a1,a1,0x8
2000130e:	95b6                	add	a1,a1,a3
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
20001310:	10c58593          	addi	a1,a1,268
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:293
  if (state != NULL) {
20001314:	c619                	beqz	a2,20001322 <dif_rv_timer_irq_disable+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:294
    *state = mmio_region_read32(timer->base_addr, reg);
20001316:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001318:	96ae                	add	a3,a3,a1
2000131a:	4294                	lw	a3,0(a3)
2000131c:	8189                	srli	a1,a1,0x2
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:294
2000131e:	c214                	sw	a3,0(a2)
20001320:	a011                	j	20001324 <dif_rv_timer_irq_disable+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001322:	8189                	srli	a1,a1,0x2
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:297
  mmio_region_write32(timer->base_addr, reg, 0);
20001324:	4108                	lw	a0,0(a0)
20001326:	4681                	li	a3,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001328:	058a                	slli	a1,a1,0x2
2000132a:	952e                	add	a0,a0,a1
2000132c:	00052023          	sw	zero,0(a0)
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:300
}
20001330:	8536                	mv	a0,a3
20001332:	8082                	ret

20001334 <dif_rv_timer_irq_restore>:
dif_rv_timer_irq_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:304
                                               uint32_t state) {
20001334:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:305
  if (timer == NULL || hart_id >= timer->config.hart_count) {
20001336:	cd09                	beqz	a0,20001350 <dif_rv_timer_irq_restore+0x1c>
20001338:	4158                	lw	a4,4(a0)
2000133a:	00e5fb63          	bgeu	a1,a4,20001350 <dif_rv_timer_irq_restore+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:309
  ptrdiff_t reg = irq_reg_for_hart(hart_id, timer->config.comparator_count,
2000133e:	4518                	lw	a4,8(a0)
20001340:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:312
  mmio_region_write32(timer->base_addr, reg, state);
20001342:	4108                	lw	a0,0(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
20001344:	070e                	slli	a4,a4,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
20001346:	05a2                	slli	a1,a1,0x8
20001348:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
2000134a:	952e                	add	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000134c:	10c52623          	sw	a2,268(a0)
dif_rv_timer_irq_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:315
}
20001350:	8536                	mv	a0,a3
20001352:	8082                	ret

20001354 <dif_rv_timer_irq_force>:
dif_rv_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:319
                                             uint32_t comp_id) {
20001354:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:320
  if (timer == NULL || hart_id >= timer->config.hart_count ||
20001356:	c115                	beqz	a0,2000137a <dif_rv_timer_irq_force+0x26>
20001358:	4158                	lw	a4,4(a0)
2000135a:	02e5f063          	bgeu	a1,a4,2000137a <dif_rv_timer_irq_force+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:321
      comp_id >= timer->config.comparator_count) {
2000135e:	4518                	lw	a4,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:320
  if (timer == NULL || hart_id >= timer->config.hart_count ||
20001360:	00e67d63          	bgeu	a2,a4,2000137a <dif_rv_timer_irq_force+0x26>
20001364:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:328
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
20001366:	4108                	lw	a0,0(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
20001368:	070e                	slli	a4,a4,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000136a:	05a2                	slli	a1,a1,0x8
2000136c:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
2000136e:	952e                	add	a0,a0,a1
20001370:	4585                	li	a1,1
dif_rv_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:328
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
20001372:	00c595b3          	sll	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001376:	10b52a23          	sw	a1,276(a0)
dif_rv_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:331
}
2000137a:	8536                	mv	a0,a3
2000137c:	8082                	ret
	...

20001380 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20001380:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20001382:	de06                	sw	ra,60(sp)
20001384:	dc16                	sw	t0,56(sp)
20001386:	da1a                	sw	t1,52(sp)
20001388:	d81e                	sw	t2,48(sp)
2000138a:	d62a                	sw	a0,44(sp)
2000138c:	d42e                	sw	a1,40(sp)
2000138e:	d232                	sw	a2,36(sp)
20001390:	d036                	sw	a3,32(sp)
20001392:	ce3a                	sw	a4,28(sp)
20001394:	cc3e                	sw	a5,24(sp)
20001396:	ca42                	sw	a6,20(sp)
20001398:	c846                	sw	a7,16(sp)
2000139a:	c672                	sw	t3,12(sp)
2000139c:	c476                	sw	t4,8(sp)
2000139e:	c27a                	sw	t5,4(sp)
200013a0:	c07e                	sw	t6,0(sp)
200013a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200013a6:	897d                	andi	a0,a0,31
200013a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200013aa:	00a5dc63          	bge	a1,a0,200013c2 <handler_exception+0x42>
200013ae:	4599                	li	a1,6
200013b0:	02a5c263          	blt	a1,a0,200013d4 <handler_exception+0x54>
200013b4:	458d                	li	a1,3
200013b6:	02b50c63          	beq	a0,a1,200013ee <handler_exception+0x6e>
200013ba:	4595                	li	a1,5
200013bc:	02b50763          	beq	a0,a1,200013ea <handler_exception+0x6a>
200013c0:	a015                	j	200013e4 <handler_exception+0x64>
200013c2:	c115                	beqz	a0,200013e6 <handler_exception+0x66>
200013c4:	4585                	li	a1,1
200013c6:	02b50063          	beq	a0,a1,200013e6 <handler_exception+0x66>
200013ca:	4589                	li	a1,2
200013cc:	00b51c63          	bne	a0,a1,200013e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200013d0:	2095                	jal	20001434 <handler_instr_ill_fault>
200013d2:	a839                	j	200013f0 <handler_exception+0x70>
200013d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200013d6:	00b50a63          	beq	a0,a1,200013ea <handler_exception+0x6a>
200013da:	45ad                	li	a1,11
200013dc:	00b51463          	bne	a0,a1,200013e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200013e0:	2845                	jal	20001490 <handler_ecall>
200013e2:	a039                	j	200013f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200013e4:	a001                	j	200013e4 <handler_exception+0x64>
200013e6:	2805                	jal	20001416 <handler_instr_acc_fault>
200013e8:	a021                	j	200013f0 <handler_exception+0x70>
200013ea:	2061                	jal	20001472 <handler_lsu_fault>
200013ec:	a011                	j	200013f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200013ee:	209d                	jal	20001454 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200013f0:	4f82                	lw	t6,0(sp)
200013f2:	4f12                	lw	t5,4(sp)
200013f4:	4ea2                	lw	t4,8(sp)
200013f6:	4e32                	lw	t3,12(sp)
200013f8:	48c2                	lw	a7,16(sp)
200013fa:	4852                	lw	a6,20(sp)
200013fc:	47e2                	lw	a5,24(sp)
200013fe:	4772                	lw	a4,28(sp)
20001400:	5682                	lw	a3,32(sp)
20001402:	5612                	lw	a2,36(sp)
20001404:	55a2                	lw	a1,40(sp)
20001406:	5532                	lw	a0,44(sp)
20001408:	53c2                	lw	t2,48(sp)
2000140a:	5352                	lw	t1,52(sp)
2000140c:	52e2                	lw	t0,56(sp)
2000140e:	50f2                	lw	ra,60(sp)
20001410:	6121                	addi	sp,sp,64
20001412:	30200073          	mret

20001416 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20001416:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20001418:	de06                	sw	ra,60(sp)
2000141a:	dc22                	sw	s0,56(sp)
2000141c:	00002597          	auipc	a1,0x2
20001420:	83858593          	addi	a1,a1,-1992 # 20002c54 <genrand_int32.mag01+0x68>
20001424:	0040                	addi	s0,sp,4
20001426:	03400613          	li	a2,52
2000142a:	8522                	mv	a0,s0
2000142c:	83cff0ef          	jal	ra,20000468 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
20001430:	8522                	mv	a0,s0
20001432:	2a71                	jal	200015ce <print_exc_msg>

20001434 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20001434:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20001436:	c686                	sw	ra,76(sp)
20001438:	c4a2                	sw	s0,72(sp)
2000143a:	00002597          	auipc	a1,0x2
2000143e:	84e58593          	addi	a1,a1,-1970 # 20002c88 <genrand_int32.mag01+0x9c>
20001442:	00d10413          	addi	s0,sp,13
20001446:	03b00613          	li	a2,59
2000144a:	8522                	mv	a0,s0
2000144c:	81cff0ef          	jal	ra,20000468 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20001450:	8522                	mv	a0,s0
20001452:	2ab5                	jal	200015ce <print_exc_msg>

20001454 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20001454:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20001456:	de06                	sw	ra,60(sp)
20001458:	dc22                	sw	s0,56(sp)
2000145a:	00002597          	auipc	a1,0x2
2000145e:	86958593          	addi	a1,a1,-1943 # 20002cc3 <genrand_int32.mag01+0xd7>
20001462:	840a                	mv	s0,sp
20001464:	03800613          	li	a2,56
20001468:	8522                	mv	a0,s0
2000146a:	ffffe0ef          	jal	ra,20000468 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
2000146e:	8522                	mv	a0,s0
20001470:	2ab9                	jal	200015ce <print_exc_msg>

20001472 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20001472:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20001474:	de06                	sw	ra,60(sp)
20001476:	dc22                	sw	s0,56(sp)
20001478:	00002597          	auipc	a1,0x2
2000147c:	88358593          	addi	a1,a1,-1917 # 20002cfb <genrand_int32.mag01+0x10f>
20001480:	0020                	addi	s0,sp,8
20001482:	03000613          	li	a2,48
20001486:	8522                	mv	a0,s0
20001488:	fe1fe0ef          	jal	ra,20000468 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000148c:	8522                	mv	a0,s0
2000148e:	2281                	jal	200015ce <print_exc_msg>

20001490 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20001490:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20001492:	ce06                	sw	ra,28(sp)
20001494:	cc22                	sw	s0,24(sp)
20001496:	00001517          	auipc	a0,0x1
2000149a:	5d250513          	addi	a0,a0,1490 # 20002a68 <kDeviceLogBypassUartAddress>
2000149e:	4108                	lw	a0,0(a0)
200014a0:	c901                	beqz	a0,200014b0 <handler_ecall+0x20>
200014a2:	e000f517          	auipc	a0,0xe000f
200014a6:	b9a50513          	addi	a0,a0,-1126 # 1003c <handler_ecall.kLogFields>
200014aa:	4581                	li	a1,0
200014ac:	2349                	jal	20001a2e <base_log_internal_dv>
200014ae:	a821                	j	200014c6 <handler_ecall+0x36>
200014b0:	00001597          	auipc	a1,0x1
200014b4:	54858593          	addi	a1,a1,1352 # 200029f8 <__umoddi3+0x3a0>
200014b8:	840a                	mv	s0,sp
200014ba:	4651                	li	a2,20
200014bc:	8522                	mv	a0,s0
200014be:	fabfe0ef          	jal	ra,20000468 <memcpy>
200014c2:	8522                	mv	a0,s0
200014c4:	21c1                	jal	20001984 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200014c6:	a001                	j	200014c6 <handler_ecall+0x36>

200014c8 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200014c8:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200014ca:	ce86                	sw	ra,92(sp)
200014cc:	cc96                	sw	t0,88(sp)
200014ce:	ca9a                	sw	t1,84(sp)
200014d0:	c89e                	sw	t2,80(sp)
200014d2:	c6a2                	sw	s0,76(sp)
200014d4:	c4aa                	sw	a0,72(sp)
200014d6:	c2ae                	sw	a1,68(sp)
200014d8:	c0b2                	sw	a2,64(sp)
200014da:	de36                	sw	a3,60(sp)
200014dc:	dc3a                	sw	a4,56(sp)
200014de:	da3e                	sw	a5,52(sp)
200014e0:	d842                	sw	a6,48(sp)
200014e2:	d646                	sw	a7,44(sp)
200014e4:	d472                	sw	t3,40(sp)
200014e6:	d276                	sw	t4,36(sp)
200014e8:	d07a                	sw	t5,32(sp)
200014ea:	ce7e                	sw	t6,28(sp)
200014ec:	00001517          	auipc	a0,0x1
200014f0:	57c50513          	addi	a0,a0,1404 # 20002a68 <kDeviceLogBypassUartAddress>
200014f4:	4108                	lw	a0,0(a0)
200014f6:	c901                	beqz	a0,20001506 <handler_irq_software+0x3e>
200014f8:	e000f517          	auipc	a0,0xe000f
200014fc:	b0850513          	addi	a0,a0,-1272 # 10000 <_dv_log_offset>
20001500:	4581                	li	a1,0
20001502:	2335                	jal	20001a2e <base_log_internal_dv>
20001504:	a821                	j	2000151c <handler_irq_software+0x54>
20001506:	00001597          	auipc	a1,0x1
2000150a:	4b658593          	addi	a1,a1,1206 # 200029bc <__umoddi3+0x364>
2000150e:	0020                	addi	s0,sp,8
20001510:	4651                	li	a2,20
20001512:	8522                	mv	a0,s0
20001514:	f55fe0ef          	jal	ra,20000468 <memcpy>
20001518:	8522                	mv	a0,s0
2000151a:	21ad                	jal	20001984 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000151c:	a001                	j	2000151c <handler_irq_software+0x54>
2000151e:	0001                	nop
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
20001520:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
20001522:	ce86                	sw	ra,92(sp)
20001524:	cc96                	sw	t0,88(sp)
20001526:	ca9a                	sw	t1,84(sp)
20001528:	c89e                	sw	t2,80(sp)
2000152a:	c6a2                	sw	s0,76(sp)
2000152c:	c4aa                	sw	a0,72(sp)
2000152e:	c2ae                	sw	a1,68(sp)
20001530:	c0b2                	sw	a2,64(sp)
20001532:	de36                	sw	a3,60(sp)
20001534:	dc3a                	sw	a4,56(sp)
20001536:	da3e                	sw	a5,52(sp)
20001538:	d842                	sw	a6,48(sp)
2000153a:	d646                	sw	a7,44(sp)
2000153c:	d472                	sw	t3,40(sp)
2000153e:	d276                	sw	t4,36(sp)
20001540:	d07a                	sw	t5,32(sp)
20001542:	ce7e                	sw	t6,28(sp)
20001544:	00001517          	auipc	a0,0x1
20001548:	52450513          	addi	a0,a0,1316 # 20002a68 <kDeviceLogBypassUartAddress>
2000154c:	4108                	lw	a0,0(a0)
2000154e:	c901                	beqz	a0,2000155e <handler_irq_software+0x96>
20001550:	e000f517          	auipc	a0,0xe000f
20001554:	ac450513          	addi	a0,a0,-1340 # 10014 <handler_irq_timer.kLogFields>
20001558:	4581                	li	a1,0
2000155a:	29d1                	jal	20001a2e <base_log_internal_dv>
2000155c:	a821                	j	20001574 <handler_irq_software+0xac>
2000155e:	00001597          	auipc	a1,0x1
20001562:	47258593          	addi	a1,a1,1138 # 200029d0 <__umoddi3+0x378>
20001566:	0020                	addi	s0,sp,8
20001568:	4651                	li	a2,20
2000156a:	8522                	mv	a0,s0
2000156c:	efdfe0ef          	jal	ra,20000468 <memcpy>
20001570:	8522                	mv	a0,s0
20001572:	2909                	jal	20001984 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20001574:	a001                	j	20001574 <handler_irq_software+0xac>
20001576:	0001                	nop

20001578 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20001578:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
2000157a:	ce86                	sw	ra,92(sp)
2000157c:	cc96                	sw	t0,88(sp)
2000157e:	ca9a                	sw	t1,84(sp)
20001580:	c89e                	sw	t2,80(sp)
20001582:	c6a2                	sw	s0,76(sp)
20001584:	c4aa                	sw	a0,72(sp)
20001586:	c2ae                	sw	a1,68(sp)
20001588:	c0b2                	sw	a2,64(sp)
2000158a:	de36                	sw	a3,60(sp)
2000158c:	dc3a                	sw	a4,56(sp)
2000158e:	da3e                	sw	a5,52(sp)
20001590:	d842                	sw	a6,48(sp)
20001592:	d646                	sw	a7,44(sp)
20001594:	d472                	sw	t3,40(sp)
20001596:	d276                	sw	t4,36(sp)
20001598:	d07a                	sw	t5,32(sp)
2000159a:	ce7e                	sw	t6,28(sp)
2000159c:	00001517          	auipc	a0,0x1
200015a0:	4cc50513          	addi	a0,a0,1228 # 20002a68 <kDeviceLogBypassUartAddress>
200015a4:	4108                	lw	a0,0(a0)
200015a6:	c901                	beqz	a0,200015b6 <handler_irq_external+0x3e>
200015a8:	e000f517          	auipc	a0,0xe000f
200015ac:	a8050513          	addi	a0,a0,-1408 # 10028 <handler_irq_external.kLogFields>
200015b0:	4581                	li	a1,0
200015b2:	29b5                	jal	20001a2e <base_log_internal_dv>
200015b4:	a821                	j	200015cc <handler_irq_external+0x54>
200015b6:	00001597          	auipc	a1,0x1
200015ba:	42e58593          	addi	a1,a1,1070 # 200029e4 <__umoddi3+0x38c>
200015be:	0020                	addi	s0,sp,8
200015c0:	4651                	li	a2,20
200015c2:	8522                	mv	a0,s0
200015c4:	ea5fe0ef          	jal	ra,20000468 <memcpy>
200015c8:	8522                	mv	a0,s0
200015ca:	2e6d                	jal	20001984 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200015cc:	a001                	j	200015cc <handler_irq_external+0x54>

200015ce <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200015ce:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200015d0:	ce06                	sw	ra,28(sp)
200015d2:	cc22                	sw	s0,24(sp)
200015d4:	ca26                	sw	s1,20(sp)
200015d6:	00001597          	auipc	a1,0x1
200015da:	49258593          	addi	a1,a1,1170 # 20002a68 <kDeviceLogBypassUartAddress>
200015de:	418c                	lw	a1,0(a1)
200015e0:	842a                	mv	s0,a0
200015e2:	c18d                	beqz	a1,20001604 <print_exc_msg+0x36>
200015e4:	e000f517          	auipc	a0,0xe000f
200015e8:	a6c50513          	addi	a0,a0,-1428 # 10050 <print_exc_msg.kLogFields>
200015ec:	4585                	li	a1,1
200015ee:	8622                	mv	a2,s0
200015f0:	293d                	jal	20001a2e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200015f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200015f6:	e000f517          	auipc	a0,0xe000f
200015fa:	a6e50513          	addi	a0,a0,-1426 # 10064 <print_exc_msg.kLogFields.6>
200015fe:	4585                	li	a1,1
20001600:	213d                	jal	20001a2e <base_log_internal_dv>
20001602:	a81d                	j	20001638 <print_exc_msg+0x6a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20001604:	00001597          	auipc	a1,0x1
20001608:	40858593          	addi	a1,a1,1032 # 20002a0c <__umoddi3+0x3b4>
2000160c:	848a                	mv	s1,sp
2000160e:	4651                	li	a2,20
20001610:	8526                	mv	a0,s1
20001612:	e57fe0ef          	jal	ra,20000468 <memcpy>
20001616:	8526                	mv	a0,s1
20001618:	85a2                	mv	a1,s0
2000161a:	26ad                	jal	20001984 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000161c:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20001620:	00001597          	auipc	a1,0x1
20001624:	40058593          	addi	a1,a1,1024 # 20002a20 <__umoddi3+0x3c8>
20001628:	848a                	mv	s1,sp
2000162a:	4651                	li	a2,20
2000162c:	8526                	mv	a0,s1
2000162e:	e3bfe0ef          	jal	ra,20000468 <memcpy>
20001632:	8526                	mv	a0,s1
20001634:	85a2                	mv	a1,s0
20001636:	26b9                	jal	20001984 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20001638:	a001                	j	20001638 <print_exc_msg+0x6a>
	...

2000163c <pinmux_init>:
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:29
    reg_value++;
    reg_offset += 4;
  }
}

void pinmux_init(void) {
2000163c:	4509                	li	a0,2
2000163e:	404605b7          	lui	a1,0x40460
20001642:	0dc58593          	addi	a1,a1,220 # 404600dc <_data_init_start+0x2045d354>
20001646:	02200613          	li	a2,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000164a:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
2000164c:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
2000164e:	0591                	addi	a1,a1,4
20001650:	fec51de3          	bne	a0,a2,2000164a <pinmux_init+0xe>
20001654:	450d                	li	a0,3
20001656:	404605b7          	lui	a1,0x40460
2000165a:	27458593          	addi	a1,a1,628 # 40460274 <_data_init_start+0x2045d4ec>
2000165e:	02300613          	li	a2,35
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001662:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
20001664:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
20001666:	0591                	addi	a1,a1,4
20001668:	fec51de3          	bne	a0,a2,20001662 <pinmux_init+0x26>
2000166c:	40460537          	lui	a0,0x40460
20001670:	02200593          	li	a1,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001674:	18b52223          	sw	a1,388(a0) # 40460184 <_data_init_start+0x2045d3fc>
20001678:	02d00593          	li	a1,45
2000167c:	2eb52c23          	sw	a1,760(a0)
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:63
  // We've got one insel configuration field per register. Hence, we have to
  // convert the enumeration index into a byte address using << 2.
  reg_offset = kTopEarlgreyPinmuxMioOutIoc11 << 2;
  mask = PINMUX_MIO_OUTSEL_0_OUT_0_MASK;
  mmio_region_write32(reg32, reg_offset, reg_value & mask);
}
20001680:	8082                	ret
	...

20001684 <simple_serial_init>:
simple_serial_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:175
static void simple_serial_unknown_command(const uint8_t *data,
                                          size_t data_len) {
  simple_serial_send_status(kSimpleSerialError);
}

void simple_serial_init(const dif_uart_t *uart_) {
20001684:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:176
  uart = uart_;
20001686:	effff617          	auipc	a2,0xeffff
2000168a:	99260613          	addi	a2,a2,-1646 # 10000018 <uart>
2000168e:	c208                	sw	a0,0(a2)
20001690:	1ec18513          	addi	a0,gp,492 # 100009ec <handlers>
20001694:	00000617          	auipc	a2,0x0
20001698:	02e60613          	addi	a2,a2,46 # 200016c2 <simple_serial_unknown_command>
2000169c:	06c00693          	li	a3,108
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:179

  for (size_t i = 0; i < ARRAYSIZE(handlers); ++i) {
    handlers[i] = simple_serial_unknown_command;
200016a0:	00a58733          	add	a4,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:178
  for (size_t i = 0; i < ARRAYSIZE(handlers); ++i) {
200016a4:	0591                	addi	a1,a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:179
    handlers[i] = simple_serial_unknown_command;
200016a6:	c310                	sw	a2,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:178
  for (size_t i = 0; i < ARRAYSIZE(handlers); ++i) {
200016a8:	fed59ce3          	bne	a1,a3,200016a0 <simple_serial_init+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:181
  }
  handlers[simple_serial_get_handler_index('s')] = simple_serial_seed_prng;
200016ac:	00000597          	auipc	a1,0x0
200016b0:	03258593          	addi	a1,a1,50 # 200016de <simple_serial_seed_prng>
200016b4:	c52c                	sw	a1,72(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:182
  handlers[simple_serial_get_handler_index('v')] = simple_serial_version;
200016b6:	00000597          	auipc	a1,0x0
200016ba:	05458593          	addi	a1,a1,84 # 2000170a <simple_serial_version>
200016be:	c96c                	sw	a1,84(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:183
}
200016c0:	8082                	ret

200016c2 <simple_serial_unknown_command>:
simple_serial_unknown_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:171
                                          size_t data_len) {
200016c2:	1141                	addi	sp,sp,-16
200016c4:	c606                	sw	ra,12(sp)
200016c6:	4505                	li	a0,1
simple_serial_send_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:214
  simple_serial_print_hex(data, data_len);
  base_printf("\n");
}

void simple_serial_send_status(uint8_t res) {
  simple_serial_send_packet('z', (uint8_t[1]){res}, 1);
200016c8:	00a105a3          	sb	a0,11(sp)
200016cc:	00b10593          	addi	a1,sp,11
200016d0:	07a00513          	li	a0,122
200016d4:	4605                	li	a2,1
200016d6:	2a7d                	jal	20001894 <simple_serial_send_packet>
simple_serial_unknown_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:173
}
200016d8:	40b2                	lw	ra,12(sp)
200016da:	0141                	addi	sp,sp,16
200016dc:	8082                	ret

200016de <simple_serial_seed_prng>:
simple_serial_seed_prng():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:157
static void simple_serial_seed_prng(const uint8_t *seed, size_t seed_len) {
200016de:	1141                	addi	sp,sp,-16
200016e0:	c606                	sw	ra,12(sp)
200016e2:	4611                	li	a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:158
  SS_CHECK(seed_len == sizeof(uint32_t));
200016e4:	00c59763          	bne	a1,a2,200016f2 <simple_serial_seed_prng+0x14>
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200016e8:	4108                	lw	a0,0(a0)
simple_serial_seed_prng():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:159
  prng_seed(read_32(seed));
200016ea:	40b2                	lw	ra,12(sp)
200016ec:	0141                	addi	sp,sp,16
200016ee:	9faff06f          	j	200008e8 <prng_seed>
200016f2:	4505                	li	a0,1
simple_serial_send_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:214
  simple_serial_send_packet('z', (uint8_t[1]){res}, 1);
200016f4:	00a105a3          	sb	a0,11(sp)
200016f8:	00b10593          	addi	a1,sp,11
200016fc:	07a00513          	li	a0,122
20001700:	4605                	li	a2,1
20001702:	2a49                	jal	20001894 <simple_serial_send_packet>
simple_serial_seed_prng():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:160
}
20001704:	40b2                	lw	ra,12(sp)
20001706:	0141                	addi	sp,sp,16
20001708:	8082                	ret

2000170a <simple_serial_version>:
simple_serial_version():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:145
static void simple_serial_version(const uint8_t *data, size_t data_len) {
2000170a:	1141                	addi	sp,sp,-16
2000170c:	c606                	sw	ra,12(sp)
2000170e:	4505                	li	a0,1
simple_serial_send_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:214
  simple_serial_send_packet('z', (uint8_t[1]){res}, 1);
20001710:	00a105a3          	sb	a0,11(sp)
20001714:	00b10593          	addi	a1,sp,11
20001718:	07a00513          	li	a0,122
2000171c:	4605                	li	a2,1
2000171e:	2a9d                	jal	20001894 <simple_serial_send_packet>
simple_serial_version():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:147
}
20001720:	40b2                	lw	ra,12(sp)
20001722:	0141                	addi	sp,sp,16
20001724:	8082                	ret

20001726 <simple_serial_register_handler>:
simple_serial_is_valid_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:45
  return cmd >= 'a' && cmd <= 'z';
20001726:	f9f50613          	addi	a2,a0,-97
2000172a:	0ff67693          	andi	a3,a2,255
2000172e:	4765                	li	a4,25
20001730:	4605                	li	a2,1
simple_serial_register_handler():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:187
  if (!simple_serial_is_valid_command(cmd)) {
20001732:	02d76163          	bltu	a4,a3,20001754 <simple_serial_register_handler+0x2e>
20001736:	07300693          	li	a3,115
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:189
  } else if (cmd == 's' || cmd == 'v') {
2000173a:	00d50d63          	beq	a0,a3,20001754 <simple_serial_register_handler+0x2e>
2000173e:	07600693          	li	a3,118
20001742:	00d50963          	beq	a0,a3,20001754 <simple_serial_register_handler+0x2e>
20001746:	4601                	li	a2,0
simple_serial_get_handler_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:128
  if (simple_serial_is_valid_command(cmd)) {
20001748:	050a                	slli	a0,a0,0x2
2000174a:	1ec18693          	addi	a3,gp,492 # 100009ec <handlers>
2000174e:	9536                	add	a0,a0,a3
simple_serial_register_handler():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:193
    handlers[simple_serial_get_handler_index(cmd)] = handler;
20001750:	e6b52e23          	sw	a1,-388(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:196
}
20001754:	8532                	mv	a0,a2
20001756:	8082                	ret

20001758 <simple_serial_process_packet>:
simple_serial_process_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:198
void simple_serial_process_packet(void) {
20001758:	7159                	addi	sp,sp,-112
2000175a:	d686                	sw	ra,108(sp)
2000175c:	d4a2                	sw	s0,104(sp)
2000175e:	d2a6                	sw	s1,100(sp)
20001760:	d0ca                	sw	s2,96(sp)
20001762:	cece                	sw	s3,92(sp)
20001764:	ccd2                	sw	s4,88(sp)
20001766:	cad6                	sw	s5,84(sp)
20001768:	c8da                	sw	s6,80(sp)
2000176a:	c6de                	sw	s7,76(sp)
2000176c:	c4e2                	sw	s8,72(sp)
2000176e:	c2e6                	sw	s9,68(sp)
20001770:	04310993          	addi	s3,sp,67
20001774:	effff497          	auipc	s1,0xeffff
20001778:	8a448493          	addi	s1,s1,-1884 # 10000018 <uart>
2000177c:	04110913          	addi	s2,sp,65
20001780:	4aa9                	li	s5,10
20001782:	04210a13          	addi	s4,sp,66
20001786:	4b25                	li	s6,9
20001788:	04000b93          	li	s7,64
2000178c:	00110c13          	addi	s8,sp,1
20001790:	4c95                	li	s9,5
simple_serial_receive_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:88
    IGNORE_RESULT(dif_uart_byte_receive_polled(uart, cmd));
20001792:	4088                	lw	a0,0(s1)
20001794:	85ca                	mv	a1,s2
20001796:	257000ef          	jal	ra,200021ec <dif_uart_byte_receive_polled>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:89
    if (*cmd == '\n') {
2000179a:	04114503          	lbu	a0,65(sp)
2000179e:	ff550ae3          	beq	a0,s5,20001792 <simple_serial_process_packet+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:96
      IGNORE_RESULT(dif_uart_byte_receive_polled(uart, &hex_byte[0]));
200017a2:	4088                	lw	a0,0(s1)
200017a4:	85d2                	mv	a1,s4
200017a6:	247000ef          	jal	ra,200021ec <dif_uart_byte_receive_polled>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:97
      if (hex_byte[0] == '\n') {
200017aa:	04214503          	lbu	a0,66(sp)
200017ae:	0f550163          	beq	a0,s5,20001890 <simple_serial_process_packet+0x138>
200017b2:	4401                	li	s0,0
simple_serial_hex_to_bin():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:58
  if (hex >= '0' && hex <= '9') {
200017b4:	fd050593          	addi	a1,a0,-48
200017b8:	0ff5f613          	andi	a2,a1,255
200017bc:	00cb6563          	bltu	s6,a2,200017c6 <simple_serial_process_packet+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:59
    *val = hex - '0';
200017c0:	04b10123          	sb	a1,66(sp)
200017c4:	a025                	j	200017ec <simple_serial_process_packet+0x94>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:60
  } else if (hex >= 'A' && hex <= 'F') {
200017c6:	fbf50593          	addi	a1,a0,-65
200017ca:	0ff5f593          	andi	a1,a1,255
200017ce:	00bce563          	bltu	s9,a1,200017d8 <simple_serial_process_packet+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:61
    *val = hex - 'A' + 10;
200017d2:	fc950513          	addi	a0,a0,-55
200017d6:	a809                	j	200017e8 <simple_serial_process_packet+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:62
  } else if (hex >= 'a' && hex <= 'f') {
200017d8:	f9f50593          	addi	a1,a0,-97
200017dc:	0ff5f593          	andi	a1,a1,255
200017e0:	fabce9e3          	bltu	s9,a1,20001792 <simple_serial_process_packet+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:63
    *val = hex - 'a' + 10;
200017e4:	fa950513          	addi	a0,a0,-87
200017e8:	04a10123          	sb	a0,66(sp)
simple_serial_receive_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:104
      IGNORE_RESULT(dif_uart_byte_receive_polled(uart, &hex_byte[1]));
200017ec:	4088                	lw	a0,0(s1)
200017ee:	85ce                	mv	a1,s3
200017f0:	1fd000ef          	jal	ra,200021ec <dif_uart_byte_receive_polled>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:105
      if (simple_serial_hex_to_bin(hex_byte[1], &hex_byte[1]) !=
200017f4:	04314503          	lbu	a0,67(sp)
simple_serial_hex_to_bin():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:58
  if (hex >= '0' && hex <= '9') {
200017f8:	fd050593          	addi	a1,a0,-48
200017fc:	0ff5f613          	andi	a2,a1,255
20001800:	03566363          	bltu	a2,s5,20001826 <simple_serial_process_packet+0xce>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:60
  } else if (hex >= 'A' && hex <= 'F') {
20001804:	fbf50593          	addi	a1,a0,-65
20001808:	0ff5f593          	andi	a1,a1,255
2000180c:	00bce563          	bltu	s9,a1,20001816 <simple_serial_process_packet+0xbe>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:61
    *val = hex - 'A' + 10;
20001810:	fc950593          	addi	a1,a0,-55
20001814:	a809                	j	20001826 <simple_serial_process_packet+0xce>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:62
  } else if (hex >= 'a' && hex <= 'f') {
20001816:	f9f50593          	addi	a1,a0,-97
2000181a:	0ff5f593          	andi	a1,a1,255
2000181e:	f6bceae3          	bltu	s9,a1,20001792 <simple_serial_process_packet+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:63
    *val = hex - 'a' + 10;
20001822:	fa950593          	addi	a1,a0,-87
20001826:	04b101a3          	sb	a1,67(sp)
simple_serial_receive_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:109
      if (*data_len == data_buf_len) {
2000182a:	f77404e3          	beq	s0,s7,20001792 <simple_serial_process_packet+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:112
      data[*data_len] = hex_byte[0] << 4 | hex_byte[1];
2000182e:	04210503          	lb	a0,66(sp)
20001832:	0512                	slli	a0,a0,0x4
20001834:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:96
      IGNORE_RESULT(dif_uart_byte_receive_polled(uart, &hex_byte[0]));
20001836:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:112
      data[*data_len] = hex_byte[0] << 4 | hex_byte[1];
20001838:	008c0633          	add	a2,s8,s0
2000183c:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:113
      ++*data_len;
20001840:	0405                	addi	s0,s0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:96
      IGNORE_RESULT(dif_uart_byte_receive_polled(uart, &hex_byte[0]));
20001842:	85d2                	mv	a1,s4
20001844:	1a9000ef          	jal	ra,200021ec <dif_uart_byte_receive_polled>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:97
      if (hex_byte[0] == '\n') {
20001848:	04214503          	lbu	a0,66(sp)
2000184c:	f75514e3          	bne	a0,s5,200017b4 <simple_serial_process_packet+0x5c>
simple_serial_process_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:203
  handlers[simple_serial_get_handler_index(cmd)](data, data_len);
20001850:	04114503          	lbu	a0,65(sp)
simple_serial_is_valid_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:45
  return cmd >= 'a' && cmd <= 'z';
20001854:	f9f50513          	addi	a0,a0,-97
20001858:	0ff57593          	andi	a1,a0,255
2000185c:	4669                	li	a2,26
simple_serial_get_handler_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:128
  if (simple_serial_is_valid_command(cmd)) {
2000185e:	00c5e363          	bltu	a1,a2,20001864 <simple_serial_process_packet+0x10c>
20001862:	4569                	li	a0,26
simple_serial_process_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:203
  handlers[simple_serial_get_handler_index(cmd)](data, data_len);
20001864:	050a                	slli	a0,a0,0x2
20001866:	1ec18593          	addi	a1,gp,492 # 100009ec <handlers>
2000186a:	952e                	add	a0,a0,a1
2000186c:	4110                	lw	a2,0(a0)
2000186e:	00110513          	addi	a0,sp,1
20001872:	85a2                	mv	a1,s0
20001874:	9602                	jalr	a2
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:204
}
20001876:	4c96                	lw	s9,68(sp)
20001878:	4c26                	lw	s8,72(sp)
2000187a:	4bb6                	lw	s7,76(sp)
2000187c:	4b46                	lw	s6,80(sp)
2000187e:	4ad6                	lw	s5,84(sp)
20001880:	4a66                	lw	s4,88(sp)
20001882:	49f6                	lw	s3,92(sp)
20001884:	5906                	lw	s2,96(sp)
20001886:	5496                	lw	s1,100(sp)
20001888:	5426                	lw	s0,104(sp)
2000188a:	50b6                	lw	ra,108(sp)
2000188c:	6165                	addi	sp,sp,112
2000188e:	8082                	ret
20001890:	4401                	li	s0,0
20001892:	bf7d                	j	20001850 <simple_serial_process_packet+0xf8>

20001894 <simple_serial_send_packet>:
simple_serial_send_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:207
                               size_t data_len) {
20001894:	1141                	addi	sp,sp,-16
20001896:	c606                	sw	ra,12(sp)
20001898:	c422                	sw	s0,8(sp)
2000189a:	c226                	sw	s1,4(sp)
2000189c:	c04a                	sw	s2,0(sp)
2000189e:	8432                	mv	s0,a2
200018a0:	84ae                	mv	s1,a1
200018a2:	85aa                	mv	a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:208
  base_printf("%c", cmd);
200018a4:	00001517          	auipc	a0,0x1
200018a8:	4bb50513          	addi	a0,a0,1211 # 20002d5f <genrand_int32.mag01+0x173>
200018ac:	242d                	jal	20001ad6 <base_printf>
simple_serial_print_hex():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:218
}

void simple_serial_print_hex(const uint8_t *data, size_t data_len) {
  for (size_t i = 0; i < data_len; ++i) {
200018ae:	cc01                	beqz	s0,200018c6 <simple_serial_send_packet+0x32>
200018b0:	00001917          	auipc	s2,0x1
200018b4:	4b290913          	addi	s2,s2,1202 # 20002d62 <genrand_int32.mag01+0x176>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:219
    base_printf("%2x", data[i]);
200018b8:	0004c583          	lbu	a1,0(s1)
200018bc:	854a                	mv	a0,s2
200018be:	2c21                	jal	20001ad6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:218
  for (size_t i = 0; i < data_len; ++i) {
200018c0:	147d                	addi	s0,s0,-1
200018c2:	0485                	addi	s1,s1,1
200018c4:	f875                	bnez	s0,200018b8 <simple_serial_send_packet+0x24>
simple_serial_send_packet():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:210
  base_printf("\n");
200018c6:	00001517          	auipc	a0,0x1
200018ca:	4af50513          	addi	a0,a0,1199 # 20002d75 <genrand_int32.mag01+0x189>
200018ce:	4902                	lw	s2,0(sp)
200018d0:	4492                	lw	s1,4(sp)
200018d2:	4422                	lw	s0,8(sp)
200018d4:	40b2                	lw	ra,12(sp)
200018d6:	0141                	addi	sp,sp,16
200018d8:	aafd                	j	20001ad6 <base_printf>

200018da <simple_serial_print_hex>:
simple_serial_print_hex():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:217
void simple_serial_print_hex(const uint8_t *data, size_t data_len) {
200018da:	1141                	addi	sp,sp,-16
200018dc:	c606                	sw	ra,12(sp)
200018de:	c422                	sw	s0,8(sp)
200018e0:	c226                	sw	s1,4(sp)
200018e2:	c04a                	sw	s2,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:218
  for (size_t i = 0; i < data_len; ++i) {
200018e4:	cd91                	beqz	a1,20001900 <simple_serial_print_hex+0x26>
200018e6:	842e                	mv	s0,a1
200018e8:	84aa                	mv	s1,a0
200018ea:	00001917          	auipc	s2,0x1
200018ee:	47890913          	addi	s2,s2,1144 # 20002d62 <genrand_int32.mag01+0x176>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:219
    base_printf("%2x", data[i]);
200018f2:	0004c583          	lbu	a1,0(s1)
200018f6:	854a                	mv	a0,s2
200018f8:	2af9                	jal	20001ad6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:218
  for (size_t i = 0; i < data_len; ++i) {
200018fa:	147d                	addi	s0,s0,-1
200018fc:	0485                	addi	s1,s1,1
200018fe:	f875                	bnez	s0,200018f2 <simple_serial_print_hex+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:221
  }
}
20001900:	4902                	lw	s2,0(sp)
20001902:	4492                	lw	s1,4(sp)
20001904:	4422                	lw	s0,8(sp)
20001906:	40b2                	lw	ra,12(sp)
20001908:	0141                	addi	sp,sp,16
2000190a:	8082                	ret

2000190c <simple_serial_send_status>:
simple_serial_send_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:213
void simple_serial_send_status(uint8_t res) {
2000190c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:214
  simple_serial_send_packet('z', (uint8_t[1]){res}, 1);
2000190e:	c606                	sw	ra,12(sp)
20001910:	00a105a3          	sb	a0,11(sp)
20001914:	00b10593          	addi	a1,sp,11
20001918:	07a00513          	li	a0,122
2000191c:	4605                	li	a2,1
2000191e:	3f9d                	jal	20001894 <simple_serial_send_packet>
/home/gl/work/opentitan/repo/build-out/../sw/device/sca/lib/simple_serial.c:215
}
20001920:	40b2                	lw	ra,12(sp)
20001922:	0141                	addi	sp,sp,16
20001924:	8082                	ret
	...

20001928 <irq_set_vector_offset>:
irq_set_vector_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:14
static const uint32_t IRQ_EXT_ENABLE_OFFSET = 11;
static const uint32_t IRQ_TIMER_ENABLE_OFFSET = 7;
static const uint32_t IRQ_SW_ENABLE_OFFSET = 3;

void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
20001928:	30551073          	csrw	mtvec,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:15
}
2000192c:	8082                	ret

2000192e <irq_global_ctrl>:
irq_global_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:18

void irq_global_ctrl(bool en) {
  if (en) {
2000192e:	c509                	beqz	a0,20001938 <irq_global_ctrl+0xa>
20001930:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
20001932:	30052073          	csrs	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
20001936:	8082                	ret
20001938:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
2000193a:	30053073          	csrc	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
}
2000193e:	8082                	ret

20001940 <irq_external_ctrl>:
irq_external_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
20001940:	c519                	beqz	a0,2000194e <irq_external_ctrl+0xe>
20001942:	6505                	lui	a0,0x1
20001944:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001948:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
2000194c:	8082                	ret
2000194e:	6505                	lui	a0,0x1
20001950:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20001954:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
}
20001958:	8082                	ret

2000195a <irq_timer_ctrl>:
irq_timer_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
2000195a:	c511                	beqz	a0,20001966 <irq_timer_ctrl+0xc>
2000195c:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001960:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20001964:	8082                	ret
20001966:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
2000196a:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
}
2000196e:	8082                	ret

20001970 <irq_software_ctrl>:
irq_software_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
20001970:	c509                	beqz	a0,2000197a <irq_software_ctrl+0xa>
20001972:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001974:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20001978:	8082                	ret
2000197a:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
2000197c:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
}
20001980:	8082                	ret
	...

20001984 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20001984:	7139                	addi	sp,sp,-64
20001986:	ce06                	sw	ra,28(sp)
20001988:	cc22                	sw	s0,24(sp)
2000198a:	ca26                	sw	s1,20(sp)
2000198c:	c84a                	sw	s2,16(sp)
2000198e:	892a                	mv	s2,a0
20001990:	de46                	sw	a7,60(sp)
20001992:	dc42                	sw	a6,56(sp)
20001994:	da3e                	sw	a5,52(sp)
20001996:	d83a                	sw	a4,48(sp)
20001998:	d636                	sw	a3,44(sp)
2000199a:	d432                	sw	a2,40(sp)
2000199c:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
2000199e:	4144                	lw	s1,4(a0)
200019a0:	80000537          	lui	a0,0x80000
200019a4:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd277>
200019a8:	8526                	mv	a0,s1
200019aa:	4581                	li	a1,0
200019ac:	b0dfe0ef          	jal	ra,200004b8 <memchr>
200019b0:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
200019b4:	02f00593          	li	a1,47
200019b8:	8526                	mv	a0,s1
200019ba:	b17fe0ef          	jal	ra,200004d0 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200019be:	00092583          	lw	a1,0(s2)
200019c2:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
200019c4:	00b66b63          	bltu	a2,a1,200019da <base_log_internal_core+0x56>
200019c8:	058a                	slli	a1,a1,0x2
200019ca:	00001617          	auipc	a2,0x1
200019ce:	0a260613          	addi	a2,a2,162 # 20002a6c <kDeviceLogBypassUartAddress+0x4>
200019d2:	95b2                	add	a1,a1,a2
200019d4:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
200019d6:	e519                	bnez	a0,200019e4 <base_log_internal_core+0x60>
200019d8:	a801                	j	200019e8 <base_log_internal_core+0x64>
200019da:	00001597          	auipc	a1,0x1
200019de:	3a558593          	addi	a1,a1,933 # 20002d7f <genrand_int32.mag01+0x193>
200019e2:	c119                	beqz	a0,200019e8 <base_log_internal_core+0x64>
200019e4:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
200019e8:	efffe417          	auipc	s0,0xefffe
200019ec:	63440413          	addi	s0,s0,1588 # 1000001c <base_log_internal_core.global_log_counter>
200019f0:	00045603          	lhu	a2,0(s0)
200019f4:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200019f8:	00001517          	auipc	a0,0x1
200019fc:	36e50513          	addi	a0,a0,878 # 20002d66 <genrand_int32.mag01+0x17a>
20001a00:	86a6                	mv	a3,s1
20001a02:	28d1                	jal	20001ad6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001a04:	00041503          	lh	a0,0(s0)
20001a08:	0505                	addi	a0,a0,1
20001a0a:	00a41023          	sh	a0,0(s0)
20001a0e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20001a10:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20001a12:	01092503          	lw	a0,16(s2)
20001a16:	28c5                	jal	20001b06 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001a18:	00001517          	auipc	a0,0x1
20001a1c:	35c50513          	addi	a0,a0,860 # 20002d74 <genrand_int32.mag01+0x188>
20001a20:	285d                	jal	20001ad6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20001a22:	4942                	lw	s2,16(sp)
20001a24:	44d2                	lw	s1,20(sp)
20001a26:	4462                	lw	s0,24(sp)
20001a28:	40f2                	lw	ra,28(sp)
20001a2a:	6121                	addi	sp,sp,64
20001a2c:	8082                	ret

20001a2e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20001a2e:	1101                	addi	sp,sp,-32
20001a30:	ce46                	sw	a7,28(sp)
20001a32:	cc42                	sw	a6,24(sp)
20001a34:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20001a36:	00001797          	auipc	a5,0x1
20001a3a:	03278793          	addi	a5,a5,50 # 20002a68 <kDeviceLogBypassUartAddress>
20001a3e:	439c                	lw	a5,0(a5)
20001a40:	c83a                	sw	a4,16(sp)
20001a42:	c636                	sw	a3,12(sp)
20001a44:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a46:	c388                	sw	a0,0(a5)
20001a48:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20001a4a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001a4c:	c989                	beqz	a1,20001a5e <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20001a4e:	4512                	lw	a0,4(sp)
20001a50:	00450613          	addi	a2,a0,4
20001a54:	c232                	sw	a2,4(sp)
20001a56:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001a58:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a5a:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001a5c:	f9ed                	bnez	a1,20001a4e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20001a5e:	6105                	addi	sp,sp,32
20001a60:	8082                	ret
	...

20001a64 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20001a64:	e589                	bnez	a1,20001a6e <base_set_stdout+0xa>
20001a66:	00000597          	auipc	a1,0x0
20001a6a:	01658593          	addi	a1,a1,22 # 20001a7c <base_dev_null>
20001a6e:	efffe617          	auipc	a2,0xefffe
20001a72:	59660613          	addi	a2,a2,1430 # 10000004 <base_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20001a76:	c208                	sw	a0,0(a2)
20001a78:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20001a7a:	8082                	ret

20001a7c <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001a7c:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20001a7e:	8082                	ret

20001a80 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001a80:	efffe597          	auipc	a1,0xefffe
20001a84:	58458593          	addi	a1,a1,1412 # 10000004 <base_stdout>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20001a88:	c188                	sw	a0,0(a1)
20001a8a:	00000517          	auipc	a0,0x0
20001a8e:	00c50513          	addi	a0,a0,12 # 20001a96 <base_dev_uart>
20001a92:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001a94:	8082                	ret

20001a96 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20001a96:	1101                	addi	sp,sp,-32
20001a98:	ce06                	sw	ra,28(sp)
20001a9a:	cc22                	sw	s0,24(sp)
20001a9c:	ca26                	sw	s1,20(sp)
20001a9e:	c84a                	sw	s2,16(sp)
20001aa0:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001aa2:	c20d                	beqz	a2,20001ac4 <base_dev_uart+0x2e>
20001aa4:	8432                	mv	s0,a2
20001aa6:	892e                	mv	s2,a1
20001aa8:	89aa                	mv	s3,a0
20001aaa:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001aac:	00990533          	add	a0,s2,s1
20001ab0:	00054583          	lbu	a1,0(a0)
20001ab4:	854e                	mv	a0,s3
20001ab6:	2f11                	jal	200021ca <dif_uart_byte_send_polled>
20001ab8:	e519                	bnez	a0,20001ac6 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001aba:	0485                	addi	s1,s1,1
20001abc:	fe9418e3          	bne	s0,s1,20001aac <base_dev_uart+0x16>
20001ac0:	84a2                	mv	s1,s0
20001ac2:	a011                	j	20001ac6 <base_dev_uart+0x30>
20001ac4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20001ac6:	8526                	mv	a0,s1
20001ac8:	49b2                	lw	s3,12(sp)
20001aca:	4942                	lw	s2,16(sp)
20001acc:	44d2                	lw	s1,20(sp)
20001ace:	4462                	lw	s0,24(sp)
20001ad0:	40f2                	lw	ra,28(sp)
20001ad2:	6105                	addi	sp,sp,32
20001ad4:	8082                	ret

20001ad6 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20001ad6:	7179                	addi	sp,sp,-48
20001ad8:	c606                	sw	ra,12(sp)
20001ada:	d646                	sw	a7,44(sp)
20001adc:	d442                	sw	a6,40(sp)
20001ade:	d23e                	sw	a5,36(sp)
20001ae0:	d03a                	sw	a4,32(sp)
20001ae2:	ce36                	sw	a3,28(sp)
20001ae4:	cc32                	sw	a2,24(sp)
20001ae6:	ca2e                	sw	a1,20(sp)
20001ae8:	efffe597          	auipc	a1,0xefffe
20001aec:	51c58593          	addi	a1,a1,1308 # 10000004 <base_stdout>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20001af0:	4190                	lw	a2,0(a1)
20001af2:	41cc                	lw	a1,4(a1)
20001af4:	872a                	mv	a4,a0
20001af6:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20001af8:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001afa:	8532                	mv	a0,a2
20001afc:	863a                	mv	a2,a4
20001afe:	200d                	jal	20001b20 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20001b00:	40b2                	lw	ra,12(sp)
20001b02:	6145                	addi	sp,sp,48
20001b04:	8082                	ret

20001b06 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20001b06:	efffe697          	auipc	a3,0xefffe
20001b0a:	4fe68693          	addi	a3,a3,1278 # 10000004 <base_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001b0e:	4290                	lw	a2,0(a3)
20001b10:	42d4                	lw	a3,4(a3)
20001b12:	872e                	mv	a4,a1
20001b14:	87aa                	mv	a5,a0
20001b16:	8532                	mv	a0,a2
20001b18:	85b6                	mv	a1,a3
20001b1a:	863e                	mv	a2,a5
20001b1c:	86ba                	mv	a3,a4
20001b1e:	a009                	j	20001b20 <base_vfprintf>

20001b20 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20001b20:	7139                	addi	sp,sp,-64
20001b22:	de06                	sw	ra,60(sp)
20001b24:	dc22                	sw	s0,56(sp)
20001b26:	da26                	sw	s1,52(sp)
20001b28:	d84a                	sw	s2,48(sp)
20001b2a:	d64e                	sw	s3,44(sp)
20001b2c:	d452                	sw	s4,40(sp)
20001b2e:	d256                	sw	s5,36(sp)
20001b30:	d05a                	sw	s6,32(sp)
20001b32:	ce5e                	sw	s7,28(sp)
20001b34:	cc62                	sw	s8,24(sp)
20001b36:	ca66                	sw	s9,20(sp)
20001b38:	c86a                	sw	s10,16(sp)
20001b3a:	c66e                	sw	s11,12(sp)
20001b3c:	8bb2                	mv	s7,a2
20001b3e:	892a                	mv	s2,a0
20001b40:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20001b42:	c199                	beqz	a1,20001b48 <base_vfprintf+0x28>
20001b44:	89ae                	mv	s3,a1
20001b46:	a029                	j	20001b50 <base_vfprintf+0x30>
20001b48:	00000997          	auipc	s3,0x0
20001b4c:	f3498993          	addi	s3,s3,-204 # 20001a7c <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001b50:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20001b52:	000bc503          	lbu	a0,0(s7)
20001b56:	28050f63          	beqz	a0,20001df4 <base_vfprintf+0x2d4>
20001b5a:	4b01                	li	s6,0
20001b5c:	02500c13          	li	s8,37
20001b60:	4ca5                	li	s9,9
20001b62:	02000d13          	li	s10,32
20001b66:	06800d93          	li	s11,104
20001b6a:	00001a17          	auipc	s4,0x1
20001b6e:	217a0a13          	addi	s4,s4,535 # 20002d81 <genrand_int32.mag01+0x195>
20001b72:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20001b74:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20001b76:	0ff57413          	andi	s0,a0,255
20001b7a:	01840963          	beq	s0,s8,20001b8c <base_vfprintf+0x6c>
20001b7e:	c419                	beqz	s0,20001b8c <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001b80:	009b8533          	add	a0,s7,s1
20001b84:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20001b88:	0485                	addi	s1,s1,1
20001b8a:	b7f5                	j	20001b76 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20001b8c:	c491                	beqz	s1,20001b98 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20001b8e:	854a                	mv	a0,s2
20001b90:	85de                	mv	a1,s7
20001b92:	8626                	mv	a2,s1
20001b94:	9982                	jalr	s3
20001b96:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20001b98:	24040f63          	beqz	s0,20001df6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001b9c:	009b8633          	add	a2,s7,s1
20001ba0:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001ba4:	22050f63          	beqz	a0,20001de2 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001ba8:	fd050593          	addi	a1,a0,-48
20001bac:	0ff5f593          	andi	a1,a1,255
20001bb0:	00bcf863          	bgeu	s9,a1,20001bc0 <base_vfprintf+0xa0>
20001bb4:	4401                	li	s0,0
20001bb6:	4581                	li	a1,0
20001bb8:	4605                	li	a2,1
20001bba:	028d7f63          	bgeu	s10,s0,20001bf8 <base_vfprintf+0xd8>
20001bbe:	aca1                	j	20001e16 <base_vfprintf+0x2f6>
20001bc0:	4581                	li	a1,0
20001bc2:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001bc4:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001bc6:	00b606b3          	add	a3,a2,a1
20001bca:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001bce:	20068a63          	beqz	a3,20001de2 <base_vfprintf+0x2c2>
20001bd2:	0ff57513          	andi	a0,a0,255
20001bd6:	03540733          	mul	a4,s0,s5
20001bda:	953a                	add	a0,a0,a4
20001bdc:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001be0:	fd068513          	addi	a0,a3,-48
20001be4:	0ff57713          	andi	a4,a0,255
20001be8:	0585                	addi	a1,a1,1
20001bea:	8536                	mv	a0,a3
20001bec:	fcecfde3          	bgeu	s9,a4,20001bc6 <base_vfprintf+0xa6>
20001bf0:	4601                	li	a2,0
20001bf2:	8536                	mv	a0,a3
20001bf4:	228d6163          	bltu	s10,s0,20001e16 <base_vfprintf+0x2f6>
20001bf8:	008036b3          	snez	a3,s0
20001bfc:	8e55                	or	a2,a2,a3
20001bfe:	20060c63          	beqz	a2,20001e16 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001c02:	95de                	add	a1,a1,s7
20001c04:	95a6                	add	a1,a1,s1
20001c06:	00258b93          	addi	s7,a1,2
20001c0a:	02adce63          	blt	s11,a0,20001c46 <base_vfprintf+0x126>
20001c0e:	06100593          	li	a1,97
20001c12:	06a5d563          	bge	a1,a0,20001c7c <base_vfprintf+0x15c>
20001c16:	06300593          	li	a1,99
20001c1a:	0ca5cb63          	blt	a1,a0,20001cf0 <base_vfprintf+0x1d0>
20001c1e:	06200593          	li	a1,98
20001c22:	14b50a63          	beq	a0,a1,20001d76 <base_vfprintf+0x256>
20001c26:	06300593          	li	a1,99
20001c2a:	18b51f63          	bne	a0,a1,20001dc8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20001c2e:	4502                	lw	a0,0(sp)
20001c30:	00450593          	addi	a1,a0,4
20001c34:	c02e                	sw	a1,0(sp)
20001c36:	4108                	lw	a0,0(a0)
20001c38:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20001c3c:	4605                	li	a2,1
20001c3e:	854a                	mv	a0,s2
20001c40:	00b10593          	addi	a1,sp,11
20001c44:	aa41                	j	20001dd4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001c46:	07200593          	li	a1,114
20001c4a:	04a5dd63          	bge	a1,a0,20001ca4 <base_vfprintf+0x184>
20001c4e:	07700593          	li	a1,119
20001c52:	0aa5c663          	blt	a1,a0,20001cfe <base_vfprintf+0x1de>
20001c56:	07300593          	li	a1,115
20001c5a:	12b50963          	beq	a0,a1,20001d8c <base_vfprintf+0x26c>
20001c5e:	07500593          	li	a1,117
20001c62:	16b51363          	bne	a0,a1,20001dc8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20001c66:	4502                	lw	a0,0(sp)
20001c68:	00450593          	addi	a1,a0,4
20001c6c:	c02e                	sw	a1,0(sp)
20001c6e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001c70:	00001797          	auipc	a5,0x1
20001c74:	e2978793          	addi	a5,a5,-471 # 20002a99 <kDigitsLow>
20001c78:	4729                	li	a4,10
20001c7a:	a8cd                	j	20001d6c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001c7c:	13850763          	beq	a0,s8,20001daa <base_vfprintf+0x28a>
20001c80:	04800593          	li	a1,72
20001c84:	00b50663          	beq	a0,a1,20001c90 <base_vfprintf+0x170>
20001c88:	05800593          	li	a1,88
20001c8c:	12b51e63          	bne	a0,a1,20001dc8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001c90:	4502                	lw	a0,0(sp)
20001c92:	00450593          	addi	a1,a0,4
20001c96:	c02e                	sw	a1,0(sp)
20001c98:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20001c9a:	00001797          	auipc	a5,0x1
20001c9e:	e0f78793          	addi	a5,a5,-497 # 20002aa9 <kDigitsHigh>
20001ca2:	a0e1                	j	20001d6a <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001ca4:	06900593          	li	a1,105
20001ca8:	06b50d63          	beq	a0,a1,20001d22 <base_vfprintf+0x202>
20001cac:	06f00593          	li	a1,111
20001cb0:	10b50163          	beq	a0,a1,20001db2 <base_vfprintf+0x292>
20001cb4:	07000593          	li	a1,112
20001cb8:	10b51863          	bne	a0,a1,20001dc8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001cbc:	00001597          	auipc	a1,0x1
20001cc0:	0c958593          	addi	a1,a1,201 # 20002d85 <genrand_int32.mag01+0x199>
20001cc4:	4609                	li	a2,2
20001cc6:	854a                	mv	a0,s2
20001cc8:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20001cca:	4582                	lw	a1,0(sp)
20001ccc:	00458613          	addi	a2,a1,4
20001cd0:	c032                	sw	a2,0(sp)
20001cd2:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001cd4:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001cd8:	00001797          	auipc	a5,0x1
20001cdc:	dc178793          	addi	a5,a5,-575 # 20002a99 <kDigitsLow>
20001ce0:	46a1                	li	a3,8
20001ce2:	4741                	li	a4,16
20001ce4:	854a                	mv	a0,s2
20001ce6:	85ce                	mv	a1,s3
20001ce8:	2a5d                	jal	20001e9e <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20001cea:	00a40b33          	add	s6,s0,a0
20001cee:	a0ed                	j	20001dd8 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001cf0:	06400593          	li	a1,100
20001cf4:	02b50763          	beq	a0,a1,20001d22 <base_vfprintf+0x202>
20001cf8:	07b50063          	beq	a0,s11,20001d58 <base_vfprintf+0x238>
20001cfc:	a0f1                	j	20001dc8 <base_vfprintf+0x2a8>
20001cfe:	07800593          	li	a1,120
20001d02:	04b50b63          	beq	a0,a1,20001d58 <base_vfprintf+0x238>
20001d06:	07a00593          	li	a1,122
20001d0a:	0ab51f63          	bne	a0,a1,20001dc8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20001d0e:	4502                	lw	a0,0(sp)
20001d10:	00450593          	addi	a1,a0,4
20001d14:	c02e                	sw	a1,0(sp)
20001d16:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001d18:	00850593          	addi	a1,a0,8
20001d1c:	c02e                	sw	a1,0(sp)
20001d1e:	414c                	lw	a1,4(a0)
20001d20:	a84d                	j	20001dd2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20001d22:	4502                	lw	a0,0(sp)
20001d24:	00450593          	addi	a1,a0,4
20001d28:	c02e                	sw	a1,0(sp)
20001d2a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20001d2c:	557d                	li	a0,-1
20001d2e:	00954c63          	blt	a0,s1,20001d46 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20001d32:	00001597          	auipc	a1,0x1
20001d36:	05158593          	addi	a1,a1,81 # 20002d83 <genrand_int32.mag01+0x197>
20001d3a:	4605                	li	a2,1
20001d3c:	854a                	mv	a0,s2
20001d3e:	9982                	jalr	s3
20001d40:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20001d42:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001d46:	00001797          	auipc	a5,0x1
20001d4a:	d5378793          	addi	a5,a5,-685 # 20002a99 <kDigitsLow>
20001d4e:	4729                	li	a4,10
20001d50:	854a                	mv	a0,s2
20001d52:	85ce                	mv	a1,s3
20001d54:	8626                	mv	a2,s1
20001d56:	a829                	j	20001d70 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20001d58:	4502                	lw	a0,0(sp)
20001d5a:	00450593          	addi	a1,a0,4
20001d5e:	c02e                	sw	a1,0(sp)
20001d60:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20001d62:	00001797          	auipc	a5,0x1
20001d66:	d3778793          	addi	a5,a5,-713 # 20002a99 <kDigitsLow>
20001d6a:	4741                	li	a4,16
20001d6c:	854a                	mv	a0,s2
20001d6e:	85ce                	mv	a1,s3
20001d70:	86a2                	mv	a3,s0
20001d72:	2235                	jal	20001e9e <write_digits>
20001d74:	a08d                	j	20001dd6 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20001d76:	4502                	lw	a0,0(sp)
20001d78:	00450593          	addi	a1,a0,4
20001d7c:	c02e                	sw	a1,0(sp)
20001d7e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20001d80:	00001797          	auipc	a5,0x1
20001d84:	d1978793          	addi	a5,a5,-743 # 20002a99 <kDigitsLow>
20001d88:	4709                	li	a4,2
20001d8a:	b7cd                	j	20001d6c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20001d8c:	4502                	lw	a0,0(sp)
20001d8e:	00450593          	addi	a1,a0,4
20001d92:	c02e                	sw	a1,0(sp)
20001d94:	410c                	lw	a1,0(a0)
20001d96:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001d98:	00a58633          	add	a2,a1,a0
20001d9c:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20001da0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001da2:	fa7d                	bnez	a2,20001d98 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001da4:	fff50613          	addi	a2,a0,-1
20001da8:	a02d                	j	20001dd2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20001daa:	4605                	li	a2,1
20001dac:	854a                	mv	a0,s2
20001dae:	85d2                	mv	a1,s4
20001db0:	a015                	j	20001dd4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20001db2:	4502                	lw	a0,0(sp)
20001db4:	00450593          	addi	a1,a0,4
20001db8:	c02e                	sw	a1,0(sp)
20001dba:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001dbc:	00001797          	auipc	a5,0x1
20001dc0:	cdd78793          	addi	a5,a5,-803 # 20002a99 <kDigitsLow>
20001dc4:	4721                	li	a4,8
20001dc6:	b75d                	j	20001d6c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20001dc8:	00001597          	auipc	a1,0x1
20001dcc:	cf158593          	addi	a1,a1,-783 # 20002ab9 <kUnknownSpec>
20001dd0:	463d                	li	a2,15
20001dd2:	854a                	mv	a0,s2
20001dd4:	9982                	jalr	s3
20001dd6:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001dd8:	000bc503          	lbu	a0,0(s7)
20001ddc:	d8051ce3          	bnez	a0,20001b74 <base_vfprintf+0x54>
20001de0:	a819                	j	20001df6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20001de2:	00001597          	auipc	a1,0x1
20001de6:	c9a58593          	addi	a1,a1,-870 # 20002a7c <kErrorNul>
20001dea:	4645                	li	a2,17
20001dec:	854a                	mv	a0,s2
20001dee:	9982                	jalr	s3
20001df0:	9b2a                	add	s6,s6,a0
20001df2:	a011                	j	20001df6 <base_vfprintf+0x2d6>
20001df4:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20001df6:	855a                	mv	a0,s6
20001df8:	4db2                	lw	s11,12(sp)
20001dfa:	4d42                	lw	s10,16(sp)
20001dfc:	4cd2                	lw	s9,20(sp)
20001dfe:	4c62                	lw	s8,24(sp)
20001e00:	4bf2                	lw	s7,28(sp)
20001e02:	5b02                	lw	s6,32(sp)
20001e04:	5a92                	lw	s5,36(sp)
20001e06:	5a22                	lw	s4,40(sp)
20001e08:	59b2                	lw	s3,44(sp)
20001e0a:	5942                	lw	s2,48(sp)
20001e0c:	54d2                	lw	s1,52(sp)
20001e0e:	5462                	lw	s0,56(sp)
20001e10:	50f2                	lw	ra,60(sp)
20001e12:	6121                	addi	sp,sp,64
20001e14:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001e16:	00001597          	auipc	a1,0x1
20001e1a:	c7758593          	addi	a1,a1,-905 # 20002a8d <kErrorTooWide>
20001e1e:	4631                	li	a2,12
20001e20:	b7f1                	j	20001dec <base_vfprintf+0x2cc>

20001e22 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20001e22:	7179                	addi	sp,sp,-48
20001e24:	ca06                	sw	ra,20(sp)
20001e26:	d646                	sw	a7,44(sp)
20001e28:	d442                	sw	a6,40(sp)
20001e2a:	d23e                	sw	a5,36(sp)
20001e2c:	d03a                	sw	a4,32(sp)
20001e2e:	ce36                	sw	a3,28(sp)
20001e30:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20001e32:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001e34:	c42a                	sw	a0,8(sp)
20001e36:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001e38:	00000597          	auipc	a1,0x0
20001e3c:	01258593          	addi	a1,a1,18 # 20001e4a <snprintf_sink>
20001e40:	0028                	addi	a0,sp,8
20001e42:	39f9                	jal	20001b20 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001e44:	40d2                	lw	ra,20(sp)
20001e46:	6145                	addi	sp,sp,48
20001e48:	8082                	ret

20001e4a <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20001e4a:	1141                	addi	sp,sp,-16
20001e4c:	c606                	sw	ra,12(sp)
20001e4e:	c422                	sw	s0,8(sp)
20001e50:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20001e52:	4140                	lw	s0,4(a0)
20001e54:	c00d                	beqz	s0,20001e76 <snprintf_sink+0x2c>
20001e56:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20001e58:	00c46363          	bltu	s0,a2,20001e5e <snprintf_sink+0x14>
20001e5c:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20001e5e:	4088                	lw	a0,0(s1)
20001e60:	8622                	mv	a2,s0
20001e62:	e06fe0ef          	jal	ra,20000468 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001e66:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001e68:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001e6a:	9522                	add	a0,a0,s0
20001e6c:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001e6e:	40858533          	sub	a0,a1,s0
20001e72:	c0c8                	sw	a0,4(s1)
20001e74:	a011                	j	20001e78 <snprintf_sink+0x2e>
20001e76:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20001e78:	8522                	mv	a0,s0
20001e7a:	4492                	lw	s1,4(sp)
20001e7c:	4422                	lw	s0,8(sp)
20001e7e:	40b2                	lw	ra,12(sp)
20001e80:	0141                	addi	sp,sp,16
20001e82:	8082                	ret

20001e84 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001e84:	1101                	addi	sp,sp,-32
20001e86:	c206                	sw	ra,4(sp)
20001e88:	ce46                	sw	a7,28(sp)
20001e8a:	cc42                	sw	a6,24(sp)
20001e8c:	ca3e                	sw	a5,20(sp)
20001e8e:	c83a                	sw	a4,16(sp)
20001e90:	c636                	sw	a3,12(sp)
20001e92:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001e94:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20001e96:	3169                	jal	20001b20 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001e98:	4092                	lw	ra,4(sp)
20001e9a:	6105                	addi	sp,sp,32
20001e9c:	8082                	ret

20001e9e <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001e9e:	7139                	addi	sp,sp,-64
20001ea0:	de06                	sw	ra,60(sp)
20001ea2:	dc22                	sw	s0,56(sp)
20001ea4:	da26                	sw	s1,52(sp)
20001ea6:	d84a                	sw	s2,48(sp)
20001ea8:	d64e                	sw	s3,44(sp)
20001eaa:	892e                	mv	s2,a1
20001eac:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001eae:	ca05                	beqz	a2,20001ede <write_digits+0x40>
20001eb0:	4501                	li	a0,0
20001eb2:	02b10813          	addi	a6,sp,43
20001eb6:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001eb8:	02e65633          	divu	a2,a2,a4
20001ebc:	02e60433          	mul	s0,a2,a4
20001ec0:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001ec4:	943e                	add	s0,s0,a5
20001ec6:	00040403          	lb	s0,0(s0)
20001eca:	00a805b3          	add	a1,a6,a0
20001ece:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001ed2:	157d                	addi	a0,a0,-1
20001ed4:	fee4f1e3          	bgeu	s1,a4,20001eb6 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001ed8:	40a00633          	neg	a2,a0
20001edc:	a011                	j	20001ee0 <write_digits+0x42>
20001ede:	4601                	li	a2,0
20001ee0:	4485                	li	s1,1
20001ee2:	c291                	beqz	a3,20001ee6 <write_digits+0x48>
20001ee4:	84b6                	mv	s1,a3
20001ee6:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20001eea:	00a4e463          	bltu	s1,a0,20001ef2 <write_digits+0x54>
20001eee:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001ef2:	02967063          	bgeu	a2,s1,20001f12 <write_digits+0x74>
20001ef6:	0068                	addi	a0,sp,12
20001ef8:	8d05                	sub	a0,a0,s1
20001efa:	02050513          	addi	a0,a0,32
20001efe:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001f02:	03000593          	li	a1,48
20001f06:	8622                	mv	a2,s0
20001f08:	d76fe0ef          	jal	ra,2000047e <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001f0c:	147d                	addi	s0,s0,-1
20001f0e:	fc7d                	bnez	s0,20001f0c <write_digits+0x6e>
20001f10:	8626                	mv	a2,s1
20001f12:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001f14:	8d11                	sub	a0,a0,a2
20001f16:	02050593          	addi	a1,a0,32
20001f1a:	854e                	mv	a0,s3
20001f1c:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20001f1e:	59b2                	lw	s3,44(sp)
20001f20:	5942                	lw	s2,48(sp)
20001f22:	54d2                	lw	s1,52(sp)
20001f24:	5462                	lw	s0,56(sp)
20001f26:	50f2                	lw	ra,60(sp)
20001f28:	6121                	addi	sp,sp,64
20001f2a:	8082                	ret

20001f2c <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20001f2c:	c581                	beqz	a1,20001f34 <dif_uart_init+0x8>
20001f2e:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20001f30:	c188                	sw	a0,0(a1)
20001f32:	a011                	j	20001f36 <dif_uart_init+0xa>
20001f34:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001f36:	8532                	mv	a0,a2
20001f38:	8082                	ret

20001f3a <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20001f3a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001f3c:	c606                	sw	ra,12(sp)
20001f3e:	c422                	sw	s0,8(sp)
20001f40:	c226                	sw	s1,4(sp)
20001f42:	c92d                	beqz	a0,20001fb4 <dif_uart_configure+0x7a>
20001f44:	84ae                	mv	s1,a1
20001f46:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001f48:	418c                	lw	a1,0(a1)
20001f4a:	450d                	li	a0,3
20001f4c:	c5ad                	beqz	a1,20001fb6 <dif_uart_configure+0x7c>
20001f4e:	40d0                	lw	a2,4(s1)
20001f50:	c23d                	beqz	a2,20001fb6 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20001f52:	01459513          	slli	a0,a1,0x14
20001f56:	81b1                	srli	a1,a1,0xc
20001f58:	4681                	li	a3,0
20001f5a:	2e61                	jal	200022f2 <__udivdi3>
20001f5c:	6641                	lui	a2,0x10
20001f5e:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20001f60:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20001f62:	8d31                	xor	a0,a0,a2
20001f64:	8dc9                	or	a1,a1,a0
20001f66:	4511                	li	a0,4
20001f68:	e5b9                	bnez	a1,20001fb6 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20001f6a:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f6c:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20001f70:	4008                	lw	a0,0(s0)
20001f72:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f74:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20001f76:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f78:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001f7c:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f7e:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001f82:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f84:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20001f88:	4008                	lw	a0,0(s0)
20001f8a:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f8c:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20001f8e:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001f90:	01061513          	slli	a0,a2,0x10
20001f94:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20001f98:	c291                	beqz	a3,20001f9c <dif_uart_configure+0x62>
20001f9a:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001f9c:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001f9e:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001fa0:	e219                	bnez	a2,20001fa6 <dif_uart_configure+0x6c>
20001fa2:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20001fa6:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001fa8:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001faa:	400c                	lw	a1,0(s0)
20001fac:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001fae:	0005a223          	sw	zero,4(a1)
20001fb2:	a011                	j	20001fb6 <dif_uart_configure+0x7c>
20001fb4:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001fb6:	4492                	lw	s1,4(sp)
20001fb8:	4422                	lw	s0,8(sp)
20001fba:	40b2                	lw	ra,12(sp)
20001fbc:	0141                	addi	sp,sp,16
20001fbe:	8082                	ret

20001fc0 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001fc0:	1141                	addi	sp,sp,-16
20001fc2:	c606                	sw	ra,12(sp)
20001fc4:	c422                	sw	s0,8(sp)
20001fc6:	c226                	sw	s1,4(sp)
20001fc8:	84aa                	mv	s1,a0
20001fca:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001fcc:	c09d                	beqz	s1,20001ff2 <dif_uart_irq_is_pending+0x32>
20001fce:	8432                	mv	s0,a2
20001fd0:	c20d                	beqz	a2,20001ff2 <dif_uart_irq_is_pending+0x32>
20001fd2:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001fd4:	852e                	mv	a0,a1
20001fd6:	85b2                	mv	a1,a2
20001fd8:	2015                	jal	20001ffc <uart_irq_offset_get>
20001fda:	85aa                	mv	a1,a0
20001fdc:	4505                	li	a0,1
20001fde:	c991                	beqz	a1,20001ff2 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001fe0:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001fe2:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001fe4:	4602                	lw	a2,0(sp)
20001fe6:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001fe8:	00c5d5b3          	srl	a1,a1,a2
20001fec:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20001fee:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001ff2:	4492                	lw	s1,4(sp)
20001ff4:	4422                	lw	s0,8(sp)
20001ff6:	40b2                	lw	ra,12(sp)
20001ff8:	0141                	addi	sp,sp,16
20001ffa:	8082                	ret

20001ffc <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001ffc:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20001ffe:	00a66563          	bltu	a2,a0,20002008 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20002002:	c188                	sw	a0,0(a1)
20002004:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20002006:	8082                	ret
20002008:	4501                	li	a0,0
2000200a:	8082                	ret

2000200c <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
2000200c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
2000200e:	c606                	sw	ra,12(sp)
20002010:	c422                	sw	s0,8(sp)
20002012:	c10d                	beqz	a0,20002034 <dif_uart_irq_acknowledge+0x28>
20002014:	842a                	mv	s0,a0
20002016:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20002018:	852e                	mv	a0,a1
2000201a:	85b2                	mv	a1,a2
2000201c:	37c5                	jal	20001ffc <uart_irq_offset_get>
2000201e:	85aa                	mv	a1,a0
20002020:	4505                	li	a0,1
20002022:	c991                	beqz	a1,20002036 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20002024:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20002026:	4010                	lw	a2,0(s0)
20002028:	4501                	li	a0,0
2000202a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000202c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002030:	c20c                	sw	a1,0(a2)
20002032:	a011                	j	20002036 <dif_uart_irq_acknowledge+0x2a>
20002034:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20002036:	4422                	lw	s0,8(sp)
20002038:	40b2                	lw	ra,12(sp)
2000203a:	0141                	addi	sp,sp,16
2000203c:	8082                	ret

2000203e <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
2000203e:	c911                	beqz	a0,20002052 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20002040:	c581                	beqz	a1,20002048 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20002042:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002044:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20002046:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20002048:	410c                	lw	a1,0(a0)
2000204a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000204c:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20002050:	8082                	ret
20002052:	4509                	li	a0,2
20002054:	8082                	ret

20002056 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20002056:	862a                	mv	a2,a0
20002058:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
2000205a:	c611                	beqz	a2,20002066 <dif_uart_irq_restore_all+0x10>
2000205c:	c589                	beqz	a1,20002066 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
2000205e:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20002060:	4210                	lw	a2,0(a2)
20002062:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20002064:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20002066:	8082                	ret

20002068 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20002068:	1141                	addi	sp,sp,-16
2000206a:	c606                	sw	ra,12(sp)
2000206c:	c422                	sw	s0,8(sp)
2000206e:	c226                	sw	s1,4(sp)
20002070:	84aa                	mv	s1,a0
20002072:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20002074:	c485                	beqz	s1,2000209c <dif_uart_irq_get_enabled+0x34>
20002076:	8432                	mv	s0,a2
20002078:	c215                	beqz	a2,2000209c <dif_uart_irq_get_enabled+0x34>
2000207a:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000207c:	852e                	mv	a0,a1
2000207e:	85b2                	mv	a1,a2
20002080:	3fb5                	jal	20001ffc <uart_irq_offset_get>
20002082:	85aa                	mv	a1,a0
20002084:	4505                	li	a0,1
20002086:	c999                	beqz	a1,2000209c <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20002088:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000208a:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
2000208c:	4602                	lw	a2,0(sp)
2000208e:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20002090:	00c5d5b3          	srl	a1,a1,a2
20002094:	8985                	andi	a1,a1,1
20002096:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
2000209a:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
2000209c:	4492                	lw	s1,4(sp)
2000209e:	4422                	lw	s0,8(sp)
200020a0:	40b2                	lw	ra,12(sp)
200020a2:	0141                	addi	sp,sp,16
200020a4:	8082                	ret

200020a6 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
200020a6:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
200020a8:	c606                	sw	ra,12(sp)
200020aa:	c422                	sw	s0,8(sp)
200020ac:	c226                	sw	s1,4(sp)
200020ae:	c91d                	beqz	a0,200020e4 <dif_uart_irq_set_enabled+0x3e>
200020b0:	8432                	mv	s0,a2
200020b2:	84aa                	mv	s1,a0
200020b4:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200020b6:	852e                	mv	a0,a1
200020b8:	85b2                	mv	a1,a2
200020ba:	3789                	jal	20001ffc <uart_irq_offset_get>
200020bc:	85aa                	mv	a1,a0
200020be:	4505                	li	a0,1
200020c0:	c19d                	beqz	a1,200020e6 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200020c2:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200020c4:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
200020c6:	4682                	lw	a3,0(sp)
200020c8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
200020ca:	00143713          	seqz	a4,s0
200020ce:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200020d0:	00d797b3          	sll	a5,a5,a3
200020d4:	fff7c793          	not	a5,a5
200020d8:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200020da:	00d716b3          	sll	a3,a4,a3
200020de:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200020e0:	c1d0                	sw	a2,4(a1)
200020e2:	a011                	j	200020e6 <dif_uart_irq_set_enabled+0x40>
200020e4:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200020e6:	4492                	lw	s1,4(sp)
200020e8:	4422                	lw	s0,8(sp)
200020ea:	40b2                	lw	ra,12(sp)
200020ec:	0141                	addi	sp,sp,16
200020ee:	8082                	ret

200020f0 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200020f0:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200020f2:	c606                	sw	ra,12(sp)
200020f4:	c422                	sw	s0,8(sp)
200020f6:	c10d                	beqz	a0,20002118 <dif_uart_irq_force+0x28>
200020f8:	842a                	mv	s0,a0
200020fa:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200020fc:	852e                	mv	a0,a1
200020fe:	85b2                	mv	a1,a2
20002100:	3df5                	jal	20001ffc <uart_irq_offset_get>
20002102:	85aa                	mv	a1,a0
20002104:	4505                	li	a0,1
20002106:	c991                	beqz	a1,2000211a <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20002108:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
2000210a:	4010                	lw	a2,0(s0)
2000210c:	4501                	li	a0,0
2000210e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002110:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20002114:	c60c                	sw	a1,8(a2)
20002116:	a011                	j	2000211a <dif_uart_irq_force+0x2a>
20002118:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
2000211a:	4422                	lw	s0,8(sp)
2000211c:	40b2                	lw	ra,12(sp)
2000211e:	0141                	addi	sp,sp,16
20002120:	8082                	ret

20002122 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20002122:	cd09                	beqz	a0,2000213c <dif_uart_watermark_rx_set+0x1a>
20002124:	4691                	li	a3,4
20002126:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20002128:	00b6eb63          	bltu	a3,a1,2000213e <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000212c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000212e:	4d54                	lw	a3,28(a0)
20002130:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20002132:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20002134:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002136:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002138:	cd4c                	sw	a1,28(a0)
2000213a:	a011                	j	2000213e <dif_uart_watermark_rx_set+0x1c>
2000213c:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000213e:	8532                	mv	a0,a2
20002140:	8082                	ret

20002142 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20002142:	cd11                	beqz	a0,2000215e <dif_uart_watermark_tx_set+0x1c>
20002144:	468d                	li	a3,3
20002146:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20002148:	00b6ec63          	bltu	a3,a1,20002160 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000214c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000214e:	4d54                	lw	a3,28(a0)
20002150:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20002152:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002154:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002158:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000215a:	cd4c                	sw	a1,28(a0)
2000215c:	a011                	j	20002160 <dif_uart_watermark_tx_set+0x1e>
2000215e:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20002160:	8532                	mv	a0,a2
20002162:	8082                	ret

20002164 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20002164:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20002166:	c51d                	beqz	a0,20002194 <dif_uart_bytes_send+0x30>
20002168:	c595                	beqz	a1,20002194 <dif_uart_bytes_send+0x30>
2000216a:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000216c:	c20d                	beqz	a2,2000218e <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
2000216e:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002172:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20002176:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20002178:	eb19                	bnez	a4,2000218e <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
2000217a:	00f58733          	add	a4,a1,a5
2000217e:	00074703          	lbu	a4,0(a4) # ff1000 <print_exc_msg.kLogFields.6+0xfe0f9c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20002182:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002184:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20002188:	fef613e3          	bne	a2,a5,2000216e <dif_uart_bytes_send+0xa>
2000218c:	87b2                	mv	a5,a2
2000218e:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20002190:	c291                	beqz	a3,20002194 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20002192:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20002194:	853a                	mv	a0,a4
20002196:	8082                	ret

20002198 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20002198:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
2000219a:	c515                	beqz	a0,200021c6 <dif_uart_bytes_receive+0x2e>
2000219c:	c60d                	beqz	a2,200021c6 <dif_uart_bytes_receive+0x2e>
2000219e:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200021a0:	cd99                	beqz	a1,200021be <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200021a2:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200021a4:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200021a6:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200021aa:	eb91                	bnez	a5,200021be <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200021ac:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200021ae:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
200021b2:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200021b4:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200021b8:	ff0595e3          	bne	a1,a6,200021a2 <dif_uart_bytes_receive+0xa>
200021bc:	882e                	mv	a6,a1
200021be:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
200021c0:	c299                	beqz	a3,200021c6 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
200021c2:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
200021c6:	853a                	mv	a0,a4
200021c8:	8082                	ret

200021ca <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
200021ca:	cd19                	beqz	a0,200021e8 <dif_uart_byte_send_polled+0x1e>
200021cc:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200021ce:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200021d0:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
200021d2:	fef5                	bnez	a3,200021ce <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200021d4:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200021d6:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200021d8:	e299                	bnez	a3,200021de <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200021da:	ce0c                	sw	a1,24(a2)
200021dc:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200021de:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200021e0:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200021e2:	dd75                	beqz	a0,200021de <dif_uart_byte_send_polled+0x14>
200021e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
200021e6:	8082                	ret
200021e8:	4509                	li	a0,2
200021ea:	8082                	ret

200021ec <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
200021ec:	862a                	mv	a2,a0
200021ee:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
200021f0:	c205                	beqz	a2,20002210 <dif_uart_byte_receive_polled+0x24>
200021f2:	cd99                	beqz	a1,20002210 <dif_uart_byte_receive_polled+0x24>
200021f4:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200021f6:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200021f8:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200021fc:	fd6d                	bnez	a0,200021f6 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200021fe:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20002200:	02057693          	andi	a3,a0,32
20002204:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20002206:	e689                	bnez	a3,20002210 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20002208:	4a50                	lw	a2,20(a2)
2000220a:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000220c:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20002210:	8082                	ret

20002212 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20002212:	862a                	mv	a2,a0
20002214:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20002216:	ca09                	beqz	a2,20002228 <dif_uart_rx_bytes_available+0x16>
20002218:	c981                	beqz	a1,20002228 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000221a:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000221c:	5110                	lw	a2,32(a0)
2000221e:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20002220:	8241                	srli	a2,a2,0x10
20002222:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20002226:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20002228:	8082                	ret

2000222a <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000222a:	862a                	mv	a2,a0
2000222c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
2000222e:	ce01                	beqz	a2,20002246 <dif_uart_tx_bytes_available+0x1c>
20002230:	c999                	beqz	a1,20002246 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20002232:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20002234:	5110                	lw	a2,32(a0)
20002236:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20002238:	03f67613          	andi	a2,a2,63
2000223c:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20002240:	40c68633          	sub	a2,a3,a2
20002244:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20002246:	8082                	ret

20002248 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20002248:	c11d                	beqz	a0,2000226e <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000224a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000224c:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
2000224e:	ffd5f693          	andi	a3,a1,-3
20002252:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20002256:	fff58713          	addi	a4,a1,-1
2000225a:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
2000225c:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20002260:	00f77463          	bgeu	a4,a5,20002268 <dif_uart_fifo_reset+0x20>
20002264:	0025e593          	ori	a1,a1,2
20002268:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000226a:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000226c:	8082                	ret
2000226e:	4509                	li	a0,2
20002270:	8082                	ret

20002272 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20002272:	c515                	beqz	a0,2000229e <dif_uart_loopback_set+0x2c>
20002274:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20002276:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20002278:	0015b593          	seqz	a1,a1
2000227c:	4715                	li	a4,5
2000227e:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002282:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20002284:	00163613          	seqz	a2,a2
20002288:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000228a:	00b797b3          	sll	a5,a5,a1
2000228e:	fff7c793          	not	a5,a5
20002292:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002294:	00b615b3          	sll	a1,a2,a1
20002298:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000229a:	c54c                	sw	a1,12(a0)
2000229c:	a011                	j	200022a0 <dif_uart_loopback_set+0x2e>
2000229e:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200022a0:	8536                	mv	a0,a3
200022a2:	8082                	ret

200022a4 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
200022a4:	862a                	mv	a2,a0
200022a6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
200022a8:	ca11                	beqz	a2,200022bc <dif_uart_enable_rx_timeout+0x18>
200022aa:	0185d693          	srli	a3,a1,0x18
200022ae:	e699                	bnez	a3,200022bc <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200022b0:	4210                	lw	a2,0(a2)
200022b2:	4501                	li	a0,0
200022b4:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200022b8:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200022ba:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
200022bc:	8082                	ret

200022be <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
200022be:	c511                	beqz	a0,200022ca <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200022c0:	410c                	lw	a1,0(a0)
200022c2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200022c4:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
200022c8:	8082                	ret
200022ca:	4509                	li	a0,2
200022cc:	8082                	ret

200022ce <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
200022ce:	86aa                	mv	a3,a0
200022d0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
200022d2:	ce99                	beqz	a3,200022f0 <dif_uart_get_rx_timeout+0x22>
200022d4:	cd91                	beqz	a1,200022f0 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
200022d6:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200022d8:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
200022da:	fff6c513          	not	a0,a3
200022de:	817d                	srli	a0,a0,0x1f
200022e0:	c188                	sw	a0,0(a1)
200022e2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
200022e4:	c611                	beqz	a2,200022f0 <dif_uart_get_rx_timeout+0x22>
200022e6:	010005b7          	lui	a1,0x1000
200022ea:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200022ec:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
200022ee:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
200022f0:	8082                	ret

200022f2 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200022f2:	88aa                	mv	a7,a0
200022f4:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200022f6:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200022f8:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200022fa:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200022fc:	20069963          	bnez	a3,2000250e <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20002300:	200036b7          	lui	a3,0x20003
20002304:	acc68693          	addi	a3,a3,-1332 # 20002acc <__clz_tab>
20002308:	0cc5f063          	bgeu	a1,a2,200023c8 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
2000230c:	6741                	lui	a4,0x10
2000230e:	0ae67663          	bgeu	a2,a4,200023ba <__udivdi3+0xc8>
20002312:	0ff00713          	li	a4,255
20002316:	00c73733          	sltu	a4,a4,a2
2000231a:	070e                	slli	a4,a4,0x3
2000231c:	00e65533          	srl	a0,a2,a4
20002320:	96aa                	add	a3,a3,a0
20002322:	0006c683          	lbu	a3,0(a3)
20002326:	02000513          	li	a0,32
2000232a:	9736                	add	a4,a4,a3
2000232c:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20002330:	00e50c63          	beq	a0,a4,20002348 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002334:	00d797b3          	sll	a5,a5,a3
20002338:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
2000233c:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002340:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20002344:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20002348:	01085893          	srli	a7,a6,0x10
2000234c:	0315d7b3          	divu	a5,a1,a7
20002350:	01081613          	slli	a2,a6,0x10
20002354:	8241                	srli	a2,a2,0x10
20002356:	01035713          	srli	a4,t1,0x10
2000235a:	0315f6b3          	remu	a3,a1,a7
2000235e:	853e                	mv	a0,a5
20002360:	02f605b3          	mul	a1,a2,a5
20002364:	06c2                	slli	a3,a3,0x10
20002366:	8f55                	or	a4,a4,a3
20002368:	00b77c63          	bgeu	a4,a1,20002380 <__udivdi3+0x8e>
2000236c:	9742                	add	a4,a4,a6
2000236e:	fff78513          	addi	a0,a5,-1
20002372:	01076763          	bltu	a4,a6,20002380 <__udivdi3+0x8e>
20002376:	00b77563          	bgeu	a4,a1,20002380 <__udivdi3+0x8e>
2000237a:	ffe78513          	addi	a0,a5,-2
2000237e:	9742                	add	a4,a4,a6
20002380:	8f0d                	sub	a4,a4,a1
20002382:	031777b3          	remu	a5,a4,a7
20002386:	0342                	slli	t1,t1,0x10
20002388:	01035313          	srli	t1,t1,0x10
2000238c:	03175733          	divu	a4,a4,a7
20002390:	07c2                	slli	a5,a5,0x10
20002392:	0067e333          	or	t1,a5,t1
20002396:	02e606b3          	mul	a3,a2,a4
2000239a:	863a                	mv	a2,a4
2000239c:	00d37b63          	bgeu	t1,a3,200023b2 <__udivdi3+0xc0>
200023a0:	9342                	add	t1,t1,a6
200023a2:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200023a6:	01036663          	bltu	t1,a6,200023b2 <__udivdi3+0xc0>
200023aa:	00d37463          	bgeu	t1,a3,200023b2 <__udivdi3+0xc0>
200023ae:	ffe70613          	addi	a2,a4,-2
200023b2:	0542                	slli	a0,a0,0x10
200023b4:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200023b6:	4581                	li	a1,0
200023b8:	a85d                	j	2000246e <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200023ba:	01000537          	lui	a0,0x1000
200023be:	4741                	li	a4,16
200023c0:	f4a66ee3          	bltu	a2,a0,2000231c <__udivdi3+0x2a>
200023c4:	4761                	li	a4,24
200023c6:	bf99                	j	2000231c <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
200023c8:	e601                	bnez	a2,200023d0 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
200023ca:	4705                	li	a4,1
200023cc:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200023d0:	6741                	lui	a4,0x10
200023d2:	08e87f63          	bgeu	a6,a4,20002470 <__udivdi3+0x17e>
200023d6:	0ff00713          	li	a4,255
200023da:	01077363          	bgeu	a4,a6,200023e0 <__udivdi3+0xee>
200023de:	4521                	li	a0,8
200023e0:	00a85733          	srl	a4,a6,a0
200023e4:	96ba                	add	a3,a3,a4
200023e6:	0006c703          	lbu	a4,0(a3)
200023ea:	02000613          	li	a2,32
200023ee:	972a                	add	a4,a4,a0
200023f0:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
200023f4:	08e61563          	bne	a2,a4,2000247e <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
200023f8:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
200023fc:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
200023fe:	01085893          	srli	a7,a6,0x10
20002402:	01081613          	slli	a2,a6,0x10
20002406:	8241                	srli	a2,a2,0x10
20002408:	01035713          	srli	a4,t1,0x10
2000240c:	0317f6b3          	remu	a3,a5,a7
20002410:	0317d7b3          	divu	a5,a5,a7
20002414:	06c2                	slli	a3,a3,0x10
20002416:	8f55                	or	a4,a4,a3
20002418:	02f60e33          	mul	t3,a2,a5
2000241c:	853e                	mv	a0,a5
2000241e:	01c77c63          	bgeu	a4,t3,20002436 <__udivdi3+0x144>
20002422:	9742                	add	a4,a4,a6
20002424:	fff78513          	addi	a0,a5,-1
20002428:	01076763          	bltu	a4,a6,20002436 <__udivdi3+0x144>
2000242c:	01c77563          	bgeu	a4,t3,20002436 <__udivdi3+0x144>
20002430:	ffe78513          	addi	a0,a5,-2
20002434:	9742                	add	a4,a4,a6
20002436:	41c70733          	sub	a4,a4,t3
2000243a:	031777b3          	remu	a5,a4,a7
2000243e:	0342                	slli	t1,t1,0x10
20002440:	01035313          	srli	t1,t1,0x10
20002444:	03175733          	divu	a4,a4,a7
20002448:	07c2                	slli	a5,a5,0x10
2000244a:	0067e333          	or	t1,a5,t1
2000244e:	02e606b3          	mul	a3,a2,a4
20002452:	863a                	mv	a2,a4
20002454:	00d37b63          	bgeu	t1,a3,2000246a <__udivdi3+0x178>
20002458:	9342                	add	t1,t1,a6
2000245a:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000245e:	01036663          	bltu	t1,a6,2000246a <__udivdi3+0x178>
20002462:	00d37463          	bgeu	t1,a3,2000246a <__udivdi3+0x178>
20002466:	ffe70613          	addi	a2,a4,-2
2000246a:	0542                	slli	a0,a0,0x10
2000246c:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
2000246e:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002470:	01000737          	lui	a4,0x1000
20002474:	4541                	li	a0,16
20002476:	f6e865e3          	bltu	a6,a4,200023e0 <__udivdi3+0xee>
2000247a:	4561                	li	a0,24
2000247c:	b795                	j	200023e0 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
2000247e:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20002482:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20002486:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000248a:	00d797b3          	sll	a5,a5,a3
2000248e:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002492:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20002496:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
2000249a:	0315f733          	remu	a4,a1,a7
2000249e:	01081793          	slli	a5,a6,0x10
200024a2:	83c1                	srli	a5,a5,0x10
200024a4:	01065513          	srli	a0,a2,0x10
200024a8:	0315d5b3          	divu	a1,a1,a7
200024ac:	0742                	slli	a4,a4,0x10
200024ae:	8f49                	or	a4,a4,a0
200024b0:	02b786b3          	mul	a3,a5,a1
200024b4:	852e                	mv	a0,a1
200024b6:	00d77c63          	bgeu	a4,a3,200024ce <__udivdi3+0x1dc>
200024ba:	9742                	add	a4,a4,a6
200024bc:	fff58513          	addi	a0,a1,-1 # ffffff <print_exc_msg.kLogFields.6+0xfeff9b>
200024c0:	01076763          	bltu	a4,a6,200024ce <__udivdi3+0x1dc>
200024c4:	00d77563          	bgeu	a4,a3,200024ce <__udivdi3+0x1dc>
200024c8:	ffe58513          	addi	a0,a1,-2
200024cc:	9742                	add	a4,a4,a6
200024ce:	40d706b3          	sub	a3,a4,a3
200024d2:	0316f733          	remu	a4,a3,a7
200024d6:	0642                	slli	a2,a2,0x10
200024d8:	8241                	srli	a2,a2,0x10
200024da:	0316d6b3          	divu	a3,a3,a7
200024de:	0742                	slli	a4,a4,0x10
200024e0:	02d788b3          	mul	a7,a5,a3
200024e4:	00c767b3          	or	a5,a4,a2
200024e8:	8736                	mv	a4,a3
200024ea:	0117fc63          	bgeu	a5,a7,20002502 <__udivdi3+0x210>
200024ee:	97c2                	add	a5,a5,a6
200024f0:	fff68713          	addi	a4,a3,-1
200024f4:	0107e763          	bltu	a5,a6,20002502 <__udivdi3+0x210>
200024f8:	0117f563          	bgeu	a5,a7,20002502 <__udivdi3+0x210>
200024fc:	ffe68713          	addi	a4,a3,-2
20002500:	97c2                	add	a5,a5,a6
20002502:	01051593          	slli	a1,a0,0x10
20002506:	411787b3          	sub	a5,a5,a7
2000250a:	8dd9                	or	a1,a1,a4
2000250c:	bdcd                	j	200023fe <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
2000250e:	14d5e263          	bltu	a1,a3,20002652 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002512:	6741                	lui	a4,0x10
20002514:	02e6ff63          	bgeu	a3,a4,20002552 <__udivdi3+0x260>
20002518:	0ff00713          	li	a4,255
2000251c:	00d735b3          	sltu	a1,a4,a3
20002520:	058e                	slli	a1,a1,0x3
20002522:	20003737          	lui	a4,0x20003
20002526:	00b6d533          	srl	a0,a3,a1
2000252a:	acc70713          	addi	a4,a4,-1332 # 20002acc <__clz_tab>
2000252e:	972a                	add	a4,a4,a0
20002530:	00074703          	lbu	a4,0(a4)
20002534:	02000513          	li	a0,32
20002538:	972e                	add	a4,a4,a1
2000253a:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
2000253e:	02e51163          	bne	a0,a4,20002560 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20002542:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20002544:	f2f6e5e3          	bltu	a3,a5,2000246e <__udivdi3+0x17c>
20002548:	00c8b533          	sltu	a0,a7,a2
2000254c:	00154513          	xori	a0,a0,1
20002550:	bf39                	j	2000246e <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002552:	01000737          	lui	a4,0x1000
20002556:	45c1                	li	a1,16
20002558:	fce6e5e3          	bltu	a3,a4,20002522 <__udivdi3+0x230>
2000255c:	45e1                	li	a1,24
2000255e:	b7d1                	j	20002522 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20002560:	00e65333          	srl	t1,a2,a4
20002564:	00b696b3          	sll	a3,a3,a1
20002568:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000256c:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20002570:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20002574:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002578:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
2000257c:	00b797b3          	sll	a5,a5,a1
20002580:	00e8d733          	srl	a4,a7,a4
20002584:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002588:	01031793          	slli	a5,t1,0x10
2000258c:	83c1                	srli	a5,a5,0x10
2000258e:	01085713          	srli	a4,a6,0x10
20002592:	02a65633          	divu	a2,a2,a0
20002596:	06c2                	slli	a3,a3,0x10
20002598:	8f55                	or	a4,a4,a3
2000259a:	02c78f33          	mul	t5,a5,a2
2000259e:	8e32                	mv	t3,a2
200025a0:	01e77c63          	bgeu	a4,t5,200025b8 <__udivdi3+0x2c6>
200025a4:	971a                	add	a4,a4,t1
200025a6:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
200025aa:	00676763          	bltu	a4,t1,200025b8 <__udivdi3+0x2c6>
200025ae:	01e77563          	bgeu	a4,t5,200025b8 <__udivdi3+0x2c6>
200025b2:	ffe60e13          	addi	t3,a2,-2
200025b6:	971a                	add	a4,a4,t1
200025b8:	41e70733          	sub	a4,a4,t5
200025bc:	02a776b3          	remu	a3,a4,a0
200025c0:	02a75733          	divu	a4,a4,a0
200025c4:	06c2                	slli	a3,a3,0x10
200025c6:	02e78633          	mul	a2,a5,a4
200025ca:	01081793          	slli	a5,a6,0x10
200025ce:	83c1                	srli	a5,a5,0x10
200025d0:	8fd5                	or	a5,a5,a3
200025d2:	86ba                	mv	a3,a4
200025d4:	00c7fc63          	bgeu	a5,a2,200025ec <__udivdi3+0x2fa>
200025d8:	979a                	add	a5,a5,t1
200025da:	fff70693          	addi	a3,a4,-1 # ffffff <print_exc_msg.kLogFields.6+0xfeff9b>
200025de:	0067e763          	bltu	a5,t1,200025ec <__udivdi3+0x2fa>
200025e2:	00c7f563          	bgeu	a5,a2,200025ec <__udivdi3+0x2fa>
200025e6:	ffe70693          	addi	a3,a4,-2
200025ea:	979a                	add	a5,a5,t1
200025ec:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200025f0:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200025f2:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200025f4:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
200025f8:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200025fc:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200025fe:	00def6b3          	and	a3,t4,a3
20002602:	01055613          	srli	a2,a0,0x10
20002606:	010ede93          	srli	t4,t4,0x10
2000260a:	02d80333          	mul	t1,a6,a3
2000260e:	02d606b3          	mul	a3,a2,a3
20002612:	01035713          	srli	a4,t1,0x10
20002616:	03d80833          	mul	a6,a6,t4
2000261a:	9836                	add	a6,a6,a3
2000261c:	9742                	add	a4,a4,a6
2000261e:	03d60633          	mul	a2,a2,t4
20002622:	00d77363          	bgeu	a4,a3,20002628 <__udivdi3+0x336>
20002626:	9672                	add	a2,a2,t3
20002628:	01075693          	srli	a3,a4,0x10
2000262c:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
2000262e:	02c7e063          	bltu	a5,a2,2000264e <__udivdi3+0x35c>
20002632:	d8c792e3          	bne	a5,a2,200023b6 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002636:	67c1                	lui	a5,0x10
20002638:	17fd                	addi	a5,a5,-1
2000263a:	8f7d                	and	a4,a4,a5
2000263c:	0742                	slli	a4,a4,0x10
2000263e:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20002642:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002646:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20002648:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
2000264a:	e2e8f2e3          	bgeu	a7,a4,2000246e <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
2000264e:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20002650:	b39d                	j	200023b6 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20002652:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20002654:	4501                	li	a0,0
20002656:	bd21                	j	2000246e <__udivdi3+0x17c>

20002658 <__umoddi3>:
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20002658:	88b2                	mv	a7,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
2000265a:	8736                	mv	a4,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
2000265c:	87aa                	mv	a5,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1027
2000265e:	882e                	mv	a6,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20002660:	1c069863          	bnez	a3,20002830 <__umoddi3+0x1d8>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20002664:	200036b7          	lui	a3,0x20003
20002668:	acc68693          	addi	a3,a3,-1332 # 20002acc <__clz_tab>
2000266c:	0ac5f863          	bgeu	a1,a2,2000271c <__umoddi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20002670:	6341                	lui	t1,0x10
20002672:	08667e63          	bgeu	a2,t1,2000270e <__umoddi3+0xb6>
20002676:	0ff00313          	li	t1,255
2000267a:	00c37363          	bgeu	t1,a2,20002680 <__umoddi3+0x28>
2000267e:	4721                	li	a4,8
20002680:	00e65333          	srl	t1,a2,a4
20002684:	969a                	add	a3,a3,t1
20002686:	0006ce03          	lbu	t3,0(a3)
2000268a:	9e3a                	add	t3,t3,a4
2000268c:	02000713          	li	a4,32
20002690:	41c70333          	sub	t1,a4,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20002694:	01c70c63          	beq	a4,t3,200026ac <__umoddi3+0x54>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002698:	006595b3          	sll	a1,a1,t1
2000269c:	01c55e33          	srl	t3,a0,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
200026a0:	006618b3          	sll	a7,a2,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200026a4:	00be6833          	or	a6,t3,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
200026a8:	006517b3          	sll	a5,a0,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
200026ac:	0108d613          	srli	a2,a7,0x10
200026b0:	02c87733          	remu	a4,a6,a2
200026b4:	01089513          	slli	a0,a7,0x10
200026b8:	8141                	srli	a0,a0,0x10
200026ba:	0107d693          	srli	a3,a5,0x10
200026be:	02c85833          	divu	a6,a6,a2
200026c2:	0742                	slli	a4,a4,0x10
200026c4:	8ed9                	or	a3,a3,a4
200026c6:	03050833          	mul	a6,a0,a6
200026ca:	0106f863          	bgeu	a3,a6,200026da <__umoddi3+0x82>
200026ce:	96c6                	add	a3,a3,a7
200026d0:	0116e563          	bltu	a3,a7,200026da <__umoddi3+0x82>
200026d4:	0106f363          	bgeu	a3,a6,200026da <__umoddi3+0x82>
200026d8:	96c6                	add	a3,a3,a7
200026da:	410686b3          	sub	a3,a3,a6
200026de:	02c6f733          	remu	a4,a3,a2
200026e2:	07c2                	slli	a5,a5,0x10
200026e4:	83c1                	srli	a5,a5,0x10
200026e6:	02c6d6b3          	divu	a3,a3,a2
200026ea:	02d506b3          	mul	a3,a0,a3
200026ee:	01071513          	slli	a0,a4,0x10
200026f2:	8fc9                	or	a5,a5,a0
200026f4:	00d7f863          	bgeu	a5,a3,20002704 <__umoddi3+0xac>
200026f8:	97c6                	add	a5,a5,a7
200026fa:	0117e563          	bltu	a5,a7,20002704 <__umoddi3+0xac>
200026fe:	00d7f363          	bgeu	a5,a3,20002704 <__umoddi3+0xac>
20002702:	97c6                	add	a5,a5,a7
20002704:	8f95                	sub	a5,a5,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1131
20002706:	0067d533          	srl	a0,a5,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1133
2000270a:	4581                	li	a1,0
__umoddi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1313
2000270c:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
2000270e:	01000337          	lui	t1,0x1000
20002712:	4741                	li	a4,16
20002714:	f66666e3          	bltu	a2,t1,20002680 <__umoddi3+0x28>
20002718:	4761                	li	a4,24
2000271a:	b79d                	j	20002680 <__umoddi3+0x28>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
2000271c:	e601                	bnez	a2,20002724 <__umoddi3+0xcc>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
2000271e:	4605                	li	a2,1
20002720:	031658b3          	divu	a7,a2,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002724:	6641                	lui	a2,0x10
20002726:	08c8f363          	bgeu	a7,a2,200027ac <__umoddi3+0x154>
2000272a:	0ff00613          	li	a2,255
2000272e:	01167363          	bgeu	a2,a7,20002734 <__umoddi3+0xdc>
20002732:	4721                	li	a4,8
20002734:	00e8d633          	srl	a2,a7,a4
20002738:	96b2                	add	a3,a3,a2
2000273a:	0006ce03          	lbu	t3,0(a3)
2000273e:	9e3a                	add	t3,t3,a4
20002740:	02000713          	li	a4,32
20002744:	41c70333          	sub	t1,a4,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20002748:	07c71963          	bne	a4,t3,200027ba <__umoddi3+0x162>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
2000274c:	411585b3          	sub	a1,a1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20002750:	0108d713          	srli	a4,a7,0x10
20002754:	01089513          	slli	a0,a7,0x10
20002758:	8141                	srli	a0,a0,0x10
2000275a:	0107d613          	srli	a2,a5,0x10
2000275e:	02e5f6b3          	remu	a3,a1,a4
20002762:	02e5d5b3          	divu	a1,a1,a4
20002766:	06c2                	slli	a3,a3,0x10
20002768:	8ed1                	or	a3,a3,a2
2000276a:	02b505b3          	mul	a1,a0,a1
2000276e:	00b6f863          	bgeu	a3,a1,2000277e <__umoddi3+0x126>
20002772:	96c6                	add	a3,a3,a7
20002774:	0116e563          	bltu	a3,a7,2000277e <__umoddi3+0x126>
20002778:	00b6f363          	bgeu	a3,a1,2000277e <__umoddi3+0x126>
2000277c:	96c6                	add	a3,a3,a7
2000277e:	40b685b3          	sub	a1,a3,a1
20002782:	02e5f6b3          	remu	a3,a1,a4
20002786:	07c2                	slli	a5,a5,0x10
20002788:	83c1                	srli	a5,a5,0x10
2000278a:	02e5d5b3          	divu	a1,a1,a4
2000278e:	02b505b3          	mul	a1,a0,a1
20002792:	01069513          	slli	a0,a3,0x10
20002796:	8fc9                	or	a5,a5,a0
20002798:	00b7f863          	bgeu	a5,a1,200027a8 <__umoddi3+0x150>
2000279c:	97c6                	add	a5,a5,a7
2000279e:	0117e563          	bltu	a5,a7,200027a8 <__umoddi3+0x150>
200027a2:	00b7f363          	bgeu	a5,a1,200027a8 <__umoddi3+0x150>
200027a6:	97c6                	add	a5,a5,a7
200027a8:	8f8d                	sub	a5,a5,a1
200027aa:	bfb1                	j	20002706 <__umoddi3+0xae>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200027ac:	01000637          	lui	a2,0x1000
200027b0:	4741                	li	a4,16
200027b2:	f8c8e1e3          	bltu	a7,a2,20002734 <__umoddi3+0xdc>
200027b6:	4761                	li	a4,24
200027b8:	bfb5                	j	20002734 <__umoddi3+0xdc>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
200027ba:	006898b3          	sll	a7,a7,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
200027be:	01c5d733          	srl	a4,a1,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
200027c2:	006517b3          	sll	a5,a0,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200027c6:	01c55e33          	srl	t3,a0,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200027ca:	0108d513          	srli	a0,a7,0x10
200027ce:	02a776b3          	remu	a3,a4,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200027d2:	006595b3          	sll	a1,a1,t1
200027d6:	00be6e33          	or	t3,t3,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200027da:	01089593          	slli	a1,a7,0x10
200027de:	81c1                	srli	a1,a1,0x10
200027e0:	010e5613          	srli	a2,t3,0x10
200027e4:	02a75733          	divu	a4,a4,a0
200027e8:	06c2                	slli	a3,a3,0x10
200027ea:	8ed1                	or	a3,a3,a2
200027ec:	02e58733          	mul	a4,a1,a4
200027f0:	00e6f863          	bgeu	a3,a4,20002800 <__umoddi3+0x1a8>
200027f4:	96c6                	add	a3,a3,a7
200027f6:	0116e563          	bltu	a3,a7,20002800 <__umoddi3+0x1a8>
200027fa:	00e6f363          	bgeu	a3,a4,20002800 <__umoddi3+0x1a8>
200027fe:	96c6                	add	a3,a3,a7
20002800:	40e68633          	sub	a2,a3,a4
20002804:	02a676b3          	remu	a3,a2,a0
20002808:	0e42                	slli	t3,t3,0x10
2000280a:	010e5e13          	srli	t3,t3,0x10
2000280e:	02a65633          	divu	a2,a2,a0
20002812:	06c2                	slli	a3,a3,0x10
20002814:	02c58633          	mul	a2,a1,a2
20002818:	01c6e5b3          	or	a1,a3,t3
2000281c:	00c5f863          	bgeu	a1,a2,2000282c <__umoddi3+0x1d4>
20002820:	95c6                	add	a1,a1,a7
20002822:	0115e563          	bltu	a1,a7,2000282c <__umoddi3+0x1d4>
20002826:	00c5f363          	bgeu	a1,a2,2000282c <__umoddi3+0x1d4>
2000282a:	95c6                	add	a1,a1,a7
2000282c:	8d91                	sub	a1,a1,a2
2000282e:	b70d                	j	20002750 <__umoddi3+0xf8>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20002830:	ecd5eee3          	bltu	a1,a3,2000270c <__umoddi3+0xb4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002834:	6741                	lui	a4,0x10
20002836:	04e6f563          	bgeu	a3,a4,20002880 <__umoddi3+0x228>
2000283a:	0ff00e13          	li	t3,255
2000283e:	00de3733          	sltu	a4,t3,a3
20002842:	070e                	slli	a4,a4,0x3
20002844:	200038b7          	lui	a7,0x20003
20002848:	00e6d333          	srl	t1,a3,a4
2000284c:	acc88893          	addi	a7,a7,-1332 # 20002acc <__clz_tab>
20002850:	989a                	add	a7,a7,t1
20002852:	0008ce03          	lbu	t3,0(a7)
20002856:	9e3a                	add	t3,t3,a4
20002858:	02000713          	li	a4,32
2000285c:	41c70333          	sub	t1,a4,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20002860:	03c71763          	bne	a4,t3,2000288e <__umoddi3+0x236>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20002864:	00b6e463          	bltu	a3,a1,2000286c <__umoddi3+0x214>
20002868:	00c56963          	bltu	a0,a2,2000287a <__umoddi3+0x222>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1173
2000286c:	40c507b3          	sub	a5,a0,a2
20002870:	8d95                	sub	a1,a1,a3
20002872:	00f53533          	sltu	a0,a0,a5
20002876:	40a58833          	sub	a6,a1,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1184
2000287a:	853e                	mv	a0,a5
2000287c:	85c2                	mv	a1,a6
2000287e:	b579                	j	2000270c <__umoddi3+0xb4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002880:	010008b7          	lui	a7,0x1000
20002884:	4741                	li	a4,16
20002886:	fb16efe3          	bltu	a3,a7,20002844 <__umoddi3+0x1ec>
2000288a:	4761                	li	a4,24
2000288c:	bf65                	j	20002844 <__umoddi3+0x1ec>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
2000288e:	01c65733          	srl	a4,a2,t3
20002892:	006696b3          	sll	a3,a3,t1
20002896:	00d76f33          	or	t5,a4,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
2000289a:	01c5d7b3          	srl	a5,a1,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000289e:	010f5713          	srli	a4,t5,0x10
200028a2:	02e7f8b3          	remu	a7,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
200028a6:	006595b3          	sll	a1,a1,t1
200028aa:	01c55833          	srl	a6,a0,t3
200028ae:	00b86833          	or	a6,a6,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200028b2:	010f1593          	slli	a1,t5,0x10
200028b6:	81c1                	srli	a1,a1,0x10
200028b8:	01085693          	srli	a3,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
200028bc:	00661633          	sll	a2,a2,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
200028c0:	00651533          	sll	a0,a0,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200028c4:	02e7d7b3          	divu	a5,a5,a4
200028c8:	08c2                	slli	a7,a7,0x10
200028ca:	00d8e6b3          	or	a3,a7,a3
200028ce:	02f58eb3          	mul	t4,a1,a5
200028d2:	88be                	mv	a7,a5
200028d4:	01d6fc63          	bgeu	a3,t4,200028ec <__umoddi3+0x294>
200028d8:	96fa                	add	a3,a3,t5
200028da:	fff78893          	addi	a7,a5,-1 # ffff <_stack_size+0xdfff>
200028de:	01e6e763          	bltu	a3,t5,200028ec <__umoddi3+0x294>
200028e2:	01d6f563          	bgeu	a3,t4,200028ec <__umoddi3+0x294>
200028e6:	ffe78893          	addi	a7,a5,-2
200028ea:	96fa                	add	a3,a3,t5
200028ec:	41d686b3          	sub	a3,a3,t4
200028f0:	02e6feb3          	remu	t4,a3,a4
200028f4:	0842                	slli	a6,a6,0x10
200028f6:	01085813          	srli	a6,a6,0x10
200028fa:	02e6d6b3          	divu	a3,a3,a4
200028fe:	0ec2                	slli	t4,t4,0x10
20002900:	010eeeb3          	or	t4,t4,a6
20002904:	02d585b3          	mul	a1,a1,a3
20002908:	87b6                	mv	a5,a3
2000290a:	00befc63          	bgeu	t4,a1,20002922 <__umoddi3+0x2ca>
2000290e:	9efa                	add	t4,t4,t5
20002910:	fff68793          	addi	a5,a3,-1
20002914:	01eee763          	bltu	t4,t5,20002922 <__umoddi3+0x2ca>
20002918:	00bef563          	bgeu	t4,a1,20002922 <__umoddi3+0x2ca>
2000291c:	ffe68793          	addi	a5,a3,-2
20002920:	9efa                	add	t4,t4,t5
20002922:	40be85b3          	sub	a1,t4,a1
20002926:	08c2                	slli	a7,a7,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002928:	6ec1                	lui	t4,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000292a:	00f8e8b3          	or	a7,a7,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000292e:	fffe8793          	addi	a5,t4,-1 # ffff <_stack_size+0xdfff>
20002932:	00f8f833          	and	a6,a7,a5
20002936:	01065693          	srli	a3,a2,0x10
2000293a:	0108d893          	srli	a7,a7,0x10
2000293e:	8ff1                	and	a5,a5,a2
20002940:	02f80733          	mul	a4,a6,a5
20002944:	02f887b3          	mul	a5,a7,a5
20002948:	02d80833          	mul	a6,a6,a3
2000294c:	02d888b3          	mul	a7,a7,a3
20002950:	983e                	add	a6,a6,a5
20002952:	01075693          	srli	a3,a4,0x10
20002956:	96c2                	add	a3,a3,a6
20002958:	00f6f363          	bgeu	a3,a5,2000295e <__umoddi3+0x306>
2000295c:	98f6                	add	a7,a7,t4
2000295e:	67c1                	lui	a5,0x10
20002960:	17fd                	addi	a5,a5,-1
20002962:	0106d813          	srli	a6,a3,0x10
20002966:	8efd                	and	a3,a3,a5
20002968:	06c2                	slli	a3,a3,0x10
2000296a:	8f7d                	and	a4,a4,a5
2000296c:	98c2                	add	a7,a7,a6
2000296e:	9736                	add	a4,a4,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20002970:	0115e663          	bltu	a1,a7,2000297c <__umoddi3+0x324>
20002974:	01159c63          	bne	a1,a7,2000298c <__umoddi3+0x334>
20002978:	00e57a63          	bgeu	a0,a4,2000298c <__umoddi3+0x334>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
2000297c:	40c70633          	sub	a2,a4,a2
20002980:	00c73733          	sltu	a4,a4,a2
20002984:	977a                	add	a4,a4,t5
20002986:	40e888b3          	sub	a7,a7,a4
2000298a:	8732                	mv	a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1214
2000298c:	40e50733          	sub	a4,a0,a4
20002990:	00e53533          	sltu	a0,a0,a4
20002994:	411585b3          	sub	a1,a1,a7
20002998:	8d89                	sub	a1,a1,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1215
2000299a:	01c597b3          	sll	a5,a1,t3
2000299e:	00675733          	srl	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1217
200029a2:	00e7e533          	or	a0,a5,a4
200029a6:	0065d5b3          	srl	a1,a1,t1
200029aa:	b38d                	j	2000270c <__umoddi3+0xb4>
