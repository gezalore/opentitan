
sw/device/tests/flash_ctrl_test_fpga_nexysvideo.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001f34  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000cb7  200020b8  200020b8  000030b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20002d70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20002d78  00004008  2**2
                  ALLOC
  8 .logs.fields  000002bc  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000042c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000070d0  00000000  00000000  000042ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000158d  00000000  00000000  0000b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000c947  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000043ab  00000000  00000000  0000c9df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003904  00000000  00000000  00010d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000260  00000000  00000000  0001468e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001f2d  00000000  00000000  000148ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000007f4  00000000  00000000  0001681c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00003617          	auipc	a2,0x3
20000054:	d2060613          	addi	a2,a2,-736 # 20002d70 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2e7d                	jal	2000043c <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	6100006f          	j	20000690 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0800006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1b80006f          	j	200002c4 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2000006f          	j	2000031c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2480006f          	j	20000374 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000182:	de06                	sw	ra,60(sp)
20000184:	dc16                	sw	t0,56(sp)
20000186:	da1a                	sw	t1,52(sp)
20000188:	d81e                	sw	t2,48(sp)
2000018a:	d62a                	sw	a0,44(sp)
2000018c:	d42e                	sw	a1,40(sp)
2000018e:	d232                	sw	a2,36(sp)
20000190:	d036                	sw	a3,32(sp)
20000192:	ce3a                	sw	a4,28(sp)
20000194:	cc3e                	sw	a5,24(sp)
20000196:	ca42                	sw	a6,20(sp)
20000198:	c846                	sw	a7,16(sp)
2000019a:	c672                	sw	t3,12(sp)
2000019c:	c476                	sw	t4,8(sp)
2000019e:	c27a                	sw	t5,4(sp)
200001a0:	c07e                	sw	t6,0(sp)
200001a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200001a6:	897d                	andi	a0,a0,31
200001a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200001aa:	00a5dc63          	bge	a1,a0,200001c2 <handler_exception+0x42>
200001ae:	4599                	li	a1,6
200001b0:	02a5c263          	blt	a1,a0,200001d4 <handler_exception+0x54>
200001b4:	458d                	li	a1,3
200001b6:	02b50c63          	beq	a0,a1,200001ee <handler_exception+0x6e>
200001ba:	4595                	li	a1,5
200001bc:	02b50763          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001c0:	a015                	j	200001e4 <handler_exception+0x64>
200001c2:	c115                	beqz	a0,200001e6 <handler_exception+0x66>
200001c4:	4585                	li	a1,1
200001c6:	02b50063          	beq	a0,a1,200001e6 <handler_exception+0x66>
200001ca:	4589                	li	a1,2
200001cc:	00b51c63          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200001d0:	208d                	jal	20000232 <handler_instr_ill_fault>
200001d2:	a839                	j	200001f0 <handler_exception+0x70>
200001d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200001d6:	00b50a63          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001da:	45ad                	li	a1,11
200001dc:	00b51463          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200001e0:	2065                	jal	20000288 <handler_ecall>
200001e2:	a039                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200001e4:	a001                	j	200001e4 <handler_exception+0x64>
200001e6:	2805                	jal	20000216 <handler_instr_acc_fault>
200001e8:	a021                	j	200001f0 <handler_exception+0x70>
200001ea:	2049                	jal	2000026c <handler_lsu_fault>
200001ec:	a011                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200001ee:	208d                	jal	20000250 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200001f0:	4f82                	lw	t6,0(sp)
200001f2:	4f12                	lw	t5,4(sp)
200001f4:	4ea2                	lw	t4,8(sp)
200001f6:	4e32                	lw	t3,12(sp)
200001f8:	48c2                	lw	a7,16(sp)
200001fa:	4852                	lw	a6,20(sp)
200001fc:	47e2                	lw	a5,24(sp)
200001fe:	4772                	lw	a4,28(sp)
20000200:	5682                	lw	a3,32(sp)
20000202:	5612                	lw	a2,36(sp)
20000204:	55a2                	lw	a1,40(sp)
20000206:	5532                	lw	a0,44(sp)
20000208:	53c2                	lw	t2,48(sp)
2000020a:	5352                	lw	t1,52(sp)
2000020c:	52e2                	lw	t0,56(sp)
2000020e:	50f2                	lw	ra,60(sp)
20000210:	6121                	addi	sp,sp,64
20000212:	30200073          	mret

20000216 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20000216:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20000218:	de06                	sw	ra,60(sp)
2000021a:	dc22                	sw	s0,56(sp)
2000021c:	00002597          	auipc	a1,0x2
20000220:	35058593          	addi	a1,a1,848 # 2000256c <__clz_tab+0x160>
20000224:	0040                	addi	s0,sp,4
20000226:	03400613          	li	a2,52
2000022a:	8522                	mv	a0,s0
2000022c:	29a5                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
2000022e:	8522                	mv	a0,s0
20000230:	2a71                	jal	200003cc <print_exc_msg>

20000232 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20000232:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20000234:	c686                	sw	ra,76(sp)
20000236:	c4a2                	sw	s0,72(sp)
20000238:	00002597          	auipc	a1,0x2
2000023c:	36858593          	addi	a1,a1,872 # 200025a0 <__clz_tab+0x194>
20000240:	00d10413          	addi	s0,sp,13
20000244:	03b00613          	li	a2,59
20000248:	8522                	mv	a0,s0
2000024a:	29a9                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
2000024c:	8522                	mv	a0,s0
2000024e:	2abd                	jal	200003cc <print_exc_msg>

20000250 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000250:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000252:	de06                	sw	ra,60(sp)
20000254:	dc22                	sw	s0,56(sp)
20000256:	00002597          	auipc	a1,0x2
2000025a:	38558593          	addi	a1,a1,901 # 200025db <__clz_tab+0x1cf>
2000025e:	840a                	mv	s0,sp
20000260:	03800613          	li	a2,56
20000264:	8522                	mv	a0,s0
20000266:	293d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20000268:	8522                	mv	a0,s0
2000026a:	228d                	jal	200003cc <print_exc_msg>

2000026c <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
2000026c:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
2000026e:	de06                	sw	ra,60(sp)
20000270:	dc22                	sw	s0,56(sp)
20000272:	00002597          	auipc	a1,0x2
20000276:	3a158593          	addi	a1,a1,929 # 20002613 <__clz_tab+0x207>
2000027a:	0020                	addi	s0,sp,8
2000027c:	03000613          	li	a2,48
20000280:	8522                	mv	a0,s0
20000282:	210d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000284:	8522                	mv	a0,s0
20000286:	2299                	jal	200003cc <print_exc_msg>

20000288 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000288:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000028a:	ce06                	sw	ra,28(sp)
2000028c:	cc22                	sw	s0,24(sp)
2000028e:	00002517          	auipc	a0,0x2
20000292:	f2250513          	addi	a0,a0,-222 # 200021b0 <kDeviceLogBypassUartAddress>
20000296:	4108                	lw	a0,0(a0)
20000298:	c909                	beqz	a0,200002aa <handler_ecall+0x22>
2000029a:	e0010517          	auipc	a0,0xe0010
2000029e:	da250513          	addi	a0,a0,-606 # 1003c <handler_ecall.kLogFields>
200002a2:	4581                	li	a1,0
200002a4:	1e6010ef          	jal	ra,2000148a <base_log_internal_dv>
200002a8:	a821                	j	200002c0 <handler_ecall+0x38>
200002aa:	00002597          	auipc	a1,0x2
200002ae:	e4a58593          	addi	a1,a1,-438 # 200020f4 <__udivdi3+0x3a6>
200002b2:	840a                	mv	s0,sp
200002b4:	4651                	li	a2,20
200002b6:	8522                	mv	a0,s0
200002b8:	26f5                	jal	200006a4 <memcpy>
200002ba:	8522                	mv	a0,s0
200002bc:	124010ef          	jal	ra,200013e0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200002c0:	a001                	j	200002c0 <handler_ecall+0x38>
200002c2:	0001                	nop

200002c4 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200002c4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200002c6:	ce86                	sw	ra,92(sp)
200002c8:	cc96                	sw	t0,88(sp)
200002ca:	ca9a                	sw	t1,84(sp)
200002cc:	c89e                	sw	t2,80(sp)
200002ce:	c6a2                	sw	s0,76(sp)
200002d0:	c4aa                	sw	a0,72(sp)
200002d2:	c2ae                	sw	a1,68(sp)
200002d4:	c0b2                	sw	a2,64(sp)
200002d6:	de36                	sw	a3,60(sp)
200002d8:	dc3a                	sw	a4,56(sp)
200002da:	da3e                	sw	a5,52(sp)
200002dc:	d842                	sw	a6,48(sp)
200002de:	d646                	sw	a7,44(sp)
200002e0:	d472                	sw	t3,40(sp)
200002e2:	d276                	sw	t4,36(sp)
200002e4:	d07a                	sw	t5,32(sp)
200002e6:	ce7e                	sw	t6,28(sp)
200002e8:	00002517          	auipc	a0,0x2
200002ec:	ec850513          	addi	a0,a0,-312 # 200021b0 <kDeviceLogBypassUartAddress>
200002f0:	4108                	lw	a0,0(a0)
200002f2:	c909                	beqz	a0,20000304 <handler_irq_software+0x40>
200002f4:	e0010517          	auipc	a0,0xe0010
200002f8:	d0c50513          	addi	a0,a0,-756 # 10000 <_dv_log_offset>
200002fc:	4581                	li	a1,0
200002fe:	18c010ef          	jal	ra,2000148a <base_log_internal_dv>
20000302:	a821                	j	2000031a <handler_irq_software+0x56>
20000304:	00002597          	auipc	a1,0x2
20000308:	db458593          	addi	a1,a1,-588 # 200020b8 <__udivdi3+0x36a>
2000030c:	0020                	addi	s0,sp,8
2000030e:	4651                	li	a2,20
20000310:	8522                	mv	a0,s0
20000312:	2e49                	jal	200006a4 <memcpy>
20000314:	8522                	mv	a0,s0
20000316:	0ca010ef          	jal	ra,200013e0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000031a:	a001                	j	2000031a <handler_irq_software+0x56>

2000031c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
2000031c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
2000031e:	ce86                	sw	ra,92(sp)
20000320:	cc96                	sw	t0,88(sp)
20000322:	ca9a                	sw	t1,84(sp)
20000324:	c89e                	sw	t2,80(sp)
20000326:	c6a2                	sw	s0,76(sp)
20000328:	c4aa                	sw	a0,72(sp)
2000032a:	c2ae                	sw	a1,68(sp)
2000032c:	c0b2                	sw	a2,64(sp)
2000032e:	de36                	sw	a3,60(sp)
20000330:	dc3a                	sw	a4,56(sp)
20000332:	da3e                	sw	a5,52(sp)
20000334:	d842                	sw	a6,48(sp)
20000336:	d646                	sw	a7,44(sp)
20000338:	d472                	sw	t3,40(sp)
2000033a:	d276                	sw	t4,36(sp)
2000033c:	d07a                	sw	t5,32(sp)
2000033e:	ce7e                	sw	t6,28(sp)
20000340:	00002517          	auipc	a0,0x2
20000344:	e7050513          	addi	a0,a0,-400 # 200021b0 <kDeviceLogBypassUartAddress>
20000348:	4108                	lw	a0,0(a0)
2000034a:	c909                	beqz	a0,2000035c <handler_irq_timer+0x40>
2000034c:	e0010517          	auipc	a0,0xe0010
20000350:	cc850513          	addi	a0,a0,-824 # 10014 <handler_irq_timer.kLogFields>
20000354:	4581                	li	a1,0
20000356:	134010ef          	jal	ra,2000148a <base_log_internal_dv>
2000035a:	a821                	j	20000372 <handler_irq_timer+0x56>
2000035c:	00002597          	auipc	a1,0x2
20000360:	d7058593          	addi	a1,a1,-656 # 200020cc <__udivdi3+0x37e>
20000364:	0020                	addi	s0,sp,8
20000366:	4651                	li	a2,20
20000368:	8522                	mv	a0,s0
2000036a:	2e2d                	jal	200006a4 <memcpy>
2000036c:	8522                	mv	a0,s0
2000036e:	072010ef          	jal	ra,200013e0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000372:	a001                	j	20000372 <handler_irq_timer+0x56>

20000374 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000374:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000376:	ce86                	sw	ra,92(sp)
20000378:	cc96                	sw	t0,88(sp)
2000037a:	ca9a                	sw	t1,84(sp)
2000037c:	c89e                	sw	t2,80(sp)
2000037e:	c6a2                	sw	s0,76(sp)
20000380:	c4aa                	sw	a0,72(sp)
20000382:	c2ae                	sw	a1,68(sp)
20000384:	c0b2                	sw	a2,64(sp)
20000386:	de36                	sw	a3,60(sp)
20000388:	dc3a                	sw	a4,56(sp)
2000038a:	da3e                	sw	a5,52(sp)
2000038c:	d842                	sw	a6,48(sp)
2000038e:	d646                	sw	a7,44(sp)
20000390:	d472                	sw	t3,40(sp)
20000392:	d276                	sw	t4,36(sp)
20000394:	d07a                	sw	t5,32(sp)
20000396:	ce7e                	sw	t6,28(sp)
20000398:	00002517          	auipc	a0,0x2
2000039c:	e1850513          	addi	a0,a0,-488 # 200021b0 <kDeviceLogBypassUartAddress>
200003a0:	4108                	lw	a0,0(a0)
200003a2:	c909                	beqz	a0,200003b4 <handler_irq_external+0x40>
200003a4:	e0010517          	auipc	a0,0xe0010
200003a8:	c8450513          	addi	a0,a0,-892 # 10028 <handler_irq_external.kLogFields>
200003ac:	4581                	li	a1,0
200003ae:	0dc010ef          	jal	ra,2000148a <base_log_internal_dv>
200003b2:	a821                	j	200003ca <handler_irq_external+0x56>
200003b4:	00002597          	auipc	a1,0x2
200003b8:	d2c58593          	addi	a1,a1,-724 # 200020e0 <__udivdi3+0x392>
200003bc:	0020                	addi	s0,sp,8
200003be:	4651                	li	a2,20
200003c0:	8522                	mv	a0,s0
200003c2:	24cd                	jal	200006a4 <memcpy>
200003c4:	8522                	mv	a0,s0
200003c6:	01a010ef          	jal	ra,200013e0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200003ca:	a001                	j	200003ca <handler_irq_external+0x56>

200003cc <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200003cc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200003ce:	ce06                	sw	ra,28(sp)
200003d0:	cc22                	sw	s0,24(sp)
200003d2:	ca26                	sw	s1,20(sp)
200003d4:	00002597          	auipc	a1,0x2
200003d8:	ddc58593          	addi	a1,a1,-548 # 200021b0 <kDeviceLogBypassUartAddress>
200003dc:	418c                	lw	a1,0(a1)
200003de:	842a                	mv	s0,a0
200003e0:	c19d                	beqz	a1,20000406 <print_exc_msg+0x3a>
200003e2:	e0010517          	auipc	a0,0xe0010
200003e6:	c6e50513          	addi	a0,a0,-914 # 10050 <print_exc_msg.kLogFields>
200003ea:	4585                	li	a1,1
200003ec:	8622                	mv	a2,s0
200003ee:	09c010ef          	jal	ra,2000148a <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200003f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200003f6:	e0010517          	auipc	a0,0xe0010
200003fa:	c6e50513          	addi	a0,a0,-914 # 10064 <print_exc_msg.kLogFields.6>
200003fe:	4585                	li	a1,1
20000400:	08a010ef          	jal	ra,2000148a <base_log_internal_dv>
20000404:	a81d                	j	2000043a <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000406:	00002597          	auipc	a1,0x2
2000040a:	d0258593          	addi	a1,a1,-766 # 20002108 <__udivdi3+0x3ba>
2000040e:	848a                	mv	s1,sp
20000410:	4651                	li	a2,20
20000412:	8526                	mv	a0,s1
20000414:	2c41                	jal	200006a4 <memcpy>
20000416:	8526                	mv	a0,s1
20000418:	85a2                	mv	a1,s0
2000041a:	7c7000ef          	jal	ra,200013e0 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000041e:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000422:	00002597          	auipc	a1,0x2
20000426:	cfa58593          	addi	a1,a1,-774 # 2000211c <__udivdi3+0x3ce>
2000042a:	848a                	mv	s1,sp
2000042c:	4651                	li	a2,20
2000042e:	8526                	mv	a0,s1
20000430:	2c95                	jal	200006a4 <memcpy>
20000432:	8526                	mv	a0,s1
20000434:	85a2                	mv	a1,s0
20000436:	7ab000ef          	jal	ra,200013e0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
2000043a:	a001                	j	2000043a <print_exc_msg+0x6e>

2000043c <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
2000043c:	1141                	addi	sp,sp,-16
2000043e:	c606                	sw	ra,12(sp)
20000440:	c422                	sw	s0,8(sp)
20000442:	6511                	lui	a0,0x4
20000444:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000448:	2231                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
2000044a:	00002517          	auipc	a0,0x2
2000044e:	d3650513          	addi	a0,a0,-714 # 20002180 <kDeviceType>
20000452:	4108                	lw	a0,0(a0)
20000454:	c111                	beqz	a0,20000458 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000456:	280d                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000458:	2ce1                	jal	20000730 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
2000045a:	00002597          	auipc	a1,0x2
2000045e:	d6e58593          	addi	a1,a1,-658 # 200021c8 <kTestConfig>
20000462:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000466:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000468:	c191                	beqz	a1,2000046c <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
2000046a:	2839                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
2000046c:	2435                	jal	20000698 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
2000046e:	e409                	bnez	s0,20000478 <main+0x3c>
20000470:	6531                	lui	a0,0xc
20000472:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000476:	a019                	j	2000047c <main+0x40>
20000478:	6525                	lui	a0,0x9
2000047a:	0535                	addi	a0,a0,13
2000047c:	28e1                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000047e:	4505                	li	a0,1
20000480:	4422                	lw	s0,8(sp)
20000482:	40b2                	lw	ra,12(sp)
20000484:	0141                	addi	sp,sp,16
20000486:	8082                	ret

20000488 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000488:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
2000048a:	ce06                	sw	ra,28(sp)
2000048c:	cc22                	sw	s0,24(sp)
2000048e:	ca26                	sw	s1,20(sp)
20000490:	f0000597          	auipc	a1,0xf0000
20000494:	b7858593          	addi	a1,a1,-1160 # 10000008 <_data_end>
20000498:	40000537          	lui	a0,0x40000
2000049c:	4ec010ef          	jal	ra,20001988 <dif_uart_init>
200004a0:	00002497          	auipc	s1,0x2
200004a4:	d1048493          	addi	s1,s1,-752 # 200021b0 <kDeviceLogBypassUartAddress>
200004a8:	c915                	beqz	a0,200004dc <init_uart+0x54>
200004aa:	4088                	lw	a0,0(s1)
200004ac:	c909                	beqz	a0,200004be <init_uart+0x36>
200004ae:	e0010517          	auipc	a0,0xe0010
200004b2:	bca50513          	addi	a0,a0,-1078 # 10078 <init_uart.kLogFields>
200004b6:	4581                	li	a1,0
200004b8:	7d3000ef          	jal	ra,2000148a <base_log_internal_dv>
200004bc:	a821                	j	200004d4 <init_uart+0x4c>
200004be:	00002597          	auipc	a1,0x2
200004c2:	c7258593          	addi	a1,a1,-910 # 20002130 <__udivdi3+0x3e2>
200004c6:	840a                	mv	s0,sp
200004c8:	4651                	li	a2,20
200004ca:	8522                	mv	a0,s0
200004cc:	2ae1                	jal	200006a4 <memcpy>
200004ce:	8522                	mv	a0,s0
200004d0:	711000ef          	jal	ra,200013e0 <base_log_internal_core>
200004d4:	6531                	lui	a0,0xc
200004d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004da:	28ad                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200004dc:	00002517          	auipc	a0,0x2
200004e0:	cc450513          	addi	a0,a0,-828 # 200021a0 <kUartBaudrate>
200004e4:	4108                	lw	a0,0(a0)
200004e6:	00002597          	auipc	a1,0x2
200004ea:	caa58593          	addi	a1,a1,-854 # 20002190 <kClockFreqPeripheralHz>
200004ee:	418c                	lw	a1,0(a1)
200004f0:	c02a                	sw	a0,0(sp)
200004f2:	c22e                	sw	a1,4(sp)
200004f4:	4505                	li	a0,1
200004f6:	c42a                	sw	a0,8(sp)
200004f8:	c62a                	sw	a0,12(sp)
200004fa:	f0000517          	auipc	a0,0xf0000
200004fe:	b0e50513          	addi	a0,a0,-1266 # 10000008 <_data_end>
20000502:	858a                	mv	a1,sp
20000504:	492010ef          	jal	ra,20001996 <dif_uart_configure>
20000508:	c915                	beqz	a0,2000053c <init_uart+0xb4>
2000050a:	4088                	lw	a0,0(s1)
2000050c:	c909                	beqz	a0,2000051e <init_uart+0x96>
2000050e:	e0010517          	auipc	a0,0xe0010
20000512:	b7e50513          	addi	a0,a0,-1154 # 1008c <init_uart.kLogFields.2>
20000516:	4581                	li	a1,0
20000518:	773000ef          	jal	ra,2000148a <base_log_internal_dv>
2000051c:	a821                	j	20000534 <init_uart+0xac>
2000051e:	00002597          	auipc	a1,0x2
20000522:	c2658593          	addi	a1,a1,-986 # 20002144 <__udivdi3+0x3f6>
20000526:	840a                	mv	s0,sp
20000528:	4651                	li	a2,20
2000052a:	8522                	mv	a0,s0
2000052c:	2aa5                	jal	200006a4 <memcpy>
2000052e:	8522                	mv	a0,s0
20000530:	6b1000ef          	jal	ra,200013e0 <base_log_internal_core>
20000534:	6531                	lui	a0,0xc
20000536:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000053a:	2829                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
2000053c:	f0000517          	auipc	a0,0xf0000
20000540:	acc50513          	addi	a0,a0,-1332 # 10000008 <_data_end>
20000544:	799000ef          	jal	ra,200014dc <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000548:	44d2                	lw	s1,20(sp)
2000054a:	4462                	lw	s0,24(sp)
2000054c:	40f2                	lw	ra,28(sp)
2000054e:	6105                	addi	sp,sp,32
20000550:	8082                	ret
	...

20000554 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000554:	1101                	addi	sp,sp,-32
20000556:	ce06                	sw	ra,28(sp)
20000558:	cc22                	sw	s0,24(sp)
2000055a:	65b1                	lui	a1,0xc
2000055c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000560:	02b50163          	beq	a0,a1,20000582 <test_status_set+0x2e>
20000564:	65a5                	lui	a1,0x9
20000566:	05b5                	addi	a1,a1,13
20000568:	02b50f63          	beq	a0,a1,200005a6 <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
2000056c:	00002597          	auipc	a1,0x2
20000570:	c4058593          	addi	a1,a1,-960 # 200021ac <kDeviceTestStatusAddress>
20000574:	418c                	lw	a1,0(a1)
20000576:	c191                	beqz	a1,2000057a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000578:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
2000057a:	4462                	lw	s0,24(sp)
2000057c:	40f2                	lw	ra,28(sp)
2000057e:	6105                	addi	sp,sp,32
20000580:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000582:	00002517          	auipc	a0,0x2
20000586:	c2e50513          	addi	a0,a0,-978 # 200021b0 <kDeviceLogBypassUartAddress>
2000058a:	4108                	lw	a0,0(a0)
2000058c:	ed1d                	bnez	a0,200005ca <test_status_set+0x76>
2000058e:	00002597          	auipc	a1,0x2
20000592:	bde58593          	addi	a1,a1,-1058 # 2000216c <__udivdi3+0x41e>
20000596:	840a                	mv	s0,sp
20000598:	4651                	li	a2,20
2000059a:	8522                	mv	a0,s0
2000059c:	2221                	jal	200006a4 <memcpy>
2000059e:	8522                	mv	a0,s0
200005a0:	641000ef          	jal	ra,200013e0 <base_log_internal_core>
200005a4:	a815                	j	200005d8 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005a6:	00002517          	auipc	a0,0x2
200005aa:	c0a50513          	addi	a0,a0,-1014 # 200021b0 <kDeviceLogBypassUartAddress>
200005ae:	4108                	lw	a0,0(a0)
200005b0:	ed15                	bnez	a0,200005ec <test_status_set+0x98>
200005b2:	00002597          	auipc	a1,0x2
200005b6:	ba658593          	addi	a1,a1,-1114 # 20002158 <__udivdi3+0x40a>
200005ba:	840a                	mv	s0,sp
200005bc:	4651                	li	a2,20
200005be:	8522                	mv	a0,s0
200005c0:	20d5                	jal	200006a4 <memcpy>
200005c2:	8522                	mv	a0,s0
200005c4:	61d000ef          	jal	ra,200013e0 <base_log_internal_core>
200005c8:	a80d                	j	200005fa <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200005ca:	e0010517          	auipc	a0,0xe0010
200005ce:	aea50513          	addi	a0,a0,-1302 # 100b4 <test_status_set.kLogFields.2>
200005d2:	4581                	li	a1,0
200005d4:	6b7000ef          	jal	ra,2000148a <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005d8:	00002517          	auipc	a0,0x2
200005dc:	bd450513          	addi	a0,a0,-1068 # 200021ac <kDeviceTestStatusAddress>
200005e0:	4108                	lw	a0,0(a0)
200005e2:	c50d                	beqz	a0,2000060c <test_status_set+0xb8>
200005e4:	65b1                	lui	a1,0xc
200005e6:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200005ea:	a005                	j	2000060a <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005ec:	e0010517          	auipc	a0,0xe0010
200005f0:	ab450513          	addi	a0,a0,-1356 # 100a0 <test_status_set.kLogFields>
200005f4:	4581                	li	a1,0
200005f6:	695000ef          	jal	ra,2000148a <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005fa:	00002517          	auipc	a0,0x2
200005fe:	bb250513          	addi	a0,a0,-1102 # 200021ac <kDeviceTestStatusAddress>
20000602:	4108                	lw	a0,0(a0)
20000604:	c501                	beqz	a0,2000060c <test_status_set+0xb8>
20000606:	65a5                	lui	a1,0x9
20000608:	05b5                	addi	a1,a1,13
2000060a:	c10c                	sw	a1,0(a0)
2000060c:	2051                	jal	20000690 <abort>
	...

20000610 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000610:	10500073          	wfi
20000614:	8082                	ret

20000616 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000616:	1141                	addi	sp,sp,-16
20000618:	c606                	sw	ra,12(sp)
2000061a:	00002597          	auipc	a1,0x2
2000061e:	b6e58593          	addi	a1,a1,-1170 # 20002188 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000622:	41d0                	lw	a2,4(a1)
20000624:	4194                	lw	a3,0(a1)
20000626:	02a605b3          	mul	a1,a2,a0
2000062a:	02a6b633          	mulhu	a2,a3,a0
2000062e:	95b2                	add	a1,a1,a2
20000630:	02a68533          	mul	a0,a3,a0
20000634:	000f4637          	lui	a2,0xf4
20000638:	24060613          	addi	a2,a2,576 # f4240 <test_memory_protection.kLogFields.61+0xe3f98>
2000063c:	4681                	li	a3,0
2000063e:	710010ef          	jal	ra,20001d4e <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000642:	4801                	li	a6,0
20000644:	4701                	li	a4,0

20000646 <read0>:
20000646:	b8002873          	csrr	a6,mcycleh
2000064a:	b00026f3          	csrr	a3,mcycle
2000064e:	b8002773          	csrr	a4,mcycleh
20000652:	fee81ae3          	bne	a6,a4,20000646 <read0>
20000656:	4781                	li	a5,0
20000658:	4601                	li	a2,0

2000065a <read1>:
2000065a:	b80027f3          	csrr	a5,mcycleh
2000065e:	b0002773          	csrr	a4,mcycle
20000662:	b8002673          	csrr	a2,mcycleh
20000666:	fec79ae3          	bne	a5,a2,2000065a <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
2000066a:	00d73633          	sltu	a2,a4,a3
2000066e:	410787b3          	sub	a5,a5,a6
20000672:	8f91                	sub	a5,a5,a2
20000674:	00b78663          	beq	a5,a1,20000680 <read1+0x26>
20000678:	00b7b733          	sltu	a4,a5,a1
2000067c:	ff69                	bnez	a4,20000656 <read0+0x10>
2000067e:	a031                	j	2000068a <read1+0x30>
20000680:	40d70633          	sub	a2,a4,a3
20000684:	00a63733          	sltu	a4,a2,a0
20000688:	f779                	bnez	a4,20000656 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
2000068a:	40b2                	lw	ra,12(sp)
2000068c:	0141                	addi	sp,sp,16
2000068e:	8082                	ret

20000690 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000690:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000694:	bff5                	j	20000690 <abort>
	...

20000698 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000698:	8082                	ret
	...

2000069c <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
2000069c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
2000069e:	8082                	ret

200006a0 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200006a0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200006a2:	8082                	ret

200006a4 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200006a4:	ca11                	beqz	a2,200006b8 <memcpy+0x14>
200006a6:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200006a8:	00058703          	lb	a4,0(a1)
200006ac:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006b0:	167d                	addi	a2,a2,-1
200006b2:	0685                	addi	a3,a3,1
200006b4:	0585                	addi	a1,a1,1
200006b6:	fa6d                	bnez	a2,200006a8 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006b8:	8082                	ret

200006ba <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ba:	c619                	beqz	a2,200006c8 <memset+0xe>
200006bc:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006be:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006c2:	167d                	addi	a2,a2,-1
200006c4:	0685                	addi	a3,a3,1
200006c6:	fe65                	bnez	a2,200006be <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006c8:	8082                	ret

200006ca <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006ca:	ce09                	beqz	a2,200006e4 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006cc:	00054683          	lbu	a3,0(a0)
200006d0:	0005c703          	lbu	a4,0(a1)
200006d4:	00e6ea63          	bltu	a3,a4,200006e8 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006d8:	00d76b63          	bltu	a4,a3,200006ee <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006dc:	167d                	addi	a2,a2,-1
200006de:	0585                	addi	a1,a1,1
200006e0:	0505                	addi	a0,a0,1
200006e2:	f66d                	bnez	a2,200006cc <memcmp+0x2>
200006e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006e6:	8082                	ret
200006e8:	fd600513          	li	a0,-42
200006ec:	8082                	ret
200006ee:	02a00513          	li	a0,42
200006f2:	8082                	ret

200006f4 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006f4:	ca11                	beqz	a2,20000708 <memchr+0x14>
200006f6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006fa:	00054683          	lbu	a3,0(a0)
200006fe:	00b68663          	beq	a3,a1,2000070a <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000702:	167d                	addi	a2,a2,-1
20000704:	0505                	addi	a0,a0,1
20000706:	fa75                	bnez	a2,200006fa <memchr+0x6>
20000708:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000070a:	8082                	ret

2000070c <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000070c:	ce09                	beqz	a2,20000726 <memrchr+0x1a>
2000070e:	fff50693          	addi	a3,a0,-1
20000712:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000716:	00c68733          	add	a4,a3,a2
2000071a:	00074703          	lbu	a4,0(a4)
2000071e:	00b70663          	beq	a4,a1,2000072a <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000722:	167d                	addi	a2,a2,-1
20000724:	fa6d                	bnez	a2,20000716 <memrchr+0xa>
20000726:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000728:	8082                	ret
2000072a:	9532                	add	a0,a0,a2
2000072c:	157d                	addi	a0,a0,-1
2000072e:	8082                	ret

20000730 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:193
  }
}

const test_config_t kTestConfig;

bool test_main(void) {
20000730:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:194
  flash_init_block();
20000732:	ce06                	sw	ra,28(sp)
20000734:	cc22                	sw	s0,24(sp)
20000736:	1ff000ef          	jal	ra,20001134 <flash_init_block>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:196

  LOG_INFO("flash test!");
2000073a:	00002517          	auipc	a0,0x2
2000073e:	a7650513          	addi	a0,a0,-1418 # 200021b0 <kDeviceLogBypassUartAddress>
20000742:	4108                	lw	a0,0(a0)
20000744:	c909                	beqz	a0,20000756 <test_main+0x26>
20000746:	e0010517          	auipc	a0,0xe0010
2000074a:	98250513          	addi	a0,a0,-1662 # 100c8 <test_main.kLogFields>
2000074e:	4581                	li	a1,0
20000750:	53b000ef          	jal	ra,2000148a <base_log_internal_dv>
20000754:	a821                	j	2000076c <test_main+0x3c>
20000756:	00002597          	auipc	a1,0x2
2000075a:	a5e58593          	addi	a1,a1,-1442 # 200021b4 <kDeviceLogBypassUartAddress+0x4>
2000075e:	840a                	mv	s0,sp
20000760:	4651                	li	a2,20
20000762:	8522                	mv	a0,s0
20000764:	3781                	jal	200006a4 <memcpy>
20000766:	8522                	mv	a0,s0
20000768:	479000ef          	jal	ra,200013e0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:198

  flash_cfg_bank_erase(FLASH_BANK_0, /*erase_en=*/true);
2000076c:	4585                	li	a1,1
2000076e:	4501                	li	a0,0
20000770:	269000ef          	jal	ra,200011d8 <flash_cfg_bank_erase>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:199
  flash_cfg_bank_erase(FLASH_BANK_1, /*erase_en=*/true);
20000774:	4505                	li	a0,1
20000776:	4585                	li	a1,1
20000778:	261000ef          	jal	ra,200011d8 <flash_cfg_bank_erase>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:201

  test_basic_io();
2000077c:	2005                	jal	2000079c <test_basic_io>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:202
  test_memory_protection();
2000077e:	6ae000ef          	jal	ra,20000e2c <test_memory_protection>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:204

  flash_cfg_bank_erase(FLASH_BANK_0, /*erase_en=*/false);
20000782:	4501                	li	a0,0
20000784:	4581                	li	a1,0
20000786:	253000ef          	jal	ra,200011d8 <flash_cfg_bank_erase>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:205
  flash_cfg_bank_erase(FLASH_BANK_1, /*erase_en=*/false);
2000078a:	4505                	li	a0,1
2000078c:	4581                	li	a1,0
2000078e:	24b000ef          	jal	ra,200011d8 <flash_cfg_bank_erase>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:207

  return true;
20000792:	4505                	li	a0,1
20000794:	4462                	lw	s0,24(sp)
20000796:	40f2                	lw	ra,28(sp)
20000798:	6105                	addi	sp,sp,32
2000079a:	8082                	ret

2000079c <test_basic_io>:
test_basic_io():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:36
static void test_basic_io(void) {
2000079c:	7135                	addi	sp,sp,-160
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:38
  flash_default_region_access(/*rd_en=*/true, /*prog_en=*/true,
2000079e:	cf06                	sw	ra,156(sp)
200007a0:	cd22                	sw	s0,152(sp)
200007a2:	cb26                	sw	s1,148(sp)
200007a4:	c94a                	sw	s2,144(sp)
200007a6:	c74e                	sw	s3,140(sp)
200007a8:	c552                	sw	s4,136(sp)
200007aa:	c356                	sw	s5,132(sp)
200007ac:	c15a                	sw	s6,128(sp)
200007ae:	dede                	sw	s7,124(sp)
200007b0:	dce2                	sw	s8,120(sp)
200007b2:	dae6                	sw	s9,116(sp)
200007b4:	d8ea                	sw	s10,112(sp)
200007b6:	d6ee                	sw	s11,108(sp)
200007b8:	1100                	addi	s0,sp,160
200007ba:	4505                	li	a0,1
200007bc:	4585                	li	a1,1
200007be:	4605                	li	a2,1
200007c0:	4485                	li	s1,1
200007c2:	339000ef          	jal	ra,200012fa <flash_default_region_access>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:42
  mp_region_t info_region = {.num = 0x0,
200007c6:	fa042423          	sw	zero,-88(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:43
                             .base = FLASH_PAGES_PER_BANK,
200007ca:	3cf000ef          	jal	ra,20001398 <flash_get_pages_per_bank>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:42
  mp_region_t info_region = {.num = 0x0,
200007ce:	faa42623          	sw	a0,-84(s0)
200007d2:	fa942823          	sw	s1,-80(s0)
200007d6:	fa942a23          	sw	s1,-76(s0)
200007da:	fa942c23          	sw	s1,-72(s0)
200007de:	fa942e23          	sw	s1,-68(s0)
200007e2:	fc942023          	sw	s1,-64(s0)
200007e6:	fc942223          	sw	s1,-60(s0)
200007ea:	fa840513          	addi	a0,s0,-88
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:50
  flash_cfg_region(&info_region);
200007ee:	31f000ef          	jal	ra,2000130c <flash_cfg_region>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:53
  mp_region_t data_region = {.num = 0x0,
200007f2:	f8042423          	sw	zero,-120(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:54
                             .base = FLASH_PAGES_PER_BANK,
200007f6:	3a3000ef          	jal	ra,20001398 <flash_get_pages_per_bank>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:53
  mp_region_t data_region = {.num = 0x0,
200007fa:	f8a42623          	sw	a0,-116(s0)
200007fe:	f8942823          	sw	s1,-112(s0)
20000802:	f8042a23          	sw	zero,-108(s0)
20000806:	f8942c23          	sw	s1,-104(s0)
2000080a:	f8942e23          	sw	s1,-100(s0)
2000080e:	fa942023          	sw	s1,-96(s0)
20000812:	fa942223          	sw	s1,-92(s0)
20000816:	f8840513          	addi	a0,s0,-120
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:61
  flash_cfg_region(&data_region);
2000081a:	2f3000ef          	jal	ra,2000130c <flash_cfg_region>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:63
  uintptr_t flash_bank_1_addr = FLASH_MEM_BASE_ADDR + FLASH_BANK_SZ;
2000081e:	165000ef          	jal	ra,20001182 <flash_get_bank_size>
20000822:	200005b7          	lui	a1,0x20000
20000826:	00b509b3          	add	s3,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:68
  CHECK_EQZ(flash_page_erase(flash_bank_1_addr, kDataPartition));
2000082a:	854e                	mv	a0,s3
2000082c:	4581                	li	a1,0
2000082e:	1cb000ef          	jal	ra,200011f8 <flash_page_erase>
20000832:	00002d17          	auipc	s10,0x2
20000836:	97ed0d13          	addi	s10,s10,-1666 # 200021b0 <kDeviceLogBypassUartAddress>
2000083a:	cd05                	beqz	a0,20000872 <test_basic_io+0xd6>
2000083c:	000d2503          	lw	a0,0(s10)
20000840:	c909                	beqz	a0,20000852 <test_basic_io+0xb6>
20000842:	e0010517          	auipc	a0,0xe0010
20000846:	89a50513          	addi	a0,a0,-1894 # 100dc <test_basic_io.kLogFields>
2000084a:	4581                	li	a1,0
2000084c:	43f000ef          	jal	ra,2000148a <base_log_internal_dv>
20000850:	a829                	j	2000086a <test_basic_io+0xce>
20000852:	00002597          	auipc	a1,0x2
20000856:	97a58593          	addi	a1,a1,-1670 # 200021cc <kTestConfig+0x4>
2000085a:	f7040493          	addi	s1,s0,-144
2000085e:	4651                	li	a2,20
20000860:	8526                	mv	a0,s1
20000862:	3589                	jal	200006a4 <memcpy>
20000864:	8526                	mv	a0,s1
20000866:	37b000ef          	jal	ra,200013e0 <base_log_internal_core>
2000086a:	6531                	lui	a0,0xc
2000086c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000870:	31d5                	jal	20000554 <test_status_set>
20000872:	40000537          	lui	a0,0x40000
20000876:	fff50c93          	addi	s9,a0,-1 # 3fffffff <_data_init_start+0x1fffd28f>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:69
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; ++i) {
2000087a:	329000ef          	jal	ra,200013a2 <flash_get_words_per_page>
2000087e:	cd31                	beqz	a0,200008da <test_basic_io+0x13e>
20000880:	4481                	li	s1,0
20000882:	000d2b83          	lw	s7,0(s10)
20000886:	5c7d                	li	s8,-1
20000888:	00002a17          	auipc	s4,0x2
2000088c:	958a0a13          	addi	s4,s4,-1704 # 200021e0 <kTestConfig+0x18>
20000890:	f7040913          	addi	s2,s0,-144
20000894:	6531                	lui	a0,0xc
20000896:	aad50b13          	addi	s6,a0,-1363 # baad <_stack_size+0x9aad>
2000089a:	e0010a97          	auipc	s5,0xe0010
2000089e:	856a8a93          	addi	s5,s5,-1962 # 100f0 <test_basic_io.kLogFields.3>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200008a2:	0194f533          	and	a0,s1,s9
200008a6:	050a                	slli	a0,a0,0x2
200008a8:	954e                	add	a0,a0,s3
200008aa:	4108                	lw	a0,0(a0)
test_basic_io():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:70
    CHECK_EQZ(~mmio_region_read32(flash_bank_1, i * sizeof(uint32_t)));
200008ac:	03850263          	beq	a0,s8,200008d0 <test_basic_io+0x134>
200008b0:	000b8763          	beqz	s7,200008be <test_basic_io+0x122>
200008b4:	8556                	mv	a0,s5
200008b6:	4581                	li	a1,0
200008b8:	3d3000ef          	jal	ra,2000148a <base_log_internal_dv>
200008bc:	a801                	j	200008cc <test_basic_io+0x130>
200008be:	4651                	li	a2,20
200008c0:	854a                	mv	a0,s2
200008c2:	85d2                	mv	a1,s4
200008c4:	33c5                	jal	200006a4 <memcpy>
200008c6:	854a                	mv	a0,s2
200008c8:	319000ef          	jal	ra,200013e0 <base_log_internal_core>
200008cc:	855a                	mv	a0,s6
200008ce:	3159                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:69
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; ++i) {
200008d0:	0485                	addi	s1,s1,1
200008d2:	2d1000ef          	jal	ra,200013a2 <flash_get_words_per_page>
200008d6:	fca4e6e3          	bltu	s1,a0,200008a2 <test_basic_io+0x106>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:74
  CHECK_EQZ(flash_page_erase(flash_bank_1_addr, kInfoPartition));
200008da:	4585                	li	a1,1
200008dc:	854e                	mv	a0,s3
200008de:	11b000ef          	jal	ra,200011f8 <flash_page_erase>
200008e2:	cd05                	beqz	a0,2000091a <test_basic_io+0x17e>
200008e4:	000d2503          	lw	a0,0(s10)
200008e8:	c909                	beqz	a0,200008fa <test_basic_io+0x15e>
200008ea:	e0010517          	auipc	a0,0xe0010
200008ee:	81a50513          	addi	a0,a0,-2022 # 10104 <test_basic_io.kLogFields.6>
200008f2:	4581                	li	a1,0
200008f4:	397000ef          	jal	ra,2000148a <base_log_internal_dv>
200008f8:	a829                	j	20000912 <test_basic_io+0x176>
200008fa:	00002597          	auipc	a1,0x2
200008fe:	8fa58593          	addi	a1,a1,-1798 # 200021f4 <kTestConfig+0x2c>
20000902:	f7040493          	addi	s1,s0,-144
20000906:	4651                	li	a2,20
20000908:	8526                	mv	a0,s1
2000090a:	3b69                	jal	200006a4 <memcpy>
2000090c:	8526                	mv	a0,s1
2000090e:	2d3000ef          	jal	ra,200013e0 <base_log_internal_core>
20000912:	6531                	lui	a0,0xc
20000914:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000918:	3935                	jal	20000554 <test_status_set>
2000091a:	f7942623          	sw	s9,-148(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:78
  uint32_t input_page[FLASH_WORDS_PER_PAGE];
2000091e:	285000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000922:	f6242223          	sw	sp,-156(s0)
20000926:	050a                	slli	a0,a0,0x2
20000928:	053d                	addi	a0,a0,15
2000092a:	9941                	andi	a0,a0,-16
2000092c:	40a10db3          	sub	s11,sp,a0
20000930:	816e                	mv	sp,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:79
  uint32_t output_page[FLASH_WORDS_PER_PAGE];
20000932:	271000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000936:	050a                	slli	a0,a0,0x2
20000938:	053d                	addi	a0,a0,15
2000093a:	9941                	andi	a0,a0,-16
2000093c:	40a10cb3          	sub	s9,sp,a0
20000940:	8166                	mv	sp,s9
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:80
  memset(input_page, 0xa5, FLASH_WORDS_PER_PAGE * sizeof(uint32_t));
20000942:	261000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000946:	00251613          	slli	a2,a0,0x2
2000094a:	0a500593          	li	a1,165
2000094e:	856e                	mv	a0,s11
20000950:	33ad                	jal	200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:81
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; i += 2) {
20000952:	251000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000956:	cd09                	beqz	a0,20000970 <test_basic_io+0x1d4>
20000958:	4901                	li	s2,0
2000095a:	84ee                	mv	s1,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:82
    input_page[i] ^= 0xffffffff;
2000095c:	4088                	lw	a0,0(s1)
2000095e:	fff54513          	not	a0,a0
20000962:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:81
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; i += 2) {
20000964:	0909                	addi	s2,s2,2
20000966:	23d000ef          	jal	ra,200013a2 <flash_get_words_per_page>
2000096a:	04a1                	addi	s1,s1,8
2000096c:	fea968e3          	bltu	s2,a0,2000095c <test_basic_io+0x1c0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:87
  CHECK_EQZ(flash_page_erase(flash_bank_1_addr, kDataPartition));
20000970:	854e                	mv	a0,s3
20000972:	4581                	li	a1,0
20000974:	085000ef          	jal	ra,200011f8 <flash_page_erase>
20000978:	cd05                	beqz	a0,200009b0 <test_basic_io+0x214>
2000097a:	000d2503          	lw	a0,0(s10)
2000097e:	c909                	beqz	a0,20000990 <test_basic_io+0x1f4>
20000980:	e000f517          	auipc	a0,0xe000f
20000984:	79850513          	addi	a0,a0,1944 # 10118 <test_basic_io.kLogFields.9>
20000988:	4581                	li	a1,0
2000098a:	301000ef          	jal	ra,2000148a <base_log_internal_dv>
2000098e:	a829                	j	200009a8 <test_basic_io+0x20c>
20000990:	00002597          	auipc	a1,0x2
20000994:	87858593          	addi	a1,a1,-1928 # 20002208 <kTestConfig+0x40>
20000998:	f7040493          	addi	s1,s0,-144
2000099c:	4651                	li	a2,20
2000099e:	8526                	mv	a0,s1
200009a0:	3311                	jal	200006a4 <memcpy>
200009a2:	8526                	mv	a0,s1
200009a4:	23d000ef          	jal	ra,200013e0 <base_log_internal_core>
200009a8:	6531                	lui	a0,0xc
200009aa:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200009ae:	365d                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:88
  CHECK_EQZ(flash_write(flash_bank_1_addr, kDataPartition, input_page,
200009b0:	1f3000ef          	jal	ra,200013a2 <flash_get_words_per_page>
200009b4:	86aa                	mv	a3,a0
200009b6:	854e                	mv	a0,s3
200009b8:	4581                	li	a1,0
200009ba:	866e                	mv	a2,s11
200009bc:	06d000ef          	jal	ra,20001228 <flash_write>
200009c0:	cd05                	beqz	a0,200009f8 <test_basic_io+0x25c>
200009c2:	000d2503          	lw	a0,0(s10)
200009c6:	c909                	beqz	a0,200009d8 <test_basic_io+0x23c>
200009c8:	e000f517          	auipc	a0,0xe000f
200009cc:	76450513          	addi	a0,a0,1892 # 1012c <test_basic_io.kLogFields.11>
200009d0:	4581                	li	a1,0
200009d2:	2b9000ef          	jal	ra,2000148a <base_log_internal_dv>
200009d6:	a829                	j	200009f0 <test_basic_io+0x254>
200009d8:	00002597          	auipc	a1,0x2
200009dc:	84458593          	addi	a1,a1,-1980 # 2000221c <kTestConfig+0x54>
200009e0:	f7040493          	addi	s1,s0,-144
200009e4:	4651                	li	a2,20
200009e6:	8526                	mv	a0,s1
200009e8:	3975                	jal	200006a4 <memcpy>
200009ea:	8526                	mv	a0,s1
200009ec:	1f5000ef          	jal	ra,200013e0 <base_log_internal_core>
200009f0:	6531                	lui	a0,0xc
200009f2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200009f6:	3eb9                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:90
  CHECK_EQZ(flash_read(flash_bank_1_addr, kDataPartition, FLASH_WORDS_PER_PAGE,
200009f8:	1ab000ef          	jal	ra,200013a2 <flash_get_words_per_page>
200009fc:	862a                	mv	a2,a0
200009fe:	854e                	mv	a0,s3
20000a00:	4581                	li	a1,0
20000a02:	86e6                	mv	a3,s9
20000a04:	0a7000ef          	jal	ra,200012aa <flash_read>
20000a08:	cd05                	beqz	a0,20000a40 <test_basic_io+0x2a4>
20000a0a:	000d2503          	lw	a0,0(s10)
20000a0e:	c909                	beqz	a0,20000a20 <test_basic_io+0x284>
20000a10:	e000f517          	auipc	a0,0xe000f
20000a14:	73050513          	addi	a0,a0,1840 # 10140 <test_basic_io.kLogFields.14>
20000a18:	4581                	li	a1,0
20000a1a:	271000ef          	jal	ra,2000148a <base_log_internal_dv>
20000a1e:	a829                	j	20000a38 <test_basic_io+0x29c>
20000a20:	00002597          	auipc	a1,0x2
20000a24:	81058593          	addi	a1,a1,-2032 # 20002230 <kTestConfig+0x68>
20000a28:	f7040493          	addi	s1,s0,-144
20000a2c:	4651                	li	a2,20
20000a2e:	8526                	mv	a0,s1
20000a30:	3995                	jal	200006a4 <memcpy>
20000a32:	8526                	mv	a0,s1
20000a34:	1ad000ef          	jal	ra,200013e0 <base_log_internal_core>
20000a38:	6531                	lui	a0,0xc
20000a3a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a3e:	3e19                	jal	20000554 <test_status_set>
20000a40:	f7a42423          	sw	s10,-152(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:92
  CHECK_ARRAYS_EQ(output_page, input_page, FLASH_WORDS_PER_PAGE);
20000a44:	15f000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000a48:	cd39                	beqz	a0,20000aa6 <test_basic_io+0x30a>
20000a4a:	84aa                	mv	s1,a0
20000a4c:	f6842503          	lw	a0,-152(s0)
20000a50:	00052d03          	lw	s10,0(a0)
20000a54:	00001b17          	auipc	s6,0x1
20000a58:	7f0b0b13          	addi	s6,s6,2032 # 20002244 <kTestConfig+0x7c>
20000a5c:	f7040a93          	addi	s5,s0,-144
20000a60:	6531                	lui	a0,0xc
20000a62:	aad50b93          	addi	s7,a0,-1363 # baad <_stack_size+0x9aad>
20000a66:	e000fc17          	auipc	s8,0xe000f
20000a6a:	6eec0c13          	addi	s8,s8,1774 # 10154 <test_basic_io.kLogFields.17>
20000a6e:	8a66                	mv	s4,s9
20000a70:	896e                	mv	s2,s11
20000a72:	000a2503          	lw	a0,0(s4)
20000a76:	00092583          	lw	a1,0(s2)
20000a7a:	02b50263          	beq	a0,a1,20000a9e <test_basic_io+0x302>
20000a7e:	000d0763          	beqz	s10,20000a8c <test_basic_io+0x2f0>
20000a82:	8562                	mv	a0,s8
20000a84:	4581                	li	a1,0
20000a86:	205000ef          	jal	ra,2000148a <base_log_internal_dv>
20000a8a:	a801                	j	20000a9a <test_basic_io+0x2fe>
20000a8c:	4651                	li	a2,20
20000a8e:	8556                	mv	a0,s5
20000a90:	85da                	mv	a1,s6
20000a92:	3909                	jal	200006a4 <memcpy>
20000a94:	8556                	mv	a0,s5
20000a96:	14b000ef          	jal	ra,200013e0 <base_log_internal_core>
20000a9a:	855e                	mv	a0,s7
20000a9c:	3c65                	jal	20000554 <test_status_set>
20000a9e:	14fd                	addi	s1,s1,-1
20000aa0:	0911                	addi	s2,s2,4
20000aa2:	0a11                	addi	s4,s4,4
20000aa4:	f4f9                	bnez	s1,20000a72 <test_basic_io+0x2d6>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:95
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; i++) {
20000aa6:	0fd000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000aaa:	f6c42a03          	lw	s4,-148(s0)
20000aae:	c105                	beqz	a0,20000ace <test_basic_io+0x332>
20000ab0:	4481                	li	s1,0
20000ab2:	8966                	mv	s2,s9
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ab4:	0144f533          	and	a0,s1,s4
20000ab8:	050a                	slli	a0,a0,0x2
20000aba:	954e                	add	a0,a0,s3
20000abc:	4108                	lw	a0,0(a0)
test_basic_io():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:96
    output_page[i] = mmio_region_read32(flash_bank_1, i * sizeof(uint32_t));
20000abe:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:95
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; i++) {
20000ac2:	0485                	addi	s1,s1,1
20000ac4:	0df000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000ac8:	0911                	addi	s2,s2,4
20000aca:	fea4e5e3          	bltu	s1,a0,20000ab4 <test_basic_io+0x318>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:98
  CHECK_ARRAYS_EQ(output_page, input_page, FLASH_WORDS_PER_PAGE);
20000ace:	0d5000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000ad2:	cd39                	beqz	a0,20000b30 <test_basic_io+0x394>
20000ad4:	8a2a                	mv	s4,a0
20000ad6:	f6842503          	lw	a0,-152(s0)
20000ada:	00052d03          	lw	s10,0(a0)
20000ade:	00001917          	auipc	s2,0x1
20000ae2:	77a90913          	addi	s2,s2,1914 # 20002258 <kTestConfig+0x90>
20000ae6:	f7040b13          	addi	s6,s0,-144
20000aea:	6531                	lui	a0,0xc
20000aec:	aad50b93          	addi	s7,a0,-1363 # baad <_stack_size+0x9aad>
20000af0:	e000fc17          	auipc	s8,0xe000f
20000af4:	678c0c13          	addi	s8,s8,1656 # 10168 <test_basic_io.kLogFields.20>
20000af8:	84e6                	mv	s1,s9
20000afa:	8aee                	mv	s5,s11
20000afc:	4088                	lw	a0,0(s1)
20000afe:	000aa583          	lw	a1,0(s5)
20000b02:	02b50263          	beq	a0,a1,20000b26 <test_basic_io+0x38a>
20000b06:	000d0763          	beqz	s10,20000b14 <test_basic_io+0x378>
20000b0a:	8562                	mv	a0,s8
20000b0c:	4581                	li	a1,0
20000b0e:	17d000ef          	jal	ra,2000148a <base_log_internal_dv>
20000b12:	a801                	j	20000b22 <test_basic_io+0x386>
20000b14:	4651                	li	a2,20
20000b16:	855a                	mv	a0,s6
20000b18:	85ca                	mv	a1,s2
20000b1a:	3669                	jal	200006a4 <memcpy>
20000b1c:	855a                	mv	a0,s6
20000b1e:	0c3000ef          	jal	ra,200013e0 <base_log_internal_core>
20000b22:	855e                	mv	a0,s7
20000b24:	3c05                	jal	20000554 <test_status_set>
20000b26:	1a7d                	addi	s4,s4,-1
20000b28:	0a91                	addi	s5,s5,4
20000b2a:	0491                	addi	s1,s1,4
20000b2c:	fc0a18e3          	bnez	s4,20000afc <test_basic_io+0x360>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:101
  CHECK_EQZ(flash_page_erase(flash_bank_1_addr, kInfoPartition));
20000b30:	4585                	li	a1,1
20000b32:	854e                	mv	a0,s3
20000b34:	6c4000ef          	jal	ra,200011f8 <flash_page_erase>
20000b38:	f6842483          	lw	s1,-152(s0)
20000b3c:	c91d                	beqz	a0,20000b72 <test_basic_io+0x3d6>
20000b3e:	4088                	lw	a0,0(s1)
20000b40:	c909                	beqz	a0,20000b52 <test_basic_io+0x3b6>
20000b42:	e000f517          	auipc	a0,0xe000f
20000b46:	63a50513          	addi	a0,a0,1594 # 1017c <test_basic_io.kLogFields.22>
20000b4a:	4581                	li	a1,0
20000b4c:	13f000ef          	jal	ra,2000148a <base_log_internal_dv>
20000b50:	a829                	j	20000b6a <test_basic_io+0x3ce>
20000b52:	00001597          	auipc	a1,0x1
20000b56:	71a58593          	addi	a1,a1,1818 # 2000226c <kTestConfig+0xa4>
20000b5a:	f7040913          	addi	s2,s0,-144
20000b5e:	4651                	li	a2,20
20000b60:	854a                	mv	a0,s2
20000b62:	3689                	jal	200006a4 <memcpy>
20000b64:	854a                	mv	a0,s2
20000b66:	07b000ef          	jal	ra,200013e0 <base_log_internal_core>
20000b6a:	6531                	lui	a0,0xc
20000b6c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b70:	32d5                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:102
  CHECK_EQZ(flash_write(flash_bank_1_addr, kInfoPartition, input_page,
20000b72:	031000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000b76:	86aa                	mv	a3,a0
20000b78:	4585                	li	a1,1
20000b7a:	854e                	mv	a0,s3
20000b7c:	866e                	mv	a2,s11
20000b7e:	6aa000ef          	jal	ra,20001228 <flash_write>
20000b82:	c91d                	beqz	a0,20000bb8 <test_basic_io+0x41c>
20000b84:	4088                	lw	a0,0(s1)
20000b86:	c909                	beqz	a0,20000b98 <test_basic_io+0x3fc>
20000b88:	e000f517          	auipc	a0,0xe000f
20000b8c:	60850513          	addi	a0,a0,1544 # 10190 <test_basic_io.kLogFields.24>
20000b90:	4581                	li	a1,0
20000b92:	0f9000ef          	jal	ra,2000148a <base_log_internal_dv>
20000b96:	a829                	j	20000bb0 <test_basic_io+0x414>
20000b98:	00001597          	auipc	a1,0x1
20000b9c:	6e858593          	addi	a1,a1,1768 # 20002280 <kTestConfig+0xb8>
20000ba0:	f7040913          	addi	s2,s0,-144
20000ba4:	4651                	li	a2,20
20000ba6:	854a                	mv	a0,s2
20000ba8:	3cf5                	jal	200006a4 <memcpy>
20000baa:	854a                	mv	a0,s2
20000bac:	035000ef          	jal	ra,200013e0 <base_log_internal_core>
20000bb0:	6531                	lui	a0,0xc
20000bb2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000bb6:	3a79                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:104
  CHECK_EQZ(flash_read(flash_bank_1_addr, kInfoPartition, FLASH_WORDS_PER_PAGE,
20000bb8:	7ea000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000bbc:	862a                	mv	a2,a0
20000bbe:	4585                	li	a1,1
20000bc0:	854e                	mv	a0,s3
20000bc2:	86e6                	mv	a3,s9
20000bc4:	6e6000ef          	jal	ra,200012aa <flash_read>
20000bc8:	c91d                	beqz	a0,20000bfe <test_basic_io+0x462>
20000bca:	4088                	lw	a0,0(s1)
20000bcc:	c909                	beqz	a0,20000bde <test_basic_io+0x442>
20000bce:	e000f517          	auipc	a0,0xe000f
20000bd2:	5d650513          	addi	a0,a0,1494 # 101a4 <test_basic_io.kLogFields.27>
20000bd6:	4581                	li	a1,0
20000bd8:	0b3000ef          	jal	ra,2000148a <base_log_internal_dv>
20000bdc:	a829                	j	20000bf6 <test_basic_io+0x45a>
20000bde:	00001597          	auipc	a1,0x1
20000be2:	6b658593          	addi	a1,a1,1718 # 20002294 <kTestConfig+0xcc>
20000be6:	f7040493          	addi	s1,s0,-144
20000bea:	4651                	li	a2,20
20000bec:	8526                	mv	a0,s1
20000bee:	3c5d                	jal	200006a4 <memcpy>
20000bf0:	8526                	mv	a0,s1
20000bf2:	7ee000ef          	jal	ra,200013e0 <base_log_internal_core>
20000bf6:	6531                	lui	a0,0xc
20000bf8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000bfc:	3aa1                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:106
  CHECK_ARRAYS_EQ(output_page, input_page, FLASH_WORDS_PER_PAGE);
20000bfe:	7a4000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000c02:	c125                	beqz	a0,20000c62 <test_basic_io+0x4c6>
20000c04:	8a2a                	mv	s4,a0
20000c06:	f6842503          	lw	a0,-152(s0)
20000c0a:	00052d03          	lw	s10,0(a0)
20000c0e:	00001917          	auipc	s2,0x1
20000c12:	69a90913          	addi	s2,s2,1690 # 200022a8 <kTestConfig+0xe0>
20000c16:	f7040b13          	addi	s6,s0,-144
20000c1a:	6531                	lui	a0,0xc
20000c1c:	aad50b93          	addi	s7,a0,-1363 # baad <_stack_size+0x9aad>
20000c20:	e000fc17          	auipc	s8,0xe000f
20000c24:	598c0c13          	addi	s8,s8,1432 # 101b8 <test_basic_io.kLogFields.30>
20000c28:	8ae6                	mv	s5,s9
20000c2a:	84ee                	mv	s1,s11
20000c2c:	000aa503          	lw	a0,0(s5)
20000c30:	408c                	lw	a1,0(s1)
20000c32:	02b50363          	beq	a0,a1,20000c58 <test_basic_io+0x4bc>
20000c36:	000d0763          	beqz	s10,20000c44 <test_basic_io+0x4a8>
20000c3a:	8562                	mv	a0,s8
20000c3c:	4581                	li	a1,0
20000c3e:	04d000ef          	jal	ra,2000148a <base_log_internal_dv>
20000c42:	a801                	j	20000c52 <test_basic_io+0x4b6>
20000c44:	4651                	li	a2,20
20000c46:	855a                	mv	a0,s6
20000c48:	85ca                	mv	a1,s2
20000c4a:	3ca9                	jal	200006a4 <memcpy>
20000c4c:	855a                	mv	a0,s6
20000c4e:	792000ef          	jal	ra,200013e0 <base_log_internal_core>
20000c52:	855e                	mv	a0,s7
20000c54:	901ff0ef          	jal	ra,20000554 <test_status_set>
20000c58:	1a7d                	addi	s4,s4,-1
20000c5a:	0491                	addi	s1,s1,4
20000c5c:	0a91                	addi	s5,s5,4
20000c5e:	fc0a17e3          	bnez	s4,20000c2c <test_basic_io+0x490>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:108
  uintptr_t flash_bank_0_last_page_addr = flash_bank_1_addr - FLASH_PAGE_SZ;
20000c62:	746000ef          	jal	ra,200013a8 <flash_get_page_size>
20000c66:	40a989b3          	sub	s3,s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:111
  CHECK_EQZ(flash_page_erase(flash_bank_0_last_page_addr, kDataPartition));
20000c6a:	854e                	mv	a0,s3
20000c6c:	4581                	li	a1,0
20000c6e:	58a000ef          	jal	ra,200011f8 <flash_page_erase>
20000c72:	f6842d03          	lw	s10,-152(s0)
20000c76:	cd0d                	beqz	a0,20000cb0 <test_basic_io+0x514>
20000c78:	000d2503          	lw	a0,0(s10)
20000c7c:	c909                	beqz	a0,20000c8e <test_basic_io+0x4f2>
20000c7e:	e000f517          	auipc	a0,0xe000f
20000c82:	54e50513          	addi	a0,a0,1358 # 101cc <test_basic_io.kLogFields.32>
20000c86:	4581                	li	a1,0
20000c88:	003000ef          	jal	ra,2000148a <base_log_internal_dv>
20000c8c:	a829                	j	20000ca6 <test_basic_io+0x50a>
20000c8e:	00001597          	auipc	a1,0x1
20000c92:	62e58593          	addi	a1,a1,1582 # 200022bc <kTestConfig+0xf4>
20000c96:	f7040493          	addi	s1,s0,-144
20000c9a:	4651                	li	a2,20
20000c9c:	8526                	mv	a0,s1
20000c9e:	3419                	jal	200006a4 <memcpy>
20000ca0:	8526                	mv	a0,s1
20000ca2:	73e000ef          	jal	ra,200013e0 <base_log_internal_core>
20000ca6:	6531                	lui	a0,0xc
20000ca8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000cac:	8a9ff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:112
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; ++i) {
20000cb0:	6f2000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000cb4:	c125                	beqz	a0,20000d14 <test_basic_io+0x578>
20000cb6:	4481                	li	s1,0
20000cb8:	000d2c03          	lw	s8,0(s10)
20000cbc:	5afd                	li	s5,-1
20000cbe:	00001b17          	auipc	s6,0x1
20000cc2:	612b0b13          	addi	s6,s6,1554 # 200022d0 <kTestConfig+0x108>
20000cc6:	f7040913          	addi	s2,s0,-144
20000cca:	6531                	lui	a0,0xc
20000ccc:	aad50a13          	addi	s4,a0,-1363 # baad <_stack_size+0x9aad>
20000cd0:	e000fb97          	auipc	s7,0xe000f
20000cd4:	510b8b93          	addi	s7,s7,1296 # 101e0 <test_basic_io.kLogFields.35>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cd8:	f6c42503          	lw	a0,-148(s0)
20000cdc:	8d65                	and	a0,a0,s1
20000cde:	050a                	slli	a0,a0,0x2
20000ce0:	954e                	add	a0,a0,s3
20000ce2:	4108                	lw	a0,0(a0)
test_basic_io():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:113
    CHECK_EQZ(
20000ce4:	03550363          	beq	a0,s5,20000d0a <test_basic_io+0x56e>
20000ce8:	000c0763          	beqz	s8,20000cf6 <test_basic_io+0x55a>
20000cec:	855e                	mv	a0,s7
20000cee:	4581                	li	a1,0
20000cf0:	79a000ef          	jal	ra,2000148a <base_log_internal_dv>
20000cf4:	a801                	j	20000d04 <test_basic_io+0x568>
20000cf6:	4651                	li	a2,20
20000cf8:	854a                	mv	a0,s2
20000cfa:	85da                	mv	a1,s6
20000cfc:	3265                	jal	200006a4 <memcpy>
20000cfe:	854a                	mv	a0,s2
20000d00:	6e0000ef          	jal	ra,200013e0 <base_log_internal_core>
20000d04:	8552                	mv	a0,s4
20000d06:	84fff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:112
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; ++i) {
20000d0a:	0485                	addi	s1,s1,1
20000d0c:	696000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000d10:	fca4e4e3          	bltu	s1,a0,20000cd8 <test_basic_io+0x53c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:117
  CHECK_EQZ(flash_write(flash_bank_0_last_page_addr, kDataPartition, input_page,
20000d14:	68e000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000d18:	86aa                	mv	a3,a0
20000d1a:	854e                	mv	a0,s3
20000d1c:	4581                	li	a1,0
20000d1e:	866e                	mv	a2,s11
20000d20:	2321                	jal	20001228 <flash_write>
20000d22:	cd0d                	beqz	a0,20000d5c <test_basic_io+0x5c0>
20000d24:	000d2503          	lw	a0,0(s10)
20000d28:	c909                	beqz	a0,20000d3a <test_basic_io+0x59e>
20000d2a:	e000f517          	auipc	a0,0xe000f
20000d2e:	4ca50513          	addi	a0,a0,1226 # 101f4 <test_basic_io.kLogFields.38>
20000d32:	4581                	li	a1,0
20000d34:	756000ef          	jal	ra,2000148a <base_log_internal_dv>
20000d38:	a829                	j	20000d52 <test_basic_io+0x5b6>
20000d3a:	00001597          	auipc	a1,0x1
20000d3e:	5aa58593          	addi	a1,a1,1450 # 200022e4 <kTestConfig+0x11c>
20000d42:	f7040493          	addi	s1,s0,-144
20000d46:	4651                	li	a2,20
20000d48:	8526                	mv	a0,s1
20000d4a:	3aa9                	jal	200006a4 <memcpy>
20000d4c:	8526                	mv	a0,s1
20000d4e:	692000ef          	jal	ra,200013e0 <base_log_internal_core>
20000d52:	6531                	lui	a0,0xc
20000d54:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000d58:	ffcff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:119
  CHECK_EQZ(flash_read(flash_bank_0_last_page_addr, kDataPartition,
20000d5c:	646000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000d60:	862a                	mv	a2,a0
20000d62:	854e                	mv	a0,s3
20000d64:	4581                	li	a1,0
20000d66:	86e6                	mv	a3,s9
20000d68:	542000ef          	jal	ra,200012aa <flash_read>
20000d6c:	cd15                	beqz	a0,20000da8 <test_basic_io+0x60c>
20000d6e:	000d2503          	lw	a0,0(s10)
20000d72:	c909                	beqz	a0,20000d84 <test_basic_io+0x5e8>
20000d74:	e000f517          	auipc	a0,0xe000f
20000d78:	49450513          	addi	a0,a0,1172 # 10208 <test_basic_io.kLogFields.41>
20000d7c:	4581                	li	a1,0
20000d7e:	70c000ef          	jal	ra,2000148a <base_log_internal_dv>
20000d82:	a831                	j	20000d9e <test_basic_io+0x602>
20000d84:	00001597          	auipc	a1,0x1
20000d88:	57458593          	addi	a1,a1,1396 # 200022f8 <kTestConfig+0x130>
20000d8c:	f7040493          	addi	s1,s0,-144
20000d90:	4651                	li	a2,20
20000d92:	8526                	mv	a0,s1
20000d94:	911ff0ef          	jal	ra,200006a4 <memcpy>
20000d98:	8526                	mv	a0,s1
20000d9a:	646000ef          	jal	ra,200013e0 <base_log_internal_core>
20000d9e:	6531                	lui	a0,0xc
20000da0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000da4:	fb0ff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:122
  CHECK_ARRAYS_EQ(output_page, input_page, FLASH_WORDS_PER_PAGE);
20000da8:	5fa000ef          	jal	ra,200013a2 <flash_get_words_per_page>
20000dac:	cd29                	beqz	a0,20000e06 <test_basic_io+0x66a>
20000dae:	84aa                	mv	s1,a0
20000db0:	000d2c03          	lw	s8,0(s10)
20000db4:	00001997          	auipc	s3,0x1
20000db8:	55898993          	addi	s3,s3,1368 # 2000230c <kTestConfig+0x144>
20000dbc:	f7040913          	addi	s2,s0,-144
20000dc0:	6531                	lui	a0,0xc
20000dc2:	aad50b13          	addi	s6,a0,-1363 # baad <_stack_size+0x9aad>
20000dc6:	e000fb97          	auipc	s7,0xe000f
20000dca:	456b8b93          	addi	s7,s7,1110 # 1021c <test_basic_io.kLogFields.44>
20000dce:	000ca503          	lw	a0,0(s9)
20000dd2:	000da583          	lw	a1,0(s11)
20000dd6:	02b50463          	beq	a0,a1,20000dfe <test_basic_io+0x662>
20000dda:	000c0763          	beqz	s8,20000de8 <test_basic_io+0x64c>
20000dde:	855e                	mv	a0,s7
20000de0:	4581                	li	a1,0
20000de2:	6a8000ef          	jal	ra,2000148a <base_log_internal_dv>
20000de6:	a809                	j	20000df8 <test_basic_io+0x65c>
20000de8:	4651                	li	a2,20
20000dea:	854a                	mv	a0,s2
20000dec:	85ce                	mv	a1,s3
20000dee:	8b7ff0ef          	jal	ra,200006a4 <memcpy>
20000df2:	854a                	mv	a0,s2
20000df4:	5ec000ef          	jal	ra,200013e0 <base_log_internal_core>
20000df8:	855a                	mv	a0,s6
20000dfa:	f5aff0ef          	jal	ra,20000554 <test_status_set>
20000dfe:	14fd                	addi	s1,s1,-1
20000e00:	0d91                	addi	s11,s11,4
20000e02:	0c91                	addi	s9,s9,4
20000e04:	f4e9                	bnez	s1,20000dce <test_basic_io+0x632>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:123
}
20000e06:	f6442103          	lw	sp,-156(s0)
20000e0a:	f6040113          	addi	sp,s0,-160
20000e0e:	5db6                	lw	s11,108(sp)
20000e10:	5d46                	lw	s10,112(sp)
20000e12:	5cd6                	lw	s9,116(sp)
20000e14:	5c66                	lw	s8,120(sp)
20000e16:	5bf6                	lw	s7,124(sp)
20000e18:	4b0a                	lw	s6,128(sp)
20000e1a:	4a9a                	lw	s5,132(sp)
20000e1c:	4a2a                	lw	s4,136(sp)
20000e1e:	49ba                	lw	s3,140(sp)
20000e20:	494a                	lw	s2,144(sp)
20000e22:	44da                	lw	s1,148(sp)
20000e24:	446a                	lw	s0,152(sp)
20000e26:	40fa                	lw	ra,156(sp)
20000e28:	610d                	addi	sp,sp,160
20000e2a:	8082                	ret

20000e2c <test_memory_protection>:
test_memory_protection():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:125
static void test_memory_protection(void) {
20000e2c:	7119                	addi	sp,sp,-128
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:126
  flash_default_region_access(/*rd_en=*/true, /*prog_en=*/true,
20000e2e:	de86                	sw	ra,124(sp)
20000e30:	dca2                	sw	s0,120(sp)
20000e32:	daa6                	sw	s1,116(sp)
20000e34:	d8ca                	sw	s2,112(sp)
20000e36:	d6ce                	sw	s3,108(sp)
20000e38:	d4d2                	sw	s4,104(sp)
20000e3a:	d2d6                	sw	s5,100(sp)
20000e3c:	d0da                	sw	s6,96(sp)
20000e3e:	cede                	sw	s7,92(sp)
20000e40:	cce2                	sw	s8,88(sp)
20000e42:	cae6                	sw	s9,84(sp)
20000e44:	c8ea                	sw	s10,80(sp)
20000e46:	c6ee                	sw	s11,76(sp)
20000e48:	0100                	addi	s0,sp,128
20000e4a:	4505                	li	a0,1
20000e4c:	4585                	li	a1,1
20000e4e:	4605                	li	a2,1
20000e50:	4905                	li	s2,1
20000e52:	2165                	jal	200012fa <flash_default_region_access>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:130
  mp_region_t protection_region = {.num = 0x0,
20000e54:	fa042423          	sw	zero,-88(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:131
                                   .base = FLASH_PAGES_PER_BANK,
20000e58:	540000ef          	jal	ra,20001398 <flash_get_pages_per_bank>
20000e5c:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:130
  mp_region_t protection_region = {.num = 0x0,
20000e5e:	faa42623          	sw	a0,-84(s0)
20000e62:	fb242823          	sw	s2,-80(s0)
20000e66:	fa042a23          	sw	zero,-76(s0)
20000e6a:	fb242c23          	sw	s2,-72(s0)
20000e6e:	fb242e23          	sw	s2,-68(s0)
20000e72:	fd242023          	sw	s2,-64(s0)
20000e76:	fc042223          	sw	zero,-60(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:140
      FLASH_MEM_BASE_ADDR + (protection_region.base * FLASH_PAGE_SZ);
20000e7a:	52e000ef          	jal	ra,200013a8 <flash_get_page_size>
20000e7e:	02950533          	mul	a0,a0,s1
20000e82:	200005b7          	lui	a1,0x20000
20000e86:	00b509b3          	add	s3,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:142
      ok_region_start + (protection_region.size * FLASH_PAGE_SZ);
20000e8a:	51e000ef          	jal	ra,200013a8 <flash_get_page_size>
20000e8e:	013504b3          	add	s1,a0,s3
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:148
  CHECK_EQZ(flash_page_erase(ok_region_start, kDataPartition));
20000e92:	854e                	mv	a0,s3
20000e94:	4581                	li	a1,0
20000e96:	268d                	jal	200011f8 <flash_page_erase>
20000e98:	00001917          	auipc	s2,0x1
20000e9c:	31890913          	addi	s2,s2,792 # 200021b0 <kDeviceLogBypassUartAddress>
20000ea0:	cd15                	beqz	a0,20000edc <test_memory_protection+0xb0>
20000ea2:	00092503          	lw	a0,0(s2)
20000ea6:	c909                	beqz	a0,20000eb8 <test_memory_protection+0x8c>
20000ea8:	e000f517          	auipc	a0,0xe000f
20000eac:	38850513          	addi	a0,a0,904 # 10230 <test_memory_protection.kLogFields>
20000eb0:	4581                	li	a1,0
20000eb2:	5d8000ef          	jal	ra,2000148a <base_log_internal_dv>
20000eb6:	a831                	j	20000ed2 <test_memory_protection+0xa6>
20000eb8:	00001597          	auipc	a1,0x1
20000ebc:	46858593          	addi	a1,a1,1128 # 20002320 <kTestConfig+0x158>
20000ec0:	f9040a13          	addi	s4,s0,-112
20000ec4:	4651                	li	a2,20
20000ec6:	8552                	mv	a0,s4
20000ec8:	fdcff0ef          	jal	ra,200006a4 <memcpy>
20000ecc:	8552                	mv	a0,s4
20000ece:	512000ef          	jal	ra,200013e0 <base_log_internal_core>
20000ed2:	6531                	lui	a0,0xc
20000ed4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ed8:	e7cff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:149
  CHECK_EQZ(flash_page_erase(bad_region_start, kDataPartition));
20000edc:	8526                	mv	a0,s1
20000ede:	4581                	li	a1,0
20000ee0:	2e21                	jal	200011f8 <flash_page_erase>
20000ee2:	cd0d                	beqz	a0,20000f1c <test_memory_protection+0xf0>
20000ee4:	00092503          	lw	a0,0(s2)
20000ee8:	c909                	beqz	a0,20000efa <test_memory_protection+0xce>
20000eea:	e000f517          	auipc	a0,0xe000f
20000eee:	35a50513          	addi	a0,a0,858 # 10244 <test_memory_protection.kLogFields.47>
20000ef2:	4581                	li	a1,0
20000ef4:	596000ef          	jal	ra,2000148a <base_log_internal_dv>
20000ef8:	a829                	j	20000f12 <test_memory_protection+0xe6>
20000efa:	00001597          	auipc	a1,0x1
20000efe:	43a58593          	addi	a1,a1,1082 # 20002334 <kTestConfig+0x16c>
20000f02:	f9040a13          	addi	s4,s0,-112
20000f06:	4651                	li	a2,20
20000f08:	8552                	mv	a0,s4
20000f0a:	f9aff0ef          	jal	ra,200006a4 <memcpy>
20000f0e:	8552                	mv	a0,s4
20000f10:	29c1                	jal	200013e0 <base_log_internal_core>
20000f12:	6531                	lui	a0,0xc
20000f14:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000f18:	e3cff0ef          	jal	ra,20000554 <test_status_set>
20000f1c:	40000537          	lui	a0,0x40000
20000f20:	fff50d93          	addi	s11,a0,-1 # 3fffffff <_data_init_start+0x1fffd28f>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:152
  flash_default_region_access(/*rd_en=*/false, /*prog_en=*/false,
20000f24:	4501                	li	a0,0
20000f26:	4581                	li	a1,0
20000f28:	4601                	li	a2,0
20000f2a:	2ec1                	jal	200012fa <flash_default_region_access>
20000f2c:	fa840513          	addi	a0,s0,-88
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:154
  flash_cfg_region(&protection_region);
20000f30:	2ef1                	jal	2000130c <flash_cfg_region>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:157
  uintptr_t region_boundary_start = bad_region_start - (FLASH_WORD_SZ * 2);
20000f32:	29bd                	jal	200013b0 <flash_get_word_size>
20000f34:	0506                	slli	a0,a0,0x1
20000f36:	f8942223          	sw	s1,-124(s0)
20000f3a:	40a48ab3          	sub	s5,s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:161
  uint32_t words[(FLASH_WORD_SZ * 2 * 2) / sizeof(uint32_t)];
20000f3e:	298d                	jal	200013b0 <flash_get_word_size>
20000f40:	f8242423          	sw	sp,-120(s0)
20000f44:	01b57a33          	and	s4,a0,s11
20000f48:	002a1593          	slli	a1,s4,0x2
20000f4c:	05bd                	addi	a1,a1,15
20000f4e:	99c1                	andi	a1,a1,-16
20000f50:	40b104b3          	sub	s1,sp,a1
20000f54:	8126                	mv	sp,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:162
  memset(words, 0xa5, ARRAYSIZE(words) * sizeof(uint32_t));
20000f56:	00251613          	slli	a2,a0,0x2
20000f5a:	0a500593          	li	a1,165
20000f5e:	8526                	mv	a0,s1
20000f60:	f5aff0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:163
  for (int i = 0; i < ARRAYSIZE(words); ++i) {
20000f64:	000a0b63          	beqz	s4,20000f7a <test_memory_protection+0x14e>
20000f68:	4501                	li	a0,0
20000f6a:	85a6                	mv	a1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:164
    words[i] += i;
20000f6c:	4190                	lw	a2,0(a1)
20000f6e:	962a                	add	a2,a2,a0
20000f70:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:163
  for (int i = 0; i < ARRAYSIZE(words); ++i) {
20000f72:	0505                	addi	a0,a0,1
20000f74:	0591                	addi	a1,a1,4
20000f76:	feaa1be3          	bne	s4,a0,20000f6c <test_memory_protection+0x140>
20000f7a:	f9342023          	sw	s3,-128(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:168
  CHECK_NEZ(flash_write(region_boundary_start, kDataPartition, words,
20000f7e:	8556                	mv	a0,s5
20000f80:	4581                	li	a1,0
20000f82:	8626                	mv	a2,s1
20000f84:	86d2                	mv	a3,s4
20000f86:	244d                	jal	20001228 <flash_write>
20000f88:	ed0d                	bnez	a0,20000fc2 <test_memory_protection+0x196>
20000f8a:	00092503          	lw	a0,0(s2)
20000f8e:	c909                	beqz	a0,20000fa0 <test_memory_protection+0x174>
20000f90:	e000f517          	auipc	a0,0xe000f
20000f94:	2c850513          	addi	a0,a0,712 # 10258 <test_memory_protection.kLogFields.50>
20000f98:	4581                	li	a1,0
20000f9a:	4f0000ef          	jal	ra,2000148a <base_log_internal_dv>
20000f9e:	a829                	j	20000fb8 <test_memory_protection+0x18c>
20000fa0:	00001597          	auipc	a1,0x1
20000fa4:	3a858593          	addi	a1,a1,936 # 20002348 <kTestConfig+0x180>
20000fa8:	f9040b13          	addi	s6,s0,-112
20000fac:	4651                	li	a2,20
20000fae:	855a                	mv	a0,s6
20000fb0:	ef4ff0ef          	jal	ra,200006a4 <memcpy>
20000fb4:	855a                	mv	a0,s6
20000fb6:	212d                	jal	200013e0 <base_log_internal_core>
20000fb8:	6531                	lui	a0,0xc
20000fba:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000fbe:	d96ff0ef          	jal	ra,20000554 <test_status_set>
20000fc2:	f9242623          	sw	s2,-116(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:172
  for (int i = 0; i < ARRAYSIZE(words); ++i) {
20000fc6:	060a0363          	beqz	s4,2000102c <test_memory_protection+0x200>
20000fca:	4d01                	li	s10,0
20000fcc:	001a5913          	srli	s2,s4,0x1
20000fd0:	f8c42503          	lw	a0,-116(s0)
20000fd4:	00052b83          	lw	s7,0(a0)
20000fd8:	00001b17          	auipc	s6,0x1
20000fdc:	384b0b13          	addi	s6,s6,900 # 2000235c <kTestConfig+0x194>
20000fe0:	6531                	lui	a0,0xc
20000fe2:	aad50c13          	addi	s8,a0,-1363 # baad <_stack_size+0x9aad>
20000fe6:	e000fc97          	auipc	s9,0xe000f
20000fea:	286c8c93          	addi	s9,s9,646 # 1026c <test_memory_protection.kLogFields.53>
20000fee:	557d                	li	a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:174
    if (i < ARRAYSIZE(words) / 2) {
20000ff0:	012d7363          	bgeu	s10,s2,20000ff6 <test_memory_protection+0x1ca>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:175
      expected = words[i];
20000ff4:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ff6:	000aa583          	lw	a1,0(s5)
test_memory_protection():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:177
    CHECK(mmio_region_read32(region_boundary, i * sizeof(uint32_t)) ==
20000ffa:	02a58463          	beq	a1,a0,20001022 <test_memory_protection+0x1f6>
20000ffe:	000b8663          	beqz	s7,2000100a <test_memory_protection+0x1de>
20001002:	8566                	mv	a0,s9
20001004:	4581                	li	a1,0
20001006:	2151                	jal	2000148a <base_log_internal_dv>
20001008:	a811                	j	2000101c <test_memory_protection+0x1f0>
2000100a:	4651                	li	a2,20
2000100c:	f9040993          	addi	s3,s0,-112
20001010:	854e                	mv	a0,s3
20001012:	85da                	mv	a1,s6
20001014:	e90ff0ef          	jal	ra,200006a4 <memcpy>
20001018:	854e                	mv	a0,s3
2000101a:	26d9                	jal	200013e0 <base_log_internal_core>
2000101c:	8562                	mv	a0,s8
2000101e:	d36ff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:172
  for (int i = 0; i < ARRAYSIZE(words); ++i) {
20001022:	0d05                	addi	s10,s10,1
20001024:	0a91                	addi	s5,s5,4
20001026:	0491                	addi	s1,s1,4
20001028:	fdaa13e3          	bne	s4,s10,20000fee <test_memory_protection+0x1c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:182
  CHECK_NEZ(flash_page_erase(bad_region_start, kDataPartition));
2000102c:	f8442503          	lw	a0,-124(s0)
20001030:	4581                	li	a1,0
20001032:	22d9                	jal	200011f8 <flash_page_erase>
20001034:	f8c42903          	lw	s2,-116(s0)
20001038:	f8042983          	lw	s3,-128(s0)
2000103c:	ed05                	bnez	a0,20001074 <test_memory_protection+0x248>
2000103e:	00092503          	lw	a0,0(s2)
20001042:	c901                	beqz	a0,20001052 <test_memory_protection+0x226>
20001044:	e000f517          	auipc	a0,0xe000f
20001048:	23c50513          	addi	a0,a0,572 # 10280 <test_memory_protection.kLogFields.56>
2000104c:	4581                	li	a1,0
2000104e:	2935                	jal	2000148a <base_log_internal_dv>
20001050:	a829                	j	2000106a <test_memory_protection+0x23e>
20001052:	00001597          	auipc	a1,0x1
20001056:	31e58593          	addi	a1,a1,798 # 20002370 <kTestConfig+0x1a8>
2000105a:	f9040493          	addi	s1,s0,-112
2000105e:	4651                	li	a2,20
20001060:	8526                	mv	a0,s1
20001062:	e42ff0ef          	jal	ra,200006a4 <memcpy>
20001066:	8526                	mv	a0,s1
20001068:	2ea5                	jal	200013e0 <base_log_internal_core>
2000106a:	6531                	lui	a0,0xc
2000106c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001070:	ce4ff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:185
  CHECK_EQZ(flash_page_erase(ok_region_start, kDataPartition));
20001074:	854e                	mv	a0,s3
20001076:	4581                	li	a1,0
20001078:	2241                	jal	200011f8 <flash_page_erase>
2000107a:	cd05                	beqz	a0,200010b2 <test_memory_protection+0x286>
2000107c:	00092503          	lw	a0,0(s2)
20001080:	c901                	beqz	a0,20001090 <test_memory_protection+0x264>
20001082:	e000f517          	auipc	a0,0xe000f
20001086:	21250513          	addi	a0,a0,530 # 10294 <test_memory_protection.kLogFields.59>
2000108a:	4581                	li	a1,0
2000108c:	2efd                	jal	2000148a <base_log_internal_dv>
2000108e:	a829                	j	200010a8 <test_memory_protection+0x27c>
20001090:	00001597          	auipc	a1,0x1
20001094:	2f458593          	addi	a1,a1,756 # 20002384 <kTestConfig+0x1bc>
20001098:	f9040493          	addi	s1,s0,-112
2000109c:	4651                	li	a2,20
2000109e:	8526                	mv	a0,s1
200010a0:	e04ff0ef          	jal	ra,200006a4 <memcpy>
200010a4:	8526                	mv	a0,s1
200010a6:	2e2d                	jal	200013e0 <base_log_internal_core>
200010a8:	6531                	lui	a0,0xc
200010aa:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200010ae:	ca6ff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:186
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; i++) {
200010b2:	2cc5                	jal	200013a2 <flash_get_words_per_page>
200010b4:	cd29                	beqz	a0,2000110e <test_memory_protection+0x2e2>
200010b6:	4481                	li	s1,0
200010b8:	00092b83          	lw	s7,0(s2)
200010bc:	5c7d                	li	s8,-1
200010be:	00001a17          	auipc	s4,0x1
200010c2:	2daa0a13          	addi	s4,s4,730 # 20002398 <kTestConfig+0x1d0>
200010c6:	f9040913          	addi	s2,s0,-112
200010ca:	6531                	lui	a0,0xc
200010cc:	aad50b13          	addi	s6,a0,-1363 # baad <_stack_size+0x9aad>
200010d0:	e000fa97          	auipc	s5,0xe000f
200010d4:	1d8a8a93          	addi	s5,s5,472 # 102a8 <test_memory_protection.kLogFields.61>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200010d8:	01b4f533          	and	a0,s1,s11
200010dc:	050a                	slli	a0,a0,0x2
200010de:	954e                	add	a0,a0,s3
200010e0:	4108                	lw	a0,0(a0)
test_memory_protection():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:187
    CHECK_EQZ(~mmio_region_read32(ok_region, i * sizeof(uint32_t)));
200010e2:	03850263          	beq	a0,s8,20001106 <test_memory_protection+0x2da>
200010e6:	000b8663          	beqz	s7,200010f2 <test_memory_protection+0x2c6>
200010ea:	8556                	mv	a0,s5
200010ec:	4581                	li	a1,0
200010ee:	2e71                	jal	2000148a <base_log_internal_dv>
200010f0:	a801                	j	20001100 <test_memory_protection+0x2d4>
200010f2:	4651                	li	a2,20
200010f4:	854a                	mv	a0,s2
200010f6:	85d2                	mv	a1,s4
200010f8:	dacff0ef          	jal	ra,200006a4 <memcpy>
200010fc:	854a                	mv	a0,s2
200010fe:	24cd                	jal	200013e0 <base_log_internal_core>
20001100:	855a                	mv	a0,s6
20001102:	c52ff0ef          	jal	ra,20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:186
  for (int i = 0; i < FLASH_WORDS_PER_PAGE; i++) {
20001106:	0485                	addi	s1,s1,1
20001108:	2c69                	jal	200013a2 <flash_get_words_per_page>
2000110a:	fca4e7e3          	bltu	s1,a0,200010d8 <test_memory_protection+0x2ac>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/flash_ctrl_test.c:189
}
2000110e:	f8842103          	lw	sp,-120(s0)
20001112:	f8040113          	addi	sp,s0,-128
20001116:	4db6                	lw	s11,76(sp)
20001118:	4d46                	lw	s10,80(sp)
2000111a:	4cd6                	lw	s9,84(sp)
2000111c:	4c66                	lw	s8,88(sp)
2000111e:	4bf6                	lw	s7,92(sp)
20001120:	5b06                	lw	s6,96(sp)
20001122:	5a96                	lw	s5,100(sp)
20001124:	5a26                	lw	s4,104(sp)
20001126:	59b6                	lw	s3,108(sp)
20001128:	5946                	lw	s2,112(sp)
2000112a:	54d6                	lw	s1,116(sp)
2000112c:	5466                	lw	s0,120(sp)
2000112e:	50f6                	lw	ra,124(sp)
20001130:	6109                	addi	sp,sp,128
20001132:	8082                	ret

20001134 <flash_init_block>:
flash_init_block():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:38
          (1 << FLASH_CTRL_OP_STATUS_DONE_BIT)) == 0) {
  }
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
}

void flash_init_block(void) {
20001134:	41000537          	lui	a0,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:39
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_STATUS_REG_OFFSET) &
20001138:	14852583          	lw	a1,328(a0) # 41000148 <_data_init_start+0x20ffd3d8>
2000113c:	89c1                	andi	a1,a1,16
2000113e:	fded                	bnez	a1,20001138 <flash_init_block+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:42
          (1 << FLASH_CTRL_STATUS_INIT_WIP_BIT)) > 0) {
  }
}
20001140:	8082                	ret

20001142 <flash_check_empty>:
flash_check_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:52
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
  return err_status;
}

int flash_check_empty(void) {
20001142:	20000537          	lui	a0,0x20000
20001146:	40000893          	li	a7,1024
2000114a:	587d                	li	a6,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:57
  uint32_t mask = -1u;
  uint32_t *p = (uint32_t *)FLASH_MEM_BASE_ADDR;
  // TODO: Update range to cover entire flash. Limited now to one bank while
  // we debu initialization.
  for (; p < (uint32_t *)(FLASH_MEM_BASE_ADDR + flash_get_bank_size());) {
2000114c:	01355693          	srli	a3,a0,0x13
20001150:	02d8e763          	bltu	a7,a3,2000117e <flash_check_empty+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:58
    mask &= *p++;
20001154:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:59
    mask &= *p++;
20001156:	4158                	lw	a4,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:60
    mask &= *p++;
20001158:	451c                	lw	a5,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:61
    mask &= *p++;
2000115a:	4550                	lw	a2,12(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:59
    mask &= *p++;
2000115c:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:60
    mask &= *p++;
2000115e:	8efd                	and	a3,a3,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:61
    mask &= *p++;
20001160:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:62
    mask &= *p++;
20001162:	4914                	lw	a3,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:63
    mask &= *p++;
20001164:	4958                	lw	a4,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:64
    mask &= *p++;
20001166:	4d1c                	lw	a5,24(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:65
    mask &= *p++;
20001168:	4d4c                	lw	a1,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:62
    mask &= *p++;
2000116a:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:63
    mask &= *p++;
2000116c:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:64
    mask &= *p++;
2000116e:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:65
    mask &= *p++;
20001170:	8df1                	and	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:66
    if (mask != -1u) {
20001172:	02050513          	addi	a0,a0,32 # 20000020 <_start+0x1c>
20001176:	fd058be3          	beq	a1,a6,2000114c <flash_check_empty+0xa>
2000117a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:71
      return 0;
    }
  }
  return 1;
}
2000117c:	8082                	ret
2000117e:	4505                	li	a0,1
20001180:	8082                	ret

20001182 <flash_get_bank_size>:
flash_get_bank_size():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:237

uint32_t flash_get_words_per_page(void) {
  return FLASH_CTRL_PARAM_WORDS_PER_PAGE;
}

uint32_t flash_get_bank_size(void) { return FLASH_CTRL_PARAM_BYTES_PER_BANK; }
20001182:	00080537          	lui	a0,0x80
20001186:	8082                	ret

20001188 <flash_bank_erase>:
flash_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:73
int flash_bank_erase(bank_index_t idx) {
20001188:	41000637          	lui	a2,0x41000
2000118c:	14062683          	lw	a3,320(a2) # 41000140 <_data_init_start+0x20ffd3d0>
20001190:	4585                	li	a1,1
20001192:	00a595b3          	sll	a1,a1,a0
flash_cfg_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:174
      (erase_en) ? SETBIT(REG32(FLASH_CTRL0_BASE_ADDR +
20001196:	8ecd                	or	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:173
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_BANK_CFG_REG_OFFSET) =
20001198:	14d62023          	sw	a3,320(a2)
2000119c:	200006b7          	lui	a3,0x20000
flash_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:78
      (idx == FLASH_BANK_0) ? FLASH_MEM_BASE_ADDR
200011a0:	c119                	beqz	a0,200011a6 <flash_bank_erase+0x1e>
200011a2:	200806b7          	lui	a3,0x20080
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:77
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) =
200011a6:	ce54                	sw	a3,28(a2)
200011a8:	0a100513          	li	a0,161
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:80
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
200011ac:	ce08                	sw	a0,24(a2)
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
200011ae:	14462503          	lw	a0,324(a2)
200011b2:	8905                	andi	a0,a0,1
200011b4:	dd6d                	beqz	a0,200011ae <flash_bank_erase+0x26>
200011b6:	41000637          	lui	a2,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
200011ba:	14062223          	sw	zero,324(a2) # 41000144 <_data_init_start+0x20ffd3d4>
200011be:	14062503          	lw	a0,320(a2)
flash_cfg_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:174
      (erase_en) ? SETBIT(REG32(FLASH_CTRL0_BASE_ADDR +
200011c2:	fff5c593          	not	a1,a1
200011c6:	8d6d                	and	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:173
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_BANK_CFG_REG_OFFSET) =
200011c8:	14a62023          	sw	a0,320(a2)
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
200011cc:	15062503          	lw	a0,336(a2)
200011d0:	55fd                	li	a1,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
200011d2:	14b62823          	sw	a1,336(a2)
flash_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:88
  return get_clr_err();
200011d6:	8082                	ret

200011d8 <flash_cfg_bank_erase>:
flash_cfg_bank_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:172
void flash_cfg_bank_erase(bank_index_t bank, bool erase_en) {
200011d8:	41000637          	lui	a2,0x41000
200011dc:	14062683          	lw	a3,320(a2) # 41000140 <_data_init_start+0x20ffd3d0>
200011e0:	4705                	li	a4,1
200011e2:	00a71533          	sll	a0,a4,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:174
      (erase_en) ? SETBIT(REG32(FLASH_CTRL0_BASE_ADDR +
200011e6:	e589                	bnez	a1,200011f0 <flash_cfg_bank_erase+0x18>
200011e8:	fff54513          	not	a0,a0
200011ec:	8d75                	and	a0,a0,a3
200011ee:	a011                	j	200011f2 <flash_cfg_bank_erase+0x1a>
200011f0:	8d55                	or	a0,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:173
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_BANK_CFG_REG_OFFSET) =
200011f2:	14a62023          	sw	a0,320(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:180
}
200011f6:	8082                	ret

200011f8 <flash_page_erase>:
flash_page_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:91
int flash_page_erase(uint32_t addr, part_type_t part) {
200011f8:	41000637          	lui	a2,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:92
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) = addr;
200011fc:	ce48                	sw	a0,28(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:96
      part << FLASH_CTRL_CONTROL_PARTITION_SEL_BIT |
200011fe:	00859513          	slli	a0,a1,0x8
20001202:	02156513          	ori	a0,a0,33
20001206:	01860593          	addi	a1,a2,24 # 41000018 <_data_init_start+0x20ffd2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:93
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
2000120a:	c188                	sw	a0,0(a1)
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
2000120c:	14462503          	lw	a0,324(a2)
20001210:	8905                	andi	a0,a0,1
20001212:	dd6d                	beqz	a0,2000120c <flash_page_erase+0x14>
20001214:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
20001218:	1405a223          	sw	zero,324(a1) # 41000144 <_data_init_start+0x20ffd3d4>
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
2000121c:	1505a503          	lw	a0,336(a1)
20001220:	567d                	li	a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
20001222:	14c5a823          	sw	a2,336(a1)
flash_page_erase():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:99
  return get_clr_err();
20001226:	8082                	ret

20001228 <flash_write>:
flash_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:121
                uint32_t size) {
20001228:	4301                	li	t1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:134
  while (words_remaining > 0) {
2000122a:	ceb5                	beqz	a3,200012a6 <flash_write+0x7e>
2000122c:	4381                	li	t2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:122
  uint32_t window_offset = (addr / sizeof(uint32_t)) % PROGRAM_RESOLUTION_WORDS;
2000122e:	00255713          	srli	a4,a0,0x2
20001232:	8b3d                	andi	a4,a4,15
20001234:	47c1                	li	a5,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:127
  max_words = PROGRAM_RESOLUTION_WORDS - window_offset;
20001236:	8f99                	sub	a5,a5,a4
20001238:	00859813          	slli	a6,a1,0x8
2000123c:	41000eb7          	lui	t4,0x41000
20001240:	78c1                	lui	a7,0xffff0
20001242:	52fd                	li	t0,-1
20001244:	8e36                	mv	t3,a3
20001246:	00fe6363          	bltu	t3,a5,2000124c <flash_write+0x24>
2000124a:	8e3e                	mv	t3,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:141
    err |= flash_write_internal(addr + current_word * sizeof(uint32_t), part,
2000124c:	00239713          	slli	a4,t2,0x2
20001250:	972a                	add	a4,a4,a0
flash_write_internal():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:106
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) = addr;
20001252:	00eeae23          	sw	a4,28(t4) # 4100001c <_data_init_start+0x20ffd2ac>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:110
       (size - 1) << FLASH_CTRL_CONTROL_NUM_OFFSET |
20001256:	010e1713          	slli	a4,t3,0x10
2000125a:	9746                	add	a4,a4,a7
2000125c:	00e86733          	or	a4,a6,a4
20001260:	01176713          	ori	a4,a4,17
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:107
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
20001264:	00eeac23          	sw	a4,24(t4)
20001268:	87b2                	mv	a5,a2
2000126a:	8772                	mv	a4,t3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:112
  for (int i = 0; i < size; ++i) {
2000126c:	000e0863          	beqz	t3,2000127c <flash_write+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:113
    REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_PROG_FIFO_REG_OFFSET) = data[i];
20001270:	438c                	lw	a1,0(a5)
20001272:	18bea623          	sw	a1,396(t4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:112
  for (int i = 0; i < size; ++i) {
20001276:	177d                	addi	a4,a4,-1
20001278:	0791                	addi	a5,a5,4
2000127a:	fb7d                	bnez	a4,20001270 <flash_write+0x48>
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
2000127c:	144ea703          	lw	a4,324(t4)
20001280:	8b05                	andi	a4,a4,1
20001282:	df6d                	beqz	a4,2000127c <flash_write+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
20001284:	140ea223          	sw	zero,324(t4)
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
20001288:	150ea583          	lw	a1,336(t4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
2000128c:	145ea823          	sw	t0,336(t4)
flash_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:141
    err |= flash_write_internal(addr + current_word * sizeof(uint32_t), part,
20001290:	0065e333          	or	t1,a1,t1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:143
    current_word += words_to_program;
20001294:	93f2                	add	t2,t2,t3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:144
    data += words_to_program;
20001296:	002e1593          	slli	a1,t3,0x2
2000129a:	962e                	add	a2,a2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:148
    words_remaining = size - current_word;
2000129c:	40768e33          	sub	t3,a3,t2
200012a0:	47c1                	li	a5,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:134
  while (words_remaining > 0) {
200012a2:	fa0e12e3          	bnez	t3,20001246 <flash_write+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:150
  return err;
200012a6:	851a                	mv	a0,t1
200012a8:	8082                	ret

200012aa <flash_read>:
flash_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:153
int flash_read(uint32_t addr, part_type_t part, uint32_t size, uint32_t *data) {
200012aa:	41000737          	lui	a4,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:154
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ADDR_REG_OFFSET) = addr;
200012ae:	cf48                	sw	a0,28(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:157
      part << FLASH_CTRL_CONTROL_PARTITION_SEL_BIT |
200012b0:	00859513          	slli	a0,a1,0x8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:158
      (size - 1) << FLASH_CTRL_CONTROL_NUM_OFFSET |
200012b4:	01061593          	slli	a1,a2,0x10
200012b8:	77c1                	lui	a5,0xffff0
200012ba:	95be                	add	a1,a1,a5
200012bc:	8d4d                	or	a0,a0,a1
200012be:	00156513          	ori	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:155
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_CONTROL_REG_OFFSET) =
200012c2:	cf08                	sw	a0,24(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:160
  for (uint32_t i = 0; i < size;) {
200012c4:	ce09                	beqz	a2,200012de <flash_read+0x34>
200012c6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:161
    if (((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_STATUS_REG_OFFSET) >>
200012c8:	14872583          	lw	a1,328(a4) # 41000148 <_data_init_start+0x20ffd3d8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:163
         0x1) == 0) {
200012cc:	8989                	andi	a1,a1,2
200012ce:	e591                	bnez	a1,200012da <flash_read+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:164
      *data++ = REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_RD_FIFO_REG_OFFSET);
200012d0:	19072583          	lw	a1,400(a4)
200012d4:	c28c                	sw	a1,0(a3)
200012d6:	0691                	addi	a3,a3,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:165
      i++;
200012d8:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:160
  for (uint32_t i = 0; i < size;) {
200012da:	fec567e3          	bltu	a0,a2,200012c8 <flash_read+0x1e>
wait_done_and_ack():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:32
  while ((REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) &
200012de:	14472503          	lw	a0,324(a4)
200012e2:	8905                	andi	a0,a0,1
200012e4:	dd6d                	beqz	a0,200012de <flash_read+0x34>
200012e6:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:35
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_OP_STATUS_REG_OFFSET) = 0;
200012ea:	1405a223          	sw	zero,324(a1) # 41000144 <_data_init_start+0x20ffd3d4>
get_clr_err():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:47
      REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET);
200012ee:	1505a503          	lw	a0,336(a1)
200012f2:	567d                	li	a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:48
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_ERR_CODE_REG_OFFSET) = -1u;
200012f4:	14c5a823          	sw	a2,336(a1)
flash_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:169
  return get_clr_err();
200012f8:	8082                	ret

200012fa <flash_default_region_access>:
flash_default_region_access():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:185
      prog_en << FLASH_CTRL_DEFAULT_REGION_PROG_EN_BIT |
200012fa:	0586                	slli	a1,a1,0x1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:184
      rd_en << FLASH_CTRL_DEFAULT_REGION_RD_EN_BIT |
200012fc:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:186
      erase_en << FLASH_CTRL_DEFAULT_REGION_ERASE_EN_BIT;
200012fe:	00261593          	slli	a1,a2,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:185
      prog_en << FLASH_CTRL_DEFAULT_REGION_PROG_EN_BIT |
20001302:	8d4d                	or	a0,a0,a1
20001304:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:183
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_DEFAULT_REGION_REG_OFFSET) =
20001308:	d5a8                	sw	a0,104(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:187
}
2000130a:	8082                	ret

2000130c <flash_cfg_region>:
flash_cfg_region():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:193
  if (region_cfg->part == kDataPartition) {
2000130c:	454c                	lw	a1,12(a0)
2000130e:	4605                	li	a2,1
20001310:	04c58263          	beq	a1,a2,20001354 <flash_cfg_region+0x48>
20001314:	e1c9                	bnez	a1,20001396 <flash_cfg_region+0x8a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:196
        region_cfg->base << FLASH_CTRL_MP_REGION_CFG_0_BASE_0_OFFSET |
20001316:	414c                	lw	a1,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:197
        region_cfg->size << FLASH_CTRL_MP_REGION_CFG_0_SIZE_0_OFFSET |
20001318:	4510                	lw	a2,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:196
        region_cfg->base << FLASH_CTRL_MP_REGION_CFG_0_BASE_0_OFFSET |
2000131a:	00859813          	slli	a6,a1,0x8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:197
        region_cfg->size << FLASH_CTRL_MP_REGION_CFG_0_SIZE_0_OFFSET |
2000131e:	0646                	slli	a2,a2,0x11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:198
        region_cfg->rd_en << FLASH_CTRL_MP_REGION_CFG_0_RD_EN_0_BIT |
20001320:	4914                	lw	a3,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:199
        region_cfg->prog_en << FLASH_CTRL_MP_REGION_CFG_0_PROG_EN_0_BIT |
20001322:	4958                	lw	a4,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:200
        region_cfg->erase_en << FLASH_CTRL_MP_REGION_CFG_0_ERASE_EN_0_BIT |
20001324:	4d1c                	lw	a5,24(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:201
        region_cfg->scramble_en
20001326:	4d4c                	lw	a1,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:198
        region_cfg->rd_en << FLASH_CTRL_MP_REGION_CFG_0_RD_EN_0_BIT |
20001328:	0686                	slli	a3,a3,0x1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:199
        region_cfg->prog_en << FLASH_CTRL_MP_REGION_CFG_0_PROG_EN_0_BIT |
2000132a:	070a                	slli	a4,a4,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:200
        region_cfg->erase_en << FLASH_CTRL_MP_REGION_CFG_0_ERASE_EN_0_BIT |
2000132c:	078e                	slli	a5,a5,0x3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:202
            << FLASH_CTRL_MP_REGION_CFG_0_SCRAMBLE_EN_0_BIT |
2000132e:	0592                	slli	a1,a1,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:197
        region_cfg->size << FLASH_CTRL_MP_REGION_CFG_0_SIZE_0_OFFSET |
20001330:	00c86633          	or	a2,a6,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:198
        region_cfg->rd_en << FLASH_CTRL_MP_REGION_CFG_0_RD_EN_0_BIT |
20001334:	8e55                	or	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:199
        region_cfg->prog_en << FLASH_CTRL_MP_REGION_CFG_0_PROG_EN_0_BIT |
20001336:	8e59                	or	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:194
    REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_REGION_CFG_0_REG_OFFSET +
20001338:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:200
        region_cfg->erase_en << FLASH_CTRL_MP_REGION_CFG_0_ERASE_EN_0_BIT |
2000133a:	00f66533          	or	a0,a2,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:202
            << FLASH_CTRL_MP_REGION_CFG_0_SCRAMBLE_EN_0_BIT |
2000133e:	8d4d                	or	a0,a0,a1
20001340:	00156513          	ori	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:194
    REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_MP_REGION_CFG_0_REG_OFFSET +
20001344:	00269593          	slli	a1,a3,0x2
20001348:	41000637          	lui	a2,0x41000
2000134c:	04860613          	addi	a2,a2,72 # 41000048 <_data_init_start+0x20ffd2d8>
20001350:	95b2                	add	a1,a1,a2
20001352:	a089                	j	20001394 <flash_cfg_region+0x88>
20001354:	410005b7          	lui	a1,0x41000
20001358:	04858593          	addi	a1,a1,72 # 41000048 <_data_init_start+0x20ffd2d8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:206
        region_cfg->rd_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_RD_EN_0_BIT |
2000135c:	4910                	lw	a2,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:207
        region_cfg->prog_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_PROG_EN_0_BIT |
2000135e:	4954                	lw	a3,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:208
        region_cfg->erase_en
20001360:	4d18                	lw	a4,24(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:210
        region_cfg->scramble_en
20001362:	4d5c                	lw	a5,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:206
        region_cfg->rd_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_RD_EN_0_BIT |
20001364:	0606                	slli	a2,a2,0x1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:207
        region_cfg->prog_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_PROG_EN_0_BIT |
20001366:	068a                	slli	a3,a3,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:209
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_ERASE_EN_0_BIT |
20001368:	070e                	slli	a4,a4,0x3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:211
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_SCRAMBLE_EN_0_BIT |
2000136a:	0792                	slli	a5,a5,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:207
        region_cfg->prog_en << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_PROG_EN_0_BIT |
2000136c:	8e55                	or	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:209
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_ERASE_EN_0_BIT |
2000136e:	8e59                	or	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:214
    bank_sel = region_cfg->base / flash_get_pages_per_bank();
20001370:	4154                	lw	a3,4(a0)
20001372:	4118                	lw	a4,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:211
            << FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_SCRAMBLE_EN_0_BIT |
20001374:	00f66533          	or	a0,a2,a5
20001378:	00156513          	ori	a0,a0,1
2000137c:	0ff00793          	li	a5,255
20001380:	00271613          	slli	a2,a4,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:220
      REG32(FLASH_CTRL0_BASE_ADDR +
20001384:	95b2                	add	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:215
    if (bank_sel == FLASH_BANK_0) {
20001386:	00d7e563          	bltu	a5,a3,20001390 <flash_cfg_region+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:216
      REG32(FLASH_CTRL0_BASE_ADDR +
2000138a:	04c58593          	addi	a1,a1,76
2000138e:	a019                	j	20001394 <flash_cfg_region+0x88>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:220
      REG32(FLASH_CTRL0_BASE_ADDR +
20001390:	0b458593          	addi	a1,a1,180
20001394:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:225
}
20001396:	8082                	ret

20001398 <flash_get_pages_per_bank>:
flash_get_pages_per_bank():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:230
  return FLASH_CTRL_PARAM_REG_PAGES_PER_BANK;
20001398:	10000513          	li	a0,256
2000139c:	8082                	ret

2000139e <flash_get_banks>:
flash_get_banks():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:227
uint32_t flash_get_banks(void) { return FLASH_CTRL_PARAM_REG_NUM_BANKS; }
2000139e:	4509                	li	a0,2
200013a0:	8082                	ret

200013a2 <flash_get_words_per_page>:
flash_get_words_per_page():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:234
  return FLASH_CTRL_PARAM_WORDS_PER_PAGE;
200013a2:	10000513          	li	a0,256
200013a6:	8082                	ret

200013a8 <flash_get_page_size>:
flash_get_page_size():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:239

uint32_t flash_get_page_size(void) { return FLASH_CTRL_PARAM_BYTES_PER_PAGE; }
200013a8:	6505                	lui	a0,0x1
200013aa:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
200013ae:	8082                	ret

200013b0 <flash_get_word_size>:
flash_get_word_size():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:241

uint32_t flash_get_word_size(void) { return FLASH_CTRL_PARAM_BYTES_PER_WORD; }
200013b0:	4521                	li	a0,8
200013b2:	8082                	ret

200013b4 <flash_write_scratch_reg>:
flash_write_scratch_reg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:243

void flash_write_scratch_reg(uint32_t value) {
200013b4:	410005b7          	lui	a1,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:244
  REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_SCRATCH_REG_OFFSET) = value;
200013b8:	18a5a023          	sw	a0,384(a1) # 41000180 <_data_init_start+0x20ffd410>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:245
}
200013bc:	8082                	ret

200013be <flash_read_scratch_reg>:
flash_read_scratch_reg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:247

uint32_t flash_read_scratch_reg(void) {
200013be:	41000537          	lui	a0,0x41000
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:248
  return REG32(FLASH_CTRL0_BASE_ADDR + FLASH_CTRL_SCRATCH_REG_OFFSET);
200013c2:	18052503          	lw	a0,384(a0) # 41000180 <_data_init_start+0x20ffd410>
200013c6:	8082                	ret

200013c8 <flash_get_init_status>:
flash_get_init_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:251
}

bool flash_get_init_status(void) {
200013c8:	41000537          	lui	a0,0x41000
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013cc:	14852503          	lw	a0,328(a0) # 41000148 <_data_init_start+0x20ffd3d8>
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200013d0:	8941                	andi	a0,a0,16
200013d2:	8111                	srli	a0,a0,0x4
flash_get_init_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:253
  mmio_region_t flash_base = mmio_region_from_addr(FLASH_CTRL0_BASE_ADDR);
  return mmio_region_get_bit32(flash_base, FLASH_CTRL_STATUS_REG_OFFSET,
200013d4:	8082                	ret

200013d6 <flash_init>:
flash_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:257
                               FLASH_CTRL_STATUS_INIT_WIP_BIT);
}

void flash_init(void) {
200013d6:	41000537          	lui	a0,0x41000
200013da:	4585                	li	a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013dc:	c90c                	sw	a1,16(a0)
flash_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/flash_ctrl.c:260
  mmio_region_t flash_base = mmio_region_from_addr(FLASH_CTRL0_BASE_ADDR);
  mmio_region_write32(flash_base, FLASH_CTRL_INIT_REG_OFFSET, 1);
}
200013de:	8082                	ret

200013e0 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
200013e0:	7139                	addi	sp,sp,-64
200013e2:	ce06                	sw	ra,28(sp)
200013e4:	cc22                	sw	s0,24(sp)
200013e6:	ca26                	sw	s1,20(sp)
200013e8:	c84a                	sw	s2,16(sp)
200013ea:	892a                	mv	s2,a0
200013ec:	de46                	sw	a7,60(sp)
200013ee:	dc42                	sw	a6,56(sp)
200013f0:	da3e                	sw	a5,52(sp)
200013f2:	d83a                	sw	a4,48(sp)
200013f4:	d636                	sw	a3,44(sp)
200013f6:	d432                	sw	a2,40(sp)
200013f8:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
200013fa:	4144                	lw	s1,4(a0)
200013fc:	80000537          	lui	a0,0x80000
20001400:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd28f>
20001404:	8526                	mv	a0,s1
20001406:	4581                	li	a1,0
20001408:	aecff0ef          	jal	ra,200006f4 <memchr>
2000140c:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20001410:	02f00593          	li	a1,47
20001414:	8526                	mv	a0,s1
20001416:	af6ff0ef          	jal	ra,2000070c <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
2000141a:	00092583          	lw	a1,0(s2)
2000141e:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001420:	00b66b63          	bltu	a2,a1,20001436 <base_log_internal_core+0x56>
20001424:	058a                	slli	a1,a1,0x2
20001426:	00001617          	auipc	a2,0x1
2000142a:	f8660613          	addi	a2,a2,-122 # 200023ac <kTestConfig+0x1e4>
2000142e:	95b2                	add	a1,a1,a2
20001430:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20001432:	e519                	bnez	a0,20001440 <base_log_internal_core+0x60>
20001434:	a801                	j	20001444 <base_log_internal_core+0x64>
20001436:	00002597          	auipc	a1,0x2
2000143a:	93058593          	addi	a1,a1,-1744 # 20002d66 <__clz_tab+0x95a>
2000143e:	c119                	beqz	a0,20001444 <base_log_internal_core+0x64>
20001440:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20001444:	effff417          	auipc	s0,0xeffff
20001448:	bc840413          	addi	s0,s0,-1080 # 1000000c <base_log_internal_core.global_log_counter>
2000144c:	00045603          	lhu	a2,0(s0)
20001450:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001454:	00002517          	auipc	a0,0x2
20001458:	8f950513          	addi	a0,a0,-1799 # 20002d4d <__clz_tab+0x941>
2000145c:	86a6                	mv	a3,s1
2000145e:	28d1                	jal	20001532 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001460:	00041503          	lh	a0,0(s0)
20001464:	0505                	addi	a0,a0,1
20001466:	00a41023          	sh	a0,0(s0)
2000146a:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
2000146c:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
2000146e:	01092503          	lw	a0,16(s2)
20001472:	28c5                	jal	20001562 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001474:	00002517          	auipc	a0,0x2
20001478:	8e750513          	addi	a0,a0,-1817 # 20002d5b <__clz_tab+0x94f>
2000147c:	285d                	jal	20001532 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
2000147e:	4942                	lw	s2,16(sp)
20001480:	44d2                	lw	s1,20(sp)
20001482:	4462                	lw	s0,24(sp)
20001484:	40f2                	lw	ra,28(sp)
20001486:	6121                	addi	sp,sp,64
20001488:	8082                	ret

2000148a <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
2000148a:	1101                	addi	sp,sp,-32
2000148c:	ce46                	sw	a7,28(sp)
2000148e:	cc42                	sw	a6,24(sp)
20001490:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20001492:	00001797          	auipc	a5,0x1
20001496:	d1e78793          	addi	a5,a5,-738 # 200021b0 <kDeviceLogBypassUartAddress>
2000149a:	439c                	lw	a5,0(a5)
2000149c:	c83a                	sw	a4,16(sp)
2000149e:	c636                	sw	a3,12(sp)
200014a0:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200014a2:	c388                	sw	a0,0(a5)
200014a4:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
200014a6:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
200014a8:	c989                	beqz	a1,200014ba <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
200014aa:	4512                	lw	a0,4(sp)
200014ac:	00450613          	addi	a2,a0,4
200014b0:	c232                	sw	a2,4(sp)
200014b2:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
200014b4:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200014b6:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
200014b8:	f9ed                	bnez	a1,200014aa <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
200014ba:	6105                	addi	sp,sp,32
200014bc:	8082                	ret
	...

200014c0 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
200014c0:	e589                	bnez	a1,200014ca <base_set_stdout+0xa>
200014c2:	00000597          	auipc	a1,0x0
200014c6:	01658593          	addi	a1,a1,22 # 200014d8 <base_dev_null>
200014ca:	effff617          	auipc	a2,0xeffff
200014ce:	b3660613          	addi	a2,a2,-1226 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
200014d2:	c208                	sw	a0,0(a2)
200014d4:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200014d6:	8082                	ret

200014d8 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
200014d8:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
200014da:	8082                	ret

200014dc <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
200014dc:	effff597          	auipc	a1,0xeffff
200014e0:	b2458593          	addi	a1,a1,-1244 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
200014e4:	c188                	sw	a0,0(a1)
200014e6:	00000517          	auipc	a0,0x0
200014ea:	00c50513          	addi	a0,a0,12 # 200014f2 <base_dev_uart>
200014ee:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
200014f0:	8082                	ret

200014f2 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
200014f2:	1101                	addi	sp,sp,-32
200014f4:	ce06                	sw	ra,28(sp)
200014f6:	cc22                	sw	s0,24(sp)
200014f8:	ca26                	sw	s1,20(sp)
200014fa:	c84a                	sw	s2,16(sp)
200014fc:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200014fe:	c20d                	beqz	a2,20001520 <base_dev_uart+0x2e>
20001500:	8432                	mv	s0,a2
20001502:	892e                	mv	s2,a1
20001504:	89aa                	mv	s3,a0
20001506:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001508:	00990533          	add	a0,s2,s1
2000150c:	00054583          	lbu	a1,0(a0)
20001510:	854e                	mv	a0,s3
20001512:	2f11                	jal	20001c26 <dif_uart_byte_send_polled>
20001514:	e519                	bnez	a0,20001522 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001516:	0485                	addi	s1,s1,1
20001518:	fe9418e3          	bne	s0,s1,20001508 <base_dev_uart+0x16>
2000151c:	84a2                	mv	s1,s0
2000151e:	a011                	j	20001522 <base_dev_uart+0x30>
20001520:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20001522:	8526                	mv	a0,s1
20001524:	49b2                	lw	s3,12(sp)
20001526:	4942                	lw	s2,16(sp)
20001528:	44d2                	lw	s1,20(sp)
2000152a:	4462                	lw	s0,24(sp)
2000152c:	40f2                	lw	ra,28(sp)
2000152e:	6105                	addi	sp,sp,32
20001530:	8082                	ret

20001532 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20001532:	7179                	addi	sp,sp,-48
20001534:	c606                	sw	ra,12(sp)
20001536:	d646                	sw	a7,44(sp)
20001538:	d442                	sw	a6,40(sp)
2000153a:	d23e                	sw	a5,36(sp)
2000153c:	d03a                	sw	a4,32(sp)
2000153e:	ce36                	sw	a3,28(sp)
20001540:	cc32                	sw	a2,24(sp)
20001542:	ca2e                	sw	a1,20(sp)
20001544:	effff597          	auipc	a1,0xeffff
20001548:	abc58593          	addi	a1,a1,-1348 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
2000154c:	4190                	lw	a2,0(a1)
2000154e:	41cc                	lw	a1,4(a1)
20001550:	872a                	mv	a4,a0
20001552:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20001554:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001556:	8532                	mv	a0,a2
20001558:	863a                	mv	a2,a4
2000155a:	200d                	jal	2000157c <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
2000155c:	40b2                	lw	ra,12(sp)
2000155e:	6145                	addi	sp,sp,48
20001560:	8082                	ret

20001562 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20001562:	effff697          	auipc	a3,0xeffff
20001566:	a9e68693          	addi	a3,a3,-1378 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000156a:	4290                	lw	a2,0(a3)
2000156c:	42d4                	lw	a3,4(a3)
2000156e:	872e                	mv	a4,a1
20001570:	87aa                	mv	a5,a0
20001572:	8532                	mv	a0,a2
20001574:	85b6                	mv	a1,a3
20001576:	863e                	mv	a2,a5
20001578:	86ba                	mv	a3,a4
2000157a:	a009                	j	2000157c <base_vfprintf>

2000157c <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
2000157c:	7139                	addi	sp,sp,-64
2000157e:	de06                	sw	ra,60(sp)
20001580:	dc22                	sw	s0,56(sp)
20001582:	da26                	sw	s1,52(sp)
20001584:	d84a                	sw	s2,48(sp)
20001586:	d64e                	sw	s3,44(sp)
20001588:	d452                	sw	s4,40(sp)
2000158a:	d256                	sw	s5,36(sp)
2000158c:	d05a                	sw	s6,32(sp)
2000158e:	ce5e                	sw	s7,28(sp)
20001590:	cc62                	sw	s8,24(sp)
20001592:	ca66                	sw	s9,20(sp)
20001594:	c86a                	sw	s10,16(sp)
20001596:	c66e                	sw	s11,12(sp)
20001598:	8bb2                	mv	s7,a2
2000159a:	892a                	mv	s2,a0
2000159c:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
2000159e:	c199                	beqz	a1,200015a4 <base_vfprintf+0x28>
200015a0:	89ae                	mv	s3,a1
200015a2:	a029                	j	200015ac <base_vfprintf+0x30>
200015a4:	00000997          	auipc	s3,0x0
200015a8:	f3498993          	addi	s3,s3,-204 # 200014d8 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
200015ac:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
200015ae:	000bc503          	lbu	a0,0(s7)
200015b2:	28050f63          	beqz	a0,20001850 <base_vfprintf+0x2d4>
200015b6:	4b01                	li	s6,0
200015b8:	02500c13          	li	s8,37
200015bc:	4ca5                	li	s9,9
200015be:	02000d13          	li	s10,32
200015c2:	06800d93          	li	s11,104
200015c6:	00001a17          	auipc	s4,0x1
200015ca:	7a2a0a13          	addi	s4,s4,1954 # 20002d68 <__clz_tab+0x95c>
200015ce:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200015d0:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200015d2:	0ff57413          	andi	s0,a0,255
200015d6:	01840963          	beq	s0,s8,200015e8 <base_vfprintf+0x6c>
200015da:	c419                	beqz	s0,200015e8 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200015dc:	009b8533          	add	a0,s7,s1
200015e0:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200015e4:	0485                	addi	s1,s1,1
200015e6:	b7f5                	j	200015d2 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200015e8:	c491                	beqz	s1,200015f4 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200015ea:	854a                	mv	a0,s2
200015ec:	85de                	mv	a1,s7
200015ee:	8626                	mv	a2,s1
200015f0:	9982                	jalr	s3
200015f2:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
200015f4:	24040f63          	beqz	s0,20001852 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200015f8:	009b8633          	add	a2,s7,s1
200015fc:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001600:	22050f63          	beqz	a0,2000183e <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001604:	fd050593          	addi	a1,a0,-48
20001608:	0ff5f593          	andi	a1,a1,255
2000160c:	00bcf863          	bgeu	s9,a1,2000161c <base_vfprintf+0xa0>
20001610:	4401                	li	s0,0
20001612:	4581                	li	a1,0
20001614:	4605                	li	a2,1
20001616:	028d7f63          	bgeu	s10,s0,20001654 <base_vfprintf+0xd8>
2000161a:	aca1                	j	20001872 <base_vfprintf+0x2f6>
2000161c:	4581                	li	a1,0
2000161e:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001620:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001622:	00b606b3          	add	a3,a2,a1
20001626:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000162a:	20068a63          	beqz	a3,2000183e <base_vfprintf+0x2c2>
2000162e:	0ff57513          	andi	a0,a0,255
20001632:	03540733          	mul	a4,s0,s5
20001636:	953a                	add	a0,a0,a4
20001638:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
2000163c:	fd068513          	addi	a0,a3,-48
20001640:	0ff57713          	andi	a4,a0,255
20001644:	0585                	addi	a1,a1,1
20001646:	8536                	mv	a0,a3
20001648:	fcecfde3          	bgeu	s9,a4,20001622 <base_vfprintf+0xa6>
2000164c:	4601                	li	a2,0
2000164e:	8536                	mv	a0,a3
20001650:	228d6163          	bltu	s10,s0,20001872 <base_vfprintf+0x2f6>
20001654:	008036b3          	snez	a3,s0
20001658:	8e55                	or	a2,a2,a3
2000165a:	20060c63          	beqz	a2,20001872 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000165e:	95de                	add	a1,a1,s7
20001660:	95a6                	add	a1,a1,s1
20001662:	00258b93          	addi	s7,a1,2
20001666:	02adce63          	blt	s11,a0,200016a2 <base_vfprintf+0x126>
2000166a:	06100593          	li	a1,97
2000166e:	06a5d563          	bge	a1,a0,200016d8 <base_vfprintf+0x15c>
20001672:	06300593          	li	a1,99
20001676:	0ca5cb63          	blt	a1,a0,2000174c <base_vfprintf+0x1d0>
2000167a:	06200593          	li	a1,98
2000167e:	14b50a63          	beq	a0,a1,200017d2 <base_vfprintf+0x256>
20001682:	06300593          	li	a1,99
20001686:	18b51f63          	bne	a0,a1,20001824 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
2000168a:	4502                	lw	a0,0(sp)
2000168c:	00450593          	addi	a1,a0,4
20001690:	c02e                	sw	a1,0(sp)
20001692:	4108                	lw	a0,0(a0)
20001694:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20001698:	4605                	li	a2,1
2000169a:	854a                	mv	a0,s2
2000169c:	00b10593          	addi	a1,sp,11
200016a0:	aa41                	j	20001830 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200016a2:	07200593          	li	a1,114
200016a6:	04a5dd63          	bge	a1,a0,20001700 <base_vfprintf+0x184>
200016aa:	07700593          	li	a1,119
200016ae:	0aa5c663          	blt	a1,a0,2000175a <base_vfprintf+0x1de>
200016b2:	07300593          	li	a1,115
200016b6:	12b50963          	beq	a0,a1,200017e8 <base_vfprintf+0x26c>
200016ba:	07500593          	li	a1,117
200016be:	16b51363          	bne	a0,a1,20001824 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200016c2:	4502                	lw	a0,0(sp)
200016c4:	00450593          	addi	a1,a0,4
200016c8:	c02e                	sw	a1,0(sp)
200016ca:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200016cc:	00001797          	auipc	a5,0x1
200016d0:	d0d78793          	addi	a5,a5,-755 # 200023d9 <kDigitsLow>
200016d4:	4729                	li	a4,10
200016d6:	a8cd                	j	200017c8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200016d8:	13850763          	beq	a0,s8,20001806 <base_vfprintf+0x28a>
200016dc:	04800593          	li	a1,72
200016e0:	00b50663          	beq	a0,a1,200016ec <base_vfprintf+0x170>
200016e4:	05800593          	li	a1,88
200016e8:	12b51e63          	bne	a0,a1,20001824 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
200016ec:	4502                	lw	a0,0(sp)
200016ee:	00450593          	addi	a1,a0,4
200016f2:	c02e                	sw	a1,0(sp)
200016f4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
200016f6:	00001797          	auipc	a5,0x1
200016fa:	cf378793          	addi	a5,a5,-781 # 200023e9 <kDigitsHigh>
200016fe:	a0e1                	j	200017c6 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001700:	06900593          	li	a1,105
20001704:	06b50d63          	beq	a0,a1,2000177e <base_vfprintf+0x202>
20001708:	06f00593          	li	a1,111
2000170c:	10b50163          	beq	a0,a1,2000180e <base_vfprintf+0x292>
20001710:	07000593          	li	a1,112
20001714:	10b51863          	bne	a0,a1,20001824 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001718:	00001597          	auipc	a1,0x1
2000171c:	65458593          	addi	a1,a1,1620 # 20002d6c <__clz_tab+0x960>
20001720:	4609                	li	a2,2
20001722:	854a                	mv	a0,s2
20001724:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20001726:	4582                	lw	a1,0(sp)
20001728:	00458613          	addi	a2,a1,4
2000172c:	c032                	sw	a2,0(sp)
2000172e:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001730:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001734:	00001797          	auipc	a5,0x1
20001738:	ca578793          	addi	a5,a5,-859 # 200023d9 <kDigitsLow>
2000173c:	46a1                	li	a3,8
2000173e:	4741                	li	a4,16
20001740:	854a                	mv	a0,s2
20001742:	85ce                	mv	a1,s3
20001744:	2a5d                	jal	200018fa <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20001746:	00a40b33          	add	s6,s0,a0
2000174a:	a0ed                	j	20001834 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000174c:	06400593          	li	a1,100
20001750:	02b50763          	beq	a0,a1,2000177e <base_vfprintf+0x202>
20001754:	07b50063          	beq	a0,s11,200017b4 <base_vfprintf+0x238>
20001758:	a0f1                	j	20001824 <base_vfprintf+0x2a8>
2000175a:	07800593          	li	a1,120
2000175e:	04b50b63          	beq	a0,a1,200017b4 <base_vfprintf+0x238>
20001762:	07a00593          	li	a1,122
20001766:	0ab51f63          	bne	a0,a1,20001824 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
2000176a:	4502                	lw	a0,0(sp)
2000176c:	00450593          	addi	a1,a0,4
20001770:	c02e                	sw	a1,0(sp)
20001772:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001774:	00850593          	addi	a1,a0,8
20001778:	c02e                	sw	a1,0(sp)
2000177a:	414c                	lw	a1,4(a0)
2000177c:	a84d                	j	2000182e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
2000177e:	4502                	lw	a0,0(sp)
20001780:	00450593          	addi	a1,a0,4
20001784:	c02e                	sw	a1,0(sp)
20001786:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20001788:	557d                	li	a0,-1
2000178a:	00954c63          	blt	a0,s1,200017a2 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
2000178e:	00001597          	auipc	a1,0x1
20001792:	5dc58593          	addi	a1,a1,1500 # 20002d6a <__clz_tab+0x95e>
20001796:	4605                	li	a2,1
20001798:	854a                	mv	a0,s2
2000179a:	9982                	jalr	s3
2000179c:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
2000179e:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200017a2:	00001797          	auipc	a5,0x1
200017a6:	c3778793          	addi	a5,a5,-969 # 200023d9 <kDigitsLow>
200017aa:	4729                	li	a4,10
200017ac:	854a                	mv	a0,s2
200017ae:	85ce                	mv	a1,s3
200017b0:	8626                	mv	a2,s1
200017b2:	a829                	j	200017cc <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
200017b4:	4502                	lw	a0,0(sp)
200017b6:	00450593          	addi	a1,a0,4
200017ba:	c02e                	sw	a1,0(sp)
200017bc:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200017be:	00001797          	auipc	a5,0x1
200017c2:	c1b78793          	addi	a5,a5,-997 # 200023d9 <kDigitsLow>
200017c6:	4741                	li	a4,16
200017c8:	854a                	mv	a0,s2
200017ca:	85ce                	mv	a1,s3
200017cc:	86a2                	mv	a3,s0
200017ce:	2235                	jal	200018fa <write_digits>
200017d0:	a08d                	j	20001832 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200017d2:	4502                	lw	a0,0(sp)
200017d4:	00450593          	addi	a1,a0,4
200017d8:	c02e                	sw	a1,0(sp)
200017da:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200017dc:	00001797          	auipc	a5,0x1
200017e0:	bfd78793          	addi	a5,a5,-1027 # 200023d9 <kDigitsLow>
200017e4:	4709                	li	a4,2
200017e6:	b7cd                	j	200017c8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200017e8:	4502                	lw	a0,0(sp)
200017ea:	00450593          	addi	a1,a0,4
200017ee:	c02e                	sw	a1,0(sp)
200017f0:	410c                	lw	a1,0(a0)
200017f2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200017f4:	00a58633          	add	a2,a1,a0
200017f8:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200017fc:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200017fe:	fa7d                	bnez	a2,200017f4 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001800:	fff50613          	addi	a2,a0,-1
20001804:	a02d                	j	2000182e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20001806:	4605                	li	a2,1
20001808:	854a                	mv	a0,s2
2000180a:	85d2                	mv	a1,s4
2000180c:	a015                	j	20001830 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
2000180e:	4502                	lw	a0,0(sp)
20001810:	00450593          	addi	a1,a0,4
20001814:	c02e                	sw	a1,0(sp)
20001816:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001818:	00001797          	auipc	a5,0x1
2000181c:	bc178793          	addi	a5,a5,-1087 # 200023d9 <kDigitsLow>
20001820:	4721                	li	a4,8
20001822:	b75d                	j	200017c8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20001824:	00001597          	auipc	a1,0x1
20001828:	bd558593          	addi	a1,a1,-1067 # 200023f9 <kUnknownSpec>
2000182c:	463d                	li	a2,15
2000182e:	854a                	mv	a0,s2
20001830:	9982                	jalr	s3
20001832:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001834:	000bc503          	lbu	a0,0(s7)
20001838:	d8051ce3          	bnez	a0,200015d0 <base_vfprintf+0x54>
2000183c:	a819                	j	20001852 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
2000183e:	00001597          	auipc	a1,0x1
20001842:	b7e58593          	addi	a1,a1,-1154 # 200023bc <kErrorNul>
20001846:	4645                	li	a2,17
20001848:	854a                	mv	a0,s2
2000184a:	9982                	jalr	s3
2000184c:	9b2a                	add	s6,s6,a0
2000184e:	a011                	j	20001852 <base_vfprintf+0x2d6>
20001850:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20001852:	855a                	mv	a0,s6
20001854:	4db2                	lw	s11,12(sp)
20001856:	4d42                	lw	s10,16(sp)
20001858:	4cd2                	lw	s9,20(sp)
2000185a:	4c62                	lw	s8,24(sp)
2000185c:	4bf2                	lw	s7,28(sp)
2000185e:	5b02                	lw	s6,32(sp)
20001860:	5a92                	lw	s5,36(sp)
20001862:	5a22                	lw	s4,40(sp)
20001864:	59b2                	lw	s3,44(sp)
20001866:	5942                	lw	s2,48(sp)
20001868:	54d2                	lw	s1,52(sp)
2000186a:	5462                	lw	s0,56(sp)
2000186c:	50f2                	lw	ra,60(sp)
2000186e:	6121                	addi	sp,sp,64
20001870:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001872:	00001597          	auipc	a1,0x1
20001876:	b5b58593          	addi	a1,a1,-1189 # 200023cd <kErrorTooWide>
2000187a:	4631                	li	a2,12
2000187c:	b7f1                	j	20001848 <base_vfprintf+0x2cc>

2000187e <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
2000187e:	7179                	addi	sp,sp,-48
20001880:	ca06                	sw	ra,20(sp)
20001882:	d646                	sw	a7,44(sp)
20001884:	d442                	sw	a6,40(sp)
20001886:	d23e                	sw	a5,36(sp)
20001888:	d03a                	sw	a4,32(sp)
2000188a:	ce36                	sw	a3,28(sp)
2000188c:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
2000188e:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001890:	c42a                	sw	a0,8(sp)
20001892:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001894:	00000597          	auipc	a1,0x0
20001898:	01258593          	addi	a1,a1,18 # 200018a6 <snprintf_sink>
2000189c:	0028                	addi	a0,sp,8
2000189e:	39f9                	jal	2000157c <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200018a0:	40d2                	lw	ra,20(sp)
200018a2:	6145                	addi	sp,sp,48
200018a4:	8082                	ret

200018a6 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
200018a6:	1141                	addi	sp,sp,-16
200018a8:	c606                	sw	ra,12(sp)
200018aa:	c422                	sw	s0,8(sp)
200018ac:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
200018ae:	4140                	lw	s0,4(a0)
200018b0:	c00d                	beqz	s0,200018d2 <snprintf_sink+0x2c>
200018b2:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
200018b4:	00c46363          	bltu	s0,a2,200018ba <snprintf_sink+0x14>
200018b8:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200018ba:	4088                	lw	a0,0(s1)
200018bc:	8622                	mv	a2,s0
200018be:	de7fe0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200018c2:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200018c4:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200018c6:	9522                	add	a0,a0,s0
200018c8:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200018ca:	40858533          	sub	a0,a1,s0
200018ce:	c0c8                	sw	a0,4(s1)
200018d0:	a011                	j	200018d4 <snprintf_sink+0x2e>
200018d2:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200018d4:	8522                	mv	a0,s0
200018d6:	4492                	lw	s1,4(sp)
200018d8:	4422                	lw	s0,8(sp)
200018da:	40b2                	lw	ra,12(sp)
200018dc:	0141                	addi	sp,sp,16
200018de:	8082                	ret

200018e0 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200018e0:	1101                	addi	sp,sp,-32
200018e2:	c206                	sw	ra,4(sp)
200018e4:	ce46                	sw	a7,28(sp)
200018e6:	cc42                	sw	a6,24(sp)
200018e8:	ca3e                	sw	a5,20(sp)
200018ea:	c83a                	sw	a4,16(sp)
200018ec:	c636                	sw	a3,12(sp)
200018ee:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200018f0:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200018f2:	3169                	jal	2000157c <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200018f4:	4092                	lw	ra,4(sp)
200018f6:	6105                	addi	sp,sp,32
200018f8:	8082                	ret

200018fa <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
200018fa:	7139                	addi	sp,sp,-64
200018fc:	de06                	sw	ra,60(sp)
200018fe:	dc22                	sw	s0,56(sp)
20001900:	da26                	sw	s1,52(sp)
20001902:	d84a                	sw	s2,48(sp)
20001904:	d64e                	sw	s3,44(sp)
20001906:	892e                	mv	s2,a1
20001908:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000190a:	ca05                	beqz	a2,2000193a <write_digits+0x40>
2000190c:	4501                	li	a0,0
2000190e:	02b10813          	addi	a6,sp,43
20001912:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001914:	02e65633          	divu	a2,a2,a4
20001918:	02e60433          	mul	s0,a2,a4
2000191c:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001920:	943e                	add	s0,s0,a5
20001922:	00040403          	lb	s0,0(s0)
20001926:	00a805b3          	add	a1,a6,a0
2000192a:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000192e:	157d                	addi	a0,a0,-1
20001930:	fee4f1e3          	bgeu	s1,a4,20001912 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001934:	40a00633          	neg	a2,a0
20001938:	a011                	j	2000193c <write_digits+0x42>
2000193a:	4601                	li	a2,0
2000193c:	4485                	li	s1,1
2000193e:	c291                	beqz	a3,20001942 <write_digits+0x48>
20001940:	84b6                	mv	s1,a3
20001942:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20001946:	00a4e463          	bltu	s1,a0,2000194e <write_digits+0x54>
2000194a:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000194e:	02967063          	bgeu	a2,s1,2000196e <write_digits+0x74>
20001952:	0068                	addi	a0,sp,12
20001954:	8d05                	sub	a0,a0,s1
20001956:	02050513          	addi	a0,a0,32
2000195a:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
2000195e:	03000593          	li	a1,48
20001962:	8622                	mv	a2,s0
20001964:	d57fe0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001968:	147d                	addi	s0,s0,-1
2000196a:	fc7d                	bnez	s0,20001968 <write_digits+0x6e>
2000196c:	8626                	mv	a2,s1
2000196e:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001970:	8d11                	sub	a0,a0,a2
20001972:	02050593          	addi	a1,a0,32
20001976:	854e                	mv	a0,s3
20001978:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
2000197a:	59b2                	lw	s3,44(sp)
2000197c:	5942                	lw	s2,48(sp)
2000197e:	54d2                	lw	s1,52(sp)
20001980:	5462                	lw	s0,56(sp)
20001982:	50f2                	lw	ra,60(sp)
20001984:	6121                	addi	sp,sp,64
20001986:	8082                	ret

20001988 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20001988:	c581                	beqz	a1,20001990 <dif_uart_init+0x8>
2000198a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
2000198c:	c188                	sw	a0,0(a1)
2000198e:	a011                	j	20001992 <dif_uart_init+0xa>
20001990:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001992:	8532                	mv	a0,a2
20001994:	8082                	ret

20001996 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20001996:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001998:	c606                	sw	ra,12(sp)
2000199a:	c422                	sw	s0,8(sp)
2000199c:	c226                	sw	s1,4(sp)
2000199e:	c92d                	beqz	a0,20001a10 <dif_uart_configure+0x7a>
200019a0:	84ae                	mv	s1,a1
200019a2:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
200019a4:	418c                	lw	a1,0(a1)
200019a6:	450d                	li	a0,3
200019a8:	c5ad                	beqz	a1,20001a12 <dif_uart_configure+0x7c>
200019aa:	40d0                	lw	a2,4(s1)
200019ac:	c23d                	beqz	a2,20001a12 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200019ae:	01459513          	slli	a0,a1,0x14
200019b2:	81b1                	srli	a1,a1,0xc
200019b4:	4681                	li	a3,0
200019b6:	2e61                	jal	20001d4e <__udivdi3>
200019b8:	6641                	lui	a2,0x10
200019ba:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200019bc:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200019be:	8d31                	xor	a0,a0,a2
200019c0:	8dc9                	or	a1,a1,a0
200019c2:	4511                	li	a0,4
200019c4:	e5b9                	bnez	a1,20001a12 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200019c6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200019c8:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200019cc:	4008                	lw	a0,0(s0)
200019ce:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200019d0:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200019d2:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200019d4:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200019d8:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200019da:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200019de:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200019e0:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200019e4:	4008                	lw	a0,0(s0)
200019e6:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200019e8:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200019ea:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200019ec:	01061513          	slli	a0,a2,0x10
200019f0:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
200019f4:	c291                	beqz	a3,200019f8 <dif_uart_configure+0x62>
200019f6:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
200019f8:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
200019fa:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
200019fc:	e219                	bnez	a2,20001a02 <dif_uart_configure+0x6c>
200019fe:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20001a02:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a04:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001a06:	400c                	lw	a1,0(s0)
20001a08:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a0a:	0005a223          	sw	zero,4(a1)
20001a0e:	a011                	j	20001a12 <dif_uart_configure+0x7c>
20001a10:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001a12:	4492                	lw	s1,4(sp)
20001a14:	4422                	lw	s0,8(sp)
20001a16:	40b2                	lw	ra,12(sp)
20001a18:	0141                	addi	sp,sp,16
20001a1a:	8082                	ret

20001a1c <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001a1c:	1141                	addi	sp,sp,-16
20001a1e:	c606                	sw	ra,12(sp)
20001a20:	c422                	sw	s0,8(sp)
20001a22:	c226                	sw	s1,4(sp)
20001a24:	84aa                	mv	s1,a0
20001a26:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001a28:	c09d                	beqz	s1,20001a4e <dif_uart_irq_is_pending+0x32>
20001a2a:	8432                	mv	s0,a2
20001a2c:	c20d                	beqz	a2,20001a4e <dif_uart_irq_is_pending+0x32>
20001a2e:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001a30:	852e                	mv	a0,a1
20001a32:	85b2                	mv	a1,a2
20001a34:	2015                	jal	20001a58 <uart_irq_offset_get>
20001a36:	85aa                	mv	a1,a0
20001a38:	4505                	li	a0,1
20001a3a:	c991                	beqz	a1,20001a4e <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001a3c:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a3e:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001a40:	4602                	lw	a2,0(sp)
20001a42:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001a44:	00c5d5b3          	srl	a1,a1,a2
20001a48:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20001a4a:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001a4e:	4492                	lw	s1,4(sp)
20001a50:	4422                	lw	s0,8(sp)
20001a52:	40b2                	lw	ra,12(sp)
20001a54:	0141                	addi	sp,sp,16
20001a56:	8082                	ret

20001a58 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001a58:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20001a5a:	00a66563          	bltu	a2,a0,20001a64 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001a5e:	c188                	sw	a0,0(a1)
20001a60:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001a62:	8082                	ret
20001a64:	4501                	li	a0,0
20001a66:	8082                	ret

20001a68 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20001a68:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20001a6a:	c606                	sw	ra,12(sp)
20001a6c:	c422                	sw	s0,8(sp)
20001a6e:	c10d                	beqz	a0,20001a90 <dif_uart_irq_acknowledge+0x28>
20001a70:	842a                	mv	s0,a0
20001a72:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001a74:	852e                	mv	a0,a1
20001a76:	85b2                	mv	a1,a2
20001a78:	37c5                	jal	20001a58 <uart_irq_offset_get>
20001a7a:	85aa                	mv	a1,a0
20001a7c:	4505                	li	a0,1
20001a7e:	c991                	beqz	a1,20001a92 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001a80:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001a82:	4010                	lw	a2,0(s0)
20001a84:	4501                	li	a0,0
20001a86:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001a88:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a8c:	c20c                	sw	a1,0(a2)
20001a8e:	a011                	j	20001a92 <dif_uart_irq_acknowledge+0x2a>
20001a90:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001a92:	4422                	lw	s0,8(sp)
20001a94:	40b2                	lw	ra,12(sp)
20001a96:	0141                	addi	sp,sp,16
20001a98:	8082                	ret

20001a9a <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001a9a:	c911                	beqz	a0,20001aae <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001a9c:	c581                	beqz	a1,20001aa4 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001a9e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001aa0:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001aa2:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001aa4:	410c                	lw	a1,0(a0)
20001aa6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001aa8:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001aac:	8082                	ret
20001aae:	4509                	li	a0,2
20001ab0:	8082                	ret

20001ab2 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20001ab2:	862a                	mv	a2,a0
20001ab4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20001ab6:	c611                	beqz	a2,20001ac2 <dif_uart_irq_restore_all+0x10>
20001ab8:	c589                	beqz	a1,20001ac2 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001aba:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001abc:	4210                	lw	a2,0(a2)
20001abe:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001ac0:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20001ac2:	8082                	ret

20001ac4 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20001ac4:	1141                	addi	sp,sp,-16
20001ac6:	c606                	sw	ra,12(sp)
20001ac8:	c422                	sw	s0,8(sp)
20001aca:	c226                	sw	s1,4(sp)
20001acc:	84aa                	mv	s1,a0
20001ace:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20001ad0:	c485                	beqz	s1,20001af8 <dif_uart_irq_get_enabled+0x34>
20001ad2:	8432                	mv	s0,a2
20001ad4:	c215                	beqz	a2,20001af8 <dif_uart_irq_get_enabled+0x34>
20001ad6:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001ad8:	852e                	mv	a0,a1
20001ada:	85b2                	mv	a1,a2
20001adc:	3fb5                	jal	20001a58 <uart_irq_offset_get>
20001ade:	85aa                	mv	a1,a0
20001ae0:	4505                	li	a0,1
20001ae2:	c999                	beqz	a1,20001af8 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001ae4:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001ae6:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001ae8:	4602                	lw	a2,0(sp)
20001aea:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001aec:	00c5d5b3          	srl	a1,a1,a2
20001af0:	8985                	andi	a1,a1,1
20001af2:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20001af6:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001af8:	4492                	lw	s1,4(sp)
20001afa:	4422                	lw	s0,8(sp)
20001afc:	40b2                	lw	ra,12(sp)
20001afe:	0141                	addi	sp,sp,16
20001b00:	8082                	ret

20001b02 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20001b02:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20001b04:	c606                	sw	ra,12(sp)
20001b06:	c422                	sw	s0,8(sp)
20001b08:	c226                	sw	s1,4(sp)
20001b0a:	c91d                	beqz	a0,20001b40 <dif_uart_irq_set_enabled+0x3e>
20001b0c:	8432                	mv	s0,a2
20001b0e:	84aa                	mv	s1,a0
20001b10:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001b12:	852e                	mv	a0,a1
20001b14:	85b2                	mv	a1,a2
20001b16:	3789                	jal	20001a58 <uart_irq_offset_get>
20001b18:	85aa                	mv	a1,a0
20001b1a:	4505                	li	a0,1
20001b1c:	c19d                	beqz	a1,20001b42 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001b1e:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001b20:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001b22:	4682                	lw	a3,0(sp)
20001b24:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001b26:	00143713          	seqz	a4,s0
20001b2a:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001b2c:	00d797b3          	sll	a5,a5,a3
20001b30:	fff7c793          	not	a5,a5
20001b34:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001b36:	00d716b3          	sll	a3,a4,a3
20001b3a:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b3c:	c1d0                	sw	a2,4(a1)
20001b3e:	a011                	j	20001b42 <dif_uart_irq_set_enabled+0x40>
20001b40:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001b42:	4492                	lw	s1,4(sp)
20001b44:	4422                	lw	s0,8(sp)
20001b46:	40b2                	lw	ra,12(sp)
20001b48:	0141                	addi	sp,sp,16
20001b4a:	8082                	ret

20001b4c <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20001b4c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20001b4e:	c606                	sw	ra,12(sp)
20001b50:	c422                	sw	s0,8(sp)
20001b52:	c10d                	beqz	a0,20001b74 <dif_uart_irq_force+0x28>
20001b54:	842a                	mv	s0,a0
20001b56:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001b58:	852e                	mv	a0,a1
20001b5a:	85b2                	mv	a1,a2
20001b5c:	3df5                	jal	20001a58 <uart_irq_offset_get>
20001b5e:	85aa                	mv	a1,a0
20001b60:	4505                	li	a0,1
20001b62:	c991                	beqz	a1,20001b76 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001b64:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20001b66:	4010                	lw	a2,0(s0)
20001b68:	4501                	li	a0,0
20001b6a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001b6c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b70:	c60c                	sw	a1,8(a2)
20001b72:	a011                	j	20001b76 <dif_uart_irq_force+0x2a>
20001b74:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20001b76:	4422                	lw	s0,8(sp)
20001b78:	40b2                	lw	ra,12(sp)
20001b7a:	0141                	addi	sp,sp,16
20001b7c:	8082                	ret

20001b7e <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001b7e:	cd09                	beqz	a0,20001b98 <dif_uart_watermark_rx_set+0x1a>
20001b80:	4691                	li	a3,4
20001b82:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001b84:	00b6eb63          	bltu	a3,a1,20001b9a <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001b88:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b8a:	4d54                	lw	a3,28(a0)
20001b8c:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20001b8e:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001b90:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001b92:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b94:	cd4c                	sw	a1,28(a0)
20001b96:	a011                	j	20001b9a <dif_uart_watermark_rx_set+0x1c>
20001b98:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001b9a:	8532                	mv	a0,a2
20001b9c:	8082                	ret

20001b9e <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001b9e:	cd11                	beqz	a0,20001bba <dif_uart_watermark_tx_set+0x1c>
20001ba0:	468d                	li	a3,3
20001ba2:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001ba4:	00b6ec63          	bltu	a3,a1,20001bbc <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001ba8:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001baa:	4d54                	lw	a3,28(a0)
20001bac:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20001bae:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001bb0:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001bb4:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001bb6:	cd4c                	sw	a1,28(a0)
20001bb8:	a011                	j	20001bbc <dif_uart_watermark_tx_set+0x1e>
20001bba:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001bbc:	8532                	mv	a0,a2
20001bbe:	8082                	ret

20001bc0 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001bc0:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20001bc2:	c51d                	beqz	a0,20001bf0 <dif_uart_bytes_send+0x30>
20001bc4:	c595                	beqz	a1,20001bf0 <dif_uart_bytes_send+0x30>
20001bc6:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001bc8:	c20d                	beqz	a2,20001bea <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001bca:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001bce:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001bd2:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001bd4:	eb19                	bnez	a4,20001bea <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20001bd6:	00f58733          	add	a4,a1,a5
20001bda:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001bde:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001be0:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001be4:	fef613e3          	bne	a2,a5,20001bca <dif_uart_bytes_send+0xa>
20001be8:	87b2                	mv	a5,a2
20001bea:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001bec:	c291                	beqz	a3,20001bf0 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001bee:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001bf0:	853a                	mv	a0,a4
20001bf2:	8082                	ret

20001bf4 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001bf4:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20001bf6:	c515                	beqz	a0,20001c22 <dif_uart_bytes_receive+0x2e>
20001bf8:	c60d                	beqz	a2,20001c22 <dif_uart_bytes_receive+0x2e>
20001bfa:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001bfc:	cd99                	beqz	a1,20001c1a <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001bfe:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c00:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001c02:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001c06:	eb91                	bnez	a5,20001c1a <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c08:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001c0a:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001c0e:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001c10:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001c14:	ff0595e3          	bne	a1,a6,20001bfe <dif_uart_bytes_receive+0xa>
20001c18:	882e                	mv	a6,a1
20001c1a:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001c1c:	c299                	beqz	a3,20001c22 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001c1e:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001c22:	853a                	mv	a0,a4
20001c24:	8082                	ret

20001c26 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001c26:	cd19                	beqz	a0,20001c44 <dif_uart_byte_send_polled+0x1e>
20001c28:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c2a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001c2c:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001c2e:	fef5                	bnez	a3,20001c2a <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c30:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001c32:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001c34:	e299                	bnez	a3,20001c3a <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c36:	ce0c                	sw	a1,24(a2)
20001c38:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c3a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001c3c:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001c3e:	dd75                	beqz	a0,20001c3a <dif_uart_byte_send_polled+0x14>
20001c40:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001c42:	8082                	ret
20001c44:	4509                	li	a0,2
20001c46:	8082                	ret

20001c48 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001c48:	862a                	mv	a2,a0
20001c4a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001c4c:	c205                	beqz	a2,20001c6c <dif_uart_byte_receive_polled+0x24>
20001c4e:	cd99                	beqz	a1,20001c6c <dif_uart_byte_receive_polled+0x24>
20001c50:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c52:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001c54:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001c58:	fd6d                	bnez	a0,20001c52 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c5a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001c5c:	02057693          	andi	a3,a0,32
20001c60:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001c62:	e689                	bnez	a3,20001c6c <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c64:	4a50                	lw	a2,20(a2)
20001c66:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001c68:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001c6c:	8082                	ret

20001c6e <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001c6e:	862a                	mv	a2,a0
20001c70:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001c72:	ca09                	beqz	a2,20001c84 <dif_uart_rx_bytes_available+0x16>
20001c74:	c981                	beqz	a1,20001c84 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001c76:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c78:	5110                	lw	a2,32(a0)
20001c7a:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001c7c:	8241                	srli	a2,a2,0x10
20001c7e:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001c82:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001c84:	8082                	ret

20001c86 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001c86:	862a                	mv	a2,a0
20001c88:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001c8a:	ce01                	beqz	a2,20001ca2 <dif_uart_tx_bytes_available+0x1c>
20001c8c:	c999                	beqz	a1,20001ca2 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001c8e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001c90:	5110                	lw	a2,32(a0)
20001c92:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001c94:	03f67613          	andi	a2,a2,63
20001c98:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001c9c:	40c68633          	sub	a2,a3,a2
20001ca0:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001ca2:	8082                	ret

20001ca4 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001ca4:	c11d                	beqz	a0,20001cca <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001ca6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001ca8:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001caa:	ffd5f693          	andi	a3,a1,-3
20001cae:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001cb2:	fff58713          	addi	a4,a1,-1
20001cb6:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001cb8:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001cbc:	00f77463          	bgeu	a4,a5,20001cc4 <dif_uart_fifo_reset+0x20>
20001cc0:	0025e593          	ori	a1,a1,2
20001cc4:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001cc6:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001cc8:	8082                	ret
20001cca:	4509                	li	a0,2
20001ccc:	8082                	ret

20001cce <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001cce:	c515                	beqz	a0,20001cfa <dif_uart_loopback_set+0x2c>
20001cd0:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20001cd2:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001cd4:	0015b593          	seqz	a1,a1
20001cd8:	4715                	li	a4,5
20001cda:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001cde:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001ce0:	00163613          	seqz	a2,a2
20001ce4:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001ce6:	00b797b3          	sll	a5,a5,a1
20001cea:	fff7c793          	not	a5,a5
20001cee:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001cf0:	00b615b3          	sll	a1,a2,a1
20001cf4:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001cf6:	c54c                	sw	a1,12(a0)
20001cf8:	a011                	j	20001cfc <dif_uart_loopback_set+0x2e>
20001cfa:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001cfc:	8536                	mv	a0,a3
20001cfe:	8082                	ret

20001d00 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001d00:	862a                	mv	a2,a0
20001d02:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001d04:	ca11                	beqz	a2,20001d18 <dif_uart_enable_rx_timeout+0x18>
20001d06:	0185d693          	srli	a3,a1,0x18
20001d0a:	e699                	bnez	a3,20001d18 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001d0c:	4210                	lw	a2,0(a2)
20001d0e:	4501                	li	a0,0
20001d10:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001d14:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d16:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001d18:	8082                	ret

20001d1a <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001d1a:	c511                	beqz	a0,20001d26 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001d1c:	410c                	lw	a1,0(a0)
20001d1e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d20:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001d24:	8082                	ret
20001d26:	4509                	li	a0,2
20001d28:	8082                	ret

20001d2a <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001d2a:	86aa                	mv	a3,a0
20001d2c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001d2e:	ce99                	beqz	a3,20001d4c <dif_uart_get_rx_timeout+0x22>
20001d30:	cd91                	beqz	a1,20001d4c <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001d32:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001d34:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001d36:	fff6c513          	not	a0,a3
20001d3a:	817d                	srli	a0,a0,0x1f
20001d3c:	c188                	sw	a0,0(a1)
20001d3e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001d40:	c611                	beqz	a2,20001d4c <dif_uart_get_rx_timeout+0x22>
20001d42:	010005b7          	lui	a1,0x1000
20001d46:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001d48:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001d4a:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001d4c:	8082                	ret

20001d4e <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001d4e:	88aa                	mv	a7,a0
20001d50:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001d52:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001d54:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001d56:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001d58:	20069963          	bnez	a3,20001f6a <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001d5c:	200026b7          	lui	a3,0x20002
20001d60:	40c68693          	addi	a3,a3,1036 # 2000240c <__clz_tab>
20001d64:	0cc5f063          	bgeu	a1,a2,20001e24 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001d68:	6741                	lui	a4,0x10
20001d6a:	0ae67663          	bgeu	a2,a4,20001e16 <__udivdi3+0xc8>
20001d6e:	0ff00713          	li	a4,255
20001d72:	00c73733          	sltu	a4,a4,a2
20001d76:	070e                	slli	a4,a4,0x3
20001d78:	00e65533          	srl	a0,a2,a4
20001d7c:	96aa                	add	a3,a3,a0
20001d7e:	0006c683          	lbu	a3,0(a3)
20001d82:	02000513          	li	a0,32
20001d86:	9736                	add	a4,a4,a3
20001d88:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001d8c:	00e50c63          	beq	a0,a4,20001da4 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001d90:	00d797b3          	sll	a5,a5,a3
20001d94:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001d98:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001d9c:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001da0:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001da4:	01085893          	srli	a7,a6,0x10
20001da8:	0315d7b3          	divu	a5,a1,a7
20001dac:	01081613          	slli	a2,a6,0x10
20001db0:	8241                	srli	a2,a2,0x10
20001db2:	01035713          	srli	a4,t1,0x10
20001db6:	0315f6b3          	remu	a3,a1,a7
20001dba:	853e                	mv	a0,a5
20001dbc:	02f605b3          	mul	a1,a2,a5
20001dc0:	06c2                	slli	a3,a3,0x10
20001dc2:	8f55                	or	a4,a4,a3
20001dc4:	00b77c63          	bgeu	a4,a1,20001ddc <__udivdi3+0x8e>
20001dc8:	9742                	add	a4,a4,a6
20001dca:	fff78513          	addi	a0,a5,-1
20001dce:	01076763          	bltu	a4,a6,20001ddc <__udivdi3+0x8e>
20001dd2:	00b77563          	bgeu	a4,a1,20001ddc <__udivdi3+0x8e>
20001dd6:	ffe78513          	addi	a0,a5,-2
20001dda:	9742                	add	a4,a4,a6
20001ddc:	8f0d                	sub	a4,a4,a1
20001dde:	031777b3          	remu	a5,a4,a7
20001de2:	0342                	slli	t1,t1,0x10
20001de4:	01035313          	srli	t1,t1,0x10
20001de8:	03175733          	divu	a4,a4,a7
20001dec:	07c2                	slli	a5,a5,0x10
20001dee:	0067e333          	or	t1,a5,t1
20001df2:	02e606b3          	mul	a3,a2,a4
20001df6:	863a                	mv	a2,a4
20001df8:	00d37b63          	bgeu	t1,a3,20001e0e <__udivdi3+0xc0>
20001dfc:	9342                	add	t1,t1,a6
20001dfe:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001e02:	01036663          	bltu	t1,a6,20001e0e <__udivdi3+0xc0>
20001e06:	00d37463          	bgeu	t1,a3,20001e0e <__udivdi3+0xc0>
20001e0a:	ffe70613          	addi	a2,a4,-2
20001e0e:	0542                	slli	a0,a0,0x10
20001e10:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001e12:	4581                	li	a1,0
20001e14:	a85d                	j	20001eca <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001e16:	01000537          	lui	a0,0x1000
20001e1a:	4741                	li	a4,16
20001e1c:	f4a66ee3          	bltu	a2,a0,20001d78 <__udivdi3+0x2a>
20001e20:	4761                	li	a4,24
20001e22:	bf99                	j	20001d78 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001e24:	e601                	bnez	a2,20001e2c <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001e26:	4705                	li	a4,1
20001e28:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001e2c:	6741                	lui	a4,0x10
20001e2e:	08e87f63          	bgeu	a6,a4,20001ecc <__udivdi3+0x17e>
20001e32:	0ff00713          	li	a4,255
20001e36:	01077363          	bgeu	a4,a6,20001e3c <__udivdi3+0xee>
20001e3a:	4521                	li	a0,8
20001e3c:	00a85733          	srl	a4,a6,a0
20001e40:	96ba                	add	a3,a3,a4
20001e42:	0006c703          	lbu	a4,0(a3)
20001e46:	02000613          	li	a2,32
20001e4a:	972a                	add	a4,a4,a0
20001e4c:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001e50:	08e61563          	bne	a2,a4,20001eda <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001e54:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001e58:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001e5a:	01085893          	srli	a7,a6,0x10
20001e5e:	01081613          	slli	a2,a6,0x10
20001e62:	8241                	srli	a2,a2,0x10
20001e64:	01035713          	srli	a4,t1,0x10
20001e68:	0317f6b3          	remu	a3,a5,a7
20001e6c:	0317d7b3          	divu	a5,a5,a7
20001e70:	06c2                	slli	a3,a3,0x10
20001e72:	8f55                	or	a4,a4,a3
20001e74:	02f60e33          	mul	t3,a2,a5
20001e78:	853e                	mv	a0,a5
20001e7a:	01c77c63          	bgeu	a4,t3,20001e92 <__udivdi3+0x144>
20001e7e:	9742                	add	a4,a4,a6
20001e80:	fff78513          	addi	a0,a5,-1
20001e84:	01076763          	bltu	a4,a6,20001e92 <__udivdi3+0x144>
20001e88:	01c77563          	bgeu	a4,t3,20001e92 <__udivdi3+0x144>
20001e8c:	ffe78513          	addi	a0,a5,-2
20001e90:	9742                	add	a4,a4,a6
20001e92:	41c70733          	sub	a4,a4,t3
20001e96:	031777b3          	remu	a5,a4,a7
20001e9a:	0342                	slli	t1,t1,0x10
20001e9c:	01035313          	srli	t1,t1,0x10
20001ea0:	03175733          	divu	a4,a4,a7
20001ea4:	07c2                	slli	a5,a5,0x10
20001ea6:	0067e333          	or	t1,a5,t1
20001eaa:	02e606b3          	mul	a3,a2,a4
20001eae:	863a                	mv	a2,a4
20001eb0:	00d37b63          	bgeu	t1,a3,20001ec6 <__udivdi3+0x178>
20001eb4:	9342                	add	t1,t1,a6
20001eb6:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001eba:	01036663          	bltu	t1,a6,20001ec6 <__udivdi3+0x178>
20001ebe:	00d37463          	bgeu	t1,a3,20001ec6 <__udivdi3+0x178>
20001ec2:	ffe70613          	addi	a2,a4,-2
20001ec6:	0542                	slli	a0,a0,0x10
20001ec8:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001eca:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001ecc:	01000737          	lui	a4,0x1000
20001ed0:	4541                	li	a0,16
20001ed2:	f6e865e3          	bltu	a6,a4,20001e3c <__udivdi3+0xee>
20001ed6:	4561                	li	a0,24
20001ed8:	b795                	j	20001e3c <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001eda:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001ede:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001ee2:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001ee6:	00d797b3          	sll	a5,a5,a3
20001eea:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001eee:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001ef2:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001ef6:	0315f733          	remu	a4,a1,a7
20001efa:	01081793          	slli	a5,a6,0x10
20001efe:	83c1                	srli	a5,a5,0x10
20001f00:	01065513          	srli	a0,a2,0x10
20001f04:	0315d5b3          	divu	a1,a1,a7
20001f08:	0742                	slli	a4,a4,0x10
20001f0a:	8f49                	or	a4,a4,a0
20001f0c:	02b786b3          	mul	a3,a5,a1
20001f10:	852e                	mv	a0,a1
20001f12:	00d77c63          	bgeu	a4,a3,20001f2a <__udivdi3+0x1dc>
20001f16:	9742                	add	a4,a4,a6
20001f18:	fff58513          	addi	a0,a1,-1 # ffffff <test_memory_protection.kLogFields.61+0xfefd57>
20001f1c:	01076763          	bltu	a4,a6,20001f2a <__udivdi3+0x1dc>
20001f20:	00d77563          	bgeu	a4,a3,20001f2a <__udivdi3+0x1dc>
20001f24:	ffe58513          	addi	a0,a1,-2
20001f28:	9742                	add	a4,a4,a6
20001f2a:	40d706b3          	sub	a3,a4,a3
20001f2e:	0316f733          	remu	a4,a3,a7
20001f32:	0642                	slli	a2,a2,0x10
20001f34:	8241                	srli	a2,a2,0x10
20001f36:	0316d6b3          	divu	a3,a3,a7
20001f3a:	0742                	slli	a4,a4,0x10
20001f3c:	02d788b3          	mul	a7,a5,a3
20001f40:	00c767b3          	or	a5,a4,a2
20001f44:	8736                	mv	a4,a3
20001f46:	0117fc63          	bgeu	a5,a7,20001f5e <__udivdi3+0x210>
20001f4a:	97c2                	add	a5,a5,a6
20001f4c:	fff68713          	addi	a4,a3,-1
20001f50:	0107e763          	bltu	a5,a6,20001f5e <__udivdi3+0x210>
20001f54:	0117f563          	bgeu	a5,a7,20001f5e <__udivdi3+0x210>
20001f58:	ffe68713          	addi	a4,a3,-2
20001f5c:	97c2                	add	a5,a5,a6
20001f5e:	01051593          	slli	a1,a0,0x10
20001f62:	411787b3          	sub	a5,a5,a7
20001f66:	8dd9                	or	a1,a1,a4
20001f68:	bdcd                	j	20001e5a <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001f6a:	14d5e263          	bltu	a1,a3,200020ae <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001f6e:	6741                	lui	a4,0x10
20001f70:	02e6ff63          	bgeu	a3,a4,20001fae <__udivdi3+0x260>
20001f74:	0ff00713          	li	a4,255
20001f78:	00d735b3          	sltu	a1,a4,a3
20001f7c:	058e                	slli	a1,a1,0x3
20001f7e:	20002737          	lui	a4,0x20002
20001f82:	00b6d533          	srl	a0,a3,a1
20001f86:	40c70713          	addi	a4,a4,1036 # 2000240c <__clz_tab>
20001f8a:	972a                	add	a4,a4,a0
20001f8c:	00074703          	lbu	a4,0(a4)
20001f90:	02000513          	li	a0,32
20001f94:	972e                	add	a4,a4,a1
20001f96:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001f9a:	02e51163          	bne	a0,a4,20001fbc <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001f9e:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001fa0:	f2f6e5e3          	bltu	a3,a5,20001eca <__udivdi3+0x17c>
20001fa4:	00c8b533          	sltu	a0,a7,a2
20001fa8:	00154513          	xori	a0,a0,1
20001fac:	bf39                	j	20001eca <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001fae:	01000737          	lui	a4,0x1000
20001fb2:	45c1                	li	a1,16
20001fb4:	fce6e5e3          	bltu	a3,a4,20001f7e <__udivdi3+0x230>
20001fb8:	45e1                	li	a1,24
20001fba:	b7d1                	j	20001f7e <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001fbc:	00e65333          	srl	t1,a2,a4
20001fc0:	00b696b3          	sll	a3,a3,a1
20001fc4:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001fc8:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001fcc:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001fd0:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001fd4:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001fd8:	00b797b3          	sll	a5,a5,a1
20001fdc:	00e8d733          	srl	a4,a7,a4
20001fe0:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001fe4:	01031793          	slli	a5,t1,0x10
20001fe8:	83c1                	srli	a5,a5,0x10
20001fea:	01085713          	srli	a4,a6,0x10
20001fee:	02a65633          	divu	a2,a2,a0
20001ff2:	06c2                	slli	a3,a3,0x10
20001ff4:	8f55                	or	a4,a4,a3
20001ff6:	02c78f33          	mul	t5,a5,a2
20001ffa:	8e32                	mv	t3,a2
20001ffc:	01e77c63          	bgeu	a4,t5,20002014 <__udivdi3+0x2c6>
20002000:	971a                	add	a4,a4,t1
20002002:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20002006:	00676763          	bltu	a4,t1,20002014 <__udivdi3+0x2c6>
2000200a:	01e77563          	bgeu	a4,t5,20002014 <__udivdi3+0x2c6>
2000200e:	ffe60e13          	addi	t3,a2,-2
20002012:	971a                	add	a4,a4,t1
20002014:	41e70733          	sub	a4,a4,t5
20002018:	02a776b3          	remu	a3,a4,a0
2000201c:	02a75733          	divu	a4,a4,a0
20002020:	06c2                	slli	a3,a3,0x10
20002022:	02e78633          	mul	a2,a5,a4
20002026:	01081793          	slli	a5,a6,0x10
2000202a:	83c1                	srli	a5,a5,0x10
2000202c:	8fd5                	or	a5,a5,a3
2000202e:	86ba                	mv	a3,a4
20002030:	00c7fc63          	bgeu	a5,a2,20002048 <__udivdi3+0x2fa>
20002034:	979a                	add	a5,a5,t1
20002036:	fff70693          	addi	a3,a4,-1 # ffffff <test_memory_protection.kLogFields.61+0xfefd57>
2000203a:	0067e763          	bltu	a5,t1,20002048 <__udivdi3+0x2fa>
2000203e:	00c7f563          	bgeu	a5,a2,20002048 <__udivdi3+0x2fa>
20002042:	ffe70693          	addi	a3,a4,-2
20002046:	979a                	add	a5,a5,t1
20002048:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000204c:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000204e:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002050:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20002054:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002058:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000205a:	00def6b3          	and	a3,t4,a3
2000205e:	01055613          	srli	a2,a0,0x10
20002062:	010ede93          	srli	t4,t4,0x10
20002066:	02d80333          	mul	t1,a6,a3
2000206a:	02d606b3          	mul	a3,a2,a3
2000206e:	01035713          	srli	a4,t1,0x10
20002072:	03d80833          	mul	a6,a6,t4
20002076:	9836                	add	a6,a6,a3
20002078:	9742                	add	a4,a4,a6
2000207a:	03d60633          	mul	a2,a2,t4
2000207e:	00d77363          	bgeu	a4,a3,20002084 <__udivdi3+0x336>
20002082:	9672                	add	a2,a2,t3
20002084:	01075693          	srli	a3,a4,0x10
20002088:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
2000208a:	02c7e063          	bltu	a5,a2,200020aa <__udivdi3+0x35c>
2000208e:	d8c792e3          	bne	a5,a2,20001e12 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002092:	67c1                	lui	a5,0x10
20002094:	17fd                	addi	a5,a5,-1
20002096:	8f7d                	and	a4,a4,a5
20002098:	0742                	slli	a4,a4,0x10
2000209a:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
2000209e:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200020a2:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200020a4:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200020a6:	e2e8f2e3          	bgeu	a7,a4,20001eca <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
200020aa:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
200020ac:	b39d                	j	20001e12 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
200020ae:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
200020b0:	4501                	li	a0,0
200020b2:	bd21                	j	20001eca <__udivdi3+0x17c>
