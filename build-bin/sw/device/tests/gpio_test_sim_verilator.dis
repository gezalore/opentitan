
sw/device/tests/gpio_test_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000e0  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         0000236a  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000ef0  200024f0  200024f0  000034f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  200033e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000014  10000008  200033e8  00005008  2**2
                  ALLOC
  8 .logs.fields  0000035c  00010000  00010000  00005008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a006  00000000  00000000  0000538a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019d1  00000000  00000000  0000f390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  00010d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005211  00000000  00000000  00010df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004fd4  00000000  00000000  0001600a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e8  00000000  00000000  0001afde  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006672  00000000  00000000  0001b3c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000964  00000000  00000000  00021a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	ff458593          	addi	a1,a1,-12 # 1000001c <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2899                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2091                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00003617          	auipc	a2,0x3
20000054:	39060613          	addi	a2,a2,912 # 200033e0 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2889                	jal	200000aa <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	6f7010ef          	jal	ra,20001f74 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	3750106f          	j	20001bf6 <abort>

20000086 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000086:	00b57e63          	bgeu	a0,a1,200000a2 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
2000008a:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008e:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000092:	00029b63          	bnez	t0,200000a8 <L_clear_error>

20000096 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000096:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
2000009a:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009c:	feb56de3          	bltu	a0,a1,20000096 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
200000a0:	8082                	ret

200000a2 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a2:	00b51363          	bne	a0,a1,200000a8 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a6:	8082                	ret

200000a8 <L_clear_error>:
	...

200000aa <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000aa:	02b57963          	bgeu	a0,a1,200000dc <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ae:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b2:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b6:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000ba:	02029463          	bnez	t0,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000be:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c2:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c6:	0062ee63          	bltu	t0,t1,200000e2 <L_copy_error>

200000ca <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000ca:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000ce:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000d0:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d4:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d6:	feb56ae3          	bltu	a0,a1,200000ca <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000da:	8082                	ret

200000dc <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000dc:	00b51363          	bne	a0,a1,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000e0:	8082                	ret

200000e2 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	3b90106f          	j	20001cb8 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	4f10106f          	j	20001dfc <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	5390106f          	j	20001e54 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	0540006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:226
 * Provides external irq handling for this test.
 *
 * This function overrides the default external irq handler in
 * `sw/device/lib/handler.h`.
 */
void handler_irq_external(void) {
20000180:	7119                	addi	sp,sp,-128
20000182:	de86                	sw	ra,124(sp)
20000184:	dc96                	sw	t0,120(sp)
20000186:	da9a                	sw	t1,116(sp)
20000188:	d89e                	sw	t2,112(sp)
2000018a:	d6a2                	sw	s0,108(sp)
2000018c:	d4a6                	sw	s1,104(sp)
2000018e:	d2aa                	sw	a0,100(sp)
20000190:	d0ae                	sw	a1,96(sp)
20000192:	ceb2                	sw	a2,92(sp)
20000194:	ccb6                	sw	a3,88(sp)
20000196:	caba                	sw	a4,84(sp)
20000198:	c8be                	sw	a5,80(sp)
2000019a:	c6c2                	sw	a6,76(sp)
2000019c:	c4c6                	sw	a7,72(sp)
2000019e:	c2ca                	sw	s2,68(sp)
200001a0:	c0ce                	sw	s3,64(sp)
200001a2:	de52                	sw	s4,60(sp)
200001a4:	dc56                	sw	s5,56(sp)
200001a6:	da72                	sw	t3,52(sp)
200001a8:	d876                	sw	t4,48(sp)
200001aa:	d67a                	sw	t5,44(sp)
200001ac:	d47e                	sw	t6,40(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:229
  // Find which interrupt fired at PLIC by claiming it.
  dif_plic_irq_id_t plic_irq_id;
  CHECK(dif_plic_irq_claim(&plic, kTopEarlgreyPlicTargetIbex0, &plic_irq_id) ==
200001ae:	f0000517          	auipc	a0,0xf0000
200001b2:	e5a50513          	addi	a0,a0,-422 # 10000008 <_data_end>
200001b6:	1050                	addi	a2,sp,36
200001b8:	4581                	li	a1,0
200001ba:	795000ef          	jal	ra,2000114e <dif_plic_irq_claim>
200001be:	00003a17          	auipc	s4,0x3
200001c2:	a8aa0a13          	addi	s4,s4,-1398 # 20002c48 <kDeviceLogBypassUartAddress>
200001c6:	cd0d                	beqz	a0,20000200 <handler_irq_external+0x80>
200001c8:	000a2503          	lw	a0,0(s4)
200001cc:	c909                	beqz	a0,200001de <handler_irq_external+0x5e>
200001ce:	e0010517          	auipc	a0,0xe0010
200001d2:	e3250513          	addi	a0,a0,-462 # 10000 <_dv_log_offset>
200001d6:	4581                	li	a1,0
200001d8:	0da010ef          	jal	ra,200012b2 <base_log_internal_dv>
200001dc:	a829                	j	200001f6 <handler_irq_external+0x76>
200001de:	00002597          	auipc	a1,0x2
200001e2:	31258593          	addi	a1,a1,786 # 200024f0 <__udivdi3+0x36c>
200001e6:	0800                	addi	s0,sp,16
200001e8:	4651                	li	a2,20
200001ea:	8522                	mv	a0,s0
200001ec:	6b1010ef          	jal	ra,2000209c <memcpy>
200001f0:	8522                	mv	a0,s0
200001f2:	016010ef          	jal	ra,20001208 <base_log_internal_core>
200001f6:	6531                	lui	a0,0xc
200001f8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200001fc:	201010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:235
            kDifPlicOk,
        "dif_plic_irq_claim failed");

  // Check if it is the right peripheral.
  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
20000200:	5512                	lw	a0,36(sp)
20000202:	00251593          	slli	a1,a0,0x2
20000206:	00002617          	auipc	a2,0x2
2000020a:	6b260613          	addi	a2,a2,1714 # 200028b8 <top_earlgrey_plic_interrupt_for_peripheral>
2000020e:	95b2                	add	a1,a1,a2
20000210:	4180                	lw	s0,0(a1)
20000212:	4595                	li	a1,5
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:236
  CHECK(peripheral == kTopEarlgreyPlicPeripheralGpio,
20000214:	04b40363          	beq	s0,a1,2000025a <handler_irq_external+0xda>
20000218:	000a2503          	lw	a0,0(s4)
2000021c:	c919                	beqz	a0,20000232 <handler_irq_external+0xb2>
2000021e:	e0010517          	auipc	a0,0xe0010
20000222:	df650513          	addi	a0,a0,-522 # 10014 <handler_irq_external.kLogFields.2>
20000226:	4589                	li	a1,2
20000228:	4615                	li	a2,5
2000022a:	86a2                	mv	a3,s0
2000022c:	086010ef          	jal	ra,200012b2 <base_log_internal_dv>
20000230:	a839                	j	2000024e <handler_irq_external+0xce>
20000232:	00002597          	auipc	a1,0x2
20000236:	2d258593          	addi	a1,a1,722 # 20002504 <__udivdi3+0x380>
2000023a:	0804                	addi	s1,sp,16
2000023c:	4651                	li	a2,20
2000023e:	8526                	mv	a0,s1
20000240:	65d010ef          	jal	ra,2000209c <memcpy>
20000244:	4595                	li	a1,5
20000246:	8526                	mv	a0,s1
20000248:	8622                	mv	a2,s0
2000024a:	7bf000ef          	jal	ra,20001208 <base_log_internal_core>
2000024e:	6531                	lui	a0,0xc
20000250:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000254:	1a9010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:241
        "Interrupt from incorrect peripheral: (exp: %d, obs: %s)",
        kTopEarlgreyPlicPeripheralGpio, peripheral);

  // Correlate the interrupt fired from GPIO.
  uint32_t gpio_pin_irq_fired = plic_irq_id - kTopEarlgreyPlicIrqIdGpioGpio0;
20000258:	5512                	lw	a0,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:244

  // Check if we did expect the right GPIO IRQ to fire.
  CHECK(gpio_pin_irq_fired == expected_gpio_pin_irq,
2000025a:	f0000417          	auipc	s0,0xf0000
2000025e:	db240413          	addi	s0,s0,-590 # 1000000c <expected_gpio_pin_irq>
20000262:	400c                	lw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:241
  uint32_t gpio_pin_irq_fired = plic_irq_id - kTopEarlgreyPlicIrqIdGpioGpio0;
20000264:	fdf50913          	addi	s2,a0,-33
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:244
  CHECK(gpio_pin_irq_fired == expected_gpio_pin_irq,
20000268:	04b90463          	beq	s2,a1,200002b0 <handler_irq_external+0x130>
2000026c:	000a2503          	lw	a0,0(s4)
20000270:	4004                	lw	s1,0(s0)
20000272:	c919                	beqz	a0,20000288 <handler_irq_external+0x108>
20000274:	e0010517          	auipc	a0,0xe0010
20000278:	db450513          	addi	a0,a0,-588 # 10028 <handler_irq_external.kLogFields.5>
2000027c:	4589                	li	a1,2
2000027e:	8626                	mv	a2,s1
20000280:	86ca                	mv	a3,s2
20000282:	030010ef          	jal	ra,200012b2 <base_log_internal_dv>
20000286:	a005                	j	200002a6 <handler_irq_external+0x126>
20000288:	00002597          	auipc	a1,0x2
2000028c:	29058593          	addi	a1,a1,656 # 20002518 <__udivdi3+0x394>
20000290:	01010993          	addi	s3,sp,16
20000294:	4651                	li	a2,20
20000296:	854e                	mv	a0,s3
20000298:	605010ef          	jal	ra,2000209c <memcpy>
2000029c:	854e                	mv	a0,s3
2000029e:	85a6                	mv	a1,s1
200002a0:	864a                	mv	a2,s2
200002a2:	767000ef          	jal	ra,20001208 <base_log_internal_core>
200002a6:	6531                	lui	a0,0xc
200002a8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200002ac:	151010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:250
        "Incorrect GPIO interrupt (exp: %d, obs: %d)", expected_gpio_pin_irq,
        gpio_pin_irq_fired);

  // Check if the same interrupt fired at GPIO as well.
  uint32_t gpio_irqs_status;
  CHECK(dif_gpio_irq_is_pending_all(&gpio, &gpio_irqs_status) == kDifGpioOk,
200002b0:	f0000517          	auipc	a0,0xf0000
200002b4:	d6050513          	addi	a0,a0,-672 # 10000010 <gpio>
200002b8:	006c                	addi	a1,sp,12
200002ba:	267000ef          	jal	ra,20000d20 <dif_gpio_irq_is_pending_all>
200002be:	cd0d                	beqz	a0,200002f8 <handler_irq_external+0x178>
200002c0:	000a2503          	lw	a0,0(s4)
200002c4:	c909                	beqz	a0,200002d6 <handler_irq_external+0x156>
200002c6:	e0010517          	auipc	a0,0xe0010
200002ca:	d7650513          	addi	a0,a0,-650 # 1003c <handler_irq_external.kLogFields.8>
200002ce:	4581                	li	a1,0
200002d0:	7e3000ef          	jal	ra,200012b2 <base_log_internal_dv>
200002d4:	a829                	j	200002ee <handler_irq_external+0x16e>
200002d6:	00002597          	auipc	a1,0x2
200002da:	25658593          	addi	a1,a1,598 # 2000252c <__udivdi3+0x3a8>
200002de:	0804                	addi	s1,sp,16
200002e0:	4651                	li	a2,20
200002e2:	8526                	mv	a0,s1
200002e4:	5b9010ef          	jal	ra,2000209c <memcpy>
200002e8:	8526                	mv	a0,s1
200002ea:	71f000ef          	jal	ra,20001208 <base_log_internal_core>
200002ee:	6531                	lui	a0,0xc
200002f0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200002f4:	109010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:252
        "dif_gpio_irq_is_pending_all failed");
  CHECK(gpio_irqs_status == (1 << expected_gpio_pin_irq),
200002f8:	44b2                	lw	s1,12(sp)
200002fa:	400c                	lw	a1,0(s0)
200002fc:	4505                	li	a0,1
200002fe:	00b515b3          	sll	a1,a0,a1
20000302:	04b48663          	beq	s1,a1,2000034e <handler_irq_external+0x1ce>
20000306:	000a2583          	lw	a1,0(s4)
2000030a:	4010                	lw	a2,0(s0)
2000030c:	00c51ab3          	sll	s5,a0,a2
20000310:	c999                	beqz	a1,20000326 <handler_irq_external+0x1a6>
20000312:	e0010517          	auipc	a0,0xe0010
20000316:	d3e50513          	addi	a0,a0,-706 # 10050 <handler_irq_external.kLogFields.11>
2000031a:	4589                	li	a1,2
2000031c:	8656                	mv	a2,s5
2000031e:	86a6                	mv	a3,s1
20000320:	793000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000324:	a005                	j	20000344 <handler_irq_external+0x1c4>
20000326:	00002597          	auipc	a1,0x2
2000032a:	21a58593          	addi	a1,a1,538 # 20002540 <__udivdi3+0x3bc>
2000032e:	01010993          	addi	s3,sp,16
20000332:	4651                	li	a2,20
20000334:	854e                	mv	a0,s3
20000336:	567010ef          	jal	ra,2000209c <memcpy>
2000033a:	854e                	mv	a0,s3
2000033c:	85d6                	mv	a1,s5
2000033e:	8626                	mv	a2,s1
20000340:	6c9000ef          	jal	ra,20001208 <base_log_internal_core>
20000344:	6531                	lui	a0,0xc
20000346:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000034a:	0b3010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:258
        "Incorrect GPIO irqs status {exp: %x, obs: %x}",
        (1 << expected_gpio_pin_irq), gpio_irqs_status);

  // Read the gpio pin value to ensure the right value is being reflected.
  bool pin_val;
  CHECK(dif_gpio_read(&gpio, expected_gpio_pin_irq, &pin_val) == kDifGpioOk,
2000034e:	400c                	lw	a1,0(s0)
20000350:	f0000517          	auipc	a0,0xf0000
20000354:	cc050513          	addi	a0,a0,-832 # 10000010 <gpio>
20000358:	00b10613          	addi	a2,sp,11
2000035c:	359000ef          	jal	ra,20000eb4 <dif_gpio_read>
20000360:	cd0d                	beqz	a0,2000039a <handler_irq_external+0x21a>
20000362:	000a2503          	lw	a0,0(s4)
20000366:	c909                	beqz	a0,20000378 <handler_irq_external+0x1f8>
20000368:	e0010517          	auipc	a0,0xe0010
2000036c:	cfc50513          	addi	a0,a0,-772 # 10064 <handler_irq_external.kLogFields.14>
20000370:	4581                	li	a1,0
20000372:	741000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000376:	a829                	j	20000390 <handler_irq_external+0x210>
20000378:	00002597          	auipc	a1,0x2
2000037c:	1dc58593          	addi	a1,a1,476 # 20002554 <__udivdi3+0x3d0>
20000380:	0804                	addi	s1,sp,16
20000382:	4651                	li	a2,20
20000384:	8526                	mv	a0,s1
20000386:	517010ef          	jal	ra,2000209c <memcpy>
2000038a:	8526                	mv	a0,s1
2000038c:	67d000ef          	jal	ra,20001208 <base_log_internal_core>
20000390:	6531                	lui	a0,0xc
20000392:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000396:	067010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:262
        "dif_gpio_read failed");

  // Check if the pin value is set correctly.
  CHECK(pin_val == expected_irq_edge, "Incorrect GPIO %d pin value (exp: %b)",
2000039a:	00b14583          	lbu	a1,11(sp)
2000039e:	f0000517          	auipc	a0,0xf0000
200003a2:	c7650513          	addi	a0,a0,-906 # 10000014 <expected_irq_edge>
200003a6:	00054603          	lbu	a2,0(a0)
200003aa:	04c58663          	beq	a1,a2,200003f6 <handler_irq_external+0x276>
200003ae:	000a2583          	lw	a1,0(s4)
200003b2:	4000                	lw	s0,0(s0)
200003b4:	00054483          	lbu	s1,0(a0)
200003b8:	c999                	beqz	a1,200003ce <handler_irq_external+0x24e>
200003ba:	e0010517          	auipc	a0,0xe0010
200003be:	cbe50513          	addi	a0,a0,-834 # 10078 <handler_irq_external.kLogFields.17>
200003c2:	4589                	li	a1,2
200003c4:	8622                	mv	a2,s0
200003c6:	86a6                	mv	a3,s1
200003c8:	6eb000ef          	jal	ra,200012b2 <base_log_internal_dv>
200003cc:	a005                	j	200003ec <handler_irq_external+0x26c>
200003ce:	00002597          	auipc	a1,0x2
200003d2:	19a58593          	addi	a1,a1,410 # 20002568 <__udivdi3+0x3e4>
200003d6:	01010993          	addi	s3,sp,16
200003da:	4651                	li	a2,20
200003dc:	854e                	mv	a0,s3
200003de:	4bf010ef          	jal	ra,2000209c <memcpy>
200003e2:	854e                	mv	a0,s3
200003e4:	85a2                	mv	a1,s0
200003e6:	8626                	mv	a2,s1
200003e8:	621000ef          	jal	ra,20001208 <base_log_internal_core>
200003ec:	6531                	lui	a0,0xc
200003ee:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200003f2:	00b010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:266
        expected_gpio_pin_irq, expected_irq_edge);

  // Clear the interrupt at GPIO.
  CHECK(dif_gpio_irq_acknowledge(&gpio, gpio_pin_irq_fired) == kDifGpioOk,
200003f6:	f0000517          	auipc	a0,0xf0000
200003fa:	c1a50513          	addi	a0,a0,-998 # 10000010 <gpio>
200003fe:	85ca                	mv	a1,s2
20000400:	133000ef          	jal	ra,20000d32 <dif_gpio_irq_acknowledge>
20000404:	cd0d                	beqz	a0,2000043e <handler_irq_external+0x2be>
20000406:	000a2503          	lw	a0,0(s4)
2000040a:	c909                	beqz	a0,2000041c <handler_irq_external+0x29c>
2000040c:	e0010517          	auipc	a0,0xe0010
20000410:	c8050513          	addi	a0,a0,-896 # 1008c <handler_irq_external.kLogFields.20>
20000414:	4581                	li	a1,0
20000416:	69d000ef          	jal	ra,200012b2 <base_log_internal_dv>
2000041a:	a829                	j	20000434 <handler_irq_external+0x2b4>
2000041c:	00002597          	auipc	a1,0x2
20000420:	16058593          	addi	a1,a1,352 # 2000257c <__udivdi3+0x3f8>
20000424:	0800                	addi	s0,sp,16
20000426:	4651                	li	a2,20
20000428:	8522                	mv	a0,s0
2000042a:	473010ef          	jal	ra,2000209c <memcpy>
2000042e:	8522                	mv	a0,s0
20000430:	5d9000ef          	jal	ra,20001208 <base_log_internal_core>
20000434:	6531                	lui	a0,0xc
20000436:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000043a:	7c2010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:270
        "dif_gpio_irq_acknowledge failed");

  // Complete the IRQ at PLIC.
  CHECK(dif_plic_irq_complete(&plic, kTopEarlgreyPlicTargetIbex0,
2000043e:	f0000517          	auipc	a0,0xf0000
20000442:	bca50513          	addi	a0,a0,-1078 # 10000008 <_data_end>
20000446:	1050                	addi	a2,sp,36
20000448:	4581                	li	a1,0
2000044a:	51b000ef          	jal	ra,20001164 <dif_plic_irq_complete>
2000044e:	cd0d                	beqz	a0,20000488 <handler_irq_external+0x308>
20000450:	000a2503          	lw	a0,0(s4)
20000454:	c909                	beqz	a0,20000466 <handler_irq_external+0x2e6>
20000456:	e0010517          	auipc	a0,0xe0010
2000045a:	c4a50513          	addi	a0,a0,-950 # 100a0 <handler_irq_external.kLogFields.23>
2000045e:	4581                	li	a1,0
20000460:	653000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000464:	a829                	j	2000047e <handler_irq_external+0x2fe>
20000466:	00002597          	auipc	a1,0x2
2000046a:	12a58593          	addi	a1,a1,298 # 20002590 <__udivdi3+0x40c>
2000046e:	0800                	addi	s0,sp,16
20000470:	4651                	li	a2,20
20000472:	8522                	mv	a0,s0
20000474:	429010ef          	jal	ra,2000209c <memcpy>
20000478:	8522                	mv	a0,s0
2000047a:	58f000ef          	jal	ra,20001208 <base_log_internal_core>
2000047e:	6531                	lui	a0,0xc
20000480:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000484:	778010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:273
                              &plic_irq_id) == kDifPlicOk,
        "dif_plic_irq_complete failed");
}
20000488:	5fa2                	lw	t6,40(sp)
2000048a:	5f32                	lw	t5,44(sp)
2000048c:	5ec2                	lw	t4,48(sp)
2000048e:	5e52                	lw	t3,52(sp)
20000490:	5ae2                	lw	s5,56(sp)
20000492:	5a72                	lw	s4,60(sp)
20000494:	4986                	lw	s3,64(sp)
20000496:	4916                	lw	s2,68(sp)
20000498:	48a6                	lw	a7,72(sp)
2000049a:	4836                	lw	a6,76(sp)
2000049c:	47c6                	lw	a5,80(sp)
2000049e:	4756                	lw	a4,84(sp)
200004a0:	46e6                	lw	a3,88(sp)
200004a2:	4676                	lw	a2,92(sp)
200004a4:	5586                	lw	a1,96(sp)
200004a6:	5516                	lw	a0,100(sp)
200004a8:	54a6                	lw	s1,104(sp)
200004aa:	5436                	lw	s0,108(sp)
200004ac:	53c6                	lw	t2,112(sp)
200004ae:	5356                	lw	t1,116(sp)
200004b0:	52e6                	lw	t0,120(sp)
200004b2:	50f6                	lw	ra,124(sp)
200004b4:	6109                	addi	sp,sp,128
200004b6:	30200073          	mret

200004ba <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:277

const test_config_t kTestConfig;

bool test_main(void) {
200004ba:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:279
  // Initialize the pinmux - this assigns MIO0-31 to GPIOs.
  pinmux_init();
200004bc:	ce86                	sw	ra,92(sp)
200004be:	cca2                	sw	s0,88(sp)
200004c0:	caa6                	sw	s1,84(sp)
200004c2:	c8ca                	sw	s2,80(sp)
200004c4:	c6ce                	sw	s3,76(sp)
200004c6:	c4d2                	sw	s4,72(sp)
200004c8:	c2d6                	sw	s5,68(sp)
200004ca:	c0da                	sw	s6,64(sp)
200004cc:	de5e                	sw	s7,60(sp)
200004ce:	dc62                	sw	s8,56(sp)
200004d0:	da66                	sw	s9,52(sp)
200004d2:	d86a                	sw	s10,48(sp)
200004d4:	d66e                	sw	s11,44(sp)
200004d6:	4eb000ef          	jal	ra,200011c0 <pinmux_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:284

  // Initialize the GPIO.
  dif_gpio_params_t gpio_params = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_GPIO_BASE_ADDR)};
  CHECK(dif_gpio_init(gpio_params, &gpio) == kDifGpioOk,
200004da:	f0000597          	auipc	a1,0xf0000
200004de:	b3658593          	addi	a1,a1,-1226 # 10000010 <gpio>
200004e2:	40040537          	lui	a0,0x40040
200004e6:	7d2000ef          	jal	ra,20000cb8 <dif_gpio_init>
200004ea:	00002597          	auipc	a1,0x2
200004ee:	75e58593          	addi	a1,a1,1886 # 20002c48 <kDeviceLogBypassUartAddress>
200004f2:	0005a903          	lw	s2,0(a1)
200004f6:	cd05                	beqz	a0,2000052e <test_main+0x74>
200004f8:	00090a63          	beqz	s2,2000050c <test_main+0x52>
200004fc:	e0010517          	auipc	a0,0xe0010
20000500:	bb850513          	addi	a0,a0,-1096 # 100b4 <test_main.kLogFields>
20000504:	4581                	li	a1,0
20000506:	5ad000ef          	jal	ra,200012b2 <base_log_internal_dv>
2000050a:	a829                	j	20000524 <test_main+0x6a>
2000050c:	00002597          	auipc	a1,0x2
20000510:	09858593          	addi	a1,a1,152 # 200025a4 <__udivdi3+0x420>
20000514:	0820                	addi	s0,sp,24
20000516:	4651                	li	a2,20
20000518:	8522                	mv	a0,s0
2000051a:	383010ef          	jal	ra,2000209c <memcpy>
2000051e:	8522                	mv	a0,s0
20000520:	4e9000ef          	jal	ra,20001208 <base_log_internal_core>
20000524:	6531                	lui	a0,0xc
20000526:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000052a:	6d2010ef          	jal	ra,20001bfc <test_status_set>
plic_init_with_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:69
  LOG_INFO("Initializing the PLIC.");
2000052e:	02090a63          	beqz	s2,20000562 <test_main+0xa8>
20000532:	e0010517          	auipc	a0,0xe0010
20000536:	b9650513          	addi	a0,a0,-1130 # 100c8 <plic_init_with_irqs.kLogFields>
2000053a:	4581                	li	a1,0
2000053c:	577000ef          	jal	ra,200012b2 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:71
  CHECK(dif_plic_init((dif_plic_params_t){.base_addr = base_addr}, plic) ==
20000540:	f0000597          	auipc	a1,0xf0000
20000544:	ac858593          	addi	a1,a1,-1336 # 10000008 <_data_end>
20000548:	41010537          	lui	a0,0x41010
2000054c:	289000ef          	jal	ra,20000fd4 <dif_plic_init>
20000550:	cd39                	beqz	a0,200005ae <test_main+0xf4>
20000552:	e0010517          	auipc	a0,0xe0010
20000556:	b8a50513          	addi	a0,a0,-1142 # 100dc <plic_init_with_irqs.kLogFields.28>
2000055a:	4581                	li	a1,0
2000055c:	557000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000560:	a091                	j	200005a4 <test_main+0xea>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:69
  LOG_INFO("Initializing the PLIC.");
20000562:	00002597          	auipc	a1,0x2
20000566:	05a58593          	addi	a1,a1,90 # 200025bc <kTestConfig+0x4>
2000056a:	0820                	addi	s0,sp,24
2000056c:	4651                	li	a2,20
2000056e:	8522                	mv	a0,s0
20000570:	32d010ef          	jal	ra,2000209c <memcpy>
20000574:	8522                	mv	a0,s0
20000576:	493000ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:71
  CHECK(dif_plic_init((dif_plic_params_t){.base_addr = base_addr}, plic) ==
2000057a:	f0000597          	auipc	a1,0xf0000
2000057e:	a8e58593          	addi	a1,a1,-1394 # 10000008 <_data_end>
20000582:	41010537          	lui	a0,0x41010
20000586:	24f000ef          	jal	ra,20000fd4 <dif_plic_init>
2000058a:	c115                	beqz	a0,200005ae <test_main+0xf4>
2000058c:	00002597          	auipc	a1,0x2
20000590:	04458593          	addi	a1,a1,68 # 200025d0 <kTestConfig+0x18>
20000594:	0820                	addi	s0,sp,24
20000596:	4651                	li	a2,20
20000598:	8522                	mv	a0,s0
2000059a:	303010ef          	jal	ra,2000209c <memcpy>
2000059e:	8522                	mv	a0,s0
200005a0:	469000ef          	jal	ra,20001208 <base_log_internal_core>
200005a4:	6531                	lui	a0,0xc
200005a6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005aa:	652010ef          	jal	ra,20001bfc <test_status_set>
200005ae:	02100413          	li	s0,33
200005b2:	f0000497          	auipc	s1,0xf0000
200005b6:	a5648493          	addi	s1,s1,-1450 # 10000008 <_data_end>
200005ba:	04100d93          	li	s11,65
200005be:	00002d17          	auipc	s10,0x2
200005c2:	04ed0d13          	addi	s10,s10,78 # 2000260c <kTestConfig+0x54>
200005c6:	01810993          	addi	s3,sp,24
200005ca:	6531                	lui	a0,0xc
200005cc:	aad50a13          	addi	s4,a0,-1363 # baad <_stack_size+0x9aad>
200005d0:	e0010a97          	auipc	s5,0xe0010
200005d4:	b48a8a93          	addi	s5,s5,-1208 # 10118 <plic_init_with_irqs.kLogFields.37>
200005d8:	00002b17          	auipc	s6,0x2
200005dc:	020b0b13          	addi	s6,s6,32 # 200025f8 <kTestConfig+0x40>
200005e0:	e0010b97          	auipc	s7,0xe0010
200005e4:	b24b8b93          	addi	s7,s7,-1244 # 10104 <plic_init_with_irqs.kLogFields.34>
200005e8:	00002c17          	auipc	s8,0x2
200005ec:	ffcc0c13          	addi	s8,s8,-4 # 200025e4 <kTestConfig+0x2c>
200005f0:	e0010c97          	auipc	s9,0xe0010
200005f4:	b00c8c93          	addi	s9,s9,-1280 # 100f0 <plic_init_with_irqs.kLogFields.31>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:79
    CHECK(dif_plic_irq_set_trigger(plic, plic_irq_id, kDifPlicIrqTriggerEdge) ==
200005f8:	8526                	mv	a0,s1
200005fa:	85a2                	mv	a1,s0
200005fc:	4601                	li	a2,0
200005fe:	2a9000ef          	jal	ra,200010a6 <dif_plic_irq_set_trigger>
20000602:	c11d                	beqz	a0,20000628 <test_main+0x16e>
20000604:	00090763          	beqz	s2,20000612 <test_main+0x158>
20000608:	8566                	mv	a0,s9
2000060a:	4581                	li	a1,0
2000060c:	4a7000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000610:	a809                	j	20000622 <test_main+0x168>
20000612:	4651                	li	a2,20
20000614:	854e                	mv	a0,s3
20000616:	85e2                	mv	a1,s8
20000618:	285010ef          	jal	ra,2000209c <memcpy>
2000061c:	854e                	mv	a0,s3
2000061e:	3eb000ef          	jal	ra,20001208 <base_log_internal_core>
20000622:	8552                	mv	a0,s4
20000624:	5d8010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:84
    CHECK(dif_plic_irq_set_priority(plic, plic_irq_id, 0x1) == kDifPlicOk,
20000628:	4605                	li	a2,1
2000062a:	8526                	mv	a0,s1
2000062c:	85a2                	mv	a1,s0
2000062e:	2b9000ef          	jal	ra,200010e6 <dif_plic_irq_set_priority>
20000632:	c11d                	beqz	a0,20000658 <test_main+0x19e>
20000634:	00090763          	beqz	s2,20000642 <test_main+0x188>
20000638:	855e                	mv	a0,s7
2000063a:	4581                	li	a1,0
2000063c:	477000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000640:	a809                	j	20000652 <test_main+0x198>
20000642:	4651                	li	a2,20
20000644:	854e                	mv	a0,s3
20000646:	85da                	mv	a1,s6
20000648:	255010ef          	jal	ra,2000209c <memcpy>
2000064c:	854e                	mv	a0,s3
2000064e:	3bb000ef          	jal	ra,20001208 <base_log_internal_core>
20000652:	8552                	mv	a0,s4
20000654:	5a8010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:88
    CHECK(
20000658:	8526                	mv	a0,s1
2000065a:	85a2                	mv	a1,s0
2000065c:	4601                	li	a2,0
2000065e:	4681                	li	a3,0
20000660:	201000ef          	jal	ra,20001060 <dif_plic_irq_set_enabled>
20000664:	c11d                	beqz	a0,2000068a <test_main+0x1d0>
20000666:	00090763          	beqz	s2,20000674 <test_main+0x1ba>
2000066a:	8556                	mv	a0,s5
2000066c:	4581                	li	a1,0
2000066e:	445000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000672:	a809                	j	20000684 <test_main+0x1ca>
20000674:	4651                	li	a2,20
20000676:	854e                	mv	a0,s3
20000678:	85ea                	mv	a1,s10
2000067a:	223010ef          	jal	ra,2000209c <memcpy>
2000067e:	854e                	mv	a0,s3
20000680:	389000ef          	jal	ra,20001208 <base_log_internal_core>
20000684:	8552                	mv	a0,s4
20000686:	576010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:75
  for (uint32_t i = 0; i < kNumGpios; ++i) {
2000068a:	0405                	addi	s0,s0,1
2000068c:	f7b416e3          	bne	s0,s11,200005f8 <test_main+0x13e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:95
  CHECK(dif_plic_target_set_threshold(plic, kTopEarlgreyPlicTargetIbex0, 0x0) ==
20000690:	f0000517          	auipc	a0,0xf0000
20000694:	97850513          	addi	a0,a0,-1672 # 10000008 <_data_end>
20000698:	4581                	li	a1,0
2000069a:	4601                	li	a2,0
2000069c:	26b000ef          	jal	ra,20001106 <dif_plic_target_set_threshold>
200006a0:	cd05                	beqz	a0,200006d8 <test_main+0x21e>
200006a2:	00090a63          	beqz	s2,200006b6 <test_main+0x1fc>
200006a6:	e0010517          	auipc	a0,0xe0010
200006aa:	a8650513          	addi	a0,a0,-1402 # 1012c <plic_init_with_irqs.kLogFields.40>
200006ae:	4581                	li	a1,0
200006b0:	403000ef          	jal	ra,200012b2 <base_log_internal_dv>
200006b4:	a829                	j	200006ce <test_main+0x214>
200006b6:	00002597          	auipc	a1,0x2
200006ba:	f6a58593          	addi	a1,a1,-150 # 20002620 <kTestConfig+0x68>
200006be:	0820                	addi	s0,sp,24
200006c0:	4651                	li	a2,20
200006c2:	8522                	mv	a0,s0
200006c4:	1d9010ef          	jal	ra,2000209c <memcpy>
200006c8:	8522                	mv	a0,s0
200006ca:	33f000ef          	jal	ra,20001208 <base_log_internal_core>
200006ce:	6531                	lui	a0,0xc
200006d0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200006d4:	528010ef          	jal	ra,20001bfc <test_status_set>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:293
  mmio_region_t plic_base_addr =
      mmio_region_from_addr(TOP_EARLGREY_RV_PLIC_BASE_ADDR);
  plic_init_with_irqs(plic_base_addr, &plic);

  // Enable the external IRQ at Ibex.
  irq_global_ctrl(true);
200006d8:	4505                	li	a0,1
200006da:	255010ef          	jal	ra,2000212e <irq_global_ctrl>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:294
  irq_external_ctrl(true);
200006de:	4505                	li	a0,1
200006e0:	261010ef          	jal	ra,20002140 <irq_external_ctrl>
gpio_output_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:107
  LOG_INFO("Starting GPIO output test");
200006e4:	02090b63          	beqz	s2,2000071a <test_main+0x260>
200006e8:	e0010517          	auipc	a0,0xe0010
200006ec:	a5850513          	addi	a0,a0,-1448 # 10140 <gpio_output_test.kLogFields>
200006f0:	4581                	li	a1,0
200006f2:	3c1000ef          	jal	ra,200012b2 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:110
  CHECK(dif_gpio_output_set_enabled_all(gpio, kGpiosAllowedMask) == kDifGpioOk,
200006f6:	f0000517          	auipc	a0,0xf0000
200006fa:	91a50513          	addi	a0,a0,-1766 # 10000010 <gpio>
200006fe:	fff105b7          	lui	a1,0xfff10
20000702:	15fd                	addi	a1,a1,-1
20000704:	037000ef          	jal	ra,20000f3a <dif_gpio_output_set_enabled_all>
20000708:	c125                	beqz	a0,20000768 <test_main+0x2ae>
2000070a:	e0010517          	auipc	a0,0xe0010
2000070e:	a4a50513          	addi	a0,a0,-1462 # 10154 <gpio_output_test.kLogFields.44>
20000712:	4581                	li	a1,0
20000714:	39f000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000718:	a099                	j	2000075e <test_main+0x2a4>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:107
  LOG_INFO("Starting GPIO output test");
2000071a:	00002597          	auipc	a1,0x2
2000071e:	f1a58593          	addi	a1,a1,-230 # 20002634 <kTestConfig+0x7c>
20000722:	0820                	addi	s0,sp,24
20000724:	4651                	li	a2,20
20000726:	8522                	mv	a0,s0
20000728:	175010ef          	jal	ra,2000209c <memcpy>
2000072c:	8522                	mv	a0,s0
2000072e:	2db000ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:110
  CHECK(dif_gpio_output_set_enabled_all(gpio, kGpiosAllowedMask) == kDifGpioOk,
20000732:	f0000517          	auipc	a0,0xf0000
20000736:	8de50513          	addi	a0,a0,-1826 # 10000010 <gpio>
2000073a:	fff105b7          	lui	a1,0xfff10
2000073e:	15fd                	addi	a1,a1,-1
20000740:	7fa000ef          	jal	ra,20000f3a <dif_gpio_output_set_enabled_all>
20000744:	c115                	beqz	a0,20000768 <test_main+0x2ae>
20000746:	00002597          	auipc	a1,0x2
2000074a:	f0258593          	addi	a1,a1,-254 # 20002648 <kTestConfig+0x90>
2000074e:	0820                	addi	s0,sp,24
20000750:	4651                	li	a2,20
20000752:	8522                	mv	a0,s0
20000754:	149010ef          	jal	ra,2000209c <memcpy>
20000758:	8522                	mv	a0,s0
2000075a:	2af000ef          	jal	ra,20001208 <base_log_internal_core>
2000075e:	6531                	lui	a0,0xc
20000760:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000764:	498010ef          	jal	ra,20001bfc <test_status_set>
20000768:	4c01                	li	s8,0
2000076a:	6541                	lui	a0,0x10
2000076c:	fff50b13          	addi	s6,a0,-1 # ffff <_stack_size+0xdfff>
20000770:	4a85                	li	s5,1
20000772:	f0000d97          	auipc	s11,0xf0000
20000776:	89ed8d93          	addi	s11,s11,-1890 # 10000010 <gpio>
2000077a:	01410993          	addi	s3,sp,20
2000077e:	02000b93          	li	s7,32
20000782:	00002517          	auipc	a0,0x2
20000786:	f0250513          	addi	a0,a0,-254 # 20002684 <kTestConfig+0xcc>
2000078a:	c02a                	sw	a0,0(sp)
2000078c:	01810a13          	addi	s4,sp,24
20000790:	6531                	lui	a0,0xc
20000792:	aad50d13          	addi	s10,a0,-1363 # baad <_stack_size+0x9aad>
20000796:	e0010517          	auipc	a0,0xe0010
2000079a:	9fa50513          	addi	a0,a0,-1542 # 10190 <gpio_output_test.kLogFields.53>
2000079e:	c62a                	sw	a0,12(sp)
200007a0:	00002517          	auipc	a0,0x2
200007a4:	ed050513          	addi	a0,a0,-304 # 20002670 <kTestConfig+0xb8>
200007a8:	c42a                	sw	a0,8(sp)
200007aa:	e0010517          	auipc	a0,0xe0010
200007ae:	9d250513          	addi	a0,a0,-1582 # 1017c <gpio_output_test.kLogFields.50>
200007b2:	c82a                	sw	a0,16(sp)
200007b4:	00002517          	auipc	a0,0x2
200007b8:	ea850513          	addi	a0,a0,-344 # 2000265c <kTestConfig+0xa4>
200007bc:	c22a                	sw	a0,4(sp)
200007be:	e0010c97          	auipc	s9,0xe0010
200007c2:	9aac8c93          	addi	s9,s9,-1622 # 10168 <gpio_output_test.kLogFields.47>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:115
    uint32_t gpio_val = 1 << i;
200007c6:	018a94b3          	sll	s1,s5,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:116
    CHECK(dif_gpio_write_all(gpio, gpio_val) == kDifGpioOk,
200007ca:	856e                	mv	a0,s11
200007cc:	85a6                	mv	a1,s1
200007ce:	700000ef          	jal	ra,20000ece <dif_gpio_write_all>
200007d2:	c11d                	beqz	a0,200007f8 <test_main+0x33e>
200007d4:	00090763          	beqz	s2,200007e2 <test_main+0x328>
200007d8:	8566                	mv	a0,s9
200007da:	4581                	li	a1,0
200007dc:	2d7000ef          	jal	ra,200012b2 <base_log_internal_dv>
200007e0:	a809                	j	200007f2 <test_main+0x338>
200007e2:	4651                	li	a2,20
200007e4:	8552                	mv	a0,s4
200007e6:	4592                	lw	a1,4(sp)
200007e8:	0b5010ef          	jal	ra,2000209c <memcpy>
200007ec:	8552                	mv	a0,s4
200007ee:	21b000ef          	jal	ra,20001208 <base_log_internal_core>
200007f2:	856a                	mv	a0,s10
200007f4:	408010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:121
    CHECK(dif_gpio_read_all(gpio, &read_val) == kDifGpioOk,
200007f8:	856e                	mv	a0,s11
200007fa:	85ce                	mv	a1,s3
200007fc:	6a6000ef          	jal	ra,20000ea2 <dif_gpio_read_all>
20000800:	c11d                	beqz	a0,20000826 <test_main+0x36c>
20000802:	00090763          	beqz	s2,20000810 <test_main+0x356>
20000806:	4542                	lw	a0,16(sp)
20000808:	4581                	li	a1,0
2000080a:	2a9000ef          	jal	ra,200012b2 <base_log_internal_dv>
2000080e:	a809                	j	20000820 <test_main+0x366>
20000810:	4651                	li	a2,20
20000812:	8552                	mv	a0,s4
20000814:	45a2                	lw	a1,8(sp)
20000816:	087010ef          	jal	ra,2000209c <memcpy>
2000081a:	8552                	mv	a0,s4
2000081c:	1ed000ef          	jal	ra,20001208 <base_log_internal_core>
20000820:	856a                	mv	a0,s10
20000822:	3da010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:129
    read_val &= kChipGpiosMask;
20000826:	4552                	lw	a0,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:128
    gpio_val &= kChipGpiosMask;
20000828:	0164f433          	and	s0,s1,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:129
    read_val &= kChipGpiosMask;
2000082c:	016574b3          	and	s1,a0,s6
20000830:	ca26                	sw	s1,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:130
    CHECK(gpio_val == read_val, "GPIOs mismatched (written = %x, read = %x)",
20000832:	02940863          	beq	s0,s1,20000862 <test_main+0x3a8>
20000836:	00090963          	beqz	s2,20000848 <test_main+0x38e>
2000083a:	4589                	li	a1,2
2000083c:	4532                	lw	a0,12(sp)
2000083e:	8622                	mv	a2,s0
20000840:	86a6                	mv	a3,s1
20000842:	271000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000846:	a819                	j	2000085c <test_main+0x3a2>
20000848:	4651                	li	a2,20
2000084a:	8552                	mv	a0,s4
2000084c:	4582                	lw	a1,0(sp)
2000084e:	04f010ef          	jal	ra,2000209c <memcpy>
20000852:	8552                	mv	a0,s4
20000854:	85a2                	mv	a1,s0
20000856:	8626                	mv	a2,s1
20000858:	1b1000ef          	jal	ra,20001208 <base_log_internal_core>
2000085c:	856a                	mv	a0,s10
2000085e:	39e010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:114
  for (uint32_t i = 0; i < kNumGpios; ++i) {
20000862:	0c05                	addi	s8,s8,1
20000864:	f77c11e3          	bne	s8,s7,200007c6 <test_main+0x30c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:135
  CHECK(dif_gpio_write_all(gpio, ~kGpiosMask) == kDifGpioOk,
20000868:	effff517          	auipc	a0,0xeffff
2000086c:	7a850513          	addi	a0,a0,1960 # 10000010 <gpio>
20000870:	4581                	li	a1,0
20000872:	65c000ef          	jal	ra,20000ece <dif_gpio_write_all>
20000876:	cd05                	beqz	a0,200008ae <test_main+0x3f4>
20000878:	00090a63          	beqz	s2,2000088c <test_main+0x3d2>
2000087c:	e0010517          	auipc	a0,0xe0010
20000880:	92850513          	addi	a0,a0,-1752 # 101a4 <gpio_output_test.kLogFields.56>
20000884:	4581                	li	a1,0
20000886:	22d000ef          	jal	ra,200012b2 <base_log_internal_dv>
2000088a:	a829                	j	200008a4 <test_main+0x3ea>
2000088c:	00002597          	auipc	a1,0x2
20000890:	e0c58593          	addi	a1,a1,-500 # 20002698 <kTestConfig+0xe0>
20000894:	0820                	addi	s0,sp,24
20000896:	4651                	li	a2,20
20000898:	8522                	mv	a0,s0
2000089a:	003010ef          	jal	ra,2000209c <memcpy>
2000089e:	8522                	mv	a0,s0
200008a0:	169000ef          	jal	ra,20001208 <base_log_internal_core>
200008a4:	6531                	lui	a0,0xc
200008a6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008aa:	352010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:139
  CHECK(dif_gpio_write_all(gpio, kGpiosMask) == kDifGpioOk,
200008ae:	effff517          	auipc	a0,0xeffff
200008b2:	76250513          	addi	a0,a0,1890 # 10000010 <gpio>
200008b6:	55fd                	li	a1,-1
200008b8:	616000ef          	jal	ra,20000ece <dif_gpio_write_all>
200008bc:	cd05                	beqz	a0,200008f4 <test_main+0x43a>
200008be:	00090a63          	beqz	s2,200008d2 <test_main+0x418>
200008c2:	e0010517          	auipc	a0,0xe0010
200008c6:	8f650513          	addi	a0,a0,-1802 # 101b8 <gpio_output_test.kLogFields.58>
200008ca:	4581                	li	a1,0
200008cc:	1e7000ef          	jal	ra,200012b2 <base_log_internal_dv>
200008d0:	a829                	j	200008ea <test_main+0x430>
200008d2:	00002597          	auipc	a1,0x2
200008d6:	dda58593          	addi	a1,a1,-550 # 200026ac <kTestConfig+0xf4>
200008da:	0820                	addi	s0,sp,24
200008dc:	4651                	li	a2,20
200008de:	8522                	mv	a0,s0
200008e0:	7bc010ef          	jal	ra,2000209c <memcpy>
200008e4:	8522                	mv	a0,s0
200008e6:	123000ef          	jal	ra,20001208 <base_log_internal_core>
200008ea:	6531                	lui	a0,0xc
200008ec:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008f0:	30c010ef          	jal	ra,20001bfc <test_status_set>
200008f4:	4c01                	li	s8,0
200008f6:	4a85                	li	s5,1
200008f8:	effffd97          	auipc	s11,0xeffff
200008fc:	718d8d93          	addi	s11,s11,1816 # 10000010 <gpio>
20000900:	01410993          	addi	s3,sp,20
20000904:	02000b93          	li	s7,32
20000908:	00002517          	auipc	a0,0x2
2000090c:	de050513          	addi	a0,a0,-544 # 200026e8 <kTestConfig+0x130>
20000910:	c02a                	sw	a0,0(sp)
20000912:	01810a13          	addi	s4,sp,24
20000916:	6531                	lui	a0,0xc
20000918:	aad50d13          	addi	s10,a0,-1363 # baad <_stack_size+0x9aad>
2000091c:	e0010517          	auipc	a0,0xe0010
20000920:	8d850513          	addi	a0,a0,-1832 # 101f4 <gpio_output_test.kLogFields.64>
20000924:	c62a                	sw	a0,12(sp)
20000926:	00002517          	auipc	a0,0x2
2000092a:	dae50513          	addi	a0,a0,-594 # 200026d4 <kTestConfig+0x11c>
2000092e:	c42a                	sw	a0,8(sp)
20000930:	e0010517          	auipc	a0,0xe0010
20000934:	8b050513          	addi	a0,a0,-1872 # 101e0 <gpio_output_test.kLogFields.62>
20000938:	c82a                	sw	a0,16(sp)
2000093a:	00002517          	auipc	a0,0x2
2000093e:	d8650513          	addi	a0,a0,-634 # 200026c0 <kTestConfig+0x108>
20000942:	c22a                	sw	a0,4(sp)
20000944:	e0010c97          	auipc	s9,0xe0010
20000948:	888c8c93          	addi	s9,s9,-1912 # 101cc <gpio_output_test.kLogFields.60>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:144
    uint32_t gpio_val = ~(1 << i);
2000094c:	018a9533          	sll	a0,s5,s8
20000950:	fff54493          	not	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:145
    CHECK(dif_gpio_write_all(gpio, gpio_val) == kDifGpioOk,
20000954:	856e                	mv	a0,s11
20000956:	85a6                	mv	a1,s1
20000958:	576000ef          	jal	ra,20000ece <dif_gpio_write_all>
2000095c:	c11d                	beqz	a0,20000982 <test_main+0x4c8>
2000095e:	00090763          	beqz	s2,2000096c <test_main+0x4b2>
20000962:	8566                	mv	a0,s9
20000964:	4581                	li	a1,0
20000966:	14d000ef          	jal	ra,200012b2 <base_log_internal_dv>
2000096a:	a809                	j	2000097c <test_main+0x4c2>
2000096c:	4651                	li	a2,20
2000096e:	8552                	mv	a0,s4
20000970:	4592                	lw	a1,4(sp)
20000972:	72a010ef          	jal	ra,2000209c <memcpy>
20000976:	8552                	mv	a0,s4
20000978:	091000ef          	jal	ra,20001208 <base_log_internal_core>
2000097c:	856a                	mv	a0,s10
2000097e:	27e010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:150
    CHECK(dif_gpio_read_all(gpio, &read_val) == kDifGpioOk,
20000982:	856e                	mv	a0,s11
20000984:	85ce                	mv	a1,s3
20000986:	2b31                	jal	20000ea2 <dif_gpio_read_all>
20000988:	c11d                	beqz	a0,200009ae <test_main+0x4f4>
2000098a:	00090763          	beqz	s2,20000998 <test_main+0x4de>
2000098e:	4542                	lw	a0,16(sp)
20000990:	4581                	li	a1,0
20000992:	121000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000996:	a809                	j	200009a8 <test_main+0x4ee>
20000998:	4651                	li	a2,20
2000099a:	8552                	mv	a0,s4
2000099c:	45a2                	lw	a1,8(sp)
2000099e:	6fe010ef          	jal	ra,2000209c <memcpy>
200009a2:	8552                	mv	a0,s4
200009a4:	065000ef          	jal	ra,20001208 <base_log_internal_core>
200009a8:	856a                	mv	a0,s10
200009aa:	252010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:158
    read_val &= kChipGpiosMask;
200009ae:	4552                	lw	a0,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:157
    gpio_val &= kChipGpiosMask;
200009b0:	0164f433          	and	s0,s1,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:158
    read_val &= kChipGpiosMask;
200009b4:	016574b3          	and	s1,a0,s6
200009b8:	ca26                	sw	s1,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:159
    CHECK(gpio_val == read_val, "GPIOs mismatched (written = %x, read = %x)",
200009ba:	02940863          	beq	s0,s1,200009ea <test_main+0x530>
200009be:	00090963          	beqz	s2,200009d0 <test_main+0x516>
200009c2:	4589                	li	a1,2
200009c4:	4532                	lw	a0,12(sp)
200009c6:	8622                	mv	a2,s0
200009c8:	86a6                	mv	a3,s1
200009ca:	0e9000ef          	jal	ra,200012b2 <base_log_internal_dv>
200009ce:	a819                	j	200009e4 <test_main+0x52a>
200009d0:	4651                	li	a2,20
200009d2:	8552                	mv	a0,s4
200009d4:	4582                	lw	a1,0(sp)
200009d6:	6c6010ef          	jal	ra,2000209c <memcpy>
200009da:	8552                	mv	a0,s4
200009dc:	85a2                	mv	a1,s0
200009de:	8626                	mv	a2,s1
200009e0:	029000ef          	jal	ra,20001208 <base_log_internal_core>
200009e4:	856a                	mv	a0,s10
200009e6:	216010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:143
  for (uint32_t i = 0; i < kNumGpios; ++i) {
200009ea:	0c05                	addi	s8,s8,1
200009ec:	f77c10e3          	bne	s8,s7,2000094c <test_main+0x492>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:164
  CHECK(dif_gpio_write_all(gpio, kGpiosMask) == kDifGpioOk,
200009f0:	effff517          	auipc	a0,0xeffff
200009f4:	62050513          	addi	a0,a0,1568 # 10000010 <gpio>
200009f8:	55fd                	li	a1,-1
200009fa:	29d1                	jal	20000ece <dif_gpio_write_all>
200009fc:	cd05                	beqz	a0,20000a34 <test_main+0x57a>
200009fe:	00090a63          	beqz	s2,20000a12 <test_main+0x558>
20000a02:	e0010517          	auipc	a0,0xe0010
20000a06:	80650513          	addi	a0,a0,-2042 # 10208 <gpio_output_test.kLogFields.66>
20000a0a:	4581                	li	a1,0
20000a0c:	0a7000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000a10:	a829                	j	20000a2a <test_main+0x570>
20000a12:	00002597          	auipc	a1,0x2
20000a16:	cea58593          	addi	a1,a1,-790 # 200026fc <kTestConfig+0x144>
20000a1a:	0820                	addi	s0,sp,24
20000a1c:	4651                	li	a2,20
20000a1e:	8522                	mv	a0,s0
20000a20:	67c010ef          	jal	ra,2000209c <memcpy>
20000a24:	8522                	mv	a0,s0
20000a26:	7e2000ef          	jal	ra,20001208 <base_log_internal_core>
20000a2a:	6531                	lui	a0,0xc
20000a2c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a30:	1cc010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:168
  CHECK(dif_gpio_write_all(gpio, ~kGpiosMask) == kDifGpioOk,
20000a34:	effff517          	auipc	a0,0xeffff
20000a38:	5dc50513          	addi	a0,a0,1500 # 10000010 <gpio>
20000a3c:	4581                	li	a1,0
20000a3e:	2941                	jal	20000ece <dif_gpio_write_all>
20000a40:	cd05                	beqz	a0,20000a78 <test_main+0x5be>
20000a42:	00090a63          	beqz	s2,20000a56 <test_main+0x59c>
20000a46:	e000f517          	auipc	a0,0xe000f
20000a4a:	7d650513          	addi	a0,a0,2006 # 1021c <gpio_output_test.kLogFields.68>
20000a4e:	4581                	li	a1,0
20000a50:	063000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000a54:	a829                	j	20000a6e <test_main+0x5b4>
20000a56:	00002597          	auipc	a1,0x2
20000a5a:	cba58593          	addi	a1,a1,-838 # 20002710 <kTestConfig+0x158>
20000a5e:	0820                	addi	s0,sp,24
20000a60:	4651                	li	a2,20
20000a62:	8522                	mv	a0,s0
20000a64:	638010ef          	jal	ra,2000209c <memcpy>
20000a68:	8522                	mv	a0,s0
20000a6a:	79e000ef          	jal	ra,20001208 <base_log_internal_core>
20000a6e:	6531                	lui	a0,0xc
20000a70:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a74:	188010ef          	jal	ra,20001bfc <test_status_set>
gpio_input_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:183
  LOG_INFO("Starting GPIO input test");
20000a78:	02090d63          	beqz	s2,20000ab2 <test_main+0x5f8>
20000a7c:	e000f517          	auipc	a0,0xe000f
20000a80:	7b450513          	addi	a0,a0,1972 # 10230 <gpio_input_test.kLogFields>
20000a84:	4581                	li	a1,0
20000a86:	02d000ef          	jal	ra,200012b2 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:186
  CHECK(dif_gpio_input_noise_filter_set_enabled(
20000a8a:	effff517          	auipc	a0,0xeffff
20000a8e:	58650513          	addi	a0,a0,1414 # 10000010 <gpio>
20000a92:	fff105b7          	lui	a1,0xfff10
20000a96:	fff58413          	addi	s0,a1,-1 # fff0ffff <_data_init_start+0xdff0cc1f>
20000a9a:	4605                	li	a2,1
20000a9c:	85a2                	mv	a1,s0
20000a9e:	2339                	jal	20000fac <dif_gpio_input_noise_filter_set_enabled>
20000aa0:	cd3d                	beqz	a0,20000b1e <test_main+0x664>
20000aa2:	e000f517          	auipc	a0,0xe000f
20000aa6:	7a250513          	addi	a0,a0,1954 # 10244 <gpio_input_test.kLogFields.71>
20000aaa:	4581                	li	a1,0
20000aac:	007000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000ab0:	a0a9                	j	20000afa <test_main+0x640>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:183
  LOG_INFO("Starting GPIO input test");
20000ab2:	00002597          	auipc	a1,0x2
20000ab6:	c7258593          	addi	a1,a1,-910 # 20002724 <kTestConfig+0x16c>
20000aba:	0820                	addi	s0,sp,24
20000abc:	4651                	li	a2,20
20000abe:	8522                	mv	a0,s0
20000ac0:	5dc010ef          	jal	ra,2000209c <memcpy>
20000ac4:	8522                	mv	a0,s0
20000ac6:	742000ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:186
  CHECK(dif_gpio_input_noise_filter_set_enabled(
20000aca:	effff517          	auipc	a0,0xeffff
20000ace:	54650513          	addi	a0,a0,1350 # 10000010 <gpio>
20000ad2:	fff105b7          	lui	a1,0xfff10
20000ad6:	fff58413          	addi	s0,a1,-1 # fff0ffff <_data_init_start+0xdff0cc1f>
20000ada:	4605                	li	a2,1
20000adc:	85a2                	mv	a1,s0
20000ade:	21f9                	jal	20000fac <dif_gpio_input_noise_filter_set_enabled>
20000ae0:	cd39                	beqz	a0,20000b3e <test_main+0x684>
20000ae2:	00002597          	auipc	a1,0x2
20000ae6:	c5658593          	addi	a1,a1,-938 # 20002738 <kTestConfig+0x180>
20000aea:	0820                	addi	s0,sp,24
20000aec:	4651                	li	a2,20
20000aee:	8522                	mv	a0,s0
20000af0:	5ac010ef          	jal	ra,2000209c <memcpy>
20000af4:	8522                	mv	a0,s0
20000af6:	712000ef          	jal	ra,20001208 <base_log_internal_core>
20000afa:	6531                	lui	a0,0xc
20000afc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b00:	0fc010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:191
  CHECK(dif_gpio_irq_set_trigger(gpio, kGpiosAllowedMask,
20000b04:	effff517          	auipc	a0,0xeffff
20000b08:	50c50513          	addi	a0,a0,1292 # 10000010 <gpio>
20000b0c:	fff105b7          	lui	a1,0xfff10
20000b10:	15fd                	addi	a1,a1,-1
20000b12:	4611                	li	a2,4
20000b14:	24cd                	jal	20000df6 <dif_gpio_irq_set_trigger>
20000b16:	cd29                	beqz	a0,20000b70 <test_main+0x6b6>
20000b18:	00091b63          	bnez	s2,20000b2e <test_main+0x674>
20000b1c:	a80d                	j	20000b4e <test_main+0x694>
20000b1e:	effff517          	auipc	a0,0xeffff
20000b22:	4f250513          	addi	a0,a0,1266 # 10000010 <gpio>
20000b26:	4611                	li	a2,4
20000b28:	85a2                	mv	a1,s0
20000b2a:	24f1                	jal	20000df6 <dif_gpio_irq_set_trigger>
20000b2c:	c535                	beqz	a0,20000b98 <test_main+0x6de>
20000b2e:	e000f517          	auipc	a0,0xe000f
20000b32:	72a50513          	addi	a0,a0,1834 # 10258 <gpio_input_test.kLogFields.74>
20000b36:	4581                	li	a1,0
20000b38:	77a000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000b3c:	a02d                	j	20000b66 <test_main+0x6ac>
20000b3e:	effff517          	auipc	a0,0xeffff
20000b42:	4d250513          	addi	a0,a0,1234 # 10000010 <gpio>
20000b46:	4611                	li	a2,4
20000b48:	85a2                	mv	a1,s0
20000b4a:	2475                	jal	20000df6 <dif_gpio_irq_set_trigger>
20000b4c:	c925                	beqz	a0,20000bbc <test_main+0x702>
20000b4e:	00002597          	auipc	a1,0x2
20000b52:	bfe58593          	addi	a1,a1,-1026 # 2000274c <kTestConfig+0x194>
20000b56:	0820                	addi	s0,sp,24
20000b58:	4651                	li	a2,20
20000b5a:	8522                	mv	a0,s0
20000b5c:	540010ef          	jal	ra,2000209c <memcpy>
20000b60:	8522                	mv	a0,s0
20000b62:	6a6000ef          	jal	ra,20001208 <base_log_internal_core>
20000b66:	6531                	lui	a0,0xc
20000b68:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b6c:	090010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:197
  CHECK(dif_gpio_irq_set_enabled_masked(gpio, kGpiosAllowedMask,
20000b70:	effff517          	auipc	a0,0xeffff
20000b74:	4a050513          	addi	a0,a0,1184 # 10000010 <gpio>
20000b78:	fff105b7          	lui	a1,0xfff10
20000b7c:	15fd                	addi	a1,a1,-1
20000b7e:	4605                	li	a2,1
20000b80:	2c01                	jal	20000d90 <dif_gpio_irq_set_enabled_masked>
20000b82:	c925                	beqz	a0,20000bf2 <test_main+0x738>
20000b84:	04090663          	beqz	s2,20000bd0 <test_main+0x716>
20000b88:	e000f517          	auipc	a0,0xe000f
20000b8c:	6e450513          	addi	a0,a0,1764 # 1026c <gpio_input_test.kLogFields.77>
20000b90:	4581                	li	a1,0
20000b92:	720000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000b96:	a889                	j	20000be8 <test_main+0x72e>
20000b98:	effff517          	auipc	a0,0xeffff
20000b9c:	47850513          	addi	a0,a0,1144 # 10000010 <gpio>
20000ba0:	fff105b7          	lui	a1,0xfff10
20000ba4:	15fd                	addi	a1,a1,-1
20000ba6:	4605                	li	a2,1
20000ba8:	22e5                	jal	20000d90 <dif_gpio_irq_set_enabled_masked>
20000baa:	fd79                	bnez	a0,20000b88 <test_main+0x6ce>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:202
  CHECK(dif_gpio_output_set_enabled_all(gpio, 0u) == kDifGpioOk,
20000bac:	effff517          	auipc	a0,0xeffff
20000bb0:	46450513          	addi	a0,a0,1124 # 10000010 <gpio>
20000bb4:	4581                	li	a1,0
20000bb6:	2651                	jal	20000f3a <dif_gpio_output_set_enabled_all>
20000bb8:	e531                	bnez	a0,20000c04 <test_main+0x74a>
20000bba:	a069                	j	20000c44 <test_main+0x78a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:197
  CHECK(dif_gpio_irq_set_enabled_masked(gpio, kGpiosAllowedMask,
20000bbc:	effff517          	auipc	a0,0xeffff
20000bc0:	45450513          	addi	a0,a0,1108 # 10000010 <gpio>
20000bc4:	fff105b7          	lui	a1,0xfff10
20000bc8:	15fd                	addi	a1,a1,-1
20000bca:	4605                	li	a2,1
20000bcc:	22d1                	jal	20000d90 <dif_gpio_irq_set_enabled_masked>
20000bce:	c139                	beqz	a0,20000c14 <test_main+0x75a>
20000bd0:	00002597          	auipc	a1,0x2
20000bd4:	b9058593          	addi	a1,a1,-1136 # 20002760 <kTestConfig+0x1a8>
20000bd8:	0820                	addi	s0,sp,24
20000bda:	4651                	li	a2,20
20000bdc:	8522                	mv	a0,s0
20000bde:	4be010ef          	jal	ra,2000209c <memcpy>
20000be2:	8522                	mv	a0,s0
20000be4:	624000ef          	jal	ra,20001208 <base_log_internal_core>
20000be8:	6531                	lui	a0,0xc
20000bea:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000bee:	00e010ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:202
  CHECK(dif_gpio_output_set_enabled_all(gpio, 0u) == kDifGpioOk,
20000bf2:	effff517          	auipc	a0,0xeffff
20000bf6:	41e50513          	addi	a0,a0,1054 # 10000010 <gpio>
20000bfa:	4581                	li	a1,0
20000bfc:	2e3d                	jal	20000f3a <dif_gpio_output_set_enabled_all>
20000bfe:	c139                	beqz	a0,20000c44 <test_main+0x78a>
20000c00:	02090163          	beqz	s2,20000c22 <test_main+0x768>
20000c04:	e000f517          	auipc	a0,0xe000f
20000c08:	67c50513          	addi	a0,a0,1660 # 10280 <gpio_input_test.kLogFields.80>
20000c0c:	4581                	li	a1,0
20000c0e:	6a4000ef          	jal	ra,200012b2 <base_log_internal_dv>
20000c12:	a025                	j	20000c3a <test_main+0x780>
20000c14:	effff517          	auipc	a0,0xeffff
20000c18:	3fc50513          	addi	a0,a0,1020 # 10000010 <gpio>
20000c1c:	4581                	li	a1,0
20000c1e:	2e31                	jal	20000f3a <dif_gpio_output_set_enabled_all>
20000c20:	c115                	beqz	a0,20000c44 <test_main+0x78a>
20000c22:	00002597          	auipc	a1,0x2
20000c26:	b5258593          	addi	a1,a1,-1198 # 20002774 <kTestConfig+0x1bc>
20000c2a:	0820                	addi	s0,sp,24
20000c2c:	4651                	li	a2,20
20000c2e:	8522                	mv	a0,s0
20000c30:	46c010ef          	jal	ra,2000209c <memcpy>
20000c34:	8522                	mv	a0,s0
20000c36:	5d2000ef          	jal	ra,20001208 <base_log_internal_core>
20000c3a:	6531                	lui	a0,0xc
20000c3c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000c40:	7bd000ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:206
  expected_irq_edge = true;
20000c44:	effff597          	auipc	a1,0xeffff
20000c48:	3d058593          	addi	a1,a1,976 # 10000014 <expected_irq_edge>
20000c4c:	4505                	li	a0,1
20000c4e:	00a58023          	sb	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:207
  for (expected_gpio_pin_irq = 0; expected_gpio_pin_irq < kNumChipGpios;
20000c52:	effff517          	auipc	a0,0xeffff
20000c56:	3ba50513          	addi	a0,a0,954 # 1000000c <expected_gpio_pin_irq>
20000c5a:	00052023          	sw	zero,0(a0)
20000c5e:	4114                	lw	a3,0(a0)
20000c60:	463d                	li	a2,15
20000c62:	00d66b63          	bltu	a2,a3,20000c78 <test_main+0x7be>
20000c66:	46c1                	li	a3,16
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000c68:	10500073          	wfi
gpio_input_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:208
       ++expected_gpio_pin_irq) {
20000c6c:	4118                	lw	a4,0(a0)
20000c6e:	0705                	addi	a4,a4,1
20000c70:	c118                	sw	a4,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:207
  for (expected_gpio_pin_irq = 0; expected_gpio_pin_irq < kNumChipGpios;
20000c72:	4118                	lw	a4,0(a0)
20000c74:	fed76ae3          	bltu	a4,a3,20000c68 <test_main+0x7ae>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:213
  expected_irq_edge = false;
20000c78:	00058023          	sb	zero,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:214
  for (expected_gpio_pin_irq = 0; expected_gpio_pin_irq < kNumChipGpios;
20000c7c:	00052023          	sw	zero,0(a0)
20000c80:	410c                	lw	a1,0(a0)
20000c82:	00b66b63          	bltu	a2,a1,20000c98 <test_main+0x7de>
20000c86:	45c1                	li	a1,16
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000c88:	10500073          	wfi
gpio_input_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:215
       ++expected_gpio_pin_irq) {
20000c8c:	4110                	lw	a2,0(a0)
20000c8e:	0605                	addi	a2,a2,1
20000c90:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:214
  for (expected_gpio_pin_irq = 0; expected_gpio_pin_irq < kNumChipGpios;
20000c92:	4110                	lw	a2,0(a0)
20000c94:	feb66ae3          	bltu	a2,a1,20000c88 <test_main+0x7ce>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/gpio_test.c:300

  // Run the tests.
  gpio_output_test(&gpio);
  gpio_input_test(&gpio);

  return true;
20000c98:	4505                	li	a0,1
20000c9a:	5db2                	lw	s11,44(sp)
20000c9c:	5d42                	lw	s10,48(sp)
20000c9e:	5cd2                	lw	s9,52(sp)
20000ca0:	5c62                	lw	s8,56(sp)
20000ca2:	5bf2                	lw	s7,60(sp)
20000ca4:	4b06                	lw	s6,64(sp)
20000ca6:	4a96                	lw	s5,68(sp)
20000ca8:	4a26                	lw	s4,72(sp)
20000caa:	49b6                	lw	s3,76(sp)
20000cac:	4946                	lw	s2,80(sp)
20000cae:	44d6                	lw	s1,84(sp)
20000cb0:	4466                	lw	s0,88(sp)
20000cb2:	40f6                	lw	ra,92(sp)
20000cb4:	6125                	addi	sp,sp,96
20000cb6:	8082                	ret

20000cb8 <dif_gpio_init>:
dif_gpio_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:103

  return kDifGpioOk;
}

dif_gpio_result_t dif_gpio_init(dif_gpio_params_t params, dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000cb8:	c581                	beqz	a1,20000cc0 <dif_gpio_init+0x8>
20000cba:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:107
    return kDifGpioBadArg;
  }

  gpio->params = params;
20000cbc:	c188                	sw	a0,0(a1)
20000cbe:	a011                	j	20000cc2 <dif_gpio_init+0xa>
20000cc0:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:110

  return kDifGpioOk;
}
20000cc2:	8532                	mv	a0,a2
20000cc4:	8082                	ret

20000cc6 <dif_gpio_reset>:
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:113

dif_gpio_result_t dif_gpio_reset(const dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000cc6:	cd15                	beqz	a0,20000d02 <dif_gpio_reset+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:119
    return kDifGpioBadArg;
  }

  // We don't need to write to `GPIO_MASKED_OE_*` and `GPIO_MASKED_OUT_*`
  // since we directly reset `GPIO_DIRECT_OE` and `GPIO_DIRECT_OUT` below.
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000cc8:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cca:	0005a223          	sw	zero,4(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:120
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, 0);
20000cce:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cd0:	0005ae23          	sw	zero,28(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:121
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET, 0);
20000cd4:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cd6:	0005a823          	sw	zero,16(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:122
  mmio_region_write32(gpio->params.base_addr,
20000cda:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cdc:	0205a423          	sw	zero,40(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:124
                      GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000ce0:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ce2:	0205a623          	sw	zero,44(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:126
                      GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000ce6:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ce8:	0205a823          	sw	zero,48(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:128
                      GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000cec:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cee:	0205aa23          	sw	zero,52(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:130
                      GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000cf2:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cf4:	0205ac23          	sw	zero,56(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:133
                      GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET, 0);
  // Also clear all pending interrupts
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000cf8:	410c                	lw	a1,0(a0)
20000cfa:	4501                	li	a0,0
20000cfc:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cfe:	c190                	sw	a2,0(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:137
                      0xFFFFFFFFu);

  return kDifGpioOk;
}
20000d00:	8082                	ret
20000d02:	4509                	li	a0,2
20000d04:	8082                	ret

20000d06 <dif_gpio_irq_is_pending>:
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:141

dif_gpio_result_t dif_gpio_irq_is_pending(const dif_gpio_t *gpio,
                                          dif_gpio_pin_t pin,
                                          bool *is_pending) {
20000d06:	86aa                	mv	a3,a0
20000d08:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:142
  if (gpio == NULL || is_pending == NULL) {
20000d0a:	ca91                	beqz	a3,20000d1e <dif_gpio_irq_is_pending+0x18>
20000d0c:	ca09                	beqz	a2,20000d1e <dif_gpio_irq_is_pending+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
    return kDifGpioBadArg;
  }

  *is_pending = mmio_region_get_bit32(gpio->params.base_addr,
20000d0e:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d10:	4114                	lw	a3,0(a0)
20000d12:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000d14:	00b6d5b3          	srl	a1,a3,a1
20000d18:	8985                	andi	a1,a1,1
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
20000d1a:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:150
                                      GPIO_INTR_STATE_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000d1e:	8082                	ret

20000d20 <dif_gpio_irq_is_pending_all>:
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:153

dif_gpio_result_t dif_gpio_irq_is_pending_all(const dif_gpio_t *gpio,
                                              dif_gpio_state_t *is_pending) {
20000d20:	862a                	mv	a2,a0
20000d22:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:154
  if (gpio == NULL || is_pending == NULL) {
20000d24:	c611                	beqz	a2,20000d30 <dif_gpio_irq_is_pending_all+0x10>
20000d26:	c589                	beqz	a1,20000d30 <dif_gpio_irq_is_pending_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:159
    return kDifGpioBadArg;
  }

  *is_pending =
      mmio_region_read32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET);
20000d28:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d2a:	4110                	lw	a2,0(a0)
20000d2c:	4501                	li	a0,0
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:158
  *is_pending =
20000d2e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:162

  return kDifGpioOk;
}
20000d30:	8082                	ret

20000d32 <dif_gpio_irq_acknowledge>:
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:166

dif_gpio_result_t dif_gpio_irq_acknowledge(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000d32:	c901                	beqz	a0,20000d42 <dif_gpio_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:170
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000d34:	4110                	lw	a2,0(a0)
20000d36:	4501                	li	a0,0
20000d38:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000d3a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d3e:	c20c                	sw	a1,0(a2)
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:174
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000d40:	8082                	ret
20000d42:	4509                	li	a0,2
20000d44:	8082                	ret

20000d46 <dif_gpio_irq_get_enabled>:
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:178

dif_gpio_result_t dif_gpio_irq_get_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t *state) {
20000d46:	86aa                	mv	a3,a0
20000d48:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:179
  if (gpio == NULL || state == NULL) {
20000d4a:	ca89                	beqz	a3,20000d5c <dif_gpio_irq_get_enabled+0x16>
20000d4c:	ca01                	beqz	a2,20000d5c <dif_gpio_irq_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:183
    return kDifGpioBadArg;
  }

  bool is_enabled = mmio_region_get_bit32(gpio->params.base_addr,
20000d4e:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d50:	4154                	lw	a3,4(a0)
20000d52:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d54:	00b6d5b3          	srl	a1,a3,a1
20000d58:	8985                	andi	a1,a1,1
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:185
                                          GPIO_INTR_ENABLE_REG_OFFSET, pin);
  *state = is_enabled ? kDifGpioToggleEnabled : kDifGpioToggleDisabled;
20000d5a:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:188

  return kDifGpioOk;
}
20000d5c:	8082                	ret

20000d5e <dif_gpio_irq_set_enabled>:
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:192

dif_gpio_result_t dif_gpio_irq_set_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t state) {
20000d5e:	86aa                	mv	a3,a0
20000d60:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:193
  if (gpio == NULL) {
20000d62:	c695                	beqz	a3,20000d8e <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:197
    return kDifGpioBadArg;
  }

  switch (state) {
20000d64:	ca19                	beqz	a2,20000d7a <dif_gpio_irq_set_enabled+0x1c>
20000d66:	4705                	li	a4,1
20000d68:	02e61363          	bne	a2,a4,20000d8e <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:199
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_bit32(gpio->params.base_addr,
20000d6c:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d6e:	4254                	lw	a3,4(a2)
20000d70:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000d72:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000d76:	8dd5                	or	a1,a1,a3
20000d78:	a811                	j	20000d8c <dif_gpio_irq_set_enabled+0x2e>
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:203
                                      GPIO_INTR_ENABLE_REG_OFFSET, pin);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_bit32(gpio->params.base_addr,
20000d7a:	4290                	lw	a2,0(a3)
20000d7c:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d7e:	4254                	lw	a3,4(a2)
20000d80:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000d82:	00b715b3          	sll	a1,a4,a1
20000d86:	fff5c593          	not	a1,a1
20000d8a:	8df5                	and	a1,a1,a3
20000d8c:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:211
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000d8e:	8082                	ret

20000d90 <dif_gpio_irq_set_enabled_masked>:
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:215

dif_gpio_result_t dif_gpio_irq_set_enabled_masked(const dif_gpio_t *gpio,
                                                  dif_gpio_mask_t mask,
                                                  dif_gpio_toggle_t state) {
20000d90:	86aa                	mv	a3,a0
20000d92:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:216
  if (gpio == NULL) {
20000d94:	c28d                	beqz	a3,20000db6 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:220
    return kDifGpioBadArg;
  }

  switch (state) {
20000d96:	ca09                	beqz	a2,20000da8 <dif_gpio_irq_set_enabled_masked+0x18>
20000d98:	4705                	li	a4,1
20000d9a:	00e61e63          	bne	a2,a4,20000db6 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:222
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000d9e:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000da0:	4254                	lw	a3,4(a2)
20000da2:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000da4:	8dd5                	or	a1,a1,a3
20000da6:	a039                	j	20000db4 <dif_gpio_irq_set_enabled_masked+0x24>
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:226
                                       GPIO_INTR_ENABLE_REG_OFFSET, mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20000da8:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000daa:	4254                	lw	a3,4(a2)
20000dac:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000dae:	fff5c593          	not	a1,a1
20000db2:	8df5                	and	a1,a1,a3
20000db4:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:234
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000db6:	8082                	ret

20000db8 <dif_gpio_irq_force>:
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:238

dif_gpio_result_t dif_gpio_irq_force(const dif_gpio_t *gpio,
                                     dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000db8:	c901                	beqz	a0,20000dc8 <dif_gpio_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:242
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_TEST_REG_OFFSET,
20000dba:	4110                	lw	a2,0(a0)
20000dbc:	4501                	li	a0,0
20000dbe:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000dc0:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dc4:	c60c                	sw	a1,8(a2)
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:246
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000dc6:	8082                	ret
20000dc8:	4509                	li	a0,2
20000dca:	8082                	ret

20000dcc <dif_gpio_irq_disable_all>:
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:250

dif_gpio_result_t dif_gpio_irq_disable_all(const dif_gpio_t *gpio,
                                           dif_gpio_state_t *snapshot) {
  if (gpio == NULL) {
20000dcc:	c911                	beqz	a0,20000de0 <dif_gpio_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:254
    return kDifGpioBadArg;
  }

  if (snapshot != NULL) {
20000dce:	c581                	beqz	a1,20000dd6 <dif_gpio_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:256
    *snapshot =
        mmio_region_read32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET);
20000dd0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dd2:	4250                	lw	a2,4(a2)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:255
    *snapshot =
20000dd4:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:258
  }
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000dd6:	410c                	lw	a1,0(a0)
20000dd8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dda:	0005a223          	sw	zero,4(a1)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:261

  return kDifGpioOk;
}
20000dde:	8082                	ret
20000de0:	4509                	li	a0,2
20000de2:	8082                	ret

20000de4 <dif_gpio_irq_restore_all>:
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:264

dif_gpio_result_t dif_gpio_irq_restore_all(const dif_gpio_t *gpio,
                                           const dif_gpio_state_t *snapshot) {
20000de4:	862a                	mv	a2,a0
20000de6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:265
  if (gpio == NULL || snapshot == NULL) {
20000de8:	c611                	beqz	a2,20000df4 <dif_gpio_irq_restore_all+0x10>
20000dea:	c589                	beqz	a1,20000df4 <dif_gpio_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:270
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000dec:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:269
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
20000dee:	4210                	lw	a2,0(a2)
20000df0:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000df2:	c24c                	sw	a1,4(a2)
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:273

  return kDifGpioOk;
}
20000df4:	8082                	ret

20000df6 <dif_gpio_irq_set_trigger>:
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:278

dif_gpio_result_t dif_gpio_irq_set_trigger(const dif_gpio_t *gpio,
                                           dif_gpio_mask_t mask,
                                           dif_gpio_irq_trigger_t trigger) {
  if (gpio == NULL) {
20000df6:	c529                	beqz	a0,20000e40 <dif_gpio_irq_set_trigger+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:283
    return kDifGpioBadArg;
  }

  // Disable all interrupt triggers for the given mask.
  mmio_region_nonatomic_clear_mask32(
20000df8:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dfa:	5698                	lw	a4,40(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000dfc:	fff5c793          	not	a5,a1
20000e00:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e02:	d698                	sw	a4,40(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:285
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000e04:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e06:	56d8                	lw	a4,44(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e08:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e0a:	d6d8                	sw	a4,44(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:287
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000e0c:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e0e:	5a98                	lw	a4,48(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e10:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e12:	da98                	sw	a4,48(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:289
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000e14:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e16:	5ad8                	lw	a4,52(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e18:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e1a:	dad8                	sw	a4,52(a3)
20000e1c:	4709                	li	a4,2
20000e1e:	4685                	li	a3,1
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);

  switch (trigger) {
20000e20:	02c75263          	bge	a4,a2,20000e44 <dif_gpio_irq_set_trigger+0x4e>
20000e24:	4711                	li	a4,4
20000e26:	02c74763          	blt	a4,a2,20000e54 <dif_gpio_irq_set_trigger+0x5e>
20000e2a:	470d                	li	a4,3
20000e2c:	02e60e63          	beq	a2,a4,20000e68 <dif_gpio_irq_set_trigger+0x72>
20000e30:	4711                	li	a4,4
20000e32:	06e61663          	bne	a2,a4,20000e9e <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:312
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
                                       GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeRisingFalling:
      mmio_region_nonatomic_set_mask32(
20000e36:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e38:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e3a:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e3c:	d614                	sw	a3,40(a2)
20000e3e:	a81d                	j	20000e74 <dif_gpio_irq_set_trigger+0x7e>
20000e40:	4689                	li	a3,2
20000e42:	a8b1                	j	20000e9e <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
  switch (trigger) {
20000e44:	ce15                	beqz	a2,20000e80 <dif_gpio_irq_set_trigger+0x8a>
20000e46:	4705                	li	a4,1
20000e48:	02e60663          	beq	a2,a4,20000e74 <dif_gpio_irq_set_trigger+0x7e>
20000e4c:	4709                	li	a4,2
20000e4e:	04e60363          	beq	a2,a4,20000e94 <dif_gpio_irq_set_trigger+0x9e>
20000e52:	a0b1                	j	20000e9e <dif_gpio_irq_set_trigger+0xa8>
20000e54:	4715                	li	a4,5
20000e56:	02e60b63          	beq	a2,a4,20000e8c <dif_gpio_irq_set_trigger+0x96>
20000e5a:	4719                	li	a4,6
20000e5c:	04e61163          	bne	a2,a4,20000e9e <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:325
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
      mmio_region_nonatomic_set_mask32(
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeFallingLevelHigh:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000e60:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e62:	5654                	lw	a3,44(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e64:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e66:	d654                	sw	a3,44(a2)
20000e68:	4108                	lw	a0,0(a0)
20000e6a:	5910                	lw	a2,48(a0)
20000e6c:	4681                	li	a3,0
20000e6e:	8dd1                	or	a1,a1,a2
20000e70:	d90c                	sw	a1,48(a0)
20000e72:	a035                	j	20000e9e <dif_gpio_irq_set_trigger+0xa8>
20000e74:	4108                	lw	a0,0(a0)
20000e76:	5550                	lw	a2,44(a0)
20000e78:	4681                	li	a3,0
20000e7a:	8dd1                	or	a1,a1,a2
20000e7c:	d54c                	sw	a1,44(a0)
20000e7e:	a005                	j	20000e9e <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:294
      mmio_region_nonatomic_set_mask32(
20000e80:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e82:	5510                	lw	a2,40(a0)
20000e84:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e86:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e88:	d50c                	sw	a1,40(a0)
20000e8a:	a811                	j	20000e9e <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:319
      mmio_region_nonatomic_set_mask32(
20000e8c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e8e:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e90:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e92:	d614                	sw	a3,40(a2)
20000e94:	4108                	lw	a0,0(a0)
20000e96:	5950                	lw	a2,52(a0)
20000e98:	4681                	li	a3,0
20000e9a:	8dd1                	or	a1,a1,a2
20000e9c:	d94c                	sw	a1,52(a0)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:337
    default:
      return kDifGpioError;
  }

  return kDifGpioOk;
}
20000e9e:	8536                	mv	a0,a3
20000ea0:	8082                	ret

20000ea2 <dif_gpio_read_all>:
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:340

dif_gpio_result_t dif_gpio_read_all(const dif_gpio_t *gpio,
                                    dif_gpio_state_t *state) {
20000ea2:	862a                	mv	a2,a0
20000ea4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:341
  if (gpio == NULL || state == NULL) {
20000ea6:	c611                	beqz	a2,20000eb2 <dif_gpio_read_all+0x10>
20000ea8:	c589                	beqz	a1,20000eb2 <dif_gpio_read_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
    return kDifGpioBadArg;
  }

  *state = mmio_region_read32(gpio->params.base_addr, GPIO_DATA_IN_REG_OFFSET);
20000eaa:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000eac:	4550                	lw	a2,12(a0)
20000eae:	4501                	li	a0,0
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
20000eb0:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:348

  return kDifGpioOk;
}
20000eb2:	8082                	ret

20000eb4 <dif_gpio_read>:
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:351

dif_gpio_result_t dif_gpio_read(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                bool *state) {
20000eb4:	86aa                	mv	a3,a0
20000eb6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:352
  if (gpio == NULL || state == NULL) {
20000eb8:	ca91                	beqz	a3,20000ecc <dif_gpio_read+0x18>
20000eba:	ca09                	beqz	a2,20000ecc <dif_gpio_read+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
    return kDifGpioBadArg;
  }

  *state = mmio_region_get_bit32(gpio->params.base_addr,
20000ebc:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ebe:	4554                	lw	a3,12(a0)
20000ec0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000ec2:	00b6d5b3          	srl	a1,a3,a1
20000ec6:	8985                	andi	a1,a1,1
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
20000ec8:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:360
                                 GPIO_DATA_IN_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000ecc:	8082                	ret

20000ece <dif_gpio_write_all>:
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:364

dif_gpio_result_t dif_gpio_write_all(const dif_gpio_t *gpio,
                                     dif_gpio_state_t state) {
  if (gpio == NULL) {
20000ece:	c509                	beqz	a0,20000ed8 <dif_gpio_write_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:368
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET,
20000ed0:	4110                	lw	a2,0(a0)
20000ed2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ed4:	ca0c                	sw	a1,16(a2)
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:372
                      state);

  return kDifGpioOk;
}
20000ed6:	8082                	ret
20000ed8:	4509                	li	a0,2
20000eda:	8082                	ret

20000edc <dif_gpio_write>:
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:86
  if (gpio == NULL) {
20000edc:	c505                	beqz	a0,20000f04 <dif_gpio_write+0x28>
20000ede:	4741                	li	a4,16
20000ee0:	46d1                	li	a3,20
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000ee2:	00e5e363          	bltu	a1,a4,20000ee8 <dif_gpio_write+0xc>
20000ee6:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000ee8:	89bd                	andi	a1,a1,15
20000eea:	4705                	li	a4,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000eec:	00b71733          	sll	a4,a4,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000ef0:	01071593          	slli	a1,a4,0x10
20000ef4:	e211                	bnez	a2,20000ef8 <dif_gpio_write+0x1c>
20000ef6:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000ef8:	4110                	lw	a2,0(a0)
20000efa:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000efc:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000efe:	9636                	add	a2,a2,a3
20000f00:	c20c                	sw	a1,0(a2)
dif_gpio_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:376

dif_gpio_result_t dif_gpio_write(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                 bool state) {
  return gpio_masked_bit_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000f02:	8082                	ret
20000f04:	4509                	li	a0,2
20000f06:	8082                	ret

20000f08 <dif_gpio_write_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000f08:	c50d                	beqz	a0,20000f32 <dif_gpio_write_masked+0x2a>
20000f0a:	66c1                	lui	a3,0x10
20000f0c:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000f10:	00e5f7b3          	and	a5,a1,a4
20000f14:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000f16:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000f18:	c791                	beqz	a5,20000f24 <dif_gpio_write_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000f1a:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000f1c:	05c2                	slli	a1,a1,0x10
20000f1e:	8f71                	and	a4,a4,a2
20000f20:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f22:	cbcc                	sw	a1,20(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20000f24:	ca89                	beqz	a3,20000f36 <dif_gpio_write_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20000f26:	410c                	lw	a1,0(a0)
20000f28:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20000f2a:	8241                	srli	a2,a2,0x10
20000f2c:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f2e:	cd90                	sw	a2,24(a1)
dif_gpio_write_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:383
}

dif_gpio_result_t dif_gpio_write_masked(const dif_gpio_t *gpio,
                                        dif_gpio_mask_t mask,
                                        dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000f30:	8082                	ret
20000f32:	4509                	li	a0,2
20000f34:	8082                	ret
20000f36:	4501                	li	a0,0
20000f38:	8082                	ret

20000f3a <dif_gpio_output_set_enabled_all>:
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:389
                           GPIO_MASKED_OUT_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_output_set_enabled_all(const dif_gpio_t *gpio,
                                                  dif_gpio_state_t state) {
  if (gpio == NULL) {
20000f3a:	c509                	beqz	a0,20000f44 <dif_gpio_output_set_enabled_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:393
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, state);
20000f3c:	4110                	lw	a2,0(a0)
20000f3e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f40:	ce4c                	sw	a1,28(a2)
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:396

  return kDifGpioOk;
}
20000f42:	8082                	ret
20000f44:	4509                	li	a0,2
20000f46:	8082                	ret

20000f48 <dif_gpio_output_set_enabled>:
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:401

dif_gpio_result_t dif_gpio_output_set_enabled(const dif_gpio_t *gpio,
                                              dif_gpio_pin_t pin,
                                              dif_gpio_toggle_t state) {
  if (gpio == NULL) {
20000f48:	c51d                	beqz	a0,20000f76 <dif_gpio_output_set_enabled+0x2e>
20000f4a:	4741                	li	a4,16
20000f4c:	02000693          	li	a3,32
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000f50:	00e5e463          	bltu	a1,a4,20000f58 <dif_gpio_output_set_enabled+0x10>
20000f54:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000f58:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000f5a:	89bd                	andi	a1,a1,15
20000f5c:	4785                	li	a5,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000f5e:	00b797b3          	sll	a5,a5,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000f62:	01079593          	slli	a1,a5,0x10
20000f66:	c211                	beqz	a2,20000f6a <dif_gpio_output_set_enabled+0x22>
20000f68:	873e                	mv	a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000f6a:	4110                	lw	a2,0(a0)
20000f6c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000f6e:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f70:	9636                	add	a2,a2,a3
20000f72:	c20c                	sw	a1,0(a2)
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:409

  return gpio_masked_bit_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
                               GPIO_MASKED_OE_UPPER_REG_OFFSET, pin, state);

  return kDifGpioOk;
}
20000f74:	8082                	ret
20000f76:	4509                	li	a0,2
20000f78:	8082                	ret

20000f7a <dif_gpio_output_set_enabled_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000f7a:	c50d                	beqz	a0,20000fa4 <dif_gpio_output_set_enabled_masked+0x2a>
20000f7c:	66c1                	lui	a3,0x10
20000f7e:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000f82:	00e5f7b3          	and	a5,a1,a4
20000f86:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000f88:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000f8a:	c791                	beqz	a5,20000f96 <dif_gpio_output_set_enabled_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000f8c:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000f8e:	05c2                	slli	a1,a1,0x10
20000f90:	8f71                	and	a4,a4,a2
20000f92:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f94:	d38c                	sw	a1,32(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20000f96:	ca89                	beqz	a3,20000fa8 <dif_gpio_output_set_enabled_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20000f98:	410c                	lw	a1,0(a0)
20000f9a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20000f9c:	8241                	srli	a2,a2,0x10
20000f9e:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fa0:	d1d0                	sw	a2,36(a1)
dif_gpio_output_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:414

dif_gpio_result_t dif_gpio_output_set_enabled_masked(const dif_gpio_t *gpio,
                                                     dif_gpio_mask_t mask,
                                                     dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
20000fa2:	8082                	ret
20000fa4:	4509                	li	a0,2
20000fa6:	8082                	ret
20000fa8:	4501                	li	a0,0
20000faa:	8082                	ret

20000fac <dif_gpio_input_noise_filter_set_enabled>:
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:419
                           GPIO_MASKED_OE_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_input_noise_filter_set_enabled(
    const dif_gpio_t *gpio, dif_gpio_mask_t mask, dif_gpio_toggle_t state) {
20000fac:	86aa                	mv	a3,a0
20000fae:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:420
  if (gpio == NULL) {
20000fb0:	c28d                	beqz	a3,20000fd2 <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:424
    return kDifGpioBadArg;
  }

  switch (state) {
20000fb2:	ca09                	beqz	a2,20000fc4 <dif_gpio_input_noise_filter_set_enabled+0x18>
20000fb4:	4705                	li	a4,1
20000fb6:	00e61e63          	bne	a2,a4,20000fd2 <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:426
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000fba:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fbc:	5e14                	lw	a3,56(a2)
20000fbe:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000fc0:	8dd5                	or	a1,a1,a3
20000fc2:	a039                	j	20000fd0 <dif_gpio_input_noise_filter_set_enabled+0x24>
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:431
                                       GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20000fc4:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000fc6:	5e14                	lw	a3,56(a2)
20000fc8:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000fca:	fff5c593          	not	a1,a1
20000fce:	8df5                	and	a1,a1,a3
20000fd0:	de0c                	sw	a1,56(a2)
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:440
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000fd2:	8082                	ret

20000fd4 <dif_plic_init>:
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:170
    mmio_region_write32(plic->params.base_addr, offset, 0);
  }
}

dif_plic_result_t dif_plic_init(dif_plic_params_t params, dif_plic_t *plic) {
  if (plic == NULL) {
20000fd4:	cda1                	beqz	a1,2000102c <dif_plic_init+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:174
    return kDifPlicBadArg;
  }

  plic->params = params;
20000fd6:	c188                	sw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fd8:	00052c23          	sw	zero,24(a0)
20000fdc:	4571                	li	a0,28
20000fde:	03000613          	li	a2,48
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:140
    mmio_region_write32(plic->params.base_addr, offset, 0);
20000fe2:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fe4:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
  for (int i = 0; i < RV_PLIC_LE_MULTIREG_COUNT; ++i) {
20000fe6:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fe8:	0006a023          	sw	zero,0(a3) # ffff0000 <_data_init_start+0xdffecc20>
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
20000fec:	fec51be3          	bne	a0,a2,20000fe2 <dif_plic_init+0xe>
20000ff0:	03000513          	li	a0,48
20000ff4:	30000613          	li	a2,768
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:146
    mmio_region_write32(plic->params.base_addr, offset, 0);
20000ff8:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ffa:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
  for (int i = 0; i < RV_PLIC_PARAM_NUM_SRC; ++i) {
20000ffc:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ffe:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
20001002:	fec51be3          	bne	a0,a2,20000ff8 <dif_plic_init+0x24>
20001006:	30000513          	li	a0,768
2000100a:	31800613          	li	a2,792
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:156
      mmio_region_write32(plic->params.base_addr, multireg_offset, 0);
2000100e:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001010:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
    for (int i = 0; i < RV_PLIC_IE0_MULTIREG_COUNT; ++i) {
20001012:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001014:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
20001018:	fec51be3          	bne	a0,a2,2000100e <dif_plic_init+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:161
    mmio_region_write32(plic->params.base_addr, offset, 0);
2000101c:	4188                	lw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000101e:	30052c23          	sw	zero,792(a0)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:165
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001022:	418c                	lw	a1,0(a1)
20001024:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001026:	3205a023          	sw	zero,800(a1)
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:180

  // TODO: Move this out into its own function.
  plic_reset(plic);

  return kDifPlicOk;
}
2000102a:	8082                	ret
2000102c:	4509                	li	a0,2
2000102e:	8082                	ret

20001030 <dif_plic_irq_get_enabled>:
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:185

dif_plic_result_t dif_plic_irq_get_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t *state) {
20001030:	872a                	mv	a4,a0
20001032:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:186
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001034:	c70d                	beqz	a4,2000105e <dif_plic_irq_get_enabled+0x2e>
20001036:	0b300793          	li	a5,179
2000103a:	02b7e263          	bltu	a5,a1,2000105e <dif_plic_irq_get_enabled+0x2e>
2000103e:	e205                	bnez	a2,2000105e <dif_plic_irq_get_enabled+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:193
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001040:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001042:	0035d613          	srli	a2,a1,0x3
20001046:	3fc67613          	andi	a2,a2,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
2000104a:	9532                	add	a0,a0,a2
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000104c:	30052603          	lw	a2,768(a0)
20001050:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001052:	00b655b3          	srl	a1,a2,a1
20001056:	8985                	andi	a1,a1,1
20001058:	0015b593          	seqz	a1,a1
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:195
  bool is_enabled = bitfield_bit32_read(reg, reg_info.bit_index);
  *state = is_enabled ? kDifPlicToggleEnabled : kDifPlicToggleDisabled;
2000105c:	c28c                	sw	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:198

  return kDifPlicOk;
}
2000105e:	8082                	ret

20001060 <dif_plic_irq_set_enabled>:
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:203

dif_plic_result_t dif_plic_irq_set_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t state) {
20001060:	872a                	mv	a4,a0
20001062:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:204
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001064:	c321                	beqz	a4,200010a4 <dif_plic_irq_set_enabled+0x44>
20001066:	0b300793          	li	a5,179
2000106a:	02b7ed63          	bltu	a5,a1,200010a4 <dif_plic_irq_set_enabled+0x44>
2000106e:	ea1d                	bnez	a2,200010a4 <dif_plic_irq_set_enabled+0x44>
20001070:	4605                	li	a2,1
20001072:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:210
      target >= RV_PLIC_PARAM_NUM_TARGET) {
    return kDifPlicBadArg;
  }

  bool flag;
  switch (state) {
20001074:	c689                	beqz	a3,2000107e <dif_plic_irq_set_enabled+0x1e>
20001076:	4785                	li	a5,1
20001078:	02f69663          	bne	a3,a5,200010a4 <dif_plic_irq_set_enabled+0x44>
2000107c:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:223
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
2000107e:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001080:	0035d693          	srli	a3,a1,0x3
20001084:	3fc6f693          	andi	a3,a3,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
20001088:	96aa                	add	a3,a3,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000108a:	3006a703          	lw	a4,768(a3)
2000108e:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001090:	00b61633          	sll	a2,a2,a1
20001094:	fff64613          	not	a2,a2
20001098:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000109a:	00b795b3          	sll	a1,a5,a1
2000109e:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200010a0:	30b6a023          	sw	a1,768(a3)
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:228
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
200010a4:	8082                	ret

200010a6 <dif_plic_irq_set_trigger>:
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:232

dif_plic_result_t dif_plic_irq_set_trigger(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_irq_trigger_t trigger) {
200010a6:	86aa                	mv	a3,a0
200010a8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:233
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC) {
200010aa:	ce8d                	beqz	a3,200010e4 <dif_plic_irq_set_trigger+0x3e>
200010ac:	0b300713          	li	a4,179
200010b0:	02b76a63          	bltu	a4,a1,200010e4 <dif_plic_irq_set_trigger+0x3e>
200010b4:	4705                	li	a4,1
200010b6:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:238
    return kDifPlicBadArg;
  }

  bool flag;
  switch (trigger) {
200010b8:	c609                	beqz	a2,200010c2 <dif_plic_irq_set_trigger+0x1c>
200010ba:	4785                	li	a5,1
200010bc:	02f61463          	bne	a2,a5,200010e4 <dif_plic_irq_set_trigger+0x3e>
200010c0:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:251
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_trigger_type_reg_info(irq);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
200010c2:	4288                	lw	a0,0(a3)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
200010c4:	0035d613          	srli	a2,a1,0x3
200010c8:	3fc67613          	andi	a2,a2,1020
plic_irq_trigger_type_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:101
      .offset = RV_PLIC_LE_0_REG_OFFSET + offset,
200010cc:	962a                	add	a2,a2,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010ce:	4e14                	lw	a3,24(a2)
200010d0:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200010d2:	00b71733          	sll	a4,a4,a1
200010d6:	fff74713          	not	a4,a4
200010da:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200010dc:	00b795b3          	sll	a1,a5,a1
200010e0:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200010e2:	ce0c                	sw	a1,24(a2)
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:256
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
200010e4:	8082                	ret

200010e6 <dif_plic_irq_set_priority>:
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:260

dif_plic_result_t dif_plic_irq_set_priority(const dif_plic_t *plic,
                                            dif_plic_irq_id_t irq,
                                            uint32_t priority) {
200010e6:	86aa                	mv	a3,a0
200010e8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:261
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
200010ea:	ce89                	beqz	a3,20001104 <dif_plic_irq_set_priority+0x1e>
200010ec:	0b300713          	li	a4,179
200010f0:	00b76a63          	bltu	a4,a1,20001104 <dif_plic_irq_set_priority+0x1e>
200010f4:	470d                	li	a4,3
200010f6:	00c76763          	bltu	a4,a2,20001104 <dif_plic_irq_set_priority+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:267
      priority > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t offset = plic_priority_reg_offset(irq);
  mmio_region_write32(plic->params.base_addr, offset, priority);
200010fa:	4294                	lw	a3,0(a3)
200010fc:	4501                	li	a0,0
plic_priority_reg_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:124
  ptrdiff_t offset = irq * sizeof(uint32_t);
200010fe:	058a                	slli	a1,a1,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:125
  return RV_PLIC_PRIO0_REG_OFFSET + offset;
20001100:	95b6                	add	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001102:	d990                	sw	a2,48(a1)
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:270

  return kDifPlicOk;
}
20001104:	8082                	ret

20001106 <dif_plic_target_set_threshold>:
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:274

dif_plic_result_t dif_plic_target_set_threshold(const dif_plic_t *plic,
                                                dif_plic_target_t target,
                                                uint32_t threshold) {
20001106:	86aa                	mv	a3,a0
20001108:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:275
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
2000110a:	ca89                	beqz	a3,2000111c <dif_plic_target_set_threshold+0x16>
2000110c:	e981                	bnez	a1,2000111c <dif_plic_target_set_threshold+0x16>
2000110e:	458d                	li	a1,3
20001110:	00c5e663          	bltu	a1,a2,2000111c <dif_plic_target_set_threshold+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:281
      threshold > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t threshold_offset = plic_threshold_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, threshold_offset, threshold);
20001114:	428c                	lw	a1,0(a3)
20001116:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001118:	30c5ac23          	sw	a2,792(a1)
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:284

  return kDifPlicOk;
}
2000111c:	8082                	ret

2000111e <dif_plic_irq_is_pending>:
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:288

dif_plic_result_t dif_plic_irq_is_pending(const dif_plic_t *plic,
                                          dif_plic_irq_id_t irq,
                                          bool *is_pending) {
2000111e:	86aa                	mv	a3,a0
20001120:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:289
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC || is_pending == NULL) {
20001122:	c68d                	beqz	a3,2000114c <dif_plic_irq_is_pending+0x2e>
20001124:	0b300713          	li	a4,179
20001128:	02b76263          	bltu	a4,a1,2000114c <dif_plic_irq_is_pending+0x2e>
2000112c:	c205                	beqz	a2,2000114c <dif_plic_irq_is_pending+0x2e>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000112e:	0035d513          	srli	a0,a1,0x3
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:294
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_pending_reg_info(irq);
  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001132:	4294                	lw	a3,0(a3)
20001134:	20000737          	lui	a4,0x20000
20001138:	1771                	addi	a4,a4,-4
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
2000113a:	8d79                	and	a0,a0,a4
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000113c:	9536                	add	a0,a0,a3
2000113e:	4114                	lw	a3,0(a0)
20001140:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001142:	00b6d5b3          	srl	a1,a3,a1
20001146:	8985                	andi	a1,a1,1
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:295
  *is_pending = bitfield_bit32_read(reg, reg_info.bit_index);
20001148:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:298

  return kDifPlicOk;
}
2000114c:	8082                	ret

2000114e <dif_plic_irq_claim>:
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:302

dif_plic_result_t dif_plic_irq_claim(const dif_plic_t *plic,
                                     dif_plic_target_t target,
                                     dif_plic_irq_id_t *claim_data) {
2000114e:	86aa                	mv	a3,a0
20001150:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:303
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001152:	ca81                	beqz	a3,20001162 <dif_plic_irq_claim+0x14>
20001154:	e599                	bnez	a1,20001162 <dif_plic_irq_claim+0x14>
20001156:	c611                	beqz	a2,20001162 <dif_plic_irq_claim+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
      claim_data == NULL) {
    return kDifPlicBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->params.base_addr, claim_complete_reg);
20001158:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000115a:	31c52583          	lw	a1,796(a0)
2000115e:	4501                	li	a0,0
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
20001160:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:312

  return kDifPlicOk;
}
20001162:	8082                	ret

20001164 <dif_plic_irq_complete>:
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:316

dif_plic_result_t dif_plic_irq_complete(
    const dif_plic_t *plic, dif_plic_target_t target,
    const dif_plic_irq_id_t *complete_data) {
20001164:	86aa                	mv	a3,a0
20001166:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:317
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001168:	ca81                	beqz	a3,20001178 <dif_plic_irq_complete+0x14>
2000116a:	e599                	bnez	a1,20001178 <dif_plic_irq_complete+0x14>
2000116c:	c611                	beqz	a2,20001178 <dif_plic_irq_complete+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:326

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
                      *complete_data);
2000116e:	420c                	lw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:325
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
20001170:	4290                	lw	a2,0(a3)
20001172:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001174:	30b62e23          	sw	a1,796(a2)
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:329

  return kDifPlicOk;
}
20001178:	8082                	ret

2000117a <dif_plic_software_irq_force>:
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:332

dif_plic_result_t dif_plic_software_irq_force(const dif_plic_t *plic,
                                              dif_plic_target_t target) {
2000117a:	862a                	mv	a2,a0
2000117c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:333
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
2000117e:	c619                	beqz	a2,2000118c <dif_plic_software_irq_force+0x12>
20001180:	e591                	bnez	a1,2000118c <dif_plic_software_irq_force+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:338
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 1);
20001182:	420c                	lw	a1,0(a2)
20001184:	4501                	li	a0,0
20001186:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001188:	32c5a023          	sw	a2,800(a1)
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:341

  return kDifPlicOk;
}
2000118c:	8082                	ret

2000118e <dif_plic_software_irq_acknowledge>:
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:344

dif_plic_result_t dif_plic_software_irq_acknowledge(const dif_plic_t *plic,
                                                    dif_plic_target_t target) {
2000118e:	862a                	mv	a2,a0
20001190:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:345
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
20001192:	c611                	beqz	a2,2000119e <dif_plic_software_irq_acknowledge+0x10>
20001194:	e589                	bnez	a1,2000119e <dif_plic_software_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:350
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 0);
20001196:	420c                	lw	a1,0(a2)
20001198:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000119a:	3205a023          	sw	zero,800(a1)
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:353

  return kDifPlicOk;
}
2000119e:	8082                	ret

200011a0 <dif_plic_software_irq_is_pending>:
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:357

dif_plic_result_t dif_plic_software_irq_is_pending(const dif_plic_t *plic,
                                                   dif_plic_target_t target,
                                                   bool *is_pending) {
200011a0:	86aa                	mv	a3,a0
200011a2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:358
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
200011a4:	ce81                	beqz	a3,200011bc <dif_plic_software_irq_is_pending+0x1c>
200011a6:	e999                	bnez	a1,200011bc <dif_plic_software_irq_is_pending+0x1c>
200011a8:	ca11                	beqz	a2,200011bc <dif_plic_software_irq_is_pending+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:365
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  uint32_t register_value =
      mmio_region_read32(plic->params.base_addr, msip_offset);
200011aa:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011ac:	32052583          	lw	a1,800(a0)
200011b0:	4501                	li	a0,0
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:367

  *is_pending = (register_value == 1) ? true : false;
200011b2:	15fd                	addi	a1,a1,-1
200011b4:	0015b593          	seqz	a1,a1
200011b8:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:370

  return kDifPlicOk;
}
200011bc:	8082                	ret
	...

200011c0 <pinmux_init>:
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:29
    reg_value++;
    reg_offset += 4;
  }
}

void pinmux_init(void) {
200011c0:	4509                	li	a0,2
200011c2:	404605b7          	lui	a1,0x40460
200011c6:	0dc58593          	addi	a1,a1,220 # 404600dc <_data_init_start+0x2045ccfc>
200011ca:	02200613          	li	a2,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200011ce:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
200011d0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
200011d2:	0591                	addi	a1,a1,4
200011d4:	fec51de3          	bne	a0,a2,200011ce <pinmux_init+0xe>
200011d8:	450d                	li	a0,3
200011da:	404605b7          	lui	a1,0x40460
200011de:	27458593          	addi	a1,a1,628 # 40460274 <_data_init_start+0x2045ce94>
200011e2:	02300613          	li	a2,35
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011e6:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
200011e8:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
200011ea:	0591                	addi	a1,a1,4
200011ec:	fec51de3          	bne	a0,a2,200011e6 <pinmux_init+0x26>
200011f0:	40460537          	lui	a0,0x40460
200011f4:	02200593          	li	a1,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011f8:	18b52223          	sw	a1,388(a0) # 40460184 <_data_init_start+0x2045cda4>
200011fc:	02d00593          	li	a1,45
20001200:	2eb52c23          	sw	a1,760(a0)
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:63
  // We've got one insel configuration field per register. Hence, we have to
  // convert the enumeration index into a byte address using << 2.
  reg_offset = kTopEarlgreyPinmuxMioOutIoc11 << 2;
  mask = PINMUX_MIO_OUTSEL_0_OUT_0_MASK;
  mmio_region_write32(reg32, reg_offset, reg_value & mask);
}
20001204:	8082                	ret
	...

20001208 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20001208:	7139                	addi	sp,sp,-64
2000120a:	ce06                	sw	ra,28(sp)
2000120c:	cc22                	sw	s0,24(sp)
2000120e:	ca26                	sw	s1,20(sp)
20001210:	c84a                	sw	s2,16(sp)
20001212:	892a                	mv	s2,a0
20001214:	de46                	sw	a7,60(sp)
20001216:	dc42                	sw	a6,56(sp)
20001218:	da3e                	sw	a5,52(sp)
2000121a:	d83a                	sw	a4,48(sp)
2000121c:	d636                	sw	a3,44(sp)
2000121e:	d432                	sw	a2,40(sp)
20001220:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20001222:	4144                	lw	s1,4(a0)
20001224:	80000537          	lui	a0,0x80000
20001228:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffcc1f>
2000122c:	8526                	mv	a0,s1
2000122e:	4581                	li	a1,0
20001230:	6bd000ef          	jal	ra,200020ec <memchr>
20001234:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20001238:	02f00593          	li	a1,47
2000123c:	8526                	mv	a0,s1
2000123e:	6c7000ef          	jal	ra,20002104 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001242:	00092583          	lw	a1,0(s2)
20001246:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001248:	00b66b63          	bltu	a2,a1,2000125e <base_log_internal_core+0x56>
2000124c:	058a                	slli	a1,a1,0x2
2000124e:	00001617          	auipc	a2,0x1
20001252:	54260613          	addi	a2,a2,1346 # 20002790 <kDifPlicMaxPriority+0x4>
20001256:	95b2                	add	a1,a1,a2
20001258:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
2000125a:	e519                	bnez	a0,20001268 <base_log_internal_core+0x60>
2000125c:	a801                	j	2000126c <base_log_internal_core+0x64>
2000125e:	00002597          	auipc	a1,0x2
20001262:	f7158593          	addi	a1,a1,-143 # 200031cf <__clz_tab+0x583>
20001266:	c119                	beqz	a0,2000126c <base_log_internal_core+0x64>
20001268:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
2000126c:	effff417          	auipc	s0,0xeffff
20001270:	daa40413          	addi	s0,s0,-598 # 10000016 <base_log_internal_core.global_log_counter>
20001274:	00045603          	lhu	a2,0(s0)
20001278:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
2000127c:	00002517          	auipc	a0,0x2
20001280:	f3a50513          	addi	a0,a0,-198 # 200031b6 <__clz_tab+0x56a>
20001284:	86a6                	mv	a3,s1
20001286:	28d1                	jal	2000135a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001288:	00041503          	lh	a0,0(s0)
2000128c:	0505                	addi	a0,a0,1
2000128e:	00a41023          	sh	a0,0(s0)
20001292:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20001294:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20001296:	01092503          	lw	a0,16(s2)
2000129a:	28c5                	jal	2000138a <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
2000129c:	00002517          	auipc	a0,0x2
200012a0:	f2850513          	addi	a0,a0,-216 # 200031c4 <__clz_tab+0x578>
200012a4:	285d                	jal	2000135a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
200012a6:	4942                	lw	s2,16(sp)
200012a8:	44d2                	lw	s1,20(sp)
200012aa:	4462                	lw	s0,24(sp)
200012ac:	40f2                	lw	ra,28(sp)
200012ae:	6121                	addi	sp,sp,64
200012b0:	8082                	ret

200012b2 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
200012b2:	1101                	addi	sp,sp,-32
200012b4:	ce46                	sw	a7,28(sp)
200012b6:	cc42                	sw	a6,24(sp)
200012b8:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
200012ba:	00002797          	auipc	a5,0x2
200012be:	98e78793          	addi	a5,a5,-1650 # 20002c48 <kDeviceLogBypassUartAddress>
200012c2:	439c                	lw	a5,0(a5)
200012c4:	c83a                	sw	a4,16(sp)
200012c6:	c636                	sw	a3,12(sp)
200012c8:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012ca:	c388                	sw	a0,0(a5)
200012cc:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
200012ce:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
200012d0:	c989                	beqz	a1,200012e2 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
200012d2:	4512                	lw	a0,4(sp)
200012d4:	00450613          	addi	a2,a0,4
200012d8:	c232                	sw	a2,4(sp)
200012da:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
200012dc:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012de:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
200012e0:	f9ed                	bnez	a1,200012d2 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
200012e2:	6105                	addi	sp,sp,32
200012e4:	8082                	ret
	...

200012e8 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
200012e8:	e589                	bnez	a1,200012f2 <base_set_stdout+0xa>
200012ea:	00000597          	auipc	a1,0x0
200012ee:	01658593          	addi	a1,a1,22 # 20001300 <base_dev_null>
200012f2:	effff617          	auipc	a2,0xeffff
200012f6:	d0e60613          	addi	a2,a2,-754 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
200012fa:	c208                	sw	a0,0(a2)
200012fc:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200012fe:	8082                	ret

20001300 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001300:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20001302:	8082                	ret

20001304 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001304:	effff597          	auipc	a1,0xeffff
20001308:	cfc58593          	addi	a1,a1,-772 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
2000130c:	c188                	sw	a0,0(a1)
2000130e:	00000517          	auipc	a0,0x0
20001312:	00c50513          	addi	a0,a0,12 # 2000131a <base_dev_uart>
20001316:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001318:	8082                	ret

2000131a <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
2000131a:	1101                	addi	sp,sp,-32
2000131c:	ce06                	sw	ra,28(sp)
2000131e:	cc22                	sw	s0,24(sp)
20001320:	ca26                	sw	s1,20(sp)
20001322:	c84a                	sw	s2,16(sp)
20001324:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001326:	c20d                	beqz	a2,20001348 <base_dev_uart+0x2e>
20001328:	8432                	mv	s0,a2
2000132a:	892e                	mv	s2,a1
2000132c:	89aa                	mv	s3,a0
2000132e:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001330:	00990533          	add	a0,s2,s1
20001334:	00054583          	lbu	a1,0(a0)
20001338:	854e                	mv	a0,s3
2000133a:	2f19                	jal	20001a50 <dif_uart_byte_send_polled>
2000133c:	e519                	bnez	a0,2000134a <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
2000133e:	0485                	addi	s1,s1,1
20001340:	fe9418e3          	bne	s0,s1,20001330 <base_dev_uart+0x16>
20001344:	84a2                	mv	s1,s0
20001346:	a011                	j	2000134a <base_dev_uart+0x30>
20001348:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
2000134a:	8526                	mv	a0,s1
2000134c:	49b2                	lw	s3,12(sp)
2000134e:	4942                	lw	s2,16(sp)
20001350:	44d2                	lw	s1,20(sp)
20001352:	4462                	lw	s0,24(sp)
20001354:	40f2                	lw	ra,28(sp)
20001356:	6105                	addi	sp,sp,32
20001358:	8082                	ret

2000135a <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
2000135a:	7179                	addi	sp,sp,-48
2000135c:	c606                	sw	ra,12(sp)
2000135e:	d646                	sw	a7,44(sp)
20001360:	d442                	sw	a6,40(sp)
20001362:	d23e                	sw	a5,36(sp)
20001364:	d03a                	sw	a4,32(sp)
20001366:	ce36                	sw	a3,28(sp)
20001368:	cc32                	sw	a2,24(sp)
2000136a:	ca2e                	sw	a1,20(sp)
2000136c:	effff597          	auipc	a1,0xeffff
20001370:	c9458593          	addi	a1,a1,-876 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20001374:	4190                	lw	a2,0(a1)
20001376:	41cc                	lw	a1,4(a1)
20001378:	872a                	mv	a4,a0
2000137a:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
2000137c:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000137e:	8532                	mv	a0,a2
20001380:	863a                	mv	a2,a4
20001382:	200d                	jal	200013a4 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20001384:	40b2                	lw	ra,12(sp)
20001386:	6145                	addi	sp,sp,48
20001388:	8082                	ret

2000138a <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
2000138a:	effff697          	auipc	a3,0xeffff
2000138e:	c7668693          	addi	a3,a3,-906 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001392:	4290                	lw	a2,0(a3)
20001394:	42d4                	lw	a3,4(a3)
20001396:	872e                	mv	a4,a1
20001398:	87aa                	mv	a5,a0
2000139a:	8532                	mv	a0,a2
2000139c:	85b6                	mv	a1,a3
2000139e:	863e                	mv	a2,a5
200013a0:	86ba                	mv	a3,a4
200013a2:	a009                	j	200013a4 <base_vfprintf>

200013a4 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
200013a4:	7139                	addi	sp,sp,-64
200013a6:	de06                	sw	ra,60(sp)
200013a8:	dc22                	sw	s0,56(sp)
200013aa:	da26                	sw	s1,52(sp)
200013ac:	d84a                	sw	s2,48(sp)
200013ae:	d64e                	sw	s3,44(sp)
200013b0:	d452                	sw	s4,40(sp)
200013b2:	d256                	sw	s5,36(sp)
200013b4:	d05a                	sw	s6,32(sp)
200013b6:	ce5e                	sw	s7,28(sp)
200013b8:	cc62                	sw	s8,24(sp)
200013ba:	ca66                	sw	s9,20(sp)
200013bc:	c86a                	sw	s10,16(sp)
200013be:	c66e                	sw	s11,12(sp)
200013c0:	8bb2                	mv	s7,a2
200013c2:	892a                	mv	s2,a0
200013c4:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
200013c6:	c199                	beqz	a1,200013cc <base_vfprintf+0x28>
200013c8:	89ae                	mv	s3,a1
200013ca:	a029                	j	200013d4 <base_vfprintf+0x30>
200013cc:	00000997          	auipc	s3,0x0
200013d0:	f3498993          	addi	s3,s3,-204 # 20001300 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
200013d4:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
200013d6:	000bc503          	lbu	a0,0(s7)
200013da:	28050f63          	beqz	a0,20001678 <base_vfprintf+0x2d4>
200013de:	4b01                	li	s6,0
200013e0:	02500c13          	li	s8,37
200013e4:	4ca5                	li	s9,9
200013e6:	02000d13          	li	s10,32
200013ea:	06800d93          	li	s11,104
200013ee:	00002a17          	auipc	s4,0x2
200013f2:	de3a0a13          	addi	s4,s4,-541 # 200031d1 <__clz_tab+0x585>
200013f6:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200013f8:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200013fa:	0ff57413          	andi	s0,a0,255
200013fe:	01840963          	beq	s0,s8,20001410 <base_vfprintf+0x6c>
20001402:	c419                	beqz	s0,20001410 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001404:	009b8533          	add	a0,s7,s1
20001408:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
2000140c:	0485                	addi	s1,s1,1
2000140e:	b7f5                	j	200013fa <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20001410:	c491                	beqz	s1,2000141c <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20001412:	854a                	mv	a0,s2
20001414:	85de                	mv	a1,s7
20001416:	8626                	mv	a2,s1
20001418:	9982                	jalr	s3
2000141a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
2000141c:	24040f63          	beqz	s0,2000167a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001420:	009b8633          	add	a2,s7,s1
20001424:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001428:	22050f63          	beqz	a0,20001666 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
2000142c:	fd050593          	addi	a1,a0,-48
20001430:	0ff5f593          	andi	a1,a1,255
20001434:	00bcf863          	bgeu	s9,a1,20001444 <base_vfprintf+0xa0>
20001438:	4401                	li	s0,0
2000143a:	4581                	li	a1,0
2000143c:	4605                	li	a2,1
2000143e:	028d7f63          	bgeu	s10,s0,2000147c <base_vfprintf+0xd8>
20001442:	aca1                	j	2000169a <base_vfprintf+0x2f6>
20001444:	4581                	li	a1,0
20001446:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001448:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000144a:	00b606b3          	add	a3,a2,a1
2000144e:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001452:	20068a63          	beqz	a3,20001666 <base_vfprintf+0x2c2>
20001456:	0ff57513          	andi	a0,a0,255
2000145a:	03540733          	mul	a4,s0,s5
2000145e:	953a                	add	a0,a0,a4
20001460:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001464:	fd068513          	addi	a0,a3,-48
20001468:	0ff57713          	andi	a4,a0,255
2000146c:	0585                	addi	a1,a1,1
2000146e:	8536                	mv	a0,a3
20001470:	fcecfde3          	bgeu	s9,a4,2000144a <base_vfprintf+0xa6>
20001474:	4601                	li	a2,0
20001476:	8536                	mv	a0,a3
20001478:	228d6163          	bltu	s10,s0,2000169a <base_vfprintf+0x2f6>
2000147c:	008036b3          	snez	a3,s0
20001480:	8e55                	or	a2,a2,a3
20001482:	20060c63          	beqz	a2,2000169a <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001486:	95de                	add	a1,a1,s7
20001488:	95a6                	add	a1,a1,s1
2000148a:	00258b93          	addi	s7,a1,2
2000148e:	02adce63          	blt	s11,a0,200014ca <base_vfprintf+0x126>
20001492:	06100593          	li	a1,97
20001496:	06a5d563          	bge	a1,a0,20001500 <base_vfprintf+0x15c>
2000149a:	06300593          	li	a1,99
2000149e:	0ca5cb63          	blt	a1,a0,20001574 <base_vfprintf+0x1d0>
200014a2:	06200593          	li	a1,98
200014a6:	14b50a63          	beq	a0,a1,200015fa <base_vfprintf+0x256>
200014aa:	06300593          	li	a1,99
200014ae:	18b51f63          	bne	a0,a1,2000164c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
200014b2:	4502                	lw	a0,0(sp)
200014b4:	00450593          	addi	a1,a0,4
200014b8:	c02e                	sw	a1,0(sp)
200014ba:	4108                	lw	a0,0(a0)
200014bc:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
200014c0:	4605                	li	a2,1
200014c2:	854a                	mv	a0,s2
200014c4:	00b10593          	addi	a1,sp,11
200014c8:	aa41                	j	20001658 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200014ca:	07200593          	li	a1,114
200014ce:	04a5dd63          	bge	a1,a0,20001528 <base_vfprintf+0x184>
200014d2:	07700593          	li	a1,119
200014d6:	0aa5c663          	blt	a1,a0,20001582 <base_vfprintf+0x1de>
200014da:	07300593          	li	a1,115
200014de:	12b50963          	beq	a0,a1,20001610 <base_vfprintf+0x26c>
200014e2:	07500593          	li	a1,117
200014e6:	16b51363          	bne	a0,a1,2000164c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200014ea:	4502                	lw	a0,0(sp)
200014ec:	00450593          	addi	a1,a0,4
200014f0:	c02e                	sw	a1,0(sp)
200014f2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200014f4:	00001797          	auipc	a5,0x1
200014f8:	2c978793          	addi	a5,a5,713 # 200027bd <kDigitsLow>
200014fc:	4729                	li	a4,10
200014fe:	a8cd                	j	200015f0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001500:	13850763          	beq	a0,s8,2000162e <base_vfprintf+0x28a>
20001504:	04800593          	li	a1,72
20001508:	00b50663          	beq	a0,a1,20001514 <base_vfprintf+0x170>
2000150c:	05800593          	li	a1,88
20001510:	12b51e63          	bne	a0,a1,2000164c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001514:	4502                	lw	a0,0(sp)
20001516:	00450593          	addi	a1,a0,4
2000151a:	c02e                	sw	a1,0(sp)
2000151c:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
2000151e:	00001797          	auipc	a5,0x1
20001522:	2af78793          	addi	a5,a5,687 # 200027cd <kDigitsHigh>
20001526:	a0e1                	j	200015ee <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001528:	06900593          	li	a1,105
2000152c:	06b50d63          	beq	a0,a1,200015a6 <base_vfprintf+0x202>
20001530:	06f00593          	li	a1,111
20001534:	10b50163          	beq	a0,a1,20001636 <base_vfprintf+0x292>
20001538:	07000593          	li	a1,112
2000153c:	10b51863          	bne	a0,a1,2000164c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001540:	00002597          	auipc	a1,0x2
20001544:	c9558593          	addi	a1,a1,-875 # 200031d5 <__clz_tab+0x589>
20001548:	4609                	li	a2,2
2000154a:	854a                	mv	a0,s2
2000154c:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000154e:	4582                	lw	a1,0(sp)
20001550:	00458613          	addi	a2,a1,4
20001554:	c032                	sw	a2,0(sp)
20001556:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001558:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
2000155c:	00001797          	auipc	a5,0x1
20001560:	26178793          	addi	a5,a5,609 # 200027bd <kDigitsLow>
20001564:	46a1                	li	a3,8
20001566:	4741                	li	a4,16
20001568:	854a                	mv	a0,s2
2000156a:	85ce                	mv	a1,s3
2000156c:	2a5d                	jal	20001722 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
2000156e:	00a40b33          	add	s6,s0,a0
20001572:	a0ed                	j	2000165c <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001574:	06400593          	li	a1,100
20001578:	02b50763          	beq	a0,a1,200015a6 <base_vfprintf+0x202>
2000157c:	07b50063          	beq	a0,s11,200015dc <base_vfprintf+0x238>
20001580:	a0f1                	j	2000164c <base_vfprintf+0x2a8>
20001582:	07800593          	li	a1,120
20001586:	04b50b63          	beq	a0,a1,200015dc <base_vfprintf+0x238>
2000158a:	07a00593          	li	a1,122
2000158e:	0ab51f63          	bne	a0,a1,2000164c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20001592:	4502                	lw	a0,0(sp)
20001594:	00450593          	addi	a1,a0,4
20001598:	c02e                	sw	a1,0(sp)
2000159a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
2000159c:	00850593          	addi	a1,a0,8
200015a0:	c02e                	sw	a1,0(sp)
200015a2:	414c                	lw	a1,4(a0)
200015a4:	a84d                	j	20001656 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
200015a6:	4502                	lw	a0,0(sp)
200015a8:	00450593          	addi	a1,a0,4
200015ac:	c02e                	sw	a1,0(sp)
200015ae:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
200015b0:	557d                	li	a0,-1
200015b2:	00954c63          	blt	a0,s1,200015ca <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
200015b6:	00002597          	auipc	a1,0x2
200015ba:	c1d58593          	addi	a1,a1,-995 # 200031d3 <__clz_tab+0x587>
200015be:	4605                	li	a2,1
200015c0:	854a                	mv	a0,s2
200015c2:	9982                	jalr	s3
200015c4:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
200015c6:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200015ca:	00001797          	auipc	a5,0x1
200015ce:	1f378793          	addi	a5,a5,499 # 200027bd <kDigitsLow>
200015d2:	4729                	li	a4,10
200015d4:	854a                	mv	a0,s2
200015d6:	85ce                	mv	a1,s3
200015d8:	8626                	mv	a2,s1
200015da:	a829                	j	200015f4 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
200015dc:	4502                	lw	a0,0(sp)
200015de:	00450593          	addi	a1,a0,4
200015e2:	c02e                	sw	a1,0(sp)
200015e4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200015e6:	00001797          	auipc	a5,0x1
200015ea:	1d778793          	addi	a5,a5,471 # 200027bd <kDigitsLow>
200015ee:	4741                	li	a4,16
200015f0:	854a                	mv	a0,s2
200015f2:	85ce                	mv	a1,s3
200015f4:	86a2                	mv	a3,s0
200015f6:	2235                	jal	20001722 <write_digits>
200015f8:	a08d                	j	2000165a <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200015fa:	4502                	lw	a0,0(sp)
200015fc:	00450593          	addi	a1,a0,4
20001600:	c02e                	sw	a1,0(sp)
20001602:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20001604:	00001797          	auipc	a5,0x1
20001608:	1b978793          	addi	a5,a5,441 # 200027bd <kDigitsLow>
2000160c:	4709                	li	a4,2
2000160e:	b7cd                	j	200015f0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20001610:	4502                	lw	a0,0(sp)
20001612:	00450593          	addi	a1,a0,4
20001616:	c02e                	sw	a1,0(sp)
20001618:	410c                	lw	a1,0(a0)
2000161a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
2000161c:	00a58633          	add	a2,a1,a0
20001620:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20001624:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001626:	fa7d                	bnez	a2,2000161c <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001628:	fff50613          	addi	a2,a0,-1
2000162c:	a02d                	j	20001656 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
2000162e:	4605                	li	a2,1
20001630:	854a                	mv	a0,s2
20001632:	85d2                	mv	a1,s4
20001634:	a015                	j	20001658 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20001636:	4502                	lw	a0,0(sp)
20001638:	00450593          	addi	a1,a0,4
2000163c:	c02e                	sw	a1,0(sp)
2000163e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001640:	00001797          	auipc	a5,0x1
20001644:	17d78793          	addi	a5,a5,381 # 200027bd <kDigitsLow>
20001648:	4721                	li	a4,8
2000164a:	b75d                	j	200015f0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
2000164c:	00001597          	auipc	a1,0x1
20001650:	19158593          	addi	a1,a1,401 # 200027dd <kUnknownSpec>
20001654:	463d                	li	a2,15
20001656:	854a                	mv	a0,s2
20001658:	9982                	jalr	s3
2000165a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
2000165c:	000bc503          	lbu	a0,0(s7)
20001660:	d8051ce3          	bnez	a0,200013f8 <base_vfprintf+0x54>
20001664:	a819                	j	2000167a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20001666:	00001597          	auipc	a1,0x1
2000166a:	13a58593          	addi	a1,a1,314 # 200027a0 <kErrorNul>
2000166e:	4645                	li	a2,17
20001670:	854a                	mv	a0,s2
20001672:	9982                	jalr	s3
20001674:	9b2a                	add	s6,s6,a0
20001676:	a011                	j	2000167a <base_vfprintf+0x2d6>
20001678:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
2000167a:	855a                	mv	a0,s6
2000167c:	4db2                	lw	s11,12(sp)
2000167e:	4d42                	lw	s10,16(sp)
20001680:	4cd2                	lw	s9,20(sp)
20001682:	4c62                	lw	s8,24(sp)
20001684:	4bf2                	lw	s7,28(sp)
20001686:	5b02                	lw	s6,32(sp)
20001688:	5a92                	lw	s5,36(sp)
2000168a:	5a22                	lw	s4,40(sp)
2000168c:	59b2                	lw	s3,44(sp)
2000168e:	5942                	lw	s2,48(sp)
20001690:	54d2                	lw	s1,52(sp)
20001692:	5462                	lw	s0,56(sp)
20001694:	50f2                	lw	ra,60(sp)
20001696:	6121                	addi	sp,sp,64
20001698:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
2000169a:	00001597          	auipc	a1,0x1
2000169e:	11758593          	addi	a1,a1,279 # 200027b1 <kErrorTooWide>
200016a2:	4631                	li	a2,12
200016a4:	b7f1                	j	20001670 <base_vfprintf+0x2cc>

200016a6 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
200016a6:	7179                	addi	sp,sp,-48
200016a8:	ca06                	sw	ra,20(sp)
200016aa:	d646                	sw	a7,44(sp)
200016ac:	d442                	sw	a6,40(sp)
200016ae:	d23e                	sw	a5,36(sp)
200016b0:	d03a                	sw	a4,32(sp)
200016b2:	ce36                	sw	a3,28(sp)
200016b4:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200016b6:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200016b8:	c42a                	sw	a0,8(sp)
200016ba:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200016bc:	00000597          	auipc	a1,0x0
200016c0:	01258593          	addi	a1,a1,18 # 200016ce <snprintf_sink>
200016c4:	0028                	addi	a0,sp,8
200016c6:	39f9                	jal	200013a4 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200016c8:	40d2                	lw	ra,20(sp)
200016ca:	6145                	addi	sp,sp,48
200016cc:	8082                	ret

200016ce <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
200016ce:	1141                	addi	sp,sp,-16
200016d0:	c606                	sw	ra,12(sp)
200016d2:	c422                	sw	s0,8(sp)
200016d4:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
200016d6:	4140                	lw	s0,4(a0)
200016d8:	c00d                	beqz	s0,200016fa <snprintf_sink+0x2c>
200016da:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
200016dc:	00c46363          	bltu	s0,a2,200016e2 <snprintf_sink+0x14>
200016e0:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200016e2:	4088                	lw	a0,0(s1)
200016e4:	8622                	mv	a2,s0
200016e6:	1b7000ef          	jal	ra,2000209c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200016ea:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200016ec:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200016ee:	9522                	add	a0,a0,s0
200016f0:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200016f2:	40858533          	sub	a0,a1,s0
200016f6:	c0c8                	sw	a0,4(s1)
200016f8:	a011                	j	200016fc <snprintf_sink+0x2e>
200016fa:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200016fc:	8522                	mv	a0,s0
200016fe:	4492                	lw	s1,4(sp)
20001700:	4422                	lw	s0,8(sp)
20001702:	40b2                	lw	ra,12(sp)
20001704:	0141                	addi	sp,sp,16
20001706:	8082                	ret

20001708 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001708:	1101                	addi	sp,sp,-32
2000170a:	c206                	sw	ra,4(sp)
2000170c:	ce46                	sw	a7,28(sp)
2000170e:	cc42                	sw	a6,24(sp)
20001710:	ca3e                	sw	a5,20(sp)
20001712:	c83a                	sw	a4,16(sp)
20001714:	c636                	sw	a3,12(sp)
20001716:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001718:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
2000171a:	3169                	jal	200013a4 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
2000171c:	4092                	lw	ra,4(sp)
2000171e:	6105                	addi	sp,sp,32
20001720:	8082                	ret

20001722 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001722:	7139                	addi	sp,sp,-64
20001724:	de06                	sw	ra,60(sp)
20001726:	dc22                	sw	s0,56(sp)
20001728:	da26                	sw	s1,52(sp)
2000172a:	d84a                	sw	s2,48(sp)
2000172c:	d64e                	sw	s3,44(sp)
2000172e:	892e                	mv	s2,a1
20001730:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001732:	ca05                	beqz	a2,20001762 <write_digits+0x40>
20001734:	4501                	li	a0,0
20001736:	02b10813          	addi	a6,sp,43
2000173a:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
2000173c:	02e65633          	divu	a2,a2,a4
20001740:	02e60433          	mul	s0,a2,a4
20001744:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001748:	943e                	add	s0,s0,a5
2000174a:	00040403          	lb	s0,0(s0)
2000174e:	00a805b3          	add	a1,a6,a0
20001752:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001756:	157d                	addi	a0,a0,-1
20001758:	fee4f1e3          	bgeu	s1,a4,2000173a <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
2000175c:	40a00633          	neg	a2,a0
20001760:	a011                	j	20001764 <write_digits+0x42>
20001762:	4601                	li	a2,0
20001764:	4485                	li	s1,1
20001766:	c291                	beqz	a3,2000176a <write_digits+0x48>
20001768:	84b6                	mv	s1,a3
2000176a:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
2000176e:	00a4e463          	bltu	s1,a0,20001776 <write_digits+0x54>
20001772:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001776:	02967063          	bgeu	a2,s1,20001796 <write_digits+0x74>
2000177a:	0068                	addi	a0,sp,12
2000177c:	8d05                	sub	a0,a0,s1
2000177e:	02050513          	addi	a0,a0,32
20001782:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001786:	03000593          	li	a1,48
2000178a:	8622                	mv	a2,s0
2000178c:	127000ef          	jal	ra,200020b2 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001790:	147d                	addi	s0,s0,-1
20001792:	fc7d                	bnez	s0,20001790 <write_digits+0x6e>
20001794:	8626                	mv	a2,s1
20001796:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001798:	8d11                	sub	a0,a0,a2
2000179a:	02050593          	addi	a1,a0,32
2000179e:	854e                	mv	a0,s3
200017a0:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200017a2:	59b2                	lw	s3,44(sp)
200017a4:	5942                	lw	s2,48(sp)
200017a6:	54d2                	lw	s1,52(sp)
200017a8:	5462                	lw	s0,56(sp)
200017aa:	50f2                	lw	ra,60(sp)
200017ac:	6121                	addi	sp,sp,64
200017ae:	8082                	ret

200017b0 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
200017b0:	c581                	beqz	a1,200017b8 <dif_uart_init+0x8>
200017b2:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200017b4:	c188                	sw	a0,0(a1)
200017b6:	a011                	j	200017ba <dif_uart_init+0xa>
200017b8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200017ba:	8532                	mv	a0,a2
200017bc:	8082                	ret

200017be <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200017be:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
200017c0:	c606                	sw	ra,12(sp)
200017c2:	c422                	sw	s0,8(sp)
200017c4:	c226                	sw	s1,4(sp)
200017c6:	c935                	beqz	a0,2000183a <dif_uart_configure+0x7c>
200017c8:	84ae                	mv	s1,a1
200017ca:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
200017cc:	418c                	lw	a1,0(a1)
200017ce:	450d                	li	a0,3
200017d0:	c5b5                	beqz	a1,2000183c <dif_uart_configure+0x7e>
200017d2:	40d0                	lw	a2,4(s1)
200017d4:	c625                	beqz	a2,2000183c <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200017d6:	01459513          	slli	a0,a1,0x14
200017da:	81b1                	srli	a1,a1,0xc
200017dc:	4681                	li	a3,0
200017de:	1a7000ef          	jal	ra,20002184 <__udivdi3>
200017e2:	6641                	lui	a2,0x10
200017e4:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200017e6:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200017e8:	8d31                	xor	a0,a0,a2
200017ea:	8dc9                	or	a1,a1,a0
200017ec:	4511                	li	a0,4
200017ee:	e5b9                	bnez	a1,2000183c <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200017f0:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017f2:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200017f6:	4008                	lw	a0,0(s0)
200017f8:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017fa:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200017fc:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017fe:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001802:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001804:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001808:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000180a:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
2000180e:	4008                	lw	a0,0(s0)
20001810:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001812:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20001814:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001816:	01061513          	slli	a0,a2,0x10
2000181a:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
2000181e:	c291                	beqz	a3,20001822 <dif_uart_configure+0x64>
20001820:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001822:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001824:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001826:	e219                	bnez	a2,2000182c <dif_uart_configure+0x6e>
20001828:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
2000182c:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000182e:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001830:	400c                	lw	a1,0(s0)
20001832:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001834:	0005a223          	sw	zero,4(a1)
20001838:	a011                	j	2000183c <dif_uart_configure+0x7e>
2000183a:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
2000183c:	4492                	lw	s1,4(sp)
2000183e:	4422                	lw	s0,8(sp)
20001840:	40b2                	lw	ra,12(sp)
20001842:	0141                	addi	sp,sp,16
20001844:	8082                	ret

20001846 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001846:	1141                	addi	sp,sp,-16
20001848:	c606                	sw	ra,12(sp)
2000184a:	c422                	sw	s0,8(sp)
2000184c:	c226                	sw	s1,4(sp)
2000184e:	84aa                	mv	s1,a0
20001850:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001852:	c09d                	beqz	s1,20001878 <dif_uart_irq_is_pending+0x32>
20001854:	8432                	mv	s0,a2
20001856:	c20d                	beqz	a2,20001878 <dif_uart_irq_is_pending+0x32>
20001858:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000185a:	852e                	mv	a0,a1
2000185c:	85b2                	mv	a1,a2
2000185e:	2015                	jal	20001882 <uart_irq_offset_get>
20001860:	85aa                	mv	a1,a0
20001862:	4505                	li	a0,1
20001864:	c991                	beqz	a1,20001878 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001866:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001868:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
2000186a:	4602                	lw	a2,0(sp)
2000186c:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000186e:	00c5d5b3          	srl	a1,a1,a2
20001872:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20001874:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001878:	4492                	lw	s1,4(sp)
2000187a:	4422                	lw	s0,8(sp)
2000187c:	40b2                	lw	ra,12(sp)
2000187e:	0141                	addi	sp,sp,16
20001880:	8082                	ret

20001882 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001882:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20001884:	00a66563          	bltu	a2,a0,2000188e <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001888:	c188                	sw	a0,0(a1)
2000188a:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
2000188c:	8082                	ret
2000188e:	4501                	li	a0,0
20001890:	8082                	ret

20001892 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20001892:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20001894:	c606                	sw	ra,12(sp)
20001896:	c422                	sw	s0,8(sp)
20001898:	c10d                	beqz	a0,200018ba <dif_uart_irq_acknowledge+0x28>
2000189a:	842a                	mv	s0,a0
2000189c:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000189e:	852e                	mv	a0,a1
200018a0:	85b2                	mv	a1,a2
200018a2:	37c5                	jal	20001882 <uart_irq_offset_get>
200018a4:	85aa                	mv	a1,a0
200018a6:	4505                	li	a0,1
200018a8:	c991                	beqz	a1,200018bc <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200018aa:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
200018ac:	4010                	lw	a2,0(s0)
200018ae:	4501                	li	a0,0
200018b0:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200018b2:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018b6:	c20c                	sw	a1,0(a2)
200018b8:	a011                	j	200018bc <dif_uart_irq_acknowledge+0x2a>
200018ba:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
200018bc:	4422                	lw	s0,8(sp)
200018be:	40b2                	lw	ra,12(sp)
200018c0:	0141                	addi	sp,sp,16
200018c2:	8082                	ret

200018c4 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
200018c4:	c911                	beqz	a0,200018d8 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
200018c6:	c581                	beqz	a1,200018ce <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200018c8:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018ca:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
200018cc:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200018ce:	410c                	lw	a1,0(a0)
200018d0:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018d2:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
200018d6:	8082                	ret
200018d8:	4509                	li	a0,2
200018da:	8082                	ret

200018dc <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200018dc:	862a                	mv	a2,a0
200018de:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200018e0:	c611                	beqz	a2,200018ec <dif_uart_irq_restore_all+0x10>
200018e2:	c589                	beqz	a1,200018ec <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200018e4:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200018e6:	4210                	lw	a2,0(a2)
200018e8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200018ea:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200018ec:	8082                	ret

200018ee <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200018ee:	1141                	addi	sp,sp,-16
200018f0:	c606                	sw	ra,12(sp)
200018f2:	c422                	sw	s0,8(sp)
200018f4:	c226                	sw	s1,4(sp)
200018f6:	84aa                	mv	s1,a0
200018f8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200018fa:	c485                	beqz	s1,20001922 <dif_uart_irq_get_enabled+0x34>
200018fc:	8432                	mv	s0,a2
200018fe:	c215                	beqz	a2,20001922 <dif_uart_irq_get_enabled+0x34>
20001900:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001902:	852e                	mv	a0,a1
20001904:	85b2                	mv	a1,a2
20001906:	3fb5                	jal	20001882 <uart_irq_offset_get>
20001908:	85aa                	mv	a1,a0
2000190a:	4505                	li	a0,1
2000190c:	c999                	beqz	a1,20001922 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000190e:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001910:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001912:	4602                	lw	a2,0(sp)
20001914:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001916:	00c5d5b3          	srl	a1,a1,a2
2000191a:	8985                	andi	a1,a1,1
2000191c:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20001920:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001922:	4492                	lw	s1,4(sp)
20001924:	4422                	lw	s0,8(sp)
20001926:	40b2                	lw	ra,12(sp)
20001928:	0141                	addi	sp,sp,16
2000192a:	8082                	ret

2000192c <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
2000192c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
2000192e:	c606                	sw	ra,12(sp)
20001930:	c422                	sw	s0,8(sp)
20001932:	c226                	sw	s1,4(sp)
20001934:	c91d                	beqz	a0,2000196a <dif_uart_irq_set_enabled+0x3e>
20001936:	8432                	mv	s0,a2
20001938:	84aa                	mv	s1,a0
2000193a:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000193c:	852e                	mv	a0,a1
2000193e:	85b2                	mv	a1,a2
20001940:	3789                	jal	20001882 <uart_irq_offset_get>
20001942:	85aa                	mv	a1,a0
20001944:	4505                	li	a0,1
20001946:	c19d                	beqz	a1,2000196c <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001948:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000194a:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
2000194c:	4682                	lw	a3,0(sp)
2000194e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001950:	00143713          	seqz	a4,s0
20001954:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001956:	00d797b3          	sll	a5,a5,a3
2000195a:	fff7c793          	not	a5,a5
2000195e:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001960:	00d716b3          	sll	a3,a4,a3
20001964:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001966:	c1d0                	sw	a2,4(a1)
20001968:	a011                	j	2000196c <dif_uart_irq_set_enabled+0x40>
2000196a:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
2000196c:	4492                	lw	s1,4(sp)
2000196e:	4422                	lw	s0,8(sp)
20001970:	40b2                	lw	ra,12(sp)
20001972:	0141                	addi	sp,sp,16
20001974:	8082                	ret

20001976 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20001976:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20001978:	c606                	sw	ra,12(sp)
2000197a:	c422                	sw	s0,8(sp)
2000197c:	c10d                	beqz	a0,2000199e <dif_uart_irq_force+0x28>
2000197e:	842a                	mv	s0,a0
20001980:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001982:	852e                	mv	a0,a1
20001984:	85b2                	mv	a1,a2
20001986:	3df5                	jal	20001882 <uart_irq_offset_get>
20001988:	85aa                	mv	a1,a0
2000198a:	4505                	li	a0,1
2000198c:	c991                	beqz	a1,200019a0 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
2000198e:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20001990:	4010                	lw	a2,0(s0)
20001992:	4501                	li	a0,0
20001994:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001996:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000199a:	c60c                	sw	a1,8(a2)
2000199c:	a011                	j	200019a0 <dif_uart_irq_force+0x2a>
2000199e:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
200019a0:	4422                	lw	s0,8(sp)
200019a2:	40b2                	lw	ra,12(sp)
200019a4:	0141                	addi	sp,sp,16
200019a6:	8082                	ret

200019a8 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200019a8:	cd09                	beqz	a0,200019c2 <dif_uart_watermark_rx_set+0x1a>
200019aa:	4691                	li	a3,4
200019ac:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200019ae:	00b6eb63          	bltu	a3,a1,200019c4 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200019b2:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019b4:	4d54                	lw	a3,28(a0)
200019b6:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
200019b8:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200019ba:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200019bc:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200019be:	cd4c                	sw	a1,28(a0)
200019c0:	a011                	j	200019c4 <dif_uart_watermark_rx_set+0x1c>
200019c2:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200019c4:	8532                	mv	a0,a2
200019c6:	8082                	ret

200019c8 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200019c8:	cd11                	beqz	a0,200019e4 <dif_uart_watermark_tx_set+0x1c>
200019ca:	468d                	li	a3,3
200019cc:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200019ce:	00b6ec63          	bltu	a3,a1,200019e6 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200019d2:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019d4:	4d54                	lw	a3,28(a0)
200019d6:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
200019d8:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200019da:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200019de:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200019e0:	cd4c                	sw	a1,28(a0)
200019e2:	a011                	j	200019e6 <dif_uart_watermark_tx_set+0x1e>
200019e4:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200019e6:	8532                	mv	a0,a2
200019e8:	8082                	ret

200019ea <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200019ea:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200019ec:	c51d                	beqz	a0,20001a1a <dif_uart_bytes_send+0x30>
200019ee:	c595                	beqz	a1,20001a1a <dif_uart_bytes_send+0x30>
200019f0:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200019f2:	c20d                	beqz	a2,20001a14 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200019f4:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019f8:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200019fc:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200019fe:	eb19                	bnez	a4,20001a14 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20001a00:	00f58733          	add	a4,a1,a5
20001a04:	00074703          	lbu	a4,0(a4) # 20000000 <_stack_end+0xffe0000>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001a08:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a0a:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001a0e:	fef613e3          	bne	a2,a5,200019f4 <dif_uart_bytes_send+0xa>
20001a12:	87b2                	mv	a5,a2
20001a14:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001a16:	c291                	beqz	a3,20001a1a <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001a18:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001a1a:	853a                	mv	a0,a4
20001a1c:	8082                	ret

20001a1e <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001a1e:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20001a20:	c515                	beqz	a0,20001a4c <dif_uart_bytes_receive+0x2e>
20001a22:	c60d                	beqz	a2,20001a4c <dif_uart_bytes_receive+0x2e>
20001a24:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a26:	cd99                	beqz	a1,20001a44 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001a28:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a2a:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a2c:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a30:	eb91                	bnez	a5,20001a44 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a32:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001a34:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001a38:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001a3a:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a3e:	ff0595e3          	bne	a1,a6,20001a28 <dif_uart_bytes_receive+0xa>
20001a42:	882e                	mv	a6,a1
20001a44:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001a46:	c299                	beqz	a3,20001a4c <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001a48:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001a4c:	853a                	mv	a0,a4
20001a4e:	8082                	ret

20001a50 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001a50:	cd19                	beqz	a0,20001a6e <dif_uart_byte_send_polled+0x1e>
20001a52:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a54:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a56:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001a58:	fef5                	bnez	a3,20001a54 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a5a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a5c:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001a5e:	e299                	bnez	a3,20001a64 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a60:	ce0c                	sw	a1,24(a2)
20001a62:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a64:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a66:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001a68:	dd75                	beqz	a0,20001a64 <dif_uart_byte_send_polled+0x14>
20001a6a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001a6c:	8082                	ret
20001a6e:	4509                	li	a0,2
20001a70:	8082                	ret

20001a72 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001a72:	862a                	mv	a2,a0
20001a74:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001a76:	c205                	beqz	a2,20001a96 <dif_uart_byte_receive_polled+0x24>
20001a78:	cd99                	beqz	a1,20001a96 <dif_uart_byte_receive_polled+0x24>
20001a7a:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a7c:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a7e:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001a82:	fd6d                	bnez	a0,20001a7c <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a84:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a86:	02057693          	andi	a3,a0,32
20001a8a:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a8c:	e689                	bnez	a3,20001a96 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a8e:	4a50                	lw	a2,20(a2)
20001a90:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001a92:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001a96:	8082                	ret

20001a98 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001a98:	862a                	mv	a2,a0
20001a9a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001a9c:	ca09                	beqz	a2,20001aae <dif_uart_rx_bytes_available+0x16>
20001a9e:	c981                	beqz	a1,20001aae <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001aa0:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001aa2:	5110                	lw	a2,32(a0)
20001aa4:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001aa6:	8241                	srli	a2,a2,0x10
20001aa8:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001aac:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001aae:	8082                	ret

20001ab0 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001ab0:	862a                	mv	a2,a0
20001ab2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001ab4:	ce01                	beqz	a2,20001acc <dif_uart_tx_bytes_available+0x1c>
20001ab6:	c999                	beqz	a1,20001acc <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001ab8:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001aba:	5110                	lw	a2,32(a0)
20001abc:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001abe:	03f67613          	andi	a2,a2,63
20001ac2:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001ac6:	40c68633          	sub	a2,a3,a2
20001aca:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001acc:	8082                	ret

20001ace <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001ace:	c11d                	beqz	a0,20001af4 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001ad0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001ad2:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001ad4:	ffd5f693          	andi	a3,a1,-3
20001ad8:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001adc:	fff58713          	addi	a4,a1,-1
20001ae0:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001ae2:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001ae6:	00f77463          	bgeu	a4,a5,20001aee <dif_uart_fifo_reset+0x20>
20001aea:	0025e593          	ori	a1,a1,2
20001aee:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001af0:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001af2:	8082                	ret
20001af4:	4509                	li	a0,2
20001af6:	8082                	ret

20001af8 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001af8:	c515                	beqz	a0,20001b24 <dif_uart_loopback_set+0x2c>
20001afa:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20001afc:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001afe:	0015b593          	seqz	a1,a1
20001b02:	4715                	li	a4,5
20001b04:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b08:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001b0a:	00163613          	seqz	a2,a2
20001b0e:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001b10:	00b797b3          	sll	a5,a5,a1
20001b14:	fff7c793          	not	a5,a5
20001b18:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001b1a:	00b615b3          	sll	a1,a2,a1
20001b1e:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b20:	c54c                	sw	a1,12(a0)
20001b22:	a011                	j	20001b26 <dif_uart_loopback_set+0x2e>
20001b24:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001b26:	8536                	mv	a0,a3
20001b28:	8082                	ret

20001b2a <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001b2a:	862a                	mv	a2,a0
20001b2c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001b2e:	ca11                	beqz	a2,20001b42 <dif_uart_enable_rx_timeout+0x18>
20001b30:	0185d693          	srli	a3,a1,0x18
20001b34:	e699                	bnez	a3,20001b42 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001b36:	4210                	lw	a2,0(a2)
20001b38:	4501                	li	a0,0
20001b3a:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001b3e:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b40:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001b42:	8082                	ret

20001b44 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001b44:	c511                	beqz	a0,20001b50 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001b46:	410c                	lw	a1,0(a0)
20001b48:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b4a:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001b4e:	8082                	ret
20001b50:	4509                	li	a0,2
20001b52:	8082                	ret

20001b54 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001b54:	86aa                	mv	a3,a0
20001b56:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001b58:	ce99                	beqz	a3,20001b76 <dif_uart_get_rx_timeout+0x22>
20001b5a:	cd91                	beqz	a1,20001b76 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001b5c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b5e:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001b60:	fff6c513          	not	a0,a3
20001b64:	817d                	srli	a0,a0,0x1f
20001b66:	c188                	sw	a0,0(a1)
20001b68:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001b6a:	c611                	beqz	a2,20001b76 <dif_uart_get_rx_timeout+0x22>
20001b6c:	010005b7          	lui	a1,0x1000
20001b70:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001b72:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001b74:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001b76:	8082                	ret

20001b78 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20001b78:	10500073          	wfi
20001b7c:	8082                	ret

20001b7e <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20001b7e:	1141                	addi	sp,sp,-16
20001b80:	c606                	sw	ra,12(sp)
20001b82:	00001597          	auipc	a1,0x1
20001b86:	09e58593          	addi	a1,a1,158 # 20002c20 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20001b8a:	41d0                	lw	a2,4(a1)
20001b8c:	4194                	lw	a3,0(a1)
20001b8e:	02a605b3          	mul	a1,a2,a0
20001b92:	02a6b633          	mulhu	a2,a3,a0
20001b96:	95b2                	add	a1,a1,a2
20001b98:	02a68533          	mul	a0,a3,a0
20001b9c:	000f4637          	lui	a2,0xf4
20001ba0:	24060613          	addi	a2,a2,576 # f4240 <init_uart.kLogFields.2+0xe3ef8>
20001ba4:	4681                	li	a3,0
20001ba6:	2bf9                	jal	20002184 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20001ba8:	4801                	li	a6,0
20001baa:	4701                	li	a4,0

20001bac <read0>:
20001bac:	b8002873          	csrr	a6,mcycleh
20001bb0:	b00026f3          	csrr	a3,mcycle
20001bb4:	b8002773          	csrr	a4,mcycleh
20001bb8:	fee81ae3          	bne	a6,a4,20001bac <read0>
20001bbc:	4781                	li	a5,0
20001bbe:	4601                	li	a2,0

20001bc0 <read1>:
20001bc0:	b80027f3          	csrr	a5,mcycleh
20001bc4:	b0002773          	csrr	a4,mcycle
20001bc8:	b8002673          	csrr	a2,mcycleh
20001bcc:	fec79ae3          	bne	a5,a2,20001bc0 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20001bd0:	00d73633          	sltu	a2,a4,a3
20001bd4:	410787b3          	sub	a5,a5,a6
20001bd8:	8f91                	sub	a5,a5,a2
20001bda:	00b78663          	beq	a5,a1,20001be6 <read1+0x26>
20001bde:	00b7b733          	sltu	a4,a5,a1
20001be2:	ff69                	bnez	a4,20001bbc <read0+0x10>
20001be4:	a031                	j	20001bf0 <read1+0x30>
20001be6:	40d70633          	sub	a2,a4,a3
20001bea:	00a63733          	sltu	a4,a2,a0
20001bee:	f779                	bnez	a4,20001bbc <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
20001bf0:	40b2                	lw	ra,12(sp)
20001bf2:	0141                	addi	sp,sp,16
20001bf4:	8082                	ret

20001bf6 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20001bf6:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20001bfa:	bff5                	j	20001bf6 <abort>

20001bfc <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20001bfc:	1101                	addi	sp,sp,-32
20001bfe:	ce06                	sw	ra,28(sp)
20001c00:	cc22                	sw	s0,24(sp)
20001c02:	65b1                	lui	a1,0xc
20001c04:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20001c08:	02b50163          	beq	a0,a1,20001c2a <test_status_set+0x2e>
20001c0c:	65a5                	lui	a1,0x9
20001c0e:	05b5                	addi	a1,a1,13
20001c10:	02b50f63          	beq	a0,a1,20001c4e <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001c14:	00001597          	auipc	a1,0x1
20001c18:	03058593          	addi	a1,a1,48 # 20002c44 <kDeviceTestStatusAddress>
20001c1c:	418c                	lw	a1,0(a1)
20001c1e:	c191                	beqz	a1,20001c22 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c20:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20001c22:	4462                	lw	s0,24(sp)
20001c24:	40f2                	lw	ra,28(sp)
20001c26:	6105                	addi	sp,sp,32
20001c28:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20001c2a:	00001517          	auipc	a0,0x1
20001c2e:	01e50513          	addi	a0,a0,30 # 20002c48 <kDeviceLogBypassUartAddress>
20001c32:	4108                	lw	a0,0(a0)
20001c34:	ed1d                	bnez	a0,20001c72 <test_status_set+0x76>
20001c36:	00001597          	auipc	a1,0x1
20001c3a:	bce58593          	addi	a1,a1,-1074 # 20002804 <kDifUartFifoSizeBytes+0x18>
20001c3e:	840a                	mv	s0,sp
20001c40:	4651                	li	a2,20
20001c42:	8522                	mv	a0,s0
20001c44:	29a1                	jal	2000209c <memcpy>
20001c46:	8522                	mv	a0,s0
20001c48:	dc0ff0ef          	jal	ra,20001208 <base_log_internal_core>
20001c4c:	a815                	j	20001c80 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20001c4e:	00001517          	auipc	a0,0x1
20001c52:	ffa50513          	addi	a0,a0,-6 # 20002c48 <kDeviceLogBypassUartAddress>
20001c56:	4108                	lw	a0,0(a0)
20001c58:	ed15                	bnez	a0,20001c94 <test_status_set+0x98>
20001c5a:	00001597          	auipc	a1,0x1
20001c5e:	b9658593          	addi	a1,a1,-1130 # 200027f0 <kDifUartFifoSizeBytes+0x4>
20001c62:	840a                	mv	s0,sp
20001c64:	4651                	li	a2,20
20001c66:	8522                	mv	a0,s0
20001c68:	2915                	jal	2000209c <memcpy>
20001c6a:	8522                	mv	a0,s0
20001c6c:	d9cff0ef          	jal	ra,20001208 <base_log_internal_core>
20001c70:	a80d                	j	20001ca2 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20001c72:	e000e517          	auipc	a0,0xe000e
20001c76:	63650513          	addi	a0,a0,1590 # 102a8 <test_status_set.kLogFields.2>
20001c7a:	4581                	li	a1,0
20001c7c:	e36ff0ef          	jal	ra,200012b2 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001c80:	00001517          	auipc	a0,0x1
20001c84:	fc450513          	addi	a0,a0,-60 # 20002c44 <kDeviceTestStatusAddress>
20001c88:	4108                	lw	a0,0(a0)
20001c8a:	c50d                	beqz	a0,20001cb4 <test_status_set+0xb8>
20001c8c:	65b1                	lui	a1,0xc
20001c8e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20001c92:	a005                	j	20001cb2 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20001c94:	e000e517          	auipc	a0,0xe000e
20001c98:	60050513          	addi	a0,a0,1536 # 10294 <test_status_set.kLogFields>
20001c9c:	4581                	li	a1,0
20001c9e:	e14ff0ef          	jal	ra,200012b2 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001ca2:	00001517          	auipc	a0,0x1
20001ca6:	fa250513          	addi	a0,a0,-94 # 20002c44 <kDeviceTestStatusAddress>
20001caa:	4108                	lw	a0,0(a0)
20001cac:	c501                	beqz	a0,20001cb4 <test_status_set+0xb8>
20001cae:	65a5                	lui	a1,0x9
20001cb0:	05b5                	addi	a1,a1,13
20001cb2:	c10c                	sw	a1,0(a0)
20001cb4:	3789                	jal	20001bf6 <abort>
	...

20001cb8 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20001cb8:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20001cba:	de06                	sw	ra,60(sp)
20001cbc:	dc16                	sw	t0,56(sp)
20001cbe:	da1a                	sw	t1,52(sp)
20001cc0:	d81e                	sw	t2,48(sp)
20001cc2:	d62a                	sw	a0,44(sp)
20001cc4:	d42e                	sw	a1,40(sp)
20001cc6:	d232                	sw	a2,36(sp)
20001cc8:	d036                	sw	a3,32(sp)
20001cca:	ce3a                	sw	a4,28(sp)
20001ccc:	cc3e                	sw	a5,24(sp)
20001cce:	ca42                	sw	a6,20(sp)
20001cd0:	c846                	sw	a7,16(sp)
20001cd2:	c672                	sw	t3,12(sp)
20001cd4:	c476                	sw	t4,8(sp)
20001cd6:	c27a                	sw	t5,4(sp)
20001cd8:	c07e                	sw	t6,0(sp)
20001cda:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
20001cde:	897d                	andi	a0,a0,31
20001ce0:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20001ce2:	00a5dc63          	bge	a1,a0,20001cfa <handler_exception+0x42>
20001ce6:	4599                	li	a1,6
20001ce8:	02a5c263          	blt	a1,a0,20001d0c <handler_exception+0x54>
20001cec:	458d                	li	a1,3
20001cee:	02b50c63          	beq	a0,a1,20001d26 <handler_exception+0x6e>
20001cf2:	4595                	li	a1,5
20001cf4:	02b50763          	beq	a0,a1,20001d22 <handler_exception+0x6a>
20001cf8:	a015                	j	20001d1c <handler_exception+0x64>
20001cfa:	c115                	beqz	a0,20001d1e <handler_exception+0x66>
20001cfc:	4585                	li	a1,1
20001cfe:	02b50063          	beq	a0,a1,20001d1e <handler_exception+0x66>
20001d02:	4589                	li	a1,2
20001d04:	00b51c63          	bne	a0,a1,20001d1c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20001d08:	208d                	jal	20001d6a <handler_instr_ill_fault>
20001d0a:	a839                	j	20001d28 <handler_exception+0x70>
20001d0c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
20001d0e:	00b50a63          	beq	a0,a1,20001d22 <handler_exception+0x6a>
20001d12:	45ad                	li	a1,11
20001d14:	00b51463          	bne	a0,a1,20001d1c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20001d18:	2065                	jal	20001dc0 <handler_ecall>
20001d1a:	a039                	j	20001d28 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
20001d1c:	a001                	j	20001d1c <handler_exception+0x64>
20001d1e:	2805                	jal	20001d4e <handler_instr_acc_fault>
20001d20:	a021                	j	20001d28 <handler_exception+0x70>
20001d22:	2049                	jal	20001da4 <handler_lsu_fault>
20001d24:	a011                	j	20001d28 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20001d26:	208d                	jal	20001d88 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20001d28:	4f82                	lw	t6,0(sp)
20001d2a:	4f12                	lw	t5,4(sp)
20001d2c:	4ea2                	lw	t4,8(sp)
20001d2e:	4e32                	lw	t3,12(sp)
20001d30:	48c2                	lw	a7,16(sp)
20001d32:	4852                	lw	a6,20(sp)
20001d34:	47e2                	lw	a5,24(sp)
20001d36:	4772                	lw	a4,28(sp)
20001d38:	5682                	lw	a3,32(sp)
20001d3a:	5612                	lw	a2,36(sp)
20001d3c:	55a2                	lw	a1,40(sp)
20001d3e:	5532                	lw	a0,44(sp)
20001d40:	53c2                	lw	t2,48(sp)
20001d42:	5352                	lw	t1,52(sp)
20001d44:	52e2                	lw	t0,56(sp)
20001d46:	50f2                	lw	ra,60(sp)
20001d48:	6121                	addi	sp,sp,64
20001d4a:	30200073          	mret

20001d4e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20001d4e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20001d50:	de06                	sw	ra,60(sp)
20001d52:	dc22                	sw	s0,56(sp)
20001d54:	00001597          	auipc	a1,0x1
20001d58:	51758593          	addi	a1,a1,1303 # 2000326b <__clz_tab+0x61f>
20001d5c:	0040                	addi	s0,sp,4
20001d5e:	03400613          	li	a2,52
20001d62:	8522                	mv	a0,s0
20001d64:	2e25                	jal	2000209c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
20001d66:	8522                	mv	a0,s0
20001d68:	2a71                	jal	20001f04 <print_exc_msg>

20001d6a <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20001d6a:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20001d6c:	c686                	sw	ra,76(sp)
20001d6e:	c4a2                	sw	s0,72(sp)
20001d70:	00001597          	auipc	a1,0x1
20001d74:	52f58593          	addi	a1,a1,1327 # 2000329f <__clz_tab+0x653>
20001d78:	00d10413          	addi	s0,sp,13
20001d7c:	03b00613          	li	a2,59
20001d80:	8522                	mv	a0,s0
20001d82:	2e29                	jal	2000209c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20001d84:	8522                	mv	a0,s0
20001d86:	2abd                	jal	20001f04 <print_exc_msg>

20001d88 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20001d88:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20001d8a:	de06                	sw	ra,60(sp)
20001d8c:	dc22                	sw	s0,56(sp)
20001d8e:	00001597          	auipc	a1,0x1
20001d92:	54c58593          	addi	a1,a1,1356 # 200032da <__clz_tab+0x68e>
20001d96:	840a                	mv	s0,sp
20001d98:	03800613          	li	a2,56
20001d9c:	8522                	mv	a0,s0
20001d9e:	2cfd                	jal	2000209c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20001da0:	8522                	mv	a0,s0
20001da2:	228d                	jal	20001f04 <print_exc_msg>

20001da4 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20001da4:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20001da6:	de06                	sw	ra,60(sp)
20001da8:	dc22                	sw	s0,56(sp)
20001daa:	00001597          	auipc	a1,0x1
20001dae:	56858593          	addi	a1,a1,1384 # 20003312 <__clz_tab+0x6c6>
20001db2:	0020                	addi	s0,sp,8
20001db4:	03000613          	li	a2,48
20001db8:	8522                	mv	a0,s0
20001dba:	24cd                	jal	2000209c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20001dbc:	8522                	mv	a0,s0
20001dbe:	2299                	jal	20001f04 <print_exc_msg>

20001dc0 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20001dc0:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20001dc2:	ce06                	sw	ra,28(sp)
20001dc4:	cc22                	sw	s0,24(sp)
20001dc6:	00001517          	auipc	a0,0x1
20001dca:	e8250513          	addi	a0,a0,-382 # 20002c48 <kDeviceLogBypassUartAddress>
20001dce:	4108                	lw	a0,0(a0)
20001dd0:	c909                	beqz	a0,20001de2 <handler_ecall+0x22>
20001dd2:	e000e517          	auipc	a0,0xe000e
20001dd6:	52650513          	addi	a0,a0,1318 # 102f8 <handler_ecall.kLogFields>
20001dda:	4581                	li	a1,0
20001ddc:	cd6ff0ef          	jal	ra,200012b2 <base_log_internal_dv>
20001de0:	a821                	j	20001df8 <handler_ecall+0x38>
20001de2:	00001597          	auipc	a1,0x1
20001de6:	a7258593          	addi	a1,a1,-1422 # 20002854 <kDifUartFifoSizeBytes+0x68>
20001dea:	840a                	mv	s0,sp
20001dec:	4651                	li	a2,20
20001dee:	8522                	mv	a0,s0
20001df0:	2475                	jal	2000209c <memcpy>
20001df2:	8522                	mv	a0,s0
20001df4:	c14ff0ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20001df8:	a001                	j	20001df8 <handler_ecall+0x38>
20001dfa:	0001                	nop

20001dfc <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20001dfc:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
20001dfe:	ce86                	sw	ra,92(sp)
20001e00:	cc96                	sw	t0,88(sp)
20001e02:	ca9a                	sw	t1,84(sp)
20001e04:	c89e                	sw	t2,80(sp)
20001e06:	c6a2                	sw	s0,76(sp)
20001e08:	c4aa                	sw	a0,72(sp)
20001e0a:	c2ae                	sw	a1,68(sp)
20001e0c:	c0b2                	sw	a2,64(sp)
20001e0e:	de36                	sw	a3,60(sp)
20001e10:	dc3a                	sw	a4,56(sp)
20001e12:	da3e                	sw	a5,52(sp)
20001e14:	d842                	sw	a6,48(sp)
20001e16:	d646                	sw	a7,44(sp)
20001e18:	d472                	sw	t3,40(sp)
20001e1a:	d276                	sw	t4,36(sp)
20001e1c:	d07a                	sw	t5,32(sp)
20001e1e:	ce7e                	sw	t6,28(sp)
20001e20:	00001517          	auipc	a0,0x1
20001e24:	e2850513          	addi	a0,a0,-472 # 20002c48 <kDeviceLogBypassUartAddress>
20001e28:	4108                	lw	a0,0(a0)
20001e2a:	c909                	beqz	a0,20001e3c <handler_irq_software+0x40>
20001e2c:	e000e517          	auipc	a0,0xe000e
20001e30:	49050513          	addi	a0,a0,1168 # 102bc <handler_irq_software.kLogFields>
20001e34:	4581                	li	a1,0
20001e36:	c7cff0ef          	jal	ra,200012b2 <base_log_internal_dv>
20001e3a:	a821                	j	20001e52 <handler_irq_software+0x56>
20001e3c:	00001597          	auipc	a1,0x1
20001e40:	9dc58593          	addi	a1,a1,-1572 # 20002818 <kDifUartFifoSizeBytes+0x2c>
20001e44:	0020                	addi	s0,sp,8
20001e46:	4651                	li	a2,20
20001e48:	8522                	mv	a0,s0
20001e4a:	2c89                	jal	2000209c <memcpy>
20001e4c:	8522                	mv	a0,s0
20001e4e:	bbaff0ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
20001e52:	a001                	j	20001e52 <handler_irq_software+0x56>

20001e54 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
20001e54:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
20001e56:	ce86                	sw	ra,92(sp)
20001e58:	cc96                	sw	t0,88(sp)
20001e5a:	ca9a                	sw	t1,84(sp)
20001e5c:	c89e                	sw	t2,80(sp)
20001e5e:	c6a2                	sw	s0,76(sp)
20001e60:	c4aa                	sw	a0,72(sp)
20001e62:	c2ae                	sw	a1,68(sp)
20001e64:	c0b2                	sw	a2,64(sp)
20001e66:	de36                	sw	a3,60(sp)
20001e68:	dc3a                	sw	a4,56(sp)
20001e6a:	da3e                	sw	a5,52(sp)
20001e6c:	d842                	sw	a6,48(sp)
20001e6e:	d646                	sw	a7,44(sp)
20001e70:	d472                	sw	t3,40(sp)
20001e72:	d276                	sw	t4,36(sp)
20001e74:	d07a                	sw	t5,32(sp)
20001e76:	ce7e                	sw	t6,28(sp)
20001e78:	00001517          	auipc	a0,0x1
20001e7c:	dd050513          	addi	a0,a0,-560 # 20002c48 <kDeviceLogBypassUartAddress>
20001e80:	4108                	lw	a0,0(a0)
20001e82:	c909                	beqz	a0,20001e94 <handler_irq_timer+0x40>
20001e84:	e000e517          	auipc	a0,0xe000e
20001e88:	44c50513          	addi	a0,a0,1100 # 102d0 <handler_irq_timer.kLogFields>
20001e8c:	4581                	li	a1,0
20001e8e:	c24ff0ef          	jal	ra,200012b2 <base_log_internal_dv>
20001e92:	a821                	j	20001eaa <handler_irq_timer+0x56>
20001e94:	00001597          	auipc	a1,0x1
20001e98:	99858593          	addi	a1,a1,-1640 # 2000282c <kDifUartFifoSizeBytes+0x40>
20001e9c:	0020                	addi	s0,sp,8
20001e9e:	4651                	li	a2,20
20001ea0:	8522                	mv	a0,s0
20001ea2:	2aed                	jal	2000209c <memcpy>
20001ea4:	8522                	mv	a0,s0
20001ea6:	b62ff0ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20001eaa:	a001                	j	20001eaa <handler_irq_timer+0x56>
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20001eac:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20001eae:	ce86                	sw	ra,92(sp)
20001eb0:	cc96                	sw	t0,88(sp)
20001eb2:	ca9a                	sw	t1,84(sp)
20001eb4:	c89e                	sw	t2,80(sp)
20001eb6:	c6a2                	sw	s0,76(sp)
20001eb8:	c4aa                	sw	a0,72(sp)
20001eba:	c2ae                	sw	a1,68(sp)
20001ebc:	c0b2                	sw	a2,64(sp)
20001ebe:	de36                	sw	a3,60(sp)
20001ec0:	dc3a                	sw	a4,56(sp)
20001ec2:	da3e                	sw	a5,52(sp)
20001ec4:	d842                	sw	a6,48(sp)
20001ec6:	d646                	sw	a7,44(sp)
20001ec8:	d472                	sw	t3,40(sp)
20001eca:	d276                	sw	t4,36(sp)
20001ecc:	d07a                	sw	t5,32(sp)
20001ece:	ce7e                	sw	t6,28(sp)
20001ed0:	00001517          	auipc	a0,0x1
20001ed4:	d7850513          	addi	a0,a0,-648 # 20002c48 <kDeviceLogBypassUartAddress>
20001ed8:	4108                	lw	a0,0(a0)
20001eda:	c909                	beqz	a0,20001eec <handler_irq_timer+0x98>
20001edc:	e000e517          	auipc	a0,0xe000e
20001ee0:	40850513          	addi	a0,a0,1032 # 102e4 <handler_irq_external.kLogFields>
20001ee4:	4581                	li	a1,0
20001ee6:	bccff0ef          	jal	ra,200012b2 <base_log_internal_dv>
20001eea:	a821                	j	20001f02 <handler_irq_timer+0xae>
20001eec:	00001597          	auipc	a1,0x1
20001ef0:	95458593          	addi	a1,a1,-1708 # 20002840 <kDifUartFifoSizeBytes+0x54>
20001ef4:	0020                	addi	s0,sp,8
20001ef6:	4651                	li	a2,20
20001ef8:	8522                	mv	a0,s0
20001efa:	224d                	jal	2000209c <memcpy>
20001efc:	8522                	mv	a0,s0
20001efe:	b0aff0ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20001f02:	a001                	j	20001f02 <handler_irq_timer+0xae>

20001f04 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20001f04:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20001f06:	ce06                	sw	ra,28(sp)
20001f08:	cc22                	sw	s0,24(sp)
20001f0a:	ca26                	sw	s1,20(sp)
20001f0c:	00001597          	auipc	a1,0x1
20001f10:	d3c58593          	addi	a1,a1,-708 # 20002c48 <kDeviceLogBypassUartAddress>
20001f14:	418c                	lw	a1,0(a1)
20001f16:	842a                	mv	s0,a0
20001f18:	c19d                	beqz	a1,20001f3e <print_exc_msg+0x3a>
20001f1a:	e000e517          	auipc	a0,0xe000e
20001f1e:	3f250513          	addi	a0,a0,1010 # 1030c <print_exc_msg.kLogFields>
20001f22:	4585                	li	a1,1
20001f24:	8622                	mv	a2,s0
20001f26:	b8cff0ef          	jal	ra,200012b2 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20001f2a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20001f2e:	e000e517          	auipc	a0,0xe000e
20001f32:	3f250513          	addi	a0,a0,1010 # 10320 <print_exc_msg.kLogFields.6>
20001f36:	4585                	li	a1,1
20001f38:	b7aff0ef          	jal	ra,200012b2 <base_log_internal_dv>
20001f3c:	a81d                	j	20001f72 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20001f3e:	00001597          	auipc	a1,0x1
20001f42:	92a58593          	addi	a1,a1,-1750 # 20002868 <kDifUartFifoSizeBytes+0x7c>
20001f46:	848a                	mv	s1,sp
20001f48:	4651                	li	a2,20
20001f4a:	8526                	mv	a0,s1
20001f4c:	2a81                	jal	2000209c <memcpy>
20001f4e:	8526                	mv	a0,s1
20001f50:	85a2                	mv	a1,s0
20001f52:	ab6ff0ef          	jal	ra,20001208 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20001f56:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20001f5a:	00001597          	auipc	a1,0x1
20001f5e:	92258593          	addi	a1,a1,-1758 # 2000287c <kDifUartFifoSizeBytes+0x90>
20001f62:	848a                	mv	s1,sp
20001f64:	4651                	li	a2,20
20001f66:	8526                	mv	a0,s1
20001f68:	2a15                	jal	2000209c <memcpy>
20001f6a:	8526                	mv	a0,s1
20001f6c:	85a2                	mv	a1,s0
20001f6e:	a9aff0ef          	jal	ra,20001208 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20001f72:	a001                	j	20001f72 <print_exc_msg+0x6e>

20001f74 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20001f74:	1141                	addi	sp,sp,-16
20001f76:	c606                	sw	ra,12(sp)
20001f78:	c422                	sw	s0,8(sp)
20001f7a:	6511                	lui	a0,0x4
20001f7c:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20001f80:	39b5                	jal	20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20001f82:	00001517          	auipc	a0,0x1
20001f86:	c9650513          	addi	a0,a0,-874 # 20002c18 <kDeviceType>
20001f8a:	4108                	lw	a0,0(a0)
20001f8c:	c111                	beqz	a0,20001f90 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20001f8e:	2815                	jal	20001fc2 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20001f90:	d2afe0ef          	jal	ra,200004ba <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20001f94:	00000597          	auipc	a1,0x0
20001f98:	62458593          	addi	a1,a1,1572 # 200025b8 <kTestConfig>
20001f9c:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20001fa0:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20001fa2:	c191                	beqz	a1,20001fa6 <main+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20001fa4:	2839                	jal	20001fc2 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20001fa6:	20ed                	jal	20002090 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20001fa8:	e409                	bnez	s0,20001fb2 <main+0x3e>
20001faa:	6531                	lui	a0,0xc
20001fac:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001fb0:	a019                	j	20001fb6 <main+0x42>
20001fb2:	6525                	lui	a0,0x9
20001fb4:	0535                	addi	a0,a0,13
20001fb6:	3199                	jal	20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20001fb8:	4505                	li	a0,1
20001fba:	4422                	lw	s0,8(sp)
20001fbc:	40b2                	lw	ra,12(sp)
20001fbe:	0141                	addi	sp,sp,16
20001fc0:	8082                	ret

20001fc2 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20001fc2:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20001fc4:	ce06                	sw	ra,28(sp)
20001fc6:	cc22                	sw	s0,24(sp)
20001fc8:	ca26                	sw	s1,20(sp)
20001fca:	efffe597          	auipc	a1,0xefffe
20001fce:	04e58593          	addi	a1,a1,78 # 10000018 <uart0>
20001fd2:	40000537          	lui	a0,0x40000
20001fd6:	fdaff0ef          	jal	ra,200017b0 <dif_uart_init>
20001fda:	00001497          	auipc	s1,0x1
20001fde:	c6e48493          	addi	s1,s1,-914 # 20002c48 <kDeviceLogBypassUartAddress>
20001fe2:	c91d                	beqz	a0,20002018 <init_uart+0x56>
20001fe4:	4088                	lw	a0,0(s1)
20001fe6:	c909                	beqz	a0,20001ff8 <init_uart+0x36>
20001fe8:	e000e517          	auipc	a0,0xe000e
20001fec:	34c50513          	addi	a0,a0,844 # 10334 <init_uart.kLogFields>
20001ff0:	4581                	li	a1,0
20001ff2:	ac0ff0ef          	jal	ra,200012b2 <base_log_internal_dv>
20001ff6:	a821                	j	2000200e <init_uart+0x4c>
20001ff8:	00001597          	auipc	a1,0x1
20001ffc:	89858593          	addi	a1,a1,-1896 # 20002890 <kDifUartFifoSizeBytes+0xa4>
20002000:	840a                	mv	s0,sp
20002002:	4651                	li	a2,20
20002004:	8522                	mv	a0,s0
20002006:	2859                	jal	2000209c <memcpy>
20002008:	8522                	mv	a0,s0
2000200a:	9feff0ef          	jal	ra,20001208 <base_log_internal_core>
2000200e:	6531                	lui	a0,0xc
20002010:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20002014:	be9ff0ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20002018:	00001517          	auipc	a0,0x1
2000201c:	c2050513          	addi	a0,a0,-992 # 20002c38 <kUartBaudrate>
20002020:	4108                	lw	a0,0(a0)
20002022:	00001597          	auipc	a1,0x1
20002026:	c0658593          	addi	a1,a1,-1018 # 20002c28 <kClockFreqPeripheralHz>
2000202a:	418c                	lw	a1,0(a1)
2000202c:	c02a                	sw	a0,0(sp)
2000202e:	c22e                	sw	a1,4(sp)
20002030:	4505                	li	a0,1
20002032:	c42a                	sw	a0,8(sp)
20002034:	c62a                	sw	a0,12(sp)
20002036:	efffe517          	auipc	a0,0xefffe
2000203a:	fe250513          	addi	a0,a0,-30 # 10000018 <uart0>
2000203e:	858a                	mv	a1,sp
20002040:	f7eff0ef          	jal	ra,200017be <dif_uart_configure>
20002044:	c91d                	beqz	a0,2000207a <init_uart+0xb8>
20002046:	4088                	lw	a0,0(s1)
20002048:	c909                	beqz	a0,2000205a <init_uart+0x98>
2000204a:	e000e517          	auipc	a0,0xe000e
2000204e:	2fe50513          	addi	a0,a0,766 # 10348 <init_uart.kLogFields.2>
20002052:	4581                	li	a1,0
20002054:	a5eff0ef          	jal	ra,200012b2 <base_log_internal_dv>
20002058:	a821                	j	20002070 <init_uart+0xae>
2000205a:	00001597          	auipc	a1,0x1
2000205e:	84a58593          	addi	a1,a1,-1974 # 200028a4 <kDifUartFifoSizeBytes+0xb8>
20002062:	840a                	mv	s0,sp
20002064:	4651                	li	a2,20
20002066:	8522                	mv	a0,s0
20002068:	2815                	jal	2000209c <memcpy>
2000206a:	8522                	mv	a0,s0
2000206c:	99cff0ef          	jal	ra,20001208 <base_log_internal_core>
20002070:	6531                	lui	a0,0xc
20002072:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20002076:	b87ff0ef          	jal	ra,20001bfc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
2000207a:	efffe517          	auipc	a0,0xefffe
2000207e:	f9e50513          	addi	a0,a0,-98 # 10000018 <uart0>
20002082:	a82ff0ef          	jal	ra,20001304 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20002086:	44d2                	lw	s1,20(sp)
20002088:	4462                	lw	s0,24(sp)
2000208a:	40f2                	lw	ra,28(sp)
2000208c:	6105                	addi	sp,sp,32
2000208e:	8082                	ret

20002090 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20002090:	8082                	ret
	...

20002094 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20002094:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20002096:	8082                	ret

20002098 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20002098:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
2000209a:	8082                	ret

2000209c <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
2000209c:	ca11                	beqz	a2,200020b0 <memcpy+0x14>
2000209e:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200020a0:	00058703          	lb	a4,0(a1)
200020a4:	00e68023          	sb	a4,0(a3) # 80000000 <_data_init_start+0x5fffcc20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200020a8:	167d                	addi	a2,a2,-1
200020aa:	0685                	addi	a3,a3,1
200020ac:	0585                	addi	a1,a1,1
200020ae:	fa6d                	bnez	a2,200020a0 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200020b0:	8082                	ret

200020b2 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200020b2:	c619                	beqz	a2,200020c0 <memset+0xe>
200020b4:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200020b6:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200020ba:	167d                	addi	a2,a2,-1
200020bc:	0685                	addi	a3,a3,1
200020be:	fe65                	bnez	a2,200020b6 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200020c0:	8082                	ret

200020c2 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200020c2:	ce09                	beqz	a2,200020dc <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200020c4:	00054683          	lbu	a3,0(a0)
200020c8:	0005c703          	lbu	a4,0(a1)
200020cc:	00e6ea63          	bltu	a3,a4,200020e0 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200020d0:	00d76b63          	bltu	a4,a3,200020e6 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200020d4:	167d                	addi	a2,a2,-1
200020d6:	0585                	addi	a1,a1,1
200020d8:	0505                	addi	a0,a0,1
200020da:	f66d                	bnez	a2,200020c4 <memcmp+0x2>
200020dc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200020de:	8082                	ret
200020e0:	fd600513          	li	a0,-42
200020e4:	8082                	ret
200020e6:	02a00513          	li	a0,42
200020ea:	8082                	ret

200020ec <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200020ec:	ca11                	beqz	a2,20002100 <memchr+0x14>
200020ee:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200020f2:	00054683          	lbu	a3,0(a0)
200020f6:	00b68663          	beq	a3,a1,20002102 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
200020fa:	167d                	addi	a2,a2,-1
200020fc:	0505                	addi	a0,a0,1
200020fe:	fa75                	bnez	a2,200020f2 <memchr+0x6>
20002100:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20002102:	8082                	ret

20002104 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20002104:	ce09                	beqz	a2,2000211e <memrchr+0x1a>
20002106:	fff50693          	addi	a3,a0,-1
2000210a:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
2000210e:	00c68733          	add	a4,a3,a2
20002112:	00074703          	lbu	a4,0(a4)
20002116:	00b70663          	beq	a4,a1,20002122 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
2000211a:	167d                	addi	a2,a2,-1
2000211c:	fa6d                	bnez	a2,2000210e <memrchr+0xa>
2000211e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20002120:	8082                	ret
20002122:	9532                	add	a0,a0,a2
20002124:	157d                	addi	a0,a0,-1
20002126:	8082                	ret

20002128 <irq_set_vector_offset>:
irq_set_vector_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:14
static const uint32_t IRQ_EXT_ENABLE_OFFSET = 11;
static const uint32_t IRQ_TIMER_ENABLE_OFFSET = 7;
static const uint32_t IRQ_SW_ENABLE_OFFSET = 3;

void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
20002128:	30551073          	csrw	mtvec,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:15
}
2000212c:	8082                	ret

2000212e <irq_global_ctrl>:
irq_global_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:18

void irq_global_ctrl(bool en) {
  if (en) {
2000212e:	c509                	beqz	a0,20002138 <irq_global_ctrl+0xa>
20002130:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
20002132:	30052073          	csrs	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
20002136:	8082                	ret
20002138:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
2000213a:	30053073          	csrc	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
}
2000213e:	8082                	ret

20002140 <irq_external_ctrl>:
irq_external_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
20002140:	c519                	beqz	a0,2000214e <irq_external_ctrl+0xe>
20002142:	6505                	lui	a0,0x1
20002144:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
20002148:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
2000214c:	8082                	ret
2000214e:	6505                	lui	a0,0x1
20002150:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20002154:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
}
20002158:	8082                	ret

2000215a <irq_timer_ctrl>:
irq_timer_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
2000215a:	c511                	beqz	a0,20002166 <irq_timer_ctrl+0xc>
2000215c:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
20002160:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20002164:	8082                	ret
20002166:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
2000216a:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
}
2000216e:	8082                	ret

20002170 <irq_software_ctrl>:
irq_software_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
20002170:	c509                	beqz	a0,2000217a <irq_software_ctrl+0xa>
20002172:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
20002174:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20002178:	8082                	ret
2000217a:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
2000217c:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
}
20002180:	8082                	ret
	...

20002184 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20002184:	88aa                	mv	a7,a0
20002186:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20002188:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
2000218a:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
2000218c:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
2000218e:	20069963          	bnez	a3,200023a0 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20002192:	200036b7          	lui	a3,0x20003
20002196:	c4c68693          	addi	a3,a3,-948 # 20002c4c <__clz_tab>
2000219a:	0cc5f063          	bgeu	a1,a2,2000225a <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
2000219e:	6741                	lui	a4,0x10
200021a0:	0ae67663          	bgeu	a2,a4,2000224c <__udivdi3+0xc8>
200021a4:	0ff00713          	li	a4,255
200021a8:	00c73733          	sltu	a4,a4,a2
200021ac:	070e                	slli	a4,a4,0x3
200021ae:	00e65533          	srl	a0,a2,a4
200021b2:	96aa                	add	a3,a3,a0
200021b4:	0006c683          	lbu	a3,0(a3)
200021b8:	02000513          	li	a0,32
200021bc:	9736                	add	a4,a4,a3
200021be:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
200021c2:	00e50c63          	beq	a0,a4,200021da <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200021c6:	00d797b3          	sll	a5,a5,a3
200021ca:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
200021ce:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200021d2:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
200021d6:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
200021da:	01085893          	srli	a7,a6,0x10
200021de:	0315d7b3          	divu	a5,a1,a7
200021e2:	01081613          	slli	a2,a6,0x10
200021e6:	8241                	srli	a2,a2,0x10
200021e8:	01035713          	srli	a4,t1,0x10
200021ec:	0315f6b3          	remu	a3,a1,a7
200021f0:	853e                	mv	a0,a5
200021f2:	02f605b3          	mul	a1,a2,a5
200021f6:	06c2                	slli	a3,a3,0x10
200021f8:	8f55                	or	a4,a4,a3
200021fa:	00b77c63          	bgeu	a4,a1,20002212 <__udivdi3+0x8e>
200021fe:	9742                	add	a4,a4,a6
20002200:	fff78513          	addi	a0,a5,-1
20002204:	01076763          	bltu	a4,a6,20002212 <__udivdi3+0x8e>
20002208:	00b77563          	bgeu	a4,a1,20002212 <__udivdi3+0x8e>
2000220c:	ffe78513          	addi	a0,a5,-2
20002210:	9742                	add	a4,a4,a6
20002212:	8f0d                	sub	a4,a4,a1
20002214:	031777b3          	remu	a5,a4,a7
20002218:	0342                	slli	t1,t1,0x10
2000221a:	01035313          	srli	t1,t1,0x10
2000221e:	03175733          	divu	a4,a4,a7
20002222:	07c2                	slli	a5,a5,0x10
20002224:	0067e333          	or	t1,a5,t1
20002228:	02e606b3          	mul	a3,a2,a4
2000222c:	863a                	mv	a2,a4
2000222e:	00d37b63          	bgeu	t1,a3,20002244 <__udivdi3+0xc0>
20002232:	9342                	add	t1,t1,a6
20002234:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20002238:	01036663          	bltu	t1,a6,20002244 <__udivdi3+0xc0>
2000223c:	00d37463          	bgeu	t1,a3,20002244 <__udivdi3+0xc0>
20002240:	ffe70613          	addi	a2,a4,-2
20002244:	0542                	slli	a0,a0,0x10
20002246:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20002248:	4581                	li	a1,0
2000224a:	a85d                	j	20002300 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
2000224c:	01000537          	lui	a0,0x1000
20002250:	4741                	li	a4,16
20002252:	f4a66ee3          	bltu	a2,a0,200021ae <__udivdi3+0x2a>
20002256:	4761                	li	a4,24
20002258:	bf99                	j	200021ae <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
2000225a:	e601                	bnez	a2,20002262 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
2000225c:	4705                	li	a4,1
2000225e:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002262:	6741                	lui	a4,0x10
20002264:	08e87f63          	bgeu	a6,a4,20002302 <__udivdi3+0x17e>
20002268:	0ff00713          	li	a4,255
2000226c:	01077363          	bgeu	a4,a6,20002272 <__udivdi3+0xee>
20002270:	4521                	li	a0,8
20002272:	00a85733          	srl	a4,a6,a0
20002276:	96ba                	add	a3,a3,a4
20002278:	0006c703          	lbu	a4,0(a3)
2000227c:	02000613          	li	a2,32
20002280:	972a                	add	a4,a4,a0
20002282:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20002286:	08e61563          	bne	a2,a4,20002310 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
2000228a:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
2000228e:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20002290:	01085893          	srli	a7,a6,0x10
20002294:	01081613          	slli	a2,a6,0x10
20002298:	8241                	srli	a2,a2,0x10
2000229a:	01035713          	srli	a4,t1,0x10
2000229e:	0317f6b3          	remu	a3,a5,a7
200022a2:	0317d7b3          	divu	a5,a5,a7
200022a6:	06c2                	slli	a3,a3,0x10
200022a8:	8f55                	or	a4,a4,a3
200022aa:	02f60e33          	mul	t3,a2,a5
200022ae:	853e                	mv	a0,a5
200022b0:	01c77c63          	bgeu	a4,t3,200022c8 <__udivdi3+0x144>
200022b4:	9742                	add	a4,a4,a6
200022b6:	fff78513          	addi	a0,a5,-1
200022ba:	01076763          	bltu	a4,a6,200022c8 <__udivdi3+0x144>
200022be:	01c77563          	bgeu	a4,t3,200022c8 <__udivdi3+0x144>
200022c2:	ffe78513          	addi	a0,a5,-2
200022c6:	9742                	add	a4,a4,a6
200022c8:	41c70733          	sub	a4,a4,t3
200022cc:	031777b3          	remu	a5,a4,a7
200022d0:	0342                	slli	t1,t1,0x10
200022d2:	01035313          	srli	t1,t1,0x10
200022d6:	03175733          	divu	a4,a4,a7
200022da:	07c2                	slli	a5,a5,0x10
200022dc:	0067e333          	or	t1,a5,t1
200022e0:	02e606b3          	mul	a3,a2,a4
200022e4:	863a                	mv	a2,a4
200022e6:	00d37b63          	bgeu	t1,a3,200022fc <__udivdi3+0x178>
200022ea:	9342                	add	t1,t1,a6
200022ec:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200022f0:	01036663          	bltu	t1,a6,200022fc <__udivdi3+0x178>
200022f4:	00d37463          	bgeu	t1,a3,200022fc <__udivdi3+0x178>
200022f8:	ffe70613          	addi	a2,a4,-2
200022fc:	0542                	slli	a0,a0,0x10
200022fe:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20002300:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002302:	01000737          	lui	a4,0x1000
20002306:	4541                	li	a0,16
20002308:	f6e865e3          	bltu	a6,a4,20002272 <__udivdi3+0xee>
2000230c:	4561                	li	a0,24
2000230e:	b795                	j	20002272 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20002310:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20002314:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20002318:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000231c:	00d797b3          	sll	a5,a5,a3
20002320:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002324:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20002328:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
2000232c:	0315f733          	remu	a4,a1,a7
20002330:	01081793          	slli	a5,a6,0x10
20002334:	83c1                	srli	a5,a5,0x10
20002336:	01065513          	srli	a0,a2,0x10
2000233a:	0315d5b3          	divu	a1,a1,a7
2000233e:	0742                	slli	a4,a4,0x10
20002340:	8f49                	or	a4,a4,a0
20002342:	02b786b3          	mul	a3,a5,a1
20002346:	852e                	mv	a0,a1
20002348:	00d77c63          	bgeu	a4,a3,20002360 <__udivdi3+0x1dc>
2000234c:	9742                	add	a4,a4,a6
2000234e:	fff58513          	addi	a0,a1,-1
20002352:	01076763          	bltu	a4,a6,20002360 <__udivdi3+0x1dc>
20002356:	00d77563          	bgeu	a4,a3,20002360 <__udivdi3+0x1dc>
2000235a:	ffe58513          	addi	a0,a1,-2
2000235e:	9742                	add	a4,a4,a6
20002360:	40d706b3          	sub	a3,a4,a3
20002364:	0316f733          	remu	a4,a3,a7
20002368:	0642                	slli	a2,a2,0x10
2000236a:	8241                	srli	a2,a2,0x10
2000236c:	0316d6b3          	divu	a3,a3,a7
20002370:	0742                	slli	a4,a4,0x10
20002372:	02d788b3          	mul	a7,a5,a3
20002376:	00c767b3          	or	a5,a4,a2
2000237a:	8736                	mv	a4,a3
2000237c:	0117fc63          	bgeu	a5,a7,20002394 <__udivdi3+0x210>
20002380:	97c2                	add	a5,a5,a6
20002382:	fff68713          	addi	a4,a3,-1
20002386:	0107e763          	bltu	a5,a6,20002394 <__udivdi3+0x210>
2000238a:	0117f563          	bgeu	a5,a7,20002394 <__udivdi3+0x210>
2000238e:	ffe68713          	addi	a4,a3,-2
20002392:	97c2                	add	a5,a5,a6
20002394:	01051593          	slli	a1,a0,0x10
20002398:	411787b3          	sub	a5,a5,a7
2000239c:	8dd9                	or	a1,a1,a4
2000239e:	bdcd                	j	20002290 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
200023a0:	14d5e263          	bltu	a1,a3,200024e4 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200023a4:	6741                	lui	a4,0x10
200023a6:	02e6ff63          	bgeu	a3,a4,200023e4 <__udivdi3+0x260>
200023aa:	0ff00713          	li	a4,255
200023ae:	00d735b3          	sltu	a1,a4,a3
200023b2:	058e                	slli	a1,a1,0x3
200023b4:	20003737          	lui	a4,0x20003
200023b8:	00b6d533          	srl	a0,a3,a1
200023bc:	c4c70713          	addi	a4,a4,-948 # 20002c4c <__clz_tab>
200023c0:	972a                	add	a4,a4,a0
200023c2:	00074703          	lbu	a4,0(a4)
200023c6:	02000513          	li	a0,32
200023ca:	972e                	add	a4,a4,a1
200023cc:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
200023d0:	02e51163          	bne	a0,a4,200023f2 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
200023d4:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
200023d6:	f2f6e5e3          	bltu	a3,a5,20002300 <__udivdi3+0x17c>
200023da:	00c8b533          	sltu	a0,a7,a2
200023de:	00154513          	xori	a0,a0,1
200023e2:	bf39                	j	20002300 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200023e4:	01000737          	lui	a4,0x1000
200023e8:	45c1                	li	a1,16
200023ea:	fce6e5e3          	bltu	a3,a4,200023b4 <__udivdi3+0x230>
200023ee:	45e1                	li	a1,24
200023f0:	b7d1                	j	200023b4 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
200023f2:	00e65333          	srl	t1,a2,a4
200023f6:	00b696b3          	sll	a3,a3,a1
200023fa:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200023fe:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20002402:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20002406:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000240a:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
2000240e:	00b797b3          	sll	a5,a5,a1
20002412:	00e8d733          	srl	a4,a7,a4
20002416:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000241a:	01031793          	slli	a5,t1,0x10
2000241e:	83c1                	srli	a5,a5,0x10
20002420:	01085713          	srli	a4,a6,0x10
20002424:	02a65633          	divu	a2,a2,a0
20002428:	06c2                	slli	a3,a3,0x10
2000242a:	8f55                	or	a4,a4,a3
2000242c:	02c78f33          	mul	t5,a5,a2
20002430:	8e32                	mv	t3,a2
20002432:	01e77c63          	bgeu	a4,t5,2000244a <__udivdi3+0x2c6>
20002436:	971a                	add	a4,a4,t1
20002438:	fff60e13          	addi	t3,a2,-1
2000243c:	00676763          	bltu	a4,t1,2000244a <__udivdi3+0x2c6>
20002440:	01e77563          	bgeu	a4,t5,2000244a <__udivdi3+0x2c6>
20002444:	ffe60e13          	addi	t3,a2,-2
20002448:	971a                	add	a4,a4,t1
2000244a:	41e70733          	sub	a4,a4,t5
2000244e:	02a776b3          	remu	a3,a4,a0
20002452:	02a75733          	divu	a4,a4,a0
20002456:	06c2                	slli	a3,a3,0x10
20002458:	02e78633          	mul	a2,a5,a4
2000245c:	01081793          	slli	a5,a6,0x10
20002460:	83c1                	srli	a5,a5,0x10
20002462:	8fd5                	or	a5,a5,a3
20002464:	86ba                	mv	a3,a4
20002466:	00c7fc63          	bgeu	a5,a2,2000247e <__udivdi3+0x2fa>
2000246a:	979a                	add	a5,a5,t1
2000246c:	fff70693          	addi	a3,a4,-1 # ffffff <init_uart.kLogFields.2+0xfefcb7>
20002470:	0067e763          	bltu	a5,t1,2000247e <__udivdi3+0x2fa>
20002474:	00c7f563          	bgeu	a5,a2,2000247e <__udivdi3+0x2fa>
20002478:	ffe70693          	addi	a3,a4,-2
2000247c:	979a                	add	a5,a5,t1
2000247e:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002482:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002484:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002486:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
2000248a:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000248e:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002490:	00def6b3          	and	a3,t4,a3
20002494:	01055613          	srli	a2,a0,0x10
20002498:	010ede93          	srli	t4,t4,0x10
2000249c:	02d80333          	mul	t1,a6,a3
200024a0:	02d606b3          	mul	a3,a2,a3
200024a4:	01035713          	srli	a4,t1,0x10
200024a8:	03d80833          	mul	a6,a6,t4
200024ac:	9836                	add	a6,a6,a3
200024ae:	9742                	add	a4,a4,a6
200024b0:	03d60633          	mul	a2,a2,t4
200024b4:	00d77363          	bgeu	a4,a3,200024ba <__udivdi3+0x336>
200024b8:	9672                	add	a2,a2,t3
200024ba:	01075693          	srli	a3,a4,0x10
200024be:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200024c0:	02c7e063          	bltu	a5,a2,200024e0 <__udivdi3+0x35c>
200024c4:	d8c792e3          	bne	a5,a2,20002248 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200024c8:	67c1                	lui	a5,0x10
200024ca:	17fd                	addi	a5,a5,-1
200024cc:	8f7d                	and	a4,a4,a5
200024ce:	0742                	slli	a4,a4,0x10
200024d0:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
200024d4:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200024d8:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200024da:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200024dc:	e2e8f2e3          	bgeu	a7,a4,20002300 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
200024e0:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
200024e2:	b39d                	j	20002248 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
200024e4:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
200024e6:	4501                	li	a0,0
200024e8:	bd21                	j	20002300 <__udivdi3+0x17c>
