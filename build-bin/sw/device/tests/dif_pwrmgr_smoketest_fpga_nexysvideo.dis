
sw/device/tests/dif_pwrmgr_smoketest_fpga_nexysvideo.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001b14  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000a7f  20001c98  20001c98  00002c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20002718  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20002720  00004008  2**2
                  ALLOC
  8 .logs.fields  000001e0  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008844  00000000  00000000  0000420e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001767  00000000  00000000  0000ca52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000e1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004901  00000000  00000000  0000e251  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000464d  00000000  00000000  00012b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000310  00000000  00000000  0001719f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002836  00000000  00000000  000174af  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000008e8  00000000  00000000  00019ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	6c860613          	addi	a2,a2,1736 # 20002718 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2e7d                	jal	2000043c <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	6100006f          	j	20000690 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0800006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1b80006f          	j	200002c4 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2000006f          	j	2000031c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2480006f          	j	20000374 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000182:	de06                	sw	ra,60(sp)
20000184:	dc16                	sw	t0,56(sp)
20000186:	da1a                	sw	t1,52(sp)
20000188:	d81e                	sw	t2,48(sp)
2000018a:	d62a                	sw	a0,44(sp)
2000018c:	d42e                	sw	a1,40(sp)
2000018e:	d232                	sw	a2,36(sp)
20000190:	d036                	sw	a3,32(sp)
20000192:	ce3a                	sw	a4,28(sp)
20000194:	cc3e                	sw	a5,24(sp)
20000196:	ca42                	sw	a6,20(sp)
20000198:	c846                	sw	a7,16(sp)
2000019a:	c672                	sw	t3,12(sp)
2000019c:	c476                	sw	t4,8(sp)
2000019e:	c27a                	sw	t5,4(sp)
200001a0:	c07e                	sw	t6,0(sp)
200001a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200001a6:	897d                	andi	a0,a0,31
200001a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200001aa:	00a5dc63          	bge	a1,a0,200001c2 <handler_exception+0x42>
200001ae:	4599                	li	a1,6
200001b0:	02a5c263          	blt	a1,a0,200001d4 <handler_exception+0x54>
200001b4:	458d                	li	a1,3
200001b6:	02b50c63          	beq	a0,a1,200001ee <handler_exception+0x6e>
200001ba:	4595                	li	a1,5
200001bc:	02b50763          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001c0:	a015                	j	200001e4 <handler_exception+0x64>
200001c2:	c115                	beqz	a0,200001e6 <handler_exception+0x66>
200001c4:	4585                	li	a1,1
200001c6:	02b50063          	beq	a0,a1,200001e6 <handler_exception+0x66>
200001ca:	4589                	li	a1,2
200001cc:	00b51c63          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200001d0:	208d                	jal	20000232 <handler_instr_ill_fault>
200001d2:	a839                	j	200001f0 <handler_exception+0x70>
200001d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200001d6:	00b50a63          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001da:	45ad                	li	a1,11
200001dc:	00b51463          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200001e0:	2065                	jal	20000288 <handler_ecall>
200001e2:	a039                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200001e4:	a001                	j	200001e4 <handler_exception+0x64>
200001e6:	2805                	jal	20000216 <handler_instr_acc_fault>
200001e8:	a021                	j	200001f0 <handler_exception+0x70>
200001ea:	2049                	jal	2000026c <handler_lsu_fault>
200001ec:	a011                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200001ee:	208d                	jal	20000250 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200001f0:	4f82                	lw	t6,0(sp)
200001f2:	4f12                	lw	t5,4(sp)
200001f4:	4ea2                	lw	t4,8(sp)
200001f6:	4e32                	lw	t3,12(sp)
200001f8:	48c2                	lw	a7,16(sp)
200001fa:	4852                	lw	a6,20(sp)
200001fc:	47e2                	lw	a5,24(sp)
200001fe:	4772                	lw	a4,28(sp)
20000200:	5682                	lw	a3,32(sp)
20000202:	5612                	lw	a2,36(sp)
20000204:	55a2                	lw	a1,40(sp)
20000206:	5532                	lw	a0,44(sp)
20000208:	53c2                	lw	t2,48(sp)
2000020a:	5352                	lw	t1,52(sp)
2000020c:	52e2                	lw	t0,56(sp)
2000020e:	50f2                	lw	ra,60(sp)
20000210:	6121                	addi	sp,sp,64
20000212:	30200073          	mret

20000216 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20000216:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20000218:	de06                	sw	ra,60(sp)
2000021a:	dc22                	sw	s0,56(sp)
2000021c:	00002597          	auipc	a1,0x2
20000220:	e8c58593          	addi	a1,a1,-372 # 200020a8 <__clz_tab+0x160>
20000224:	0040                	addi	s0,sp,4
20000226:	03400613          	li	a2,52
2000022a:	8522                	mv	a0,s0
2000022c:	29a5                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
2000022e:	8522                	mv	a0,s0
20000230:	2a71                	jal	200003cc <print_exc_msg>

20000232 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20000232:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20000234:	c686                	sw	ra,76(sp)
20000236:	c4a2                	sw	s0,72(sp)
20000238:	00002597          	auipc	a1,0x2
2000023c:	ea458593          	addi	a1,a1,-348 # 200020dc <__clz_tab+0x194>
20000240:	00d10413          	addi	s0,sp,13
20000244:	03b00613          	li	a2,59
20000248:	8522                	mv	a0,s0
2000024a:	29a9                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
2000024c:	8522                	mv	a0,s0
2000024e:	2abd                	jal	200003cc <print_exc_msg>

20000250 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000250:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000252:	de06                	sw	ra,60(sp)
20000254:	dc22                	sw	s0,56(sp)
20000256:	00002597          	auipc	a1,0x2
2000025a:	ec158593          	addi	a1,a1,-319 # 20002117 <__clz_tab+0x1cf>
2000025e:	840a                	mv	s0,sp
20000260:	03800613          	li	a2,56
20000264:	8522                	mv	a0,s0
20000266:	293d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20000268:	8522                	mv	a0,s0
2000026a:	228d                	jal	200003cc <print_exc_msg>

2000026c <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
2000026c:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
2000026e:	de06                	sw	ra,60(sp)
20000270:	dc22                	sw	s0,56(sp)
20000272:	00002597          	auipc	a1,0x2
20000276:	edd58593          	addi	a1,a1,-291 # 2000214f <__clz_tab+0x207>
2000027a:	0020                	addi	s0,sp,8
2000027c:	03000613          	li	a2,48
20000280:	8522                	mv	a0,s0
20000282:	210d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000284:	8522                	mv	a0,s0
20000286:	2299                	jal	200003cc <print_exc_msg>

20000288 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000288:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000028a:	ce06                	sw	ra,28(sp)
2000028c:	cc22                	sw	s0,24(sp)
2000028e:	00002517          	auipc	a0,0x2
20000292:	b0250513          	addi	a0,a0,-1278 # 20001d90 <kDeviceLogBypassUartAddress>
20000296:	4108                	lw	a0,0(a0)
20000298:	c909                	beqz	a0,200002aa <handler_ecall+0x22>
2000029a:	e0010517          	auipc	a0,0xe0010
2000029e:	da250513          	addi	a0,a0,-606 # 1003c <handler_ecall.kLogFields>
200002a2:	4581                	li	a1,0
200002a4:	5c7000ef          	jal	ra,2000106a <base_log_internal_dv>
200002a8:	a821                	j	200002c0 <handler_ecall+0x38>
200002aa:	00002597          	auipc	a1,0x2
200002ae:	a2a58593          	addi	a1,a1,-1494 # 20001cd4 <__udivdi3+0x3a6>
200002b2:	840a                	mv	s0,sp
200002b4:	4651                	li	a2,20
200002b6:	8522                	mv	a0,s0
200002b8:	26f5                	jal	200006a4 <memcpy>
200002ba:	8522                	mv	a0,s0
200002bc:	505000ef          	jal	ra,20000fc0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200002c0:	a001                	j	200002c0 <handler_ecall+0x38>
200002c2:	0001                	nop

200002c4 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200002c4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200002c6:	ce86                	sw	ra,92(sp)
200002c8:	cc96                	sw	t0,88(sp)
200002ca:	ca9a                	sw	t1,84(sp)
200002cc:	c89e                	sw	t2,80(sp)
200002ce:	c6a2                	sw	s0,76(sp)
200002d0:	c4aa                	sw	a0,72(sp)
200002d2:	c2ae                	sw	a1,68(sp)
200002d4:	c0b2                	sw	a2,64(sp)
200002d6:	de36                	sw	a3,60(sp)
200002d8:	dc3a                	sw	a4,56(sp)
200002da:	da3e                	sw	a5,52(sp)
200002dc:	d842                	sw	a6,48(sp)
200002de:	d646                	sw	a7,44(sp)
200002e0:	d472                	sw	t3,40(sp)
200002e2:	d276                	sw	t4,36(sp)
200002e4:	d07a                	sw	t5,32(sp)
200002e6:	ce7e                	sw	t6,28(sp)
200002e8:	00002517          	auipc	a0,0x2
200002ec:	aa850513          	addi	a0,a0,-1368 # 20001d90 <kDeviceLogBypassUartAddress>
200002f0:	4108                	lw	a0,0(a0)
200002f2:	c909                	beqz	a0,20000304 <handler_irq_software+0x40>
200002f4:	e0010517          	auipc	a0,0xe0010
200002f8:	d0c50513          	addi	a0,a0,-756 # 10000 <_dv_log_offset>
200002fc:	4581                	li	a1,0
200002fe:	56d000ef          	jal	ra,2000106a <base_log_internal_dv>
20000302:	a821                	j	2000031a <handler_irq_software+0x56>
20000304:	00002597          	auipc	a1,0x2
20000308:	99458593          	addi	a1,a1,-1644 # 20001c98 <__udivdi3+0x36a>
2000030c:	0020                	addi	s0,sp,8
2000030e:	4651                	li	a2,20
20000310:	8522                	mv	a0,s0
20000312:	2e49                	jal	200006a4 <memcpy>
20000314:	8522                	mv	a0,s0
20000316:	4ab000ef          	jal	ra,20000fc0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000031a:	a001                	j	2000031a <handler_irq_software+0x56>

2000031c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
2000031c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
2000031e:	ce86                	sw	ra,92(sp)
20000320:	cc96                	sw	t0,88(sp)
20000322:	ca9a                	sw	t1,84(sp)
20000324:	c89e                	sw	t2,80(sp)
20000326:	c6a2                	sw	s0,76(sp)
20000328:	c4aa                	sw	a0,72(sp)
2000032a:	c2ae                	sw	a1,68(sp)
2000032c:	c0b2                	sw	a2,64(sp)
2000032e:	de36                	sw	a3,60(sp)
20000330:	dc3a                	sw	a4,56(sp)
20000332:	da3e                	sw	a5,52(sp)
20000334:	d842                	sw	a6,48(sp)
20000336:	d646                	sw	a7,44(sp)
20000338:	d472                	sw	t3,40(sp)
2000033a:	d276                	sw	t4,36(sp)
2000033c:	d07a                	sw	t5,32(sp)
2000033e:	ce7e                	sw	t6,28(sp)
20000340:	00002517          	auipc	a0,0x2
20000344:	a5050513          	addi	a0,a0,-1456 # 20001d90 <kDeviceLogBypassUartAddress>
20000348:	4108                	lw	a0,0(a0)
2000034a:	c909                	beqz	a0,2000035c <handler_irq_timer+0x40>
2000034c:	e0010517          	auipc	a0,0xe0010
20000350:	cc850513          	addi	a0,a0,-824 # 10014 <handler_irq_timer.kLogFields>
20000354:	4581                	li	a1,0
20000356:	515000ef          	jal	ra,2000106a <base_log_internal_dv>
2000035a:	a821                	j	20000372 <handler_irq_timer+0x56>
2000035c:	00002597          	auipc	a1,0x2
20000360:	95058593          	addi	a1,a1,-1712 # 20001cac <__udivdi3+0x37e>
20000364:	0020                	addi	s0,sp,8
20000366:	4651                	li	a2,20
20000368:	8522                	mv	a0,s0
2000036a:	2e2d                	jal	200006a4 <memcpy>
2000036c:	8522                	mv	a0,s0
2000036e:	453000ef          	jal	ra,20000fc0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000372:	a001                	j	20000372 <handler_irq_timer+0x56>

20000374 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000374:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000376:	ce86                	sw	ra,92(sp)
20000378:	cc96                	sw	t0,88(sp)
2000037a:	ca9a                	sw	t1,84(sp)
2000037c:	c89e                	sw	t2,80(sp)
2000037e:	c6a2                	sw	s0,76(sp)
20000380:	c4aa                	sw	a0,72(sp)
20000382:	c2ae                	sw	a1,68(sp)
20000384:	c0b2                	sw	a2,64(sp)
20000386:	de36                	sw	a3,60(sp)
20000388:	dc3a                	sw	a4,56(sp)
2000038a:	da3e                	sw	a5,52(sp)
2000038c:	d842                	sw	a6,48(sp)
2000038e:	d646                	sw	a7,44(sp)
20000390:	d472                	sw	t3,40(sp)
20000392:	d276                	sw	t4,36(sp)
20000394:	d07a                	sw	t5,32(sp)
20000396:	ce7e                	sw	t6,28(sp)
20000398:	00002517          	auipc	a0,0x2
2000039c:	9f850513          	addi	a0,a0,-1544 # 20001d90 <kDeviceLogBypassUartAddress>
200003a0:	4108                	lw	a0,0(a0)
200003a2:	c909                	beqz	a0,200003b4 <handler_irq_external+0x40>
200003a4:	e0010517          	auipc	a0,0xe0010
200003a8:	c8450513          	addi	a0,a0,-892 # 10028 <handler_irq_external.kLogFields>
200003ac:	4581                	li	a1,0
200003ae:	4bd000ef          	jal	ra,2000106a <base_log_internal_dv>
200003b2:	a821                	j	200003ca <handler_irq_external+0x56>
200003b4:	00002597          	auipc	a1,0x2
200003b8:	90c58593          	addi	a1,a1,-1780 # 20001cc0 <__udivdi3+0x392>
200003bc:	0020                	addi	s0,sp,8
200003be:	4651                	li	a2,20
200003c0:	8522                	mv	a0,s0
200003c2:	24cd                	jal	200006a4 <memcpy>
200003c4:	8522                	mv	a0,s0
200003c6:	3fb000ef          	jal	ra,20000fc0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200003ca:	a001                	j	200003ca <handler_irq_external+0x56>

200003cc <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200003cc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200003ce:	ce06                	sw	ra,28(sp)
200003d0:	cc22                	sw	s0,24(sp)
200003d2:	ca26                	sw	s1,20(sp)
200003d4:	00002597          	auipc	a1,0x2
200003d8:	9bc58593          	addi	a1,a1,-1604 # 20001d90 <kDeviceLogBypassUartAddress>
200003dc:	418c                	lw	a1,0(a1)
200003de:	842a                	mv	s0,a0
200003e0:	c19d                	beqz	a1,20000406 <print_exc_msg+0x3a>
200003e2:	e0010517          	auipc	a0,0xe0010
200003e6:	c6e50513          	addi	a0,a0,-914 # 10050 <print_exc_msg.kLogFields>
200003ea:	4585                	li	a1,1
200003ec:	8622                	mv	a2,s0
200003ee:	47d000ef          	jal	ra,2000106a <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200003f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200003f6:	e0010517          	auipc	a0,0xe0010
200003fa:	c6e50513          	addi	a0,a0,-914 # 10064 <print_exc_msg.kLogFields.6>
200003fe:	4585                	li	a1,1
20000400:	46b000ef          	jal	ra,2000106a <base_log_internal_dv>
20000404:	a81d                	j	2000043a <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000406:	00002597          	auipc	a1,0x2
2000040a:	8e258593          	addi	a1,a1,-1822 # 20001ce8 <__udivdi3+0x3ba>
2000040e:	848a                	mv	s1,sp
20000410:	4651                	li	a2,20
20000412:	8526                	mv	a0,s1
20000414:	2c41                	jal	200006a4 <memcpy>
20000416:	8526                	mv	a0,s1
20000418:	85a2                	mv	a1,s0
2000041a:	3a7000ef          	jal	ra,20000fc0 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000041e:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000422:	00002597          	auipc	a1,0x2
20000426:	8da58593          	addi	a1,a1,-1830 # 20001cfc <__udivdi3+0x3ce>
2000042a:	848a                	mv	s1,sp
2000042c:	4651                	li	a2,20
2000042e:	8526                	mv	a0,s1
20000430:	2c95                	jal	200006a4 <memcpy>
20000432:	8526                	mv	a0,s1
20000434:	85a2                	mv	a1,s0
20000436:	38b000ef          	jal	ra,20000fc0 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
2000043a:	a001                	j	2000043a <print_exc_msg+0x6e>

2000043c <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
2000043c:	1141                	addi	sp,sp,-16
2000043e:	c606                	sw	ra,12(sp)
20000440:	c422                	sw	s0,8(sp)
20000442:	6511                	lui	a0,0x4
20000444:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000448:	2231                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
2000044a:	00002517          	auipc	a0,0x2
2000044e:	91650513          	addi	a0,a0,-1770 # 20001d60 <kDeviceType>
20000452:	4108                	lw	a0,0(a0)
20000454:	c111                	beqz	a0,20000458 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000456:	280d                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000458:	21a9                	jal	200008a2 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
2000045a:	00002597          	auipc	a1,0x2
2000045e:	a5258593          	addi	a1,a1,-1454 # 20001eac <kTestConfig>
20000462:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000466:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000468:	c191                	beqz	a1,2000046c <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
2000046a:	2839                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
2000046c:	2435                	jal	20000698 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
2000046e:	e409                	bnez	s0,20000478 <main+0x3c>
20000470:	6531                	lui	a0,0xc
20000472:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000476:	a019                	j	2000047c <main+0x40>
20000478:	6525                	lui	a0,0x9
2000047a:	0535                	addi	a0,a0,13
2000047c:	28e1                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000047e:	4505                	li	a0,1
20000480:	4422                	lw	s0,8(sp)
20000482:	40b2                	lw	ra,12(sp)
20000484:	0141                	addi	sp,sp,16
20000486:	8082                	ret

20000488 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000488:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
2000048a:	ce06                	sw	ra,28(sp)
2000048c:	cc22                	sw	s0,24(sp)
2000048e:	ca26                	sw	s1,20(sp)
20000490:	f0000597          	auipc	a1,0xf0000
20000494:	b7858593          	addi	a1,a1,-1160 # 10000008 <_data_end>
20000498:	40000537          	lui	a0,0x40000
2000049c:	0cc010ef          	jal	ra,20001568 <dif_uart_init>
200004a0:	00002497          	auipc	s1,0x2
200004a4:	8f048493          	addi	s1,s1,-1808 # 20001d90 <kDeviceLogBypassUartAddress>
200004a8:	c915                	beqz	a0,200004dc <init_uart+0x54>
200004aa:	4088                	lw	a0,0(s1)
200004ac:	c909                	beqz	a0,200004be <init_uart+0x36>
200004ae:	e0010517          	auipc	a0,0xe0010
200004b2:	bca50513          	addi	a0,a0,-1078 # 10078 <init_uart.kLogFields>
200004b6:	4581                	li	a1,0
200004b8:	3b3000ef          	jal	ra,2000106a <base_log_internal_dv>
200004bc:	a821                	j	200004d4 <init_uart+0x4c>
200004be:	00002597          	auipc	a1,0x2
200004c2:	85258593          	addi	a1,a1,-1966 # 20001d10 <__udivdi3+0x3e2>
200004c6:	840a                	mv	s0,sp
200004c8:	4651                	li	a2,20
200004ca:	8522                	mv	a0,s0
200004cc:	2ae1                	jal	200006a4 <memcpy>
200004ce:	8522                	mv	a0,s0
200004d0:	2f1000ef          	jal	ra,20000fc0 <base_log_internal_core>
200004d4:	6531                	lui	a0,0xc
200004d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004da:	28ad                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200004dc:	00002517          	auipc	a0,0x2
200004e0:	8a450513          	addi	a0,a0,-1884 # 20001d80 <kUartBaudrate>
200004e4:	4108                	lw	a0,0(a0)
200004e6:	00002597          	auipc	a1,0x2
200004ea:	88a58593          	addi	a1,a1,-1910 # 20001d70 <kClockFreqPeripheralHz>
200004ee:	418c                	lw	a1,0(a1)
200004f0:	c02a                	sw	a0,0(sp)
200004f2:	c22e                	sw	a1,4(sp)
200004f4:	4505                	li	a0,1
200004f6:	c42a                	sw	a0,8(sp)
200004f8:	c62a                	sw	a0,12(sp)
200004fa:	f0000517          	auipc	a0,0xf0000
200004fe:	b0e50513          	addi	a0,a0,-1266 # 10000008 <_data_end>
20000502:	858a                	mv	a1,sp
20000504:	072010ef          	jal	ra,20001576 <dif_uart_configure>
20000508:	c915                	beqz	a0,2000053c <init_uart+0xb4>
2000050a:	4088                	lw	a0,0(s1)
2000050c:	c909                	beqz	a0,2000051e <init_uart+0x96>
2000050e:	e0010517          	auipc	a0,0xe0010
20000512:	b7e50513          	addi	a0,a0,-1154 # 1008c <init_uart.kLogFields.2>
20000516:	4581                	li	a1,0
20000518:	353000ef          	jal	ra,2000106a <base_log_internal_dv>
2000051c:	a821                	j	20000534 <init_uart+0xac>
2000051e:	00002597          	auipc	a1,0x2
20000522:	80658593          	addi	a1,a1,-2042 # 20001d24 <__udivdi3+0x3f6>
20000526:	840a                	mv	s0,sp
20000528:	4651                	li	a2,20
2000052a:	8522                	mv	a0,s0
2000052c:	2aa5                	jal	200006a4 <memcpy>
2000052e:	8522                	mv	a0,s0
20000530:	291000ef          	jal	ra,20000fc0 <base_log_internal_core>
20000534:	6531                	lui	a0,0xc
20000536:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000053a:	2829                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
2000053c:	f0000517          	auipc	a0,0xf0000
20000540:	acc50513          	addi	a0,a0,-1332 # 10000008 <_data_end>
20000544:	379000ef          	jal	ra,200010bc <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000548:	44d2                	lw	s1,20(sp)
2000054a:	4462                	lw	s0,24(sp)
2000054c:	40f2                	lw	ra,28(sp)
2000054e:	6105                	addi	sp,sp,32
20000550:	8082                	ret
	...

20000554 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000554:	1101                	addi	sp,sp,-32
20000556:	ce06                	sw	ra,28(sp)
20000558:	cc22                	sw	s0,24(sp)
2000055a:	65b1                	lui	a1,0xc
2000055c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000560:	02b50163          	beq	a0,a1,20000582 <test_status_set+0x2e>
20000564:	65a5                	lui	a1,0x9
20000566:	05b5                	addi	a1,a1,13
20000568:	02b50f63          	beq	a0,a1,200005a6 <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
2000056c:	00002597          	auipc	a1,0x2
20000570:	82058593          	addi	a1,a1,-2016 # 20001d8c <kDeviceTestStatusAddress>
20000574:	418c                	lw	a1,0(a1)
20000576:	c191                	beqz	a1,2000057a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000578:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
2000057a:	4462                	lw	s0,24(sp)
2000057c:	40f2                	lw	ra,28(sp)
2000057e:	6105                	addi	sp,sp,32
20000580:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000582:	00002517          	auipc	a0,0x2
20000586:	80e50513          	addi	a0,a0,-2034 # 20001d90 <kDeviceLogBypassUartAddress>
2000058a:	4108                	lw	a0,0(a0)
2000058c:	ed1d                	bnez	a0,200005ca <test_status_set+0x76>
2000058e:	00001597          	auipc	a1,0x1
20000592:	7be58593          	addi	a1,a1,1982 # 20001d4c <__udivdi3+0x41e>
20000596:	840a                	mv	s0,sp
20000598:	4651                	li	a2,20
2000059a:	8522                	mv	a0,s0
2000059c:	2221                	jal	200006a4 <memcpy>
2000059e:	8522                	mv	a0,s0
200005a0:	221000ef          	jal	ra,20000fc0 <base_log_internal_core>
200005a4:	a815                	j	200005d8 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005a6:	00001517          	auipc	a0,0x1
200005aa:	7ea50513          	addi	a0,a0,2026 # 20001d90 <kDeviceLogBypassUartAddress>
200005ae:	4108                	lw	a0,0(a0)
200005b0:	ed15                	bnez	a0,200005ec <test_status_set+0x98>
200005b2:	00001597          	auipc	a1,0x1
200005b6:	78658593          	addi	a1,a1,1926 # 20001d38 <__udivdi3+0x40a>
200005ba:	840a                	mv	s0,sp
200005bc:	4651                	li	a2,20
200005be:	8522                	mv	a0,s0
200005c0:	20d5                	jal	200006a4 <memcpy>
200005c2:	8522                	mv	a0,s0
200005c4:	1fd000ef          	jal	ra,20000fc0 <base_log_internal_core>
200005c8:	a80d                	j	200005fa <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200005ca:	e0010517          	auipc	a0,0xe0010
200005ce:	aea50513          	addi	a0,a0,-1302 # 100b4 <test_status_set.kLogFields.2>
200005d2:	4581                	li	a1,0
200005d4:	297000ef          	jal	ra,2000106a <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005d8:	00001517          	auipc	a0,0x1
200005dc:	7b450513          	addi	a0,a0,1972 # 20001d8c <kDeviceTestStatusAddress>
200005e0:	4108                	lw	a0,0(a0)
200005e2:	c50d                	beqz	a0,2000060c <test_status_set+0xb8>
200005e4:	65b1                	lui	a1,0xc
200005e6:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200005ea:	a005                	j	2000060a <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005ec:	e0010517          	auipc	a0,0xe0010
200005f0:	ab450513          	addi	a0,a0,-1356 # 100a0 <test_status_set.kLogFields>
200005f4:	4581                	li	a1,0
200005f6:	275000ef          	jal	ra,2000106a <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005fa:	00001517          	auipc	a0,0x1
200005fe:	79250513          	addi	a0,a0,1938 # 20001d8c <kDeviceTestStatusAddress>
20000602:	4108                	lw	a0,0(a0)
20000604:	c501                	beqz	a0,2000060c <test_status_set+0xb8>
20000606:	65a5                	lui	a1,0x9
20000608:	05b5                	addi	a1,a1,13
2000060a:	c10c                	sw	a1,0(a0)
2000060c:	2051                	jal	20000690 <abort>
	...

20000610 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000610:	10500073          	wfi
20000614:	8082                	ret

20000616 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000616:	1141                	addi	sp,sp,-16
20000618:	c606                	sw	ra,12(sp)
2000061a:	00001597          	auipc	a1,0x1
2000061e:	74e58593          	addi	a1,a1,1870 # 20001d68 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000622:	41d0                	lw	a2,4(a1)
20000624:	4194                	lw	a3,0(a1)
20000626:	02a605b3          	mul	a1,a2,a0
2000062a:	02a6b633          	mulhu	a2,a3,a0
2000062e:	95b2                	add	a1,a1,a2
20000630:	02a68533          	mul	a0,a3,a0
20000634:	000f4637          	lui	a2,0xf4
20000638:	24060613          	addi	a2,a2,576 # f4240 <test_main.kLogFields.36+0xe4074>
2000063c:	4681                	li	a3,0
2000063e:	2f0010ef          	jal	ra,2000192e <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000642:	4801                	li	a6,0
20000644:	4701                	li	a4,0

20000646 <read0>:
20000646:	b8002873          	csrr	a6,mcycleh
2000064a:	b00026f3          	csrr	a3,mcycle
2000064e:	b8002773          	csrr	a4,mcycleh
20000652:	fee81ae3          	bne	a6,a4,20000646 <read0>
20000656:	4781                	li	a5,0
20000658:	4601                	li	a2,0

2000065a <read1>:
2000065a:	b80027f3          	csrr	a5,mcycleh
2000065e:	b0002773          	csrr	a4,mcycle
20000662:	b8002673          	csrr	a2,mcycleh
20000666:	fec79ae3          	bne	a5,a2,2000065a <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
2000066a:	00d73633          	sltu	a2,a4,a3
2000066e:	410787b3          	sub	a5,a5,a6
20000672:	8f91                	sub	a5,a5,a2
20000674:	00b78663          	beq	a5,a1,20000680 <read1+0x26>
20000678:	00b7b733          	sltu	a4,a5,a1
2000067c:	ff69                	bnez	a4,20000656 <read0+0x10>
2000067e:	a031                	j	2000068a <read1+0x30>
20000680:	40d70633          	sub	a2,a4,a3
20000684:	00a63733          	sltu	a4,a2,a0
20000688:	f779                	bnez	a4,20000656 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
2000068a:	40b2                	lw	ra,12(sp)
2000068c:	0141                	addi	sp,sp,16
2000068e:	8082                	ret

20000690 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000690:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000694:	bff5                	j	20000690 <abort>
	...

20000698 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000698:	8082                	ret
	...

2000069c <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
2000069c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
2000069e:	8082                	ret

200006a0 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200006a0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200006a2:	8082                	ret

200006a4 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200006a4:	ca11                	beqz	a2,200006b8 <memcpy+0x14>
200006a6:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200006a8:	00058703          	lb	a4,0(a1)
200006ac:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006b0:	167d                	addi	a2,a2,-1
200006b2:	0685                	addi	a3,a3,1
200006b4:	0585                	addi	a1,a1,1
200006b6:	fa6d                	bnez	a2,200006a8 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006b8:	8082                	ret

200006ba <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ba:	c619                	beqz	a2,200006c8 <memset+0xe>
200006bc:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006be:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006c2:	167d                	addi	a2,a2,-1
200006c4:	0685                	addi	a3,a3,1
200006c6:	fe65                	bnez	a2,200006be <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006c8:	8082                	ret

200006ca <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006ca:	ce09                	beqz	a2,200006e4 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006cc:	00054683          	lbu	a3,0(a0)
200006d0:	0005c703          	lbu	a4,0(a1)
200006d4:	00e6ea63          	bltu	a3,a4,200006e8 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006d8:	00d76b63          	bltu	a4,a3,200006ee <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006dc:	167d                	addi	a2,a2,-1
200006de:	0585                	addi	a1,a1,1
200006e0:	0505                	addi	a0,a0,1
200006e2:	f66d                	bnez	a2,200006cc <memcmp+0x2>
200006e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006e6:	8082                	ret
200006e8:	fd600513          	li	a0,-42
200006ec:	8082                	ret
200006ee:	02a00513          	li	a0,42
200006f2:	8082                	ret

200006f4 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006f4:	ca11                	beqz	a2,20000708 <memchr+0x14>
200006f6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006fa:	00054683          	lbu	a3,0(a0)
200006fe:	00b68663          	beq	a3,a1,2000070a <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000702:	167d                	addi	a2,a2,-1
20000704:	0505                	addi	a0,a0,1
20000706:	fa75                	bnez	a2,200006fa <memchr+0x6>
20000708:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000070a:	8082                	ret

2000070c <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000070c:	ce09                	beqz	a2,20000726 <memrchr+0x1a>
2000070e:	fff50693          	addi	a3,a0,-1
20000712:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000716:	00c68733          	add	a4,a3,a2
2000071a:	00074703          	lbu	a4,0(a4)
2000071e:	00b70663          	beq	a4,a1,2000072a <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000722:	167d                	addi	a2,a2,-1
20000724:	fa6d                	bnez	a2,20000716 <memrchr+0xa>
20000726:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000728:	8082                	ret
2000072a:	9532                	add	a0,a0,a2
2000072c:	157d                	addi	a0,a0,-1
2000072e:	8082                	ret

20000730 <compare_wakeup_reasons>:
compare_wakeup_reasons():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:28

const test_config_t kTestConfig;

bool compare_wakeup_reasons(const dif_pwrmgr_wakeup_reason_t *lhs,
                            const dif_pwrmgr_wakeup_reason_t *rhs) {
  return lhs->types == rhs->types &&
20000730:	00054603          	lbu	a2,0(a0)
20000734:	0005c683          	lbu	a3,0(a1)
20000738:	00d61863          	bne	a2,a3,20000748 <compare_wakeup_reasons+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:29
         lhs->request_sources == rhs->request_sources;
2000073c:	4148                	lw	a0,4(a0)
2000073e:	41cc                	lw	a1,4(a1)
20000740:	8d2d                	xor	a0,a0,a1
20000742:	00153513          	seqz	a0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:28
  return lhs->types == rhs->types &&
20000746:	8082                	ret
20000748:	4501                	li	a0,0
2000074a:	8082                	ret

2000074c <aon_timer_wakeup_config>:
aon_timer_wakeup_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:33
}

void aon_timer_wakeup_config(dif_aon_timer_t *aon_timer,
                             uint32_t wakeup_threshold) {
2000074c:	7179                	addi	sp,sp,-48
2000074e:	d606                	sw	ra,44(sp)
20000750:	d422                	sw	s0,40(sp)
20000752:	d226                	sw	s1,36(sp)
20000754:	d04a                	sw	s2,32(sp)
20000756:	ce4e                	sw	s3,28(sp)
20000758:	892e                	mv	s2,a1
2000075a:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:35
  // Make sure that wake-up timer is stopped.
  CHECK(dif_aon_timer_wakeup_stop(aon_timer) == kDifAonTimerOk);
2000075c:	6de000ef          	jal	ra,20000e3a <dif_aon_timer_wakeup_stop>
20000760:	00001417          	auipc	s0,0x1
20000764:	63040413          	addi	s0,s0,1584 # 20001d90 <kDeviceLogBypassUartAddress>
20000768:	c91d                	beqz	a0,2000079e <aon_timer_wakeup_config+0x52>
2000076a:	4008                	lw	a0,0(s0)
2000076c:	c909                	beqz	a0,2000077e <aon_timer_wakeup_config+0x32>
2000076e:	e0010517          	auipc	a0,0xe0010
20000772:	95a50513          	addi	a0,a0,-1702 # 100c8 <aon_timer_wakeup_config.kLogFields>
20000776:	4581                	li	a1,0
20000778:	0f3000ef          	jal	ra,2000106a <base_log_internal_dv>
2000077c:	a829                	j	20000796 <aon_timer_wakeup_config+0x4a>
2000077e:	00001597          	auipc	a1,0x1
20000782:	61658593          	addi	a1,a1,1558 # 20001d94 <kDeviceLogBypassUartAddress+0x4>
20000786:	00810993          	addi	s3,sp,8
2000078a:	4651                	li	a2,20
2000078c:	854e                	mv	a0,s3
2000078e:	3f19                	jal	200006a4 <memcpy>
20000790:	854e                	mv	a0,s3
20000792:	02f000ef          	jal	ra,20000fc0 <base_log_internal_core>
20000796:	6531                	lui	a0,0xc
20000798:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000079c:	3b65                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:38

  // Make sure the wake-up IRQ is cleared to avoid false positive.
  CHECK(dif_aon_timer_irq_acknowledge(
2000079e:	8526                	mv	a0,s1
200007a0:	4581                	li	a1,0
200007a2:	7d6000ef          	jal	ra,20000f78 <dif_aon_timer_irq_acknowledge>
200007a6:	c91d                	beqz	a0,200007dc <aon_timer_wakeup_config+0x90>
200007a8:	4008                	lw	a0,0(s0)
200007aa:	c909                	beqz	a0,200007bc <aon_timer_wakeup_config+0x70>
200007ac:	e0010517          	auipc	a0,0xe0010
200007b0:	93050513          	addi	a0,a0,-1744 # 100dc <aon_timer_wakeup_config.kLogFields.2>
200007b4:	4581                	li	a1,0
200007b6:	0b5000ef          	jal	ra,2000106a <base_log_internal_dv>
200007ba:	a829                	j	200007d4 <aon_timer_wakeup_config+0x88>
200007bc:	00001597          	auipc	a1,0x1
200007c0:	5ec58593          	addi	a1,a1,1516 # 20001da8 <kDeviceLogBypassUartAddress+0x18>
200007c4:	00810993          	addi	s3,sp,8
200007c8:	4651                	li	a2,20
200007ca:	854e                	mv	a0,s3
200007cc:	3de1                	jal	200006a4 <memcpy>
200007ce:	854e                	mv	a0,s3
200007d0:	7f0000ef          	jal	ra,20000fc0 <base_log_internal_core>
200007d4:	6531                	lui	a0,0xc
200007d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007da:	3bad                	jal	20000554 <test_status_set>
200007dc:	00710613          	addi	a2,sp,7
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:42
            aon_timer, kDifAonTimerIrqWakeupThreshold) == kDifAonTimerOk);

  bool is_pending;
  CHECK(dif_aon_timer_irq_is_pending(aon_timer, kDifAonTimerIrqWakeupThreshold,
200007e0:	8526                	mv	a0,s1
200007e2:	4581                	li	a1,0
200007e4:	76c000ef          	jal	ra,20000f50 <dif_aon_timer_irq_is_pending>
200007e8:	c91d                	beqz	a0,2000081e <aon_timer_wakeup_config+0xd2>
200007ea:	4008                	lw	a0,0(s0)
200007ec:	c909                	beqz	a0,200007fe <aon_timer_wakeup_config+0xb2>
200007ee:	e0010517          	auipc	a0,0xe0010
200007f2:	90250513          	addi	a0,a0,-1790 # 100f0 <aon_timer_wakeup_config.kLogFields.5>
200007f6:	4581                	li	a1,0
200007f8:	073000ef          	jal	ra,2000106a <base_log_internal_dv>
200007fc:	a829                	j	20000816 <aon_timer_wakeup_config+0xca>
200007fe:	00001597          	auipc	a1,0x1
20000802:	5be58593          	addi	a1,a1,1470 # 20001dbc <kDeviceLogBypassUartAddress+0x2c>
20000806:	00810993          	addi	s3,sp,8
2000080a:	4651                	li	a2,20
2000080c:	854e                	mv	a0,s3
2000080e:	3d59                	jal	200006a4 <memcpy>
20000810:	854e                	mv	a0,s3
20000812:	7ae000ef          	jal	ra,20000fc0 <base_log_internal_core>
20000816:	6531                	lui	a0,0xc
20000818:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000081c:	3b25                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:44
                                     &is_pending) == kDifAonTimerOk);
  CHECK(!is_pending);
2000081e:	00714503          	lbu	a0,7(sp)
20000822:	c91d                	beqz	a0,20000858 <aon_timer_wakeup_config+0x10c>
20000824:	4008                	lw	a0,0(s0)
20000826:	c909                	beqz	a0,20000838 <aon_timer_wakeup_config+0xec>
20000828:	e0010517          	auipc	a0,0xe0010
2000082c:	8dc50513          	addi	a0,a0,-1828 # 10104 <aon_timer_wakeup_config.kLogFields.8>
20000830:	4581                	li	a1,0
20000832:	039000ef          	jal	ra,2000106a <base_log_internal_dv>
20000836:	a829                	j	20000850 <aon_timer_wakeup_config+0x104>
20000838:	00001597          	auipc	a1,0x1
2000083c:	59858593          	addi	a1,a1,1432 # 20001dd0 <kDeviceLogBypassUartAddress+0x40>
20000840:	00810993          	addi	s3,sp,8
20000844:	4651                	li	a2,20
20000846:	854e                	mv	a0,s3
20000848:	3db1                	jal	200006a4 <memcpy>
2000084a:	854e                	mv	a0,s3
2000084c:	774000ef          	jal	ra,20000fc0 <base_log_internal_core>
20000850:	6531                	lui	a0,0xc
20000852:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000856:	39fd                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:46

  CHECK(dif_aon_timer_wakeup_start(aon_timer, wakeup_threshold, 0) ==
20000858:	8526                	mv	a0,s1
2000085a:	85ca                	mv	a1,s2
2000085c:	4601                	li	a2,0
2000085e:	2365                	jal	20000e06 <dif_aon_timer_wakeup_start>
20000860:	c915                	beqz	a0,20000894 <aon_timer_wakeup_config+0x148>
20000862:	4008                	lw	a0,0(s0)
20000864:	c909                	beqz	a0,20000876 <aon_timer_wakeup_config+0x12a>
20000866:	e0010517          	auipc	a0,0xe0010
2000086a:	8b250513          	addi	a0,a0,-1870 # 10118 <aon_timer_wakeup_config.kLogFields.11>
2000086e:	4581                	li	a1,0
20000870:	7fa000ef          	jal	ra,2000106a <base_log_internal_dv>
20000874:	a821                	j	2000088c <aon_timer_wakeup_config+0x140>
20000876:	00001597          	auipc	a1,0x1
2000087a:	56e58593          	addi	a1,a1,1390 # 20001de4 <kDeviceLogBypassUartAddress+0x54>
2000087e:	0020                	addi	s0,sp,8
20000880:	4651                	li	a2,20
20000882:	8522                	mv	a0,s0
20000884:	3505                	jal	200006a4 <memcpy>
20000886:	8522                	mv	a0,s0
20000888:	738000ef          	jal	ra,20000fc0 <base_log_internal_core>
2000088c:	6531                	lui	a0,0xc
2000088e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000892:	31c9                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:48
        kDifAonTimerOk);
}
20000894:	49f2                	lw	s3,28(sp)
20000896:	5902                	lw	s2,32(sp)
20000898:	5492                	lw	s1,36(sp)
2000089a:	5422                	lw	s0,40(sp)
2000089c:	50b2                	lw	ra,44(sp)
2000089e:	6145                	addi	sp,sp,48
200008a0:	8082                	ret

200008a2 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:50

bool test_main(void) {
200008a2:	7139                	addi	sp,sp,-64
200008a4:	de06                	sw	ra,60(sp)
200008a6:	dc22                	sw	s0,56(sp)
200008a8:	da26                	sw	s1,52(sp)
200008aa:	d84a                	sw	s2,48(sp)
200008ac:	102c                	addi	a1,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:55
  dif_pwrmgr_t pwrmgr;
  dif_aon_timer_t aon_timer;

  // Initialize pwrmgr
  CHECK(dif_pwrmgr_init(
200008ae:	40400537          	lui	a0,0x40400
200008b2:	2c0d                	jal	20000ae4 <dif_pwrmgr_init>
200008b4:	00001917          	auipc	s2,0x1
200008b8:	4dc90913          	addi	s2,s2,1244 # 20001d90 <kDeviceLogBypassUartAddress>
200008bc:	c91d                	beqz	a0,200008f2 <test_main+0x50>
200008be:	00092503          	lw	a0,0(s2)
200008c2:	c909                	beqz	a0,200008d4 <test_main+0x32>
200008c4:	e0010517          	auipc	a0,0xe0010
200008c8:	86850513          	addi	a0,a0,-1944 # 1012c <test_main.kLogFields>
200008cc:	4581                	li	a1,0
200008ce:	79c000ef          	jal	ra,2000106a <base_log_internal_dv>
200008d2:	a821                	j	200008ea <test_main+0x48>
200008d4:	00001597          	auipc	a1,0x1
200008d8:	52458593          	addi	a1,a1,1316 # 20001df8 <kDeviceLogBypassUartAddress+0x68>
200008dc:	0020                	addi	s0,sp,8
200008de:	4651                	li	a2,20
200008e0:	8522                	mv	a0,s0
200008e2:	33c9                	jal	200006a4 <memcpy>
200008e4:	8522                	mv	a0,s0
200008e6:	6da000ef          	jal	ra,20000fc0 <base_log_internal_core>
200008ea:	6531                	lui	a0,0xc
200008ec:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008f0:	3195                	jal	20000554 <test_status_set>
200008f2:	1028                	addi	a0,sp,40
200008f4:	858a                	mv	a1,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:64
            },
            &pwrmgr) == kDifPwrmgrOk);

  // Assuming the chip hasn't slept yet, wakeup reason should be empty.
  dif_pwrmgr_wakeup_reason_t wakeup_reason;
  CHECK(dif_pwrmgr_wakeup_reason_get(&pwrmgr, &wakeup_reason) == kDifPwrmgrOk);
200008f6:	2901                	jal	20000d06 <dif_pwrmgr_wakeup_reason_get>
200008f8:	c91d                	beqz	a0,2000092e <test_main+0x8c>
200008fa:	00092503          	lw	a0,0(s2)
200008fe:	c909                	beqz	a0,20000910 <test_main+0x6e>
20000900:	e0010517          	auipc	a0,0xe0010
20000904:	84050513          	addi	a0,a0,-1984 # 10140 <test_main.kLogFields.15>
20000908:	4581                	li	a1,0
2000090a:	760000ef          	jal	ra,2000106a <base_log_internal_dv>
2000090e:	a821                	j	20000926 <test_main+0x84>
20000910:	00001597          	auipc	a1,0x1
20000914:	4fc58593          	addi	a1,a1,1276 # 20001e0c <kDeviceLogBypassUartAddress+0x7c>
20000918:	0020                	addi	s0,sp,8
2000091a:	4651                	li	a2,20
2000091c:	8522                	mv	a0,s0
2000091e:	3359                	jal	200006a4 <memcpy>
20000920:	8522                	mv	a0,s0
20000922:	69e000ef          	jal	ra,20000fc0 <base_log_internal_core>
20000926:	6531                	lui	a0,0xc
20000928:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000092c:	3125                	jal	20000554 <test_status_set>
compare_wakeup_reasons():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:28
  return lhs->types == rhs->types &&
2000092e:	00014403          	lbu	s0,0(sp)
20000932:	c01d                	beqz	s0,20000958 <test_main+0xb6>
20000934:	4505                	li	a0,1
20000936:	04a41a63          	bne	s0,a0,2000098a <test_main+0xe8>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:29
         lhs->request_sources == rhs->request_sources;
2000093a:	4492                	lw	s1,4(sp)
2000093c:	00092503          	lw	a0,0(s2)
20000940:	45c1                	li	a1,16
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:107
          kDifPwrmgrConfigOk);

    // Enter low power mode.
    wait_for_interrupt();

  } else if (compare_wakeup_reasons(&wakeup_reason, &kWakeUpReasonTest)) {
20000942:	06b49263          	bne	s1,a1,200009a6 <test_main+0x104>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:108
    LOG_INFO("Aon timer wakeup detected");
20000946:	c551                	beqz	a0,200009d2 <test_main+0x130>
20000948:	e0010517          	auipc	a0,0xe0010
2000094c:	87050513          	addi	a0,a0,-1936 # 101b8 <test_main.kLogFields.33>
20000950:	4581                	li	a1,0
20000952:	718000ef          	jal	ra,2000106a <base_log_internal_dv>
20000956:	a841                	j	200009e6 <test_main+0x144>
compare_wakeup_reasons():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:29
         lhs->request_sources == rhs->request_sources;
20000958:	4492                	lw	s1,4(sp)
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:66
  if (compare_wakeup_reasons(&wakeup_reason, &kWakeUpReasonPor)) {
2000095a:	e88d                	bnez	s1,2000098c <test_main+0xea>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:67
    LOG_INFO("Powered up for the first time, begin test");
2000095c:	00092483          	lw	s1,0(s2)
20000960:	c4c9                	beqz	s1,200009ea <test_main+0x148>
20000962:	e000f517          	auipc	a0,0xe000f
20000966:	7f250513          	addi	a0,a0,2034 # 10154 <test_main.kLogFields.18>
2000096a:	4581                	li	a1,0
2000096c:	6fe000ef          	jal	ra,2000106a <base_log_internal_dv>
20000970:	100c                	addi	a1,sp,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:74
    CHECK(dif_aon_timer_init(params, &aon_timer) == kDifAonTimerOk);
20000972:	40470537          	lui	a0,0x40470
20000976:	2149                	jal	20000df8 <dif_aon_timer_init>
20000978:	c555                	beqz	a0,20000a24 <test_main+0x182>
2000097a:	e000f517          	auipc	a0,0xe000f
2000097e:	7ee50513          	addi	a0,a0,2030 # 10168 <test_main.kLogFields.21>
20000982:	4581                	li	a1,0
20000984:	6e6000ef          	jal	ra,2000106a <base_log_internal_dv>
20000988:	a851                	j	20000a1c <test_main+0x17a>
2000098a:	4492                	lw	s1,4(sp)
2000098c:	00092503          	lw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:112
    return true;

  } else {
    LOG_ERROR("Unexpected wakeup detected: type = %d, request_source = %d",
20000990:	cd09                	beqz	a0,200009aa <test_main+0x108>
20000992:	e0010517          	auipc	a0,0xe0010
20000996:	83a50513          	addi	a0,a0,-1990 # 101cc <test_main.kLogFields.36>
2000099a:	4589                	li	a1,2
2000099c:	8622                	mv	a2,s0
2000099e:	86a6                	mv	a3,s1
200009a0:	6ca000ef          	jal	ra,2000106a <base_log_internal_dv>
200009a4:	a005                	j	200009c4 <test_main+0x122>
200009a6:	4405                	li	s0,1
200009a8:	f56d                	bnez	a0,20000992 <test_main+0xf0>
200009aa:	00001597          	auipc	a1,0x1
200009ae:	4ee58593          	addi	a1,a1,1262 # 20001e98 <kDeviceLogBypassUartAddress+0x108>
200009b2:	00810913          	addi	s2,sp,8
200009b6:	4651                	li	a2,20
200009b8:	854a                	mv	a0,s2
200009ba:	31ed                	jal	200006a4 <memcpy>
200009bc:	854a                	mv	a0,s2
200009be:	85a2                	mv	a1,s0
200009c0:	8626                	mv	a2,s1
200009c2:	2bfd                	jal	20000fc0 <base_log_internal_core>
200009c4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:118
              wakeup_reason.types, wakeup_reason.request_sources);
    return false;
  }

  return false;
}
200009c6:	5942                	lw	s2,48(sp)
200009c8:	54d2                	lw	s1,52(sp)
200009ca:	5462                	lw	s0,56(sp)
200009cc:	50f2                	lw	ra,60(sp)
200009ce:	6121                	addi	sp,sp,64
200009d0:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:108
    LOG_INFO("Aon timer wakeup detected");
200009d2:	00001597          	auipc	a1,0x1
200009d6:	4b258593          	addi	a1,a1,1202 # 20001e84 <kDeviceLogBypassUartAddress+0xf4>
200009da:	0020                	addi	s0,sp,8
200009dc:	4651                	li	a2,20
200009de:	8522                	mv	a0,s0
200009e0:	31d1                	jal	200006a4 <memcpy>
200009e2:	8522                	mv	a0,s0
200009e4:	2bf1                	jal	20000fc0 <base_log_internal_core>
200009e6:	4505                	li	a0,1
200009e8:	bff9                	j	200009c6 <test_main+0x124>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:67
    LOG_INFO("Powered up for the first time, begin test");
200009ea:	00001597          	auipc	a1,0x1
200009ee:	43658593          	addi	a1,a1,1078 # 20001e20 <kDeviceLogBypassUartAddress+0x90>
200009f2:	0020                	addi	s0,sp,8
200009f4:	4651                	li	a2,20
200009f6:	8522                	mv	a0,s0
200009f8:	3175                	jal	200006a4 <memcpy>
200009fa:	8522                	mv	a0,s0
200009fc:	23d1                	jal	20000fc0 <base_log_internal_core>
200009fe:	100c                	addi	a1,sp,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:74
    CHECK(dif_aon_timer_init(params, &aon_timer) == kDifAonTimerOk);
20000a00:	40470537          	lui	a0,0x40470
20000a04:	2ed5                	jal	20000df8 <dif_aon_timer_init>
20000a06:	cd19                	beqz	a0,20000a24 <test_main+0x182>
20000a08:	00001597          	auipc	a1,0x1
20000a0c:	42c58593          	addi	a1,a1,1068 # 20001e34 <kDeviceLogBypassUartAddress+0xa4>
20000a10:	0020                	addi	s0,sp,8
20000a12:	4651                	li	a2,20
20000a14:	8522                	mv	a0,s0
20000a16:	3179                	jal	200006a4 <memcpy>
20000a18:	8522                	mv	a0,s0
20000a1a:	235d                	jal	20000fc0 <base_log_internal_core>
20000a1c:	6531                	lui	a0,0xc
20000a1e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a22:	3e0d                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:86
    if (kDeviceType == kDeviceSimVerilator) {
20000a24:	00001517          	auipc	a0,0x1
20000a28:	33c50513          	addi	a0,a0,828 # 20001d60 <kDeviceType>
20000a2c:	4108                	lw	a0,0(a0)
20000a2e:	4605                	li	a2,1
20000a30:	12c00593          	li	a1,300
20000a34:	00c50363          	beq	a0,a2,20000a3a <test_main+0x198>
20000a38:	45f9                	li	a1,30
20000a3a:	1008                	addi	a0,sp,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:89
    aon_timer_wakeup_config(&aon_timer, wakeup_threshold);
20000a3c:	3b01                	jal	2000074c <aon_timer_wakeup_config>
20000a3e:	1028                	addi	a0,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:97
    CHECK(dif_pwrmgr_set_request_sources(&pwrmgr, kDifPwrmgrReqTypeWakeup,
20000a40:	4641                	li	a2,16
20000a42:	4581                	li	a1,0
20000a44:	2a81                	jal	20000b94 <dif_pwrmgr_set_request_sources>
20000a46:	c51d                	beqz	a0,20000a74 <test_main+0x1d2>
20000a48:	c881                	beqz	s1,20000a58 <test_main+0x1b6>
20000a4a:	e000f517          	auipc	a0,0xe000f
20000a4e:	73250513          	addi	a0,a0,1842 # 1017c <test_main.kLogFields.24>
20000a52:	4581                	li	a1,0
20000a54:	2d19                	jal	2000106a <base_log_internal_dv>
20000a56:	a819                	j	20000a6c <test_main+0x1ca>
20000a58:	00001597          	auipc	a1,0x1
20000a5c:	3f058593          	addi	a1,a1,1008 # 20001e48 <kDeviceLogBypassUartAddress+0xb8>
20000a60:	0020                	addi	s0,sp,8
20000a62:	4651                	li	a2,20
20000a64:	8522                	mv	a0,s0
20000a66:	393d                	jal	200006a4 <memcpy>
20000a68:	8522                	mv	a0,s0
20000a6a:	2b99                	jal	20000fc0 <base_log_internal_core>
20000a6c:	6531                	lui	a0,0xc
20000a6e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a72:	34cd                	jal	20000554 <test_status_set>
20000a74:	1028                	addi	a0,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:100
    CHECK(dif_pwrmgr_set_domain_config(&pwrmgr, config) == kDifPwrmgrConfigOk);
20000a76:	45a1                	li	a1,8
20000a78:	20f1                	jal	20000b44 <dif_pwrmgr_set_domain_config>
20000a7a:	c51d                	beqz	a0,20000aa8 <test_main+0x206>
20000a7c:	c881                	beqz	s1,20000a8c <test_main+0x1ea>
20000a7e:	e000f517          	auipc	a0,0xe000f
20000a82:	71250513          	addi	a0,a0,1810 # 10190 <test_main.kLogFields.27>
20000a86:	4581                	li	a1,0
20000a88:	23cd                	jal	2000106a <base_log_internal_dv>
20000a8a:	a819                	j	20000aa0 <test_main+0x1fe>
20000a8c:	00001597          	auipc	a1,0x1
20000a90:	3d058593          	addi	a1,a1,976 # 20001e5c <kDeviceLogBypassUartAddress+0xcc>
20000a94:	0020                	addi	s0,sp,8
20000a96:	4651                	li	a2,20
20000a98:	8522                	mv	a0,s0
20000a9a:	3129                	jal	200006a4 <memcpy>
20000a9c:	8522                	mv	a0,s0
20000a9e:	230d                	jal	20000fc0 <base_log_internal_core>
20000aa0:	6531                	lui	a0,0xc
20000aa2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000aa6:	347d                	jal	20000554 <test_status_set>
20000aa8:	1028                	addi	a0,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_pwrmgr_smoketest.c:101
    CHECK(dif_pwrmgr_low_power_set_enabled(&pwrmgr, kDifPwrmgrToggleEnabled) ==
20000aaa:	4581                	li	a1,0
20000aac:	2099                	jal	20000af2 <dif_pwrmgr_low_power_set_enabled>
20000aae:	c51d                	beqz	a0,20000adc <test_main+0x23a>
20000ab0:	c881                	beqz	s1,20000ac0 <test_main+0x21e>
20000ab2:	e000f517          	auipc	a0,0xe000f
20000ab6:	6f250513          	addi	a0,a0,1778 # 101a4 <test_main.kLogFields.30>
20000aba:	4581                	li	a1,0
20000abc:	237d                	jal	2000106a <base_log_internal_dv>
20000abe:	a819                	j	20000ad4 <test_main+0x232>
20000ac0:	00001597          	auipc	a1,0x1
20000ac4:	3b058593          	addi	a1,a1,944 # 20001e70 <kDeviceLogBypassUartAddress+0xe0>
20000ac8:	0020                	addi	s0,sp,8
20000aca:	4651                	li	a2,20
20000acc:	8522                	mv	a0,s0
20000ace:	3ed9                	jal	200006a4 <memcpy>
20000ad0:	8522                	mv	a0,s0
20000ad2:	21fd                	jal	20000fc0 <base_log_internal_core>
20000ad4:	6531                	lui	a0,0xc
20000ad6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ada:	3cad                	jal	20000554 <test_status_set>
20000adc:	4501                	li	a0,0
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000ade:	10500073          	wfi
20000ae2:	b5d5                	j	200009c6 <test_main+0x124>

20000ae4 <dif_pwrmgr_init>:
dif_pwrmgr_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:247
  return !bitfield_bit32_read(reg_val, reg_info.write_enable_bit_index);
}

dif_pwrmgr_result_t dif_pwrmgr_init(dif_pwrmgr_params_t params,
                                    dif_pwrmgr_t *pwrmgr) {
  if (pwrmgr == NULL) {
20000ae4:	c581                	beqz	a1,20000aec <dif_pwrmgr_init+0x8>
20000ae6:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:251
    return kDifPwrmgrBadArg;
  }

  *pwrmgr = (dif_pwrmgr_t){.params = params};
20000ae8:	c188                	sw	a0,0(a1)
20000aea:	a011                	j	20000aee <dif_pwrmgr_init+0xa>
20000aec:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:254

  return kDifPwrmgrOk;
}
20000aee:	8532                	mv	a0,a2
20000af0:	8082                	ret

20000af2 <dif_pwrmgr_low_power_set_enabled>:
dif_pwrmgr_low_power_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:257

dif_pwrmgr_config_result_t dif_pwrmgr_low_power_set_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t new_state) {
20000af2:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:258
  if (pwrmgr == NULL) {
20000af4:	c915                	beqz	a0,20000b28 <dif_pwrmgr_low_power_set_enabled+0x36>
toggle_to_bool():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:155
  switch (val) {
20000af6:	c591                	beqz	a1,20000b02 <dif_pwrmgr_low_power_set_enabled+0x10>
20000af8:	4685                	li	a3,1
20000afa:	02d59763          	bne	a1,a3,20000b28 <dif_pwrmgr_low_power_set_enabled+0x36>
20000afe:	4581                	li	a1,0
20000b00:	a011                	j	20000b04 <dif_pwrmgr_low_power_set_enabled+0x12>
20000b02:	4585                	li	a1,1
control_register_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:210
      mmio_region_read32(pwrmgr->params.base_addr,
20000b04:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b06:	46d0                	lw	a2,12(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b08:	00167713          	andi	a4,a2,1
20000b0c:	460d                	li	a2,3
dif_pwrmgr_low_power_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:267
  bool enable = false;
  if (!toggle_to_bool(new_state, &enable)) {
    return kDifPwrmgrConfigBadArg;
  }

  if (control_register_is_locked(pwrmgr)) {
20000b0e:	cf09                	beqz	a4,20000b28 <dif_pwrmgr_low_power_set_enabled+0x36>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b10:	4a90                	lw	a2,16(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b12:	9a79                	andi	a2,a2,-2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000b14:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b16:	ca8c                	sw	a1,16(a3)
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:223
  mmio_region_write32(
20000b18:	410c                	lw	a1,0(a0)
20000b1a:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b1c:	c9d0                	sw	a2,20(a1)
20000b1e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b20:	494c                	lw	a1,20(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b22:	8985                	andi	a1,a1,1
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:226
  while (bitfield_bit32_read(mmio_region_read32(pwrmgr->params.base_addr,
20000b24:	fdf5                	bnez	a1,20000b20 <dif_pwrmgr_low_power_set_enabled+0x2e>
20000b26:	4601                	li	a2,0
dif_pwrmgr_low_power_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:282

  // Slow clock domain must be synced for changes to take effect.
  sync_slow_clock_domain_polled(pwrmgr);

  return kDifPwrmgrConfigOk;
}
20000b28:	8532                	mv	a0,a2
20000b2a:	8082                	ret

20000b2c <dif_pwrmgr_low_power_get_enabled>:
dif_pwrmgr_low_power_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:285

dif_pwrmgr_result_t dif_pwrmgr_low_power_get_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t *cur_state) {
20000b2c:	862a                	mv	a2,a0
20000b2e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:286
  if (pwrmgr == NULL || cur_state == NULL) {
20000b30:	ca09                	beqz	a2,20000b42 <dif_pwrmgr_low_power_get_enabled+0x16>
20000b32:	c981                	beqz	a1,20000b42 <dif_pwrmgr_low_power_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:291
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val =
      mmio_region_read32(pwrmgr->params.base_addr, PWRMGR_CONTROL_REG_OFFSET);
20000b34:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b36:	4910                	lw	a2,16(a0)
20000b38:	4501                	li	a0,0
20000b3a:	fff64613          	not	a2,a2
bool_to_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:172
  return val ? kDifPwrmgrToggleEnabled : kDifPwrmgrToggleDisabled;
20000b3e:	8a05                	andi	a2,a2,1
dif_pwrmgr_low_power_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:292
  *cur_state = bool_to_toggle(
20000b40:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:296
      bitfield_bit32_read(reg_val, PWRMGR_CONTROL_LOW_POWER_HINT_BIT));

  return kDifPwrmgrOk;
}
20000b42:	8082                	ret

20000b44 <dif_pwrmgr_set_domain_config>:
dif_pwrmgr_set_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:299

dif_pwrmgr_config_result_t dif_pwrmgr_set_domain_config(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_domain_config_t config) {
20000b44:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:300
  if (pwrmgr == NULL || !is_valid_for_bitfield(config, kDomainConfigBitfield)) {
20000b46:	c90d                	beqz	a0,20000b78 <dif_pwrmgr_set_domain_config+0x34>
20000b48:	46fd                	li	a3,31
20000b4a:	02b6e763          	bltu	a3,a1,20000b78 <dif_pwrmgr_set_domain_config+0x34>
control_register_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:210
      mmio_region_read32(pwrmgr->params.base_addr,
20000b4e:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b50:	46d0                	lw	a2,12(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000b52:	00167713          	andi	a4,a2,1
20000b56:	460d                	li	a2,3
dif_pwrmgr_set_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:304
    return kDifPwrmgrConfigBadArg;
  }

  if (control_register_is_locked(pwrmgr)) {
20000b58:	c305                	beqz	a4,20000b78 <dif_pwrmgr_set_domain_config+0x34>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b5a:	4a90                	lw	a2,16(a3)
20000b5c:	89fd                	andi	a1,a1,31
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b5e:	e0f67613          	andi	a2,a2,-497
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000b62:	0592                	slli	a1,a1,0x4
20000b64:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b66:	ca8c                	sw	a1,16(a3)
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:223
  mmio_region_write32(
20000b68:	410c                	lw	a1,0(a0)
20000b6a:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b6c:	c9d0                	sw	a2,20(a1)
20000b6e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b70:	494c                	lw	a1,20(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b72:	8985                	andi	a1,a1,1
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:226
  while (bitfield_bit32_read(mmio_region_read32(pwrmgr->params.base_addr,
20000b74:	fdf5                	bnez	a1,20000b70 <dif_pwrmgr_set_domain_config+0x2c>
20000b76:	4601                	li	a2,0
dif_pwrmgr_set_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:318

  // Slow clock domain must be synced for changes to take effect.
  sync_slow_clock_domain_polled(pwrmgr);

  return kDifPwrmgrConfigOk;
}
20000b78:	8532                	mv	a0,a2
20000b7a:	8082                	ret

20000b7c <dif_pwrmgr_get_domain_config>:
dif_pwrmgr_get_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:321

dif_pwrmgr_result_t dif_pwrmgr_get_domain_config(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_domain_config_t *config) {
20000b7c:	862a                	mv	a2,a0
20000b7e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:322
  if (pwrmgr == NULL || config == NULL) {
20000b80:	ca09                	beqz	a2,20000b92 <dif_pwrmgr_get_domain_config+0x16>
20000b82:	c981                	beqz	a1,20000b92 <dif_pwrmgr_get_domain_config+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:327
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val =
      mmio_region_read32(pwrmgr->params.base_addr, PWRMGR_CONTROL_REG_OFFSET);
20000b84:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b86:	4910                	lw	a2,16(a0)
20000b88:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000b8a:	8211                	srli	a2,a2,0x4
dif_pwrmgr_get_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:328
  *config = bitfield_field32_read(reg_val, kDomainConfigBitfield);
20000b8c:	8a7d                	andi	a2,a2,31
20000b8e:	00c58023          	sb	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:331

  return kDifPwrmgrOk;
}
20000b92:	8082                	ret

20000b94 <dif_pwrmgr_set_request_sources>:
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:335

dif_pwrmgr_config_result_t dif_pwrmgr_set_request_sources(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    dif_pwrmgr_request_sources_t sources) {
20000b94:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:336
  if (pwrmgr == NULL || !is_valid_req_type(req_type)) {
20000b96:	c135                	beqz	a0,20000bfa <dif_pwrmgr_set_request_sources+0x66>
20000b98:	4705                	li	a4,1
20000b9a:	06b76063          	bltu	a4,a1,20000bfa <dif_pwrmgr_set_request_sources+0x66>
20000b9e:	4761                	li	a4,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:340
    return kDifPwrmgrConfigBadArg;
  }

  request_reg_info_t reg_info = request_reg_infos[req_type];
20000ba0:	02e58733          	mul	a4,a1,a4
20000ba4:	00001797          	auipc	a5,0x1
20000ba8:	30c78793          	addi	a5,a5,780 # 20001eb0 <request_reg_infos>
20000bac:	00e78833          	add	a6,a5,a4
20000bb0:	01082583          	lw	a1,16(a6)
is_valid_for_bitfield():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:197
  return (val & bitfield.mask) == val;
20000bb4:	8df1                	and	a1,a1,a2
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:342

  if (!is_valid_for_bitfield(sources, reg_info.bitfield)) {
20000bb6:	04c59263          	bne	a1,a2,20000bfa <dif_pwrmgr_set_request_sources+0x66>
request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000bba:	00f705b3          	add	a1,a4,a5
20000bbe:	4198                	lw	a4,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:239
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000bc0:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000bc2:	41cc                	lw	a1,4(a1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bc4:	9b71                	andi	a4,a4,-4
20000bc6:	9736                	add	a4,a4,a3
20000bc8:	4318                	lw	a4,0(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000bca:	00b755b3          	srl	a1,a4,a1
20000bce:	8985                	andi	a1,a1,1
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:347
    return kDifPwrmgrConfigBadArg;
  }

  // Return early if locked.
  if (request_sources_is_locked(pwrmgr, req_type)) {
20000bd0:	c585                	beqz	a1,20000bf8 <dif_pwrmgr_set_request_sources+0x64>
20000bd2:	01482583          	lw	a1,20(a6)
20000bd6:	00882703          	lw	a4,8(a6)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000bda:	00b615b3          	sll	a1,a2,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000bde:	ffc77613          	andi	a2,a4,-4
20000be2:	9636                	add	a2,a2,a3
20000be4:	c20c                	sw	a1,0(a2)
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:223
  mmio_region_write32(
20000be6:	410c                	lw	a1,0(a0)
20000be8:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bea:	c9d0                	sw	a2,20(a1)
20000bec:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bee:	494c                	lw	a1,20(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000bf0:	8985                	andi	a1,a1,1
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:226
  while (bitfield_bit32_read(mmio_region_read32(pwrmgr->params.base_addr,
20000bf2:	fdf5                	bnez	a1,20000bee <dif_pwrmgr_set_request_sources+0x5a>
20000bf4:	4681                	li	a3,0
20000bf6:	a011                	j	20000bfa <dif_pwrmgr_set_request_sources+0x66>
20000bf8:	468d                	li	a3,3
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:359
                      reg_info.sources_enable_reg_offset, reg_val);
  // Slow clock domain must be synced for changes to take effect.
  sync_slow_clock_domain_polled(pwrmgr);

  return kDifPwrmgrConfigOk;
}
20000bfa:	8536                	mv	a0,a3
20000bfc:	8082                	ret

20000bfe <dif_pwrmgr_get_request_sources>:
dif_pwrmgr_get_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:363

dif_pwrmgr_result_t dif_pwrmgr_get_request_sources(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    dif_pwrmgr_request_sources_t *sources) {
20000bfe:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:364
  if (pwrmgr == NULL || !is_valid_req_type(req_type) || sources == NULL) {
20000c00:	c90d                	beqz	a0,20000c32 <dif_pwrmgr_get_request_sources+0x34>
20000c02:	4705                	li	a4,1
20000c04:	02b76763          	bltu	a4,a1,20000c32 <dif_pwrmgr_get_request_sources+0x34>
20000c08:	c60d                	beqz	a2,20000c32 <dif_pwrmgr_get_request_sources+0x34>
20000c0a:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:368
    return kDifPwrmgrBadArg;
  }

  request_reg_info_t reg_info = request_reg_infos[req_type];
20000c0c:	02d585b3          	mul	a1,a1,a3
20000c10:	00001697          	auipc	a3,0x1
20000c14:	2a068693          	addi	a3,a3,672 # 20001eb0 <request_reg_infos>
20000c18:	95b6                	add	a1,a1,a3
20000c1a:	4594                	lw	a3,8(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:369
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000c1c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:368
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000c1e:	49d8                	lw	a4,20(a1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c20:	9af1                	andi	a3,a3,-4
20000c22:	9536                	add	a0,a0,a3
20000c24:	4108                	lw	a0,0(a0)
dif_pwrmgr_get_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:368
20000c26:	498c                	lw	a1,16(a1)
20000c28:	4681                	li	a3,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000c2a:	00e55533          	srl	a0,a0,a4
20000c2e:	8d6d                	and	a0,a0,a1
dif_pwrmgr_get_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:371
                                        reg_info.sources_enable_reg_offset);
  *sources = bitfield_field32_read(reg_val, reg_info.bitfield);
20000c30:	c208                	sw	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:374

  return kDifPwrmgrOk;
}
20000c32:	8536                	mv	a0,a3
20000c34:	8082                	ret

20000c36 <dif_pwrmgr_get_current_request_sources>:
dif_pwrmgr_get_current_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:378

dif_pwrmgr_result_t dif_pwrmgr_get_current_request_sources(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    dif_pwrmgr_request_sources_t *sources) {
20000c36:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:379
  if (pwrmgr == NULL || !is_valid_req_type(req_type) || sources == NULL) {
20000c38:	c90d                	beqz	a0,20000c6a <dif_pwrmgr_get_current_request_sources+0x34>
20000c3a:	4705                	li	a4,1
20000c3c:	02b76763          	bltu	a4,a1,20000c6a <dif_pwrmgr_get_current_request_sources+0x34>
20000c40:	c60d                	beqz	a2,20000c6a <dif_pwrmgr_get_current_request_sources+0x34>
20000c42:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:383
    return kDifPwrmgrBadArg;
  }

  request_reg_info_t reg_info = request_reg_infos[req_type];
20000c44:	02d585b3          	mul	a1,a1,a3
20000c48:	00001697          	auipc	a3,0x1
20000c4c:	26868693          	addi	a3,a3,616 # 20001eb0 <request_reg_infos>
20000c50:	95b6                	add	a1,a1,a3
20000c52:	45d4                	lw	a3,12(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:384
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000c54:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:383
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000c56:	49d8                	lw	a4,20(a1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c58:	9af1                	andi	a3,a3,-4
20000c5a:	9536                	add	a0,a0,a3
20000c5c:	4108                	lw	a0,0(a0)
dif_pwrmgr_get_current_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:383
20000c5e:	498c                	lw	a1,16(a1)
20000c60:	4681                	li	a3,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20000c62:	00e55533          	srl	a0,a0,a4
20000c66:	8d6d                	and	a0,a0,a1
dif_pwrmgr_get_current_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:386
                                        reg_info.cur_req_sources_reg_offset);
  *sources = bitfield_field32_read(reg_val, reg_info.bitfield);
20000c68:	c208                	sw	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:389

  return kDifPwrmgrOk;
}
20000c6a:	8536                	mv	a0,a3
20000c6c:	8082                	ret

20000c6e <dif_pwrmgr_request_sources_lock>:
dif_pwrmgr_request_sources_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:392

dif_pwrmgr_result_t dif_pwrmgr_request_sources_lock(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type) {
20000c6e:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:393
  if (pwrmgr == NULL || !is_valid_req_type(req_type)) {
20000c70:	c11d                	beqz	a0,20000c96 <dif_pwrmgr_request_sources_lock+0x28>
20000c72:	4685                	li	a3,1
20000c74:	02b6e163          	bltu	a3,a1,20000c96 <dif_pwrmgr_request_sources_lock+0x28>
20000c78:	4661                	li	a2,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:400
  }

  // Only a single bit of this register is significant, thus we don't perform a
  // read-modify-write. Setting this bit to 0 locks sources.
  mmio_region_write32(pwrmgr->params.base_addr,
                      request_reg_infos[req_type].write_enable_reg_offset, 0);
20000c7a:	02c585b3          	mul	a1,a1,a2
20000c7e:	00001617          	auipc	a2,0x1
20000c82:	23260613          	addi	a2,a2,562 # 20001eb0 <request_reg_infos>
20000c86:	95b2                	add	a1,a1,a2
20000c88:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:399
  mmio_region_write32(pwrmgr->params.base_addr,
20000c8a:	4108                	lw	a0,0(a0)
20000c8c:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c8e:	99f1                	andi	a1,a1,-4
20000c90:	952e                	add	a0,a0,a1
20000c92:	00052023          	sw	zero,0(a0)
dif_pwrmgr_request_sources_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:403

  return kDifPwrmgrOk;
}
20000c96:	8532                	mv	a0,a2
20000c98:	8082                	ret

20000c9a <dif_pwrmgr_request_sources_is_locked>:
dif_pwrmgr_request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:407

dif_pwrmgr_result_t dif_pwrmgr_request_sources_is_locked(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    bool *is_locked) {
20000c9a:	86aa                	mv	a3,a0
20000c9c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:408
  if (pwrmgr == NULL || !is_valid_req_type(req_type) || is_locked == NULL) {
20000c9e:	ce85                	beqz	a3,20000cd6 <dif_pwrmgr_request_sources_is_locked+0x3c>
20000ca0:	4705                	li	a4,1
20000ca2:	02b76a63          	bltu	a4,a1,20000cd6 <dif_pwrmgr_request_sources_is_locked+0x3c>
20000ca6:	ca05                	beqz	a2,20000cd6 <dif_pwrmgr_request_sources_is_locked+0x3c>
20000ca8:	4561                	li	a0,24
request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000caa:	02a58533          	mul	a0,a1,a0
20000cae:	00001597          	auipc	a1,0x1
20000cb2:	20258593          	addi	a1,a1,514 # 20001eb0 <request_reg_infos>
20000cb6:	952e                	add	a0,a0,a1
20000cb8:	410c                	lw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:239
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000cba:	4294                	lw	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000cbc:	4158                	lw	a4,4(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cbe:	ffc5f513          	andi	a0,a1,-4
20000cc2:	9536                	add	a0,a0,a3
20000cc4:	410c                	lw	a1,0(a0)
20000cc6:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000cc8:	00e5d5b3          	srl	a1,a1,a4
20000ccc:	8985                	andi	a1,a1,1
20000cce:	0015b593          	seqz	a1,a1
dif_pwrmgr_request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:412
    return kDifPwrmgrBadArg;
  }

  *is_locked = request_sources_is_locked(pwrmgr, req_type);
20000cd2:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:415

  return kDifPwrmgrOk;
}
20000cd6:	8082                	ret

20000cd8 <dif_pwrmgr_wakeup_request_recording_set_enabled>:
dif_pwrmgr_wakeup_request_recording_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:418

dif_pwrmgr_result_t dif_pwrmgr_wakeup_request_recording_set_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t new_state) {
20000cd8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:419
  if (pwrmgr == NULL) {
20000cda:	c911                	beqz	a0,20000cee <dif_pwrmgr_wakeup_request_recording_set_enabled+0x16>
toggle_to_bool():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:155
  switch (val) {
20000cdc:	c589                	beqz	a1,20000ce6 <dif_pwrmgr_wakeup_request_recording_set_enabled+0xe>
20000cde:	4685                	li	a3,1
20000ce0:	00d58463          	beq	a1,a3,20000ce8 <dif_pwrmgr_wakeup_request_recording_set_enabled+0x10>
20000ce4:	a029                	j	20000cee <dif_pwrmgr_wakeup_request_recording_set_enabled+0x16>
20000ce6:	86ae                	mv	a3,a1
dif_pwrmgr_wakeup_request_recording_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:433
  // Only a single bit of this register is significant, thus we don't perform a
  // read-modify-write. Setting this bit to 1 disables recording.
  uint32_t reg_val =
      bitfield_bit32_write(0, PWRMGR_WAKE_INFO_CAPTURE_DIS_VAL_BIT, !enable);

  mmio_region_write32(pwrmgr->params.base_addr,
20000ce8:	4108                	lw	a0,0(a0)
20000cea:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cec:	d954                	sw	a3,52(a0)
dif_pwrmgr_wakeup_request_recording_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:437
                      PWRMGR_WAKE_INFO_CAPTURE_DIS_REG_OFFSET, reg_val);

  return kDifPwrmgrOk;
}
20000cee:	8532                	mv	a0,a2
20000cf0:	8082                	ret

20000cf2 <dif_pwrmgr_wakeup_request_recording_get_enabled>:
dif_pwrmgr_wakeup_request_recording_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:440

dif_pwrmgr_result_t dif_pwrmgr_wakeup_request_recording_get_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t *cur_state) {
20000cf2:	862a                	mv	a2,a0
20000cf4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:441
  if (pwrmgr == NULL || cur_state == NULL) {
20000cf6:	c619                	beqz	a2,20000d04 <dif_pwrmgr_wakeup_request_recording_get_enabled+0x12>
20000cf8:	c591                	beqz	a1,20000d04 <dif_pwrmgr_wakeup_request_recording_get_enabled+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:445
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(
20000cfa:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cfc:	5950                	lw	a2,52(a0)
20000cfe:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d00:	8a05                	andi	a2,a2,1
dif_pwrmgr_wakeup_request_recording_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:448
      pwrmgr->params.base_addr, PWRMGR_WAKE_INFO_CAPTURE_DIS_REG_OFFSET);
  // Recording is disabled if this bit is set to 1.
  *cur_state = bool_to_toggle(
20000d02:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:452
      !bitfield_bit32_read(reg_val, PWRMGR_WAKE_INFO_CAPTURE_DIS_VAL_BIT));

  return kDifPwrmgrOk;
}
20000d04:	8082                	ret

20000d06 <dif_pwrmgr_wakeup_reason_get>:
dif_pwrmgr_wakeup_reason_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:455

dif_pwrmgr_result_t dif_pwrmgr_wakeup_reason_get(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_wakeup_reason_t *reason) {
20000d06:	1141                	addi	sp,sp,-16
20000d08:	862a                	mv	a2,a0
20000d0a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:456
  if (pwrmgr == NULL || reason == NULL) {
20000d0c:	ce05                	beqz	a2,20000d44 <dif_pwrmgr_wakeup_reason_get+0x3e>
20000d0e:	c99d                	beqz	a1,20000d44 <dif_pwrmgr_wakeup_reason_get+0x3e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:461
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val =
      mmio_region_read32(pwrmgr->params.base_addr, PWRMGR_WAKE_INFO_REG_OFFSET);
20000d10:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d12:	5d08                	lw	a0,56(a0)
dif_pwrmgr_wakeup_reason_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:464

  dif_pwrmgr_wakeup_types_t types = 0;
  if (bitfield_bit32_read(reg_val, PWRMGR_WAKE_INFO_FALL_THROUGH_BIT)) {
20000d14:	00455613          	srli	a2,a0,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:467
    types |= kDifPwrmgrWakeupTypeFallThrough;
  }
  if (bitfield_bit32_read(reg_val, PWRMGR_WAKE_INFO_ABORT_BIT)) {
20000d18:	8a19                	andi	a2,a2,6
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000d1a:	01f57693          	andi	a3,a0,31
dif_pwrmgr_wakeup_reason_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:473
    types |= kDifPwrmgrWakeupTypeAbort;
  }

  uint32_t request_sources = bitfield_field32_read(
      reg_val, request_reg_infos[kDifPwrmgrReqTypeWakeup].bitfield);
  if (request_sources != 0) {
20000d1e:	00d03533          	snez	a0,a3
20000d22:	8d51                	or	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:477
    types |= kDifPwrmgrWakeupTypeRequest;
  }

  *reason = (dif_pwrmgr_wakeup_reason_t){
20000d24:	00a58023          	sb	a0,0(a1)
20000d28:	00d10503          	lb	a0,13(sp)
20000d2c:	00a580a3          	sb	a0,1(a1)
20000d30:	00e10503          	lb	a0,14(sp)
20000d34:	00a58123          	sb	a0,2(a1)
20000d38:	00f10603          	lb	a2,15(sp)
20000d3c:	4501                	li	a0,0
20000d3e:	00c581a3          	sb	a2,3(a1)
20000d42:	c1d4                	sw	a3,4(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:483
      .types = types,
      .request_sources = request_sources,
  };

  return kDifPwrmgrOk;
}
20000d44:	0141                	addi	sp,sp,16
20000d46:	8082                	ret

20000d48 <dif_pwrmgr_wakeup_reason_clear>:
dif_pwrmgr_wakeup_reason_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:486

dif_pwrmgr_result_t dif_pwrmgr_wakeup_reason_clear(const dif_pwrmgr_t *pwrmgr) {
  if (pwrmgr == NULL) {
20000d48:	c511                	beqz	a0,20000d54 <dif_pwrmgr_wakeup_reason_clear+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:490
    return kDifPwrmgrBadArg;
  }

  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_WAKE_INFO_REG_OFFSET,
20000d4a:	410c                	lw	a1,0(a0)
20000d4c:	4501                	li	a0,0
20000d4e:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d50:	dd90                	sw	a2,56(a1)
dif_pwrmgr_wakeup_reason_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:494
                      UINT32_MAX);

  return kDifPwrmgrOk;
}
20000d52:	8082                	ret
20000d54:	4509                	li	a0,2
20000d56:	8082                	ret

20000d58 <dif_pwrmgr_irq_is_pending>:
dif_pwrmgr_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:498

dif_pwrmgr_result_t dif_pwrmgr_irq_is_pending(const dif_pwrmgr_t *pwrmgr,
                                              dif_pwrmgr_irq_t irq,
                                              bool *is_pending) {
20000d58:	86aa                	mv	a3,a0
20000d5a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:499
  if (pwrmgr == NULL || !is_valid_irq(irq) || is_pending == NULL) {
20000d5c:	ca89                	beqz	a3,20000d6e <dif_pwrmgr_irq_is_pending+0x16>
20000d5e:	e981                	bnez	a1,20000d6e <dif_pwrmgr_irq_is_pending+0x16>
20000d60:	c619                	beqz	a2,20000d6e <dif_pwrmgr_irq_is_pending+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:503
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000d62:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d64:	410c                	lw	a1,0(a0)
20000d66:	4501                	li	a0,0
dif_pwrmgr_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:505
                                        PWRMGR_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg_val, irq);
20000d68:	8985                	andi	a1,a1,1
20000d6a:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:508

  return kDifPwrmgrOk;
}
20000d6e:	8082                	ret

20000d70 <dif_pwrmgr_irq_acknowledge>:
dif_pwrmgr_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:511

dif_pwrmgr_result_t dif_pwrmgr_irq_acknowledge(const dif_pwrmgr_t *pwrmgr,
                                               dif_pwrmgr_irq_t irq) {
20000d70:	862a                	mv	a2,a0
20000d72:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:512
  if (pwrmgr == NULL || !is_valid_irq(irq)) {
20000d74:	c611                	beqz	a2,20000d80 <dif_pwrmgr_irq_acknowledge+0x10>
20000d76:	e589                	bnez	a1,20000d80 <dif_pwrmgr_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:517
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = bitfield_bit32_write(0, irq, true);
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_STATE_REG_OFFSET,
20000d78:	420c                	lw	a1,0(a2)
20000d7a:	4501                	li	a0,0
20000d7c:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d7e:	c190                	sw	a2,0(a1)
dif_pwrmgr_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:521
                      reg_val);

  return kDifPwrmgrOk;
}
20000d80:	8082                	ret

20000d82 <dif_pwrmgr_irq_get_enabled>:
dif_pwrmgr_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:525

dif_pwrmgr_result_t dif_pwrmgr_irq_get_enabled(const dif_pwrmgr_t *pwrmgr,
                                               dif_pwrmgr_irq_t irq,
                                               dif_pwrmgr_toggle_t *state) {
20000d82:	86aa                	mv	a3,a0
20000d84:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:526
  if (pwrmgr == NULL || !is_valid_irq(irq) || state == NULL) {
20000d86:	ca91                	beqz	a3,20000d9a <dif_pwrmgr_irq_get_enabled+0x18>
20000d88:	e989                	bnez	a1,20000d9a <dif_pwrmgr_irq_get_enabled+0x18>
20000d8a:	ca01                	beqz	a2,20000d9a <dif_pwrmgr_irq_get_enabled+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:530
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000d8c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d8e:	414c                	lw	a1,4(a0)
20000d90:	4501                	li	a0,0
20000d92:	fff5c593          	not	a1,a1
bool_to_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:172
  return val ? kDifPwrmgrToggleEnabled : kDifPwrmgrToggleDisabled;
20000d96:	8985                	andi	a1,a1,1
dif_pwrmgr_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:532
                                        PWRMGR_INTR_ENABLE_REG_OFFSET);
  *state = bool_to_toggle(bitfield_bit32_read(reg_val, irq));
20000d98:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:535

  return kDifPwrmgrOk;
}
20000d9a:	8082                	ret

20000d9c <dif_pwrmgr_irq_set_enabled>:
dif_pwrmgr_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:539

dif_pwrmgr_result_t dif_pwrmgr_irq_set_enabled(const dif_pwrmgr_t *pwrmgr,
                                               dif_pwrmgr_irq_t irq,
                                               dif_pwrmgr_toggle_t state) {
20000d9c:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:540
  if (pwrmgr == NULL || !is_valid_irq(irq)) {
20000d9e:	cd09                	beqz	a0,20000db8 <dif_pwrmgr_irq_set_enabled+0x1c>
20000da0:	ed81                	bnez	a1,20000db8 <dif_pwrmgr_irq_set_enabled+0x1c>
20000da2:	4585                	li	a1,1
toggle_to_bool():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:155
  switch (val) {
20000da4:	c601                	beqz	a2,20000dac <dif_pwrmgr_irq_set_enabled+0x10>
20000da6:	00b61963          	bne	a2,a1,20000db8 <dif_pwrmgr_irq_set_enabled+0x1c>
20000daa:	4581                	li	a1,0
dif_pwrmgr_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:549
  bool enable = false;
  if (!toggle_to_bool(state, &enable)) {
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000dac:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000dae:	4150                	lw	a2,4(a0)
20000db0:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000db2:	9a79                	andi	a2,a2,-2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000db4:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000db6:	c14c                	sw	a1,4(a0)
dif_pwrmgr_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:556
  reg_val = bitfield_bit32_write(reg_val, irq, enable);
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
                      reg_val);

  return kDifPwrmgrOk;
}
20000db8:	8536                	mv	a0,a3
20000dba:	8082                	ret

20000dbc <dif_pwrmgr_irq_force>:
dif_pwrmgr_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:559

dif_pwrmgr_result_t dif_pwrmgr_irq_force(const dif_pwrmgr_t *pwrmgr,
                                         dif_pwrmgr_irq_t irq) {
20000dbc:	862a                	mv	a2,a0
20000dbe:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:560
  if (pwrmgr == NULL || !is_valid_irq(irq)) {
20000dc0:	c611                	beqz	a2,20000dcc <dif_pwrmgr_irq_force+0x10>
20000dc2:	e589                	bnez	a1,20000dcc <dif_pwrmgr_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:565
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = bitfield_bit32_write(0, irq, true);
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_TEST_REG_OFFSET,
20000dc4:	420c                	lw	a1,0(a2)
20000dc6:	4501                	li	a0,0
20000dc8:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dca:	c590                	sw	a2,8(a1)
dif_pwrmgr_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:569
                      reg_val);

  return kDifPwrmgrOk;
}
20000dcc:	8082                	ret

20000dce <dif_pwrmgr_irq_disable_all>:
dif_pwrmgr_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:573

dif_pwrmgr_result_t dif_pwrmgr_irq_disable_all(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_irq_snapshot_t *snapshot) {
  if (pwrmgr == NULL) {
20000dce:	c911                	beqz	a0,20000de2 <dif_pwrmgr_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:577
    return kDifPwrmgrBadArg;
  }

  if (snapshot != NULL) {
20000dd0:	c581                	beqz	a1,20000dd8 <dif_pwrmgr_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:578
    *snapshot = mmio_region_read32(pwrmgr->params.base_addr,
20000dd2:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dd4:	4250                	lw	a2,4(a2)
dif_pwrmgr_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:578
20000dd6:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:581
                                   PWRMGR_INTR_ENABLE_REG_OFFSET);
  }
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
20000dd8:	410c                	lw	a1,0(a0)
20000dda:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ddc:	0005a223          	sw	zero,4(a1)
dif_pwrmgr_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:585
                      0);

  return kDifPwrmgrOk;
}
20000de0:	8082                	ret
20000de2:	4509                	li	a0,2
20000de4:	8082                	ret

20000de6 <dif_pwrmgr_irq_restore_all>:
dif_pwrmgr_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:588

dif_pwrmgr_result_t dif_pwrmgr_irq_restore_all(
    const dif_pwrmgr_t *pwrmgr, const dif_pwrmgr_irq_snapshot_t *snapshot) {
20000de6:	862a                	mv	a2,a0
20000de8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:589
  if (pwrmgr == NULL || snapshot == NULL) {
20000dea:	c611                	beqz	a2,20000df6 <dif_pwrmgr_irq_restore_all+0x10>
20000dec:	c589                	beqz	a1,20000df6 <dif_pwrmgr_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:594
    return kDifPwrmgrBadArg;
  }

  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000dee:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:593
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
20000df0:	4210                	lw	a2,0(a2)
20000df2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000df4:	c24c                	sw	a1,4(a2)
dif_pwrmgr_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:596
  return kDifPwrmgrOk;
}
20000df6:	8082                	ret

20000df8 <dif_aon_timer_init>:
dif_aon_timer_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:86
  return true;
}

dif_aon_timer_result_t dif_aon_timer_init(dif_aon_timer_params_t params,
                                          dif_aon_timer_t *aon) {
  if (aon == NULL) {
20000df8:	c581                	beqz	a1,20000e00 <dif_aon_timer_init+0x8>
20000dfa:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:90
    return kDifAonTimerBadArg;
  }

  *aon = (dif_aon_timer_t){.params = params};
20000dfc:	c188                	sw	a0,0(a1)
20000dfe:	a011                	j	20000e02 <dif_aon_timer_init+0xa>
20000e00:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:93

  return kDifAonTimerOk;
}
20000e02:	8532                	mv	a0,a2
20000e04:	8082                	ret

20000e06 <dif_aon_timer_wakeup_start>:
dif_aon_timer_wakeup_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:97

dif_aon_timer_result_t dif_aon_timer_wakeup_start(const dif_aon_timer_t *aon,
                                                  uint32_t threshold,
                                                  uint32_t prescaler) {
20000e06:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:98
  if (aon == NULL || prescaler > AON_TIMER_WKUP_CTRL_PRESCALER_MASK) {
20000e08:	c51d                	beqz	a0,20000e36 <dif_aon_timer_wakeup_start+0x30>
20000e0a:	00c65713          	srli	a4,a2,0xc
20000e0e:	e705                	bnez	a4,20000e36 <dif_aon_timer_wakeup_start+0x30>
aon_timer_wakeup_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:35
      mmio_region_read32(aon->params.base_addr, AON_TIMER_WKUP_CTRL_REG_OFFSET);
20000e10:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e12:	4298                	lw	a4,0(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e14:	9b79                	andi	a4,a4,-2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e16:	c298                	sw	a4,0(a3)
aon_timer_wakeup_clear_counter():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:29
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WKUP_COUNT_REG_OFFSET,
20000e18:	4114                	lw	a3,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e1a:	0006a423          	sw	zero,8(a3)
dif_aon_timer_wakeup_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:106

  // The timer should be stopped first, otherwise it will continue counting up.
  aon_timer_wakeup_toggle(aon, false);
  aon_timer_wakeup_clear_counter(aon);

  mmio_region_write32(aon->params.base_addr, AON_TIMER_WKUP_THOLD_REG_OFFSET,
20000e1e:	4118                	lw	a4,0(a0)
20000e20:	4681                	li	a3,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e22:	c34c                	sw	a1,4(a4)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e24:	00161593          	slli	a1,a2,0x1
20000e28:	6609                	lui	a2,0x2
dif_aon_timer_wakeup_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:112
                      threshold);

  uint32_t reg =
      bitfield_field32_write(0, AON_TIMER_WKUP_CTRL_PRESCALER_FIELD, prescaler);
  reg = bitfield_bit32_write(reg, AON_TIMER_WKUP_CTRL_ENABLE_BIT, true);
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WKUP_CTRL_REG_OFFSET,
20000e2a:	4108                	lw	a0,0(a0)
20000e2c:	1679                	addi	a2,a2,-2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e2e:	8df1                	and	a1,a1,a2
20000e30:	0015e593          	ori	a1,a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e34:	c10c                	sw	a1,0(a0)
dif_aon_timer_wakeup_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:116
                      reg);

  return kDifAonTimerOk;
}
20000e36:	8536                	mv	a0,a3
20000e38:	8082                	ret

20000e3a <dif_aon_timer_wakeup_stop>:
dif_aon_timer_wakeup_stop():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:119

dif_aon_timer_result_t dif_aon_timer_wakeup_stop(const dif_aon_timer_t *aon) {
  if (aon == NULL) {
20000e3a:	c519                	beqz	a0,20000e48 <dif_aon_timer_wakeup_stop+0xe>
aon_timer_wakeup_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:35
      mmio_region_read32(aon->params.base_addr, AON_TIMER_WKUP_CTRL_REG_OFFSET);
20000e3c:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e3e:	4190                	lw	a2,0(a1)
20000e40:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e42:	9a79                	andi	a2,a2,-2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e44:	c190                	sw	a2,0(a1)
dif_aon_timer_wakeup_stop():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:126
  }

  aon_timer_wakeup_toggle(aon, false);

  return kDifAonTimerOk;
}
20000e46:	8082                	ret
20000e48:	4509                	li	a0,2
20000e4a:	8082                	ret

20000e4c <dif_aon_timer_wakeup_restart>:
dif_aon_timer_wakeup_restart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:130

dif_aon_timer_result_t dif_aon_timer_wakeup_restart(
    const dif_aon_timer_t *aon) {
  if (aon == NULL) {
20000e4c:	c919                	beqz	a0,20000e62 <dif_aon_timer_wakeup_restart+0x16>
aon_timer_wakeup_clear_counter():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:29
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WKUP_COUNT_REG_OFFSET,
20000e4e:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e50:	0005a423          	sw	zero,8(a1)
aon_timer_wakeup_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:35
      mmio_region_read32(aon->params.base_addr, AON_TIMER_WKUP_CTRL_REG_OFFSET);
20000e54:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e56:	4190                	lw	a2,0(a1)
20000e58:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e5a:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e5e:	c190                	sw	a2,0(a1)
dif_aon_timer_wakeup_restart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:138

  aon_timer_wakeup_clear_counter(aon);
  aon_timer_wakeup_toggle(aon, true);

  return kDifAonTimerOk;
}
20000e60:	8082                	ret
20000e62:	4509                	li	a0,2
20000e64:	8082                	ret

20000e66 <dif_aon_timer_wakeup_get_count>:
dif_aon_timer_wakeup_get_count():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:141

dif_aon_timer_result_t dif_aon_timer_wakeup_get_count(
    const dif_aon_timer_t *aon, uint32_t *count) {
20000e66:	862a                	mv	a2,a0
20000e68:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:142
  if (aon == NULL || count == NULL) {
20000e6a:	c611                	beqz	a2,20000e76 <dif_aon_timer_wakeup_get_count+0x10>
20000e6c:	c589                	beqz	a1,20000e76 <dif_aon_timer_wakeup_get_count+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:146
    return kDifAonTimerBadArg;
  }

  *count = mmio_region_read32(aon->params.base_addr,
20000e6e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e70:	4510                	lw	a2,8(a0)
20000e72:	4501                	li	a0,0
dif_aon_timer_wakeup_get_count():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:146
20000e74:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:150
                              AON_TIMER_WKUP_COUNT_REG_OFFSET);

  return kDifAonTimerOk;
}
20000e76:	8082                	ret

20000e78 <dif_aon_timer_watchdog_start>:
dif_aon_timer_watchdog_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:155

dif_aon_timer_watchdog_result_t dif_aon_timer_watchdog_start(
    const dif_aon_timer_t *aon, uint32_t bark_threshold,
    uint32_t bite_threshold, bool pause_in_sleep, bool lock) {
  if (aon == NULL) {
20000e78:	c131                	beqz	a0,20000ebc <dif_aon_timer_watchdog_start+0x44>
aon_timer_watchdog_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:62
  uint32_t reg = mmio_region_read32(aon->params.base_addr,
20000e7a:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e7e:	00c82783          	lw	a5,12(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000e82:	0017f893          	andi	a7,a5,1
20000e86:	478d                	li	a5,3
dif_aon_timer_watchdog_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:159
    return kDifAonTimerWatchdogBadArg;
  }

  if (aon_timer_watchdog_is_locked(aon)) {
20000e88:	02088b63          	beqz	a7,20000ebe <dif_aon_timer_watchdog_start+0x46>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e8c:	01082783          	lw	a5,16(a6)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e90:	9bf9                	andi	a5,a5,-2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e92:	00f82823          	sw	a5,16(a6)
aon_timer_watchdog_clear_counter():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:42
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WDOG_COUNT_REG_OFFSET,
20000e96:	411c                	lw	a5,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e98:	0007ae23          	sw	zero,28(a5)
dif_aon_timer_watchdog_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:167

  // The timer should be stopped first, otherwise it will continue counting up.
  aon_timer_watchdog_toggle(aon, false);
  aon_timer_watchdog_clear_counter(aon);

  mmio_region_write32(aon->params.base_addr,
20000e9c:	411c                	lw	a5,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e9e:	cbcc                	sw	a1,20(a5)
dif_aon_timer_watchdog_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:169
                      AON_TIMER_WDOG_BARK_THOLD_REG_OFFSET, bark_threshold);
  mmio_region_write32(aon->params.base_addr,
20000ea0:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ea2:	cd90                	sw	a2,24(a1)
20000ea4:	458d                	li	a1,3
dif_aon_timer_watchdog_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:173
                      AON_TIMER_WDOG_BITE_THOLD_REG_OFFSET, bite_threshold);

  uint32_t reg = bitfield_bit32_write(0, AON_TIMER_WDOG_CTRL_ENABLE_BIT, true);
  if (pause_in_sleep) {
20000ea6:	e291                	bnez	a3,20000eaa <dif_aon_timer_watchdog_start+0x32>
20000ea8:	4585                	li	a1,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:177
    reg =
        bitfield_bit32_write(reg, AON_TIMER_WDOG_CTRL_PAUSE_IN_SLEEP_BIT, true);
  }
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WDOG_CTRL_REG_OFFSET,
20000eaa:	4110                	lw	a2,0(a0)
20000eac:	4781                	li	a5,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000eae:	ca0c                	sw	a1,16(a2)
dif_aon_timer_watchdog_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:182
                      reg);

  // Watchdog control register should only be locked after the last
  // control register access.
  if (lock) {
20000eb0:	c719                	beqz	a4,20000ebe <dif_aon_timer_watchdog_start+0x46>
aon_timer_watchdog_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:57
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WDOG_REGWEN_REG_OFFSET,
20000eb2:	4108                	lw	a0,0(a0)
20000eb4:	4781                	li	a5,0
20000eb6:	4585                	li	a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000eb8:	c54c                	sw	a1,12(a0)
20000eba:	a011                	j	20000ebe <dif_aon_timer_watchdog_start+0x46>
20000ebc:	4789                	li	a5,2
dif_aon_timer_watchdog_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:187
    aon_timer_watchdog_lock(aon);
  }

  return kDifAonTimerWatchdogOk;
}
20000ebe:	853e                	mv	a0,a5
20000ec0:	8082                	ret

20000ec2 <dif_aon_timer_watchdog_stop>:
dif_aon_timer_watchdog_stop():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:191

dif_aon_timer_watchdog_result_t dif_aon_timer_watchdog_stop(
    const dif_aon_timer_t *aon) {
  if (aon == NULL) {
20000ec2:	cd01                	beqz	a0,20000eda <dif_aon_timer_watchdog_stop+0x18>
aon_timer_watchdog_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:62
  uint32_t reg = mmio_region_read32(aon->params.base_addr,
20000ec4:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ec6:	45c8                	lw	a0,12(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000ec8:	00157613          	andi	a2,a0,1
20000ecc:	450d                	li	a0,3
dif_aon_timer_watchdog_stop():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:195
    return kDifAonTimerWatchdogBadArg;
  }

  if (aon_timer_watchdog_is_locked(aon)) {
20000ece:	c609                	beqz	a2,20000ed8 <dif_aon_timer_watchdog_stop+0x16>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ed0:	4990                	lw	a2,16(a1)
20000ed2:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000ed4:	9a79                	andi	a2,a2,-2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ed6:	c990                	sw	a2,16(a1)
dif_aon_timer_watchdog_stop():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:202
  }

  aon_timer_watchdog_toggle(aon, false);

  return kDifAonTimerWatchdogOk;
}
20000ed8:	8082                	ret
20000eda:	4509                	li	a0,2
20000edc:	8082                	ret

20000ede <dif_aon_timer_watchdog_restart>:
dif_aon_timer_watchdog_restart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:206

dif_aon_timer_watchdog_result_t dif_aon_timer_watchdog_restart(
    const dif_aon_timer_t *aon) {
  if (aon == NULL) {
20000ede:	c105                	beqz	a0,20000efe <dif_aon_timer_watchdog_restart+0x20>
aon_timer_watchdog_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:62
  uint32_t reg = mmio_region_read32(aon->params.base_addr,
20000ee0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ee2:	464c                	lw	a1,12(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000ee4:	0015f693          	andi	a3,a1,1
20000ee8:	458d                	li	a1,3
dif_aon_timer_watchdog_restart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:210
    return kDifAonTimerWatchdogBadArg;
  }

  if (aon_timer_watchdog_is_locked(aon)) {
20000eea:	ca99                	beqz	a3,20000f00 <dif_aon_timer_watchdog_restart+0x22>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000eec:	00062e23          	sw	zero,28(a2) # 201c <_stack_size+0x1c>
aon_timer_watchdog_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:48
      mmio_region_read32(aon->params.base_addr, AON_TIMER_WDOG_CTRL_REG_OFFSET);
20000ef0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ef2:	4910                	lw	a2,16(a0)
20000ef4:	4581                	li	a1,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000ef6:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000efa:	c910                	sw	a2,16(a0)
20000efc:	a011                	j	20000f00 <dif_aon_timer_watchdog_restart+0x22>
20000efe:	4589                	li	a1,2
dif_aon_timer_watchdog_restart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:218

  aon_timer_watchdog_clear_counter(aon);
  aon_timer_watchdog_toggle(aon, true);

  return kDifAonTimerWatchdogOk;
}
20000f00:	852e                	mv	a0,a1
20000f02:	8082                	ret

20000f04 <dif_aon_timer_watchdog_get_count>:
dif_aon_timer_watchdog_get_count():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:221

dif_aon_timer_result_t dif_aon_timer_watchdog_get_count(
    const dif_aon_timer_t *aon, uint32_t *count) {
20000f04:	862a                	mv	a2,a0
20000f06:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:222
  if (aon == NULL || count == NULL) {
20000f08:	c611                	beqz	a2,20000f14 <dif_aon_timer_watchdog_get_count+0x10>
20000f0a:	c589                	beqz	a1,20000f14 <dif_aon_timer_watchdog_get_count+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:226
    return kDifAonTimerBadArg;
  }

  *count = mmio_region_read32(aon->params.base_addr,
20000f0c:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f0e:	4d50                	lw	a2,28(a0)
20000f10:	4501                	li	a0,0
dif_aon_timer_watchdog_get_count():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:226
20000f12:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:230
                              AON_TIMER_WDOG_COUNT_REG_OFFSET);

  return kDifAonTimerOk;
}
20000f14:	8082                	ret

20000f16 <dif_aon_timer_watchdog_pet>:
dif_aon_timer_watchdog_pet():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:233

dif_aon_timer_result_t dif_aon_timer_watchdog_pet(const dif_aon_timer_t *aon) {
  if (aon == NULL) {
20000f16:	c511                	beqz	a0,20000f22 <dif_aon_timer_watchdog_pet+0xc>
aon_timer_watchdog_clear_counter():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:42
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WDOG_COUNT_REG_OFFSET,
20000f18:	410c                	lw	a1,0(a0)
20000f1a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f1c:	0005ae23          	sw	zero,28(a1)
dif_aon_timer_watchdog_pet():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:240
  }

  aon_timer_watchdog_clear_counter(aon);

  return kDifAonTimerOk;
}
20000f20:	8082                	ret
20000f22:	4509                	li	a0,2
20000f24:	8082                	ret

20000f26 <dif_aon_timer_watchdog_lock>:
dif_aon_timer_watchdog_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:244

dif_aon_timer_watchdog_result_t dif_aon_timer_watchdog_lock(
    const dif_aon_timer_t *aon) {
  if (aon == NULL) {
20000f26:	c511                	beqz	a0,20000f32 <dif_aon_timer_watchdog_lock+0xc>
aon_timer_watchdog_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:57
  mmio_region_write32(aon->params.base_addr, AON_TIMER_WDOG_REGWEN_REG_OFFSET,
20000f28:	410c                	lw	a1,0(a0)
20000f2a:	4501                	li	a0,0
20000f2c:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f2e:	c5d0                	sw	a2,12(a1)
dif_aon_timer_watchdog_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:251
  }

  aon_timer_watchdog_lock(aon);

  return kDifAonTimerWatchdogOk;
}
20000f30:	8082                	ret
20000f32:	4509                	li	a0,2
20000f34:	8082                	ret

20000f36 <dif_aon_timer_watchdog_is_locked>:
dif_aon_timer_watchdog_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:254

dif_aon_timer_result_t dif_aon_timer_watchdog_is_locked(
    const dif_aon_timer_t *aon, bool *is_locked) {
20000f36:	862a                	mv	a2,a0
20000f38:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:255
  if (aon == NULL || is_locked == NULL) {
20000f3a:	ca11                	beqz	a2,20000f4e <dif_aon_timer_watchdog_is_locked+0x18>
20000f3c:	c989                	beqz	a1,20000f4e <dif_aon_timer_watchdog_is_locked+0x18>
aon_timer_watchdog_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:62
  uint32_t reg = mmio_region_read32(aon->params.base_addr,
20000f3e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f40:	4550                	lw	a2,12(a0)
20000f42:	4501                	li	a0,0
dif_aon_timer_watchdog_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:259
    return kDifAonTimerBadArg;
  }

  *is_locked = aon_timer_watchdog_is_locked(aon);
20000f44:	fff64613          	not	a2,a2
20000f48:	8a05                	andi	a2,a2,1
20000f4a:	00c58023          	sb	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:262

  return kDifAonTimerOk;
}
20000f4e:	8082                	ret

20000f50 <dif_aon_timer_irq_is_pending>:
dif_aon_timer_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:266

dif_aon_timer_result_t dif_aon_timer_irq_is_pending(const dif_aon_timer_t *aon,
                                                    dif_aon_timer_irq_t irq,
                                                    bool *is_pending) {
20000f50:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:267
  if (aon == NULL || is_pending == NULL) {
20000f52:	c10d                	beqz	a0,20000f74 <dif_aon_timer_irq_is_pending+0x24>
20000f54:	c205                	beqz	a2,20000f74 <dif_aon_timer_irq_is_pending+0x24>
aon_timer_get_irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:70
  switch (irq) {
20000f56:	c591                	beqz	a1,20000f62 <dif_aon_timer_irq_is_pending+0x12>
20000f58:	4705                	li	a4,1
20000f5a:	4685                	li	a3,1
20000f5c:	00e58463          	beq	a1,a4,20000f64 <dif_aon_timer_irq_is_pending+0x14>
20000f60:	a811                	j	20000f74 <dif_aon_timer_irq_is_pending+0x24>
20000f62:	872e                	mv	a4,a1
dif_aon_timer_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:276
  uint32_t index = 0;
  if (!aon_timer_get_irq_index(irq, &index)) {
    return kDifAonTimerError;
  }

  uint32_t reg = mmio_region_read32(aon->params.base_addr,
20000f64:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f66:	5108                	lw	a0,32(a0)
20000f68:	4681                	li	a3,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000f6a:	00e55533          	srl	a0,a0,a4
20000f6e:	8905                	andi	a0,a0,1
dif_aon_timer_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:278
                                    AON_TIMER_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg, index);
20000f70:	00a60023          	sb	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:281

  return kDifAonTimerOk;
}
20000f74:	8536                	mv	a0,a3
20000f76:	8082                	ret

20000f78 <dif_aon_timer_irq_acknowledge>:
dif_aon_timer_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:285

dif_aon_timer_result_t dif_aon_timer_irq_acknowledge(const dif_aon_timer_t *aon,
                                                     dif_aon_timer_irq_t irq) {
  if (aon == NULL) {
20000f78:	c519                	beqz	a0,20000f86 <dif_aon_timer_irq_acknowledge+0xe>
aon_timer_get_irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:70
  switch (irq) {
20000f7a:	c981                	beqz	a1,20000f8a <dif_aon_timer_irq_acknowledge+0x12>
20000f7c:	4685                	li	a3,1
20000f7e:	4605                	li	a2,1
20000f80:	00d58663          	beq	a1,a3,20000f8c <dif_aon_timer_irq_acknowledge+0x14>
20000f84:	a811                	j	20000f98 <dif_aon_timer_irq_acknowledge+0x20>
20000f86:	4609                	li	a2,2
20000f88:	a801                	j	20000f98 <dif_aon_timer_irq_acknowledge+0x20>
20000f8a:	86ae                	mv	a3,a1
dif_aon_timer_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:296
    return kDifAonTimerError;
  }

  // Write one to clear.
  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(aon->params.base_addr, AON_TIMER_INTR_STATE_REG_OFFSET,
20000f8c:	4108                	lw	a0,0(a0)
20000f8e:	4601                	li	a2,0
20000f90:	4585                	li	a1,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000f92:	00d595b3          	sll	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f96:	d10c                	sw	a1,32(a0)
dif_aon_timer_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:300
                      reg);

  return kDifAonTimerOk;
}
20000f98:	8532                	mv	a0,a2
20000f9a:	8082                	ret

20000f9c <dif_aon_timer_irq_force>:
dif_aon_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:304

dif_aon_timer_result_t dif_aon_timer_irq_force(const dif_aon_timer_t *aon,
                                               dif_aon_timer_irq_t irq) {
  if (aon == NULL) {
20000f9c:	c519                	beqz	a0,20000faa <dif_aon_timer_irq_force+0xe>
aon_timer_get_irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:70
  switch (irq) {
20000f9e:	c981                	beqz	a1,20000fae <dif_aon_timer_irq_force+0x12>
20000fa0:	4685                	li	a3,1
20000fa2:	4605                	li	a2,1
20000fa4:	00d58663          	beq	a1,a3,20000fb0 <dif_aon_timer_irq_force+0x14>
20000fa8:	a811                	j	20000fbc <dif_aon_timer_irq_force+0x20>
20000faa:	4609                	li	a2,2
20000fac:	a801                	j	20000fbc <dif_aon_timer_irq_force+0x20>
20000fae:	86ae                	mv	a3,a1
dif_aon_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:315
    return kDifAonTimerError;
  }

  // Write only register.
  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(aon->params.base_addr, AON_TIMER_INTR_TEST_REG_OFFSET,
20000fb0:	4108                	lw	a0,0(a0)
20000fb2:	4601                	li	a2,0
20000fb4:	4585                	li	a1,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000fb6:	00d595b3          	sll	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fba:	d14c                	sw	a1,36(a0)
dif_aon_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aon_timer.c:319
                      reg);

  return kDifAonTimerOk;
}
20000fbc:	8532                	mv	a0,a2
20000fbe:	8082                	ret

20000fc0 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000fc0:	7139                	addi	sp,sp,-64
20000fc2:	ce06                	sw	ra,28(sp)
20000fc4:	cc22                	sw	s0,24(sp)
20000fc6:	ca26                	sw	s1,20(sp)
20000fc8:	c84a                	sw	s2,16(sp)
20000fca:	892a                	mv	s2,a0
20000fcc:	de46                	sw	a7,60(sp)
20000fce:	dc42                	sw	a6,56(sp)
20000fd0:	da3e                	sw	a5,52(sp)
20000fd2:	d83a                	sw	a4,48(sp)
20000fd4:	d636                	sw	a3,44(sp)
20000fd6:	d432                	sw	a2,40(sp)
20000fd8:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000fda:	4144                	lw	s1,4(a0)
20000fdc:	80000537          	lui	a0,0x80000
20000fe0:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd8e7>
20000fe4:	8526                	mv	a0,s1
20000fe6:	4581                	li	a1,0
20000fe8:	f0cff0ef          	jal	ra,200006f4 <memchr>
20000fec:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20000ff0:	02f00593          	li	a1,47
20000ff4:	8526                	mv	a0,s1
20000ff6:	f16ff0ef          	jal	ra,2000070c <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000ffa:	00092583          	lw	a1,0(s2)
20000ffe:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001000:	00b66b63          	bltu	a2,a1,20001016 <base_log_internal_core+0x56>
20001004:	058a                	slli	a1,a1,0x2
20001006:	00001617          	auipc	a2,0x1
2000100a:	ee260613          	addi	a2,a2,-286 # 20001ee8 <kAonTimerWatchdogIrqIndex+0x4>
2000100e:	95b2                	add	a1,a1,a2
20001010:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20001012:	e519                	bnez	a0,20001020 <base_log_internal_core+0x60>
20001014:	a801                	j	20001024 <base_log_internal_core+0x64>
20001016:	00001597          	auipc	a1,0x1
2000101a:	6f858593          	addi	a1,a1,1784 # 2000270e <__clz_tab+0x7c6>
2000101e:	c119                	beqz	a0,20001024 <base_log_internal_core+0x64>
20001020:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20001024:	effff417          	auipc	s0,0xeffff
20001028:	fe840413          	addi	s0,s0,-24 # 1000000c <base_log_internal_core.global_log_counter>
2000102c:	00045603          	lhu	a2,0(s0)
20001030:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001034:	00001517          	auipc	a0,0x1
20001038:	6c150513          	addi	a0,a0,1729 # 200026f5 <__clz_tab+0x7ad>
2000103c:	86a6                	mv	a3,s1
2000103e:	28d1                	jal	20001112 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001040:	00041503          	lh	a0,0(s0)
20001044:	0505                	addi	a0,a0,1
20001046:	00a41023          	sh	a0,0(s0)
2000104a:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
2000104c:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
2000104e:	01092503          	lw	a0,16(s2)
20001052:	28c5                	jal	20001142 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001054:	00001517          	auipc	a0,0x1
20001058:	6af50513          	addi	a0,a0,1711 # 20002703 <__clz_tab+0x7bb>
2000105c:	285d                	jal	20001112 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
2000105e:	4942                	lw	s2,16(sp)
20001060:	44d2                	lw	s1,20(sp)
20001062:	4462                	lw	s0,24(sp)
20001064:	40f2                	lw	ra,28(sp)
20001066:	6121                	addi	sp,sp,64
20001068:	8082                	ret

2000106a <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
2000106a:	1101                	addi	sp,sp,-32
2000106c:	ce46                	sw	a7,28(sp)
2000106e:	cc42                	sw	a6,24(sp)
20001070:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20001072:	00001797          	auipc	a5,0x1
20001076:	d1e78793          	addi	a5,a5,-738 # 20001d90 <kDeviceLogBypassUartAddress>
2000107a:	439c                	lw	a5,0(a5)
2000107c:	c83a                	sw	a4,16(sp)
2000107e:	c636                	sw	a3,12(sp)
20001080:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001082:	c388                	sw	a0,0(a5)
20001084:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20001086:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001088:	c989                	beqz	a1,2000109a <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
2000108a:	4512                	lw	a0,4(sp)
2000108c:	00450613          	addi	a2,a0,4
20001090:	c232                	sw	a2,4(sp)
20001092:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001094:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001096:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001098:	f9ed                	bnez	a1,2000108a <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
2000109a:	6105                	addi	sp,sp,32
2000109c:	8082                	ret
	...

200010a0 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
200010a0:	e589                	bnez	a1,200010aa <base_set_stdout+0xa>
200010a2:	00000597          	auipc	a1,0x0
200010a6:	01658593          	addi	a1,a1,22 # 200010b8 <base_dev_null>
200010aa:	effff617          	auipc	a2,0xeffff
200010ae:	f5660613          	addi	a2,a2,-170 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
200010b2:	c208                	sw	a0,0(a2)
200010b4:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200010b6:	8082                	ret

200010b8 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
200010b8:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
200010ba:	8082                	ret

200010bc <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
200010bc:	effff597          	auipc	a1,0xeffff
200010c0:	f4458593          	addi	a1,a1,-188 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
200010c4:	c188                	sw	a0,0(a1)
200010c6:	00000517          	auipc	a0,0x0
200010ca:	00c50513          	addi	a0,a0,12 # 200010d2 <base_dev_uart>
200010ce:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
200010d0:	8082                	ret

200010d2 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
200010d2:	1101                	addi	sp,sp,-32
200010d4:	ce06                	sw	ra,28(sp)
200010d6:	cc22                	sw	s0,24(sp)
200010d8:	ca26                	sw	s1,20(sp)
200010da:	c84a                	sw	s2,16(sp)
200010dc:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200010de:	c20d                	beqz	a2,20001100 <base_dev_uart+0x2e>
200010e0:	8432                	mv	s0,a2
200010e2:	892e                	mv	s2,a1
200010e4:	89aa                	mv	s3,a0
200010e6:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
200010e8:	00990533          	add	a0,s2,s1
200010ec:	00054583          	lbu	a1,0(a0)
200010f0:	854e                	mv	a0,s3
200010f2:	2f11                	jal	20001806 <dif_uart_byte_send_polled>
200010f4:	e519                	bnez	a0,20001102 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200010f6:	0485                	addi	s1,s1,1
200010f8:	fe9418e3          	bne	s0,s1,200010e8 <base_dev_uart+0x16>
200010fc:	84a2                	mv	s1,s0
200010fe:	a011                	j	20001102 <base_dev_uart+0x30>
20001100:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20001102:	8526                	mv	a0,s1
20001104:	49b2                	lw	s3,12(sp)
20001106:	4942                	lw	s2,16(sp)
20001108:	44d2                	lw	s1,20(sp)
2000110a:	4462                	lw	s0,24(sp)
2000110c:	40f2                	lw	ra,28(sp)
2000110e:	6105                	addi	sp,sp,32
20001110:	8082                	ret

20001112 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20001112:	7179                	addi	sp,sp,-48
20001114:	c606                	sw	ra,12(sp)
20001116:	d646                	sw	a7,44(sp)
20001118:	d442                	sw	a6,40(sp)
2000111a:	d23e                	sw	a5,36(sp)
2000111c:	d03a                	sw	a4,32(sp)
2000111e:	ce36                	sw	a3,28(sp)
20001120:	cc32                	sw	a2,24(sp)
20001122:	ca2e                	sw	a1,20(sp)
20001124:	effff597          	auipc	a1,0xeffff
20001128:	edc58593          	addi	a1,a1,-292 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
2000112c:	4190                	lw	a2,0(a1)
2000112e:	41cc                	lw	a1,4(a1)
20001130:	872a                	mv	a4,a0
20001132:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20001134:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001136:	8532                	mv	a0,a2
20001138:	863a                	mv	a2,a4
2000113a:	200d                	jal	2000115c <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
2000113c:	40b2                	lw	ra,12(sp)
2000113e:	6145                	addi	sp,sp,48
20001140:	8082                	ret

20001142 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20001142:	effff697          	auipc	a3,0xeffff
20001146:	ebe68693          	addi	a3,a3,-322 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000114a:	4290                	lw	a2,0(a3)
2000114c:	42d4                	lw	a3,4(a3)
2000114e:	872e                	mv	a4,a1
20001150:	87aa                	mv	a5,a0
20001152:	8532                	mv	a0,a2
20001154:	85b6                	mv	a1,a3
20001156:	863e                	mv	a2,a5
20001158:	86ba                	mv	a3,a4
2000115a:	a009                	j	2000115c <base_vfprintf>

2000115c <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
2000115c:	7139                	addi	sp,sp,-64
2000115e:	de06                	sw	ra,60(sp)
20001160:	dc22                	sw	s0,56(sp)
20001162:	da26                	sw	s1,52(sp)
20001164:	d84a                	sw	s2,48(sp)
20001166:	d64e                	sw	s3,44(sp)
20001168:	d452                	sw	s4,40(sp)
2000116a:	d256                	sw	s5,36(sp)
2000116c:	d05a                	sw	s6,32(sp)
2000116e:	ce5e                	sw	s7,28(sp)
20001170:	cc62                	sw	s8,24(sp)
20001172:	ca66                	sw	s9,20(sp)
20001174:	c86a                	sw	s10,16(sp)
20001176:	c66e                	sw	s11,12(sp)
20001178:	8bb2                	mv	s7,a2
2000117a:	892a                	mv	s2,a0
2000117c:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
2000117e:	c199                	beqz	a1,20001184 <base_vfprintf+0x28>
20001180:	89ae                	mv	s3,a1
20001182:	a029                	j	2000118c <base_vfprintf+0x30>
20001184:	00000997          	auipc	s3,0x0
20001188:	f3498993          	addi	s3,s3,-204 # 200010b8 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
2000118c:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
2000118e:	000bc503          	lbu	a0,0(s7)
20001192:	28050f63          	beqz	a0,20001430 <base_vfprintf+0x2d4>
20001196:	4b01                	li	s6,0
20001198:	02500c13          	li	s8,37
2000119c:	4ca5                	li	s9,9
2000119e:	02000d13          	li	s10,32
200011a2:	06800d93          	li	s11,104
200011a6:	00001a17          	auipc	s4,0x1
200011aa:	56aa0a13          	addi	s4,s4,1386 # 20002710 <__clz_tab+0x7c8>
200011ae:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200011b0:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200011b2:	0ff57413          	andi	s0,a0,255
200011b6:	01840963          	beq	s0,s8,200011c8 <base_vfprintf+0x6c>
200011ba:	c419                	beqz	s0,200011c8 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200011bc:	009b8533          	add	a0,s7,s1
200011c0:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200011c4:	0485                	addi	s1,s1,1
200011c6:	b7f5                	j	200011b2 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200011c8:	c491                	beqz	s1,200011d4 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200011ca:	854a                	mv	a0,s2
200011cc:	85de                	mv	a1,s7
200011ce:	8626                	mv	a2,s1
200011d0:	9982                	jalr	s3
200011d2:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
200011d4:	24040f63          	beqz	s0,20001432 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200011d8:	009b8633          	add	a2,s7,s1
200011dc:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200011e0:	22050f63          	beqz	a0,2000141e <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200011e4:	fd050593          	addi	a1,a0,-48
200011e8:	0ff5f593          	andi	a1,a1,255
200011ec:	00bcf863          	bgeu	s9,a1,200011fc <base_vfprintf+0xa0>
200011f0:	4401                	li	s0,0
200011f2:	4581                	li	a1,0
200011f4:	4605                	li	a2,1
200011f6:	028d7f63          	bgeu	s10,s0,20001234 <base_vfprintf+0xd8>
200011fa:	aca1                	j	20001452 <base_vfprintf+0x2f6>
200011fc:	4581                	li	a1,0
200011fe:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001200:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001202:	00b606b3          	add	a3,a2,a1
20001206:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000120a:	20068a63          	beqz	a3,2000141e <base_vfprintf+0x2c2>
2000120e:	0ff57513          	andi	a0,a0,255
20001212:	03540733          	mul	a4,s0,s5
20001216:	953a                	add	a0,a0,a4
20001218:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
2000121c:	fd068513          	addi	a0,a3,-48
20001220:	0ff57713          	andi	a4,a0,255
20001224:	0585                	addi	a1,a1,1
20001226:	8536                	mv	a0,a3
20001228:	fcecfde3          	bgeu	s9,a4,20001202 <base_vfprintf+0xa6>
2000122c:	4601                	li	a2,0
2000122e:	8536                	mv	a0,a3
20001230:	228d6163          	bltu	s10,s0,20001452 <base_vfprintf+0x2f6>
20001234:	008036b3          	snez	a3,s0
20001238:	8e55                	or	a2,a2,a3
2000123a:	20060c63          	beqz	a2,20001452 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000123e:	95de                	add	a1,a1,s7
20001240:	95a6                	add	a1,a1,s1
20001242:	00258b93          	addi	s7,a1,2
20001246:	02adce63          	blt	s11,a0,20001282 <base_vfprintf+0x126>
2000124a:	06100593          	li	a1,97
2000124e:	06a5d563          	bge	a1,a0,200012b8 <base_vfprintf+0x15c>
20001252:	06300593          	li	a1,99
20001256:	0ca5cb63          	blt	a1,a0,2000132c <base_vfprintf+0x1d0>
2000125a:	06200593          	li	a1,98
2000125e:	14b50a63          	beq	a0,a1,200013b2 <base_vfprintf+0x256>
20001262:	06300593          	li	a1,99
20001266:	18b51f63          	bne	a0,a1,20001404 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
2000126a:	4502                	lw	a0,0(sp)
2000126c:	00450593          	addi	a1,a0,4
20001270:	c02e                	sw	a1,0(sp)
20001272:	4108                	lw	a0,0(a0)
20001274:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20001278:	4605                	li	a2,1
2000127a:	854a                	mv	a0,s2
2000127c:	00b10593          	addi	a1,sp,11
20001280:	aa41                	j	20001410 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001282:	07200593          	li	a1,114
20001286:	04a5dd63          	bge	a1,a0,200012e0 <base_vfprintf+0x184>
2000128a:	07700593          	li	a1,119
2000128e:	0aa5c663          	blt	a1,a0,2000133a <base_vfprintf+0x1de>
20001292:	07300593          	li	a1,115
20001296:	12b50963          	beq	a0,a1,200013c8 <base_vfprintf+0x26c>
2000129a:	07500593          	li	a1,117
2000129e:	16b51363          	bne	a0,a1,20001404 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200012a2:	4502                	lw	a0,0(sp)
200012a4:	00450593          	addi	a1,a0,4
200012a8:	c02e                	sw	a1,0(sp)
200012aa:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200012ac:	00001797          	auipc	a5,0x1
200012b0:	c6978793          	addi	a5,a5,-919 # 20001f15 <kDigitsLow>
200012b4:	4729                	li	a4,10
200012b6:	a8cd                	j	200013a8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200012b8:	13850763          	beq	a0,s8,200013e6 <base_vfprintf+0x28a>
200012bc:	04800593          	li	a1,72
200012c0:	00b50663          	beq	a0,a1,200012cc <base_vfprintf+0x170>
200012c4:	05800593          	li	a1,88
200012c8:	12b51e63          	bne	a0,a1,20001404 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
200012cc:	4502                	lw	a0,0(sp)
200012ce:	00450593          	addi	a1,a0,4
200012d2:	c02e                	sw	a1,0(sp)
200012d4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
200012d6:	00001797          	auipc	a5,0x1
200012da:	c4f78793          	addi	a5,a5,-945 # 20001f25 <kDigitsHigh>
200012de:	a0e1                	j	200013a6 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200012e0:	06900593          	li	a1,105
200012e4:	06b50d63          	beq	a0,a1,2000135e <base_vfprintf+0x202>
200012e8:	06f00593          	li	a1,111
200012ec:	10b50163          	beq	a0,a1,200013ee <base_vfprintf+0x292>
200012f0:	07000593          	li	a1,112
200012f4:	10b51863          	bne	a0,a1,20001404 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200012f8:	00001597          	auipc	a1,0x1
200012fc:	41c58593          	addi	a1,a1,1052 # 20002714 <__clz_tab+0x7cc>
20001300:	4609                	li	a2,2
20001302:	854a                	mv	a0,s2
20001304:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20001306:	4582                	lw	a1,0(sp)
20001308:	00458613          	addi	a2,a1,4
2000130c:	c032                	sw	a2,0(sp)
2000130e:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001310:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001314:	00001797          	auipc	a5,0x1
20001318:	c0178793          	addi	a5,a5,-1023 # 20001f15 <kDigitsLow>
2000131c:	46a1                	li	a3,8
2000131e:	4741                	li	a4,16
20001320:	854a                	mv	a0,s2
20001322:	85ce                	mv	a1,s3
20001324:	2a5d                	jal	200014da <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20001326:	00a40b33          	add	s6,s0,a0
2000132a:	a0ed                	j	20001414 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000132c:	06400593          	li	a1,100
20001330:	02b50763          	beq	a0,a1,2000135e <base_vfprintf+0x202>
20001334:	07b50063          	beq	a0,s11,20001394 <base_vfprintf+0x238>
20001338:	a0f1                	j	20001404 <base_vfprintf+0x2a8>
2000133a:	07800593          	li	a1,120
2000133e:	04b50b63          	beq	a0,a1,20001394 <base_vfprintf+0x238>
20001342:	07a00593          	li	a1,122
20001346:	0ab51f63          	bne	a0,a1,20001404 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
2000134a:	4502                	lw	a0,0(sp)
2000134c:	00450593          	addi	a1,a0,4
20001350:	c02e                	sw	a1,0(sp)
20001352:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001354:	00850593          	addi	a1,a0,8
20001358:	c02e                	sw	a1,0(sp)
2000135a:	414c                	lw	a1,4(a0)
2000135c:	a84d                	j	2000140e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
2000135e:	4502                	lw	a0,0(sp)
20001360:	00450593          	addi	a1,a0,4
20001364:	c02e                	sw	a1,0(sp)
20001366:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20001368:	557d                	li	a0,-1
2000136a:	00954c63          	blt	a0,s1,20001382 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
2000136e:	00001597          	auipc	a1,0x1
20001372:	3a458593          	addi	a1,a1,932 # 20002712 <__clz_tab+0x7ca>
20001376:	4605                	li	a2,1
20001378:	854a                	mv	a0,s2
2000137a:	9982                	jalr	s3
2000137c:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
2000137e:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001382:	00001797          	auipc	a5,0x1
20001386:	b9378793          	addi	a5,a5,-1133 # 20001f15 <kDigitsLow>
2000138a:	4729                	li	a4,10
2000138c:	854a                	mv	a0,s2
2000138e:	85ce                	mv	a1,s3
20001390:	8626                	mv	a2,s1
20001392:	a829                	j	200013ac <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20001394:	4502                	lw	a0,0(sp)
20001396:	00450593          	addi	a1,a0,4
2000139a:	c02e                	sw	a1,0(sp)
2000139c:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
2000139e:	00001797          	auipc	a5,0x1
200013a2:	b7778793          	addi	a5,a5,-1161 # 20001f15 <kDigitsLow>
200013a6:	4741                	li	a4,16
200013a8:	854a                	mv	a0,s2
200013aa:	85ce                	mv	a1,s3
200013ac:	86a2                	mv	a3,s0
200013ae:	2235                	jal	200014da <write_digits>
200013b0:	a08d                	j	20001412 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200013b2:	4502                	lw	a0,0(sp)
200013b4:	00450593          	addi	a1,a0,4
200013b8:	c02e                	sw	a1,0(sp)
200013ba:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200013bc:	00001797          	auipc	a5,0x1
200013c0:	b5978793          	addi	a5,a5,-1191 # 20001f15 <kDigitsLow>
200013c4:	4709                	li	a4,2
200013c6:	b7cd                	j	200013a8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200013c8:	4502                	lw	a0,0(sp)
200013ca:	00450593          	addi	a1,a0,4
200013ce:	c02e                	sw	a1,0(sp)
200013d0:	410c                	lw	a1,0(a0)
200013d2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200013d4:	00a58633          	add	a2,a1,a0
200013d8:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200013dc:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200013de:	fa7d                	bnez	a2,200013d4 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200013e0:	fff50613          	addi	a2,a0,-1
200013e4:	a02d                	j	2000140e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200013e6:	4605                	li	a2,1
200013e8:	854a                	mv	a0,s2
200013ea:	85d2                	mv	a1,s4
200013ec:	a015                	j	20001410 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200013ee:	4502                	lw	a0,0(sp)
200013f0:	00450593          	addi	a1,a0,4
200013f4:	c02e                	sw	a1,0(sp)
200013f6:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
200013f8:	00001797          	auipc	a5,0x1
200013fc:	b1d78793          	addi	a5,a5,-1251 # 20001f15 <kDigitsLow>
20001400:	4721                	li	a4,8
20001402:	b75d                	j	200013a8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20001404:	00001597          	auipc	a1,0x1
20001408:	b3158593          	addi	a1,a1,-1231 # 20001f35 <kUnknownSpec>
2000140c:	463d                	li	a2,15
2000140e:	854a                	mv	a0,s2
20001410:	9982                	jalr	s3
20001412:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001414:	000bc503          	lbu	a0,0(s7)
20001418:	d8051ce3          	bnez	a0,200011b0 <base_vfprintf+0x54>
2000141c:	a819                	j	20001432 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
2000141e:	00001597          	auipc	a1,0x1
20001422:	ada58593          	addi	a1,a1,-1318 # 20001ef8 <kErrorNul>
20001426:	4645                	li	a2,17
20001428:	854a                	mv	a0,s2
2000142a:	9982                	jalr	s3
2000142c:	9b2a                	add	s6,s6,a0
2000142e:	a011                	j	20001432 <base_vfprintf+0x2d6>
20001430:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20001432:	855a                	mv	a0,s6
20001434:	4db2                	lw	s11,12(sp)
20001436:	4d42                	lw	s10,16(sp)
20001438:	4cd2                	lw	s9,20(sp)
2000143a:	4c62                	lw	s8,24(sp)
2000143c:	4bf2                	lw	s7,28(sp)
2000143e:	5b02                	lw	s6,32(sp)
20001440:	5a92                	lw	s5,36(sp)
20001442:	5a22                	lw	s4,40(sp)
20001444:	59b2                	lw	s3,44(sp)
20001446:	5942                	lw	s2,48(sp)
20001448:	54d2                	lw	s1,52(sp)
2000144a:	5462                	lw	s0,56(sp)
2000144c:	50f2                	lw	ra,60(sp)
2000144e:	6121                	addi	sp,sp,64
20001450:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001452:	00001597          	auipc	a1,0x1
20001456:	ab758593          	addi	a1,a1,-1353 # 20001f09 <kErrorTooWide>
2000145a:	4631                	li	a2,12
2000145c:	b7f1                	j	20001428 <base_vfprintf+0x2cc>

2000145e <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
2000145e:	7179                	addi	sp,sp,-48
20001460:	ca06                	sw	ra,20(sp)
20001462:	d646                	sw	a7,44(sp)
20001464:	d442                	sw	a6,40(sp)
20001466:	d23e                	sw	a5,36(sp)
20001468:	d03a                	sw	a4,32(sp)
2000146a:	ce36                	sw	a3,28(sp)
2000146c:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
2000146e:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001470:	c42a                	sw	a0,8(sp)
20001472:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001474:	00000597          	auipc	a1,0x0
20001478:	01258593          	addi	a1,a1,18 # 20001486 <snprintf_sink>
2000147c:	0028                	addi	a0,sp,8
2000147e:	39f9                	jal	2000115c <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001480:	40d2                	lw	ra,20(sp)
20001482:	6145                	addi	sp,sp,48
20001484:	8082                	ret

20001486 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20001486:	1141                	addi	sp,sp,-16
20001488:	c606                	sw	ra,12(sp)
2000148a:	c422                	sw	s0,8(sp)
2000148c:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
2000148e:	4140                	lw	s0,4(a0)
20001490:	c00d                	beqz	s0,200014b2 <snprintf_sink+0x2c>
20001492:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20001494:	00c46363          	bltu	s0,a2,2000149a <snprintf_sink+0x14>
20001498:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
2000149a:	4088                	lw	a0,0(s1)
2000149c:	8622                	mv	a2,s0
2000149e:	a06ff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200014a2:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200014a4:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200014a6:	9522                	add	a0,a0,s0
200014a8:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200014aa:	40858533          	sub	a0,a1,s0
200014ae:	c0c8                	sw	a0,4(s1)
200014b0:	a011                	j	200014b4 <snprintf_sink+0x2e>
200014b2:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200014b4:	8522                	mv	a0,s0
200014b6:	4492                	lw	s1,4(sp)
200014b8:	4422                	lw	s0,8(sp)
200014ba:	40b2                	lw	ra,12(sp)
200014bc:	0141                	addi	sp,sp,16
200014be:	8082                	ret

200014c0 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200014c0:	1101                	addi	sp,sp,-32
200014c2:	c206                	sw	ra,4(sp)
200014c4:	ce46                	sw	a7,28(sp)
200014c6:	cc42                	sw	a6,24(sp)
200014c8:	ca3e                	sw	a5,20(sp)
200014ca:	c83a                	sw	a4,16(sp)
200014cc:	c636                	sw	a3,12(sp)
200014ce:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200014d0:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200014d2:	3169                	jal	2000115c <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200014d4:	4092                	lw	ra,4(sp)
200014d6:	6105                	addi	sp,sp,32
200014d8:	8082                	ret

200014da <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
200014da:	7139                	addi	sp,sp,-64
200014dc:	de06                	sw	ra,60(sp)
200014de:	dc22                	sw	s0,56(sp)
200014e0:	da26                	sw	s1,52(sp)
200014e2:	d84a                	sw	s2,48(sp)
200014e4:	d64e                	sw	s3,44(sp)
200014e6:	892e                	mv	s2,a1
200014e8:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200014ea:	ca05                	beqz	a2,2000151a <write_digits+0x40>
200014ec:	4501                	li	a0,0
200014ee:	02b10813          	addi	a6,sp,43
200014f2:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
200014f4:	02e65633          	divu	a2,a2,a4
200014f8:	02e60433          	mul	s0,a2,a4
200014fc:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001500:	943e                	add	s0,s0,a5
20001502:	00040403          	lb	s0,0(s0)
20001506:	00a805b3          	add	a1,a6,a0
2000150a:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000150e:	157d                	addi	a0,a0,-1
20001510:	fee4f1e3          	bgeu	s1,a4,200014f2 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001514:	40a00633          	neg	a2,a0
20001518:	a011                	j	2000151c <write_digits+0x42>
2000151a:	4601                	li	a2,0
2000151c:	4485                	li	s1,1
2000151e:	c291                	beqz	a3,20001522 <write_digits+0x48>
20001520:	84b6                	mv	s1,a3
20001522:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20001526:	00a4e463          	bltu	s1,a0,2000152e <write_digits+0x54>
2000152a:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000152e:	02967063          	bgeu	a2,s1,2000154e <write_digits+0x74>
20001532:	0068                	addi	a0,sp,12
20001534:	8d05                	sub	a0,a0,s1
20001536:	02050513          	addi	a0,a0,32
2000153a:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
2000153e:	03000593          	li	a1,48
20001542:	8622                	mv	a2,s0
20001544:	976ff0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001548:	147d                	addi	s0,s0,-1
2000154a:	fc7d                	bnez	s0,20001548 <write_digits+0x6e>
2000154c:	8626                	mv	a2,s1
2000154e:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001550:	8d11                	sub	a0,a0,a2
20001552:	02050593          	addi	a1,a0,32
20001556:	854e                	mv	a0,s3
20001558:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
2000155a:	59b2                	lw	s3,44(sp)
2000155c:	5942                	lw	s2,48(sp)
2000155e:	54d2                	lw	s1,52(sp)
20001560:	5462                	lw	s0,56(sp)
20001562:	50f2                	lw	ra,60(sp)
20001564:	6121                	addi	sp,sp,64
20001566:	8082                	ret

20001568 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20001568:	c581                	beqz	a1,20001570 <dif_uart_init+0x8>
2000156a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
2000156c:	c188                	sw	a0,0(a1)
2000156e:	a011                	j	20001572 <dif_uart_init+0xa>
20001570:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001572:	8532                	mv	a0,a2
20001574:	8082                	ret

20001576 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20001576:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001578:	c606                	sw	ra,12(sp)
2000157a:	c422                	sw	s0,8(sp)
2000157c:	c226                	sw	s1,4(sp)
2000157e:	c92d                	beqz	a0,200015f0 <dif_uart_configure+0x7a>
20001580:	84ae                	mv	s1,a1
20001582:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001584:	418c                	lw	a1,0(a1)
20001586:	450d                	li	a0,3
20001588:	c5ad                	beqz	a1,200015f2 <dif_uart_configure+0x7c>
2000158a:	40d0                	lw	a2,4(s1)
2000158c:	c23d                	beqz	a2,200015f2 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
2000158e:	01459513          	slli	a0,a1,0x14
20001592:	81b1                	srli	a1,a1,0xc
20001594:	4681                	li	a3,0
20001596:	2e61                	jal	2000192e <__udivdi3>
20001598:	6641                	lui	a2,0x10
2000159a:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
2000159c:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
2000159e:	8d31                	xor	a0,a0,a2
200015a0:	8dc9                	or	a1,a1,a0
200015a2:	4511                	li	a0,4
200015a4:	e5b9                	bnez	a1,200015f2 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200015a6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015a8:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200015ac:	4008                	lw	a0,0(s0)
200015ae:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015b0:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200015b2:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015b4:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200015b8:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015ba:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200015be:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015c0:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200015c4:	4008                	lw	a0,0(s0)
200015c6:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015c8:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200015ca:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200015cc:	01061513          	slli	a0,a2,0x10
200015d0:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
200015d4:	c291                	beqz	a3,200015d8 <dif_uart_configure+0x62>
200015d6:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
200015d8:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
200015da:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
200015dc:	e219                	bnez	a2,200015e2 <dif_uart_configure+0x6c>
200015de:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
200015e2:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015e4:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200015e6:	400c                	lw	a1,0(s0)
200015e8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015ea:	0005a223          	sw	zero,4(a1)
200015ee:	a011                	j	200015f2 <dif_uart_configure+0x7c>
200015f0:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
200015f2:	4492                	lw	s1,4(sp)
200015f4:	4422                	lw	s0,8(sp)
200015f6:	40b2                	lw	ra,12(sp)
200015f8:	0141                	addi	sp,sp,16
200015fa:	8082                	ret

200015fc <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
200015fc:	1141                	addi	sp,sp,-16
200015fe:	c606                	sw	ra,12(sp)
20001600:	c422                	sw	s0,8(sp)
20001602:	c226                	sw	s1,4(sp)
20001604:	84aa                	mv	s1,a0
20001606:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001608:	c09d                	beqz	s1,2000162e <dif_uart_irq_is_pending+0x32>
2000160a:	8432                	mv	s0,a2
2000160c:	c20d                	beqz	a2,2000162e <dif_uart_irq_is_pending+0x32>
2000160e:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001610:	852e                	mv	a0,a1
20001612:	85b2                	mv	a1,a2
20001614:	2015                	jal	20001638 <uart_irq_offset_get>
20001616:	85aa                	mv	a1,a0
20001618:	4505                	li	a0,1
2000161a:	c991                	beqz	a1,2000162e <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
2000161c:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000161e:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001620:	4602                	lw	a2,0(sp)
20001622:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001624:	00c5d5b3          	srl	a1,a1,a2
20001628:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
2000162a:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
2000162e:	4492                	lw	s1,4(sp)
20001630:	4422                	lw	s0,8(sp)
20001632:	40b2                	lw	ra,12(sp)
20001634:	0141                	addi	sp,sp,16
20001636:	8082                	ret

20001638 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001638:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
2000163a:	00a66563          	bltu	a2,a0,20001644 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
2000163e:	c188                	sw	a0,0(a1)
20001640:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001642:	8082                	ret
20001644:	4501                	li	a0,0
20001646:	8082                	ret

20001648 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20001648:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
2000164a:	c606                	sw	ra,12(sp)
2000164c:	c422                	sw	s0,8(sp)
2000164e:	c10d                	beqz	a0,20001670 <dif_uart_irq_acknowledge+0x28>
20001650:	842a                	mv	s0,a0
20001652:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001654:	852e                	mv	a0,a1
20001656:	85b2                	mv	a1,a2
20001658:	37c5                	jal	20001638 <uart_irq_offset_get>
2000165a:	85aa                	mv	a1,a0
2000165c:	4505                	li	a0,1
2000165e:	c991                	beqz	a1,20001672 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001660:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001662:	4010                	lw	a2,0(s0)
20001664:	4501                	li	a0,0
20001666:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001668:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000166c:	c20c                	sw	a1,0(a2)
2000166e:	a011                	j	20001672 <dif_uart_irq_acknowledge+0x2a>
20001670:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001672:	4422                	lw	s0,8(sp)
20001674:	40b2                	lw	ra,12(sp)
20001676:	0141                	addi	sp,sp,16
20001678:	8082                	ret

2000167a <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
2000167a:	c911                	beqz	a0,2000168e <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
2000167c:	c581                	beqz	a1,20001684 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000167e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001680:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001682:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001684:	410c                	lw	a1,0(a0)
20001686:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001688:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
2000168c:	8082                	ret
2000168e:	4509                	li	a0,2
20001690:	8082                	ret

20001692 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20001692:	862a                	mv	a2,a0
20001694:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20001696:	c611                	beqz	a2,200016a2 <dif_uart_irq_restore_all+0x10>
20001698:	c589                	beqz	a1,200016a2 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
2000169a:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
2000169c:	4210                	lw	a2,0(a2)
2000169e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016a0:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200016a2:	8082                	ret

200016a4 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200016a4:	1141                	addi	sp,sp,-16
200016a6:	c606                	sw	ra,12(sp)
200016a8:	c422                	sw	s0,8(sp)
200016aa:	c226                	sw	s1,4(sp)
200016ac:	84aa                	mv	s1,a0
200016ae:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200016b0:	c485                	beqz	s1,200016d8 <dif_uart_irq_get_enabled+0x34>
200016b2:	8432                	mv	s0,a2
200016b4:	c215                	beqz	a2,200016d8 <dif_uart_irq_get_enabled+0x34>
200016b6:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200016b8:	852e                	mv	a0,a1
200016ba:	85b2                	mv	a1,a2
200016bc:	3fb5                	jal	20001638 <uart_irq_offset_get>
200016be:	85aa                	mv	a1,a0
200016c0:	4505                	li	a0,1
200016c2:	c999                	beqz	a1,200016d8 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200016c4:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200016c6:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
200016c8:	4602                	lw	a2,0(sp)
200016ca:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200016cc:	00c5d5b3          	srl	a1,a1,a2
200016d0:	8985                	andi	a1,a1,1
200016d2:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
200016d6:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
200016d8:	4492                	lw	s1,4(sp)
200016da:	4422                	lw	s0,8(sp)
200016dc:	40b2                	lw	ra,12(sp)
200016de:	0141                	addi	sp,sp,16
200016e0:	8082                	ret

200016e2 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
200016e2:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
200016e4:	c606                	sw	ra,12(sp)
200016e6:	c422                	sw	s0,8(sp)
200016e8:	c226                	sw	s1,4(sp)
200016ea:	c91d                	beqz	a0,20001720 <dif_uart_irq_set_enabled+0x3e>
200016ec:	8432                	mv	s0,a2
200016ee:	84aa                	mv	s1,a0
200016f0:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200016f2:	852e                	mv	a0,a1
200016f4:	85b2                	mv	a1,a2
200016f6:	3789                	jal	20001638 <uart_irq_offset_get>
200016f8:	85aa                	mv	a1,a0
200016fa:	4505                	li	a0,1
200016fc:	c19d                	beqz	a1,20001722 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200016fe:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001700:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001702:	4682                	lw	a3,0(sp)
20001704:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001706:	00143713          	seqz	a4,s0
2000170a:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000170c:	00d797b3          	sll	a5,a5,a3
20001710:	fff7c793          	not	a5,a5
20001714:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001716:	00d716b3          	sll	a3,a4,a3
2000171a:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000171c:	c1d0                	sw	a2,4(a1)
2000171e:	a011                	j	20001722 <dif_uart_irq_set_enabled+0x40>
20001720:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001722:	4492                	lw	s1,4(sp)
20001724:	4422                	lw	s0,8(sp)
20001726:	40b2                	lw	ra,12(sp)
20001728:	0141                	addi	sp,sp,16
2000172a:	8082                	ret

2000172c <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
2000172c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
2000172e:	c606                	sw	ra,12(sp)
20001730:	c422                	sw	s0,8(sp)
20001732:	c10d                	beqz	a0,20001754 <dif_uart_irq_force+0x28>
20001734:	842a                	mv	s0,a0
20001736:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001738:	852e                	mv	a0,a1
2000173a:	85b2                	mv	a1,a2
2000173c:	3df5                	jal	20001638 <uart_irq_offset_get>
2000173e:	85aa                	mv	a1,a0
20001740:	4505                	li	a0,1
20001742:	c991                	beqz	a1,20001756 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001744:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20001746:	4010                	lw	a2,0(s0)
20001748:	4501                	li	a0,0
2000174a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000174c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001750:	c60c                	sw	a1,8(a2)
20001752:	a011                	j	20001756 <dif_uart_irq_force+0x2a>
20001754:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20001756:	4422                	lw	s0,8(sp)
20001758:	40b2                	lw	ra,12(sp)
2000175a:	0141                	addi	sp,sp,16
2000175c:	8082                	ret

2000175e <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
2000175e:	cd09                	beqz	a0,20001778 <dif_uart_watermark_rx_set+0x1a>
20001760:	4691                	li	a3,4
20001762:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001764:	00b6eb63          	bltu	a3,a1,2000177a <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001768:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000176a:	4d54                	lw	a3,28(a0)
2000176c:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
2000176e:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001770:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001772:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001774:	cd4c                	sw	a1,28(a0)
20001776:	a011                	j	2000177a <dif_uart_watermark_rx_set+0x1c>
20001778:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000177a:	8532                	mv	a0,a2
2000177c:	8082                	ret

2000177e <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
2000177e:	cd11                	beqz	a0,2000179a <dif_uart_watermark_tx_set+0x1c>
20001780:	468d                	li	a3,3
20001782:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001784:	00b6ec63          	bltu	a3,a1,2000179c <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001788:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000178a:	4d54                	lw	a3,28(a0)
2000178c:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
2000178e:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001790:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001794:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001796:	cd4c                	sw	a1,28(a0)
20001798:	a011                	j	2000179c <dif_uart_watermark_tx_set+0x1e>
2000179a:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000179c:	8532                	mv	a0,a2
2000179e:	8082                	ret

200017a0 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200017a0:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200017a2:	c51d                	beqz	a0,200017d0 <dif_uart_bytes_send+0x30>
200017a4:	c595                	beqz	a1,200017d0 <dif_uart_bytes_send+0x30>
200017a6:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200017a8:	c20d                	beqz	a2,200017ca <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200017aa:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017ae:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200017b2:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200017b4:	eb19                	bnez	a4,200017ca <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
200017b6:	00f58733          	add	a4,a1,a5
200017ba:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
200017be:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017c0:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200017c4:	fef613e3          	bne	a2,a5,200017aa <dif_uart_bytes_send+0xa>
200017c8:	87b2                	mv	a5,a2
200017ca:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
200017cc:	c291                	beqz	a3,200017d0 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
200017ce:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
200017d0:	853a                	mv	a0,a4
200017d2:	8082                	ret

200017d4 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
200017d4:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
200017d6:	c515                	beqz	a0,20001802 <dif_uart_bytes_receive+0x2e>
200017d8:	c60d                	beqz	a2,20001802 <dif_uart_bytes_receive+0x2e>
200017da:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200017dc:	cd99                	beqz	a1,200017fa <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200017de:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017e0:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200017e2:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200017e6:	eb91                	bnez	a5,200017fa <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200017e8:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200017ea:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
200017ee:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200017f0:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200017f4:	ff0595e3          	bne	a1,a6,200017de <dif_uart_bytes_receive+0xa>
200017f8:	882e                	mv	a6,a1
200017fa:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
200017fc:	c299                	beqz	a3,20001802 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
200017fe:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001802:	853a                	mv	a0,a4
20001804:	8082                	ret

20001806 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001806:	cd19                	beqz	a0,20001824 <dif_uart_byte_send_polled+0x1e>
20001808:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000180a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000180c:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
2000180e:	fef5                	bnez	a3,2000180a <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001810:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001812:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001814:	e299                	bnez	a3,2000181a <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001816:	ce0c                	sw	a1,24(a2)
20001818:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000181a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000181c:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
2000181e:	dd75                	beqz	a0,2000181a <dif_uart_byte_send_polled+0x14>
20001820:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001822:	8082                	ret
20001824:	4509                	li	a0,2
20001826:	8082                	ret

20001828 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001828:	862a                	mv	a2,a0
2000182a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
2000182c:	c205                	beqz	a2,2000184c <dif_uart_byte_receive_polled+0x24>
2000182e:	cd99                	beqz	a1,2000184c <dif_uart_byte_receive_polled+0x24>
20001830:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001832:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001834:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001838:	fd6d                	bnez	a0,20001832 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000183a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000183c:	02057693          	andi	a3,a0,32
20001840:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001842:	e689                	bnez	a3,2000184c <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001844:	4a50                	lw	a2,20(a2)
20001846:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001848:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
2000184c:	8082                	ret

2000184e <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000184e:	862a                	mv	a2,a0
20001850:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001852:	ca09                	beqz	a2,20001864 <dif_uart_rx_bytes_available+0x16>
20001854:	c981                	beqz	a1,20001864 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001856:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001858:	5110                	lw	a2,32(a0)
2000185a:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
2000185c:	8241                	srli	a2,a2,0x10
2000185e:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001862:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001864:	8082                	ret

20001866 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001866:	862a                	mv	a2,a0
20001868:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
2000186a:	ce01                	beqz	a2,20001882 <dif_uart_tx_bytes_available+0x1c>
2000186c:	c999                	beqz	a1,20001882 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000186e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001870:	5110                	lw	a2,32(a0)
20001872:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001874:	03f67613          	andi	a2,a2,63
20001878:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
2000187c:	40c68633          	sub	a2,a3,a2
20001880:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001882:	8082                	ret

20001884 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001884:	c11d                	beqz	a0,200018aa <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001886:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001888:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
2000188a:	ffd5f693          	andi	a3,a1,-3
2000188e:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001892:	fff58713          	addi	a4,a1,-1
20001896:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001898:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
2000189c:	00f77463          	bgeu	a4,a5,200018a4 <dif_uart_fifo_reset+0x20>
200018a0:	0025e593          	ori	a1,a1,2
200018a4:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018a6:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200018a8:	8082                	ret
200018aa:	4509                	li	a0,2
200018ac:	8082                	ret

200018ae <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
200018ae:	c515                	beqz	a0,200018da <dif_uart_loopback_set+0x2c>
200018b0:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
200018b2:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
200018b4:	0015b593          	seqz	a1,a1
200018b8:	4715                	li	a4,5
200018ba:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018be:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
200018c0:	00163613          	seqz	a2,a2
200018c4:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200018c6:	00b797b3          	sll	a5,a5,a1
200018ca:	fff7c793          	not	a5,a5
200018ce:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200018d0:	00b615b3          	sll	a1,a2,a1
200018d4:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018d6:	c54c                	sw	a1,12(a0)
200018d8:	a011                	j	200018dc <dif_uart_loopback_set+0x2e>
200018da:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200018dc:	8536                	mv	a0,a3
200018de:	8082                	ret

200018e0 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
200018e0:	862a                	mv	a2,a0
200018e2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
200018e4:	ca11                	beqz	a2,200018f8 <dif_uart_enable_rx_timeout+0x18>
200018e6:	0185d693          	srli	a3,a1,0x18
200018ea:	e699                	bnez	a3,200018f8 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200018ec:	4210                	lw	a2,0(a2)
200018ee:	4501                	li	a0,0
200018f0:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200018f4:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200018f6:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
200018f8:	8082                	ret

200018fa <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
200018fa:	c511                	beqz	a0,20001906 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200018fc:	410c                	lw	a1,0(a0)
200018fe:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001900:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001904:	8082                	ret
20001906:	4509                	li	a0,2
20001908:	8082                	ret

2000190a <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
2000190a:	86aa                	mv	a3,a0
2000190c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
2000190e:	ce99                	beqz	a3,2000192c <dif_uart_get_rx_timeout+0x22>
20001910:	cd91                	beqz	a1,2000192c <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001912:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001914:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001916:	fff6c513          	not	a0,a3
2000191a:	817d                	srli	a0,a0,0x1f
2000191c:	c188                	sw	a0,0(a1)
2000191e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001920:	c611                	beqz	a2,2000192c <dif_uart_get_rx_timeout+0x22>
20001922:	010005b7          	lui	a1,0x1000
20001926:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001928:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
2000192a:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
2000192c:	8082                	ret

2000192e <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
2000192e:	88aa                	mv	a7,a0
20001930:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001932:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001934:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001936:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001938:	20069963          	bnez	a3,20001b4a <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
2000193c:	200026b7          	lui	a3,0x20002
20001940:	f4868693          	addi	a3,a3,-184 # 20001f48 <__clz_tab>
20001944:	0cc5f063          	bgeu	a1,a2,20001a04 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001948:	6741                	lui	a4,0x10
2000194a:	0ae67663          	bgeu	a2,a4,200019f6 <__udivdi3+0xc8>
2000194e:	0ff00713          	li	a4,255
20001952:	00c73733          	sltu	a4,a4,a2
20001956:	070e                	slli	a4,a4,0x3
20001958:	00e65533          	srl	a0,a2,a4
2000195c:	96aa                	add	a3,a3,a0
2000195e:	0006c683          	lbu	a3,0(a3)
20001962:	02000513          	li	a0,32
20001966:	9736                	add	a4,a4,a3
20001968:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
2000196c:	00e50c63          	beq	a0,a4,20001984 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001970:	00d797b3          	sll	a5,a5,a3
20001974:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001978:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000197c:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001980:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001984:	01085893          	srli	a7,a6,0x10
20001988:	0315d7b3          	divu	a5,a1,a7
2000198c:	01081613          	slli	a2,a6,0x10
20001990:	8241                	srli	a2,a2,0x10
20001992:	01035713          	srli	a4,t1,0x10
20001996:	0315f6b3          	remu	a3,a1,a7
2000199a:	853e                	mv	a0,a5
2000199c:	02f605b3          	mul	a1,a2,a5
200019a0:	06c2                	slli	a3,a3,0x10
200019a2:	8f55                	or	a4,a4,a3
200019a4:	00b77c63          	bgeu	a4,a1,200019bc <__udivdi3+0x8e>
200019a8:	9742                	add	a4,a4,a6
200019aa:	fff78513          	addi	a0,a5,-1
200019ae:	01076763          	bltu	a4,a6,200019bc <__udivdi3+0x8e>
200019b2:	00b77563          	bgeu	a4,a1,200019bc <__udivdi3+0x8e>
200019b6:	ffe78513          	addi	a0,a5,-2
200019ba:	9742                	add	a4,a4,a6
200019bc:	8f0d                	sub	a4,a4,a1
200019be:	031777b3          	remu	a5,a4,a7
200019c2:	0342                	slli	t1,t1,0x10
200019c4:	01035313          	srli	t1,t1,0x10
200019c8:	03175733          	divu	a4,a4,a7
200019cc:	07c2                	slli	a5,a5,0x10
200019ce:	0067e333          	or	t1,a5,t1
200019d2:	02e606b3          	mul	a3,a2,a4
200019d6:	863a                	mv	a2,a4
200019d8:	00d37b63          	bgeu	t1,a3,200019ee <__udivdi3+0xc0>
200019dc:	9342                	add	t1,t1,a6
200019de:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200019e2:	01036663          	bltu	t1,a6,200019ee <__udivdi3+0xc0>
200019e6:	00d37463          	bgeu	t1,a3,200019ee <__udivdi3+0xc0>
200019ea:	ffe70613          	addi	a2,a4,-2
200019ee:	0542                	slli	a0,a0,0x10
200019f0:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200019f2:	4581                	li	a1,0
200019f4:	a85d                	j	20001aaa <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200019f6:	01000537          	lui	a0,0x1000
200019fa:	4741                	li	a4,16
200019fc:	f4a66ee3          	bltu	a2,a0,20001958 <__udivdi3+0x2a>
20001a00:	4761                	li	a4,24
20001a02:	bf99                	j	20001958 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001a04:	e601                	bnez	a2,20001a0c <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001a06:	4705                	li	a4,1
20001a08:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001a0c:	6741                	lui	a4,0x10
20001a0e:	08e87f63          	bgeu	a6,a4,20001aac <__udivdi3+0x17e>
20001a12:	0ff00713          	li	a4,255
20001a16:	01077363          	bgeu	a4,a6,20001a1c <__udivdi3+0xee>
20001a1a:	4521                	li	a0,8
20001a1c:	00a85733          	srl	a4,a6,a0
20001a20:	96ba                	add	a3,a3,a4
20001a22:	0006c703          	lbu	a4,0(a3)
20001a26:	02000613          	li	a2,32
20001a2a:	972a                	add	a4,a4,a0
20001a2c:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001a30:	08e61563          	bne	a2,a4,20001aba <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001a34:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001a38:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001a3a:	01085893          	srli	a7,a6,0x10
20001a3e:	01081613          	slli	a2,a6,0x10
20001a42:	8241                	srli	a2,a2,0x10
20001a44:	01035713          	srli	a4,t1,0x10
20001a48:	0317f6b3          	remu	a3,a5,a7
20001a4c:	0317d7b3          	divu	a5,a5,a7
20001a50:	06c2                	slli	a3,a3,0x10
20001a52:	8f55                	or	a4,a4,a3
20001a54:	02f60e33          	mul	t3,a2,a5
20001a58:	853e                	mv	a0,a5
20001a5a:	01c77c63          	bgeu	a4,t3,20001a72 <__udivdi3+0x144>
20001a5e:	9742                	add	a4,a4,a6
20001a60:	fff78513          	addi	a0,a5,-1
20001a64:	01076763          	bltu	a4,a6,20001a72 <__udivdi3+0x144>
20001a68:	01c77563          	bgeu	a4,t3,20001a72 <__udivdi3+0x144>
20001a6c:	ffe78513          	addi	a0,a5,-2
20001a70:	9742                	add	a4,a4,a6
20001a72:	41c70733          	sub	a4,a4,t3
20001a76:	031777b3          	remu	a5,a4,a7
20001a7a:	0342                	slli	t1,t1,0x10
20001a7c:	01035313          	srli	t1,t1,0x10
20001a80:	03175733          	divu	a4,a4,a7
20001a84:	07c2                	slli	a5,a5,0x10
20001a86:	0067e333          	or	t1,a5,t1
20001a8a:	02e606b3          	mul	a3,a2,a4
20001a8e:	863a                	mv	a2,a4
20001a90:	00d37b63          	bgeu	t1,a3,20001aa6 <__udivdi3+0x178>
20001a94:	9342                	add	t1,t1,a6
20001a96:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001a9a:	01036663          	bltu	t1,a6,20001aa6 <__udivdi3+0x178>
20001a9e:	00d37463          	bgeu	t1,a3,20001aa6 <__udivdi3+0x178>
20001aa2:	ffe70613          	addi	a2,a4,-2
20001aa6:	0542                	slli	a0,a0,0x10
20001aa8:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001aaa:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001aac:	01000737          	lui	a4,0x1000
20001ab0:	4541                	li	a0,16
20001ab2:	f6e865e3          	bltu	a6,a4,20001a1c <__udivdi3+0xee>
20001ab6:	4561                	li	a0,24
20001ab8:	b795                	j	20001a1c <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001aba:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001abe:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001ac2:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001ac6:	00d797b3          	sll	a5,a5,a3
20001aca:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001ace:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001ad2:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001ad6:	0315f733          	remu	a4,a1,a7
20001ada:	01081793          	slli	a5,a6,0x10
20001ade:	83c1                	srli	a5,a5,0x10
20001ae0:	01065513          	srli	a0,a2,0x10
20001ae4:	0315d5b3          	divu	a1,a1,a7
20001ae8:	0742                	slli	a4,a4,0x10
20001aea:	8f49                	or	a4,a4,a0
20001aec:	02b786b3          	mul	a3,a5,a1
20001af0:	852e                	mv	a0,a1
20001af2:	00d77c63          	bgeu	a4,a3,20001b0a <__udivdi3+0x1dc>
20001af6:	9742                	add	a4,a4,a6
20001af8:	fff58513          	addi	a0,a1,-1 # ffffff <test_main.kLogFields.36+0xfefe33>
20001afc:	01076763          	bltu	a4,a6,20001b0a <__udivdi3+0x1dc>
20001b00:	00d77563          	bgeu	a4,a3,20001b0a <__udivdi3+0x1dc>
20001b04:	ffe58513          	addi	a0,a1,-2
20001b08:	9742                	add	a4,a4,a6
20001b0a:	40d706b3          	sub	a3,a4,a3
20001b0e:	0316f733          	remu	a4,a3,a7
20001b12:	0642                	slli	a2,a2,0x10
20001b14:	8241                	srli	a2,a2,0x10
20001b16:	0316d6b3          	divu	a3,a3,a7
20001b1a:	0742                	slli	a4,a4,0x10
20001b1c:	02d788b3          	mul	a7,a5,a3
20001b20:	00c767b3          	or	a5,a4,a2
20001b24:	8736                	mv	a4,a3
20001b26:	0117fc63          	bgeu	a5,a7,20001b3e <__udivdi3+0x210>
20001b2a:	97c2                	add	a5,a5,a6
20001b2c:	fff68713          	addi	a4,a3,-1
20001b30:	0107e763          	bltu	a5,a6,20001b3e <__udivdi3+0x210>
20001b34:	0117f563          	bgeu	a5,a7,20001b3e <__udivdi3+0x210>
20001b38:	ffe68713          	addi	a4,a3,-2
20001b3c:	97c2                	add	a5,a5,a6
20001b3e:	01051593          	slli	a1,a0,0x10
20001b42:	411787b3          	sub	a5,a5,a7
20001b46:	8dd9                	or	a1,a1,a4
20001b48:	bdcd                	j	20001a3a <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001b4a:	14d5e263          	bltu	a1,a3,20001c8e <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001b4e:	6741                	lui	a4,0x10
20001b50:	02e6ff63          	bgeu	a3,a4,20001b8e <__udivdi3+0x260>
20001b54:	0ff00713          	li	a4,255
20001b58:	00d735b3          	sltu	a1,a4,a3
20001b5c:	058e                	slli	a1,a1,0x3
20001b5e:	20002737          	lui	a4,0x20002
20001b62:	00b6d533          	srl	a0,a3,a1
20001b66:	f4870713          	addi	a4,a4,-184 # 20001f48 <__clz_tab>
20001b6a:	972a                	add	a4,a4,a0
20001b6c:	00074703          	lbu	a4,0(a4)
20001b70:	02000513          	li	a0,32
20001b74:	972e                	add	a4,a4,a1
20001b76:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001b7a:	02e51163          	bne	a0,a4,20001b9c <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001b7e:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001b80:	f2f6e5e3          	bltu	a3,a5,20001aaa <__udivdi3+0x17c>
20001b84:	00c8b533          	sltu	a0,a7,a2
20001b88:	00154513          	xori	a0,a0,1
20001b8c:	bf39                	j	20001aaa <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001b8e:	01000737          	lui	a4,0x1000
20001b92:	45c1                	li	a1,16
20001b94:	fce6e5e3          	bltu	a3,a4,20001b5e <__udivdi3+0x230>
20001b98:	45e1                	li	a1,24
20001b9a:	b7d1                	j	20001b5e <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001b9c:	00e65333          	srl	t1,a2,a4
20001ba0:	00b696b3          	sll	a3,a3,a1
20001ba4:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001ba8:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001bac:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001bb0:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001bb4:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001bb8:	00b797b3          	sll	a5,a5,a1
20001bbc:	00e8d733          	srl	a4,a7,a4
20001bc0:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001bc4:	01031793          	slli	a5,t1,0x10
20001bc8:	83c1                	srli	a5,a5,0x10
20001bca:	01085713          	srli	a4,a6,0x10
20001bce:	02a65633          	divu	a2,a2,a0
20001bd2:	06c2                	slli	a3,a3,0x10
20001bd4:	8f55                	or	a4,a4,a3
20001bd6:	02c78f33          	mul	t5,a5,a2
20001bda:	8e32                	mv	t3,a2
20001bdc:	01e77c63          	bgeu	a4,t5,20001bf4 <__udivdi3+0x2c6>
20001be0:	971a                	add	a4,a4,t1
20001be2:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001be6:	00676763          	bltu	a4,t1,20001bf4 <__udivdi3+0x2c6>
20001bea:	01e77563          	bgeu	a4,t5,20001bf4 <__udivdi3+0x2c6>
20001bee:	ffe60e13          	addi	t3,a2,-2
20001bf2:	971a                	add	a4,a4,t1
20001bf4:	41e70733          	sub	a4,a4,t5
20001bf8:	02a776b3          	remu	a3,a4,a0
20001bfc:	02a75733          	divu	a4,a4,a0
20001c00:	06c2                	slli	a3,a3,0x10
20001c02:	02e78633          	mul	a2,a5,a4
20001c06:	01081793          	slli	a5,a6,0x10
20001c0a:	83c1                	srli	a5,a5,0x10
20001c0c:	8fd5                	or	a5,a5,a3
20001c0e:	86ba                	mv	a3,a4
20001c10:	00c7fc63          	bgeu	a5,a2,20001c28 <__udivdi3+0x2fa>
20001c14:	979a                	add	a5,a5,t1
20001c16:	fff70693          	addi	a3,a4,-1 # ffffff <test_main.kLogFields.36+0xfefe33>
20001c1a:	0067e763          	bltu	a5,t1,20001c28 <__udivdi3+0x2fa>
20001c1e:	00c7f563          	bgeu	a5,a2,20001c28 <__udivdi3+0x2fa>
20001c22:	ffe70693          	addi	a3,a4,-2
20001c26:	979a                	add	a5,a5,t1
20001c28:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c2c:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c2e:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c30:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001c34:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c38:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c3a:	00def6b3          	and	a3,t4,a3
20001c3e:	01055613          	srli	a2,a0,0x10
20001c42:	010ede93          	srli	t4,t4,0x10
20001c46:	02d80333          	mul	t1,a6,a3
20001c4a:	02d606b3          	mul	a3,a2,a3
20001c4e:	01035713          	srli	a4,t1,0x10
20001c52:	03d80833          	mul	a6,a6,t4
20001c56:	9836                	add	a6,a6,a3
20001c58:	9742                	add	a4,a4,a6
20001c5a:	03d60633          	mul	a2,a2,t4
20001c5e:	00d77363          	bgeu	a4,a3,20001c64 <__udivdi3+0x336>
20001c62:	9672                	add	a2,a2,t3
20001c64:	01075693          	srli	a3,a4,0x10
20001c68:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001c6a:	02c7e063          	bltu	a5,a2,20001c8a <__udivdi3+0x35c>
20001c6e:	d8c792e3          	bne	a5,a2,200019f2 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c72:	67c1                	lui	a5,0x10
20001c74:	17fd                	addi	a5,a5,-1
20001c76:	8f7d                	and	a4,a4,a5
20001c78:	0742                	slli	a4,a4,0x10
20001c7a:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001c7e:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c82:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001c84:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001c86:	e2e8f2e3          	bgeu	a7,a4,20001aaa <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001c8a:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001c8c:	b39d                	j	200019f2 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001c8e:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001c90:	4501                	li	a0,0
20001c92:	bd21                	j	20001aaa <__udivdi3+0x17c>
