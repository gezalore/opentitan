
sw/device/tests/uart_tx_rx_test_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000e0  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         000029ce  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       000012c3  20002b50  20002b50  00003b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20003e14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000018  10000008  20003e1c  00005008  2**2
                  ALLOC
  8 .logs.fields  00000500  00010000  00010000  00005008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000887b  00000000  00000000  0000552e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016f6  00000000  00000000  0000dda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000f49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004b7b  00000000  00000000  0000f537  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000455f  00000000  00000000  000140b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002e0  00000000  00000000  00018611  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000426b  00000000  00000000  000188f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000007d4  00000000  00000000  0001cb5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	ff858593          	addi	a1,a1,-8 # 10000020 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2899                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2091                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00004617          	auipc	a2,0x4
20000054:	dc460613          	addi	a2,a2,-572 # 20003e14 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2889                	jal	200000aa <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	556020ef          	jal	ra,200025d4 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	1d40206f          	j	20002256 <abort>

20000086 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000086:	00b57e63          	bgeu	a0,a1,200000a2 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
2000008a:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008e:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000092:	00029b63          	bnez	t0,200000a8 <L_clear_error>

20000096 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000096:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
2000009a:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009c:	feb56de3          	bltu	a0,a1,20000096 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
200000a0:	8082                	ret

200000a2 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a2:	00b51363          	bne	a0,a1,200000a8 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a6:	8082                	ret

200000a8 <L_clear_error>:
	...

200000aa <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000aa:	02b57963          	bgeu	a0,a1,200000dc <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ae:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b2:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b6:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000ba:	02029463          	bnez	t0,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000be:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c2:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c6:	0062ee63          	bltu	t0,t1,200000e2 <L_copy_error>

200000ca <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000ca:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000ce:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000d0:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d4:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d6:	feb56ae3          	bltu	a0,a1,200000ca <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000da:	8082                	ret

200000dc <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000dc:	00b51363          	bne	a0,a1,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000e0:	8082                	ret

200000e2 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	2180206f          	j	20002318 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	3500206f          	j	2000245c <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	3980206f          	j	200024b4 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	0540006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:101
 * Provides external irq handling for this test.
 *
 * This function overrides the default external irq handler in
 * `sw/device/lib/handler.h`.
 */
void handler_irq_external(void) {
20000180:	7159                	addi	sp,sp,-112
20000182:	d686                	sw	ra,108(sp)
20000184:	d496                	sw	t0,104(sp)
20000186:	d29a                	sw	t1,100(sp)
20000188:	d09e                	sw	t2,96(sp)
2000018a:	cea2                	sw	s0,92(sp)
2000018c:	cca6                	sw	s1,88(sp)
2000018e:	caaa                	sw	a0,84(sp)
20000190:	c8ae                	sw	a1,80(sp)
20000192:	c6b2                	sw	a2,76(sp)
20000194:	c4b6                	sw	a3,72(sp)
20000196:	c2ba                	sw	a4,68(sp)
20000198:	c0be                	sw	a5,64(sp)
2000019a:	de42                	sw	a6,60(sp)
2000019c:	dc46                	sw	a7,56(sp)
2000019e:	da4a                	sw	s2,52(sp)
200001a0:	d84e                	sw	s3,48(sp)
200001a2:	d672                	sw	t3,44(sp)
200001a4:	d476                	sw	t4,40(sp)
200001a6:	d27a                	sw	t5,36(sp)
200001a8:	d07e                	sw	t6,32(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:104
  // Find which interrupt fired at PLIC by claiming it.
  dif_plic_irq_id_t plic_irq_id;
  CHECK(dif_plic_irq_claim(&plic, kTopEarlgreyPlicTargetIbex0, &plic_irq_id) ==
200001aa:	f0000517          	auipc	a0,0xf0000
200001ae:	e5e50513          	addi	a0,a0,-418 # 10000008 <_data_end>
200001b2:	0870                	addi	a2,sp,28
200001b4:	4581                	li	a1,0
200001b6:	209010ef          	jal	ra,20001bbe <dif_plic_irq_claim>
200001ba:	00003917          	auipc	s2,0x3
200001be:	38e90913          	addi	s2,s2,910 # 20003548 <kDeviceLogBypassUartAddress>
200001c2:	cd0d                	beqz	a0,200001fc <handler_irq_external+0x7c>
200001c4:	00092503          	lw	a0,0(s2)
200001c8:	c909                	beqz	a0,200001da <handler_irq_external+0x5a>
200001ca:	e0010517          	auipc	a0,0xe0010
200001ce:	e3650513          	addi	a0,a0,-458 # 10000 <_dv_log_offset>
200001d2:	4581                	li	a1,0
200001d4:	307010ef          	jal	ra,20001cda <base_log_internal_dv>
200001d8:	a829                	j	200001f2 <handler_irq_external+0x72>
200001da:	00003597          	auipc	a1,0x3
200001de:	97658593          	addi	a1,a1,-1674 # 20002b50 <__udivdi3+0x368>
200001e2:	0020                	addi	s0,sp,8
200001e4:	4651                	li	a2,20
200001e6:	8522                	mv	a0,s0
200001e8:	518020ef          	jal	ra,20002700 <memcpy>
200001ec:	8522                	mv	a0,s0
200001ee:	243010ef          	jal	ra,20001c30 <base_log_internal_core>
200001f2:	6531                	lui	a0,0xc
200001f4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200001f8:	064020ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:110
            kDifPlicOk,
        "dif_plic_irq_claim failed");

  // Check if it is the right peripheral.
  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
200001fc:	4472                	lw	s0,28(sp)
200001fe:	00241513          	slli	a0,s0,0x2
20000202:	00003597          	auipc	a1,0x3
20000206:	fba58593          	addi	a1,a1,-70 # 200031bc <top_earlgrey_plic_interrupt_for_peripheral>
2000020a:	952e                	add	a0,a0,a1
2000020c:	4104                	lw	s1,0(a0)
2000020e:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:111
  CHECK(peripheral == kTopEarlgreyPlicPeripheralUart0,
20000210:	04a48163          	beq	s1,a0,20000252 <handler_irq_external+0xd2>
20000214:	00092503          	lw	a0,0(s2)
20000218:	c911                	beqz	a0,2000022c <handler_irq_external+0xac>
2000021a:	e0010517          	auipc	a0,0xe0010
2000021e:	dfa50513          	addi	a0,a0,-518 # 10014 <handler_irq_external.kLogFields.2>
20000222:	4585                	li	a1,1
20000224:	8626                	mv	a2,s1
20000226:	2b5010ef          	jal	ra,20001cda <base_log_internal_dv>
2000022a:	a831                	j	20000246 <handler_irq_external+0xc6>
2000022c:	00003597          	auipc	a1,0x3
20000230:	93858593          	addi	a1,a1,-1736 # 20002b64 <__udivdi3+0x37c>
20000234:	0020                	addi	s0,sp,8
20000236:	4651                	li	a2,20
20000238:	8522                	mv	a0,s0
2000023a:	4c6020ef          	jal	ra,20002700 <memcpy>
2000023e:	8522                	mv	a0,s0
20000240:	85a6                	mv	a1,s1
20000242:	1ef010ef          	jal	ra,20001c30 <base_log_internal_core>
20000246:	6531                	lui	a0,0xc
20000248:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000024c:	010020ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:116
        "Interurpt from unexpected peripheral: %d", peripheral);

  // Correlate the interrupt fired at PLIC with UART.
  dif_uart_irq_t uart_irq;
  switch (plic_irq_id) {
20000250:	4472                	lw	s0,28(sp)
20000252:	4509                	li	a0,2
20000254:	02854b63          	blt	a0,s0,2000028a <handler_irq_external+0x10a>
20000258:	4505                	li	a0,1
2000025a:	04a41f63          	bne	s0,a0,200002b8 <handler_irq_external+0x138>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:118
    case kTopEarlgreyPlicIrqIdUart0TxWatermark:
      CHECK(exp_uart_irq_tx_watermark, "Unexpected TX watermark interrupt");
2000025e:	f0000517          	auipc	a0,0xf0000
20000262:	dae50513          	addi	a0,a0,-594 # 1000000c <exp_uart_irq_tx_watermark>
20000266:	00054503          	lbu	a0,0(a0)
2000026a:	f0000497          	auipc	s1,0xf0000
2000026e:	da348493          	addi	s1,s1,-605 # 1000000d <uart_irq_tx_watermark_fired>
20000272:	e569                	bnez	a0,2000033c <handler_irq_external+0x1bc>
20000274:	00092503          	lw	a0,0(s2)
20000278:	c14d                	beqz	a0,2000031a <handler_irq_external+0x19a>
2000027a:	e0010517          	auipc	a0,0xe0010
2000027e:	dae50513          	addi	a0,a0,-594 # 10028 <handler_irq_external.kLogFields.5>
20000282:	4581                	li	a1,0
20000284:	257010ef          	jal	ra,20001cda <base_log_internal_dv>
20000288:	a06d                	j	20000332 <handler_irq_external+0x1b2>
2000028a:	450d                	li	a0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:116
  switch (plic_irq_id) {
2000028c:	04a41d63          	bne	s0,a0,200002e6 <handler_irq_external+0x166>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:128
      CHECK(exp_uart_irq_rx_watermark, "Unexpected RX watermark interrupt");
      uart_irq_rx_watermark_fired = true;
      uart_irq = kDifUartIrqRxWatermark;
      break;
    case kTopEarlgreyPlicIrqIdUart0TxEmpty:
      CHECK(exp_uart_irq_tx_empty, "Unexpected TX empty interrupt");
20000290:	f0000517          	auipc	a0,0xf0000
20000294:	d8050513          	addi	a0,a0,-640 # 10000010 <exp_uart_irq_tx_empty>
20000298:	00054503          	lbu	a0,0(a0)
2000029c:	4409                	li	s0,2
2000029e:	f0000497          	auipc	s1,0xf0000
200002a2:	d7348493          	addi	s1,s1,-653 # 10000011 <uart_irq_tx_empty_fired>
200002a6:	e969                	bnez	a0,20000378 <handler_irq_external+0x1f8>
200002a8:	00092503          	lw	a0,0(s2)
200002ac:	c951                	beqz	a0,20000340 <handler_irq_external+0x1c0>
200002ae:	e0010517          	auipc	a0,0xe0010
200002b2:	da250513          	addi	a0,a0,-606 # 10050 <handler_irq_external.kLogFields.11>
200002b6:	a8b1                	j	20000312 <handler_irq_external+0x192>
200002b8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:116
  switch (plic_irq_id) {
200002ba:	20a41763          	bne	s0,a0,200004c8 <handler_irq_external+0x348>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:123
      CHECK(exp_uart_irq_rx_watermark, "Unexpected RX watermark interrupt");
200002be:	f0000517          	auipc	a0,0xf0000
200002c2:	d5050513          	addi	a0,a0,-688 # 1000000e <exp_uart_irq_rx_watermark>
200002c6:	00054503          	lbu	a0,0(a0)
200002ca:	4405                	li	s0,1
200002cc:	f0000497          	auipc	s1,0xf0000
200002d0:	d4348493          	addi	s1,s1,-701 # 1000000f <uart_irq_rx_watermark_fired>
200002d4:	e155                	bnez	a0,20000378 <handler_irq_external+0x1f8>
200002d6:	00092503          	lw	a0,0(s2)
200002da:	c925                	beqz	a0,2000034a <handler_irq_external+0x1ca>
200002dc:	e0010517          	auipc	a0,0xe0010
200002e0:	d6050513          	addi	a0,a0,-672 # 1003c <handler_irq_external.kLogFields.8>
200002e4:	a03d                	j	20000312 <handler_irq_external+0x192>
200002e6:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:116
  switch (plic_irq_id) {
200002e8:	1ea41063          	bne	s0,a0,200004c8 <handler_irq_external+0x348>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:133
      uart_irq_tx_empty_fired = true;
      uart_irq = kDifUartIrqTxEmpty;
      break;
    case kTopEarlgreyPlicIrqIdUart0RxOverflow:
      CHECK(exp_uart_irq_rx_overflow, "Unexpected RX overflow interrupt");
200002ec:	f0000517          	auipc	a0,0xf0000
200002f0:	d2650513          	addi	a0,a0,-730 # 10000012 <exp_uart_irq_rx_overflow>
200002f4:	00054503          	lbu	a0,0(a0)
200002f8:	440d                	li	s0,3
200002fa:	f0000497          	auipc	s1,0xf0000
200002fe:	d1948493          	addi	s1,s1,-743 # 10000013 <uart_irq_rx_overflow_fired>
20000302:	e93d                	bnez	a0,20000378 <handler_irq_external+0x1f8>
20000304:	00092503          	lw	a0,0(s2)
20000308:	c531                	beqz	a0,20000354 <handler_irq_external+0x1d4>
2000030a:	e0010517          	auipc	a0,0xe0010
2000030e:	d5a50513          	addi	a0,a0,-678 # 10064 <handler_irq_external.kLogFields.14>
20000312:	4581                	li	a1,0
20000314:	1c7010ef          	jal	ra,20001cda <base_log_internal_dv>
20000318:	a899                	j	2000036e <handler_irq_external+0x1ee>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:118
      CHECK(exp_uart_irq_tx_watermark, "Unexpected TX watermark interrupt");
2000031a:	00003597          	auipc	a1,0x3
2000031e:	85e58593          	addi	a1,a1,-1954 # 20002b78 <__udivdi3+0x390>
20000322:	0020                	addi	s0,sp,8
20000324:	4651                	li	a2,20
20000326:	8522                	mv	a0,s0
20000328:	3d8020ef          	jal	ra,20002700 <memcpy>
2000032c:	8522                	mv	a0,s0
2000032e:	103010ef          	jal	ra,20001c30 <base_log_internal_core>
20000332:	6531                	lui	a0,0xc
20000334:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000338:	725010ef          	jal	ra,2000225c <test_status_set>
2000033c:	4401                	li	s0,0
2000033e:	a82d                	j	20000378 <handler_irq_external+0x1f8>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:128
      CHECK(exp_uart_irq_tx_empty, "Unexpected TX empty interrupt");
20000340:	00003597          	auipc	a1,0x3
20000344:	86058593          	addi	a1,a1,-1952 # 20002ba0 <__udivdi3+0x3b8>
20000348:	a811                	j	2000035c <handler_irq_external+0x1dc>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:123
      CHECK(exp_uart_irq_rx_watermark, "Unexpected RX watermark interrupt");
2000034a:	00003597          	auipc	a1,0x3
2000034e:	84258593          	addi	a1,a1,-1982 # 20002b8c <__udivdi3+0x3a4>
20000352:	a029                	j	2000035c <handler_irq_external+0x1dc>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:133
      CHECK(exp_uart_irq_rx_overflow, "Unexpected RX overflow interrupt");
20000354:	00003597          	auipc	a1,0x3
20000358:	86058593          	addi	a1,a1,-1952 # 20002bb4 <__udivdi3+0x3cc>
2000035c:	00810993          	addi	s3,sp,8
20000360:	4651                	li	a2,20
20000362:	854e                	mv	a0,s3
20000364:	39c020ef          	jal	ra,20002700 <memcpy>
20000368:	854e                	mv	a0,s3
2000036a:	0c7010ef          	jal	ra,20001c30 <base_log_internal_core>
2000036e:	6531                	lui	a0,0xc
20000370:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000374:	6e9010ef          	jal	ra,2000225c <test_status_set>
20000378:	4505                	li	a0,1
2000037a:	00a48023          	sb	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:148
      abort();
  }

  // Check if the same interrupt fired at UART as well.
  bool is_pending;
  CHECK(dif_uart_irq_is_pending(&uart, uart_irq, &is_pending) == kDifUartOk,
2000037e:	f0000517          	auipc	a0,0xf0000
20000382:	c9650513          	addi	a0,a0,-874 # 10000014 <uart>
20000386:	00710613          	addi	a2,sp,7
2000038a:	85a2                	mv	a1,s0
2000038c:	386010ef          	jal	ra,20001712 <dif_uart_irq_is_pending>
20000390:	cd0d                	beqz	a0,200003ca <handler_irq_external+0x24a>
20000392:	00092503          	lw	a0,0(s2)
20000396:	c909                	beqz	a0,200003a8 <handler_irq_external+0x228>
20000398:	e0010517          	auipc	a0,0xe0010
2000039c:	cf450513          	addi	a0,a0,-780 # 1008c <handler_irq_external.kLogFields.20>
200003a0:	4581                	li	a1,0
200003a2:	139010ef          	jal	ra,20001cda <base_log_internal_dv>
200003a6:	a829                	j	200003c0 <handler_irq_external+0x240>
200003a8:	00003597          	auipc	a1,0x3
200003ac:	83458593          	addi	a1,a1,-1996 # 20002bdc <__udivdi3+0x3f4>
200003b0:	0024                	addi	s1,sp,8
200003b2:	4651                	li	a2,20
200003b4:	8526                	mv	a0,s1
200003b6:	34a020ef          	jal	ra,20002700 <memcpy>
200003ba:	8526                	mv	a0,s1
200003bc:	075010ef          	jal	ra,20001c30 <base_log_internal_core>
200003c0:	6531                	lui	a0,0xc
200003c2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200003c6:	697010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:150
        "dif_uart_irq_is_pending failed");
  CHECK(is_pending, "UART interrupt fired at PLIC did not fire at UART");
200003ca:	00714503          	lbu	a0,7(sp)
200003ce:	ed0d                	bnez	a0,20000408 <handler_irq_external+0x288>
200003d0:	00092503          	lw	a0,0(s2)
200003d4:	c909                	beqz	a0,200003e6 <handler_irq_external+0x266>
200003d6:	e0010517          	auipc	a0,0xe0010
200003da:	cca50513          	addi	a0,a0,-822 # 100a0 <handler_irq_external.kLogFields.23>
200003de:	4581                	li	a1,0
200003e0:	0fb010ef          	jal	ra,20001cda <base_log_internal_dv>
200003e4:	a829                	j	200003fe <handler_irq_external+0x27e>
200003e6:	00003597          	auipc	a1,0x3
200003ea:	80a58593          	addi	a1,a1,-2038 # 20002bf0 <__udivdi3+0x408>
200003ee:	0024                	addi	s1,sp,8
200003f0:	4651                	li	a2,20
200003f2:	8526                	mv	a0,s1
200003f4:	30c020ef          	jal	ra,20002700 <memcpy>
200003f8:	8526                	mv	a0,s1
200003fa:	037010ef          	jal	ra,20001c30 <base_log_internal_core>
200003fe:	6531                	lui	a0,0xc
20000400:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000404:	659010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:153

  // Clear the interrupt at UART.
  CHECK(dif_uart_irq_acknowledge(&uart, uart_irq) == kDifUartOk,
20000408:	f0000517          	auipc	a0,0xf0000
2000040c:	c0c50513          	addi	a0,a0,-1012 # 10000014 <uart>
20000410:	85a2                	mv	a1,s0
20000412:	34c010ef          	jal	ra,2000175e <dif_uart_irq_acknowledge>
20000416:	cd0d                	beqz	a0,20000450 <handler_irq_external+0x2d0>
20000418:	00092503          	lw	a0,0(s2)
2000041c:	c909                	beqz	a0,2000042e <handler_irq_external+0x2ae>
2000041e:	e0010517          	auipc	a0,0xe0010
20000422:	c9650513          	addi	a0,a0,-874 # 100b4 <handler_irq_external.kLogFields.26>
20000426:	4581                	li	a1,0
20000428:	0b3010ef          	jal	ra,20001cda <base_log_internal_dv>
2000042c:	a829                	j	20000446 <handler_irq_external+0x2c6>
2000042e:	00002597          	auipc	a1,0x2
20000432:	7d658593          	addi	a1,a1,2006 # 20002c04 <__udivdi3+0x41c>
20000436:	0020                	addi	s0,sp,8
20000438:	4651                	li	a2,20
2000043a:	8522                	mv	a0,s0
2000043c:	2c4020ef          	jal	ra,20002700 <memcpy>
20000440:	8522                	mv	a0,s0
20000442:	7ee010ef          	jal	ra,20001c30 <base_log_internal_core>
20000446:	6531                	lui	a0,0xc
20000448:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000044c:	611010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:157
        "dif_uart_irq_acknowledge failed");

  // Complete the IRQ at PLIC.
  CHECK(dif_plic_irq_complete(&plic, kTopEarlgreyPlicTargetIbex0,
20000450:	f0000517          	auipc	a0,0xf0000
20000454:	bb850513          	addi	a0,a0,-1096 # 10000008 <_data_end>
20000458:	0870                	addi	a2,sp,28
2000045a:	4581                	li	a1,0
2000045c:	778010ef          	jal	ra,20001bd4 <dif_plic_irq_complete>
20000460:	cd0d                	beqz	a0,2000049a <handler_irq_external+0x31a>
20000462:	00092503          	lw	a0,0(s2)
20000466:	c909                	beqz	a0,20000478 <handler_irq_external+0x2f8>
20000468:	e0010517          	auipc	a0,0xe0010
2000046c:	c6050513          	addi	a0,a0,-928 # 100c8 <handler_irq_external.kLogFields.29>
20000470:	4581                	li	a1,0
20000472:	069010ef          	jal	ra,20001cda <base_log_internal_dv>
20000476:	a829                	j	20000490 <handler_irq_external+0x310>
20000478:	00002597          	auipc	a1,0x2
2000047c:	7a058593          	addi	a1,a1,1952 # 20002c18 <__udivdi3+0x430>
20000480:	0020                	addi	s0,sp,8
20000482:	4651                	li	a2,20
20000484:	8522                	mv	a0,s0
20000486:	27a020ef          	jal	ra,20002700 <memcpy>
2000048a:	8522                	mv	a0,s0
2000048c:	7a4010ef          	jal	ra,20001c30 <base_log_internal_core>
20000490:	6531                	lui	a0,0xc
20000492:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000496:	5c7010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:160
                              &plic_irq_id) == kDifPlicOk,
        "dif_plic_irq_complete failed");
}
2000049a:	5f82                	lw	t6,32(sp)
2000049c:	5f12                	lw	t5,36(sp)
2000049e:	5ea2                	lw	t4,40(sp)
200004a0:	5e32                	lw	t3,44(sp)
200004a2:	59c2                	lw	s3,48(sp)
200004a4:	5952                	lw	s2,52(sp)
200004a6:	58e2                	lw	a7,56(sp)
200004a8:	5872                	lw	a6,60(sp)
200004aa:	4786                	lw	a5,64(sp)
200004ac:	4716                	lw	a4,68(sp)
200004ae:	46a6                	lw	a3,72(sp)
200004b0:	4636                	lw	a2,76(sp)
200004b2:	45c6                	lw	a1,80(sp)
200004b4:	4556                	lw	a0,84(sp)
200004b6:	44e6                	lw	s1,88(sp)
200004b8:	4476                	lw	s0,92(sp)
200004ba:	5386                	lw	t2,96(sp)
200004bc:	5316                	lw	t1,100(sp)
200004be:	52a6                	lw	t0,104(sp)
200004c0:	50b6                	lw	ra,108(sp)
200004c2:	6165                	addi	sp,sp,112
200004c4:	30200073          	mret
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:138
      LOG_ERROR("Unexpected interrupt (at PLIC): %d", plic_irq_id);
200004c8:	00092503          	lw	a0,0(s2)
200004cc:	ed19                	bnez	a0,200004ea <handler_irq_external+0x36a>
200004ce:	00002597          	auipc	a1,0x2
200004d2:	6fa58593          	addi	a1,a1,1786 # 20002bc8 <__udivdi3+0x3e0>
200004d6:	0024                	addi	s1,sp,8
200004d8:	4651                	li	a2,20
200004da:	8526                	mv	a0,s1
200004dc:	224020ef          	jal	ra,20002700 <memcpy>
200004e0:	8526                	mv	a0,s1
200004e2:	85a2                	mv	a1,s0
200004e4:	74c010ef          	jal	ra,20001c30 <base_log_internal_core>
200004e8:	a809                	j	200004fa <handler_irq_external+0x37a>
200004ea:	e0010517          	auipc	a0,0xe0010
200004ee:	b8e50513          	addi	a0,a0,-1138 # 10078 <handler_irq_external.kLogFields.17>
200004f2:	4585                	li	a1,1
200004f4:	8622                	mv	a2,s0
200004f6:	7e4010ef          	jal	ra,20001cda <base_log_internal_dv>
200004fa:	6531                	lui	a0,0xc
200004fc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:139
      test_status_set(kTestStatusFailed);
20000500:	55d010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:143
      abort();
20000504:	553010ef          	jal	ra,20002256 <abort>

20000508 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:446
  return true;
}

const test_config_t kTestConfig;

bool test_main(void) {
20000508:	7111                	addi	sp,sp,-256
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:447
  LOG_INFO("UART TX RX test");
2000050a:	df86                	sw	ra,252(sp)
2000050c:	dda2                	sw	s0,248(sp)
2000050e:	dba6                	sw	s1,244(sp)
20000510:	d9ca                	sw	s2,240(sp)
20000512:	d7ce                	sw	s3,236(sp)
20000514:	d5d2                	sw	s4,232(sp)
20000516:	d3d6                	sw	s5,228(sp)
20000518:	d1da                	sw	s6,224(sp)
2000051a:	cfde                	sw	s7,220(sp)
2000051c:	cde2                	sw	s8,216(sp)
2000051e:	cbe6                	sw	s9,212(sp)
20000520:	c9ea                	sw	s10,208(sp)
20000522:	c7ee                	sw	s11,204(sp)
20000524:	00003517          	auipc	a0,0x3
20000528:	02450513          	addi	a0,a0,36 # 20003548 <kDeviceLogBypassUartAddress>
2000052c:	4108                	lw	a0,0(a0)
2000052e:	d62a                	sw	a0,44(sp)
20000530:	c121                	beqz	a0,20000570 <test_main+0x68>
20000532:	e0010517          	auipc	a0,0xe0010
20000536:	baa50513          	addi	a0,a0,-1110 # 100dc <test_main.kLogFields>
2000053a:	4581                	li	a1,0
2000053c:	79e010ef          	jal	ra,20001cda <base_log_internal_dv>
uart_init_with_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:166
  LOG_INFO("Initializing the UART.");
20000540:	e0010517          	auipc	a0,0xe0010
20000544:	bb050513          	addi	a0,a0,-1104 # 100f0 <uart_init_with_irqs.kLogFields>
20000548:	4581                	li	a1,0
2000054a:	790010ef          	jal	ra,20001cda <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:168
  CHECK(dif_uart_init(
2000054e:	f0000597          	auipc	a1,0xf0000
20000552:	ac658593          	addi	a1,a1,-1338 # 10000014 <uart>
20000556:	40000537          	lui	a0,0x40000
2000055a:	122010ef          	jal	ra,2000167c <dif_uart_init>
2000055e:	c93d                	beqz	a0,200005d4 <test_main+0xcc>
20000560:	e0010517          	auipc	a0,0xe0010
20000564:	ba450513          	addi	a0,a0,-1116 # 10104 <uart_init_with_irqs.kLogFields.34>
20000568:	4581                	li	a1,0
2000056a:	770010ef          	jal	ra,20001cda <base_log_internal_dv>
2000056e:	a8b1                	j	200005ca <test_main+0xc2>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:447
  LOG_INFO("UART TX RX test");
20000570:	00002597          	auipc	a1,0x2
20000574:	6bc58593          	addi	a1,a1,1724 # 20002c2c <__udivdi3+0x444>
20000578:	00a0                	addi	s0,sp,72
2000057a:	4651                	li	a2,20
2000057c:	8522                	mv	a0,s0
2000057e:	182020ef          	jal	ra,20002700 <memcpy>
20000582:	8522                	mv	a0,s0
20000584:	6ac010ef          	jal	ra,20001c30 <base_log_internal_core>
uart_init_with_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:166
  LOG_INFO("Initializing the UART.");
20000588:	00002597          	auipc	a1,0x2
2000058c:	6bc58593          	addi	a1,a1,1724 # 20002c44 <kTestConfig+0x4>
20000590:	00a0                	addi	s0,sp,72
20000592:	4651                	li	a2,20
20000594:	8522                	mv	a0,s0
20000596:	16a020ef          	jal	ra,20002700 <memcpy>
2000059a:	8522                	mv	a0,s0
2000059c:	694010ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:168
  CHECK(dif_uart_init(
200005a0:	f0000597          	auipc	a1,0xf0000
200005a4:	a7458593          	addi	a1,a1,-1420 # 10000014 <uart>
200005a8:	40000537          	lui	a0,0x40000
200005ac:	0d0010ef          	jal	ra,2000167c <dif_uart_init>
200005b0:	c115                	beqz	a0,200005d4 <test_main+0xcc>
200005b2:	00002597          	auipc	a1,0x2
200005b6:	6a658593          	addi	a1,a1,1702 # 20002c58 <kTestConfig+0x18>
200005ba:	00a0                	addi	s0,sp,72
200005bc:	4651                	li	a2,20
200005be:	8522                	mv	a0,s0
200005c0:	140020ef          	jal	ra,20002700 <memcpy>
200005c4:	8522                	mv	a0,s0
200005c6:	66a010ef          	jal	ra,20001c30 <base_log_internal_core>
200005ca:	6531                	lui	a0,0xc
200005cc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005d0:	48d010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:174
  CHECK(dif_uart_configure(uart,
200005d4:	00003517          	auipc	a0,0x3
200005d8:	f6450513          	addi	a0,a0,-156 # 20003538 <kUartBaudrate>
200005dc:	4108                	lw	a0,0(a0)
200005de:	00003597          	auipc	a1,0x3
200005e2:	f4a58593          	addi	a1,a1,-182 # 20003528 <kClockFreqPeripheralHz>
200005e6:	418c                	lw	a1,0(a1)
200005e8:	c4aa                	sw	a0,72(sp)
200005ea:	c6ae                	sw	a1,76(sp)
200005ec:	4505                	li	a0,1
200005ee:	c8aa                	sw	a0,80(sp)
200005f0:	caaa                	sw	a0,84(sp)
200005f2:	f0000517          	auipc	a0,0xf0000
200005f6:	a2250513          	addi	a0,a0,-1502 # 10000014 <uart>
200005fa:	00ac                	addi	a1,sp,72
200005fc:	08e010ef          	jal	ra,2000168a <dif_uart_configure>
20000600:	cd05                	beqz	a0,20000638 <test_main+0x130>
20000602:	5532                	lw	a0,44(sp)
20000604:	c909                	beqz	a0,20000616 <test_main+0x10e>
20000606:	e0010517          	auipc	a0,0xe0010
2000060a:	b1250513          	addi	a0,a0,-1262 # 10118 <uart_init_with_irqs.kLogFields.37>
2000060e:	4581                	li	a1,0
20000610:	6ca010ef          	jal	ra,20001cda <base_log_internal_dv>
20000614:	a829                	j	2000062e <test_main+0x126>
20000616:	00002597          	auipc	a1,0x2
2000061a:	65658593          	addi	a1,a1,1622 # 20002c6c <kTestConfig+0x2c>
2000061e:	00a0                	addi	s0,sp,72
20000620:	4651                	li	a2,20
20000622:	8522                	mv	a0,s0
20000624:	0dc020ef          	jal	ra,20002700 <memcpy>
20000628:	8522                	mv	a0,s0
2000062a:	606010ef          	jal	ra,20001c30 <base_log_internal_core>
2000062e:	6531                	lui	a0,0xc
20000630:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000634:	429010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:184
  CHECK(dif_uart_watermark_tx_set(uart, kDifUartWatermarkByte16) == kDifUartOk,
20000638:	f0000517          	auipc	a0,0xf0000
2000063c:	9dc50513          	addi	a0,a0,-1572 # 10000014 <uart>
20000640:	458d                	li	a1,3
20000642:	252010ef          	jal	ra,20001894 <dif_uart_watermark_tx_set>
20000646:	cd05                	beqz	a0,2000067e <test_main+0x176>
20000648:	5532                	lw	a0,44(sp)
2000064a:	c909                	beqz	a0,2000065c <test_main+0x154>
2000064c:	e0010517          	auipc	a0,0xe0010
20000650:	ae050513          	addi	a0,a0,-1312 # 1012c <uart_init_with_irqs.kLogFields.40>
20000654:	4581                	li	a1,0
20000656:	684010ef          	jal	ra,20001cda <base_log_internal_dv>
2000065a:	a829                	j	20000674 <test_main+0x16c>
2000065c:	00002597          	auipc	a1,0x2
20000660:	62458593          	addi	a1,a1,1572 # 20002c80 <kTestConfig+0x40>
20000664:	00a0                	addi	s0,sp,72
20000666:	4651                	li	a2,20
20000668:	8522                	mv	a0,s0
2000066a:	096020ef          	jal	ra,20002700 <memcpy>
2000066e:	8522                	mv	a0,s0
20000670:	5c0010ef          	jal	ra,20001c30 <base_log_internal_core>
20000674:	6531                	lui	a0,0xc
20000676:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000067a:	3e3010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:186
  CHECK(dif_uart_watermark_rx_set(uart, kDifUartWatermarkByte16) == kDifUartOk,
2000067e:	f0000517          	auipc	a0,0xf0000
20000682:	99650513          	addi	a0,a0,-1642 # 10000014 <uart>
20000686:	458d                	li	a1,3
20000688:	1ec010ef          	jal	ra,20001874 <dif_uart_watermark_rx_set>
2000068c:	cd05                	beqz	a0,200006c4 <test_main+0x1bc>
2000068e:	5532                	lw	a0,44(sp)
20000690:	c909                	beqz	a0,200006a2 <test_main+0x19a>
20000692:	e0010517          	auipc	a0,0xe0010
20000696:	aae50513          	addi	a0,a0,-1362 # 10140 <uart_init_with_irqs.kLogFields.43>
2000069a:	4581                	li	a1,0
2000069c:	63e010ef          	jal	ra,20001cda <base_log_internal_dv>
200006a0:	a829                	j	200006ba <test_main+0x1b2>
200006a2:	00002597          	auipc	a1,0x2
200006a6:	5f258593          	addi	a1,a1,1522 # 20002c94 <kTestConfig+0x54>
200006aa:	00a0                	addi	s0,sp,72
200006ac:	4651                	li	a2,20
200006ae:	8522                	mv	a0,s0
200006b0:	050020ef          	jal	ra,20002700 <memcpy>
200006b4:	8522                	mv	a0,s0
200006b6:	57a010ef          	jal	ra,20001c30 <base_log_internal_core>
200006ba:	6531                	lui	a0,0xc
200006bc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200006c0:	39d010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:190
  CHECK(dif_uart_irq_set_enabled(uart, kDifUartIrqTxWatermark,
200006c4:	f0000517          	auipc	a0,0xf0000
200006c8:	95050513          	addi	a0,a0,-1712 # 10000014 <uart>
200006cc:	4581                	li	a1,0
200006ce:	4601                	li	a2,0
200006d0:	128010ef          	jal	ra,200017f8 <dif_uart_irq_set_enabled>
200006d4:	cd05                	beqz	a0,2000070c <test_main+0x204>
200006d6:	5532                	lw	a0,44(sp)
200006d8:	c909                	beqz	a0,200006ea <test_main+0x1e2>
200006da:	e0010517          	auipc	a0,0xe0010
200006de:	a7a50513          	addi	a0,a0,-1414 # 10154 <uart_init_with_irqs.kLogFields.46>
200006e2:	4581                	li	a1,0
200006e4:	5f6010ef          	jal	ra,20001cda <base_log_internal_dv>
200006e8:	a829                	j	20000702 <test_main+0x1fa>
200006ea:	00002597          	auipc	a1,0x2
200006ee:	5be58593          	addi	a1,a1,1470 # 20002ca8 <kTestConfig+0x68>
200006f2:	00a0                	addi	s0,sp,72
200006f4:	4651                	li	a2,20
200006f6:	8522                	mv	a0,s0
200006f8:	008020ef          	jal	ra,20002700 <memcpy>
200006fc:	8522                	mv	a0,s0
200006fe:	532010ef          	jal	ra,20001c30 <base_log_internal_core>
20000702:	6531                	lui	a0,0xc
20000704:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000708:	355010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:193
  CHECK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
2000070c:	f0000517          	auipc	a0,0xf0000
20000710:	90850513          	addi	a0,a0,-1784 # 10000014 <uart>
20000714:	4585                	li	a1,1
20000716:	4601                	li	a2,0
20000718:	0e0010ef          	jal	ra,200017f8 <dif_uart_irq_set_enabled>
2000071c:	cd05                	beqz	a0,20000754 <test_main+0x24c>
2000071e:	5532                	lw	a0,44(sp)
20000720:	c909                	beqz	a0,20000732 <test_main+0x22a>
20000722:	e0010517          	auipc	a0,0xe0010
20000726:	a4650513          	addi	a0,a0,-1466 # 10168 <uart_init_with_irqs.kLogFields.49>
2000072a:	4581                	li	a1,0
2000072c:	5ae010ef          	jal	ra,20001cda <base_log_internal_dv>
20000730:	a829                	j	2000074a <test_main+0x242>
20000732:	00002597          	auipc	a1,0x2
20000736:	58a58593          	addi	a1,a1,1418 # 20002cbc <kTestConfig+0x7c>
2000073a:	00a0                	addi	s0,sp,72
2000073c:	4651                	li	a2,20
2000073e:	8522                	mv	a0,s0
20000740:	7c1010ef          	jal	ra,20002700 <memcpy>
20000744:	8522                	mv	a0,s0
20000746:	4ea010ef          	jal	ra,20001c30 <base_log_internal_core>
2000074a:	6531                	lui	a0,0xc
2000074c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000750:	30d010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:196
  CHECK(dif_uart_irq_set_enabled(uart, kDifUartIrqTxEmpty,
20000754:	f0000517          	auipc	a0,0xf0000
20000758:	8c050513          	addi	a0,a0,-1856 # 10000014 <uart>
2000075c:	4589                	li	a1,2
2000075e:	4601                	li	a2,0
20000760:	098010ef          	jal	ra,200017f8 <dif_uart_irq_set_enabled>
20000764:	cd05                	beqz	a0,2000079c <test_main+0x294>
20000766:	5532                	lw	a0,44(sp)
20000768:	c909                	beqz	a0,2000077a <test_main+0x272>
2000076a:	e0010517          	auipc	a0,0xe0010
2000076e:	a1250513          	addi	a0,a0,-1518 # 1017c <uart_init_with_irqs.kLogFields.51>
20000772:	4581                	li	a1,0
20000774:	566010ef          	jal	ra,20001cda <base_log_internal_dv>
20000778:	a829                	j	20000792 <test_main+0x28a>
2000077a:	00002597          	auipc	a1,0x2
2000077e:	55658593          	addi	a1,a1,1366 # 20002cd0 <kTestConfig+0x90>
20000782:	00a0                	addi	s0,sp,72
20000784:	4651                	li	a2,20
20000786:	8522                	mv	a0,s0
20000788:	779010ef          	jal	ra,20002700 <memcpy>
2000078c:	8522                	mv	a0,s0
2000078e:	4a2010ef          	jal	ra,20001c30 <base_log_internal_core>
20000792:	6531                	lui	a0,0xc
20000794:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000798:	2c5010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:199
  CHECK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxOverflow,
2000079c:	f0000517          	auipc	a0,0xf0000
200007a0:	87850513          	addi	a0,a0,-1928 # 10000014 <uart>
200007a4:	458d                	li	a1,3
200007a6:	4601                	li	a2,0
200007a8:	050010ef          	jal	ra,200017f8 <dif_uart_irq_set_enabled>
200007ac:	cd05                	beqz	a0,200007e4 <test_main+0x2dc>
200007ae:	5532                	lw	a0,44(sp)
200007b0:	c909                	beqz	a0,200007c2 <test_main+0x2ba>
200007b2:	e0010517          	auipc	a0,0xe0010
200007b6:	9de50513          	addi	a0,a0,-1570 # 10190 <uart_init_with_irqs.kLogFields.53>
200007ba:	4581                	li	a1,0
200007bc:	51e010ef          	jal	ra,20001cda <base_log_internal_dv>
200007c0:	a829                	j	200007da <test_main+0x2d2>
200007c2:	00002597          	auipc	a1,0x2
200007c6:	52258593          	addi	a1,a1,1314 # 20002ce4 <kTestConfig+0xa4>
200007ca:	00a0                	addi	s0,sp,72
200007cc:	4651                	li	a2,20
200007ce:	8522                	mv	a0,s0
200007d0:	731010ef          	jal	ra,20002700 <memcpy>
200007d4:	8522                	mv	a0,s0
200007d6:	45a010ef          	jal	ra,20001c30 <base_log_internal_core>
200007da:	6531                	lui	a0,0xc
200007dc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007e0:	27d010ef          	jal	ra,2000225c <test_status_set>
plic_init_with_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:208
  LOG_INFO("Initializing the PLIC.");
200007e4:	5532                	lw	a0,44(sp)
200007e6:	c90d                	beqz	a0,20000818 <test_main+0x310>
200007e8:	e0010517          	auipc	a0,0xe0010
200007ec:	9bc50513          	addi	a0,a0,-1604 # 101a4 <plic_init_with_irqs.kLogFields>
200007f0:	4581                	li	a1,0
200007f2:	4e8010ef          	jal	ra,20001cda <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:210
  CHECK(dif_plic_init((dif_plic_params_t){.base_addr = base_addr}, plic) ==
200007f6:	f0000597          	auipc	a1,0xf0000
200007fa:	81258593          	addi	a1,a1,-2030 # 10000008 <_data_end>
200007fe:	41010537          	lui	a0,0x41010
20000802:	242010ef          	jal	ra,20001a44 <dif_plic_init>
20000806:	c93d                	beqz	a0,2000087c <test_main+0x374>
20000808:	e0010517          	auipc	a0,0xe0010
2000080c:	9b050513          	addi	a0,a0,-1616 # 101b8 <plic_init_with_irqs.kLogFields.56>
20000810:	4581                	li	a1,0
20000812:	4c8010ef          	jal	ra,20001cda <base_log_internal_dv>
20000816:	a091                	j	2000085a <test_main+0x352>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:208
  LOG_INFO("Initializing the PLIC.");
20000818:	00002597          	auipc	a1,0x2
2000081c:	4e058593          	addi	a1,a1,1248 # 20002cf8 <kTestConfig+0xb8>
20000820:	00a0                	addi	s0,sp,72
20000822:	4651                	li	a2,20
20000824:	8522                	mv	a0,s0
20000826:	6db010ef          	jal	ra,20002700 <memcpy>
2000082a:	8522                	mv	a0,s0
2000082c:	404010ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:210
  CHECK(dif_plic_init((dif_plic_params_t){.base_addr = base_addr}, plic) ==
20000830:	effff597          	auipc	a1,0xeffff
20000834:	7d858593          	addi	a1,a1,2008 # 10000008 <_data_end>
20000838:	41010537          	lui	a0,0x41010
2000083c:	208010ef          	jal	ra,20001a44 <dif_plic_init>
20000840:	cd39                	beqz	a0,2000089e <test_main+0x396>
20000842:	00002597          	auipc	a1,0x2
20000846:	4ca58593          	addi	a1,a1,1226 # 20002d0c <kTestConfig+0xcc>
2000084a:	00a0                	addi	s0,sp,72
2000084c:	4651                	li	a2,20
2000084e:	8522                	mv	a0,s0
20000850:	6b1010ef          	jal	ra,20002700 <memcpy>
20000854:	8522                	mv	a0,s0
20000856:	3da010ef          	jal	ra,20001c30 <base_log_internal_core>
2000085a:	6531                	lui	a0,0xc
2000085c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000860:	1fd010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:215
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0TxWatermark,
20000864:	effff517          	auipc	a0,0xeffff
20000868:	7a450513          	addi	a0,a0,1956 # 10000008 <_data_end>
2000086c:	4585                	li	a1,1
2000086e:	4601                	li	a2,0
20000870:	2a6010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000874:	c125                	beqz	a0,200008d4 <test_main+0x3cc>
20000876:	5532                	lw	a0,44(sp)
20000878:	e919                	bnez	a0,2000088e <test_main+0x386>
2000087a:	a825                	j	200008b2 <test_main+0x3aa>
2000087c:	effff517          	auipc	a0,0xeffff
20000880:	78c50513          	addi	a0,a0,1932 # 10000008 <_data_end>
20000884:	4585                	li	a1,1
20000886:	4601                	li	a2,0
20000888:	28e010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
2000088c:	c92d                	beqz	a0,200008fe <test_main+0x3f6>
2000088e:	e0010517          	auipc	a0,0xe0010
20000892:	93e50513          	addi	a0,a0,-1730 # 101cc <plic_init_with_irqs.kLogFields.59>
20000896:	4581                	li	a1,0
20000898:	442010ef          	jal	ra,20001cda <base_log_internal_dv>
2000089c:	a03d                	j	200008ca <test_main+0x3c2>
2000089e:	effff517          	auipc	a0,0xeffff
200008a2:	76a50513          	addi	a0,a0,1898 # 10000008 <_data_end>
200008a6:	4585                	li	a1,1
200008a8:	4601                	li	a2,0
200008aa:	26c010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
200008ae:	24050163          	beqz	a0,20000af0 <test_main+0x5e8>
200008b2:	00002597          	auipc	a1,0x2
200008b6:	46e58593          	addi	a1,a1,1134 # 20002d20 <kTestConfig+0xe0>
200008ba:	00a0                	addi	s0,sp,72
200008bc:	4651                	li	a2,20
200008be:	8522                	mv	a0,s0
200008c0:	641010ef          	jal	ra,20002700 <memcpy>
200008c4:	8522                	mv	a0,s0
200008c6:	36a010ef          	jal	ra,20001c30 <base_log_internal_core>
200008ca:	6531                	lui	a0,0xc
200008cc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008d0:	18d010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:218
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxWatermark,
200008d4:	effff517          	auipc	a0,0xeffff
200008d8:	73450513          	addi	a0,a0,1844 # 10000008 <_data_end>
200008dc:	4589                	li	a1,2
200008de:	4601                	li	a2,0
200008e0:	236010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
200008e4:	24050063          	beqz	a0,20000b24 <test_main+0x61c>
200008e8:	5532                	lw	a0,44(sp)
200008ea:	20050c63          	beqz	a0,20000b02 <test_main+0x5fa>
200008ee:	e0010517          	auipc	a0,0xe0010
200008f2:	8f250513          	addi	a0,a0,-1806 # 101e0 <plic_init_with_irqs.kLogFields.62>
200008f6:	4581                	li	a1,0
200008f8:	3e2010ef          	jal	ra,20001cda <base_log_internal_dv>
200008fc:	ac39                	j	20000b1a <test_main+0x612>
200008fe:	effff517          	auipc	a0,0xeffff
20000902:	70a50513          	addi	a0,a0,1802 # 10000008 <_data_end>
20000906:	4589                	li	a1,2
20000908:	4601                	li	a2,0
2000090a:	20c010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
2000090e:	f165                	bnez	a0,200008ee <test_main+0x3e6>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:221
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
20000910:	effff517          	auipc	a0,0xeffff
20000914:	6f850513          	addi	a0,a0,1784 # 10000008 <_data_end>
20000918:	458d                	li	a1,3
2000091a:	4601                	li	a2,0
2000091c:	1fa010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000920:	20051d63          	bnez	a0,20000b3a <test_main+0x632>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:224
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
20000924:	effff517          	auipc	a0,0xeffff
20000928:	6e450513          	addi	a0,a0,1764 # 10000008 <_data_end>
2000092c:	4591                	li	a1,4
2000092e:	4601                	li	a2,0
20000930:	1e6010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000934:	26051063          	bnez	a0,20000b94 <test_main+0x68c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:227
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxFrameErr,
20000938:	effff517          	auipc	a0,0xeffff
2000093c:	6d050513          	addi	a0,a0,1744 # 10000008 <_data_end>
20000940:	4595                	li	a1,5
20000942:	4601                	li	a2,0
20000944:	1d2010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000948:	2a051363          	bnez	a0,20000bee <test_main+0x6e6>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:230
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxBreakErr,
2000094c:	effff517          	auipc	a0,0xeffff
20000950:	6bc50513          	addi	a0,a0,1724 # 10000008 <_data_end>
20000954:	4599                	li	a1,6
20000956:	4601                	li	a2,0
20000958:	1be010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
2000095c:	2e051663          	bnez	a0,20000c48 <test_main+0x740>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:233
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxTimeout,
20000960:	effff517          	auipc	a0,0xeffff
20000964:	6a850513          	addi	a0,a0,1704 # 10000008 <_data_end>
20000968:	459d                	li	a1,7
2000096a:	4601                	li	a2,0
2000096c:	1aa010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000970:	32051963          	bnez	a0,20000ca2 <test_main+0x79a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:236
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxParityErr,
20000974:	effff517          	auipc	a0,0xeffff
20000978:	69450513          	addi	a0,a0,1684 # 10000008 <_data_end>
2000097c:	45a1                	li	a1,8
2000097e:	4601                	li	a2,0
20000980:	196010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000984:	36051c63          	bnez	a0,20000cfc <test_main+0x7f4>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:242
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0TxWatermark,
20000988:	effff517          	auipc	a0,0xeffff
2000098c:	68050513          	addi	a0,a0,1664 # 10000008 <_data_end>
20000990:	4585                	li	a1,1
20000992:	4605                	li	a2,1
20000994:	1c2010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000998:	3a051f63          	bnez	a0,20000d56 <test_main+0x84e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:245
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxWatermark,
2000099c:	effff517          	auipc	a0,0xeffff
200009a0:	66c50513          	addi	a0,a0,1644 # 10000008 <_data_end>
200009a4:	4589                	li	a1,2
200009a6:	4609                	li	a2,2
200009a8:	1ae010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
200009ac:	40051263          	bnez	a0,20000db0 <test_main+0x8a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:248
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
200009b0:	effff517          	auipc	a0,0xeffff
200009b4:	65850513          	addi	a0,a0,1624 # 10000008 <_data_end>
200009b8:	458d                	li	a1,3
200009ba:	460d                	li	a2,3
200009bc:	19a010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
200009c0:	44051563          	bnez	a0,20000e0a <test_main+0x902>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:251
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
200009c4:	effff517          	auipc	a0,0xeffff
200009c8:	64450513          	addi	a0,a0,1604 # 10000008 <_data_end>
200009cc:	4591                	li	a1,4
200009ce:	4605                	li	a2,1
200009d0:	186010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
200009d4:	4a051063          	bnez	a0,20000e74 <test_main+0x96c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:254
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxFrameErr,
200009d8:	effff517          	auipc	a0,0xeffff
200009dc:	63050513          	addi	a0,a0,1584 # 10000008 <_data_end>
200009e0:	4595                	li	a1,5
200009e2:	4609                	li	a2,2
200009e4:	172010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
200009e8:	4e051363          	bnez	a0,20000ece <test_main+0x9c6>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:257
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxBreakErr,
200009ec:	effff517          	auipc	a0,0xeffff
200009f0:	61c50513          	addi	a0,a0,1564 # 10000008 <_data_end>
200009f4:	4599                	li	a1,6
200009f6:	460d                	li	a2,3
200009f8:	15e010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
200009fc:	52051663          	bnez	a0,20000f28 <test_main+0xa20>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:260
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxTimeout,
20000a00:	effff517          	auipc	a0,0xeffff
20000a04:	60850513          	addi	a0,a0,1544 # 10000008 <_data_end>
20000a08:	459d                	li	a1,7
20000a0a:	4605                	li	a2,1
20000a0c:	14a010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000a10:	56051963          	bnez	a0,20000f82 <test_main+0xa7a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:263
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxParityErr,
20000a14:	effff517          	auipc	a0,0xeffff
20000a18:	5f450513          	addi	a0,a0,1524 # 10000008 <_data_end>
20000a1c:	45a1                	li	a1,8
20000a1e:	4609                	li	a2,2
20000a20:	136010ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000a24:	5a051c63          	bnez	a0,20000fdc <test_main+0xad4>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:268
  CHECK(dif_plic_target_set_threshold(plic, kTopEarlgreyPlicTargetIbex0, 0x0) ==
20000a28:	effff517          	auipc	a0,0xeffff
20000a2c:	5e050513          	addi	a0,a0,1504 # 10000008 <_data_end>
20000a30:	4581                	li	a1,0
20000a32:	4601                	li	a2,0
20000a34:	142010ef          	jal	ra,20001b76 <dif_plic_target_set_threshold>
20000a38:	5e051f63          	bnez	a0,20001036 <test_main+0xb2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:273
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0TxWatermark,
20000a3c:	effff517          	auipc	a0,0xeffff
20000a40:	5cc50513          	addi	a0,a0,1484 # 10000008 <_data_end>
20000a44:	4585                	li	a1,1
20000a46:	4601                	li	a2,0
20000a48:	4681                	li	a3,0
20000a4a:	086010ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000a4e:	64051263          	bnez	a0,20001092 <test_main+0xb8a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:278
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxWatermark,
20000a52:	effff517          	auipc	a0,0xeffff
20000a56:	5b650513          	addi	a0,a0,1462 # 10000008 <_data_end>
20000a5a:	4589                	li	a1,2
20000a5c:	4601                	li	a2,0
20000a5e:	4681                	li	a3,0
20000a60:	070010ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000a64:	68051663          	bnez	a0,200010f0 <test_main+0xbe8>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:283
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
20000a68:	effff517          	auipc	a0,0xeffff
20000a6c:	5a050513          	addi	a0,a0,1440 # 10000008 <_data_end>
20000a70:	458d                	li	a1,3
20000a72:	4601                	li	a2,0
20000a74:	4681                	li	a3,0
20000a76:	05a010ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000a7a:	6c051a63          	bnez	a0,2000114e <test_main+0xc46>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:288
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
20000a7e:	effff517          	auipc	a0,0xeffff
20000a82:	58a50513          	addi	a0,a0,1418 # 10000008 <_data_end>
20000a86:	4591                	li	a1,4
20000a88:	4601                	li	a2,0
20000a8a:	4681                	li	a3,0
20000a8c:	044010ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000a90:	70051e63          	bnez	a0,200011ac <test_main+0xca4>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:293
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxFrameErr,
20000a94:	effff517          	auipc	a0,0xeffff
20000a98:	57450513          	addi	a0,a0,1396 # 10000008 <_data_end>
20000a9c:	4595                	li	a1,5
20000a9e:	4601                	li	a2,0
20000aa0:	4681                	li	a3,0
20000aa2:	02e010ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000aa6:	76051263          	bnez	a0,2000120a <test_main+0xd02>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:298
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxBreakErr,
20000aaa:	effff517          	auipc	a0,0xeffff
20000aae:	55e50513          	addi	a0,a0,1374 # 10000008 <_data_end>
20000ab2:	4599                	li	a1,6
20000ab4:	4601                	li	a2,0
20000ab6:	4681                	li	a3,0
20000ab8:	018010ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000abc:	7a051663          	bnez	a0,20001268 <test_main+0xd60>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:303
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxTimeout,
20000ac0:	effff517          	auipc	a0,0xeffff
20000ac4:	54850513          	addi	a0,a0,1352 # 10000008 <_data_end>
20000ac8:	459d                	li	a1,7
20000aca:	4601                	li	a2,0
20000acc:	4681                	li	a3,0
20000ace:	002010ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000ad2:	7e051a63          	bnez	a0,200012c6 <test_main+0xdbe>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:308
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxParityErr,
20000ad6:	effff517          	auipc	a0,0xeffff
20000ada:	53250513          	addi	a0,a0,1330 # 10000008 <_data_end>
20000ade:	45a1                	li	a1,8
20000ae0:	4601                	li	a2,0
20000ae2:	4681                	li	a3,0
20000ae4:	7ed000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20000ae8:	02051ee3          	bnez	a0,20001324 <test_main+0xe1c>
20000aec:	07f0006f          	j	2000136a <test_main+0xe62>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:218
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxWatermark,
20000af0:	effff517          	auipc	a0,0xeffff
20000af4:	51850513          	addi	a0,a0,1304 # 10000008 <_data_end>
20000af8:	4589                	li	a1,2
20000afa:	4601                	li	a2,0
20000afc:	01a010ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000b00:	c529                	beqz	a0,20000b4a <test_main+0x642>
20000b02:	00002597          	auipc	a1,0x2
20000b06:	23258593          	addi	a1,a1,562 # 20002d34 <kTestConfig+0xf4>
20000b0a:	00a0                	addi	s0,sp,72
20000b0c:	4651                	li	a2,20
20000b0e:	8522                	mv	a0,s0
20000b10:	3f1010ef          	jal	ra,20002700 <memcpy>
20000b14:	8522                	mv	a0,s0
20000b16:	11a010ef          	jal	ra,20001c30 <base_log_internal_core>
20000b1a:	6531                	lui	a0,0xc
20000b1c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b20:	73c010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:221
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
20000b24:	effff517          	auipc	a0,0xeffff
20000b28:	4e450513          	addi	a0,a0,1252 # 10000008 <_data_end>
20000b2c:	458d                	li	a1,3
20000b2e:	4601                	li	a2,0
20000b30:	7e7000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000b34:	c529                	beqz	a0,20000b7e <test_main+0x676>
20000b36:	5532                	lw	a0,44(sp)
20000b38:	c115                	beqz	a0,20000b5c <test_main+0x654>
20000b3a:	e000f517          	auipc	a0,0xe000f
20000b3e:	6ba50513          	addi	a0,a0,1722 # 101f4 <plic_init_with_irqs.kLogFields.64>
20000b42:	4581                	li	a1,0
20000b44:	196010ef          	jal	ra,20001cda <base_log_internal_dv>
20000b48:	a035                	j	20000b74 <test_main+0x66c>
20000b4a:	effff517          	auipc	a0,0xeffff
20000b4e:	4be50513          	addi	a0,a0,1214 # 10000008 <_data_end>
20000b52:	458d                	li	a1,3
20000b54:	4601                	li	a2,0
20000b56:	7c1000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000b5a:	c529                	beqz	a0,20000ba4 <test_main+0x69c>
20000b5c:	00002597          	auipc	a1,0x2
20000b60:	1ec58593          	addi	a1,a1,492 # 20002d48 <kTestConfig+0x108>
20000b64:	00a0                	addi	s0,sp,72
20000b66:	4651                	li	a2,20
20000b68:	8522                	mv	a0,s0
20000b6a:	397010ef          	jal	ra,20002700 <memcpy>
20000b6e:	8522                	mv	a0,s0
20000b70:	0c0010ef          	jal	ra,20001c30 <base_log_internal_core>
20000b74:	6531                	lui	a0,0xc
20000b76:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b7a:	6e2010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:224
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
20000b7e:	effff517          	auipc	a0,0xeffff
20000b82:	48a50513          	addi	a0,a0,1162 # 10000008 <_data_end>
20000b86:	4591                	li	a1,4
20000b88:	4601                	li	a2,0
20000b8a:	78d000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000b8e:	c529                	beqz	a0,20000bd8 <test_main+0x6d0>
20000b90:	5532                	lw	a0,44(sp)
20000b92:	c115                	beqz	a0,20000bb6 <test_main+0x6ae>
20000b94:	e000f517          	auipc	a0,0xe000f
20000b98:	67450513          	addi	a0,a0,1652 # 10208 <plic_init_with_irqs.kLogFields.66>
20000b9c:	4581                	li	a1,0
20000b9e:	13c010ef          	jal	ra,20001cda <base_log_internal_dv>
20000ba2:	a035                	j	20000bce <test_main+0x6c6>
20000ba4:	effff517          	auipc	a0,0xeffff
20000ba8:	46450513          	addi	a0,a0,1124 # 10000008 <_data_end>
20000bac:	4591                	li	a1,4
20000bae:	4601                	li	a2,0
20000bb0:	767000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000bb4:	c529                	beqz	a0,20000bfe <test_main+0x6f6>
20000bb6:	00002597          	auipc	a1,0x2
20000bba:	1a658593          	addi	a1,a1,422 # 20002d5c <kTestConfig+0x11c>
20000bbe:	00a0                	addi	s0,sp,72
20000bc0:	4651                	li	a2,20
20000bc2:	8522                	mv	a0,s0
20000bc4:	33d010ef          	jal	ra,20002700 <memcpy>
20000bc8:	8522                	mv	a0,s0
20000bca:	066010ef          	jal	ra,20001c30 <base_log_internal_core>
20000bce:	6531                	lui	a0,0xc
20000bd0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000bd4:	688010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:227
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxFrameErr,
20000bd8:	effff517          	auipc	a0,0xeffff
20000bdc:	43050513          	addi	a0,a0,1072 # 10000008 <_data_end>
20000be0:	4595                	li	a1,5
20000be2:	4601                	li	a2,0
20000be4:	733000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000be8:	c529                	beqz	a0,20000c32 <test_main+0x72a>
20000bea:	5532                	lw	a0,44(sp)
20000bec:	c115                	beqz	a0,20000c10 <test_main+0x708>
20000bee:	e000f517          	auipc	a0,0xe000f
20000bf2:	62e50513          	addi	a0,a0,1582 # 1021c <plic_init_with_irqs.kLogFields.68>
20000bf6:	4581                	li	a1,0
20000bf8:	0e2010ef          	jal	ra,20001cda <base_log_internal_dv>
20000bfc:	a035                	j	20000c28 <test_main+0x720>
20000bfe:	effff517          	auipc	a0,0xeffff
20000c02:	40a50513          	addi	a0,a0,1034 # 10000008 <_data_end>
20000c06:	4595                	li	a1,5
20000c08:	4601                	li	a2,0
20000c0a:	70d000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000c0e:	c529                	beqz	a0,20000c58 <test_main+0x750>
20000c10:	00002597          	auipc	a1,0x2
20000c14:	16058593          	addi	a1,a1,352 # 20002d70 <kTestConfig+0x130>
20000c18:	00a0                	addi	s0,sp,72
20000c1a:	4651                	li	a2,20
20000c1c:	8522                	mv	a0,s0
20000c1e:	2e3010ef          	jal	ra,20002700 <memcpy>
20000c22:	8522                	mv	a0,s0
20000c24:	00c010ef          	jal	ra,20001c30 <base_log_internal_core>
20000c28:	6531                	lui	a0,0xc
20000c2a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000c2e:	62e010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:230
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxBreakErr,
20000c32:	effff517          	auipc	a0,0xeffff
20000c36:	3d650513          	addi	a0,a0,982 # 10000008 <_data_end>
20000c3a:	4599                	li	a1,6
20000c3c:	4601                	li	a2,0
20000c3e:	6d9000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000c42:	c529                	beqz	a0,20000c8c <test_main+0x784>
20000c44:	5532                	lw	a0,44(sp)
20000c46:	c115                	beqz	a0,20000c6a <test_main+0x762>
20000c48:	e000f517          	auipc	a0,0xe000f
20000c4c:	5e850513          	addi	a0,a0,1512 # 10230 <plic_init_with_irqs.kLogFields.70>
20000c50:	4581                	li	a1,0
20000c52:	088010ef          	jal	ra,20001cda <base_log_internal_dv>
20000c56:	a035                	j	20000c82 <test_main+0x77a>
20000c58:	effff517          	auipc	a0,0xeffff
20000c5c:	3b050513          	addi	a0,a0,944 # 10000008 <_data_end>
20000c60:	4599                	li	a1,6
20000c62:	4601                	li	a2,0
20000c64:	6b3000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000c68:	c529                	beqz	a0,20000cb2 <test_main+0x7aa>
20000c6a:	00002597          	auipc	a1,0x2
20000c6e:	11a58593          	addi	a1,a1,282 # 20002d84 <kTestConfig+0x144>
20000c72:	00a0                	addi	s0,sp,72
20000c74:	4651                	li	a2,20
20000c76:	8522                	mv	a0,s0
20000c78:	289010ef          	jal	ra,20002700 <memcpy>
20000c7c:	8522                	mv	a0,s0
20000c7e:	7b3000ef          	jal	ra,20001c30 <base_log_internal_core>
20000c82:	6531                	lui	a0,0xc
20000c84:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000c88:	5d4010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:233
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxTimeout,
20000c8c:	effff517          	auipc	a0,0xeffff
20000c90:	37c50513          	addi	a0,a0,892 # 10000008 <_data_end>
20000c94:	459d                	li	a1,7
20000c96:	4601                	li	a2,0
20000c98:	67f000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000c9c:	c529                	beqz	a0,20000ce6 <test_main+0x7de>
20000c9e:	5532                	lw	a0,44(sp)
20000ca0:	c115                	beqz	a0,20000cc4 <test_main+0x7bc>
20000ca2:	e000f517          	auipc	a0,0xe000f
20000ca6:	5a250513          	addi	a0,a0,1442 # 10244 <plic_init_with_irqs.kLogFields.72>
20000caa:	4581                	li	a1,0
20000cac:	02e010ef          	jal	ra,20001cda <base_log_internal_dv>
20000cb0:	a035                	j	20000cdc <test_main+0x7d4>
20000cb2:	effff517          	auipc	a0,0xeffff
20000cb6:	35650513          	addi	a0,a0,854 # 10000008 <_data_end>
20000cba:	459d                	li	a1,7
20000cbc:	4601                	li	a2,0
20000cbe:	659000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000cc2:	c529                	beqz	a0,20000d0c <test_main+0x804>
20000cc4:	00002597          	auipc	a1,0x2
20000cc8:	0d458593          	addi	a1,a1,212 # 20002d98 <kTestConfig+0x158>
20000ccc:	00a0                	addi	s0,sp,72
20000cce:	4651                	li	a2,20
20000cd0:	8522                	mv	a0,s0
20000cd2:	22f010ef          	jal	ra,20002700 <memcpy>
20000cd6:	8522                	mv	a0,s0
20000cd8:	759000ef          	jal	ra,20001c30 <base_log_internal_core>
20000cdc:	6531                	lui	a0,0xc
20000cde:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ce2:	57a010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:236
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxParityErr,
20000ce6:	effff517          	auipc	a0,0xeffff
20000cea:	32250513          	addi	a0,a0,802 # 10000008 <_data_end>
20000cee:	45a1                	li	a1,8
20000cf0:	4601                	li	a2,0
20000cf2:	625000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000cf6:	c529                	beqz	a0,20000d40 <test_main+0x838>
20000cf8:	5532                	lw	a0,44(sp)
20000cfa:	c115                	beqz	a0,20000d1e <test_main+0x816>
20000cfc:	e000f517          	auipc	a0,0xe000f
20000d00:	55c50513          	addi	a0,a0,1372 # 10258 <plic_init_with_irqs.kLogFields.74>
20000d04:	4581                	li	a1,0
20000d06:	7d5000ef          	jal	ra,20001cda <base_log_internal_dv>
20000d0a:	a035                	j	20000d36 <test_main+0x82e>
20000d0c:	effff517          	auipc	a0,0xeffff
20000d10:	2fc50513          	addi	a0,a0,764 # 10000008 <_data_end>
20000d14:	45a1                	li	a1,8
20000d16:	4601                	li	a2,0
20000d18:	5ff000ef          	jal	ra,20001b16 <dif_plic_irq_set_trigger>
20000d1c:	c529                	beqz	a0,20000d66 <test_main+0x85e>
20000d1e:	00002597          	auipc	a1,0x2
20000d22:	08e58593          	addi	a1,a1,142 # 20002dac <kTestConfig+0x16c>
20000d26:	00a0                	addi	s0,sp,72
20000d28:	4651                	li	a2,20
20000d2a:	8522                	mv	a0,s0
20000d2c:	1d5010ef          	jal	ra,20002700 <memcpy>
20000d30:	8522                	mv	a0,s0
20000d32:	6ff000ef          	jal	ra,20001c30 <base_log_internal_core>
20000d36:	6531                	lui	a0,0xc
20000d38:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000d3c:	520010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:242
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0TxWatermark,
20000d40:	effff517          	auipc	a0,0xeffff
20000d44:	2c850513          	addi	a0,a0,712 # 10000008 <_data_end>
20000d48:	4585                	li	a1,1
20000d4a:	4605                	li	a2,1
20000d4c:	60b000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000d50:	c529                	beqz	a0,20000d9a <test_main+0x892>
20000d52:	5532                	lw	a0,44(sp)
20000d54:	c115                	beqz	a0,20000d78 <test_main+0x870>
20000d56:	e000f517          	auipc	a0,0xe000f
20000d5a:	51650513          	addi	a0,a0,1302 # 1026c <plic_init_with_irqs.kLogFields.76>
20000d5e:	4581                	li	a1,0
20000d60:	77b000ef          	jal	ra,20001cda <base_log_internal_dv>
20000d64:	a035                	j	20000d90 <test_main+0x888>
20000d66:	effff517          	auipc	a0,0xeffff
20000d6a:	2a250513          	addi	a0,a0,674 # 10000008 <_data_end>
20000d6e:	4585                	li	a1,1
20000d70:	4605                	li	a2,1
20000d72:	5e5000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000d76:	c529                	beqz	a0,20000dc0 <test_main+0x8b8>
20000d78:	00002597          	auipc	a1,0x2
20000d7c:	04858593          	addi	a1,a1,72 # 20002dc0 <kTestConfig+0x180>
20000d80:	00a0                	addi	s0,sp,72
20000d82:	4651                	li	a2,20
20000d84:	8522                	mv	a0,s0
20000d86:	17b010ef          	jal	ra,20002700 <memcpy>
20000d8a:	8522                	mv	a0,s0
20000d8c:	6a5000ef          	jal	ra,20001c30 <base_log_internal_core>
20000d90:	6531                	lui	a0,0xc
20000d92:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000d96:	4c6010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:245
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxWatermark,
20000d9a:	effff517          	auipc	a0,0xeffff
20000d9e:	26e50513          	addi	a0,a0,622 # 10000008 <_data_end>
20000da2:	4589                	li	a1,2
20000da4:	4609                	li	a2,2
20000da6:	5b1000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000daa:	c529                	beqz	a0,20000df4 <test_main+0x8ec>
20000dac:	5532                	lw	a0,44(sp)
20000dae:	c115                	beqz	a0,20000dd2 <test_main+0x8ca>
20000db0:	e000f517          	auipc	a0,0xe000f
20000db4:	4d050513          	addi	a0,a0,1232 # 10280 <plic_init_with_irqs.kLogFields.79>
20000db8:	4581                	li	a1,0
20000dba:	721000ef          	jal	ra,20001cda <base_log_internal_dv>
20000dbe:	a035                	j	20000dea <test_main+0x8e2>
20000dc0:	effff517          	auipc	a0,0xeffff
20000dc4:	24850513          	addi	a0,a0,584 # 10000008 <_data_end>
20000dc8:	4589                	li	a1,2
20000dca:	4609                	li	a2,2
20000dcc:	58b000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000dd0:	c929                	beqz	a0,20000e22 <test_main+0x91a>
20000dd2:	00002597          	auipc	a1,0x2
20000dd6:	00258593          	addi	a1,a1,2 # 20002dd4 <kTestConfig+0x194>
20000dda:	00a0                	addi	s0,sp,72
20000ddc:	4651                	li	a2,20
20000dde:	8522                	mv	a0,s0
20000de0:	121010ef          	jal	ra,20002700 <memcpy>
20000de4:	8522                	mv	a0,s0
20000de6:	64b000ef          	jal	ra,20001c30 <base_log_internal_core>
20000dea:	6531                	lui	a0,0xc
20000dec:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000df0:	46c010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:248
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
20000df4:	effff517          	auipc	a0,0xeffff
20000df8:	21450513          	addi	a0,a0,532 # 10000008 <_data_end>
20000dfc:	458d                	li	a1,3
20000dfe:	460d                	li	a2,3
20000e00:	557000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000e04:	cd29                	beqz	a0,20000e5e <test_main+0x956>
20000e06:	5532                	lw	a0,44(sp)
20000e08:	c515                	beqz	a0,20000e34 <test_main+0x92c>
20000e0a:	e000f517          	auipc	a0,0xe000f
20000e0e:	48a50513          	addi	a0,a0,1162 # 10294 <plic_init_with_irqs.kLogFields.81>
20000e12:	00003617          	auipc	a2,0x3
20000e16:	bb960613          	addi	a2,a2,-1095 # 200039cb <__clz_tab+0x47f>
20000e1a:	4585                	li	a1,1
20000e1c:	6bf000ef          	jal	ra,20001cda <base_log_internal_dv>
20000e20:	a815                	j	20000e54 <test_main+0x94c>
20000e22:	effff517          	auipc	a0,0xeffff
20000e26:	1e650513          	addi	a0,a0,486 # 10000008 <_data_end>
20000e2a:	458d                	li	a1,3
20000e2c:	460d                	li	a2,3
20000e2e:	529000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000e32:	c929                	beqz	a0,20000e84 <test_main+0x97c>
20000e34:	00002597          	auipc	a1,0x2
20000e38:	fb458593          	addi	a1,a1,-76 # 20002de8 <kTestConfig+0x1a8>
20000e3c:	00a0                	addi	s0,sp,72
20000e3e:	4651                	li	a2,20
20000e40:	8522                	mv	a0,s0
20000e42:	0bf010ef          	jal	ra,20002700 <memcpy>
20000e46:	00003597          	auipc	a1,0x3
20000e4a:	b8558593          	addi	a1,a1,-1147 # 200039cb <__clz_tab+0x47f>
20000e4e:	8522                	mv	a0,s0
20000e50:	5e1000ef          	jal	ra,20001c30 <base_log_internal_core>
20000e54:	6531                	lui	a0,0xc
20000e56:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000e5a:	402010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:251
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
20000e5e:	effff517          	auipc	a0,0xeffff
20000e62:	1aa50513          	addi	a0,a0,426 # 10000008 <_data_end>
20000e66:	4591                	li	a1,4
20000e68:	4605                	li	a2,1
20000e6a:	4ed000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000e6e:	c529                	beqz	a0,20000eb8 <test_main+0x9b0>
20000e70:	5532                	lw	a0,44(sp)
20000e72:	c115                	beqz	a0,20000e96 <test_main+0x98e>
20000e74:	e000f517          	auipc	a0,0xe000f
20000e78:	43450513          	addi	a0,a0,1076 # 102a8 <plic_init_with_irqs.kLogFields.85>
20000e7c:	4581                	li	a1,0
20000e7e:	65d000ef          	jal	ra,20001cda <base_log_internal_dv>
20000e82:	a035                	j	20000eae <test_main+0x9a6>
20000e84:	effff517          	auipc	a0,0xeffff
20000e88:	18450513          	addi	a0,a0,388 # 10000008 <_data_end>
20000e8c:	4591                	li	a1,4
20000e8e:	4605                	li	a2,1
20000e90:	4c7000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000e94:	c529                	beqz	a0,20000ede <test_main+0x9d6>
20000e96:	00002597          	auipc	a1,0x2
20000e9a:	f6658593          	addi	a1,a1,-154 # 20002dfc <kTestConfig+0x1bc>
20000e9e:	00a0                	addi	s0,sp,72
20000ea0:	4651                	li	a2,20
20000ea2:	8522                	mv	a0,s0
20000ea4:	05d010ef          	jal	ra,20002700 <memcpy>
20000ea8:	8522                	mv	a0,s0
20000eaa:	587000ef          	jal	ra,20001c30 <base_log_internal_core>
20000eae:	6531                	lui	a0,0xc
20000eb0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000eb4:	3a8010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:254
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxFrameErr,
20000eb8:	effff517          	auipc	a0,0xeffff
20000ebc:	15050513          	addi	a0,a0,336 # 10000008 <_data_end>
20000ec0:	4595                	li	a1,5
20000ec2:	4609                	li	a2,2
20000ec4:	493000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000ec8:	c529                	beqz	a0,20000f12 <test_main+0xa0a>
20000eca:	5532                	lw	a0,44(sp)
20000ecc:	c115                	beqz	a0,20000ef0 <test_main+0x9e8>
20000ece:	e000f517          	auipc	a0,0xe000f
20000ed2:	3ee50513          	addi	a0,a0,1006 # 102bc <plic_init_with_irqs.kLogFields.87>
20000ed6:	4581                	li	a1,0
20000ed8:	603000ef          	jal	ra,20001cda <base_log_internal_dv>
20000edc:	a035                	j	20000f08 <test_main+0xa00>
20000ede:	effff517          	auipc	a0,0xeffff
20000ee2:	12a50513          	addi	a0,a0,298 # 10000008 <_data_end>
20000ee6:	4595                	li	a1,5
20000ee8:	4609                	li	a2,2
20000eea:	46d000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000eee:	c529                	beqz	a0,20000f38 <test_main+0xa30>
20000ef0:	00002597          	auipc	a1,0x2
20000ef4:	f2058593          	addi	a1,a1,-224 # 20002e10 <kTestConfig+0x1d0>
20000ef8:	00a0                	addi	s0,sp,72
20000efa:	4651                	li	a2,20
20000efc:	8522                	mv	a0,s0
20000efe:	003010ef          	jal	ra,20002700 <memcpy>
20000f02:	8522                	mv	a0,s0
20000f04:	52d000ef          	jal	ra,20001c30 <base_log_internal_core>
20000f08:	6531                	lui	a0,0xc
20000f0a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000f0e:	34e010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:257
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxBreakErr,
20000f12:	effff517          	auipc	a0,0xeffff
20000f16:	0f650513          	addi	a0,a0,246 # 10000008 <_data_end>
20000f1a:	4599                	li	a1,6
20000f1c:	460d                	li	a2,3
20000f1e:	439000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000f22:	c529                	beqz	a0,20000f6c <test_main+0xa64>
20000f24:	5532                	lw	a0,44(sp)
20000f26:	c115                	beqz	a0,20000f4a <test_main+0xa42>
20000f28:	e000f517          	auipc	a0,0xe000f
20000f2c:	3a850513          	addi	a0,a0,936 # 102d0 <plic_init_with_irqs.kLogFields.89>
20000f30:	4581                	li	a1,0
20000f32:	5a9000ef          	jal	ra,20001cda <base_log_internal_dv>
20000f36:	a035                	j	20000f62 <test_main+0xa5a>
20000f38:	effff517          	auipc	a0,0xeffff
20000f3c:	0d050513          	addi	a0,a0,208 # 10000008 <_data_end>
20000f40:	4599                	li	a1,6
20000f42:	460d                	li	a2,3
20000f44:	413000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000f48:	c529                	beqz	a0,20000f92 <test_main+0xa8a>
20000f4a:	00002597          	auipc	a1,0x2
20000f4e:	eda58593          	addi	a1,a1,-294 # 20002e24 <kTestConfig+0x1e4>
20000f52:	00a0                	addi	s0,sp,72
20000f54:	4651                	li	a2,20
20000f56:	8522                	mv	a0,s0
20000f58:	7a8010ef          	jal	ra,20002700 <memcpy>
20000f5c:	8522                	mv	a0,s0
20000f5e:	4d3000ef          	jal	ra,20001c30 <base_log_internal_core>
20000f62:	6531                	lui	a0,0xc
20000f64:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000f68:	2f4010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:260
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxTimeout,
20000f6c:	effff517          	auipc	a0,0xeffff
20000f70:	09c50513          	addi	a0,a0,156 # 10000008 <_data_end>
20000f74:	459d                	li	a1,7
20000f76:	4605                	li	a2,1
20000f78:	3df000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000f7c:	c529                	beqz	a0,20000fc6 <test_main+0xabe>
20000f7e:	5532                	lw	a0,44(sp)
20000f80:	c115                	beqz	a0,20000fa4 <test_main+0xa9c>
20000f82:	e000f517          	auipc	a0,0xe000f
20000f86:	36250513          	addi	a0,a0,866 # 102e4 <plic_init_with_irqs.kLogFields.91>
20000f8a:	4581                	li	a1,0
20000f8c:	54f000ef          	jal	ra,20001cda <base_log_internal_dv>
20000f90:	a035                	j	20000fbc <test_main+0xab4>
20000f92:	effff517          	auipc	a0,0xeffff
20000f96:	07650513          	addi	a0,a0,118 # 10000008 <_data_end>
20000f9a:	459d                	li	a1,7
20000f9c:	4605                	li	a2,1
20000f9e:	3b9000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000fa2:	c529                	beqz	a0,20000fec <test_main+0xae4>
20000fa4:	00002597          	auipc	a1,0x2
20000fa8:	e9458593          	addi	a1,a1,-364 # 20002e38 <kTestConfig+0x1f8>
20000fac:	00a0                	addi	s0,sp,72
20000fae:	4651                	li	a2,20
20000fb0:	8522                	mv	a0,s0
20000fb2:	74e010ef          	jal	ra,20002700 <memcpy>
20000fb6:	8522                	mv	a0,s0
20000fb8:	479000ef          	jal	ra,20001c30 <base_log_internal_core>
20000fbc:	6531                	lui	a0,0xc
20000fbe:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000fc2:	29a010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:263
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxParityErr,
20000fc6:	effff517          	auipc	a0,0xeffff
20000fca:	04250513          	addi	a0,a0,66 # 10000008 <_data_end>
20000fce:	45a1                	li	a1,8
20000fd0:	4609                	li	a2,2
20000fd2:	385000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000fd6:	c529                	beqz	a0,20001020 <test_main+0xb18>
20000fd8:	5532                	lw	a0,44(sp)
20000fda:	c115                	beqz	a0,20000ffe <test_main+0xaf6>
20000fdc:	e000f517          	auipc	a0,0xe000f
20000fe0:	31c50513          	addi	a0,a0,796 # 102f8 <plic_init_with_irqs.kLogFields.93>
20000fe4:	4581                	li	a1,0
20000fe6:	4f5000ef          	jal	ra,20001cda <base_log_internal_dv>
20000fea:	a035                	j	20001016 <test_main+0xb0e>
20000fec:	effff517          	auipc	a0,0xeffff
20000ff0:	01c50513          	addi	a0,a0,28 # 10000008 <_data_end>
20000ff4:	45a1                	li	a1,8
20000ff6:	4609                	li	a2,2
20000ff8:	35f000ef          	jal	ra,20001b56 <dif_plic_irq_set_priority>
20000ffc:	c529                	beqz	a0,20001046 <test_main+0xb3e>
20000ffe:	00002597          	auipc	a1,0x2
20001002:	e4e58593          	addi	a1,a1,-434 # 20002e4c <kTestConfig+0x20c>
20001006:	00a0                	addi	s0,sp,72
20001008:	4651                	li	a2,20
2000100a:	8522                	mv	a0,s0
2000100c:	6f4010ef          	jal	ra,20002700 <memcpy>
20001010:	8522                	mv	a0,s0
20001012:	41f000ef          	jal	ra,20001c30 <base_log_internal_core>
20001016:	6531                	lui	a0,0xc
20001018:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000101c:	240010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:268
  CHECK(dif_plic_target_set_threshold(plic, kTopEarlgreyPlicTargetIbex0, 0x0) ==
20001020:	effff517          	auipc	a0,0xeffff
20001024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
20001028:	4581                	li	a1,0
2000102a:	4601                	li	a2,0
2000102c:	34b000ef          	jal	ra,20001b76 <dif_plic_target_set_threshold>
20001030:	c529                	beqz	a0,2000107a <test_main+0xb72>
20001032:	5532                	lw	a0,44(sp)
20001034:	c115                	beqz	a0,20001058 <test_main+0xb50>
20001036:	e000f517          	auipc	a0,0xe000f
2000103a:	2d650513          	addi	a0,a0,726 # 1030c <plic_init_with_irqs.kLogFields.95>
2000103e:	4581                	li	a1,0
20001040:	49b000ef          	jal	ra,20001cda <base_log_internal_dv>
20001044:	a035                	j	20001070 <test_main+0xb68>
20001046:	effff517          	auipc	a0,0xeffff
2000104a:	fc250513          	addi	a0,a0,-62 # 10000008 <_data_end>
2000104e:	4581                	li	a1,0
20001050:	4601                	li	a2,0
20001052:	325000ef          	jal	ra,20001b76 <dif_plic_target_set_threshold>
20001056:	c531                	beqz	a0,200010a2 <test_main+0xb9a>
20001058:	00002597          	auipc	a1,0x2
2000105c:	e0858593          	addi	a1,a1,-504 # 20002e60 <kTestConfig+0x220>
20001060:	00a0                	addi	s0,sp,72
20001062:	4651                	li	a2,20
20001064:	8522                	mv	a0,s0
20001066:	69a010ef          	jal	ra,20002700 <memcpy>
2000106a:	8522                	mv	a0,s0
2000106c:	3c5000ef          	jal	ra,20001c30 <base_log_internal_core>
20001070:	6531                	lui	a0,0xc
20001072:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001076:	1e6010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:273
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0TxWatermark,
2000107a:	effff517          	auipc	a0,0xeffff
2000107e:	f8e50513          	addi	a0,a0,-114 # 10000008 <_data_end>
20001082:	4585                	li	a1,1
20001084:	4601                	li	a2,0
20001086:	4681                	li	a3,0
20001088:	249000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
2000108c:	c531                	beqz	a0,200010d8 <test_main+0xbd0>
2000108e:	5532                	lw	a0,44(sp)
20001090:	c11d                	beqz	a0,200010b6 <test_main+0xbae>
20001092:	e000f517          	auipc	a0,0xe000f
20001096:	28e50513          	addi	a0,a0,654 # 10320 <plic_init_with_irqs.kLogFields.98>
2000109a:	4581                	li	a1,0
2000109c:	43f000ef          	jal	ra,20001cda <base_log_internal_dv>
200010a0:	a03d                	j	200010ce <test_main+0xbc6>
200010a2:	effff517          	auipc	a0,0xeffff
200010a6:	f6650513          	addi	a0,a0,-154 # 10000008 <_data_end>
200010aa:	4585                	li	a1,1
200010ac:	4601                	li	a2,0
200010ae:	4681                	li	a3,0
200010b0:	221000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
200010b4:	c531                	beqz	a0,20001100 <test_main+0xbf8>
200010b6:	00002597          	auipc	a1,0x2
200010ba:	dbe58593          	addi	a1,a1,-578 # 20002e74 <kTestConfig+0x234>
200010be:	00a0                	addi	s0,sp,72
200010c0:	4651                	li	a2,20
200010c2:	8522                	mv	a0,s0
200010c4:	63c010ef          	jal	ra,20002700 <memcpy>
200010c8:	8522                	mv	a0,s0
200010ca:	367000ef          	jal	ra,20001c30 <base_log_internal_core>
200010ce:	6531                	lui	a0,0xc
200010d0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200010d4:	188010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:278
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxWatermark,
200010d8:	effff517          	auipc	a0,0xeffff
200010dc:	f3050513          	addi	a0,a0,-208 # 10000008 <_data_end>
200010e0:	4589                	li	a1,2
200010e2:	4601                	li	a2,0
200010e4:	4681                	li	a3,0
200010e6:	1eb000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
200010ea:	c531                	beqz	a0,20001136 <test_main+0xc2e>
200010ec:	5532                	lw	a0,44(sp)
200010ee:	c11d                	beqz	a0,20001114 <test_main+0xc0c>
200010f0:	e000f517          	auipc	a0,0xe000f
200010f4:	24450513          	addi	a0,a0,580 # 10334 <plic_init_with_irqs.kLogFields.101>
200010f8:	4581                	li	a1,0
200010fa:	3e1000ef          	jal	ra,20001cda <base_log_internal_dv>
200010fe:	a03d                	j	2000112c <test_main+0xc24>
20001100:	effff517          	auipc	a0,0xeffff
20001104:	f0850513          	addi	a0,a0,-248 # 10000008 <_data_end>
20001108:	4589                	li	a1,2
2000110a:	4601                	li	a2,0
2000110c:	4681                	li	a3,0
2000110e:	1c3000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20001112:	c531                	beqz	a0,2000115e <test_main+0xc56>
20001114:	00002597          	auipc	a1,0x2
20001118:	d7458593          	addi	a1,a1,-652 # 20002e88 <kTestConfig+0x248>
2000111c:	00a0                	addi	s0,sp,72
2000111e:	4651                	li	a2,20
20001120:	8522                	mv	a0,s0
20001122:	5de010ef          	jal	ra,20002700 <memcpy>
20001126:	8522                	mv	a0,s0
20001128:	309000ef          	jal	ra,20001c30 <base_log_internal_core>
2000112c:	6531                	lui	a0,0xc
2000112e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001132:	12a010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:283
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
20001136:	effff517          	auipc	a0,0xeffff
2000113a:	ed250513          	addi	a0,a0,-302 # 10000008 <_data_end>
2000113e:	458d                	li	a1,3
20001140:	4601                	li	a2,0
20001142:	4681                	li	a3,0
20001144:	18d000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20001148:	c531                	beqz	a0,20001194 <test_main+0xc8c>
2000114a:	5532                	lw	a0,44(sp)
2000114c:	c11d                	beqz	a0,20001172 <test_main+0xc6a>
2000114e:	e000f517          	auipc	a0,0xe000f
20001152:	1fa50513          	addi	a0,a0,506 # 10348 <plic_init_with_irqs.kLogFields.103>
20001156:	4581                	li	a1,0
20001158:	383000ef          	jal	ra,20001cda <base_log_internal_dv>
2000115c:	a03d                	j	2000118a <test_main+0xc82>
2000115e:	effff517          	auipc	a0,0xeffff
20001162:	eaa50513          	addi	a0,a0,-342 # 10000008 <_data_end>
20001166:	458d                	li	a1,3
20001168:	4601                	li	a2,0
2000116a:	4681                	li	a3,0
2000116c:	165000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20001170:	c531                	beqz	a0,200011bc <test_main+0xcb4>
20001172:	00002597          	auipc	a1,0x2
20001176:	d2a58593          	addi	a1,a1,-726 # 20002e9c <kTestConfig+0x25c>
2000117a:	00a0                	addi	s0,sp,72
2000117c:	4651                	li	a2,20
2000117e:	8522                	mv	a0,s0
20001180:	580010ef          	jal	ra,20002700 <memcpy>
20001184:	8522                	mv	a0,s0
20001186:	2ab000ef          	jal	ra,20001c30 <base_log_internal_core>
2000118a:	6531                	lui	a0,0xc
2000118c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001190:	0cc010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:288
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
20001194:	effff517          	auipc	a0,0xeffff
20001198:	e7450513          	addi	a0,a0,-396 # 10000008 <_data_end>
2000119c:	4591                	li	a1,4
2000119e:	4601                	li	a2,0
200011a0:	4681                	li	a3,0
200011a2:	12f000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
200011a6:	c531                	beqz	a0,200011f2 <test_main+0xcea>
200011a8:	5532                	lw	a0,44(sp)
200011aa:	c11d                	beqz	a0,200011d0 <test_main+0xcc8>
200011ac:	e000f517          	auipc	a0,0xe000f
200011b0:	1b050513          	addi	a0,a0,432 # 1035c <plic_init_with_irqs.kLogFields.105>
200011b4:	4581                	li	a1,0
200011b6:	325000ef          	jal	ra,20001cda <base_log_internal_dv>
200011ba:	a03d                	j	200011e8 <test_main+0xce0>
200011bc:	effff517          	auipc	a0,0xeffff
200011c0:	e4c50513          	addi	a0,a0,-436 # 10000008 <_data_end>
200011c4:	4591                	li	a1,4
200011c6:	4601                	li	a2,0
200011c8:	4681                	li	a3,0
200011ca:	107000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
200011ce:	c531                	beqz	a0,2000121a <test_main+0xd12>
200011d0:	00002597          	auipc	a1,0x2
200011d4:	ce058593          	addi	a1,a1,-800 # 20002eb0 <kTestConfig+0x270>
200011d8:	00a0                	addi	s0,sp,72
200011da:	4651                	li	a2,20
200011dc:	8522                	mv	a0,s0
200011de:	522010ef          	jal	ra,20002700 <memcpy>
200011e2:	8522                	mv	a0,s0
200011e4:	24d000ef          	jal	ra,20001c30 <base_log_internal_core>
200011e8:	6531                	lui	a0,0xc
200011ea:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200011ee:	06e010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:293
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxFrameErr,
200011f2:	effff517          	auipc	a0,0xeffff
200011f6:	e1650513          	addi	a0,a0,-490 # 10000008 <_data_end>
200011fa:	4595                	li	a1,5
200011fc:	4601                	li	a2,0
200011fe:	4681                	li	a3,0
20001200:	0d1000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20001204:	c531                	beqz	a0,20001250 <test_main+0xd48>
20001206:	5532                	lw	a0,44(sp)
20001208:	c11d                	beqz	a0,2000122e <test_main+0xd26>
2000120a:	e000f517          	auipc	a0,0xe000f
2000120e:	16650513          	addi	a0,a0,358 # 10370 <plic_init_with_irqs.kLogFields.107>
20001212:	4581                	li	a1,0
20001214:	2c7000ef          	jal	ra,20001cda <base_log_internal_dv>
20001218:	a03d                	j	20001246 <test_main+0xd3e>
2000121a:	effff517          	auipc	a0,0xeffff
2000121e:	dee50513          	addi	a0,a0,-530 # 10000008 <_data_end>
20001222:	4595                	li	a1,5
20001224:	4601                	li	a2,0
20001226:	4681                	li	a3,0
20001228:	0a9000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
2000122c:	c531                	beqz	a0,20001278 <test_main+0xd70>
2000122e:	00002597          	auipc	a1,0x2
20001232:	c9658593          	addi	a1,a1,-874 # 20002ec4 <kTestConfig+0x284>
20001236:	00a0                	addi	s0,sp,72
20001238:	4651                	li	a2,20
2000123a:	8522                	mv	a0,s0
2000123c:	4c4010ef          	jal	ra,20002700 <memcpy>
20001240:	8522                	mv	a0,s0
20001242:	1ef000ef          	jal	ra,20001c30 <base_log_internal_core>
20001246:	6531                	lui	a0,0xc
20001248:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000124c:	010010ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:298
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxBreakErr,
20001250:	effff517          	auipc	a0,0xeffff
20001254:	db850513          	addi	a0,a0,-584 # 10000008 <_data_end>
20001258:	4599                	li	a1,6
2000125a:	4601                	li	a2,0
2000125c:	4681                	li	a3,0
2000125e:	073000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20001262:	c531                	beqz	a0,200012ae <test_main+0xda6>
20001264:	5532                	lw	a0,44(sp)
20001266:	c11d                	beqz	a0,2000128c <test_main+0xd84>
20001268:	e000f517          	auipc	a0,0xe000f
2000126c:	11c50513          	addi	a0,a0,284 # 10384 <plic_init_with_irqs.kLogFields.109>
20001270:	4581                	li	a1,0
20001272:	269000ef          	jal	ra,20001cda <base_log_internal_dv>
20001276:	a03d                	j	200012a4 <test_main+0xd9c>
20001278:	effff517          	auipc	a0,0xeffff
2000127c:	d9050513          	addi	a0,a0,-624 # 10000008 <_data_end>
20001280:	4599                	li	a1,6
20001282:	4601                	li	a2,0
20001284:	4681                	li	a3,0
20001286:	04b000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
2000128a:	c531                	beqz	a0,200012d6 <test_main+0xdce>
2000128c:	00002597          	auipc	a1,0x2
20001290:	c4c58593          	addi	a1,a1,-948 # 20002ed8 <kTestConfig+0x298>
20001294:	00a0                	addi	s0,sp,72
20001296:	4651                	li	a2,20
20001298:	8522                	mv	a0,s0
2000129a:	466010ef          	jal	ra,20002700 <memcpy>
2000129e:	8522                	mv	a0,s0
200012a0:	191000ef          	jal	ra,20001c30 <base_log_internal_core>
200012a4:	6531                	lui	a0,0xc
200012a6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200012aa:	7b3000ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:303
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxTimeout,
200012ae:	effff517          	auipc	a0,0xeffff
200012b2:	d5a50513          	addi	a0,a0,-678 # 10000008 <_data_end>
200012b6:	459d                	li	a1,7
200012b8:	4601                	li	a2,0
200012ba:	4681                	li	a3,0
200012bc:	015000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
200012c0:	c531                	beqz	a0,2000130c <test_main+0xe04>
200012c2:	5532                	lw	a0,44(sp)
200012c4:	c11d                	beqz	a0,200012ea <test_main+0xde2>
200012c6:	e000f517          	auipc	a0,0xe000f
200012ca:	0d250513          	addi	a0,a0,210 # 10398 <plic_init_with_irqs.kLogFields.111>
200012ce:	4581                	li	a1,0
200012d0:	20b000ef          	jal	ra,20001cda <base_log_internal_dv>
200012d4:	a03d                	j	20001302 <test_main+0xdfa>
200012d6:	effff517          	auipc	a0,0xeffff
200012da:	d3250513          	addi	a0,a0,-718 # 10000008 <_data_end>
200012de:	459d                	li	a1,7
200012e0:	4601                	li	a2,0
200012e2:	4681                	li	a3,0
200012e4:	7ec000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
200012e8:	c531                	beqz	a0,20001334 <test_main+0xe2c>
200012ea:	00002597          	auipc	a1,0x2
200012ee:	c0258593          	addi	a1,a1,-1022 # 20002eec <kTestConfig+0x2ac>
200012f2:	00a0                	addi	s0,sp,72
200012f4:	4651                	li	a2,20
200012f6:	8522                	mv	a0,s0
200012f8:	408010ef          	jal	ra,20002700 <memcpy>
200012fc:	8522                	mv	a0,s0
200012fe:	133000ef          	jal	ra,20001c30 <base_log_internal_core>
20001302:	6531                	lui	a0,0xc
20001304:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001308:	755000ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:308
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxParityErr,
2000130c:	effff517          	auipc	a0,0xeffff
20001310:	cfc50513          	addi	a0,a0,-772 # 10000008 <_data_end>
20001314:	45a1                	li	a1,8
20001316:	4601                	li	a2,0
20001318:	4681                	li	a3,0
2000131a:	7b6000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
2000131e:	c531                	beqz	a0,2000136a <test_main+0xe62>
20001320:	5532                	lw	a0,44(sp)
20001322:	c11d                	beqz	a0,20001348 <test_main+0xe40>
20001324:	e000f517          	auipc	a0,0xe000f
20001328:	08850513          	addi	a0,a0,136 # 103ac <plic_init_with_irqs.kLogFields.113>
2000132c:	4581                	li	a1,0
2000132e:	1ad000ef          	jal	ra,20001cda <base_log_internal_dv>
20001332:	a03d                	j	20001360 <test_main+0xe58>
20001334:	effff517          	auipc	a0,0xeffff
20001338:	cd450513          	addi	a0,a0,-812 # 10000008 <_data_end>
2000133c:	45a1                	li	a1,8
2000133e:	4601                	li	a2,0
20001340:	4681                	li	a3,0
20001342:	78e000ef          	jal	ra,20001ad0 <dif_plic_irq_set_enabled>
20001346:	c115                	beqz	a0,2000136a <test_main+0xe62>
20001348:	00002597          	auipc	a1,0x2
2000134c:	bb858593          	addi	a1,a1,-1096 # 20002f00 <kTestConfig+0x2c0>
20001350:	00a0                	addi	s0,sp,72
20001352:	4651                	li	a2,20
20001354:	8522                	mv	a0,s0
20001356:	3aa010ef          	jal	ra,20002700 <memcpy>
2000135a:	8522                	mv	a0,s0
2000135c:	0d5000ef          	jal	ra,20001c30 <base_log_internal_core>
20001360:	6531                	lui	a0,0xc
20001362:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001366:	6f7000ef          	jal	ra,2000225c <test_status_set>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:460
  mmio_region_t plic_base_addr =
      mmio_region_from_addr(TOP_EARLGREY_RV_PLIC_BASE_ADDR);
  plic_init_with_irqs(plic_base_addr, &plic);

  // Enable the external IRQ at Ibex.
  irq_global_ctrl(true);
2000136a:	4505                	li	a0,1
2000136c:	4405                	li	s0,1
2000136e:	424010ef          	jal	ra,20002792 <irq_global_ctrl>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:461
  irq_external_ctrl(true);
20001372:	4505                	li	a0,1
20001374:	430010ef          	jal	ra,200027a4 <irq_external_ctrl>
execute_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:354
  exp_uart_irq_tx_watermark = true;
20001378:	effff517          	auipc	a0,0xeffff
2000137c:	c9450513          	addi	a0,a0,-876 # 1000000c <exp_uart_irq_tx_watermark>
20001380:	d42a                	sw	a0,40(sp)
20001382:	00850023          	sb	s0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:358
  uart_irq_tx_watermark_fired = true;
20001386:	effff917          	auipc	s2,0xeffff
2000138a:	c8790913          	addi	s2,s2,-889 # 1000000d <uart_irq_tx_watermark_fired>
2000138e:	00890023          	sb	s0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:359
  exp_uart_irq_tx_empty = false;
20001392:	effffb17          	auipc	s6,0xeffff
20001396:	c7eb0b13          	addi	s6,s6,-898 # 10000010 <exp_uart_irq_tx_empty>
2000139a:	000b0023          	sb	zero,0(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:360
  uart_irq_tx_empty_fired = false;
2000139e:	effffb97          	auipc	s7,0xeffff
200013a2:	c73b8b93          	addi	s7,s7,-909 # 10000011 <uart_irq_tx_empty_fired>
200013a6:	000b8023          	sb	zero,0(s7)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:364
  exp_uart_irq_rx_watermark = true;
200013aa:	effff517          	auipc	a0,0xeffff
200013ae:	c6450513          	addi	a0,a0,-924 # 1000000e <exp_uart_irq_rx_watermark>
200013b2:	ce2a                	sw	a0,28(sp)
200013b4:	00850023          	sb	s0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:368
  uart_irq_rx_watermark_fired = true;
200013b8:	effffc17          	auipc	s8,0xeffff
200013bc:	c57c0c13          	addi	s8,s8,-937 # 1000000f <uart_irq_rx_watermark_fired>
200013c0:	008c0023          	sb	s0,0(s8)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:369
  exp_uart_irq_rx_overflow = false;
200013c4:	effffd17          	auipc	s10,0xeffff
200013c8:	c4ed0d13          	addi	s10,s10,-946 # 10000012 <exp_uart_irq_rx_overflow>
200013cc:	000d0023          	sb	zero,0(s10)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:370
  uart_irq_rx_overflow_fired = false;
200013d0:	effffa97          	auipc	s5,0xeffff
200013d4:	c43a8a93          	addi	s5,s5,-957 # 10000013 <uart_irq_rx_overflow_fired>
200013d8:	000a8023          	sb	zero,0(s5)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:375
  LOG_INFO("Executing the test.");
200013dc:	5532                	lw	a0,44(sp)
200013de:	c909                	beqz	a0,200013f0 <test_main+0xee8>
200013e0:	e000f517          	auipc	a0,0xe000f
200013e4:	fe050513          	addi	a0,a0,-32 # 103c0 <execute_test.kLogFields>
200013e8:	4581                	li	a1,0
200013ea:	0f1000ef          	jal	ra,20001cda <base_log_internal_dv>
200013ee:	a829                	j	20001408 <test_main+0xf00>
200013f0:	00002597          	auipc	a1,0x2
200013f4:	b2458593          	addi	a1,a1,-1244 # 20002f14 <kTestConfig+0x2d4>
200013f8:	00a4                	addi	s1,sp,72
200013fa:	4651                	li	a2,20
200013fc:	8526                	mv	a0,s1
200013fe:	302010ef          	jal	ra,20002700 <memcpy>
20001402:	8526                	mv	a0,s1
20001404:	02d000ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:352
  bool uart_tx_done = false;
20001408:	4d81                	li	s11,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:353
  size_t uart_tx_bytes_written = 0;
2000140a:	4981                	li	s3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:362
  bool uart_rx_done = false;
2000140c:	4c81                	li	s9,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:363
  size_t uart_rx_bytes_read = 0;
2000140e:	4a01                	li	s4,0
20001410:	00002517          	auipc	a0,0x2
20001414:	b1850513          	addi	a0,a0,-1256 # 20002f28 <uart_tx_data>
20001418:	d02a                	sw	a0,32(sp)
2000141a:	effff497          	auipc	s1,0xeffff
2000141e:	bfa48493          	addi	s1,s1,-1030 # 10000014 <uart>
20001422:	00002517          	auipc	a0,0x2
20001426:	b8650513          	addi	a0,a0,-1146 # 20002fa8 <uart_tx_data+0x80>
2000142a:	c82a                	sw	a0,16(sp)
2000142c:	6531                	lui	a0,0xc
2000142e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001432:	d22a                	sw	a0,36(sp)
20001434:	e000f517          	auipc	a0,0xe000f
20001438:	fa050513          	addi	a0,a0,-96 # 103d4 <execute_test.kLogFields.116>
2000143c:	cc2a                	sw	a0,24(sp)
2000143e:	00002517          	auipc	a0,0x2
20001442:	b9250513          	addi	a0,a0,-1134 # 20002fd0 <uart_tx_data+0xa8>
20001446:	c22a                	sw	a0,4(sp)
20001448:	e000f517          	auipc	a0,0xe000f
2000144c:	fb450513          	addi	a0,a0,-76 # 103fc <execute_test.kLogFields.122>
20001450:	c42a                	sw	a0,8(sp)
20001452:	00002517          	auipc	a0,0x2
20001456:	b6a50513          	addi	a0,a0,-1174 # 20002fbc <uart_tx_data+0x94>
2000145a:	c62a                	sw	a0,12(sp)
2000145c:	e000f517          	auipc	a0,0xe000f
20001460:	f8c50513          	addi	a0,a0,-116 # 103e8 <execute_test.kLogFields.119>
20001464:	ca2a                	sw	a0,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:376
  while (!uart_tx_done || !uart_rx_done || !uart_irq_tx_empty_fired ||
20001466:	0ffdf513          	andi	a0,s11,255
2000146a:	0ffcf413          	andi	s0,s9,255
2000146e:	c909                	beqz	a0,20001480 <test_main+0xf78>
20001470:	c801                	beqz	s0,20001480 <test_main+0xf78>
20001472:	000bc583          	lbu	a1,0(s7)
20001476:	c589                	beqz	a1,20001480 <test_main+0xf78>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:377
         !uart_irq_rx_overflow_fired) {
20001478:	000ac583          	lbu	a1,0(s5)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:376
  while (!uart_tx_done || !uart_rx_done || !uart_irq_tx_empty_fired ||
2000147c:	12059e63          	bnez	a1,200015b8 <test_main+0x10b0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:378
    if (!uart_tx_done && uart_irq_tx_watermark_fired) {
20001480:	e13d                	bnez	a0,200014e6 <test_main+0xfde>
20001482:	00094503          	lbu	a0,0(s2)
20001486:	c135                	beqz	a0,200014ea <test_main+0xfe2>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:379
      uart_irq_tx_watermark_fired = false;
20001488:	00090023          	sb	zero,0(s2)
uart_transfer_ongoing_bytes():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:330
  size_t bytes_remaining = dataset_size - *dataset_index;
2000148c:	08000513          	li	a0,128
20001490:	41350633          	sub	a2,a0,s3
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:331
  size_t bytes_transferred = 0;
20001494:	d802                	sw	zero,48(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:335
      result = dif_uart_bytes_send(uart, &data[*dataset_index], bytes_remaining,
20001496:	5502                	lw	a0,32(sp)
20001498:	00a985b3          	add	a1,s3,a0
2000149c:	8526                	mv	a0,s1
2000149e:	1814                	addi	a3,sp,48
200014a0:	416000ef          	jal	ra,200018b6 <dif_uart_bytes_send>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:346
  *dataset_index += bytes_transferred;
200014a4:	55c2                	lw	a1,48(sp)
200014a6:	99ae                	add	s3,s3,a1
execute_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:382
      CHECK(uart_transfer_ongoing_bytes(
200014a8:	c515                	beqz	a0,200014d4 <test_main+0xfcc>
200014aa:	5532                	lw	a0,44(sp)
200014ac:	c511                	beqz	a0,200014b8 <test_main+0xfb0>
200014ae:	4562                	lw	a0,24(sp)
200014b0:	4581                	li	a1,0
200014b2:	029000ef          	jal	ra,20001cda <base_log_internal_dv>
200014b6:	a821                	j	200014ce <test_main+0xfc6>
200014b8:	4651                	li	a2,20
200014ba:	8da6                	mv	s11,s1
200014bc:	1804                	addi	s1,sp,48
200014be:	8526                	mv	a0,s1
200014c0:	45c2                	lw	a1,16(sp)
200014c2:	23e010ef          	jal	ra,20002700 <memcpy>
200014c6:	8526                	mv	a0,s1
200014c8:	84ee                	mv	s1,s11
200014ca:	766000ef          	jal	ra,20001c30 <base_log_internal_core>
200014ce:	5512                	lw	a0,36(sp)
200014d0:	58d000ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:386
      if (uart_tx_done) {
200014d4:	08000513          	li	a0,128
200014d8:	00a99963          	bne	s3,a0,200014ea <test_main+0xfe2>
200014dc:	4d85                	li	s11,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:389
        exp_uart_irq_tx_empty = true;
200014de:	01bb0023          	sb	s11,0(s6)
200014e2:	08000993          	li	s3,128
200014e6:	e04d                	bnez	s0,20001588 <test_main+0x1080>
200014e8:	a019                	j	200014ee <test_main+0xfe6>
200014ea:	4d81                	li	s11,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:393
    if (!uart_rx_done && uart_irq_rx_watermark_fired) {
200014ec:	ec51                	bnez	s0,20001588 <test_main+0x1080>
200014ee:	000c4503          	lbu	a0,0(s8)
200014f2:	c925                	beqz	a0,20001562 <test_main+0x105a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:394
      uart_irq_rx_watermark_fired = false;
200014f4:	000c0023          	sb	zero,0(s8)
uart_transfer_ongoing_bytes():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:330
  size_t bytes_remaining = dataset_size - *dataset_index;
200014f8:	08000513          	li	a0,128
200014fc:	414505b3          	sub	a1,a0,s4
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:331
  size_t bytes_transferred = 0;
20001500:	d802                	sw	zero,48(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:340
          dif_uart_bytes_receive(uart, bytes_remaining, &data[*dataset_index],
20001502:	00a8                	addi	a0,sp,72
20001504:	01450633          	add	a2,a0,s4
20001508:	8526                	mv	a0,s1
2000150a:	1814                	addi	a3,sp,48
2000150c:	3de000ef          	jal	ra,200018ea <dif_uart_bytes_receive>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:346
  *dataset_index += bytes_transferred;
20001510:	55c2                	lw	a1,48(sp)
20001512:	9a2e                	add	s4,s4,a1
execute_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:397
      CHECK(uart_transfer_ongoing_bytes(uart, kUartReceive, uart_rx_data,
20001514:	c505                	beqz	a0,2000153c <test_main+0x1034>
20001516:	5532                	lw	a0,44(sp)
20001518:	c511                	beqz	a0,20001524 <test_main+0x101c>
2000151a:	4552                	lw	a0,20(sp)
2000151c:	4581                	li	a1,0
2000151e:	7bc000ef          	jal	ra,20001cda <base_log_internal_dv>
20001522:	a811                	j	20001536 <test_main+0x102e>
20001524:	4651                	li	a2,20
20001526:	1800                	addi	s0,sp,48
20001528:	8522                	mv	a0,s0
2000152a:	45b2                	lw	a1,12(sp)
2000152c:	1d4010ef          	jal	ra,20002700 <memcpy>
20001530:	8522                	mv	a0,s0
20001532:	6fe000ef          	jal	ra,20001c30 <base_log_internal_core>
20001536:	5512                	lw	a0,36(sp)
20001538:	525000ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:401
      if (uart_rx_done) {
2000153c:	08000513          	li	a0,128
20001540:	02aa1163          	bne	s4,a0,20001562 <test_main+0x105a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:402
        exp_uart_irq_rx_watermark = false;
20001544:	4572                	lw	a0,28(sp)
20001546:	00050023          	sb	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:406
        CHECK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
2000154a:	4585                	li	a1,1
2000154c:	4605                	li	a2,1
2000154e:	8526                	mv	a0,s1
20001550:	2465                	jal	200017f8 <dif_uart_irq_set_enabled>
20001552:	c515                	beqz	a0,2000157e <test_main+0x1076>
20001554:	5532                	lw	a0,44(sp)
20001556:	c901                	beqz	a0,20001566 <test_main+0x105e>
20001558:	4522                	lw	a0,8(sp)
2000155a:	4581                	li	a1,0
2000155c:	77e000ef          	jal	ra,20001cda <base_log_internal_dv>
20001560:	a821                	j	20001578 <test_main+0x1070>
20001562:	4c81                	li	s9,0
20001564:	a015                	j	20001588 <test_main+0x1080>
20001566:	4651                	li	a2,20
20001568:	1800                	addi	s0,sp,48
2000156a:	8522                	mv	a0,s0
2000156c:	4592                	lw	a1,4(sp)
2000156e:	192010ef          	jal	ra,20002700 <memcpy>
20001572:	8522                	mv	a0,s0
20001574:	6bc000ef          	jal	ra,20001c30 <base_log_internal_core>
20001578:	5512                	lw	a0,36(sp)
2000157a:	4e3000ef          	jal	ra,2000225c <test_status_set>
2000157e:	4c85                	li	s9,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:410
        exp_uart_irq_rx_overflow = true;
20001580:	019d0023          	sb	s9,0(s10)
20001584:	08000a13          	li	s4,128
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:414
    if (uart_irq_tx_empty_fired) {
20001588:	000bc503          	lbu	a0,0(s7)
2000158c:	c511                	beqz	a0,20001598 <test_main+0x1090>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:415
      exp_uart_irq_tx_watermark = false;
2000158e:	5522                	lw	a0,40(sp)
20001590:	00050023          	sb	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:416
      exp_uart_irq_tx_empty = false;
20001594:	000b0023          	sb	zero,0(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:419
    if (uart_irq_rx_overflow_fired) {
20001598:	000ac503          	lbu	a0,0(s5)
2000159c:	c119                	beqz	a0,200015a2 <test_main+0x109a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:420
      exp_uart_irq_rx_overflow = false;
2000159e:	000d0023          	sb	zero,0(s10)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:427
    if (!uart_irq_rx_watermark_fired && !uart_irq_tx_watermark_fired) {
200015a2:	000c4503          	lbu	a0,0(s8)
200015a6:	ec0510e3          	bnez	a0,20001466 <test_main+0xf5e>
200015aa:	00094503          	lbu	a0,0(s2)
200015ae:	ea051ce3          	bnez	a0,20001466 <test_main+0xf5e>
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
200015b2:	10500073          	wfi
200015b6:	bd45                	j	20001466 <test_main+0xf5e>
execute_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:433
  LOG_INFO("Checking the received UART RX data for consistency.");
200015b8:	5532                	lw	a0,44(sp)
200015ba:	c909                	beqz	a0,200015cc <test_main+0x10c4>
200015bc:	e000f517          	auipc	a0,0xe000f
200015c0:	e5450513          	addi	a0,a0,-428 # 10410 <execute_test.kLogFields.124>
200015c4:	4581                	li	a1,0
200015c6:	714000ef          	jal	ra,20001cda <base_log_internal_dv>
200015ca:	a829                	j	200015e4 <test_main+0x10dc>
200015cc:	00002597          	auipc	a1,0x2
200015d0:	a1858593          	addi	a1,a1,-1512 # 20002fe4 <uart_tx_data+0xbc>
200015d4:	1800                	addi	s0,sp,48
200015d6:	4651                	li	a2,20
200015d8:	8522                	mv	a0,s0
200015da:	126010ef          	jal	ra,20002700 <memcpy>
200015de:	8522                	mv	a0,s0
200015e0:	650000ef          	jal	ra,20001c30 <base_log_internal_core>
200015e4:	04810c93          	addi	s9,sp,72
200015e8:	4401                	li	s0,0
200015ea:	00002917          	auipc	s2,0x2
200015ee:	a0e90913          	addi	s2,s2,-1522 # 20002ff8 <exp_uart_rx_data>
200015f2:	08000c13          	li	s8,128
200015f6:	00002a17          	auipc	s4,0x2
200015fa:	a82a0a13          	addi	s4,s4,-1406 # 20003078 <exp_uart_rx_data+0x80>
200015fe:	03010993          	addi	s3,sp,48
20001602:	6531                	lui	a0,0xc
20001604:	aad50b13          	addi	s6,a0,-1363 # baad <_stack_size+0x9aad>
20001608:	e000fa97          	auipc	s5,0xe000f
2000160c:	e1ca8a93          	addi	s5,s5,-484 # 10424 <execute_test.kLogFields.127>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:435
    CHECK(uart_rx_data[i] == exp_uart_rx_data[i],
20001610:	008c8533          	add	a0,s9,s0
20001614:	00054483          	lbu	s1,0(a0)
20001618:	01240533          	add	a0,s0,s2
2000161c:	00054b83          	lbu	s7,0(a0)
20001620:	03748a63          	beq	s1,s7,20001654 <test_main+0x114c>
20001624:	5532                	lw	a0,44(sp)
20001626:	c909                	beqz	a0,20001638 <test_main+0x1130>
20001628:	458d                	li	a1,3
2000162a:	8556                	mv	a0,s5
2000162c:	8622                	mv	a2,s0
2000162e:	86a6                	mv	a3,s1
20001630:	875e                	mv	a4,s7
20001632:	6a8000ef          	jal	ra,20001cda <base_log_internal_dv>
20001636:	a821                	j	2000164e <test_main+0x1146>
20001638:	4651                	li	a2,20
2000163a:	854e                	mv	a0,s3
2000163c:	85d2                	mv	a1,s4
2000163e:	0c2010ef          	jal	ra,20002700 <memcpy>
20001642:	854e                	mv	a0,s3
20001644:	85a2                	mv	a1,s0
20001646:	8626                	mv	a2,s1
20001648:	86de                	mv	a3,s7
2000164a:	5e6000ef          	jal	ra,20001c30 <base_log_internal_core>
2000164e:	855a                	mv	a0,s6
20001650:	40d000ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:434
  for (int i = 0; i < UART_DATASET_SIZE; ++i) {
20001654:	0405                	addi	s0,s0,1
20001656:	fb841de3          	bne	s0,s8,20001610 <test_main+0x1108>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/uart_tx_rx_test.c:464

  // Execute the test.
  return execute_test(&uart);
2000165a:	4505                	li	a0,1
2000165c:	4dbe                	lw	s11,204(sp)
2000165e:	4d4e                	lw	s10,208(sp)
20001660:	4cde                	lw	s9,212(sp)
20001662:	4c6e                	lw	s8,216(sp)
20001664:	4bfe                	lw	s7,220(sp)
20001666:	5b0e                	lw	s6,224(sp)
20001668:	5a9e                	lw	s5,228(sp)
2000166a:	5a2e                	lw	s4,232(sp)
2000166c:	59be                	lw	s3,236(sp)
2000166e:	594e                	lw	s2,240(sp)
20001670:	54de                	lw	s1,244(sp)
20001672:	546e                	lw	s0,248(sp)
20001674:	50fe                	lw	ra,252(sp)
20001676:	6111                	addi	sp,sp,256
20001678:	8082                	ret
	...

2000167c <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
2000167c:	c581                	beqz	a1,20001684 <dif_uart_init+0x8>
2000167e:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20001680:	c188                	sw	a0,0(a1)
20001682:	a011                	j	20001686 <dif_uart_init+0xa>
20001684:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001686:	8532                	mv	a0,a2
20001688:	8082                	ret

2000168a <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
2000168a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
2000168c:	c606                	sw	ra,12(sp)
2000168e:	c422                	sw	s0,8(sp)
20001690:	c226                	sw	s1,4(sp)
20001692:	c935                	beqz	a0,20001706 <dif_uart_configure+0x7c>
20001694:	84ae                	mv	s1,a1
20001696:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001698:	418c                	lw	a1,0(a1)
2000169a:	450d                	li	a0,3
2000169c:	c5b5                	beqz	a1,20001708 <dif_uart_configure+0x7e>
2000169e:	40d0                	lw	a2,4(s1)
200016a0:	c625                	beqz	a2,20001708 <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200016a2:	01459513          	slli	a0,a1,0x14
200016a6:	81b1                	srli	a1,a1,0xc
200016a8:	4681                	li	a3,0
200016aa:	13e010ef          	jal	ra,200027e8 <__udivdi3>
200016ae:	6641                	lui	a2,0x10
200016b0:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200016b2:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200016b4:	8d31                	xor	a0,a0,a2
200016b6:	8dc9                	or	a1,a1,a0
200016b8:	4511                	li	a0,4
200016ba:	e5b9                	bnez	a1,20001708 <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200016bc:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200016be:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200016c2:	4008                	lw	a0,0(s0)
200016c4:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016c6:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200016c8:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016ca:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200016ce:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016d0:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200016d4:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016d6:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200016da:	4008                	lw	a0,0(s0)
200016dc:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016de:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200016e0:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
200016e2:	01061513          	slli	a0,a2,0x10
200016e6:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
200016ea:	c291                	beqz	a3,200016ee <dif_uart_configure+0x64>
200016ec:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
200016ee:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
200016f0:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
200016f2:	e219                	bnez	a2,200016f8 <dif_uart_configure+0x6e>
200016f4:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
200016f8:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016fa:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200016fc:	400c                	lw	a1,0(s0)
200016fe:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001700:	0005a223          	sw	zero,4(a1)
20001704:	a011                	j	20001708 <dif_uart_configure+0x7e>
20001706:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001708:	4492                	lw	s1,4(sp)
2000170a:	4422                	lw	s0,8(sp)
2000170c:	40b2                	lw	ra,12(sp)
2000170e:	0141                	addi	sp,sp,16
20001710:	8082                	ret

20001712 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001712:	1141                	addi	sp,sp,-16
20001714:	c606                	sw	ra,12(sp)
20001716:	c422                	sw	s0,8(sp)
20001718:	c226                	sw	s1,4(sp)
2000171a:	84aa                	mv	s1,a0
2000171c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
2000171e:	c09d                	beqz	s1,20001744 <dif_uart_irq_is_pending+0x32>
20001720:	8432                	mv	s0,a2
20001722:	c20d                	beqz	a2,20001744 <dif_uart_irq_is_pending+0x32>
20001724:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001726:	852e                	mv	a0,a1
20001728:	85b2                	mv	a1,a2
2000172a:	2015                	jal	2000174e <uart_irq_offset_get>
2000172c:	85aa                	mv	a1,a0
2000172e:	4505                	li	a0,1
20001730:	c991                	beqz	a1,20001744 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001732:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001734:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001736:	4602                	lw	a2,0(sp)
20001738:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000173a:	00c5d5b3          	srl	a1,a1,a2
2000173e:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20001740:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001744:	4492                	lw	s1,4(sp)
20001746:	4422                	lw	s0,8(sp)
20001748:	40b2                	lw	ra,12(sp)
2000174a:	0141                	addi	sp,sp,16
2000174c:	8082                	ret

2000174e <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
2000174e:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20001750:	00a66563          	bltu	a2,a0,2000175a <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001754:	c188                	sw	a0,0(a1)
20001756:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001758:	8082                	ret
2000175a:	4501                	li	a0,0
2000175c:	8082                	ret

2000175e <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
2000175e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20001760:	c606                	sw	ra,12(sp)
20001762:	c422                	sw	s0,8(sp)
20001764:	c10d                	beqz	a0,20001786 <dif_uart_irq_acknowledge+0x28>
20001766:	842a                	mv	s0,a0
20001768:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000176a:	852e                	mv	a0,a1
2000176c:	85b2                	mv	a1,a2
2000176e:	37c5                	jal	2000174e <uart_irq_offset_get>
20001770:	85aa                	mv	a1,a0
20001772:	4505                	li	a0,1
20001774:	c991                	beqz	a1,20001788 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001776:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001778:	4010                	lw	a2,0(s0)
2000177a:	4501                	li	a0,0
2000177c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000177e:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001782:	c20c                	sw	a1,0(a2)
20001784:	a011                	j	20001788 <dif_uart_irq_acknowledge+0x2a>
20001786:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001788:	4422                	lw	s0,8(sp)
2000178a:	40b2                	lw	ra,12(sp)
2000178c:	0141                	addi	sp,sp,16
2000178e:	8082                	ret

20001790 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001790:	c911                	beqz	a0,200017a4 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001792:	c581                	beqz	a1,2000179a <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001794:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001796:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001798:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000179a:	410c                	lw	a1,0(a0)
2000179c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000179e:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
200017a2:	8082                	ret
200017a4:	4509                	li	a0,2
200017a6:	8082                	ret

200017a8 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200017a8:	862a                	mv	a2,a0
200017aa:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200017ac:	c611                	beqz	a2,200017b8 <dif_uart_irq_restore_all+0x10>
200017ae:	c589                	beqz	a1,200017b8 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200017b0:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200017b2:	4210                	lw	a2,0(a2)
200017b4:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017b6:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200017b8:	8082                	ret

200017ba <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200017ba:	1141                	addi	sp,sp,-16
200017bc:	c606                	sw	ra,12(sp)
200017be:	c422                	sw	s0,8(sp)
200017c0:	c226                	sw	s1,4(sp)
200017c2:	84aa                	mv	s1,a0
200017c4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200017c6:	c485                	beqz	s1,200017ee <dif_uart_irq_get_enabled+0x34>
200017c8:	8432                	mv	s0,a2
200017ca:	c215                	beqz	a2,200017ee <dif_uart_irq_get_enabled+0x34>
200017cc:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200017ce:	852e                	mv	a0,a1
200017d0:	85b2                	mv	a1,a2
200017d2:	3fb5                	jal	2000174e <uart_irq_offset_get>
200017d4:	85aa                	mv	a1,a0
200017d6:	4505                	li	a0,1
200017d8:	c999                	beqz	a1,200017ee <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200017da:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017dc:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
200017de:	4602                	lw	a2,0(sp)
200017e0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200017e2:	00c5d5b3          	srl	a1,a1,a2
200017e6:	8985                	andi	a1,a1,1
200017e8:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
200017ec:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
200017ee:	4492                	lw	s1,4(sp)
200017f0:	4422                	lw	s0,8(sp)
200017f2:	40b2                	lw	ra,12(sp)
200017f4:	0141                	addi	sp,sp,16
200017f6:	8082                	ret

200017f8 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
200017f8:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
200017fa:	c606                	sw	ra,12(sp)
200017fc:	c422                	sw	s0,8(sp)
200017fe:	c226                	sw	s1,4(sp)
20001800:	c91d                	beqz	a0,20001836 <dif_uart_irq_set_enabled+0x3e>
20001802:	8432                	mv	s0,a2
20001804:	84aa                	mv	s1,a0
20001806:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001808:	852e                	mv	a0,a1
2000180a:	85b2                	mv	a1,a2
2000180c:	3789                	jal	2000174e <uart_irq_offset_get>
2000180e:	85aa                	mv	a1,a0
20001810:	4505                	li	a0,1
20001812:	c19d                	beqz	a1,20001838 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001814:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001816:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001818:	4682                	lw	a3,0(sp)
2000181a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
2000181c:	00143713          	seqz	a4,s0
20001820:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001822:	00d797b3          	sll	a5,a5,a3
20001826:	fff7c793          	not	a5,a5
2000182a:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000182c:	00d716b3          	sll	a3,a4,a3
20001830:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001832:	c1d0                	sw	a2,4(a1)
20001834:	a011                	j	20001838 <dif_uart_irq_set_enabled+0x40>
20001836:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001838:	4492                	lw	s1,4(sp)
2000183a:	4422                	lw	s0,8(sp)
2000183c:	40b2                	lw	ra,12(sp)
2000183e:	0141                	addi	sp,sp,16
20001840:	8082                	ret

20001842 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20001842:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20001844:	c606                	sw	ra,12(sp)
20001846:	c422                	sw	s0,8(sp)
20001848:	c10d                	beqz	a0,2000186a <dif_uart_irq_force+0x28>
2000184a:	842a                	mv	s0,a0
2000184c:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000184e:	852e                	mv	a0,a1
20001850:	85b2                	mv	a1,a2
20001852:	3df5                	jal	2000174e <uart_irq_offset_get>
20001854:	85aa                	mv	a1,a0
20001856:	4505                	li	a0,1
20001858:	c991                	beqz	a1,2000186c <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
2000185a:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
2000185c:	4010                	lw	a2,0(s0)
2000185e:	4501                	li	a0,0
20001860:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001862:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001866:	c60c                	sw	a1,8(a2)
20001868:	a011                	j	2000186c <dif_uart_irq_force+0x2a>
2000186a:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
2000186c:	4422                	lw	s0,8(sp)
2000186e:	40b2                	lw	ra,12(sp)
20001870:	0141                	addi	sp,sp,16
20001872:	8082                	ret

20001874 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001874:	cd09                	beqz	a0,2000188e <dif_uart_watermark_rx_set+0x1a>
20001876:	4691                	li	a3,4
20001878:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000187a:	00b6eb63          	bltu	a3,a1,20001890 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000187e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001880:	4d54                	lw	a3,28(a0)
20001882:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20001884:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001886:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001888:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000188a:	cd4c                	sw	a1,28(a0)
2000188c:	a011                	j	20001890 <dif_uart_watermark_rx_set+0x1c>
2000188e:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001890:	8532                	mv	a0,a2
20001892:	8082                	ret

20001894 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001894:	cd11                	beqz	a0,200018b0 <dif_uart_watermark_tx_set+0x1c>
20001896:	468d                	li	a3,3
20001898:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000189a:	00b6ec63          	bltu	a3,a1,200018b2 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000189e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018a0:	4d54                	lw	a3,28(a0)
200018a2:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
200018a4:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200018a6:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200018aa:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018ac:	cd4c                	sw	a1,28(a0)
200018ae:	a011                	j	200018b2 <dif_uart_watermark_tx_set+0x1e>
200018b0:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200018b2:	8532                	mv	a0,a2
200018b4:	8082                	ret

200018b6 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200018b6:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200018b8:	c51d                	beqz	a0,200018e6 <dif_uart_bytes_send+0x30>
200018ba:	c595                	beqz	a1,200018e6 <dif_uart_bytes_send+0x30>
200018bc:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200018be:	c20d                	beqz	a2,200018e0 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200018c0:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018c4:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200018c8:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200018ca:	eb19                	bnez	a4,200018e0 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
200018cc:	00f58733          	add	a4,a1,a5
200018d0:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
200018d4:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018d6:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200018da:	fef613e3          	bne	a2,a5,200018c0 <dif_uart_bytes_send+0xa>
200018de:	87b2                	mv	a5,a2
200018e0:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
200018e2:	c291                	beqz	a3,200018e6 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
200018e4:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
200018e6:	853a                	mv	a0,a4
200018e8:	8082                	ret

200018ea <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
200018ea:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
200018ec:	c515                	beqz	a0,20001918 <dif_uart_bytes_receive+0x2e>
200018ee:	c60d                	beqz	a2,20001918 <dif_uart_bytes_receive+0x2e>
200018f0:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200018f2:	cd99                	beqz	a1,20001910 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200018f4:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018f6:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200018f8:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200018fc:	eb91                	bnez	a5,20001910 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018fe:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001900:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001904:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001906:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000190a:	ff0595e3          	bne	a1,a6,200018f4 <dif_uart_bytes_receive+0xa>
2000190e:	882e                	mv	a6,a1
20001910:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001912:	c299                	beqz	a3,20001918 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001914:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001918:	853a                	mv	a0,a4
2000191a:	8082                	ret

2000191c <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
2000191c:	cd19                	beqz	a0,2000193a <dif_uart_byte_send_polled+0x1e>
2000191e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001920:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001922:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001924:	fef5                	bnez	a3,20001920 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001926:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001928:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000192a:	e299                	bnez	a3,20001930 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000192c:	ce0c                	sw	a1,24(a2)
2000192e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001930:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001932:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001934:	dd75                	beqz	a0,20001930 <dif_uart_byte_send_polled+0x14>
20001936:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001938:	8082                	ret
2000193a:	4509                	li	a0,2
2000193c:	8082                	ret

2000193e <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
2000193e:	862a                	mv	a2,a0
20001940:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001942:	c205                	beqz	a2,20001962 <dif_uart_byte_receive_polled+0x24>
20001944:	cd99                	beqz	a1,20001962 <dif_uart_byte_receive_polled+0x24>
20001946:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001948:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000194a:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
2000194e:	fd6d                	bnez	a0,20001948 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001950:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001952:	02057693          	andi	a3,a0,32
20001956:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001958:	e689                	bnez	a3,20001962 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000195a:	4a50                	lw	a2,20(a2)
2000195c:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000195e:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001962:	8082                	ret

20001964 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001964:	862a                	mv	a2,a0
20001966:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001968:	ca09                	beqz	a2,2000197a <dif_uart_rx_bytes_available+0x16>
2000196a:	c981                	beqz	a1,2000197a <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000196c:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000196e:	5110                	lw	a2,32(a0)
20001970:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001972:	8241                	srli	a2,a2,0x10
20001974:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001978:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
2000197a:	8082                	ret

2000197c <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000197c:	862a                	mv	a2,a0
2000197e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001980:	ce01                	beqz	a2,20001998 <dif_uart_tx_bytes_available+0x1c>
20001982:	c999                	beqz	a1,20001998 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001984:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001986:	5110                	lw	a2,32(a0)
20001988:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
2000198a:	03f67613          	andi	a2,a2,63
2000198e:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001992:	40c68633          	sub	a2,a3,a2
20001996:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001998:	8082                	ret

2000199a <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
2000199a:	c11d                	beqz	a0,200019c0 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000199c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000199e:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200019a0:	ffd5f693          	andi	a3,a1,-3
200019a4:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200019a8:	fff58713          	addi	a4,a1,-1
200019ac:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200019ae:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200019b2:	00f77463          	bgeu	a4,a5,200019ba <dif_uart_fifo_reset+0x20>
200019b6:	0025e593          	ori	a1,a1,2
200019ba:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200019bc:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200019be:	8082                	ret
200019c0:	4509                	li	a0,2
200019c2:	8082                	ret

200019c4 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
200019c4:	c515                	beqz	a0,200019f0 <dif_uart_loopback_set+0x2c>
200019c6:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
200019c8:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
200019ca:	0015b593          	seqz	a1,a1
200019ce:	4715                	li	a4,5
200019d0:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019d4:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
200019d6:	00163613          	seqz	a2,a2
200019da:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200019dc:	00b797b3          	sll	a5,a5,a1
200019e0:	fff7c793          	not	a5,a5
200019e4:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200019e6:	00b615b3          	sll	a1,a2,a1
200019ea:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200019ec:	c54c                	sw	a1,12(a0)
200019ee:	a011                	j	200019f2 <dif_uart_loopback_set+0x2e>
200019f0:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200019f2:	8536                	mv	a0,a3
200019f4:	8082                	ret

200019f6 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
200019f6:	862a                	mv	a2,a0
200019f8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
200019fa:	ca11                	beqz	a2,20001a0e <dif_uart_enable_rx_timeout+0x18>
200019fc:	0185d693          	srli	a3,a1,0x18
20001a00:	e699                	bnez	a3,20001a0e <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001a02:	4210                	lw	a2,0(a2)
20001a04:	4501                	li	a0,0
20001a06:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001a0a:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a0c:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001a0e:	8082                	ret

20001a10 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001a10:	c511                	beqz	a0,20001a1c <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001a12:	410c                	lw	a1,0(a0)
20001a14:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a16:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001a1a:	8082                	ret
20001a1c:	4509                	li	a0,2
20001a1e:	8082                	ret

20001a20 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001a20:	86aa                	mv	a3,a0
20001a22:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001a24:	ce99                	beqz	a3,20001a42 <dif_uart_get_rx_timeout+0x22>
20001a26:	cd91                	beqz	a1,20001a42 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001a28:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a2a:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001a2c:	fff6c513          	not	a0,a3
20001a30:	817d                	srli	a0,a0,0x1f
20001a32:	c188                	sw	a0,0(a1)
20001a34:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001a36:	c611                	beqz	a2,20001a42 <dif_uart_get_rx_timeout+0x22>
20001a38:	010005b7          	lui	a1,0x1000
20001a3c:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001a3e:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001a40:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001a42:	8082                	ret

20001a44 <dif_plic_init>:
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:170
    mmio_region_write32(plic->params.base_addr, offset, 0);
  }
}

dif_plic_result_t dif_plic_init(dif_plic_params_t params, dif_plic_t *plic) {
  if (plic == NULL) {
20001a44:	cda1                	beqz	a1,20001a9c <dif_plic_init+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:174
    return kDifPlicBadArg;
  }

  plic->params = params;
20001a46:	c188                	sw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a48:	00052c23          	sw	zero,24(a0)
20001a4c:	4571                	li	a0,28
20001a4e:	03000613          	li	a2,48
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:140
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001a52:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a54:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
  for (int i = 0; i < RV_PLIC_LE_MULTIREG_COUNT; ++i) {
20001a56:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a58:	0006a023          	sw	zero,0(a3) # 80000000 <_data_init_start+0x5fffc1ec>
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
20001a5c:	fec51be3          	bne	a0,a2,20001a52 <dif_plic_init+0xe>
20001a60:	03000513          	li	a0,48
20001a64:	30000613          	li	a2,768
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:146
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001a68:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a6a:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
  for (int i = 0; i < RV_PLIC_PARAM_NUM_SRC; ++i) {
20001a6c:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a6e:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
20001a72:	fec51be3          	bne	a0,a2,20001a68 <dif_plic_init+0x24>
20001a76:	30000513          	li	a0,768
20001a7a:	31800613          	li	a2,792
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:156
      mmio_region_write32(plic->params.base_addr, multireg_offset, 0);
20001a7e:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a80:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
    for (int i = 0; i < RV_PLIC_IE0_MULTIREG_COUNT; ++i) {
20001a82:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a84:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
20001a88:	fec51be3          	bne	a0,a2,20001a7e <dif_plic_init+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:161
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001a8c:	4188                	lw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a8e:	30052c23          	sw	zero,792(a0)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:165
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001a92:	418c                	lw	a1,0(a1)
20001a94:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a96:	3205a023          	sw	zero,800(a1) # 1000320 <init_uart.kLogFields.2+0xfefe34>
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:180

  // TODO: Move this out into its own function.
  plic_reset(plic);

  return kDifPlicOk;
}
20001a9a:	8082                	ret
20001a9c:	4509                	li	a0,2
20001a9e:	8082                	ret

20001aa0 <dif_plic_irq_get_enabled>:
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:185

dif_plic_result_t dif_plic_irq_get_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t *state) {
20001aa0:	872a                	mv	a4,a0
20001aa2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:186
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001aa4:	c70d                	beqz	a4,20001ace <dif_plic_irq_get_enabled+0x2e>
20001aa6:	0b300793          	li	a5,179
20001aaa:	02b7e263          	bltu	a5,a1,20001ace <dif_plic_irq_get_enabled+0x2e>
20001aae:	e205                	bnez	a2,20001ace <dif_plic_irq_get_enabled+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:193
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001ab0:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001ab2:	0035d613          	srli	a2,a1,0x3
20001ab6:	3fc67613          	andi	a2,a2,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
20001aba:	9532                	add	a0,a0,a2
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001abc:	30052603          	lw	a2,768(a0)
20001ac0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001ac2:	00b655b3          	srl	a1,a2,a1
20001ac6:	8985                	andi	a1,a1,1
20001ac8:	0015b593          	seqz	a1,a1
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:195
  bool is_enabled = bitfield_bit32_read(reg, reg_info.bit_index);
  *state = is_enabled ? kDifPlicToggleEnabled : kDifPlicToggleDisabled;
20001acc:	c28c                	sw	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:198

  return kDifPlicOk;
}
20001ace:	8082                	ret

20001ad0 <dif_plic_irq_set_enabled>:
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:203

dif_plic_result_t dif_plic_irq_set_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t state) {
20001ad0:	872a                	mv	a4,a0
20001ad2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:204
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001ad4:	c321                	beqz	a4,20001b14 <dif_plic_irq_set_enabled+0x44>
20001ad6:	0b300793          	li	a5,179
20001ada:	02b7ed63          	bltu	a5,a1,20001b14 <dif_plic_irq_set_enabled+0x44>
20001ade:	ea1d                	bnez	a2,20001b14 <dif_plic_irq_set_enabled+0x44>
20001ae0:	4605                	li	a2,1
20001ae2:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:210
      target >= RV_PLIC_PARAM_NUM_TARGET) {
    return kDifPlicBadArg;
  }

  bool flag;
  switch (state) {
20001ae4:	c689                	beqz	a3,20001aee <dif_plic_irq_set_enabled+0x1e>
20001ae6:	4785                	li	a5,1
20001ae8:	02f69663          	bne	a3,a5,20001b14 <dif_plic_irq_set_enabled+0x44>
20001aec:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:223
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001aee:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001af0:	0035d693          	srli	a3,a1,0x3
20001af4:	3fc6f693          	andi	a3,a3,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
20001af8:	96aa                	add	a3,a3,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001afa:	3006a703          	lw	a4,768(a3)
20001afe:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001b00:	00b61633          	sll	a2,a2,a1
20001b04:	fff64613          	not	a2,a2
20001b08:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001b0a:	00b795b3          	sll	a1,a5,a1
20001b0e:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b10:	30b6a023          	sw	a1,768(a3)
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:228
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
20001b14:	8082                	ret

20001b16 <dif_plic_irq_set_trigger>:
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:232

dif_plic_result_t dif_plic_irq_set_trigger(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_irq_trigger_t trigger) {
20001b16:	86aa                	mv	a3,a0
20001b18:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:233
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC) {
20001b1a:	ce8d                	beqz	a3,20001b54 <dif_plic_irq_set_trigger+0x3e>
20001b1c:	0b300713          	li	a4,179
20001b20:	02b76a63          	bltu	a4,a1,20001b54 <dif_plic_irq_set_trigger+0x3e>
20001b24:	4705                	li	a4,1
20001b26:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:238
    return kDifPlicBadArg;
  }

  bool flag;
  switch (trigger) {
20001b28:	c609                	beqz	a2,20001b32 <dif_plic_irq_set_trigger+0x1c>
20001b2a:	4785                	li	a5,1
20001b2c:	02f61463          	bne	a2,a5,20001b54 <dif_plic_irq_set_trigger+0x3e>
20001b30:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:251
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_trigger_type_reg_info(irq);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001b32:	4288                	lw	a0,0(a3)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001b34:	0035d613          	srli	a2,a1,0x3
20001b38:	3fc67613          	andi	a2,a2,1020
plic_irq_trigger_type_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:101
      .offset = RV_PLIC_LE_0_REG_OFFSET + offset,
20001b3c:	962a                	add	a2,a2,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b3e:	4e14                	lw	a3,24(a2)
20001b40:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001b42:	00b71733          	sll	a4,a4,a1
20001b46:	fff74713          	not	a4,a4
20001b4a:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001b4c:	00b795b3          	sll	a1,a5,a1
20001b50:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b52:	ce0c                	sw	a1,24(a2)
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:256
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
20001b54:	8082                	ret

20001b56 <dif_plic_irq_set_priority>:
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:260

dif_plic_result_t dif_plic_irq_set_priority(const dif_plic_t *plic,
                                            dif_plic_irq_id_t irq,
                                            uint32_t priority) {
20001b56:	86aa                	mv	a3,a0
20001b58:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:261
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001b5a:	ce89                	beqz	a3,20001b74 <dif_plic_irq_set_priority+0x1e>
20001b5c:	0b300713          	li	a4,179
20001b60:	00b76a63          	bltu	a4,a1,20001b74 <dif_plic_irq_set_priority+0x1e>
20001b64:	470d                	li	a4,3
20001b66:	00c76763          	bltu	a4,a2,20001b74 <dif_plic_irq_set_priority+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:267
      priority > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t offset = plic_priority_reg_offset(irq);
  mmio_region_write32(plic->params.base_addr, offset, priority);
20001b6a:	4294                	lw	a3,0(a3)
20001b6c:	4501                	li	a0,0
plic_priority_reg_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:124
  ptrdiff_t offset = irq * sizeof(uint32_t);
20001b6e:	058a                	slli	a1,a1,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:125
  return RV_PLIC_PRIO0_REG_OFFSET + offset;
20001b70:	95b6                	add	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b72:	d990                	sw	a2,48(a1)
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:270

  return kDifPlicOk;
}
20001b74:	8082                	ret

20001b76 <dif_plic_target_set_threshold>:
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:274

dif_plic_result_t dif_plic_target_set_threshold(const dif_plic_t *plic,
                                                dif_plic_target_t target,
                                                uint32_t threshold) {
20001b76:	86aa                	mv	a3,a0
20001b78:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:275
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001b7a:	ca89                	beqz	a3,20001b8c <dif_plic_target_set_threshold+0x16>
20001b7c:	e981                	bnez	a1,20001b8c <dif_plic_target_set_threshold+0x16>
20001b7e:	458d                	li	a1,3
20001b80:	00c5e663          	bltu	a1,a2,20001b8c <dif_plic_target_set_threshold+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:281
      threshold > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t threshold_offset = plic_threshold_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, threshold_offset, threshold);
20001b84:	428c                	lw	a1,0(a3)
20001b86:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b88:	30c5ac23          	sw	a2,792(a1)
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:284

  return kDifPlicOk;
}
20001b8c:	8082                	ret

20001b8e <dif_plic_irq_is_pending>:
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:288

dif_plic_result_t dif_plic_irq_is_pending(const dif_plic_t *plic,
                                          dif_plic_irq_id_t irq,
                                          bool *is_pending) {
20001b8e:	86aa                	mv	a3,a0
20001b90:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:289
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC || is_pending == NULL) {
20001b92:	c68d                	beqz	a3,20001bbc <dif_plic_irq_is_pending+0x2e>
20001b94:	0b300713          	li	a4,179
20001b98:	02b76263          	bltu	a4,a1,20001bbc <dif_plic_irq_is_pending+0x2e>
20001b9c:	c205                	beqz	a2,20001bbc <dif_plic_irq_is_pending+0x2e>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b9e:	0035d513          	srli	a0,a1,0x3
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:294
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_pending_reg_info(irq);
  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001ba2:	4294                	lw	a3,0(a3)
20001ba4:	20000737          	lui	a4,0x20000
20001ba8:	1771                	addi	a4,a4,-4
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001baa:	8d79                	and	a0,a0,a4
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001bac:	9536                	add	a0,a0,a3
20001bae:	4114                	lw	a3,0(a0)
20001bb0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001bb2:	00b6d5b3          	srl	a1,a3,a1
20001bb6:	8985                	andi	a1,a1,1
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:295
  *is_pending = bitfield_bit32_read(reg, reg_info.bit_index);
20001bb8:	00b60023          	sb	a1,0(a2) # 10000 <_dv_log_offset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:298

  return kDifPlicOk;
}
20001bbc:	8082                	ret

20001bbe <dif_plic_irq_claim>:
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:302

dif_plic_result_t dif_plic_irq_claim(const dif_plic_t *plic,
                                     dif_plic_target_t target,
                                     dif_plic_irq_id_t *claim_data) {
20001bbe:	86aa                	mv	a3,a0
20001bc0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:303
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001bc2:	ca81                	beqz	a3,20001bd2 <dif_plic_irq_claim+0x14>
20001bc4:	e599                	bnez	a1,20001bd2 <dif_plic_irq_claim+0x14>
20001bc6:	c611                	beqz	a2,20001bd2 <dif_plic_irq_claim+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
      claim_data == NULL) {
    return kDifPlicBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->params.base_addr, claim_complete_reg);
20001bc8:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001bca:	31c52583          	lw	a1,796(a0)
20001bce:	4501                	li	a0,0
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
20001bd0:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:312

  return kDifPlicOk;
}
20001bd2:	8082                	ret

20001bd4 <dif_plic_irq_complete>:
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:316

dif_plic_result_t dif_plic_irq_complete(
    const dif_plic_t *plic, dif_plic_target_t target,
    const dif_plic_irq_id_t *complete_data) {
20001bd4:	86aa                	mv	a3,a0
20001bd6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:317
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001bd8:	ca81                	beqz	a3,20001be8 <dif_plic_irq_complete+0x14>
20001bda:	e599                	bnez	a1,20001be8 <dif_plic_irq_complete+0x14>
20001bdc:	c611                	beqz	a2,20001be8 <dif_plic_irq_complete+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:326

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
                      *complete_data);
20001bde:	420c                	lw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:325
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
20001be0:	4290                	lw	a2,0(a3)
20001be2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001be4:	30b62e23          	sw	a1,796(a2)
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:329

  return kDifPlicOk;
}
20001be8:	8082                	ret

20001bea <dif_plic_software_irq_force>:
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:332

dif_plic_result_t dif_plic_software_irq_force(const dif_plic_t *plic,
                                              dif_plic_target_t target) {
20001bea:	862a                	mv	a2,a0
20001bec:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:333
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
20001bee:	c619                	beqz	a2,20001bfc <dif_plic_software_irq_force+0x12>
20001bf0:	e591                	bnez	a1,20001bfc <dif_plic_software_irq_force+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:338
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 1);
20001bf2:	420c                	lw	a1,0(a2)
20001bf4:	4501                	li	a0,0
20001bf6:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001bf8:	32c5a023          	sw	a2,800(a1)
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:341

  return kDifPlicOk;
}
20001bfc:	8082                	ret

20001bfe <dif_plic_software_irq_acknowledge>:
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:344

dif_plic_result_t dif_plic_software_irq_acknowledge(const dif_plic_t *plic,
                                                    dif_plic_target_t target) {
20001bfe:	862a                	mv	a2,a0
20001c00:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:345
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
20001c02:	c611                	beqz	a2,20001c0e <dif_plic_software_irq_acknowledge+0x10>
20001c04:	e589                	bnez	a1,20001c0e <dif_plic_software_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:350
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 0);
20001c06:	420c                	lw	a1,0(a2)
20001c08:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001c0a:	3205a023          	sw	zero,800(a1)
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:353

  return kDifPlicOk;
}
20001c0e:	8082                	ret

20001c10 <dif_plic_software_irq_is_pending>:
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:357

dif_plic_result_t dif_plic_software_irq_is_pending(const dif_plic_t *plic,
                                                   dif_plic_target_t target,
                                                   bool *is_pending) {
20001c10:	86aa                	mv	a3,a0
20001c12:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:358
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001c14:	ce81                	beqz	a3,20001c2c <dif_plic_software_irq_is_pending+0x1c>
20001c16:	e999                	bnez	a1,20001c2c <dif_plic_software_irq_is_pending+0x1c>
20001c18:	ca11                	beqz	a2,20001c2c <dif_plic_software_irq_is_pending+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:365
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  uint32_t register_value =
      mmio_region_read32(plic->params.base_addr, msip_offset);
20001c1a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c1c:	32052583          	lw	a1,800(a0)
20001c20:	4501                	li	a0,0
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:367

  *is_pending = (register_value == 1) ? true : false;
20001c22:	15fd                	addi	a1,a1,-1
20001c24:	0015b593          	seqz	a1,a1
20001c28:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:370

  return kDifPlicOk;
}
20001c2c:	8082                	ret
	...

20001c30 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20001c30:	7139                	addi	sp,sp,-64
20001c32:	ce06                	sw	ra,28(sp)
20001c34:	cc22                	sw	s0,24(sp)
20001c36:	ca26                	sw	s1,20(sp)
20001c38:	c84a                	sw	s2,16(sp)
20001c3a:	892a                	mv	s2,a0
20001c3c:	de46                	sw	a7,60(sp)
20001c3e:	dc42                	sw	a6,56(sp)
20001c40:	da3e                	sw	a5,52(sp)
20001c42:	d83a                	sw	a4,48(sp)
20001c44:	d636                	sw	a3,44(sp)
20001c46:	d432                	sw	a2,40(sp)
20001c48:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20001c4a:	4144                	lw	s1,4(a0)
20001c4c:	80000537          	lui	a0,0x80000
20001c50:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffc1eb>
20001c54:	8526                	mv	a0,s1
20001c56:	4581                	li	a1,0
20001c58:	2f9000ef          	jal	ra,20002750 <memchr>
20001c5c:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20001c60:	02f00593          	li	a1,47
20001c64:	8526                	mv	a0,s1
20001c66:	303000ef          	jal	ra,20002768 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001c6a:	00092583          	lw	a1,0(s2)
20001c6e:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001c70:	00b66b63          	bltu	a2,a1,20001c86 <base_log_internal_core+0x56>
20001c74:	058a                	slli	a1,a1,0x2
20001c76:	00001617          	auipc	a2,0x1
20001c7a:	42260613          	addi	a2,a2,1058 # 20003098 <kDifPlicMaxPriority+0x4>
20001c7e:	95b2                	add	a1,a1,a2
20001c80:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20001c82:	e519                	bnez	a0,20001c90 <base_log_internal_core+0x60>
20001c84:	a801                	j	20001c94 <base_log_internal_core+0x64>
20001c86:	00002597          	auipc	a1,0x2
20001c8a:	f7c58593          	addi	a1,a1,-132 # 20003c02 <__clz_tab+0x6b6>
20001c8e:	c119                	beqz	a0,20001c94 <base_log_internal_core+0x64>
20001c90:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20001c94:	efffe417          	auipc	s0,0xefffe
20001c98:	38440413          	addi	s0,s0,900 # 10000018 <base_log_internal_core.global_log_counter>
20001c9c:	00045603          	lhu	a2,0(s0)
20001ca0:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001ca4:	00002517          	auipc	a0,0x2
20001ca8:	f4550513          	addi	a0,a0,-187 # 20003be9 <__clz_tab+0x69d>
20001cac:	86a6                	mv	a3,s1
20001cae:	28d9                	jal	20001d84 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001cb0:	00041503          	lh	a0,0(s0)
20001cb4:	0505                	addi	a0,a0,1
20001cb6:	00a41023          	sh	a0,0(s0)
20001cba:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20001cbc:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20001cbe:	01092503          	lw	a0,16(s2)
20001cc2:	28cd                	jal	20001db4 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001cc4:	00002517          	auipc	a0,0x2
20001cc8:	f3350513          	addi	a0,a0,-205 # 20003bf7 <__clz_tab+0x6ab>
20001ccc:	2865                	jal	20001d84 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20001cce:	4942                	lw	s2,16(sp)
20001cd0:	44d2                	lw	s1,20(sp)
20001cd2:	4462                	lw	s0,24(sp)
20001cd4:	40f2                	lw	ra,28(sp)
20001cd6:	6121                	addi	sp,sp,64
20001cd8:	8082                	ret

20001cda <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20001cda:	1101                	addi	sp,sp,-32
20001cdc:	ce46                	sw	a7,28(sp)
20001cde:	cc42                	sw	a6,24(sp)
20001ce0:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20001ce2:	00002797          	auipc	a5,0x2
20001ce6:	86678793          	addi	a5,a5,-1946 # 20003548 <kDeviceLogBypassUartAddress>
20001cea:	439c                	lw	a5,0(a5)
20001cec:	c83a                	sw	a4,16(sp)
20001cee:	c636                	sw	a3,12(sp)
20001cf0:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001cf2:	c388                	sw	a0,0(a5)
20001cf4:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20001cf6:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001cf8:	c989                	beqz	a1,20001d0a <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20001cfa:	4512                	lw	a0,4(sp)
20001cfc:	00450613          	addi	a2,a0,4
20001d00:	c232                	sw	a2,4(sp)
20001d02:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001d04:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d06:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001d08:	f9ed                	bnez	a1,20001cfa <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20001d0a:	6105                	addi	sp,sp,32
20001d0c:	8082                	ret
	...

20001d10 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20001d10:	e589                	bnez	a1,20001d1a <base_set_stdout+0xa>
20001d12:	00000597          	auipc	a1,0x0
20001d16:	01658593          	addi	a1,a1,22 # 20001d28 <base_dev_null>
20001d1a:	efffe617          	auipc	a2,0xefffe
20001d1e:	2e660613          	addi	a2,a2,742 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20001d22:	c208                	sw	a0,0(a2)
20001d24:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20001d26:	8082                	ret

20001d28 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001d28:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20001d2a:	8082                	ret

20001d2c <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001d2c:	efffe597          	auipc	a1,0xefffe
20001d30:	2d458593          	addi	a1,a1,724 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20001d34:	c188                	sw	a0,0(a1)
20001d36:	00000517          	auipc	a0,0x0
20001d3a:	00c50513          	addi	a0,a0,12 # 20001d42 <base_dev_uart>
20001d3e:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001d40:	8082                	ret

20001d42 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20001d42:	1101                	addi	sp,sp,-32
20001d44:	ce06                	sw	ra,28(sp)
20001d46:	cc22                	sw	s0,24(sp)
20001d48:	ca26                	sw	s1,20(sp)
20001d4a:	c84a                	sw	s2,16(sp)
20001d4c:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001d4e:	c215                	beqz	a2,20001d72 <base_dev_uart+0x30>
20001d50:	8432                	mv	s0,a2
20001d52:	892e                	mv	s2,a1
20001d54:	89aa                	mv	s3,a0
20001d56:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001d58:	00990533          	add	a0,s2,s1
20001d5c:	00054583          	lbu	a1,0(a0)
20001d60:	854e                	mv	a0,s3
20001d62:	bbbff0ef          	jal	ra,2000191c <dif_uart_byte_send_polled>
20001d66:	e519                	bnez	a0,20001d74 <base_dev_uart+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001d68:	0485                	addi	s1,s1,1
20001d6a:	fe9417e3          	bne	s0,s1,20001d58 <base_dev_uart+0x16>
20001d6e:	84a2                	mv	s1,s0
20001d70:	a011                	j	20001d74 <base_dev_uart+0x32>
20001d72:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20001d74:	8526                	mv	a0,s1
20001d76:	49b2                	lw	s3,12(sp)
20001d78:	4942                	lw	s2,16(sp)
20001d7a:	44d2                	lw	s1,20(sp)
20001d7c:	4462                	lw	s0,24(sp)
20001d7e:	40f2                	lw	ra,28(sp)
20001d80:	6105                	addi	sp,sp,32
20001d82:	8082                	ret

20001d84 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20001d84:	7179                	addi	sp,sp,-48
20001d86:	c606                	sw	ra,12(sp)
20001d88:	d646                	sw	a7,44(sp)
20001d8a:	d442                	sw	a6,40(sp)
20001d8c:	d23e                	sw	a5,36(sp)
20001d8e:	d03a                	sw	a4,32(sp)
20001d90:	ce36                	sw	a3,28(sp)
20001d92:	cc32                	sw	a2,24(sp)
20001d94:	ca2e                	sw	a1,20(sp)
20001d96:	efffe597          	auipc	a1,0xefffe
20001d9a:	26a58593          	addi	a1,a1,618 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20001d9e:	4190                	lw	a2,0(a1)
20001da0:	41cc                	lw	a1,4(a1)
20001da2:	872a                	mv	a4,a0
20001da4:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20001da6:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001da8:	8532                	mv	a0,a2
20001daa:	863a                	mv	a2,a4
20001dac:	200d                	jal	20001dce <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20001dae:	40b2                	lw	ra,12(sp)
20001db0:	6145                	addi	sp,sp,48
20001db2:	8082                	ret

20001db4 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20001db4:	efffe697          	auipc	a3,0xefffe
20001db8:	24c68693          	addi	a3,a3,588 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001dbc:	4290                	lw	a2,0(a3)
20001dbe:	42d4                	lw	a3,4(a3)
20001dc0:	872e                	mv	a4,a1
20001dc2:	87aa                	mv	a5,a0
20001dc4:	8532                	mv	a0,a2
20001dc6:	85b6                	mv	a1,a3
20001dc8:	863e                	mv	a2,a5
20001dca:	86ba                	mv	a3,a4
20001dcc:	a009                	j	20001dce <base_vfprintf>

20001dce <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20001dce:	7139                	addi	sp,sp,-64
20001dd0:	de06                	sw	ra,60(sp)
20001dd2:	dc22                	sw	s0,56(sp)
20001dd4:	da26                	sw	s1,52(sp)
20001dd6:	d84a                	sw	s2,48(sp)
20001dd8:	d64e                	sw	s3,44(sp)
20001dda:	d452                	sw	s4,40(sp)
20001ddc:	d256                	sw	s5,36(sp)
20001dde:	d05a                	sw	s6,32(sp)
20001de0:	ce5e                	sw	s7,28(sp)
20001de2:	cc62                	sw	s8,24(sp)
20001de4:	ca66                	sw	s9,20(sp)
20001de6:	c86a                	sw	s10,16(sp)
20001de8:	c66e                	sw	s11,12(sp)
20001dea:	8bb2                	mv	s7,a2
20001dec:	892a                	mv	s2,a0
20001dee:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20001df0:	c199                	beqz	a1,20001df6 <base_vfprintf+0x28>
20001df2:	89ae                	mv	s3,a1
20001df4:	a029                	j	20001dfe <base_vfprintf+0x30>
20001df6:	00000997          	auipc	s3,0x0
20001dfa:	f3298993          	addi	s3,s3,-206 # 20001d28 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001dfe:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20001e00:	000bc503          	lbu	a0,0(s7)
20001e04:	28050f63          	beqz	a0,200020a2 <base_vfprintf+0x2d4>
20001e08:	4b01                	li	s6,0
20001e0a:	02500c13          	li	s8,37
20001e0e:	4ca5                	li	s9,9
20001e10:	02000d13          	li	s10,32
20001e14:	06800d93          	li	s11,104
20001e18:	00002a17          	auipc	s4,0x2
20001e1c:	deca0a13          	addi	s4,s4,-532 # 20003c04 <__clz_tab+0x6b8>
20001e20:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20001e22:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20001e24:	0ff57413          	andi	s0,a0,255
20001e28:	01840963          	beq	s0,s8,20001e3a <base_vfprintf+0x6c>
20001e2c:	c419                	beqz	s0,20001e3a <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001e2e:	009b8533          	add	a0,s7,s1
20001e32:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20001e36:	0485                	addi	s1,s1,1
20001e38:	b7f5                	j	20001e24 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20001e3a:	c491                	beqz	s1,20001e46 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20001e3c:	854a                	mv	a0,s2
20001e3e:	85de                	mv	a1,s7
20001e40:	8626                	mv	a2,s1
20001e42:	9982                	jalr	s3
20001e44:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20001e46:	24040f63          	beqz	s0,200020a4 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001e4a:	009b8633          	add	a2,s7,s1
20001e4e:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001e52:	22050f63          	beqz	a0,20002090 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001e56:	fd050593          	addi	a1,a0,-48
20001e5a:	0ff5f593          	andi	a1,a1,255
20001e5e:	00bcf863          	bgeu	s9,a1,20001e6e <base_vfprintf+0xa0>
20001e62:	4401                	li	s0,0
20001e64:	4581                	li	a1,0
20001e66:	4605                	li	a2,1
20001e68:	028d7f63          	bgeu	s10,s0,20001ea6 <base_vfprintf+0xd8>
20001e6c:	aca1                	j	200020c4 <base_vfprintf+0x2f6>
20001e6e:	4581                	li	a1,0
20001e70:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001e72:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001e74:	00b606b3          	add	a3,a2,a1
20001e78:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001e7c:	20068a63          	beqz	a3,20002090 <base_vfprintf+0x2c2>
20001e80:	0ff57513          	andi	a0,a0,255
20001e84:	03540733          	mul	a4,s0,s5
20001e88:	953a                	add	a0,a0,a4
20001e8a:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001e8e:	fd068513          	addi	a0,a3,-48
20001e92:	0ff57713          	andi	a4,a0,255
20001e96:	0585                	addi	a1,a1,1
20001e98:	8536                	mv	a0,a3
20001e9a:	fcecfde3          	bgeu	s9,a4,20001e74 <base_vfprintf+0xa6>
20001e9e:	4601                	li	a2,0
20001ea0:	8536                	mv	a0,a3
20001ea2:	228d6163          	bltu	s10,s0,200020c4 <base_vfprintf+0x2f6>
20001ea6:	008036b3          	snez	a3,s0
20001eaa:	8e55                	or	a2,a2,a3
20001eac:	20060c63          	beqz	a2,200020c4 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001eb0:	95de                	add	a1,a1,s7
20001eb2:	95a6                	add	a1,a1,s1
20001eb4:	00258b93          	addi	s7,a1,2
20001eb8:	02adce63          	blt	s11,a0,20001ef4 <base_vfprintf+0x126>
20001ebc:	06100593          	li	a1,97
20001ec0:	06a5d563          	bge	a1,a0,20001f2a <base_vfprintf+0x15c>
20001ec4:	06300593          	li	a1,99
20001ec8:	0ca5cb63          	blt	a1,a0,20001f9e <base_vfprintf+0x1d0>
20001ecc:	06200593          	li	a1,98
20001ed0:	14b50a63          	beq	a0,a1,20002024 <base_vfprintf+0x256>
20001ed4:	06300593          	li	a1,99
20001ed8:	18b51f63          	bne	a0,a1,20002076 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20001edc:	4502                	lw	a0,0(sp)
20001ede:	00450593          	addi	a1,a0,4
20001ee2:	c02e                	sw	a1,0(sp)
20001ee4:	4108                	lw	a0,0(a0)
20001ee6:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20001eea:	4605                	li	a2,1
20001eec:	854a                	mv	a0,s2
20001eee:	00b10593          	addi	a1,sp,11
20001ef2:	aa41                	j	20002082 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001ef4:	07200593          	li	a1,114
20001ef8:	04a5dd63          	bge	a1,a0,20001f52 <base_vfprintf+0x184>
20001efc:	07700593          	li	a1,119
20001f00:	0aa5c663          	blt	a1,a0,20001fac <base_vfprintf+0x1de>
20001f04:	07300593          	li	a1,115
20001f08:	12b50963          	beq	a0,a1,2000203a <base_vfprintf+0x26c>
20001f0c:	07500593          	li	a1,117
20001f10:	16b51363          	bne	a0,a1,20002076 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20001f14:	4502                	lw	a0,0(sp)
20001f16:	00450593          	addi	a1,a0,4
20001f1a:	c02e                	sw	a1,0(sp)
20001f1c:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001f1e:	00001797          	auipc	a5,0x1
20001f22:	1a778793          	addi	a5,a5,423 # 200030c5 <kDigitsLow>
20001f26:	4729                	li	a4,10
20001f28:	a8cd                	j	2000201a <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001f2a:	13850763          	beq	a0,s8,20002058 <base_vfprintf+0x28a>
20001f2e:	04800593          	li	a1,72
20001f32:	00b50663          	beq	a0,a1,20001f3e <base_vfprintf+0x170>
20001f36:	05800593          	li	a1,88
20001f3a:	12b51e63          	bne	a0,a1,20002076 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001f3e:	4502                	lw	a0,0(sp)
20001f40:	00450593          	addi	a1,a0,4
20001f44:	c02e                	sw	a1,0(sp)
20001f46:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20001f48:	00001797          	auipc	a5,0x1
20001f4c:	18d78793          	addi	a5,a5,397 # 200030d5 <kDigitsHigh>
20001f50:	a0e1                	j	20002018 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001f52:	06900593          	li	a1,105
20001f56:	06b50d63          	beq	a0,a1,20001fd0 <base_vfprintf+0x202>
20001f5a:	06f00593          	li	a1,111
20001f5e:	10b50163          	beq	a0,a1,20002060 <base_vfprintf+0x292>
20001f62:	07000593          	li	a1,112
20001f66:	10b51863          	bne	a0,a1,20002076 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001f6a:	00002597          	auipc	a1,0x2
20001f6e:	c9e58593          	addi	a1,a1,-866 # 20003c08 <__clz_tab+0x6bc>
20001f72:	4609                	li	a2,2
20001f74:	854a                	mv	a0,s2
20001f76:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20001f78:	4582                	lw	a1,0(sp)
20001f7a:	00458613          	addi	a2,a1,4
20001f7e:	c032                	sw	a2,0(sp)
20001f80:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001f82:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001f86:	00001797          	auipc	a5,0x1
20001f8a:	13f78793          	addi	a5,a5,319 # 200030c5 <kDigitsLow>
20001f8e:	46a1                	li	a3,8
20001f90:	4741                	li	a4,16
20001f92:	854a                	mv	a0,s2
20001f94:	85ce                	mv	a1,s3
20001f96:	2a55                	jal	2000214a <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20001f98:	00a40b33          	add	s6,s0,a0
20001f9c:	a0ed                	j	20002086 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001f9e:	06400593          	li	a1,100
20001fa2:	02b50763          	beq	a0,a1,20001fd0 <base_vfprintf+0x202>
20001fa6:	07b50063          	beq	a0,s11,20002006 <base_vfprintf+0x238>
20001faa:	a0f1                	j	20002076 <base_vfprintf+0x2a8>
20001fac:	07800593          	li	a1,120
20001fb0:	04b50b63          	beq	a0,a1,20002006 <base_vfprintf+0x238>
20001fb4:	07a00593          	li	a1,122
20001fb8:	0ab51f63          	bne	a0,a1,20002076 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20001fbc:	4502                	lw	a0,0(sp)
20001fbe:	00450593          	addi	a1,a0,4
20001fc2:	c02e                	sw	a1,0(sp)
20001fc4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001fc6:	00850593          	addi	a1,a0,8
20001fca:	c02e                	sw	a1,0(sp)
20001fcc:	414c                	lw	a1,4(a0)
20001fce:	a84d                	j	20002080 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20001fd0:	4502                	lw	a0,0(sp)
20001fd2:	00450593          	addi	a1,a0,4
20001fd6:	c02e                	sw	a1,0(sp)
20001fd8:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20001fda:	557d                	li	a0,-1
20001fdc:	00954c63          	blt	a0,s1,20001ff4 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20001fe0:	00002597          	auipc	a1,0x2
20001fe4:	c2658593          	addi	a1,a1,-986 # 20003c06 <__clz_tab+0x6ba>
20001fe8:	4605                	li	a2,1
20001fea:	854a                	mv	a0,s2
20001fec:	9982                	jalr	s3
20001fee:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20001ff0:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001ff4:	00001797          	auipc	a5,0x1
20001ff8:	0d178793          	addi	a5,a5,209 # 200030c5 <kDigitsLow>
20001ffc:	4729                	li	a4,10
20001ffe:	854a                	mv	a0,s2
20002000:	85ce                	mv	a1,s3
20002002:	8626                	mv	a2,s1
20002004:	a829                	j	2000201e <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20002006:	4502                	lw	a0,0(sp)
20002008:	00450593          	addi	a1,a0,4
2000200c:	c02e                	sw	a1,0(sp)
2000200e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20002010:	00001797          	auipc	a5,0x1
20002014:	0b578793          	addi	a5,a5,181 # 200030c5 <kDigitsLow>
20002018:	4741                	li	a4,16
2000201a:	854a                	mv	a0,s2
2000201c:	85ce                	mv	a1,s3
2000201e:	86a2                	mv	a3,s0
20002020:	222d                	jal	2000214a <write_digits>
20002022:	a08d                	j	20002084 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20002024:	4502                	lw	a0,0(sp)
20002026:	00450593          	addi	a1,a0,4
2000202a:	c02e                	sw	a1,0(sp)
2000202c:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
2000202e:	00001797          	auipc	a5,0x1
20002032:	09778793          	addi	a5,a5,151 # 200030c5 <kDigitsLow>
20002036:	4709                	li	a4,2
20002038:	b7cd                	j	2000201a <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
2000203a:	4502                	lw	a0,0(sp)
2000203c:	00450593          	addi	a1,a0,4
20002040:	c02e                	sw	a1,0(sp)
20002042:	410c                	lw	a1,0(a0)
20002044:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20002046:	00a58633          	add	a2,a1,a0
2000204a:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
2000204e:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20002050:	fa7d                	bnez	a2,20002046 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20002052:	fff50613          	addi	a2,a0,-1
20002056:	a02d                	j	20002080 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20002058:	4605                	li	a2,1
2000205a:	854a                	mv	a0,s2
2000205c:	85d2                	mv	a1,s4
2000205e:	a015                	j	20002082 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20002060:	4502                	lw	a0,0(sp)
20002062:	00450593          	addi	a1,a0,4
20002066:	c02e                	sw	a1,0(sp)
20002068:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
2000206a:	00001797          	auipc	a5,0x1
2000206e:	05b78793          	addi	a5,a5,91 # 200030c5 <kDigitsLow>
20002072:	4721                	li	a4,8
20002074:	b75d                	j	2000201a <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20002076:	00001597          	auipc	a1,0x1
2000207a:	06f58593          	addi	a1,a1,111 # 200030e5 <kUnknownSpec>
2000207e:	463d                	li	a2,15
20002080:	854a                	mv	a0,s2
20002082:	9982                	jalr	s3
20002084:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20002086:	000bc503          	lbu	a0,0(s7)
2000208a:	d8051ce3          	bnez	a0,20001e22 <base_vfprintf+0x54>
2000208e:	a819                	j	200020a4 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20002090:	00001597          	auipc	a1,0x1
20002094:	01858593          	addi	a1,a1,24 # 200030a8 <kErrorNul>
20002098:	4645                	li	a2,17
2000209a:	854a                	mv	a0,s2
2000209c:	9982                	jalr	s3
2000209e:	9b2a                	add	s6,s6,a0
200020a0:	a011                	j	200020a4 <base_vfprintf+0x2d6>
200020a2:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
200020a4:	855a                	mv	a0,s6
200020a6:	4db2                	lw	s11,12(sp)
200020a8:	4d42                	lw	s10,16(sp)
200020aa:	4cd2                	lw	s9,20(sp)
200020ac:	4c62                	lw	s8,24(sp)
200020ae:	4bf2                	lw	s7,28(sp)
200020b0:	5b02                	lw	s6,32(sp)
200020b2:	5a92                	lw	s5,36(sp)
200020b4:	5a22                	lw	s4,40(sp)
200020b6:	59b2                	lw	s3,44(sp)
200020b8:	5942                	lw	s2,48(sp)
200020ba:	54d2                	lw	s1,52(sp)
200020bc:	5462                	lw	s0,56(sp)
200020be:	50f2                	lw	ra,60(sp)
200020c0:	6121                	addi	sp,sp,64
200020c2:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
200020c4:	00001597          	auipc	a1,0x1
200020c8:	ff558593          	addi	a1,a1,-11 # 200030b9 <kErrorTooWide>
200020cc:	4631                	li	a2,12
200020ce:	b7f1                	j	2000209a <base_vfprintf+0x2cc>

200020d0 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
200020d0:	7179                	addi	sp,sp,-48
200020d2:	ca06                	sw	ra,20(sp)
200020d4:	d646                	sw	a7,44(sp)
200020d6:	d442                	sw	a6,40(sp)
200020d8:	d23e                	sw	a5,36(sp)
200020da:	d03a                	sw	a4,32(sp)
200020dc:	ce36                	sw	a3,28(sp)
200020de:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200020e0:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200020e2:	c42a                	sw	a0,8(sp)
200020e4:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200020e6:	00000597          	auipc	a1,0x0
200020ea:	01258593          	addi	a1,a1,18 # 200020f8 <snprintf_sink>
200020ee:	0028                	addi	a0,sp,8
200020f0:	39f9                	jal	20001dce <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200020f2:	40d2                	lw	ra,20(sp)
200020f4:	6145                	addi	sp,sp,48
200020f6:	8082                	ret

200020f8 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
200020f8:	1141                	addi	sp,sp,-16
200020fa:	c606                	sw	ra,12(sp)
200020fc:	c422                	sw	s0,8(sp)
200020fe:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20002100:	4140                	lw	s0,4(a0)
20002102:	c005                	beqz	s0,20002122 <snprintf_sink+0x2a>
20002104:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20002106:	00c46363          	bltu	s0,a2,2000210c <snprintf_sink+0x14>
2000210a:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
2000210c:	4088                	lw	a0,0(s1)
2000210e:	8622                	mv	a2,s0
20002110:	2bc5                	jal	20002700 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20002112:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20002114:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20002116:	9522                	add	a0,a0,s0
20002118:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
2000211a:	40858533          	sub	a0,a1,s0
2000211e:	c0c8                	sw	a0,4(s1)
20002120:	a011                	j	20002124 <snprintf_sink+0x2c>
20002122:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20002124:	8522                	mv	a0,s0
20002126:	4492                	lw	s1,4(sp)
20002128:	4422                	lw	s0,8(sp)
2000212a:	40b2                	lw	ra,12(sp)
2000212c:	0141                	addi	sp,sp,16
2000212e:	8082                	ret

20002130 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20002130:	1101                	addi	sp,sp,-32
20002132:	c206                	sw	ra,4(sp)
20002134:	ce46                	sw	a7,28(sp)
20002136:	cc42                	sw	a6,24(sp)
20002138:	ca3e                	sw	a5,20(sp)
2000213a:	c83a                	sw	a4,16(sp)
2000213c:	c636                	sw	a3,12(sp)
2000213e:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20002140:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20002142:	3171                	jal	20001dce <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20002144:	4092                	lw	ra,4(sp)
20002146:	6105                	addi	sp,sp,32
20002148:	8082                	ret

2000214a <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
2000214a:	7139                	addi	sp,sp,-64
2000214c:	de06                	sw	ra,60(sp)
2000214e:	dc22                	sw	s0,56(sp)
20002150:	da26                	sw	s1,52(sp)
20002152:	d84a                	sw	s2,48(sp)
20002154:	d64e                	sw	s3,44(sp)
20002156:	892e                	mv	s2,a1
20002158:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000215a:	ca05                	beqz	a2,2000218a <write_digits+0x40>
2000215c:	4501                	li	a0,0
2000215e:	02b10813          	addi	a6,sp,43
20002162:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20002164:	02e65633          	divu	a2,a2,a4
20002168:	02e60433          	mul	s0,a2,a4
2000216c:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20002170:	943e                	add	s0,s0,a5
20002172:	00040403          	lb	s0,0(s0)
20002176:	00a805b3          	add	a1,a6,a0
2000217a:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000217e:	157d                	addi	a0,a0,-1
20002180:	fee4f1e3          	bgeu	s1,a4,20002162 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20002184:	40a00633          	neg	a2,a0
20002188:	a011                	j	2000218c <write_digits+0x42>
2000218a:	4601                	li	a2,0
2000218c:	4485                	li	s1,1
2000218e:	c291                	beqz	a3,20002192 <write_digits+0x48>
20002190:	84b6                	mv	s1,a3
20002192:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20002196:	00a4e463          	bltu	s1,a0,2000219e <write_digits+0x54>
2000219a:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000219e:	00967f63          	bgeu	a2,s1,200021bc <write_digits+0x72>
200021a2:	0068                	addi	a0,sp,12
200021a4:	8d05                	sub	a0,a0,s1
200021a6:	02050513          	addi	a0,a0,32
200021aa:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
200021ae:	03000593          	li	a1,48
200021b2:	8622                	mv	a2,s0
200021b4:	238d                	jal	20002716 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200021b6:	147d                	addi	s0,s0,-1
200021b8:	fc7d                	bnez	s0,200021b6 <write_digits+0x6c>
200021ba:	8626                	mv	a2,s1
200021bc:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
200021be:	8d11                	sub	a0,a0,a2
200021c0:	02050593          	addi	a1,a0,32
200021c4:	854e                	mv	a0,s3
200021c6:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200021c8:	59b2                	lw	s3,44(sp)
200021ca:	5942                	lw	s2,48(sp)
200021cc:	54d2                	lw	s1,52(sp)
200021ce:	5462                	lw	s0,56(sp)
200021d0:	50f2                	lw	ra,60(sp)
200021d2:	6121                	addi	sp,sp,64
200021d4:	8082                	ret
	...

200021d8 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
200021d8:	10500073          	wfi
200021dc:	8082                	ret

200021de <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
200021de:	1141                	addi	sp,sp,-16
200021e0:	c606                	sw	ra,12(sp)
200021e2:	00001597          	auipc	a1,0x1
200021e6:	33e58593          	addi	a1,a1,830 # 20003520 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
200021ea:	41d0                	lw	a2,4(a1)
200021ec:	4194                	lw	a3,0(a1)
200021ee:	02a605b3          	mul	a1,a2,a0
200021f2:	02a6b633          	mulhu	a2,a3,a0
200021f6:	95b2                	add	a1,a1,a2
200021f8:	02a68533          	mul	a0,a3,a0
200021fc:	000f4637          	lui	a2,0xf4
20002200:	24060613          	addi	a2,a2,576 # f4240 <init_uart.kLogFields.2+0xe3d54>
20002204:	4681                	li	a3,0
20002206:	23cd                	jal	200027e8 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20002208:	4801                	li	a6,0
2000220a:	4701                	li	a4,0

2000220c <read0>:
2000220c:	b8002873          	csrr	a6,mcycleh
20002210:	b00026f3          	csrr	a3,mcycle
20002214:	b8002773          	csrr	a4,mcycleh
20002218:	fee81ae3          	bne	a6,a4,2000220c <read0>
2000221c:	4781                	li	a5,0
2000221e:	4601                	li	a2,0

20002220 <read1>:
20002220:	b80027f3          	csrr	a5,mcycleh
20002224:	b0002773          	csrr	a4,mcycle
20002228:	b8002673          	csrr	a2,mcycleh
2000222c:	fec79ae3          	bne	a5,a2,20002220 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20002230:	00d73633          	sltu	a2,a4,a3
20002234:	410787b3          	sub	a5,a5,a6
20002238:	8f91                	sub	a5,a5,a2
2000223a:	00b78663          	beq	a5,a1,20002246 <read1+0x26>
2000223e:	00b7b733          	sltu	a4,a5,a1
20002242:	ff69                	bnez	a4,2000221c <read0+0x10>
20002244:	a031                	j	20002250 <read1+0x30>
20002246:	40d70633          	sub	a2,a4,a3
2000224a:	00a63733          	sltu	a4,a2,a0
2000224e:	f779                	bnez	a4,2000221c <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
20002250:	40b2                	lw	ra,12(sp)
20002252:	0141                	addi	sp,sp,16
20002254:	8082                	ret

20002256 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20002256:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
2000225a:	bff5                	j	20002256 <abort>

2000225c <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
2000225c:	1101                	addi	sp,sp,-32
2000225e:	ce06                	sw	ra,28(sp)
20002260:	cc22                	sw	s0,24(sp)
20002262:	65b1                	lui	a1,0xc
20002264:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20002268:	02b50163          	beq	a0,a1,2000228a <test_status_set+0x2e>
2000226c:	65a5                	lui	a1,0x9
2000226e:	05b5                	addi	a1,a1,13
20002270:	02b50f63          	beq	a0,a1,200022ae <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20002274:	00001597          	auipc	a1,0x1
20002278:	2d058593          	addi	a1,a1,720 # 20003544 <kDeviceTestStatusAddress>
2000227c:	418c                	lw	a1,0(a1)
2000227e:	c191                	beqz	a1,20002282 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20002280:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20002282:	4462                	lw	s0,24(sp)
20002284:	40f2                	lw	ra,28(sp)
20002286:	6105                	addi	sp,sp,32
20002288:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000228a:	00001517          	auipc	a0,0x1
2000228e:	2be50513          	addi	a0,a0,702 # 20003548 <kDeviceLogBypassUartAddress>
20002292:	4108                	lw	a0,0(a0)
20002294:	ed1d                	bnez	a0,200022d2 <test_status_set+0x76>
20002296:	00001597          	auipc	a1,0x1
2000229a:	e7258593          	addi	a1,a1,-398 # 20003108 <kUnknownSpec+0x23>
2000229e:	840a                	mv	s0,sp
200022a0:	4651                	li	a2,20
200022a2:	8522                	mv	a0,s0
200022a4:	29b1                	jal	20002700 <memcpy>
200022a6:	8522                	mv	a0,s0
200022a8:	989ff0ef          	jal	ra,20001c30 <base_log_internal_core>
200022ac:	a815                	j	200022e0 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200022ae:	00001517          	auipc	a0,0x1
200022b2:	29a50513          	addi	a0,a0,666 # 20003548 <kDeviceLogBypassUartAddress>
200022b6:	4108                	lw	a0,0(a0)
200022b8:	ed15                	bnez	a0,200022f4 <test_status_set+0x98>
200022ba:	00001597          	auipc	a1,0x1
200022be:	e3a58593          	addi	a1,a1,-454 # 200030f4 <kUnknownSpec+0xf>
200022c2:	840a                	mv	s0,sp
200022c4:	4651                	li	a2,20
200022c6:	8522                	mv	a0,s0
200022c8:	2925                	jal	20002700 <memcpy>
200022ca:	8522                	mv	a0,s0
200022cc:	965ff0ef          	jal	ra,20001c30 <base_log_internal_core>
200022d0:	a80d                	j	20002302 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200022d2:	e000e517          	auipc	a0,0xe000e
200022d6:	17a50513          	addi	a0,a0,378 # 1044c <test_status_set.kLogFields.2>
200022da:	4581                	li	a1,0
200022dc:	9ffff0ef          	jal	ra,20001cda <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200022e0:	00001517          	auipc	a0,0x1
200022e4:	26450513          	addi	a0,a0,612 # 20003544 <kDeviceTestStatusAddress>
200022e8:	4108                	lw	a0,0(a0)
200022ea:	c50d                	beqz	a0,20002314 <test_status_set+0xb8>
200022ec:	65b1                	lui	a1,0xc
200022ee:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200022f2:	a005                	j	20002312 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200022f4:	e000e517          	auipc	a0,0xe000e
200022f8:	14450513          	addi	a0,a0,324 # 10438 <test_status_set.kLogFields>
200022fc:	4581                	li	a1,0
200022fe:	9ddff0ef          	jal	ra,20001cda <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20002302:	00001517          	auipc	a0,0x1
20002306:	24250513          	addi	a0,a0,578 # 20003544 <kDeviceTestStatusAddress>
2000230a:	4108                	lw	a0,0(a0)
2000230c:	c501                	beqz	a0,20002314 <test_status_set+0xb8>
2000230e:	65a5                	lui	a1,0x9
20002310:	05b5                	addi	a1,a1,13
20002312:	c10c                	sw	a1,0(a0)
20002314:	3789                	jal	20002256 <abort>
	...

20002318 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20002318:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000231a:	de06                	sw	ra,60(sp)
2000231c:	dc16                	sw	t0,56(sp)
2000231e:	da1a                	sw	t1,52(sp)
20002320:	d81e                	sw	t2,48(sp)
20002322:	d62a                	sw	a0,44(sp)
20002324:	d42e                	sw	a1,40(sp)
20002326:	d232                	sw	a2,36(sp)
20002328:	d036                	sw	a3,32(sp)
2000232a:	ce3a                	sw	a4,28(sp)
2000232c:	cc3e                	sw	a5,24(sp)
2000232e:	ca42                	sw	a6,20(sp)
20002330:	c846                	sw	a7,16(sp)
20002332:	c672                	sw	t3,12(sp)
20002334:	c476                	sw	t4,8(sp)
20002336:	c27a                	sw	t5,4(sp)
20002338:	c07e                	sw	t6,0(sp)
2000233a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000233e:	897d                	andi	a0,a0,31
20002340:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20002342:	00a5dc63          	bge	a1,a0,2000235a <handler_exception+0x42>
20002346:	4599                	li	a1,6
20002348:	02a5c263          	blt	a1,a0,2000236c <handler_exception+0x54>
2000234c:	458d                	li	a1,3
2000234e:	02b50c63          	beq	a0,a1,20002386 <handler_exception+0x6e>
20002352:	4595                	li	a1,5
20002354:	02b50763          	beq	a0,a1,20002382 <handler_exception+0x6a>
20002358:	a015                	j	2000237c <handler_exception+0x64>
2000235a:	c115                	beqz	a0,2000237e <handler_exception+0x66>
2000235c:	4585                	li	a1,1
2000235e:	02b50063          	beq	a0,a1,2000237e <handler_exception+0x66>
20002362:	4589                	li	a1,2
20002364:	00b51c63          	bne	a0,a1,2000237c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20002368:	208d                	jal	200023ca <handler_instr_ill_fault>
2000236a:	a839                	j	20002388 <handler_exception+0x70>
2000236c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000236e:	00b50a63          	beq	a0,a1,20002382 <handler_exception+0x6a>
20002372:	45ad                	li	a1,11
20002374:	00b51463          	bne	a0,a1,2000237c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20002378:	2065                	jal	20002420 <handler_ecall>
2000237a:	a039                	j	20002388 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000237c:	a001                	j	2000237c <handler_exception+0x64>
2000237e:	2805                	jal	200023ae <handler_instr_acc_fault>
20002380:	a021                	j	20002388 <handler_exception+0x70>
20002382:	2049                	jal	20002404 <handler_lsu_fault>
20002384:	a011                	j	20002388 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20002386:	208d                	jal	200023e8 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20002388:	4f82                	lw	t6,0(sp)
2000238a:	4f12                	lw	t5,4(sp)
2000238c:	4ea2                	lw	t4,8(sp)
2000238e:	4e32                	lw	t3,12(sp)
20002390:	48c2                	lw	a7,16(sp)
20002392:	4852                	lw	a6,20(sp)
20002394:	47e2                	lw	a5,24(sp)
20002396:	4772                	lw	a4,28(sp)
20002398:	5682                	lw	a3,32(sp)
2000239a:	5612                	lw	a2,36(sp)
2000239c:	55a2                	lw	a1,40(sp)
2000239e:	5532                	lw	a0,44(sp)
200023a0:	53c2                	lw	t2,48(sp)
200023a2:	5352                	lw	t1,52(sp)
200023a4:	52e2                	lw	t0,56(sp)
200023a6:	50f2                	lw	ra,60(sp)
200023a8:	6121                	addi	sp,sp,64
200023aa:	30200073          	mret

200023ae <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
200023ae:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200023b0:	de06                	sw	ra,60(sp)
200023b2:	dc22                	sw	s0,56(sp)
200023b4:	00002597          	auipc	a1,0x2
200023b8:	8ea58593          	addi	a1,a1,-1814 # 20003c9e <__clz_tab+0x752>
200023bc:	0040                	addi	s0,sp,4
200023be:	03400613          	li	a2,52
200023c2:	8522                	mv	a0,s0
200023c4:	2e35                	jal	20002700 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200023c6:	8522                	mv	a0,s0
200023c8:	2a71                	jal	20002564 <print_exc_msg>

200023ca <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200023ca:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200023cc:	c686                	sw	ra,76(sp)
200023ce:	c4a2                	sw	s0,72(sp)
200023d0:	00002597          	auipc	a1,0x2
200023d4:	90258593          	addi	a1,a1,-1790 # 20003cd2 <__clz_tab+0x786>
200023d8:	00d10413          	addi	s0,sp,13
200023dc:	03b00613          	li	a2,59
200023e0:	8522                	mv	a0,s0
200023e2:	2e39                	jal	20002700 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200023e4:	8522                	mv	a0,s0
200023e6:	2abd                	jal	20002564 <print_exc_msg>

200023e8 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200023e8:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200023ea:	de06                	sw	ra,60(sp)
200023ec:	dc22                	sw	s0,56(sp)
200023ee:	00002597          	auipc	a1,0x2
200023f2:	91f58593          	addi	a1,a1,-1761 # 20003d0d <__clz_tab+0x7c1>
200023f6:	840a                	mv	s0,sp
200023f8:	03800613          	li	a2,56
200023fc:	8522                	mv	a0,s0
200023fe:	2609                	jal	20002700 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20002400:	8522                	mv	a0,s0
20002402:	228d                	jal	20002564 <print_exc_msg>

20002404 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20002404:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20002406:	de06                	sw	ra,60(sp)
20002408:	dc22                	sw	s0,56(sp)
2000240a:	00002597          	auipc	a1,0x2
2000240e:	93b58593          	addi	a1,a1,-1733 # 20003d45 <__clz_tab+0x7f9>
20002412:	0020                	addi	s0,sp,8
20002414:	03000613          	li	a2,48
20002418:	8522                	mv	a0,s0
2000241a:	24dd                	jal	20002700 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000241c:	8522                	mv	a0,s0
2000241e:	2299                	jal	20002564 <print_exc_msg>

20002420 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20002420:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20002422:	ce06                	sw	ra,28(sp)
20002424:	cc22                	sw	s0,24(sp)
20002426:	00001517          	auipc	a0,0x1
2000242a:	12250513          	addi	a0,a0,290 # 20003548 <kDeviceLogBypassUartAddress>
2000242e:	4108                	lw	a0,0(a0)
20002430:	c909                	beqz	a0,20002442 <handler_ecall+0x22>
20002432:	e000e517          	auipc	a0,0xe000e
20002436:	06a50513          	addi	a0,a0,106 # 1049c <handler_ecall.kLogFields>
2000243a:	4581                	li	a1,0
2000243c:	89fff0ef          	jal	ra,20001cda <base_log_internal_dv>
20002440:	a821                	j	20002458 <handler_ecall+0x38>
20002442:	00001597          	auipc	a1,0x1
20002446:	d1658593          	addi	a1,a1,-746 # 20003158 <kUnknownSpec+0x73>
2000244a:	840a                	mv	s0,sp
2000244c:	4651                	li	a2,20
2000244e:	8522                	mv	a0,s0
20002450:	2c45                	jal	20002700 <memcpy>
20002452:	8522                	mv	a0,s0
20002454:	fdcff0ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20002458:	a001                	j	20002458 <handler_ecall+0x38>
2000245a:	0001                	nop

2000245c <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
2000245c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
2000245e:	ce86                	sw	ra,92(sp)
20002460:	cc96                	sw	t0,88(sp)
20002462:	ca9a                	sw	t1,84(sp)
20002464:	c89e                	sw	t2,80(sp)
20002466:	c6a2                	sw	s0,76(sp)
20002468:	c4aa                	sw	a0,72(sp)
2000246a:	c2ae                	sw	a1,68(sp)
2000246c:	c0b2                	sw	a2,64(sp)
2000246e:	de36                	sw	a3,60(sp)
20002470:	dc3a                	sw	a4,56(sp)
20002472:	da3e                	sw	a5,52(sp)
20002474:	d842                	sw	a6,48(sp)
20002476:	d646                	sw	a7,44(sp)
20002478:	d472                	sw	t3,40(sp)
2000247a:	d276                	sw	t4,36(sp)
2000247c:	d07a                	sw	t5,32(sp)
2000247e:	ce7e                	sw	t6,28(sp)
20002480:	00001517          	auipc	a0,0x1
20002484:	0c850513          	addi	a0,a0,200 # 20003548 <kDeviceLogBypassUartAddress>
20002488:	4108                	lw	a0,0(a0)
2000248a:	c909                	beqz	a0,2000249c <handler_irq_software+0x40>
2000248c:	e000e517          	auipc	a0,0xe000e
20002490:	fd450513          	addi	a0,a0,-44 # 10460 <handler_irq_software.kLogFields>
20002494:	4581                	li	a1,0
20002496:	845ff0ef          	jal	ra,20001cda <base_log_internal_dv>
2000249a:	a821                	j	200024b2 <handler_irq_software+0x56>
2000249c:	00001597          	auipc	a1,0x1
200024a0:	c8058593          	addi	a1,a1,-896 # 2000311c <kUnknownSpec+0x37>
200024a4:	0020                	addi	s0,sp,8
200024a6:	4651                	li	a2,20
200024a8:	8522                	mv	a0,s0
200024aa:	2c99                	jal	20002700 <memcpy>
200024ac:	8522                	mv	a0,s0
200024ae:	f82ff0ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200024b2:	a001                	j	200024b2 <handler_irq_software+0x56>

200024b4 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200024b4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200024b6:	ce86                	sw	ra,92(sp)
200024b8:	cc96                	sw	t0,88(sp)
200024ba:	ca9a                	sw	t1,84(sp)
200024bc:	c89e                	sw	t2,80(sp)
200024be:	c6a2                	sw	s0,76(sp)
200024c0:	c4aa                	sw	a0,72(sp)
200024c2:	c2ae                	sw	a1,68(sp)
200024c4:	c0b2                	sw	a2,64(sp)
200024c6:	de36                	sw	a3,60(sp)
200024c8:	dc3a                	sw	a4,56(sp)
200024ca:	da3e                	sw	a5,52(sp)
200024cc:	d842                	sw	a6,48(sp)
200024ce:	d646                	sw	a7,44(sp)
200024d0:	d472                	sw	t3,40(sp)
200024d2:	d276                	sw	t4,36(sp)
200024d4:	d07a                	sw	t5,32(sp)
200024d6:	ce7e                	sw	t6,28(sp)
200024d8:	00001517          	auipc	a0,0x1
200024dc:	07050513          	addi	a0,a0,112 # 20003548 <kDeviceLogBypassUartAddress>
200024e0:	4108                	lw	a0,0(a0)
200024e2:	c909                	beqz	a0,200024f4 <handler_irq_timer+0x40>
200024e4:	e000e517          	auipc	a0,0xe000e
200024e8:	f9050513          	addi	a0,a0,-112 # 10474 <handler_irq_timer.kLogFields>
200024ec:	4581                	li	a1,0
200024ee:	fecff0ef          	jal	ra,20001cda <base_log_internal_dv>
200024f2:	a821                	j	2000250a <handler_irq_timer+0x56>
200024f4:	00001597          	auipc	a1,0x1
200024f8:	c3c58593          	addi	a1,a1,-964 # 20003130 <kUnknownSpec+0x4b>
200024fc:	0020                	addi	s0,sp,8
200024fe:	4651                	li	a2,20
20002500:	8522                	mv	a0,s0
20002502:	2afd                	jal	20002700 <memcpy>
20002504:	8522                	mv	a0,s0
20002506:	f2aff0ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
2000250a:	a001                	j	2000250a <handler_irq_timer+0x56>
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
2000250c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
2000250e:	ce86                	sw	ra,92(sp)
20002510:	cc96                	sw	t0,88(sp)
20002512:	ca9a                	sw	t1,84(sp)
20002514:	c89e                	sw	t2,80(sp)
20002516:	c6a2                	sw	s0,76(sp)
20002518:	c4aa                	sw	a0,72(sp)
2000251a:	c2ae                	sw	a1,68(sp)
2000251c:	c0b2                	sw	a2,64(sp)
2000251e:	de36                	sw	a3,60(sp)
20002520:	dc3a                	sw	a4,56(sp)
20002522:	da3e                	sw	a5,52(sp)
20002524:	d842                	sw	a6,48(sp)
20002526:	d646                	sw	a7,44(sp)
20002528:	d472                	sw	t3,40(sp)
2000252a:	d276                	sw	t4,36(sp)
2000252c:	d07a                	sw	t5,32(sp)
2000252e:	ce7e                	sw	t6,28(sp)
20002530:	00001517          	auipc	a0,0x1
20002534:	01850513          	addi	a0,a0,24 # 20003548 <kDeviceLogBypassUartAddress>
20002538:	4108                	lw	a0,0(a0)
2000253a:	c909                	beqz	a0,2000254c <handler_irq_timer+0x98>
2000253c:	e000e517          	auipc	a0,0xe000e
20002540:	f4c50513          	addi	a0,a0,-180 # 10488 <handler_irq_external.kLogFields>
20002544:	4581                	li	a1,0
20002546:	f94ff0ef          	jal	ra,20001cda <base_log_internal_dv>
2000254a:	a821                	j	20002562 <handler_irq_timer+0xae>
2000254c:	00001597          	auipc	a1,0x1
20002550:	bf858593          	addi	a1,a1,-1032 # 20003144 <kUnknownSpec+0x5f>
20002554:	0020                	addi	s0,sp,8
20002556:	4651                	li	a2,20
20002558:	8522                	mv	a0,s0
2000255a:	225d                	jal	20002700 <memcpy>
2000255c:	8522                	mv	a0,s0
2000255e:	ed2ff0ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20002562:	a001                	j	20002562 <handler_irq_timer+0xae>

20002564 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20002564:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20002566:	ce06                	sw	ra,28(sp)
20002568:	cc22                	sw	s0,24(sp)
2000256a:	ca26                	sw	s1,20(sp)
2000256c:	00001597          	auipc	a1,0x1
20002570:	fdc58593          	addi	a1,a1,-36 # 20003548 <kDeviceLogBypassUartAddress>
20002574:	418c                	lw	a1,0(a1)
20002576:	842a                	mv	s0,a0
20002578:	c19d                	beqz	a1,2000259e <print_exc_msg+0x3a>
2000257a:	e000e517          	auipc	a0,0xe000e
2000257e:	f3650513          	addi	a0,a0,-202 # 104b0 <print_exc_msg.kLogFields>
20002582:	4585                	li	a1,1
20002584:	8622                	mv	a2,s0
20002586:	f54ff0ef          	jal	ra,20001cda <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000258a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000258e:	e000e517          	auipc	a0,0xe000e
20002592:	f3650513          	addi	a0,a0,-202 # 104c4 <print_exc_msg.kLogFields.6>
20002596:	4585                	li	a1,1
20002598:	f42ff0ef          	jal	ra,20001cda <base_log_internal_dv>
2000259c:	a81d                	j	200025d2 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000259e:	00001597          	auipc	a1,0x1
200025a2:	bce58593          	addi	a1,a1,-1074 # 2000316c <kUnknownSpec+0x87>
200025a6:	848a                	mv	s1,sp
200025a8:	4651                	li	a2,20
200025aa:	8526                	mv	a0,s1
200025ac:	2a91                	jal	20002700 <memcpy>
200025ae:	8526                	mv	a0,s1
200025b0:	85a2                	mv	a1,s0
200025b2:	e7eff0ef          	jal	ra,20001c30 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200025b6:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200025ba:	00001597          	auipc	a1,0x1
200025be:	bc658593          	addi	a1,a1,-1082 # 20003180 <kUnknownSpec+0x9b>
200025c2:	848a                	mv	s1,sp
200025c4:	4651                	li	a2,20
200025c6:	8526                	mv	a0,s1
200025c8:	2a25                	jal	20002700 <memcpy>
200025ca:	8526                	mv	a0,s1
200025cc:	85a2                	mv	a1,s0
200025ce:	e62ff0ef          	jal	ra,20001c30 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200025d2:	a001                	j	200025d2 <print_exc_msg+0x6e>

200025d4 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
200025d4:	1141                	addi	sp,sp,-16
200025d6:	c606                	sw	ra,12(sp)
200025d8:	c422                	sw	s0,8(sp)
200025da:	6511                	lui	a0,0x4
200025dc:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
200025e0:	c7dff0ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
200025e4:	00001517          	auipc	a0,0x1
200025e8:	f3450513          	addi	a0,a0,-204 # 20003518 <kDeviceType>
200025ec:	4108                	lw	a0,0(a0)
200025ee:	c111                	beqz	a0,200025f2 <main+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
200025f0:	281d                	jal	20002626 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
200025f2:	f17fd0ef          	jal	ra,20000508 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
200025f6:	00000597          	auipc	a1,0x0
200025fa:	64a58593          	addi	a1,a1,1610 # 20002c40 <kTestConfig>
200025fe:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20002602:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20002604:	c191                	beqz	a1,20002608 <main+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20002606:	2005                	jal	20002626 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20002608:	20f5                	jal	200026f4 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
2000260a:	e409                	bnez	s0,20002614 <main+0x40>
2000260c:	6531                	lui	a0,0xc
2000260e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20002612:	a019                	j	20002618 <main+0x44>
20002614:	6525                	lui	a0,0x9
20002616:	0535                	addi	a0,a0,13
20002618:	c45ff0ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000261c:	4505                	li	a0,1
2000261e:	4422                	lw	s0,8(sp)
20002620:	40b2                	lw	ra,12(sp)
20002622:	0141                	addi	sp,sp,16
20002624:	8082                	ret

20002626 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20002626:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20002628:	ce06                	sw	ra,28(sp)
2000262a:	cc22                	sw	s0,24(sp)
2000262c:	ca26                	sw	s1,20(sp)
2000262e:	efffe597          	auipc	a1,0xefffe
20002632:	9ee58593          	addi	a1,a1,-1554 # 1000001c <uart0>
20002636:	40000537          	lui	a0,0x40000
2000263a:	842ff0ef          	jal	ra,2000167c <dif_uart_init>
2000263e:	00001497          	auipc	s1,0x1
20002642:	f0a48493          	addi	s1,s1,-246 # 20003548 <kDeviceLogBypassUartAddress>
20002646:	c91d                	beqz	a0,2000267c <init_uart+0x56>
20002648:	4088                	lw	a0,0(s1)
2000264a:	c909                	beqz	a0,2000265c <init_uart+0x36>
2000264c:	e000e517          	auipc	a0,0xe000e
20002650:	e8c50513          	addi	a0,a0,-372 # 104d8 <init_uart.kLogFields>
20002654:	4581                	li	a1,0
20002656:	e84ff0ef          	jal	ra,20001cda <base_log_internal_dv>
2000265a:	a821                	j	20002672 <init_uart+0x4c>
2000265c:	00001597          	auipc	a1,0x1
20002660:	b3858593          	addi	a1,a1,-1224 # 20003194 <kUnknownSpec+0xaf>
20002664:	840a                	mv	s0,sp
20002666:	4651                	li	a2,20
20002668:	8522                	mv	a0,s0
2000266a:	2859                	jal	20002700 <memcpy>
2000266c:	8522                	mv	a0,s0
2000266e:	dc2ff0ef          	jal	ra,20001c30 <base_log_internal_core>
20002672:	6531                	lui	a0,0xc
20002674:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20002678:	be5ff0ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
2000267c:	00001517          	auipc	a0,0x1
20002680:	ebc50513          	addi	a0,a0,-324 # 20003538 <kUartBaudrate>
20002684:	4108                	lw	a0,0(a0)
20002686:	00001597          	auipc	a1,0x1
2000268a:	ea258593          	addi	a1,a1,-350 # 20003528 <kClockFreqPeripheralHz>
2000268e:	418c                	lw	a1,0(a1)
20002690:	c02a                	sw	a0,0(sp)
20002692:	c22e                	sw	a1,4(sp)
20002694:	4505                	li	a0,1
20002696:	c42a                	sw	a0,8(sp)
20002698:	c62a                	sw	a0,12(sp)
2000269a:	efffe517          	auipc	a0,0xefffe
2000269e:	98250513          	addi	a0,a0,-1662 # 1000001c <uart0>
200026a2:	858a                	mv	a1,sp
200026a4:	fe7fe0ef          	jal	ra,2000168a <dif_uart_configure>
200026a8:	c91d                	beqz	a0,200026de <init_uart+0xb8>
200026aa:	4088                	lw	a0,0(s1)
200026ac:	c909                	beqz	a0,200026be <init_uart+0x98>
200026ae:	e000e517          	auipc	a0,0xe000e
200026b2:	e3e50513          	addi	a0,a0,-450 # 104ec <init_uart.kLogFields.2>
200026b6:	4581                	li	a1,0
200026b8:	e22ff0ef          	jal	ra,20001cda <base_log_internal_dv>
200026bc:	a821                	j	200026d4 <init_uart+0xae>
200026be:	00001597          	auipc	a1,0x1
200026c2:	aea58593          	addi	a1,a1,-1302 # 200031a8 <kUnknownSpec+0xc3>
200026c6:	840a                	mv	s0,sp
200026c8:	4651                	li	a2,20
200026ca:	8522                	mv	a0,s0
200026cc:	2815                	jal	20002700 <memcpy>
200026ce:	8522                	mv	a0,s0
200026d0:	d60ff0ef          	jal	ra,20001c30 <base_log_internal_core>
200026d4:	6531                	lui	a0,0xc
200026d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200026da:	b83ff0ef          	jal	ra,2000225c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
200026de:	efffe517          	auipc	a0,0xefffe
200026e2:	93e50513          	addi	a0,a0,-1730 # 1000001c <uart0>
200026e6:	e46ff0ef          	jal	ra,20001d2c <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
200026ea:	44d2                	lw	s1,20(sp)
200026ec:	4462                	lw	s0,24(sp)
200026ee:	40f2                	lw	ra,28(sp)
200026f0:	6105                	addi	sp,sp,32
200026f2:	8082                	ret

200026f4 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
200026f4:	8082                	ret
	...

200026f8 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200026f8:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
200026fa:	8082                	ret

200026fc <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200026fc:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200026fe:	8082                	ret

20002700 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20002700:	ca11                	beqz	a2,20002714 <memcpy+0x14>
20002702:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20002704:	00058703          	lb	a4,0(a1)
20002708:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
2000270c:	167d                	addi	a2,a2,-1
2000270e:	0685                	addi	a3,a3,1
20002710:	0585                	addi	a1,a1,1
20002712:	fa6d                	bnez	a2,20002704 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20002714:	8082                	ret

20002716 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20002716:	c619                	beqz	a2,20002724 <memset+0xe>
20002718:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
2000271a:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
2000271e:	167d                	addi	a2,a2,-1
20002720:	0685                	addi	a3,a3,1
20002722:	fe65                	bnez	a2,2000271a <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20002724:	8082                	ret

20002726 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20002726:	ce09                	beqz	a2,20002740 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20002728:	00054683          	lbu	a3,0(a0)
2000272c:	0005c703          	lbu	a4,0(a1)
20002730:	00e6ea63          	bltu	a3,a4,20002744 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20002734:	00d76b63          	bltu	a4,a3,2000274a <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20002738:	167d                	addi	a2,a2,-1
2000273a:	0585                	addi	a1,a1,1
2000273c:	0505                	addi	a0,a0,1
2000273e:	f66d                	bnez	a2,20002728 <memcmp+0x2>
20002740:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
20002742:	8082                	ret
20002744:	fd600513          	li	a0,-42
20002748:	8082                	ret
2000274a:	02a00513          	li	a0,42
2000274e:	8082                	ret

20002750 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20002750:	ca11                	beqz	a2,20002764 <memchr+0x14>
20002752:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20002756:	00054683          	lbu	a3,0(a0)
2000275a:	00b68663          	beq	a3,a1,20002766 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
2000275e:	167d                	addi	a2,a2,-1
20002760:	0505                	addi	a0,a0,1
20002762:	fa75                	bnez	a2,20002756 <memchr+0x6>
20002764:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20002766:	8082                	ret

20002768 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20002768:	ce09                	beqz	a2,20002782 <memrchr+0x1a>
2000276a:	fff50693          	addi	a3,a0,-1
2000276e:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20002772:	00c68733          	add	a4,a3,a2
20002776:	00074703          	lbu	a4,0(a4) # 20000000 <_stack_end+0xffe0000>
2000277a:	00b70663          	beq	a4,a1,20002786 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
2000277e:	167d                	addi	a2,a2,-1
20002780:	fa6d                	bnez	a2,20002772 <memrchr+0xa>
20002782:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20002784:	8082                	ret
20002786:	9532                	add	a0,a0,a2
20002788:	157d                	addi	a0,a0,-1
2000278a:	8082                	ret

2000278c <irq_set_vector_offset>:
irq_set_vector_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:14
static const uint32_t IRQ_EXT_ENABLE_OFFSET = 11;
static const uint32_t IRQ_TIMER_ENABLE_OFFSET = 7;
static const uint32_t IRQ_SW_ENABLE_OFFSET = 3;

void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
2000278c:	30551073          	csrw	mtvec,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:15
}
20002790:	8082                	ret

20002792 <irq_global_ctrl>:
irq_global_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:18

void irq_global_ctrl(bool en) {
  if (en) {
20002792:	c509                	beqz	a0,2000279c <irq_global_ctrl+0xa>
20002794:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
20002796:	30052073          	csrs	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
2000279a:	8082                	ret
2000279c:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
2000279e:	30053073          	csrc	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
}
200027a2:	8082                	ret

200027a4 <irq_external_ctrl>:
irq_external_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
200027a4:	c519                	beqz	a0,200027b2 <irq_external_ctrl+0xe>
200027a6:	6505                	lui	a0,0x1
200027a8:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
200027ac:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
200027b0:	8082                	ret
200027b2:	6505                	lui	a0,0x1
200027b4:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
200027b8:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
}
200027bc:	8082                	ret

200027be <irq_timer_ctrl>:
irq_timer_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
200027be:	c511                	beqz	a0,200027ca <irq_timer_ctrl+0xc>
200027c0:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
200027c4:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
200027c8:	8082                	ret
200027ca:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
200027ce:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
}
200027d2:	8082                	ret

200027d4 <irq_software_ctrl>:
irq_software_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
200027d4:	c509                	beqz	a0,200027de <irq_software_ctrl+0xa>
200027d6:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
200027d8:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
200027dc:	8082                	ret
200027de:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
200027e0:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
}
200027e4:	8082                	ret
	...

200027e8 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200027e8:	88aa                	mv	a7,a0
200027ea:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200027ec:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200027ee:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200027f0:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200027f2:	20069963          	bnez	a3,20002a04 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200027f6:	200036b7          	lui	a3,0x20003
200027fa:	54c68693          	addi	a3,a3,1356 # 2000354c <__clz_tab>
200027fe:	0cc5f063          	bgeu	a1,a2,200028be <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20002802:	6741                	lui	a4,0x10
20002804:	0ae67663          	bgeu	a2,a4,200028b0 <__udivdi3+0xc8>
20002808:	0ff00713          	li	a4,255
2000280c:	00c73733          	sltu	a4,a4,a2
20002810:	070e                	slli	a4,a4,0x3
20002812:	00e65533          	srl	a0,a2,a4
20002816:	96aa                	add	a3,a3,a0
20002818:	0006c683          	lbu	a3,0(a3)
2000281c:	02000513          	li	a0,32
20002820:	9736                	add	a4,a4,a3
20002822:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20002826:	00e50c63          	beq	a0,a4,2000283e <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000282a:	00d797b3          	sll	a5,a5,a3
2000282e:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20002832:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002836:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
2000283a:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
2000283e:	01085893          	srli	a7,a6,0x10
20002842:	0315d7b3          	divu	a5,a1,a7
20002846:	01081613          	slli	a2,a6,0x10
2000284a:	8241                	srli	a2,a2,0x10
2000284c:	01035713          	srli	a4,t1,0x10
20002850:	0315f6b3          	remu	a3,a1,a7
20002854:	853e                	mv	a0,a5
20002856:	02f605b3          	mul	a1,a2,a5
2000285a:	06c2                	slli	a3,a3,0x10
2000285c:	8f55                	or	a4,a4,a3
2000285e:	00b77c63          	bgeu	a4,a1,20002876 <__udivdi3+0x8e>
20002862:	9742                	add	a4,a4,a6
20002864:	fff78513          	addi	a0,a5,-1
20002868:	01076763          	bltu	a4,a6,20002876 <__udivdi3+0x8e>
2000286c:	00b77563          	bgeu	a4,a1,20002876 <__udivdi3+0x8e>
20002870:	ffe78513          	addi	a0,a5,-2
20002874:	9742                	add	a4,a4,a6
20002876:	8f0d                	sub	a4,a4,a1
20002878:	031777b3          	remu	a5,a4,a7
2000287c:	0342                	slli	t1,t1,0x10
2000287e:	01035313          	srli	t1,t1,0x10
20002882:	03175733          	divu	a4,a4,a7
20002886:	07c2                	slli	a5,a5,0x10
20002888:	0067e333          	or	t1,a5,t1
2000288c:	02e606b3          	mul	a3,a2,a4
20002890:	863a                	mv	a2,a4
20002892:	00d37b63          	bgeu	t1,a3,200028a8 <__udivdi3+0xc0>
20002896:	9342                	add	t1,t1,a6
20002898:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000289c:	01036663          	bltu	t1,a6,200028a8 <__udivdi3+0xc0>
200028a0:	00d37463          	bgeu	t1,a3,200028a8 <__udivdi3+0xc0>
200028a4:	ffe70613          	addi	a2,a4,-2
200028a8:	0542                	slli	a0,a0,0x10
200028aa:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200028ac:	4581                	li	a1,0
200028ae:	a85d                	j	20002964 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200028b0:	01000537          	lui	a0,0x1000
200028b4:	4741                	li	a4,16
200028b6:	f4a66ee3          	bltu	a2,a0,20002812 <__udivdi3+0x2a>
200028ba:	4761                	li	a4,24
200028bc:	bf99                	j	20002812 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
200028be:	e601                	bnez	a2,200028c6 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
200028c0:	4705                	li	a4,1
200028c2:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200028c6:	6741                	lui	a4,0x10
200028c8:	08e87f63          	bgeu	a6,a4,20002966 <__udivdi3+0x17e>
200028cc:	0ff00713          	li	a4,255
200028d0:	01077363          	bgeu	a4,a6,200028d6 <__udivdi3+0xee>
200028d4:	4521                	li	a0,8
200028d6:	00a85733          	srl	a4,a6,a0
200028da:	96ba                	add	a3,a3,a4
200028dc:	0006c703          	lbu	a4,0(a3)
200028e0:	02000613          	li	a2,32
200028e4:	972a                	add	a4,a4,a0
200028e6:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
200028ea:	08e61563          	bne	a2,a4,20002974 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
200028ee:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
200028f2:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
200028f4:	01085893          	srli	a7,a6,0x10
200028f8:	01081613          	slli	a2,a6,0x10
200028fc:	8241                	srli	a2,a2,0x10
200028fe:	01035713          	srli	a4,t1,0x10
20002902:	0317f6b3          	remu	a3,a5,a7
20002906:	0317d7b3          	divu	a5,a5,a7
2000290a:	06c2                	slli	a3,a3,0x10
2000290c:	8f55                	or	a4,a4,a3
2000290e:	02f60e33          	mul	t3,a2,a5
20002912:	853e                	mv	a0,a5
20002914:	01c77c63          	bgeu	a4,t3,2000292c <__udivdi3+0x144>
20002918:	9742                	add	a4,a4,a6
2000291a:	fff78513          	addi	a0,a5,-1
2000291e:	01076763          	bltu	a4,a6,2000292c <__udivdi3+0x144>
20002922:	01c77563          	bgeu	a4,t3,2000292c <__udivdi3+0x144>
20002926:	ffe78513          	addi	a0,a5,-2
2000292a:	9742                	add	a4,a4,a6
2000292c:	41c70733          	sub	a4,a4,t3
20002930:	031777b3          	remu	a5,a4,a7
20002934:	0342                	slli	t1,t1,0x10
20002936:	01035313          	srli	t1,t1,0x10
2000293a:	03175733          	divu	a4,a4,a7
2000293e:	07c2                	slli	a5,a5,0x10
20002940:	0067e333          	or	t1,a5,t1
20002944:	02e606b3          	mul	a3,a2,a4
20002948:	863a                	mv	a2,a4
2000294a:	00d37b63          	bgeu	t1,a3,20002960 <__udivdi3+0x178>
2000294e:	9342                	add	t1,t1,a6
20002950:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20002954:	01036663          	bltu	t1,a6,20002960 <__udivdi3+0x178>
20002958:	00d37463          	bgeu	t1,a3,20002960 <__udivdi3+0x178>
2000295c:	ffe70613          	addi	a2,a4,-2
20002960:	0542                	slli	a0,a0,0x10
20002962:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20002964:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002966:	01000737          	lui	a4,0x1000
2000296a:	4541                	li	a0,16
2000296c:	f6e865e3          	bltu	a6,a4,200028d6 <__udivdi3+0xee>
20002970:	4561                	li	a0,24
20002972:	b795                	j	200028d6 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20002974:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20002978:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
2000297c:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20002980:	00d797b3          	sll	a5,a5,a3
20002984:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002988:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000298c:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002990:	0315f733          	remu	a4,a1,a7
20002994:	01081793          	slli	a5,a6,0x10
20002998:	83c1                	srli	a5,a5,0x10
2000299a:	01065513          	srli	a0,a2,0x10
2000299e:	0315d5b3          	divu	a1,a1,a7
200029a2:	0742                	slli	a4,a4,0x10
200029a4:	8f49                	or	a4,a4,a0
200029a6:	02b786b3          	mul	a3,a5,a1
200029aa:	852e                	mv	a0,a1
200029ac:	00d77c63          	bgeu	a4,a3,200029c4 <__udivdi3+0x1dc>
200029b0:	9742                	add	a4,a4,a6
200029b2:	fff58513          	addi	a0,a1,-1
200029b6:	01076763          	bltu	a4,a6,200029c4 <__udivdi3+0x1dc>
200029ba:	00d77563          	bgeu	a4,a3,200029c4 <__udivdi3+0x1dc>
200029be:	ffe58513          	addi	a0,a1,-2
200029c2:	9742                	add	a4,a4,a6
200029c4:	40d706b3          	sub	a3,a4,a3
200029c8:	0316f733          	remu	a4,a3,a7
200029cc:	0642                	slli	a2,a2,0x10
200029ce:	8241                	srli	a2,a2,0x10
200029d0:	0316d6b3          	divu	a3,a3,a7
200029d4:	0742                	slli	a4,a4,0x10
200029d6:	02d788b3          	mul	a7,a5,a3
200029da:	00c767b3          	or	a5,a4,a2
200029de:	8736                	mv	a4,a3
200029e0:	0117fc63          	bgeu	a5,a7,200029f8 <__udivdi3+0x210>
200029e4:	97c2                	add	a5,a5,a6
200029e6:	fff68713          	addi	a4,a3,-1
200029ea:	0107e763          	bltu	a5,a6,200029f8 <__udivdi3+0x210>
200029ee:	0117f563          	bgeu	a5,a7,200029f8 <__udivdi3+0x210>
200029f2:	ffe68713          	addi	a4,a3,-2
200029f6:	97c2                	add	a5,a5,a6
200029f8:	01051593          	slli	a1,a0,0x10
200029fc:	411787b3          	sub	a5,a5,a7
20002a00:	8dd9                	or	a1,a1,a4
20002a02:	bdcd                	j	200028f4 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20002a04:	14d5e263          	bltu	a1,a3,20002b48 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002a08:	6741                	lui	a4,0x10
20002a0a:	02e6ff63          	bgeu	a3,a4,20002a48 <__udivdi3+0x260>
20002a0e:	0ff00713          	li	a4,255
20002a12:	00d735b3          	sltu	a1,a4,a3
20002a16:	058e                	slli	a1,a1,0x3
20002a18:	20003737          	lui	a4,0x20003
20002a1c:	00b6d533          	srl	a0,a3,a1
20002a20:	54c70713          	addi	a4,a4,1356 # 2000354c <__clz_tab>
20002a24:	972a                	add	a4,a4,a0
20002a26:	00074703          	lbu	a4,0(a4)
20002a2a:	02000513          	li	a0,32
20002a2e:	972e                	add	a4,a4,a1
20002a30:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20002a34:	02e51163          	bne	a0,a4,20002a56 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20002a38:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20002a3a:	f2f6e5e3          	bltu	a3,a5,20002964 <__udivdi3+0x17c>
20002a3e:	00c8b533          	sltu	a0,a7,a2
20002a42:	00154513          	xori	a0,a0,1
20002a46:	bf39                	j	20002964 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002a48:	01000737          	lui	a4,0x1000
20002a4c:	45c1                	li	a1,16
20002a4e:	fce6e5e3          	bltu	a3,a4,20002a18 <__udivdi3+0x230>
20002a52:	45e1                	li	a1,24
20002a54:	b7d1                	j	20002a18 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20002a56:	00e65333          	srl	t1,a2,a4
20002a5a:	00b696b3          	sll	a3,a3,a1
20002a5e:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002a62:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20002a66:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20002a6a:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002a6e:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20002a72:	00b797b3          	sll	a5,a5,a1
20002a76:	00e8d733          	srl	a4,a7,a4
20002a7a:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002a7e:	01031793          	slli	a5,t1,0x10
20002a82:	83c1                	srli	a5,a5,0x10
20002a84:	01085713          	srli	a4,a6,0x10
20002a88:	02a65633          	divu	a2,a2,a0
20002a8c:	06c2                	slli	a3,a3,0x10
20002a8e:	8f55                	or	a4,a4,a3
20002a90:	02c78f33          	mul	t5,a5,a2
20002a94:	8e32                	mv	t3,a2
20002a96:	01e77c63          	bgeu	a4,t5,20002aae <__udivdi3+0x2c6>
20002a9a:	971a                	add	a4,a4,t1
20002a9c:	fff60e13          	addi	t3,a2,-1
20002aa0:	00676763          	bltu	a4,t1,20002aae <__udivdi3+0x2c6>
20002aa4:	01e77563          	bgeu	a4,t5,20002aae <__udivdi3+0x2c6>
20002aa8:	ffe60e13          	addi	t3,a2,-2
20002aac:	971a                	add	a4,a4,t1
20002aae:	41e70733          	sub	a4,a4,t5
20002ab2:	02a776b3          	remu	a3,a4,a0
20002ab6:	02a75733          	divu	a4,a4,a0
20002aba:	06c2                	slli	a3,a3,0x10
20002abc:	02e78633          	mul	a2,a5,a4
20002ac0:	01081793          	slli	a5,a6,0x10
20002ac4:	83c1                	srli	a5,a5,0x10
20002ac6:	8fd5                	or	a5,a5,a3
20002ac8:	86ba                	mv	a3,a4
20002aca:	00c7fc63          	bgeu	a5,a2,20002ae2 <__udivdi3+0x2fa>
20002ace:	979a                	add	a5,a5,t1
20002ad0:	fff70693          	addi	a3,a4,-1 # ffffff <init_uart.kLogFields.2+0xfefb13>
20002ad4:	0067e763          	bltu	a5,t1,20002ae2 <__udivdi3+0x2fa>
20002ad8:	00c7f563          	bgeu	a5,a2,20002ae2 <__udivdi3+0x2fa>
20002adc:	ffe70693          	addi	a3,a4,-2
20002ae0:	979a                	add	a5,a5,t1
20002ae2:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002ae6:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002ae8:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002aea:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20002aee:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002af2:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002af4:	00def6b3          	and	a3,t4,a3
20002af8:	01055613          	srli	a2,a0,0x10
20002afc:	010ede93          	srli	t4,t4,0x10
20002b00:	02d80333          	mul	t1,a6,a3
20002b04:	02d606b3          	mul	a3,a2,a3
20002b08:	01035713          	srli	a4,t1,0x10
20002b0c:	03d80833          	mul	a6,a6,t4
20002b10:	9836                	add	a6,a6,a3
20002b12:	9742                	add	a4,a4,a6
20002b14:	03d60633          	mul	a2,a2,t4
20002b18:	00d77363          	bgeu	a4,a3,20002b1e <__udivdi3+0x336>
20002b1c:	9672                	add	a2,a2,t3
20002b1e:	01075693          	srli	a3,a4,0x10
20002b22:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20002b24:	02c7e063          	bltu	a5,a2,20002b44 <__udivdi3+0x35c>
20002b28:	d8c792e3          	bne	a5,a2,200028ac <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002b2c:	67c1                	lui	a5,0x10
20002b2e:	17fd                	addi	a5,a5,-1
20002b30:	8f7d                	and	a4,a4,a5
20002b32:	0742                	slli	a4,a4,0x10
20002b34:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20002b38:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002b3c:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20002b3e:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20002b40:	e2e8f2e3          	bgeu	a7,a4,20002964 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20002b44:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20002b46:	b39d                	j	200028ac <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20002b48:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20002b4a:	4501                	li	a0,0
20002b4c:	bd21                	j	20002964 <__udivdi3+0x17c>
