
sw/device/tests/dif_clkmgr_smoketest_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001724  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000872  200018a8  200018a8  000028a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  2000211c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20002124  00004008  2**2
                  ALLOC
  8 .logs.fields  000001a4  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000674a  00000000  00000000  000041d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001472  00000000  00000000  0000a91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003955  00000000  00000000  0000be26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000032b5  00000000  00000000  0000f77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e8  00000000  00000000  00012a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001f04  00000000  00000000  00012c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000704  00000000  00000000  00014b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	0cc60613          	addi	a2,a2,204 # 2000211c <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2e7d                	jal	2000043c <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	60c0006f          	j	2000068c <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0800006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1b80006f          	j	200002c4 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2000006f          	j	2000031c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2480006f          	j	20000374 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000182:	de06                	sw	ra,60(sp)
20000184:	dc16                	sw	t0,56(sp)
20000186:	da1a                	sw	t1,52(sp)
20000188:	d81e                	sw	t2,48(sp)
2000018a:	d62a                	sw	a0,44(sp)
2000018c:	d42e                	sw	a1,40(sp)
2000018e:	d232                	sw	a2,36(sp)
20000190:	d036                	sw	a3,32(sp)
20000192:	ce3a                	sw	a4,28(sp)
20000194:	cc3e                	sw	a5,24(sp)
20000196:	ca42                	sw	a6,20(sp)
20000198:	c846                	sw	a7,16(sp)
2000019a:	c672                	sw	t3,12(sp)
2000019c:	c476                	sw	t4,8(sp)
2000019e:	c27a                	sw	t5,4(sp)
200001a0:	c07e                	sw	t6,0(sp)
200001a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200001a6:	897d                	andi	a0,a0,31
200001a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200001aa:	00a5dc63          	bge	a1,a0,200001c2 <handler_exception+0x42>
200001ae:	4599                	li	a1,6
200001b0:	02a5c263          	blt	a1,a0,200001d4 <handler_exception+0x54>
200001b4:	458d                	li	a1,3
200001b6:	02b50c63          	beq	a0,a1,200001ee <handler_exception+0x6e>
200001ba:	4595                	li	a1,5
200001bc:	02b50763          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001c0:	a015                	j	200001e4 <handler_exception+0x64>
200001c2:	c115                	beqz	a0,200001e6 <handler_exception+0x66>
200001c4:	4585                	li	a1,1
200001c6:	02b50063          	beq	a0,a1,200001e6 <handler_exception+0x66>
200001ca:	4589                	li	a1,2
200001cc:	00b51c63          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200001d0:	208d                	jal	20000232 <handler_instr_ill_fault>
200001d2:	a839                	j	200001f0 <handler_exception+0x70>
200001d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200001d6:	00b50a63          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001da:	45ad                	li	a1,11
200001dc:	00b51463          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200001e0:	2065                	jal	20000288 <handler_ecall>
200001e2:	a039                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200001e4:	a001                	j	200001e4 <handler_exception+0x64>
200001e6:	2805                	jal	20000216 <handler_instr_acc_fault>
200001e8:	a021                	j	200001f0 <handler_exception+0x70>
200001ea:	2049                	jal	2000026c <handler_lsu_fault>
200001ec:	a011                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200001ee:	208d                	jal	20000250 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200001f0:	4f82                	lw	t6,0(sp)
200001f2:	4f12                	lw	t5,4(sp)
200001f4:	4ea2                	lw	t4,8(sp)
200001f6:	4e32                	lw	t3,12(sp)
200001f8:	48c2                	lw	a7,16(sp)
200001fa:	4852                	lw	a6,20(sp)
200001fc:	47e2                	lw	a5,24(sp)
200001fe:	4772                	lw	a4,28(sp)
20000200:	5682                	lw	a3,32(sp)
20000202:	5612                	lw	a2,36(sp)
20000204:	55a2                	lw	a1,40(sp)
20000206:	5532                	lw	a0,44(sp)
20000208:	53c2                	lw	t2,48(sp)
2000020a:	5352                	lw	t1,52(sp)
2000020c:	52e2                	lw	t0,56(sp)
2000020e:	50f2                	lw	ra,60(sp)
20000210:	6121                	addi	sp,sp,64
20000212:	30200073          	mret

20000216 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20000216:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20000218:	de06                	sw	ra,60(sp)
2000021a:	dc22                	sw	s0,56(sp)
2000021c:	00002597          	auipc	a1,0x2
20000220:	a2858593          	addi	a1,a1,-1496 # 20001c44 <__clz_tab+0x160>
20000224:	0040                	addi	s0,sp,4
20000226:	03400613          	li	a2,52
2000022a:	8522                	mv	a0,s0
2000022c:	2995                	jal	200006a0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
2000022e:	8522                	mv	a0,s0
20000230:	2a71                	jal	200003cc <print_exc_msg>

20000232 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20000232:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20000234:	c686                	sw	ra,76(sp)
20000236:	c4a2                	sw	s0,72(sp)
20000238:	00002597          	auipc	a1,0x2
2000023c:	a4058593          	addi	a1,a1,-1472 # 20001c78 <__clz_tab+0x194>
20000240:	00d10413          	addi	s0,sp,13
20000244:	03b00613          	li	a2,59
20000248:	8522                	mv	a0,s0
2000024a:	2999                	jal	200006a0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
2000024c:	8522                	mv	a0,s0
2000024e:	2abd                	jal	200003cc <print_exc_msg>

20000250 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000250:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000252:	de06                	sw	ra,60(sp)
20000254:	dc22                	sw	s0,56(sp)
20000256:	00002597          	auipc	a1,0x2
2000025a:	a5d58593          	addi	a1,a1,-1443 # 20001cb3 <__clz_tab+0x1cf>
2000025e:	840a                	mv	s0,sp
20000260:	03800613          	li	a2,56
20000264:	8522                	mv	a0,s0
20000266:	292d                	jal	200006a0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20000268:	8522                	mv	a0,s0
2000026a:	228d                	jal	200003cc <print_exc_msg>

2000026c <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
2000026c:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
2000026e:	de06                	sw	ra,60(sp)
20000270:	dc22                	sw	s0,56(sp)
20000272:	00002597          	auipc	a1,0x2
20000276:	a7958593          	addi	a1,a1,-1415 # 20001ceb <__clz_tab+0x207>
2000027a:	0020                	addi	s0,sp,8
2000027c:	03000613          	li	a2,48
20000280:	8522                	mv	a0,s0
20000282:	2939                	jal	200006a0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000284:	8522                	mv	a0,s0
20000286:	2299                	jal	200003cc <print_exc_msg>

20000288 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000288:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000028a:	ce06                	sw	ra,28(sp)
2000028c:	cc22                	sw	s0,24(sp)
2000028e:	00001517          	auipc	a0,0x1
20000292:	71250513          	addi	a0,a0,1810 # 200019a0 <kDeviceLogBypassUartAddress>
20000296:	4108                	lw	a0,0(a0)
20000298:	c909                	beqz	a0,200002aa <handler_ecall+0x22>
2000029a:	e0010517          	auipc	a0,0xe0010
2000029e:	da250513          	addi	a0,a0,-606 # 1003c <handler_ecall.kLogFields>
200002a2:	4581                	li	a1,0
200002a4:	1d7000ef          	jal	ra,20000c7a <base_log_internal_dv>
200002a8:	a821                	j	200002c0 <handler_ecall+0x38>
200002aa:	00001597          	auipc	a1,0x1
200002ae:	63a58593          	addi	a1,a1,1594 # 200018e4 <__udivdi3+0x3a6>
200002b2:	840a                	mv	s0,sp
200002b4:	4651                	li	a2,20
200002b6:	8522                	mv	a0,s0
200002b8:	26e5                	jal	200006a0 <memcpy>
200002ba:	8522                	mv	a0,s0
200002bc:	119000ef          	jal	ra,20000bd4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200002c0:	a001                	j	200002c0 <handler_ecall+0x38>
200002c2:	0001                	nop

200002c4 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200002c4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200002c6:	ce86                	sw	ra,92(sp)
200002c8:	cc96                	sw	t0,88(sp)
200002ca:	ca9a                	sw	t1,84(sp)
200002cc:	c89e                	sw	t2,80(sp)
200002ce:	c6a2                	sw	s0,76(sp)
200002d0:	c4aa                	sw	a0,72(sp)
200002d2:	c2ae                	sw	a1,68(sp)
200002d4:	c0b2                	sw	a2,64(sp)
200002d6:	de36                	sw	a3,60(sp)
200002d8:	dc3a                	sw	a4,56(sp)
200002da:	da3e                	sw	a5,52(sp)
200002dc:	d842                	sw	a6,48(sp)
200002de:	d646                	sw	a7,44(sp)
200002e0:	d472                	sw	t3,40(sp)
200002e2:	d276                	sw	t4,36(sp)
200002e4:	d07a                	sw	t5,32(sp)
200002e6:	ce7e                	sw	t6,28(sp)
200002e8:	00001517          	auipc	a0,0x1
200002ec:	6b850513          	addi	a0,a0,1720 # 200019a0 <kDeviceLogBypassUartAddress>
200002f0:	4108                	lw	a0,0(a0)
200002f2:	c909                	beqz	a0,20000304 <handler_irq_software+0x40>
200002f4:	e0010517          	auipc	a0,0xe0010
200002f8:	d0c50513          	addi	a0,a0,-756 # 10000 <_dv_log_offset>
200002fc:	4581                	li	a1,0
200002fe:	17d000ef          	jal	ra,20000c7a <base_log_internal_dv>
20000302:	a821                	j	2000031a <handler_irq_software+0x56>
20000304:	00001597          	auipc	a1,0x1
20000308:	5a458593          	addi	a1,a1,1444 # 200018a8 <__udivdi3+0x36a>
2000030c:	0020                	addi	s0,sp,8
2000030e:	4651                	li	a2,20
20000310:	8522                	mv	a0,s0
20000312:	2679                	jal	200006a0 <memcpy>
20000314:	8522                	mv	a0,s0
20000316:	0bf000ef          	jal	ra,20000bd4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000031a:	a001                	j	2000031a <handler_irq_software+0x56>

2000031c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
2000031c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
2000031e:	ce86                	sw	ra,92(sp)
20000320:	cc96                	sw	t0,88(sp)
20000322:	ca9a                	sw	t1,84(sp)
20000324:	c89e                	sw	t2,80(sp)
20000326:	c6a2                	sw	s0,76(sp)
20000328:	c4aa                	sw	a0,72(sp)
2000032a:	c2ae                	sw	a1,68(sp)
2000032c:	c0b2                	sw	a2,64(sp)
2000032e:	de36                	sw	a3,60(sp)
20000330:	dc3a                	sw	a4,56(sp)
20000332:	da3e                	sw	a5,52(sp)
20000334:	d842                	sw	a6,48(sp)
20000336:	d646                	sw	a7,44(sp)
20000338:	d472                	sw	t3,40(sp)
2000033a:	d276                	sw	t4,36(sp)
2000033c:	d07a                	sw	t5,32(sp)
2000033e:	ce7e                	sw	t6,28(sp)
20000340:	00001517          	auipc	a0,0x1
20000344:	66050513          	addi	a0,a0,1632 # 200019a0 <kDeviceLogBypassUartAddress>
20000348:	4108                	lw	a0,0(a0)
2000034a:	c909                	beqz	a0,2000035c <handler_irq_timer+0x40>
2000034c:	e0010517          	auipc	a0,0xe0010
20000350:	cc850513          	addi	a0,a0,-824 # 10014 <handler_irq_timer.kLogFields>
20000354:	4581                	li	a1,0
20000356:	125000ef          	jal	ra,20000c7a <base_log_internal_dv>
2000035a:	a821                	j	20000372 <handler_irq_timer+0x56>
2000035c:	00001597          	auipc	a1,0x1
20000360:	56058593          	addi	a1,a1,1376 # 200018bc <__udivdi3+0x37e>
20000364:	0020                	addi	s0,sp,8
20000366:	4651                	li	a2,20
20000368:	8522                	mv	a0,s0
2000036a:	2e1d                	jal	200006a0 <memcpy>
2000036c:	8522                	mv	a0,s0
2000036e:	067000ef          	jal	ra,20000bd4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000372:	a001                	j	20000372 <handler_irq_timer+0x56>

20000374 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000374:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000376:	ce86                	sw	ra,92(sp)
20000378:	cc96                	sw	t0,88(sp)
2000037a:	ca9a                	sw	t1,84(sp)
2000037c:	c89e                	sw	t2,80(sp)
2000037e:	c6a2                	sw	s0,76(sp)
20000380:	c4aa                	sw	a0,72(sp)
20000382:	c2ae                	sw	a1,68(sp)
20000384:	c0b2                	sw	a2,64(sp)
20000386:	de36                	sw	a3,60(sp)
20000388:	dc3a                	sw	a4,56(sp)
2000038a:	da3e                	sw	a5,52(sp)
2000038c:	d842                	sw	a6,48(sp)
2000038e:	d646                	sw	a7,44(sp)
20000390:	d472                	sw	t3,40(sp)
20000392:	d276                	sw	t4,36(sp)
20000394:	d07a                	sw	t5,32(sp)
20000396:	ce7e                	sw	t6,28(sp)
20000398:	00001517          	auipc	a0,0x1
2000039c:	60850513          	addi	a0,a0,1544 # 200019a0 <kDeviceLogBypassUartAddress>
200003a0:	4108                	lw	a0,0(a0)
200003a2:	c909                	beqz	a0,200003b4 <handler_irq_external+0x40>
200003a4:	e0010517          	auipc	a0,0xe0010
200003a8:	c8450513          	addi	a0,a0,-892 # 10028 <handler_irq_external.kLogFields>
200003ac:	4581                	li	a1,0
200003ae:	0cd000ef          	jal	ra,20000c7a <base_log_internal_dv>
200003b2:	a821                	j	200003ca <handler_irq_external+0x56>
200003b4:	00001597          	auipc	a1,0x1
200003b8:	51c58593          	addi	a1,a1,1308 # 200018d0 <__udivdi3+0x392>
200003bc:	0020                	addi	s0,sp,8
200003be:	4651                	li	a2,20
200003c0:	8522                	mv	a0,s0
200003c2:	2cf9                	jal	200006a0 <memcpy>
200003c4:	8522                	mv	a0,s0
200003c6:	00f000ef          	jal	ra,20000bd4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200003ca:	a001                	j	200003ca <handler_irq_external+0x56>

200003cc <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200003cc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200003ce:	ce06                	sw	ra,28(sp)
200003d0:	cc22                	sw	s0,24(sp)
200003d2:	ca26                	sw	s1,20(sp)
200003d4:	00001597          	auipc	a1,0x1
200003d8:	5cc58593          	addi	a1,a1,1484 # 200019a0 <kDeviceLogBypassUartAddress>
200003dc:	418c                	lw	a1,0(a1)
200003de:	842a                	mv	s0,a0
200003e0:	c19d                	beqz	a1,20000406 <print_exc_msg+0x3a>
200003e2:	e0010517          	auipc	a0,0xe0010
200003e6:	c6e50513          	addi	a0,a0,-914 # 10050 <print_exc_msg.kLogFields>
200003ea:	4585                	li	a1,1
200003ec:	8622                	mv	a2,s0
200003ee:	08d000ef          	jal	ra,20000c7a <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200003f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200003f6:	e0010517          	auipc	a0,0xe0010
200003fa:	c6e50513          	addi	a0,a0,-914 # 10064 <print_exc_msg.kLogFields.6>
200003fe:	4585                	li	a1,1
20000400:	07b000ef          	jal	ra,20000c7a <base_log_internal_dv>
20000404:	a81d                	j	2000043a <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000406:	00001597          	auipc	a1,0x1
2000040a:	4f258593          	addi	a1,a1,1266 # 200018f8 <__udivdi3+0x3ba>
2000040e:	848a                	mv	s1,sp
20000410:	4651                	li	a2,20
20000412:	8526                	mv	a0,s1
20000414:	2471                	jal	200006a0 <memcpy>
20000416:	8526                	mv	a0,s1
20000418:	85a2                	mv	a1,s0
2000041a:	7ba000ef          	jal	ra,20000bd4 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000041e:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000422:	00001597          	auipc	a1,0x1
20000426:	4ea58593          	addi	a1,a1,1258 # 2000190c <__udivdi3+0x3ce>
2000042a:	848a                	mv	s1,sp
2000042c:	4651                	li	a2,20
2000042e:	8526                	mv	a0,s1
20000430:	2c85                	jal	200006a0 <memcpy>
20000432:	8526                	mv	a0,s1
20000434:	85a2                	mv	a1,s0
20000436:	79e000ef          	jal	ra,20000bd4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
2000043a:	a001                	j	2000043a <print_exc_msg+0x6e>

2000043c <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
2000043c:	1141                	addi	sp,sp,-16
2000043e:	c606                	sw	ra,12(sp)
20000440:	c422                	sw	s0,8(sp)
20000442:	6511                	lui	a0,0x4
20000444:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000448:	2231                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
2000044a:	00001517          	auipc	a0,0x1
2000044e:	52650513          	addi	a0,a0,1318 # 20001970 <kDeviceType>
20000452:	4108                	lw	a0,0(a0)
20000454:	c111                	beqz	a0,20000458 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000456:	280d                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000458:	21c9                	jal	2000091a <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
2000045a:	00001597          	auipc	a1,0x1
2000045e:	5d658593          	addi	a1,a1,1494 # 20001a30 <kTestConfig>
20000462:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000466:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000468:	c191                	beqz	a1,2000046c <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
2000046a:	2839                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
2000046c:	2425                	jal	20000694 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
2000046e:	e409                	bnez	s0,20000478 <main+0x3c>
20000470:	6531                	lui	a0,0xc
20000472:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000476:	a019                	j	2000047c <main+0x40>
20000478:	6525                	lui	a0,0x9
2000047a:	0535                	addi	a0,a0,13
2000047c:	28e1                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000047e:	4505                	li	a0,1
20000480:	4422                	lw	s0,8(sp)
20000482:	40b2                	lw	ra,12(sp)
20000484:	0141                	addi	sp,sp,16
20000486:	8082                	ret

20000488 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000488:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
2000048a:	ce06                	sw	ra,28(sp)
2000048c:	cc22                	sw	s0,24(sp)
2000048e:	ca26                	sw	s1,20(sp)
20000490:	f0000597          	auipc	a1,0xf0000
20000494:	b7858593          	addi	a1,a1,-1160 # 10000008 <_data_end>
20000498:	40000537          	lui	a0,0x40000
2000049c:	4dd000ef          	jal	ra,20001178 <dif_uart_init>
200004a0:	00001497          	auipc	s1,0x1
200004a4:	50048493          	addi	s1,s1,1280 # 200019a0 <kDeviceLogBypassUartAddress>
200004a8:	c915                	beqz	a0,200004dc <init_uart+0x54>
200004aa:	4088                	lw	a0,0(s1)
200004ac:	c909                	beqz	a0,200004be <init_uart+0x36>
200004ae:	e0010517          	auipc	a0,0xe0010
200004b2:	bca50513          	addi	a0,a0,-1078 # 10078 <init_uart.kLogFields>
200004b6:	4581                	li	a1,0
200004b8:	7c2000ef          	jal	ra,20000c7a <base_log_internal_dv>
200004bc:	a821                	j	200004d4 <init_uart+0x4c>
200004be:	00001597          	auipc	a1,0x1
200004c2:	46258593          	addi	a1,a1,1122 # 20001920 <__udivdi3+0x3e2>
200004c6:	840a                	mv	s0,sp
200004c8:	4651                	li	a2,20
200004ca:	8522                	mv	a0,s0
200004cc:	2ad1                	jal	200006a0 <memcpy>
200004ce:	8522                	mv	a0,s0
200004d0:	704000ef          	jal	ra,20000bd4 <base_log_internal_core>
200004d4:	6531                	lui	a0,0xc
200004d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004da:	28ad                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200004dc:	00001517          	auipc	a0,0x1
200004e0:	4b450513          	addi	a0,a0,1204 # 20001990 <kUartBaudrate>
200004e4:	4108                	lw	a0,0(a0)
200004e6:	00001597          	auipc	a1,0x1
200004ea:	49a58593          	addi	a1,a1,1178 # 20001980 <kClockFreqPeripheralHz>
200004ee:	418c                	lw	a1,0(a1)
200004f0:	c02a                	sw	a0,0(sp)
200004f2:	c22e                	sw	a1,4(sp)
200004f4:	4505                	li	a0,1
200004f6:	c42a                	sw	a0,8(sp)
200004f8:	c62a                	sw	a0,12(sp)
200004fa:	f0000517          	auipc	a0,0xf0000
200004fe:	b0e50513          	addi	a0,a0,-1266 # 10000008 <_data_end>
20000502:	858a                	mv	a1,sp
20000504:	483000ef          	jal	ra,20001186 <dif_uart_configure>
20000508:	c915                	beqz	a0,2000053c <init_uart+0xb4>
2000050a:	4088                	lw	a0,0(s1)
2000050c:	c909                	beqz	a0,2000051e <init_uart+0x96>
2000050e:	e0010517          	auipc	a0,0xe0010
20000512:	b7e50513          	addi	a0,a0,-1154 # 1008c <init_uart.kLogFields.2>
20000516:	4581                	li	a1,0
20000518:	762000ef          	jal	ra,20000c7a <base_log_internal_dv>
2000051c:	a821                	j	20000534 <init_uart+0xac>
2000051e:	00001597          	auipc	a1,0x1
20000522:	41658593          	addi	a1,a1,1046 # 20001934 <__udivdi3+0x3f6>
20000526:	840a                	mv	s0,sp
20000528:	4651                	li	a2,20
2000052a:	8522                	mv	a0,s0
2000052c:	2a95                	jal	200006a0 <memcpy>
2000052e:	8522                	mv	a0,s0
20000530:	6a4000ef          	jal	ra,20000bd4 <base_log_internal_core>
20000534:	6531                	lui	a0,0xc
20000536:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000053a:	2829                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
2000053c:	f0000517          	auipc	a0,0xf0000
20000540:	acc50513          	addi	a0,a0,-1332 # 10000008 <_data_end>
20000544:	788000ef          	jal	ra,20000ccc <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000548:	44d2                	lw	s1,20(sp)
2000054a:	4462                	lw	s0,24(sp)
2000054c:	40f2                	lw	ra,28(sp)
2000054e:	6105                	addi	sp,sp,32
20000550:	8082                	ret
	...

20000554 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000554:	1101                	addi	sp,sp,-32
20000556:	ce06                	sw	ra,28(sp)
20000558:	cc22                	sw	s0,24(sp)
2000055a:	65b1                	lui	a1,0xc
2000055c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000560:	02b50163          	beq	a0,a1,20000582 <test_status_set+0x2e>
20000564:	65a5                	lui	a1,0x9
20000566:	05b5                	addi	a1,a1,13
20000568:	02b50e63          	beq	a0,a1,200005a4 <test_status_set+0x50>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
2000056c:	00001597          	auipc	a1,0x1
20000570:	43058593          	addi	a1,a1,1072 # 2000199c <kDeviceTestStatusAddress>
20000574:	418c                	lw	a1,0(a1)
20000576:	c191                	beqz	a1,2000057a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000578:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
2000057a:	4462                	lw	s0,24(sp)
2000057c:	40f2                	lw	ra,28(sp)
2000057e:	6105                	addi	sp,sp,32
20000580:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000582:	00001517          	auipc	a0,0x1
20000586:	41e50513          	addi	a0,a0,1054 # 200019a0 <kDeviceLogBypassUartAddress>
2000058a:	4108                	lw	a0,0(a0)
2000058c:	ed0d                	bnez	a0,200005c6 <test_status_set+0x72>
2000058e:	00001597          	auipc	a1,0x1
20000592:	3ce58593          	addi	a1,a1,974 # 2000195c <__udivdi3+0x41e>
20000596:	840a                	mv	s0,sp
20000598:	4651                	li	a2,20
2000059a:	8522                	mv	a0,s0
2000059c:	2211                	jal	200006a0 <memcpy>
2000059e:	8522                	mv	a0,s0
200005a0:	2d15                	jal	20000bd4 <base_log_internal_core>
200005a2:	a80d                	j	200005d4 <test_status_set+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005a4:	00001517          	auipc	a0,0x1
200005a8:	3fc50513          	addi	a0,a0,1020 # 200019a0 <kDeviceLogBypassUartAddress>
200005ac:	4108                	lw	a0,0(a0)
200005ae:	ed0d                	bnez	a0,200005e8 <test_status_set+0x94>
200005b0:	00001597          	auipc	a1,0x1
200005b4:	39858593          	addi	a1,a1,920 # 20001948 <__udivdi3+0x40a>
200005b8:	840a                	mv	s0,sp
200005ba:	4651                	li	a2,20
200005bc:	8522                	mv	a0,s0
200005be:	20cd                	jal	200006a0 <memcpy>
200005c0:	8522                	mv	a0,s0
200005c2:	2d09                	jal	20000bd4 <base_log_internal_core>
200005c4:	a80d                	j	200005f6 <test_status_set+0xa2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200005c6:	e0010517          	auipc	a0,0xe0010
200005ca:	aee50513          	addi	a0,a0,-1298 # 100b4 <test_status_set.kLogFields.2>
200005ce:	4581                	li	a1,0
200005d0:	6aa000ef          	jal	ra,20000c7a <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005d4:	00001517          	auipc	a0,0x1
200005d8:	3c850513          	addi	a0,a0,968 # 2000199c <kDeviceTestStatusAddress>
200005dc:	4108                	lw	a0,0(a0)
200005de:	c50d                	beqz	a0,20000608 <test_status_set+0xb4>
200005e0:	65b1                	lui	a1,0xc
200005e2:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200005e6:	a005                	j	20000606 <test_status_set+0xb2>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005e8:	e0010517          	auipc	a0,0xe0010
200005ec:	ab850513          	addi	a0,a0,-1352 # 100a0 <test_status_set.kLogFields>
200005f0:	4581                	li	a1,0
200005f2:	688000ef          	jal	ra,20000c7a <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005f6:	00001517          	auipc	a0,0x1
200005fa:	3a650513          	addi	a0,a0,934 # 2000199c <kDeviceTestStatusAddress>
200005fe:	4108                	lw	a0,0(a0)
20000600:	c501                	beqz	a0,20000608 <test_status_set+0xb4>
20000602:	65a5                	lui	a1,0x9
20000604:	05b5                	addi	a1,a1,13
20000606:	c10c                	sw	a1,0(a0)
20000608:	2051                	jal	2000068c <abort>
	...

2000060c <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
2000060c:	10500073          	wfi
20000610:	8082                	ret

20000612 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000612:	1141                	addi	sp,sp,-16
20000614:	c606                	sw	ra,12(sp)
20000616:	00001597          	auipc	a1,0x1
2000061a:	36258593          	addi	a1,a1,866 # 20001978 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
2000061e:	41d0                	lw	a2,4(a1)
20000620:	4194                	lw	a3,0(a1)
20000622:	02a605b3          	mul	a1,a2,a0
20000626:	02a6b633          	mulhu	a2,a3,a0
2000062a:	95b2                	add	a1,a1,a2
2000062c:	02a68533          	mul	a0,a3,a0
20000630:	000f4637          	lui	a2,0xf4
20000634:	24060613          	addi	a2,a2,576 # f4240 <test_gateable_clocks.kLogFields.23+0xe40b0>
20000638:	4681                	li	a3,0
2000063a:	705000ef          	jal	ra,2000153e <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
2000063e:	4801                	li	a6,0
20000640:	4701                	li	a4,0

20000642 <read0>:
20000642:	b8002873          	csrr	a6,mcycleh
20000646:	b00026f3          	csrr	a3,mcycle
2000064a:	b8002773          	csrr	a4,mcycleh
2000064e:	fee81ae3          	bne	a6,a4,20000642 <read0>
20000652:	4781                	li	a5,0
20000654:	4601                	li	a2,0

20000656 <read1>:
20000656:	b80027f3          	csrr	a5,mcycleh
2000065a:	b0002773          	csrr	a4,mcycle
2000065e:	b8002673          	csrr	a2,mcycleh
20000662:	fec79ae3          	bne	a5,a2,20000656 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20000666:	00d73633          	sltu	a2,a4,a3
2000066a:	410787b3          	sub	a5,a5,a6
2000066e:	8f91                	sub	a5,a5,a2
20000670:	00b78663          	beq	a5,a1,2000067c <read1+0x26>
20000674:	00b7b733          	sltu	a4,a5,a1
20000678:	ff69                	bnez	a4,20000652 <read0+0x10>
2000067a:	a031                	j	20000686 <read1+0x30>
2000067c:	40d70633          	sub	a2,a4,a3
20000680:	00a63733          	sltu	a4,a2,a0
20000684:	f779                	bnez	a4,20000652 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
20000686:	40b2                	lw	ra,12(sp)
20000688:	0141                	addi	sp,sp,16
2000068a:	8082                	ret

2000068c <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
2000068c:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000690:	bff5                	j	2000068c <abort>
	...

20000694 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000694:	8082                	ret
	...

20000698 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20000698:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
2000069a:	8082                	ret

2000069c <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
2000069c:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
2000069e:	8082                	ret

200006a0 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200006a0:	ca11                	beqz	a2,200006b4 <memcpy+0x14>
200006a2:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200006a4:	00058703          	lb	a4,0(a1)
200006a8:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006ac:	167d                	addi	a2,a2,-1
200006ae:	0685                	addi	a3,a3,1
200006b0:	0585                	addi	a1,a1,1
200006b2:	fa6d                	bnez	a2,200006a4 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006b4:	8082                	ret

200006b6 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006b6:	c619                	beqz	a2,200006c4 <memset+0xe>
200006b8:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006ba:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006be:	167d                	addi	a2,a2,-1
200006c0:	0685                	addi	a3,a3,1
200006c2:	fe65                	bnez	a2,200006ba <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006c4:	8082                	ret

200006c6 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006c6:	ce09                	beqz	a2,200006e0 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006c8:	00054683          	lbu	a3,0(a0)
200006cc:	0005c703          	lbu	a4,0(a1)
200006d0:	00e6ea63          	bltu	a3,a4,200006e4 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006d4:	00d76b63          	bltu	a4,a3,200006ea <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006d8:	167d                	addi	a2,a2,-1
200006da:	0585                	addi	a1,a1,1
200006dc:	0505                	addi	a0,a0,1
200006de:	f66d                	bnez	a2,200006c8 <memcmp+0x2>
200006e0:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006e2:	8082                	ret
200006e4:	fd600513          	li	a0,-42
200006e8:	8082                	ret
200006ea:	02a00513          	li	a0,42
200006ee:	8082                	ret

200006f0 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006f0:	ca11                	beqz	a2,20000704 <memchr+0x14>
200006f2:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006f6:	00054683          	lbu	a3,0(a0)
200006fa:	00b68663          	beq	a3,a1,20000706 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
200006fe:	167d                	addi	a2,a2,-1
20000700:	0505                	addi	a0,a0,1
20000702:	fa75                	bnez	a2,200006f6 <memchr+0x6>
20000704:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20000706:	8082                	ret

20000708 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000708:	ce09                	beqz	a2,20000722 <memrchr+0x1a>
2000070a:	fff50693          	addi	a3,a0,-1
2000070e:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000712:	00c68733          	add	a4,a3,a2
20000716:	00074703          	lbu	a4,0(a4)
2000071a:	00b70663          	beq	a4,a1,20000726 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
2000071e:	167d                	addi	a2,a2,-1
20000720:	fa6d                	bnez	a2,20000712 <memrchr+0xa>
20000722:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000724:	8082                	ret
20000726:	9532                	add	a0,a0,a2
20000728:	157d                	addi	a0,a0,-1
2000072a:	8082                	ret

2000072c <test_hintable_clocks>:
test_hintable_clocks():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:52

/**
 * Test that all 'hintable' clocks, indirectly controlled by software,
 * can have their hint toggled and status checked.
 */
void test_hintable_clocks(const dif_clkmgr_t *clkmgr) {
2000072c:	7119                	addi	sp,sp,-128
2000072e:	de86                	sw	ra,124(sp)
20000730:	dca2                	sw	s0,120(sp)
20000732:	daa6                	sw	s1,116(sp)
20000734:	d8ca                	sw	s2,112(sp)
20000736:	d6ce                	sw	s3,108(sp)
20000738:	d4d2                	sw	s4,104(sp)
2000073a:	d2d6                	sw	s5,100(sp)
2000073c:	d0da                	sw	s6,96(sp)
2000073e:	cede                	sw	s7,92(sp)
20000740:	cce2                	sw	s8,88(sp)
20000742:	cae6                	sw	s9,84(sp)
20000744:	c8ea                	sw	s10,80(sp)
20000746:	c6ee                	sw	s11,76(sp)
20000748:	842a                	mv	s0,a0
2000074a:	4581                	li	a1,0
2000074c:	00001517          	auipc	a0,0x1
20000750:	25450513          	addi	a0,a0,596 # 200019a0 <kDeviceLogBypassUartAddress>
20000754:	00052b03          	lw	s6,0(a0)
20000758:	00001517          	auipc	a0,0x1
2000075c:	69450513          	addi	a0,a0,1684 # 20001dec <__clz_tab+0x308>
20000760:	c42a                	sw	a0,8(sp)
20000762:	04b10a13          	addi	s4,sp,75
20000766:	02f10913          	addi	s2,sp,47
2000076a:	00001517          	auipc	a0,0x1
2000076e:	29e50513          	addi	a0,a0,670 # 20001a08 <kDeviceLogBypassUartAddress+0x68>
20000772:	c82a                	sw	a0,16(sp)
20000774:	03010a93          	addi	s5,sp,48
20000778:	6531                	lui	a0,0xc
2000077a:	aad50493          	addi	s1,a0,-1363 # baad <_stack_size+0x9aad>
2000077e:	e0010517          	auipc	a0,0xe0010
20000782:	9ae50513          	addi	a0,a0,-1618 # 1012c <test_hintable_clocks.kLogFields.13>
20000786:	cc2a                	sw	a0,24(sp)
20000788:	00001517          	auipc	a0,0x1
2000078c:	26c50513          	addi	a0,a0,620 # 200019f4 <kDeviceLogBypassUartAddress+0x54>
20000790:	ca2a                	sw	a0,20(sp)
20000792:	e0010517          	auipc	a0,0xe0010
20000796:	98650513          	addi	a0,a0,-1658 # 10118 <test_hintable_clocks.kLogFields.10>
2000079a:	d42a                	sw	a0,40(sp)
2000079c:	00001517          	auipc	a0,0x1
200007a0:	24450513          	addi	a0,a0,580 # 200019e0 <kDeviceLogBypassUartAddress+0x40>
200007a4:	ce2a                	sw	a0,28(sp)
200007a6:	e0010d17          	auipc	s10,0xe0010
200007aa:	95ed0d13          	addi	s10,s10,-1698 # 10104 <test_hintable_clocks.kLogFields.7>
200007ae:	00001517          	auipc	a0,0x1
200007b2:	21e50513          	addi	a0,a0,542 # 200019cc <kDeviceLogBypassUartAddress+0x2c>
200007b6:	d22a                	sw	a0,36(sp)
200007b8:	e0010997          	auipc	s3,0xe0010
200007bc:	93898993          	addi	s3,s3,-1736 # 100f0 <test_hintable_clocks.kLogFields.5>
200007c0:	00001517          	auipc	a0,0x1
200007c4:	1f850513          	addi	a0,a0,504 # 200019b8 <kDeviceLogBypassUartAddress+0x18>
200007c8:	d02a                	sw	a0,32(sp)
200007ca:	e0010b97          	auipc	s7,0xe0010
200007ce:	912b8b93          	addi	s7,s7,-1774 # 100dc <test_hintable_clocks.kLogFields.2>
200007d2:	00001517          	auipc	a0,0x1
200007d6:	1d250513          	addi	a0,a0,466 # 200019a4 <kDeviceLogBypassUartAddress+0x4>
200007da:	c02a                	sw	a0,0(sp)
200007dc:	e0010517          	auipc	a0,0xe0010
200007e0:	8ec50513          	addi	a0,a0,-1812 # 100c8 <test_hintable_clocks.kLogFields>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:60
      kTopEarlgreyHintableClocksMainHmac,
      kTopEarlgreyHintableClocksMainKmac,
      kTopEarlgreyHintableClocksMainOtbn,
  };

  for (int i = 0; i < ARRAYSIZE(clocks); ++i) {
200007e4:	c22a                	sw	a0,4(sp)
200007e6:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:61
    dif_clkmgr_hintable_clock_t clock = clocks[i];
200007e8:	00259513          	slli	a0,a1,0x2
200007ec:	45a2                	lw	a1,8(sp)
200007ee:	952e                	add	a0,a0,a1
200007f0:	00052c83          	lw	s9,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:67

    // Get the initial state of the hint for the clock The clock hint might be
    // enabled or disabled depending on reset behavior - either is fine for the
    // purposes of this test.
    bool enabled;
    CHECK(dif_clkmgr_hintable_clock_get_hint(clkmgr, clock, &enabled) ==
200007f4:	8522                	mv	a0,s0
200007f6:	85e6                	mv	a1,s9
200007f8:	8652                	mv	a2,s4
200007fa:	2e4d                	jal	20000bac <dif_clkmgr_hintable_clock_get_hint>
200007fc:	cd19                	beqz	a0,2000081a <test_hintable_clocks+0xee>
200007fe:	000b0663          	beqz	s6,2000080a <test_hintable_clocks+0xde>
20000802:	4512                	lw	a0,4(sp)
20000804:	4581                	li	a1,0
20000806:	2995                	jal	20000c7a <base_log_internal_dv>
20000808:	a039                	j	20000816 <test_hintable_clocks+0xea>
2000080a:	4651                	li	a2,20
2000080c:	8556                	mv	a0,s5
2000080e:	4582                	lw	a1,0(sp)
20000810:	3d41                	jal	200006a0 <memcpy>
20000812:	8556                	mv	a0,s5
20000814:	26c1                	jal	20000bd4 <base_log_internal_core>
20000816:	8526                	mv	a0,s1
20000818:	3b35                	jal	20000554 <test_status_set>
2000081a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:72
          kDifClkmgrOk);

    // Toggle the hint twice so that it ends up in its original state.
    for (int j = 0; j < 2; ++j) {
      bool expected = !enabled;
2000081c:	04b14d83          	lbu	s11,75(sp)
20000820:	8c2a                	mv	s8,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:73
      CHECK(dif_clkmgr_hintable_clock_set_hint(
20000822:	8522                	mv	a0,s0
20000824:	85e6                	mv	a1,s9
20000826:	866e                	mv	a2,s11
20000828:	26a9                	jal	20000b72 <dif_clkmgr_hintable_clock_set_hint>
2000082a:	cd19                	beqz	a0,20000848 <test_hintable_clocks+0x11c>
2000082c:	000b0663          	beqz	s6,20000838 <test_hintable_clocks+0x10c>
20000830:	855e                	mv	a0,s7
20000832:	4581                	li	a1,0
20000834:	2199                	jal	20000c7a <base_log_internal_dv>
20000836:	a039                	j	20000844 <test_hintable_clocks+0x118>
20000838:	4651                	li	a2,20
2000083a:	8556                	mv	a0,s5
2000083c:	5582                	lw	a1,32(sp)
2000083e:	358d                	jal	200006a0 <memcpy>
20000840:	8556                	mv	a0,s5
20000842:	2e49                	jal	20000bd4 <base_log_internal_core>
20000844:	8526                	mv	a0,s1
20000846:	3339                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:77
                clkmgr, clock,
                expected ? kDifClkmgrToggleEnabled
                         : kDifClkmgrToggleDisabled) == kDifClkmgrOk);
      CHECK(dif_clkmgr_hintable_clock_get_hint(clkmgr, clock, &enabled) ==
20000848:	8522                	mv	a0,s0
2000084a:	85e6                	mv	a1,s9
2000084c:	8652                	mv	a2,s4
2000084e:	2eb9                	jal	20000bac <dif_clkmgr_hintable_clock_get_hint>
20000850:	cd19                	beqz	a0,2000086e <test_hintable_clocks+0x142>
20000852:	000b0663          	beqz	s6,2000085e <test_hintable_clocks+0x132>
20000856:	854e                	mv	a0,s3
20000858:	4581                	li	a1,0
2000085a:	2105                	jal	20000c7a <base_log_internal_dv>
2000085c:	a039                	j	2000086a <test_hintable_clocks+0x13e>
2000085e:	4651                	li	a2,20
20000860:	8556                	mv	a0,s5
20000862:	5592                	lw	a1,36(sp)
20000864:	3d35                	jal	200006a0 <memcpy>
20000866:	8556                	mv	a0,s5
20000868:	26b5                	jal	20000bd4 <base_log_internal_core>
2000086a:	8526                	mv	a0,s1
2000086c:	31e5                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:79
            kDifClkmgrOk);
      CHECK(enabled == expected);
2000086e:	04b14503          	lbu	a0,75(sp)
20000872:	001dc593          	xori	a1,s11,1
20000876:	02b50263          	beq	a0,a1,2000089a <test_hintable_clocks+0x16e>
2000087a:	000b0663          	beqz	s6,20000886 <test_hintable_clocks+0x15a>
2000087e:	856a                	mv	a0,s10
20000880:	4581                	li	a1,0
20000882:	2ee5                	jal	20000c7a <base_log_internal_dv>
20000884:	a039                	j	20000892 <test_hintable_clocks+0x166>
20000886:	4651                	li	a2,20
20000888:	8556                	mv	a0,s5
2000088a:	45f2                	lw	a1,28(sp)
2000088c:	3d11                	jal	200006a0 <memcpy>
2000088e:	8556                	mv	a0,s5
20000890:	2691                	jal	20000bd4 <base_log_internal_core>
20000892:	8526                	mv	a0,s1
20000894:	31c1                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:82

      // If the clock hint is enabled then the clock should always be enabled.
      if (enabled) {
20000896:	04b14503          	lbu	a0,75(sp)
2000089a:	c929                	beqz	a0,200008ec <test_hintable_clocks+0x1c0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:83
        bool status = false;
2000089c:	020107a3          	sb	zero,47(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:84
        CHECK(dif_clkmgr_hintable_clock_get_enabled(clkmgr, clock, &status) ==
200008a0:	8522                	mv	a0,s0
200008a2:	85e6                	mv	a1,s9
200008a4:	864a                	mv	a2,s2
200008a6:	245d                	jal	20000b4c <dif_clkmgr_hintable_clock_get_enabled>
200008a8:	cd19                	beqz	a0,200008c6 <test_hintable_clocks+0x19a>
200008aa:	000b0663          	beqz	s6,200008b6 <test_hintable_clocks+0x18a>
200008ae:	5522                	lw	a0,40(sp)
200008b0:	4581                	li	a1,0
200008b2:	26e1                	jal	20000c7a <base_log_internal_dv>
200008b4:	a039                	j	200008c2 <test_hintable_clocks+0x196>
200008b6:	4651                	li	a2,20
200008b8:	8556                	mv	a0,s5
200008ba:	45d2                	lw	a1,20(sp)
200008bc:	33d5                	jal	200006a0 <memcpy>
200008be:	8556                	mv	a0,s5
200008c0:	2e11                	jal	20000bd4 <base_log_internal_core>
200008c2:	8526                	mv	a0,s1
200008c4:	3941                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:86
              kDifClkmgrOk);
        CHECK(status, "clock %u hint is enabled but status is disabled", clock);
200008c6:	02f14503          	lbu	a0,47(sp)
200008ca:	e10d                	bnez	a0,200008ec <test_hintable_clocks+0x1c0>
200008cc:	000b0763          	beqz	s6,200008da <test_hintable_clocks+0x1ae>
200008d0:	4585                	li	a1,1
200008d2:	4562                	lw	a0,24(sp)
200008d4:	8666                	mv	a2,s9
200008d6:	2655                	jal	20000c7a <base_log_internal_dv>
200008d8:	a801                	j	200008e8 <test_hintable_clocks+0x1bc>
200008da:	4651                	li	a2,20
200008dc:	8556                	mv	a0,s5
200008de:	45c2                	lw	a1,16(sp)
200008e0:	33c1                	jal	200006a0 <memcpy>
200008e2:	8556                	mv	a0,s5
200008e4:	85e6                	mv	a1,s9
200008e6:	24fd                	jal	20000bd4 <base_log_internal_core>
200008e8:	8526                	mv	a0,s1
200008ea:	31ad                	jal	20000554 <test_status_set>
200008ec:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:71
    for (int j = 0; j < 2; ++j) {
200008ee:	f20c07e3          	beqz	s8,2000081c <test_hintable_clocks+0xf0>
200008f2:	45b2                	lw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:60
  for (int i = 0; i < ARRAYSIZE(clocks); ++i) {
200008f4:	0585                	addi	a1,a1,1
200008f6:	4511                	li	a0,4
200008f8:	eea597e3          	bne	a1,a0,200007e6 <test_hintable_clocks+0xba>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:90
      }
    }
  }
}
200008fc:	4db6                	lw	s11,76(sp)
200008fe:	4d46                	lw	s10,80(sp)
20000900:	4cd6                	lw	s9,84(sp)
20000902:	4c66                	lw	s8,88(sp)
20000904:	4bf6                	lw	s7,92(sp)
20000906:	5b06                	lw	s6,96(sp)
20000908:	5a96                	lw	s5,100(sp)
2000090a:	5a26                	lw	s4,104(sp)
2000090c:	59b6                	lw	s3,108(sp)
2000090e:	5946                	lw	s2,112(sp)
20000910:	54d6                	lw	s1,116(sp)
20000912:	5466                	lw	s0,120(sp)
20000914:	50f6                	lw	ra,124(sp)
20000916:	6109                	addi	sp,sp,128
20000918:	8082                	ret

2000091a <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:92

bool test_main() {
2000091a:	7119                	addi	sp,sp,-128
2000091c:	de86                	sw	ra,124(sp)
2000091e:	dca2                	sw	s0,120(sp)
20000920:	daa6                	sw	s1,116(sp)
20000922:	d8ca                	sw	s2,112(sp)
20000924:	d6ce                	sw	s3,108(sp)
20000926:	d4d2                	sw	s4,104(sp)
20000928:	d2d6                	sw	s5,100(sp)
2000092a:	d0da                	sw	s6,96(sp)
2000092c:	cede                	sw	s7,92(sp)
2000092e:	cce2                	sw	s8,88(sp)
20000930:	cae6                	sw	s9,84(sp)
20000932:	c8ea                	sw	s10,80(sp)
20000934:	c6ee                	sw	s11,76(sp)
20000936:	40420537          	lui	a0,0x40420
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:100
      .last_gateable_clock = kTopEarlgreyGateableClocksLast,
      .last_hintable_clock = kTopEarlgreyHintableClocksLast,
  };

  dif_clkmgr_t clkmgr;
  CHECK(dif_clkmgr_init(params, &clkmgr) == kDifClkmgrOk);
2000093a:	d82a                	sw	a0,48(sp)
2000093c:	450d                	li	a0,3
2000093e:	da2a                	sw	a0,52(sp)
20000940:	dc2a                	sw	a0,56(sp)
20000942:	1808                	addi	a0,sp,48
20000944:	100c                	addi	a1,sp,32
20000946:	2249                	jal	20000ac8 <dif_clkmgr_init>
20000948:	00001597          	auipc	a1,0x1
2000094c:	05858593          	addi	a1,a1,88 # 200019a0 <kDeviceLogBypassUartAddress>
20000950:	0005a903          	lw	s2,0(a1)
20000954:	c905                	beqz	a0,20000984 <test_main+0x6a>
20000956:	00090963          	beqz	s2,20000968 <test_main+0x4e>
2000095a:	e000f517          	auipc	a0,0xe000f
2000095e:	7e650513          	addi	a0,a0,2022 # 10140 <test_main.kLogFields>
20000962:	4581                	li	a1,0
20000964:	2e19                	jal	20000c7a <base_log_internal_dv>
20000966:	a819                	j	2000097c <test_main+0x62>
20000968:	00001597          	auipc	a1,0x1
2000096c:	0b458593          	addi	a1,a1,180 # 20001a1c <kDeviceLogBypassUartAddress+0x7c>
20000970:	1800                	addi	s0,sp,48
20000972:	4651                	li	a2,20
20000974:	8522                	mv	a0,s0
20000976:	332d                	jal	200006a0 <memcpy>
20000978:	8522                	mv	a0,s0
2000097a:	2ca9                	jal	20000bd4 <base_log_internal_core>
2000097c:	6531                	lui	a0,0xc
2000097e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000982:	3ec9                	jal	20000554 <test_status_set>
20000984:	4501                	li	a0,0
20000986:	00001597          	auipc	a1,0x1
2000098a:	76a58593          	addi	a1,a1,1898 # 200020f0 <__clz_tab+0x60c>
2000098e:	c82e                	sw	a1,16(sp)
20000990:	1000                	addi	s0,sp,32
20000992:	04b10993          	addi	s3,sp,75
20000996:	00001597          	auipc	a1,0x1
2000099a:	0da58593          	addi	a1,a1,218 # 20001a70 <kTestConfig+0x40>
2000099e:	cc2e                	sw	a1,24(sp)
200009a0:	03010a13          	addi	s4,sp,48
200009a4:	65b1                	lui	a1,0xc
200009a6:	aad58493          	addi	s1,a1,-1363 # baad <_stack_size+0x9aad>
200009aa:	e000fa97          	auipc	s5,0xe000f
200009ae:	7e6a8a93          	addi	s5,s5,2022 # 10190 <test_gateable_clocks.kLogFields.23>
200009b2:	00001597          	auipc	a1,0x1
200009b6:	0aa58593          	addi	a1,a1,170 # 20001a5c <kTestConfig+0x2c>
200009ba:	ce2e                	sw	a1,28(sp)
200009bc:	e000fb97          	auipc	s7,0xe000f
200009c0:	7c0b8b93          	addi	s7,s7,1984 # 1017c <test_gateable_clocks.kLogFields.21>
200009c4:	00001c17          	auipc	s8,0x1
200009c8:	084c0c13          	addi	s8,s8,132 # 20001a48 <kTestConfig+0x18>
200009cc:	e000fc97          	auipc	s9,0xe000f
200009d0:	79cc8c93          	addi	s9,s9,1948 # 10168 <test_gateable_clocks.kLogFields.18>
200009d4:	00001597          	auipc	a1,0x1
200009d8:	06058593          	addi	a1,a1,96 # 20001a34 <kTestConfig+0x4>
200009dc:	c42e                	sw	a1,8(sp)
200009de:	e000f597          	auipc	a1,0xe000f
200009e2:	77658593          	addi	a1,a1,1910 # 10154 <test_gateable_clocks.kLogFields>
200009e6:	c62e                	sw	a1,12(sp)
200009e8:	ca2a                	sw	a0,20(sp)
test_gateable_clocks():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:25
    dif_clkmgr_gateable_clock_t clock = clocks[i];
200009ea:	050a                	slli	a0,a0,0x2
200009ec:	45c2                	lw	a1,16(sp)
200009ee:	952e                	add	a0,a0,a1
200009f0:	00052d03          	lw	s10,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:31
    CHECK(dif_clkmgr_gateable_clock_get_enabled(clkmgr, clock, &enabled) ==
200009f4:	8522                	mv	a0,s0
200009f6:	85ea                	mv	a1,s10
200009f8:	864e                	mv	a2,s3
200009fa:	28cd                	jal	20000aec <dif_clkmgr_gateable_clock_get_enabled>
200009fc:	cd19                	beqz	a0,20000a1a <test_main+0x100>
200009fe:	00090663          	beqz	s2,20000a0a <test_main+0xf0>
20000a02:	4532                	lw	a0,12(sp)
20000a04:	4581                	li	a1,0
20000a06:	2c95                	jal	20000c7a <base_log_internal_dv>
20000a08:	a039                	j	20000a16 <test_main+0xfc>
20000a0a:	4651                	li	a2,20
20000a0c:	8552                	mv	a0,s4
20000a0e:	45a2                	lw	a1,8(sp)
20000a10:	3941                	jal	200006a0 <memcpy>
20000a12:	8552                	mv	a0,s4
20000a14:	22c1                	jal	20000bd4 <base_log_internal_core>
20000a16:	8526                	mv	a0,s1
20000a18:	3e35                	jal	20000554 <test_status_set>
20000a1a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:36
      bool expected = !enabled;
20000a1c:	04b14d83          	lbu	s11,75(sp)
20000a20:	8b2a                	mv	s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:37
      CHECK(dif_clkmgr_gateable_clock_set_enabled(
20000a22:	8522                	mv	a0,s0
20000a24:	85ea                	mv	a1,s10
20000a26:	866e                	mv	a2,s11
20000a28:	20ed                	jal	20000b12 <dif_clkmgr_gateable_clock_set_enabled>
20000a2a:	cd19                	beqz	a0,20000a48 <test_main+0x12e>
20000a2c:	00090663          	beqz	s2,20000a38 <test_main+0x11e>
20000a30:	8566                	mv	a0,s9
20000a32:	4581                	li	a1,0
20000a34:	2499                	jal	20000c7a <base_log_internal_dv>
20000a36:	a039                	j	20000a44 <test_main+0x12a>
20000a38:	4651                	li	a2,20
20000a3a:	8552                	mv	a0,s4
20000a3c:	85e2                	mv	a1,s8
20000a3e:	318d                	jal	200006a0 <memcpy>
20000a40:	8552                	mv	a0,s4
20000a42:	2a49                	jal	20000bd4 <base_log_internal_core>
20000a44:	8526                	mv	a0,s1
20000a46:	3639                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:41
      CHECK(dif_clkmgr_gateable_clock_get_enabled(clkmgr, clock, &enabled) ==
20000a48:	8522                	mv	a0,s0
20000a4a:	85ea                	mv	a1,s10
20000a4c:	864e                	mv	a2,s3
20000a4e:	2879                	jal	20000aec <dif_clkmgr_gateable_clock_get_enabled>
20000a50:	cd19                	beqz	a0,20000a6e <test_main+0x154>
20000a52:	00090663          	beqz	s2,20000a5e <test_main+0x144>
20000a56:	855e                	mv	a0,s7
20000a58:	4581                	li	a1,0
20000a5a:	2405                	jal	20000c7a <base_log_internal_dv>
20000a5c:	a039                	j	20000a6a <test_main+0x150>
20000a5e:	4651                	li	a2,20
20000a60:	8552                	mv	a0,s4
20000a62:	45f2                	lw	a1,28(sp)
20000a64:	3935                	jal	200006a0 <memcpy>
20000a66:	8552                	mv	a0,s4
20000a68:	22b5                	jal	20000bd4 <base_log_internal_core>
20000a6a:	8526                	mv	a0,s1
20000a6c:	34e5                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:43
      CHECK(enabled == expected);
20000a6e:	04b14503          	lbu	a0,75(sp)
20000a72:	001dc593          	xori	a1,s11,1
20000a76:	02b50063          	beq	a0,a1,20000a96 <test_main+0x17c>
20000a7a:	00090663          	beqz	s2,20000a86 <test_main+0x16c>
20000a7e:	8556                	mv	a0,s5
20000a80:	4581                	li	a1,0
20000a82:	2ae5                	jal	20000c7a <base_log_internal_dv>
20000a84:	a039                	j	20000a92 <test_main+0x178>
20000a86:	4651                	li	a2,20
20000a88:	8552                	mv	a0,s4
20000a8a:	45e2                	lw	a1,24(sp)
20000a8c:	3911                	jal	200006a0 <memcpy>
20000a8e:	8552                	mv	a0,s4
20000a90:	2291                	jal	20000bd4 <base_log_internal_core>
20000a92:	8526                	mv	a0,s1
20000a94:	34c1                	jal	20000554 <test_status_set>
20000a96:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:35
    for (int j = 0; j < 2; ++j) {
20000a98:	f80b02e3          	beqz	s6,20000a1c <test_main+0x102>
20000a9c:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:24
  for (int i = 0; i < ARRAYSIZE(clocks); ++i) {
20000a9e:	45d2                	lw	a1,20(sp)
20000aa0:	f40584e3          	beqz	a1,200009e8 <test_main+0xce>
20000aa4:	1008                	addi	a0,sp,32
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:102
  test_gateable_clocks(&clkmgr);
  test_hintable_clocks(&clkmgr);
20000aa6:	3159                	jal	2000072c <test_hintable_clocks>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_clkmgr_smoketest.c:104

  return true;
20000aa8:	4505                	li	a0,1
20000aaa:	4db6                	lw	s11,76(sp)
20000aac:	4d46                	lw	s10,80(sp)
20000aae:	4cd6                	lw	s9,84(sp)
20000ab0:	4c66                	lw	s8,88(sp)
20000ab2:	4bf6                	lw	s7,92(sp)
20000ab4:	5b06                	lw	s6,96(sp)
20000ab6:	5a96                	lw	s5,100(sp)
20000ab8:	5a26                	lw	s4,104(sp)
20000aba:	59b6                	lw	s3,108(sp)
20000abc:	5946                	lw	s2,112(sp)
20000abe:	54d6                	lw	s1,116(sp)
20000ac0:	5466                	lw	s0,120(sp)
20000ac2:	50f6                	lw	ra,124(sp)
20000ac4:	6109                	addi	sp,sp,128
20000ac6:	8082                	ret

20000ac8 <dif_clkmgr_init>:
dif_clkmgr_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:30
  return (clock <= params.last_hintable_clock) &&
         (params.last_hintable_clock < CLKMGR_PARAM_REG_WIDTH);
}

dif_clkmgr_result_t dif_clkmgr_init(dif_clkmgr_params_t params,
                                    dif_clkmgr_t *handle) {
20000ac8:	862a                	mv	a2,a0
20000aca:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:31
  if (handle == NULL) {
20000acc:	cd99                	beqz	a1,20000aea <dif_clkmgr_init+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:38
  }

  // TODO: For the moment, `last_hintable_clock` and `last_gateable_clock` has
  // to be less than 32, as we only support one register of bits for each.
  // https://github.com/lowRISC/opentitan/issues/4201
  if (params.last_gateable_clock >= CLKMGR_PARAM_REG_WIDTH ||
20000ace:	4258                	lw	a4,4(a2)
20000ad0:	46fd                	li	a3,31
20000ad2:	00e6ec63          	bltu	a3,a4,20000aea <dif_clkmgr_init+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:39
      params.last_hintable_clock >= CLKMGR_PARAM_REG_WIDTH) {
20000ad6:	4618                	lw	a4,8(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:38
  if (params.last_gateable_clock >= CLKMGR_PARAM_REG_WIDTH ||
20000ad8:	00e6e963          	bltu	a3,a4,20000aea <dif_clkmgr_init+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:43
    return kDifClkmgrBadArg;
  }

  handle->params = params;
20000adc:	4608                	lw	a0,8(a2)
20000ade:	c588                	sw	a0,8(a1)
20000ae0:	4248                	lw	a0,4(a2)
20000ae2:	c1c8                	sw	a0,4(a1)
20000ae4:	4210                	lw	a2,0(a2)
20000ae6:	4501                	li	a0,0
20000ae8:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:45
  return kDifClkmgrOk;
}
20000aea:	8082                	ret

20000aec <dif_clkmgr_gateable_clock_get_enabled>:
dif_clkmgr_gateable_clock_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:49

dif_clkmgr_result_t dif_clkmgr_gateable_clock_get_enabled(
    const dif_clkmgr_t *handle, dif_clkmgr_gateable_clock_t clock,
    bool *is_enabled) {
20000aec:	86aa                	mv	a3,a0
20000aee:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:50
  if (handle == NULL || is_enabled == NULL ||
20000af0:	c285                	beqz	a3,20000b10 <dif_clkmgr_gateable_clock_get_enabled+0x24>
20000af2:	ce19                	beqz	a2,20000b10 <dif_clkmgr_gateable_clock_get_enabled+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:51
      !clkmgr_valid_gateable_clock(handle->params, clock)) {
20000af4:	42d8                	lw	a4,4(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:50
  if (handle == NULL || is_enabled == NULL ||
20000af6:	00b76d63          	bltu	a4,a1,20000b10 <dif_clkmgr_gateable_clock_get_enabled+0x24>
20000afa:	47fd                	li	a5,31
20000afc:	00e7ea63          	bltu	a5,a4,20000b10 <dif_clkmgr_gateable_clock_get_enabled+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:55
    return kDifClkmgrBadArg;
  }

  uint32_t clk_enables_val = mmio_region_read32(handle->params.base_addr,
20000b00:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b02:	4554                	lw	a3,12(a0)
20000b04:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b06:	00b6d5b3          	srl	a1,a3,a1
20000b0a:	8985                	andi	a1,a1,1
dif_clkmgr_gateable_clock_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:57
                                                CLKMGR_CLK_ENABLES_REG_OFFSET);
  *is_enabled = bitfield_bit32_read(clk_enables_val, clock);
20000b0c:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:60

  return kDifClkmgrOk;
}
20000b10:	8082                	ret

20000b12 <dif_clkmgr_gateable_clock_set_enabled>:
dif_clkmgr_gateable_clock_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:64

dif_clkmgr_result_t dif_clkmgr_gateable_clock_set_enabled(
    const dif_clkmgr_t *handle, dif_clkmgr_gateable_clock_t clock,
    dif_clkmgr_toggle_t new_state) {
20000b12:	86aa                	mv	a3,a0
20000b14:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:65
  if (handle == NULL || !clkmgr_valid_gateable_clock(handle->params, clock)) {
20000b16:	ca95                	beqz	a3,20000b4a <dif_clkmgr_gateable_clock_set_enabled+0x38>
20000b18:	42d8                	lw	a4,4(a3)
20000b1a:	02b76863          	bltu	a4,a1,20000b4a <dif_clkmgr_gateable_clock_set_enabled+0x38>
20000b1e:	47fd                	li	a5,31
20000b20:	02e7e563          	bltu	a5,a4,20000b4a <dif_clkmgr_gateable_clock_set_enabled+0x38>
20000b24:	4705                	li	a4,1
20000b26:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:70
    return kDifClkmgrBadArg;
  }

  bool new_clk_enables_bit;
  switch (new_state) {
20000b28:	c609                	beqz	a2,20000b32 <dif_clkmgr_gateable_clock_set_enabled+0x20>
20000b2a:	4785                	li	a5,1
20000b2c:	00f61f63          	bne	a2,a5,20000b4a <dif_clkmgr_gateable_clock_set_enabled+0x38>
20000b30:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:81
      break;
    default:
      return kDifClkmgrBadArg;
  }

  uint32_t clk_enables_val = mmio_region_read32(handle->params.base_addr,
20000b32:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b34:	4654                	lw	a3,12(a2)
20000b36:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b38:	00b71733          	sll	a4,a4,a1
20000b3c:	fff74713          	not	a4,a4
20000b40:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000b42:	00b795b3          	sll	a1,a5,a1
20000b46:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b48:	c64c                	sw	a1,12(a2)
dif_clkmgr_gateable_clock_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:89
      bitfield_bit32_write(clk_enables_val, clock, new_clk_enables_bit);
  mmio_region_write32(handle->params.base_addr, CLKMGR_CLK_ENABLES_REG_OFFSET,
                      clk_enables_val);

  return kDifClkmgrOk;
}
20000b4a:	8082                	ret

20000b4c <dif_clkmgr_hintable_clock_get_enabled>:
dif_clkmgr_hintable_clock_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:93

dif_clkmgr_result_t dif_clkmgr_hintable_clock_get_enabled(
    const dif_clkmgr_t *handle, dif_clkmgr_hintable_clock_t clock,
    bool *is_enabled) {
20000b4c:	86aa                	mv	a3,a0
20000b4e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:94
  if (handle == NULL || is_enabled == NULL ||
20000b50:	c285                	beqz	a3,20000b70 <dif_clkmgr_hintable_clock_get_enabled+0x24>
20000b52:	ce19                	beqz	a2,20000b70 <dif_clkmgr_hintable_clock_get_enabled+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:95
      !clkmgr_valid_hintable_clock(handle->params, clock)) {
20000b54:	4698                	lw	a4,8(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:94
  if (handle == NULL || is_enabled == NULL ||
20000b56:	00b76d63          	bltu	a4,a1,20000b70 <dif_clkmgr_hintable_clock_get_enabled+0x24>
20000b5a:	47fd                	li	a5,31
20000b5c:	00e7ea63          	bltu	a5,a4,20000b70 <dif_clkmgr_hintable_clock_get_enabled+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:99
    return kDifClkmgrBadArg;
  }

  uint32_t clk_hints_val = mmio_region_read32(
20000b60:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b62:	4954                	lw	a3,20(a0)
20000b64:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b66:	00b6d5b3          	srl	a1,a3,a1
20000b6a:	8985                	andi	a1,a1,1
dif_clkmgr_hintable_clock_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:101
      handle->params.base_addr, CLKMGR_CLK_HINTS_STATUS_REG_OFFSET);
  *is_enabled = bitfield_bit32_read(clk_hints_val, clock);
20000b6c:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:104

  return kDifClkmgrOk;
}
20000b70:	8082                	ret

20000b72 <dif_clkmgr_hintable_clock_set_hint>:
dif_clkmgr_hintable_clock_set_hint():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:108

dif_clkmgr_result_t dif_clkmgr_hintable_clock_set_hint(
    const dif_clkmgr_t *handle, dif_clkmgr_hintable_clock_t clock,
    dif_clkmgr_toggle_t new_state) {
20000b72:	86aa                	mv	a3,a0
20000b74:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:109
  if (handle == NULL || !clkmgr_valid_hintable_clock(handle->params, clock)) {
20000b76:	ca95                	beqz	a3,20000baa <dif_clkmgr_hintable_clock_set_hint+0x38>
20000b78:	4698                	lw	a4,8(a3)
20000b7a:	02b76863          	bltu	a4,a1,20000baa <dif_clkmgr_hintable_clock_set_hint+0x38>
20000b7e:	47fd                	li	a5,31
20000b80:	02e7e563          	bltu	a5,a4,20000baa <dif_clkmgr_hintable_clock_set_hint+0x38>
20000b84:	4705                	li	a4,1
20000b86:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:114
    return kDifClkmgrBadArg;
  }

  bool new_clk_hints_bit;
  switch (new_state) {
20000b88:	c609                	beqz	a2,20000b92 <dif_clkmgr_hintable_clock_set_hint+0x20>
20000b8a:	4785                	li	a5,1
20000b8c:	00f61f63          	bne	a2,a5,20000baa <dif_clkmgr_hintable_clock_set_hint+0x38>
20000b90:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:126
    default:
      return kDifClkmgrBadArg;
  }

  uint32_t clk_hints_val =
      mmio_region_read32(handle->params.base_addr, CLKMGR_CLK_HINTS_REG_OFFSET);
20000b92:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b94:	4a14                	lw	a3,16(a2)
20000b96:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b98:	00b71733          	sll	a4,a4,a1
20000b9c:	fff74713          	not	a4,a4
20000ba0:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000ba2:	00b795b3          	sll	a1,a5,a1
20000ba6:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ba8:	ca0c                	sw	a1,16(a2)
dif_clkmgr_hintable_clock_set_hint():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:132
  clk_hints_val = bitfield_bit32_write(clk_hints_val, clock, new_clk_hints_bit);
  mmio_region_write32(handle->params.base_addr, CLKMGR_CLK_HINTS_REG_OFFSET,
                      clk_hints_val);

  return kDifClkmgrOk;
}
20000baa:	8082                	ret

20000bac <dif_clkmgr_hintable_clock_get_hint>:
dif_clkmgr_hintable_clock_get_hint():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:136

dif_clkmgr_result_t dif_clkmgr_hintable_clock_get_hint(
    const dif_clkmgr_t *handle, dif_clkmgr_hintable_clock_t clock,
    bool *hinted_is_enabled) {
20000bac:	86aa                	mv	a3,a0
20000bae:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:137
  if (handle == NULL || hinted_is_enabled == NULL ||
20000bb0:	c285                	beqz	a3,20000bd0 <dif_clkmgr_hintable_clock_get_hint+0x24>
20000bb2:	ce19                	beqz	a2,20000bd0 <dif_clkmgr_hintable_clock_get_hint+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:138
      !clkmgr_valid_hintable_clock(handle->params, clock)) {
20000bb4:	4698                	lw	a4,8(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:137
  if (handle == NULL || hinted_is_enabled == NULL ||
20000bb6:	00b76d63          	bltu	a4,a1,20000bd0 <dif_clkmgr_hintable_clock_get_hint+0x24>
20000bba:	47fd                	li	a5,31
20000bbc:	00e7ea63          	bltu	a5,a4,20000bd0 <dif_clkmgr_hintable_clock_get_hint+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:143
    return kDifClkmgrBadArg;
  }

  uint32_t clk_hints_val =
      mmio_region_read32(handle->params.base_addr, CLKMGR_CLK_HINTS_REG_OFFSET);
20000bc0:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bc2:	4914                	lw	a3,16(a0)
20000bc4:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000bc6:	00b6d5b3          	srl	a1,a3,a1
20000bca:	8985                	andi	a1,a1,1
dif_clkmgr_hintable_clock_get_hint():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:144
  *hinted_is_enabled = bitfield_bit32_read(clk_hints_val, clock);
20000bcc:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_clkmgr.c:147

  return kDifClkmgrOk;
}
20000bd0:	8082                	ret
	...

20000bd4 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000bd4:	7139                	addi	sp,sp,-64
20000bd6:	ce06                	sw	ra,28(sp)
20000bd8:	cc22                	sw	s0,24(sp)
20000bda:	ca26                	sw	s1,20(sp)
20000bdc:	c84a                	sw	s2,16(sp)
20000bde:	892a                	mv	s2,a0
20000be0:	de46                	sw	a7,60(sp)
20000be2:	dc42                	sw	a6,56(sp)
20000be4:	da3e                	sw	a5,52(sp)
20000be6:	d83a                	sw	a4,48(sp)
20000be8:	d636                	sw	a3,44(sp)
20000bea:	d432                	sw	a2,40(sp)
20000bec:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000bee:	4144                	lw	s1,4(a0)
20000bf0:	80000537          	lui	a0,0x80000
20000bf4:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffdee3>
20000bf8:	8526                	mv	a0,s1
20000bfa:	4581                	li	a1,0
20000bfc:	3cd5                	jal	200006f0 <memchr>
20000bfe:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20000c02:	02f00593          	li	a1,47
20000c06:	8526                	mv	a0,s1
20000c08:	3601                	jal	20000708 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000c0a:	00092583          	lw	a1,0(s2)
20000c0e:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000c10:	00b66b63          	bltu	a2,a1,20000c26 <base_log_internal_core+0x52>
20000c14:	058a                	slli	a1,a1,0x2
20000c16:	00001617          	auipc	a2,0x1
20000c1a:	e6e60613          	addi	a2,a2,-402 # 20001a84 <kTestConfig+0x54>
20000c1e:	95b2                	add	a1,a1,a2
20000c20:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000c22:	e519                	bnez	a0,20000c30 <base_log_internal_core+0x5c>
20000c24:	a801                	j	20000c34 <base_log_internal_core+0x60>
20000c26:	00001597          	auipc	a1,0x1
20000c2a:	4eb58593          	addi	a1,a1,1259 # 20002111 <__clz_tab+0x62d>
20000c2e:	c119                	beqz	a0,20000c34 <base_log_internal_core+0x60>
20000c30:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000c34:	effff417          	auipc	s0,0xeffff
20000c38:	3d840413          	addi	s0,s0,984 # 1000000c <base_log_internal_core.global_log_counter>
20000c3c:	00045603          	lhu	a2,0(s0)
20000c40:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000c44:	00001517          	auipc	a0,0x1
20000c48:	4b450513          	addi	a0,a0,1204 # 200020f8 <__clz_tab+0x614>
20000c4c:	86a6                	mv	a3,s1
20000c4e:	28d1                	jal	20000d22 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000c50:	00041503          	lh	a0,0(s0)
20000c54:	0505                	addi	a0,a0,1
20000c56:	00a41023          	sh	a0,0(s0)
20000c5a:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000c5c:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000c5e:	01092503          	lw	a0,16(s2)
20000c62:	28c5                	jal	20000d52 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000c64:	00001517          	auipc	a0,0x1
20000c68:	4a250513          	addi	a0,a0,1186 # 20002106 <__clz_tab+0x622>
20000c6c:	285d                	jal	20000d22 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000c6e:	4942                	lw	s2,16(sp)
20000c70:	44d2                	lw	s1,20(sp)
20000c72:	4462                	lw	s0,24(sp)
20000c74:	40f2                	lw	ra,28(sp)
20000c76:	6121                	addi	sp,sp,64
20000c78:	8082                	ret

20000c7a <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20000c7a:	1101                	addi	sp,sp,-32
20000c7c:	ce46                	sw	a7,28(sp)
20000c7e:	cc42                	sw	a6,24(sp)
20000c80:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000c82:	00001797          	auipc	a5,0x1
20000c86:	d1e78793          	addi	a5,a5,-738 # 200019a0 <kDeviceLogBypassUartAddress>
20000c8a:	439c                	lw	a5,0(a5)
20000c8c:	c83a                	sw	a4,16(sp)
20000c8e:	c636                	sw	a3,12(sp)
20000c90:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c92:	c388                	sw	a0,0(a5)
20000c94:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000c96:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000c98:	c989                	beqz	a1,20000caa <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000c9a:	4512                	lw	a0,4(sp)
20000c9c:	00450613          	addi	a2,a0,4
20000ca0:	c232                	sw	a2,4(sp)
20000ca2:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000ca4:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ca6:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000ca8:	f9ed                	bnez	a1,20000c9a <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000caa:	6105                	addi	sp,sp,32
20000cac:	8082                	ret
	...

20000cb0 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20000cb0:	e589                	bnez	a1,20000cba <base_set_stdout+0xa>
20000cb2:	00000597          	auipc	a1,0x0
20000cb6:	01658593          	addi	a1,a1,22 # 20000cc8 <base_dev_null>
20000cba:	effff617          	auipc	a2,0xeffff
20000cbe:	34660613          	addi	a2,a2,838 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20000cc2:	c208                	sw	a0,0(a2)
20000cc4:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20000cc6:	8082                	ret

20000cc8 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20000cc8:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20000cca:	8082                	ret

20000ccc <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20000ccc:	effff597          	auipc	a1,0xeffff
20000cd0:	33458593          	addi	a1,a1,820 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20000cd4:	c188                	sw	a0,0(a1)
20000cd6:	00000517          	auipc	a0,0x0
20000cda:	00c50513          	addi	a0,a0,12 # 20000ce2 <base_dev_uart>
20000cde:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20000ce0:	8082                	ret

20000ce2 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20000ce2:	1101                	addi	sp,sp,-32
20000ce4:	ce06                	sw	ra,28(sp)
20000ce6:	cc22                	sw	s0,24(sp)
20000ce8:	ca26                	sw	s1,20(sp)
20000cea:	c84a                	sw	s2,16(sp)
20000cec:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000cee:	c20d                	beqz	a2,20000d10 <base_dev_uart+0x2e>
20000cf0:	8432                	mv	s0,a2
20000cf2:	892e                	mv	s2,a1
20000cf4:	89aa                	mv	s3,a0
20000cf6:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20000cf8:	00990533          	add	a0,s2,s1
20000cfc:	00054583          	lbu	a1,0(a0)
20000d00:	854e                	mv	a0,s3
20000d02:	2f11                	jal	20001416 <dif_uart_byte_send_polled>
20000d04:	e519                	bnez	a0,20000d12 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000d06:	0485                	addi	s1,s1,1
20000d08:	fe9418e3          	bne	s0,s1,20000cf8 <base_dev_uart+0x16>
20000d0c:	84a2                	mv	s1,s0
20000d0e:	a011                	j	20000d12 <base_dev_uart+0x30>
20000d10:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000d12:	8526                	mv	a0,s1
20000d14:	49b2                	lw	s3,12(sp)
20000d16:	4942                	lw	s2,16(sp)
20000d18:	44d2                	lw	s1,20(sp)
20000d1a:	4462                	lw	s0,24(sp)
20000d1c:	40f2                	lw	ra,28(sp)
20000d1e:	6105                	addi	sp,sp,32
20000d20:	8082                	ret

20000d22 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000d22:	7179                	addi	sp,sp,-48
20000d24:	c606                	sw	ra,12(sp)
20000d26:	d646                	sw	a7,44(sp)
20000d28:	d442                	sw	a6,40(sp)
20000d2a:	d23e                	sw	a5,36(sp)
20000d2c:	d03a                	sw	a4,32(sp)
20000d2e:	ce36                	sw	a3,28(sp)
20000d30:	cc32                	sw	a2,24(sp)
20000d32:	ca2e                	sw	a1,20(sp)
20000d34:	effff597          	auipc	a1,0xeffff
20000d38:	2cc58593          	addi	a1,a1,716 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000d3c:	4190                	lw	a2,0(a1)
20000d3e:	41cc                	lw	a1,4(a1)
20000d40:	872a                	mv	a4,a0
20000d42:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000d44:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000d46:	8532                	mv	a0,a2
20000d48:	863a                	mv	a2,a4
20000d4a:	200d                	jal	20000d6c <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000d4c:	40b2                	lw	ra,12(sp)
20000d4e:	6145                	addi	sp,sp,48
20000d50:	8082                	ret

20000d52 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000d52:	effff697          	auipc	a3,0xeffff
20000d56:	2ae68693          	addi	a3,a3,686 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000d5a:	4290                	lw	a2,0(a3)
20000d5c:	42d4                	lw	a3,4(a3)
20000d5e:	872e                	mv	a4,a1
20000d60:	87aa                	mv	a5,a0
20000d62:	8532                	mv	a0,a2
20000d64:	85b6                	mv	a1,a3
20000d66:	863e                	mv	a2,a5
20000d68:	86ba                	mv	a3,a4
20000d6a:	a009                	j	20000d6c <base_vfprintf>

20000d6c <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000d6c:	7139                	addi	sp,sp,-64
20000d6e:	de06                	sw	ra,60(sp)
20000d70:	dc22                	sw	s0,56(sp)
20000d72:	da26                	sw	s1,52(sp)
20000d74:	d84a                	sw	s2,48(sp)
20000d76:	d64e                	sw	s3,44(sp)
20000d78:	d452                	sw	s4,40(sp)
20000d7a:	d256                	sw	s5,36(sp)
20000d7c:	d05a                	sw	s6,32(sp)
20000d7e:	ce5e                	sw	s7,28(sp)
20000d80:	cc62                	sw	s8,24(sp)
20000d82:	ca66                	sw	s9,20(sp)
20000d84:	c86a                	sw	s10,16(sp)
20000d86:	c66e                	sw	s11,12(sp)
20000d88:	8bb2                	mv	s7,a2
20000d8a:	892a                	mv	s2,a0
20000d8c:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000d8e:	c199                	beqz	a1,20000d94 <base_vfprintf+0x28>
20000d90:	89ae                	mv	s3,a1
20000d92:	a029                	j	20000d9c <base_vfprintf+0x30>
20000d94:	00000997          	auipc	s3,0x0
20000d98:	f3498993          	addi	s3,s3,-204 # 20000cc8 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000d9c:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000d9e:	000bc503          	lbu	a0,0(s7)
20000da2:	28050f63          	beqz	a0,20001040 <base_vfprintf+0x2d4>
20000da6:	4b01                	li	s6,0
20000da8:	02500c13          	li	s8,37
20000dac:	4ca5                	li	s9,9
20000dae:	02000d13          	li	s10,32
20000db2:	06800d93          	li	s11,104
20000db6:	00001a17          	auipc	s4,0x1
20000dba:	35da0a13          	addi	s4,s4,861 # 20002113 <__clz_tab+0x62f>
20000dbe:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20000dc0:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20000dc2:	0ff57413          	andi	s0,a0,255
20000dc6:	01840963          	beq	s0,s8,20000dd8 <base_vfprintf+0x6c>
20000dca:	c419                	beqz	s0,20000dd8 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20000dcc:	009b8533          	add	a0,s7,s1
20000dd0:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20000dd4:	0485                	addi	s1,s1,1
20000dd6:	b7f5                	j	20000dc2 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20000dd8:	c491                	beqz	s1,20000de4 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20000dda:	854a                	mv	a0,s2
20000ddc:	85de                	mv	a1,s7
20000dde:	8626                	mv	a2,s1
20000de0:	9982                	jalr	s3
20000de2:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20000de4:	24040f63          	beqz	s0,20001042 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000de8:	009b8633          	add	a2,s7,s1
20000dec:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000df0:	22050f63          	beqz	a0,2000102e <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000df4:	fd050593          	addi	a1,a0,-48
20000df8:	0ff5f593          	andi	a1,a1,255
20000dfc:	00bcf863          	bgeu	s9,a1,20000e0c <base_vfprintf+0xa0>
20000e00:	4401                	li	s0,0
20000e02:	4581                	li	a1,0
20000e04:	4605                	li	a2,1
20000e06:	028d7f63          	bgeu	s10,s0,20000e44 <base_vfprintf+0xd8>
20000e0a:	aca1                	j	20001062 <base_vfprintf+0x2f6>
20000e0c:	4581                	li	a1,0
20000e0e:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000e10:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000e12:	00b606b3          	add	a3,a2,a1
20000e16:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000e1a:	20068a63          	beqz	a3,2000102e <base_vfprintf+0x2c2>
20000e1e:	0ff57513          	andi	a0,a0,255
20000e22:	03540733          	mul	a4,s0,s5
20000e26:	953a                	add	a0,a0,a4
20000e28:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000e2c:	fd068513          	addi	a0,a3,-48
20000e30:	0ff57713          	andi	a4,a0,255
20000e34:	0585                	addi	a1,a1,1
20000e36:	8536                	mv	a0,a3
20000e38:	fcecfde3          	bgeu	s9,a4,20000e12 <base_vfprintf+0xa6>
20000e3c:	4601                	li	a2,0
20000e3e:	8536                	mv	a0,a3
20000e40:	228d6163          	bltu	s10,s0,20001062 <base_vfprintf+0x2f6>
20000e44:	008036b3          	snez	a3,s0
20000e48:	8e55                	or	a2,a2,a3
20000e4a:	20060c63          	beqz	a2,20001062 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000e4e:	95de                	add	a1,a1,s7
20000e50:	95a6                	add	a1,a1,s1
20000e52:	00258b93          	addi	s7,a1,2
20000e56:	02adce63          	blt	s11,a0,20000e92 <base_vfprintf+0x126>
20000e5a:	06100593          	li	a1,97
20000e5e:	06a5d563          	bge	a1,a0,20000ec8 <base_vfprintf+0x15c>
20000e62:	06300593          	li	a1,99
20000e66:	0ca5cb63          	blt	a1,a0,20000f3c <base_vfprintf+0x1d0>
20000e6a:	06200593          	li	a1,98
20000e6e:	14b50a63          	beq	a0,a1,20000fc2 <base_vfprintf+0x256>
20000e72:	06300593          	li	a1,99
20000e76:	18b51f63          	bne	a0,a1,20001014 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20000e7a:	4502                	lw	a0,0(sp)
20000e7c:	00450593          	addi	a1,a0,4
20000e80:	c02e                	sw	a1,0(sp)
20000e82:	4108                	lw	a0,0(a0)
20000e84:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20000e88:	4605                	li	a2,1
20000e8a:	854a                	mv	a0,s2
20000e8c:	00b10593          	addi	a1,sp,11
20000e90:	aa41                	j	20001020 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000e92:	07200593          	li	a1,114
20000e96:	04a5dd63          	bge	a1,a0,20000ef0 <base_vfprintf+0x184>
20000e9a:	07700593          	li	a1,119
20000e9e:	0aa5c663          	blt	a1,a0,20000f4a <base_vfprintf+0x1de>
20000ea2:	07300593          	li	a1,115
20000ea6:	12b50963          	beq	a0,a1,20000fd8 <base_vfprintf+0x26c>
20000eaa:	07500593          	li	a1,117
20000eae:	16b51363          	bne	a0,a1,20001014 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20000eb2:	4502                	lw	a0,0(sp)
20000eb4:	00450593          	addi	a1,a0,4
20000eb8:	c02e                	sw	a1,0(sp)
20000eba:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000ebc:	00001797          	auipc	a5,0x1
20000ec0:	bf578793          	addi	a5,a5,-1035 # 20001ab1 <kDigitsLow>
20000ec4:	4729                	li	a4,10
20000ec6:	a8cd                	j	20000fb8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000ec8:	13850763          	beq	a0,s8,20000ff6 <base_vfprintf+0x28a>
20000ecc:	04800593          	li	a1,72
20000ed0:	00b50663          	beq	a0,a1,20000edc <base_vfprintf+0x170>
20000ed4:	05800593          	li	a1,88
20000ed8:	12b51e63          	bne	a0,a1,20001014 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20000edc:	4502                	lw	a0,0(sp)
20000ede:	00450593          	addi	a1,a0,4
20000ee2:	c02e                	sw	a1,0(sp)
20000ee4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20000ee6:	00001797          	auipc	a5,0x1
20000eea:	bdb78793          	addi	a5,a5,-1061 # 20001ac1 <kDigitsHigh>
20000eee:	a0e1                	j	20000fb6 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000ef0:	06900593          	li	a1,105
20000ef4:	06b50d63          	beq	a0,a1,20000f6e <base_vfprintf+0x202>
20000ef8:	06f00593          	li	a1,111
20000efc:	10b50163          	beq	a0,a1,20000ffe <base_vfprintf+0x292>
20000f00:	07000593          	li	a1,112
20000f04:	10b51863          	bne	a0,a1,20001014 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000f08:	00001597          	auipc	a1,0x1
20000f0c:	20f58593          	addi	a1,a1,527 # 20002117 <__clz_tab+0x633>
20000f10:	4609                	li	a2,2
20000f12:	854a                	mv	a0,s2
20000f14:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20000f16:	4582                	lw	a1,0(sp)
20000f18:	00458613          	addi	a2,a1,4
20000f1c:	c032                	sw	a2,0(sp)
20000f1e:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000f20:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000f24:	00001797          	auipc	a5,0x1
20000f28:	b8d78793          	addi	a5,a5,-1139 # 20001ab1 <kDigitsLow>
20000f2c:	46a1                	li	a3,8
20000f2e:	4741                	li	a4,16
20000f30:	854a                	mv	a0,s2
20000f32:	85ce                	mv	a1,s3
20000f34:	2a5d                	jal	200010ea <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20000f36:	00a40b33          	add	s6,s0,a0
20000f3a:	a0ed                	j	20001024 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000f3c:	06400593          	li	a1,100
20000f40:	02b50763          	beq	a0,a1,20000f6e <base_vfprintf+0x202>
20000f44:	07b50063          	beq	a0,s11,20000fa4 <base_vfprintf+0x238>
20000f48:	a0f1                	j	20001014 <base_vfprintf+0x2a8>
20000f4a:	07800593          	li	a1,120
20000f4e:	04b50b63          	beq	a0,a1,20000fa4 <base_vfprintf+0x238>
20000f52:	07a00593          	li	a1,122
20000f56:	0ab51f63          	bne	a0,a1,20001014 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20000f5a:	4502                	lw	a0,0(sp)
20000f5c:	00450593          	addi	a1,a0,4
20000f60:	c02e                	sw	a1,0(sp)
20000f62:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20000f64:	00850593          	addi	a1,a0,8
20000f68:	c02e                	sw	a1,0(sp)
20000f6a:	414c                	lw	a1,4(a0)
20000f6c:	a84d                	j	2000101e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000f6e:	4502                	lw	a0,0(sp)
20000f70:	00450593          	addi	a1,a0,4
20000f74:	c02e                	sw	a1,0(sp)
20000f76:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20000f78:	557d                	li	a0,-1
20000f7a:	00954c63          	blt	a0,s1,20000f92 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000f7e:	00001597          	auipc	a1,0x1
20000f82:	19758593          	addi	a1,a1,407 # 20002115 <__clz_tab+0x631>
20000f86:	4605                	li	a2,1
20000f88:	854a                	mv	a0,s2
20000f8a:	9982                	jalr	s3
20000f8c:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000f8e:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000f92:	00001797          	auipc	a5,0x1
20000f96:	b1f78793          	addi	a5,a5,-1249 # 20001ab1 <kDigitsLow>
20000f9a:	4729                	li	a4,10
20000f9c:	854a                	mv	a0,s2
20000f9e:	85ce                	mv	a1,s3
20000fa0:	8626                	mv	a2,s1
20000fa2:	a829                	j	20000fbc <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000fa4:	4502                	lw	a0,0(sp)
20000fa6:	00450593          	addi	a1,a0,4
20000faa:	c02e                	sw	a1,0(sp)
20000fac:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20000fae:	00001797          	auipc	a5,0x1
20000fb2:	b0378793          	addi	a5,a5,-1277 # 20001ab1 <kDigitsLow>
20000fb6:	4741                	li	a4,16
20000fb8:	854a                	mv	a0,s2
20000fba:	85ce                	mv	a1,s3
20000fbc:	86a2                	mv	a3,s0
20000fbe:	2235                	jal	200010ea <write_digits>
20000fc0:	a08d                	j	20001022 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20000fc2:	4502                	lw	a0,0(sp)
20000fc4:	00450593          	addi	a1,a0,4
20000fc8:	c02e                	sw	a1,0(sp)
20000fca:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20000fcc:	00001797          	auipc	a5,0x1
20000fd0:	ae578793          	addi	a5,a5,-1307 # 20001ab1 <kDigitsLow>
20000fd4:	4709                	li	a4,2
20000fd6:	b7cd                	j	20000fb8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20000fd8:	4502                	lw	a0,0(sp)
20000fda:	00450593          	addi	a1,a0,4
20000fde:	c02e                	sw	a1,0(sp)
20000fe0:	410c                	lw	a1,0(a0)
20000fe2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000fe4:	00a58633          	add	a2,a1,a0
20000fe8:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20000fec:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000fee:	fa7d                	bnez	a2,20000fe4 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20000ff0:	fff50613          	addi	a2,a0,-1
20000ff4:	a02d                	j	2000101e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20000ff6:	4605                	li	a2,1
20000ff8:	854a                	mv	a0,s2
20000ffa:	85d2                	mv	a1,s4
20000ffc:	a015                	j	20001020 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20000ffe:	4502                	lw	a0,0(sp)
20001000:	00450593          	addi	a1,a0,4
20001004:	c02e                	sw	a1,0(sp)
20001006:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001008:	00001797          	auipc	a5,0x1
2000100c:	aa978793          	addi	a5,a5,-1367 # 20001ab1 <kDigitsLow>
20001010:	4721                	li	a4,8
20001012:	b75d                	j	20000fb8 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20001014:	00001597          	auipc	a1,0x1
20001018:	abd58593          	addi	a1,a1,-1347 # 20001ad1 <kUnknownSpec>
2000101c:	463d                	li	a2,15
2000101e:	854a                	mv	a0,s2
20001020:	9982                	jalr	s3
20001022:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001024:	000bc503          	lbu	a0,0(s7)
20001028:	d8051ce3          	bnez	a0,20000dc0 <base_vfprintf+0x54>
2000102c:	a819                	j	20001042 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
2000102e:	00001597          	auipc	a1,0x1
20001032:	a6658593          	addi	a1,a1,-1434 # 20001a94 <kErrorNul>
20001036:	4645                	li	a2,17
20001038:	854a                	mv	a0,s2
2000103a:	9982                	jalr	s3
2000103c:	9b2a                	add	s6,s6,a0
2000103e:	a011                	j	20001042 <base_vfprintf+0x2d6>
20001040:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20001042:	855a                	mv	a0,s6
20001044:	4db2                	lw	s11,12(sp)
20001046:	4d42                	lw	s10,16(sp)
20001048:	4cd2                	lw	s9,20(sp)
2000104a:	4c62                	lw	s8,24(sp)
2000104c:	4bf2                	lw	s7,28(sp)
2000104e:	5b02                	lw	s6,32(sp)
20001050:	5a92                	lw	s5,36(sp)
20001052:	5a22                	lw	s4,40(sp)
20001054:	59b2                	lw	s3,44(sp)
20001056:	5942                	lw	s2,48(sp)
20001058:	54d2                	lw	s1,52(sp)
2000105a:	5462                	lw	s0,56(sp)
2000105c:	50f2                	lw	ra,60(sp)
2000105e:	6121                	addi	sp,sp,64
20001060:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001062:	00001597          	auipc	a1,0x1
20001066:	a4358593          	addi	a1,a1,-1469 # 20001aa5 <kErrorTooWide>
2000106a:	4631                	li	a2,12
2000106c:	b7f1                	j	20001038 <base_vfprintf+0x2cc>

2000106e <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
2000106e:	7179                	addi	sp,sp,-48
20001070:	ca06                	sw	ra,20(sp)
20001072:	d646                	sw	a7,44(sp)
20001074:	d442                	sw	a6,40(sp)
20001076:	d23e                	sw	a5,36(sp)
20001078:	d03a                	sw	a4,32(sp)
2000107a:	ce36                	sw	a3,28(sp)
2000107c:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
2000107e:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001080:	c42a                	sw	a0,8(sp)
20001082:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001084:	00000597          	auipc	a1,0x0
20001088:	01258593          	addi	a1,a1,18 # 20001096 <snprintf_sink>
2000108c:	0028                	addi	a0,sp,8
2000108e:	39f9                	jal	20000d6c <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001090:	40d2                	lw	ra,20(sp)
20001092:	6145                	addi	sp,sp,48
20001094:	8082                	ret

20001096 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20001096:	1141                	addi	sp,sp,-16
20001098:	c606                	sw	ra,12(sp)
2000109a:	c422                	sw	s0,8(sp)
2000109c:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
2000109e:	4140                	lw	s0,4(a0)
200010a0:	c00d                	beqz	s0,200010c2 <snprintf_sink+0x2c>
200010a2:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
200010a4:	00c46363          	bltu	s0,a2,200010aa <snprintf_sink+0x14>
200010a8:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200010aa:	4088                	lw	a0,0(s1)
200010ac:	8622                	mv	a2,s0
200010ae:	df2ff0ef          	jal	ra,200006a0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200010b2:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200010b4:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200010b6:	9522                	add	a0,a0,s0
200010b8:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200010ba:	40858533          	sub	a0,a1,s0
200010be:	c0c8                	sw	a0,4(s1)
200010c0:	a011                	j	200010c4 <snprintf_sink+0x2e>
200010c2:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200010c4:	8522                	mv	a0,s0
200010c6:	4492                	lw	s1,4(sp)
200010c8:	4422                	lw	s0,8(sp)
200010ca:	40b2                	lw	ra,12(sp)
200010cc:	0141                	addi	sp,sp,16
200010ce:	8082                	ret

200010d0 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200010d0:	1101                	addi	sp,sp,-32
200010d2:	c206                	sw	ra,4(sp)
200010d4:	ce46                	sw	a7,28(sp)
200010d6:	cc42                	sw	a6,24(sp)
200010d8:	ca3e                	sw	a5,20(sp)
200010da:	c83a                	sw	a4,16(sp)
200010dc:	c636                	sw	a3,12(sp)
200010de:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200010e0:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200010e2:	3169                	jal	20000d6c <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200010e4:	4092                	lw	ra,4(sp)
200010e6:	6105                	addi	sp,sp,32
200010e8:	8082                	ret

200010ea <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
200010ea:	7139                	addi	sp,sp,-64
200010ec:	de06                	sw	ra,60(sp)
200010ee:	dc22                	sw	s0,56(sp)
200010f0:	da26                	sw	s1,52(sp)
200010f2:	d84a                	sw	s2,48(sp)
200010f4:	d64e                	sw	s3,44(sp)
200010f6:	892e                	mv	s2,a1
200010f8:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200010fa:	ca05                	beqz	a2,2000112a <write_digits+0x40>
200010fc:	4501                	li	a0,0
200010fe:	02b10813          	addi	a6,sp,43
20001102:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001104:	02e65633          	divu	a2,a2,a4
20001108:	02e60433          	mul	s0,a2,a4
2000110c:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001110:	943e                	add	s0,s0,a5
20001112:	00040403          	lb	s0,0(s0)
20001116:	00a805b3          	add	a1,a6,a0
2000111a:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000111e:	157d                	addi	a0,a0,-1
20001120:	fee4f1e3          	bgeu	s1,a4,20001102 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001124:	40a00633          	neg	a2,a0
20001128:	a011                	j	2000112c <write_digits+0x42>
2000112a:	4601                	li	a2,0
2000112c:	4485                	li	s1,1
2000112e:	c291                	beqz	a3,20001132 <write_digits+0x48>
20001130:	84b6                	mv	s1,a3
20001132:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20001136:	00a4e463          	bltu	s1,a0,2000113e <write_digits+0x54>
2000113a:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000113e:	02967063          	bgeu	a2,s1,2000115e <write_digits+0x74>
20001142:	0068                	addi	a0,sp,12
20001144:	8d05                	sub	a0,a0,s1
20001146:	02050513          	addi	a0,a0,32
2000114a:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
2000114e:	03000593          	li	a1,48
20001152:	8622                	mv	a2,s0
20001154:	d62ff0ef          	jal	ra,200006b6 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001158:	147d                	addi	s0,s0,-1
2000115a:	fc7d                	bnez	s0,20001158 <write_digits+0x6e>
2000115c:	8626                	mv	a2,s1
2000115e:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001160:	8d11                	sub	a0,a0,a2
20001162:	02050593          	addi	a1,a0,32
20001166:	854e                	mv	a0,s3
20001168:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
2000116a:	59b2                	lw	s3,44(sp)
2000116c:	5942                	lw	s2,48(sp)
2000116e:	54d2                	lw	s1,52(sp)
20001170:	5462                	lw	s0,56(sp)
20001172:	50f2                	lw	ra,60(sp)
20001174:	6121                	addi	sp,sp,64
20001176:	8082                	ret

20001178 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20001178:	c581                	beqz	a1,20001180 <dif_uart_init+0x8>
2000117a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
2000117c:	c188                	sw	a0,0(a1)
2000117e:	a011                	j	20001182 <dif_uart_init+0xa>
20001180:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001182:	8532                	mv	a0,a2
20001184:	8082                	ret

20001186 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20001186:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001188:	c606                	sw	ra,12(sp)
2000118a:	c422                	sw	s0,8(sp)
2000118c:	c226                	sw	s1,4(sp)
2000118e:	c92d                	beqz	a0,20001200 <dif_uart_configure+0x7a>
20001190:	84ae                	mv	s1,a1
20001192:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001194:	418c                	lw	a1,0(a1)
20001196:	450d                	li	a0,3
20001198:	c5ad                	beqz	a1,20001202 <dif_uart_configure+0x7c>
2000119a:	40d0                	lw	a2,4(s1)
2000119c:	c23d                	beqz	a2,20001202 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
2000119e:	01459513          	slli	a0,a1,0x14
200011a2:	81b1                	srli	a1,a1,0xc
200011a4:	4681                	li	a3,0
200011a6:	2e61                	jal	2000153e <__udivdi3>
200011a8:	6641                	lui	a2,0x10
200011aa:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200011ac:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200011ae:	8d31                	xor	a0,a0,a2
200011b0:	8dc9                	or	a1,a1,a0
200011b2:	4511                	li	a0,4
200011b4:	e5b9                	bnez	a1,20001202 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200011b6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011b8:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200011bc:	4008                	lw	a0,0(s0)
200011be:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011c0:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200011c2:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011c4:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200011c8:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011ca:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200011ce:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011d0:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200011d4:	4008                	lw	a0,0(s0)
200011d6:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011d8:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200011da:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200011dc:	01061513          	slli	a0,a2,0x10
200011e0:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
200011e4:	c291                	beqz	a3,200011e8 <dif_uart_configure+0x62>
200011e6:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
200011e8:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
200011ea:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
200011ec:	e219                	bnez	a2,200011f2 <dif_uart_configure+0x6c>
200011ee:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
200011f2:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011f4:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200011f6:	400c                	lw	a1,0(s0)
200011f8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011fa:	0005a223          	sw	zero,4(a1)
200011fe:	a011                	j	20001202 <dif_uart_configure+0x7c>
20001200:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001202:	4492                	lw	s1,4(sp)
20001204:	4422                	lw	s0,8(sp)
20001206:	40b2                	lw	ra,12(sp)
20001208:	0141                	addi	sp,sp,16
2000120a:	8082                	ret

2000120c <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
2000120c:	1141                	addi	sp,sp,-16
2000120e:	c606                	sw	ra,12(sp)
20001210:	c422                	sw	s0,8(sp)
20001212:	c226                	sw	s1,4(sp)
20001214:	84aa                	mv	s1,a0
20001216:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001218:	c09d                	beqz	s1,2000123e <dif_uart_irq_is_pending+0x32>
2000121a:	8432                	mv	s0,a2
2000121c:	c20d                	beqz	a2,2000123e <dif_uart_irq_is_pending+0x32>
2000121e:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001220:	852e                	mv	a0,a1
20001222:	85b2                	mv	a1,a2
20001224:	2015                	jal	20001248 <uart_irq_offset_get>
20001226:	85aa                	mv	a1,a0
20001228:	4505                	li	a0,1
2000122a:	c991                	beqz	a1,2000123e <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
2000122c:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000122e:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001230:	4602                	lw	a2,0(sp)
20001232:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001234:	00c5d5b3          	srl	a1,a1,a2
20001238:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
2000123a:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
2000123e:	4492                	lw	s1,4(sp)
20001240:	4422                	lw	s0,8(sp)
20001242:	40b2                	lw	ra,12(sp)
20001244:	0141                	addi	sp,sp,16
20001246:	8082                	ret

20001248 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001248:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
2000124a:	00a66563          	bltu	a2,a0,20001254 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
2000124e:	c188                	sw	a0,0(a1)
20001250:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001252:	8082                	ret
20001254:	4501                	li	a0,0
20001256:	8082                	ret

20001258 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20001258:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
2000125a:	c606                	sw	ra,12(sp)
2000125c:	c422                	sw	s0,8(sp)
2000125e:	c10d                	beqz	a0,20001280 <dif_uart_irq_acknowledge+0x28>
20001260:	842a                	mv	s0,a0
20001262:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001264:	852e                	mv	a0,a1
20001266:	85b2                	mv	a1,a2
20001268:	37c5                	jal	20001248 <uart_irq_offset_get>
2000126a:	85aa                	mv	a1,a0
2000126c:	4505                	li	a0,1
2000126e:	c991                	beqz	a1,20001282 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001270:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001272:	4010                	lw	a2,0(s0)
20001274:	4501                	li	a0,0
20001276:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001278:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000127c:	c20c                	sw	a1,0(a2)
2000127e:	a011                	j	20001282 <dif_uart_irq_acknowledge+0x2a>
20001280:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001282:	4422                	lw	s0,8(sp)
20001284:	40b2                	lw	ra,12(sp)
20001286:	0141                	addi	sp,sp,16
20001288:	8082                	ret

2000128a <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
2000128a:	c911                	beqz	a0,2000129e <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
2000128c:	c581                	beqz	a1,20001294 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000128e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001290:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001292:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001294:	410c                	lw	a1,0(a0)
20001296:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001298:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
2000129c:	8082                	ret
2000129e:	4509                	li	a0,2
200012a0:	8082                	ret

200012a2 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200012a2:	862a                	mv	a2,a0
200012a4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200012a6:	c611                	beqz	a2,200012b2 <dif_uart_irq_restore_all+0x10>
200012a8:	c589                	beqz	a1,200012b2 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200012aa:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200012ac:	4210                	lw	a2,0(a2)
200012ae:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012b0:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200012b2:	8082                	ret

200012b4 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200012b4:	1141                	addi	sp,sp,-16
200012b6:	c606                	sw	ra,12(sp)
200012b8:	c422                	sw	s0,8(sp)
200012ba:	c226                	sw	s1,4(sp)
200012bc:	84aa                	mv	s1,a0
200012be:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200012c0:	c485                	beqz	s1,200012e8 <dif_uart_irq_get_enabled+0x34>
200012c2:	8432                	mv	s0,a2
200012c4:	c215                	beqz	a2,200012e8 <dif_uart_irq_get_enabled+0x34>
200012c6:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200012c8:	852e                	mv	a0,a1
200012ca:	85b2                	mv	a1,a2
200012cc:	3fb5                	jal	20001248 <uart_irq_offset_get>
200012ce:	85aa                	mv	a1,a0
200012d0:	4505                	li	a0,1
200012d2:	c999                	beqz	a1,200012e8 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200012d4:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012d6:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
200012d8:	4602                	lw	a2,0(sp)
200012da:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200012dc:	00c5d5b3          	srl	a1,a1,a2
200012e0:	8985                	andi	a1,a1,1
200012e2:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
200012e6:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
200012e8:	4492                	lw	s1,4(sp)
200012ea:	4422                	lw	s0,8(sp)
200012ec:	40b2                	lw	ra,12(sp)
200012ee:	0141                	addi	sp,sp,16
200012f0:	8082                	ret

200012f2 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
200012f2:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
200012f4:	c606                	sw	ra,12(sp)
200012f6:	c422                	sw	s0,8(sp)
200012f8:	c226                	sw	s1,4(sp)
200012fa:	c91d                	beqz	a0,20001330 <dif_uart_irq_set_enabled+0x3e>
200012fc:	8432                	mv	s0,a2
200012fe:	84aa                	mv	s1,a0
20001300:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001302:	852e                	mv	a0,a1
20001304:	85b2                	mv	a1,a2
20001306:	3789                	jal	20001248 <uart_irq_offset_get>
20001308:	85aa                	mv	a1,a0
2000130a:	4505                	li	a0,1
2000130c:	c19d                	beqz	a1,20001332 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000130e:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001310:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001312:	4682                	lw	a3,0(sp)
20001314:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001316:	00143713          	seqz	a4,s0
2000131a:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000131c:	00d797b3          	sll	a5,a5,a3
20001320:	fff7c793          	not	a5,a5
20001324:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001326:	00d716b3          	sll	a3,a4,a3
2000132a:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000132c:	c1d0                	sw	a2,4(a1)
2000132e:	a011                	j	20001332 <dif_uart_irq_set_enabled+0x40>
20001330:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001332:	4492                	lw	s1,4(sp)
20001334:	4422                	lw	s0,8(sp)
20001336:	40b2                	lw	ra,12(sp)
20001338:	0141                	addi	sp,sp,16
2000133a:	8082                	ret

2000133c <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
2000133c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
2000133e:	c606                	sw	ra,12(sp)
20001340:	c422                	sw	s0,8(sp)
20001342:	c10d                	beqz	a0,20001364 <dif_uart_irq_force+0x28>
20001344:	842a                	mv	s0,a0
20001346:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001348:	852e                	mv	a0,a1
2000134a:	85b2                	mv	a1,a2
2000134c:	3df5                	jal	20001248 <uart_irq_offset_get>
2000134e:	85aa                	mv	a1,a0
20001350:	4505                	li	a0,1
20001352:	c991                	beqz	a1,20001366 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001354:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20001356:	4010                	lw	a2,0(s0)
20001358:	4501                	li	a0,0
2000135a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000135c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001360:	c60c                	sw	a1,8(a2)
20001362:	a011                	j	20001366 <dif_uart_irq_force+0x2a>
20001364:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20001366:	4422                	lw	s0,8(sp)
20001368:	40b2                	lw	ra,12(sp)
2000136a:	0141                	addi	sp,sp,16
2000136c:	8082                	ret

2000136e <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
2000136e:	cd09                	beqz	a0,20001388 <dif_uart_watermark_rx_set+0x1a>
20001370:	4691                	li	a3,4
20001372:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001374:	00b6eb63          	bltu	a3,a1,2000138a <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001378:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000137a:	4d54                	lw	a3,28(a0)
2000137c:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
2000137e:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001380:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001382:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001384:	cd4c                	sw	a1,28(a0)
20001386:	a011                	j	2000138a <dif_uart_watermark_rx_set+0x1c>
20001388:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000138a:	8532                	mv	a0,a2
2000138c:	8082                	ret

2000138e <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
2000138e:	cd11                	beqz	a0,200013aa <dif_uart_watermark_tx_set+0x1c>
20001390:	468d                	li	a3,3
20001392:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001394:	00b6ec63          	bltu	a3,a1,200013ac <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001398:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000139a:	4d54                	lw	a3,28(a0)
2000139c:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
2000139e:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200013a0:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200013a4:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013a6:	cd4c                	sw	a1,28(a0)
200013a8:	a011                	j	200013ac <dif_uart_watermark_tx_set+0x1e>
200013aa:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200013ac:	8532                	mv	a0,a2
200013ae:	8082                	ret

200013b0 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200013b0:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200013b2:	c51d                	beqz	a0,200013e0 <dif_uart_bytes_send+0x30>
200013b4:	c595                	beqz	a1,200013e0 <dif_uart_bytes_send+0x30>
200013b6:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200013b8:	c20d                	beqz	a2,200013da <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200013ba:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200013be:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200013c2:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200013c4:	eb19                	bnez	a4,200013da <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
200013c6:	00f58733          	add	a4,a1,a5
200013ca:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
200013ce:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013d0:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200013d4:	fef613e3          	bne	a2,a5,200013ba <dif_uart_bytes_send+0xa>
200013d8:	87b2                	mv	a5,a2
200013da:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
200013dc:	c291                	beqz	a3,200013e0 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
200013de:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
200013e0:	853a                	mv	a0,a4
200013e2:	8082                	ret

200013e4 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
200013e4:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
200013e6:	c515                	beqz	a0,20001412 <dif_uart_bytes_receive+0x2e>
200013e8:	c60d                	beqz	a2,20001412 <dif_uart_bytes_receive+0x2e>
200013ea:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200013ec:	cd99                	beqz	a1,2000140a <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200013ee:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200013f0:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200013f2:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200013f6:	eb91                	bnez	a5,2000140a <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013f8:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200013fa:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
200013fe:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001400:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001404:	ff0595e3          	bne	a1,a6,200013ee <dif_uart_bytes_receive+0xa>
20001408:	882e                	mv	a6,a1
2000140a:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
2000140c:	c299                	beqz	a3,20001412 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
2000140e:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001412:	853a                	mv	a0,a4
20001414:	8082                	ret

20001416 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001416:	cd19                	beqz	a0,20001434 <dif_uart_byte_send_polled+0x1e>
20001418:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000141a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000141c:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
2000141e:	fef5                	bnez	a3,2000141a <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001420:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001422:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001424:	e299                	bnez	a3,2000142a <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001426:	ce0c                	sw	a1,24(a2)
20001428:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000142a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000142c:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
2000142e:	dd75                	beqz	a0,2000142a <dif_uart_byte_send_polled+0x14>
20001430:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001432:	8082                	ret
20001434:	4509                	li	a0,2
20001436:	8082                	ret

20001438 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001438:	862a                	mv	a2,a0
2000143a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
2000143c:	c205                	beqz	a2,2000145c <dif_uart_byte_receive_polled+0x24>
2000143e:	cd99                	beqz	a1,2000145c <dif_uart_byte_receive_polled+0x24>
20001440:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001442:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001444:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001448:	fd6d                	bnez	a0,20001442 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000144a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000144c:	02057693          	andi	a3,a0,32
20001450:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001452:	e689                	bnez	a3,2000145c <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001454:	4a50                	lw	a2,20(a2)
20001456:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001458:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
2000145c:	8082                	ret

2000145e <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000145e:	862a                	mv	a2,a0
20001460:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001462:	ca09                	beqz	a2,20001474 <dif_uart_rx_bytes_available+0x16>
20001464:	c981                	beqz	a1,20001474 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001466:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001468:	5110                	lw	a2,32(a0)
2000146a:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
2000146c:	8241                	srli	a2,a2,0x10
2000146e:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001472:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001474:	8082                	ret

20001476 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001476:	862a                	mv	a2,a0
20001478:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
2000147a:	ce01                	beqz	a2,20001492 <dif_uart_tx_bytes_available+0x1c>
2000147c:	c999                	beqz	a1,20001492 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000147e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001480:	5110                	lw	a2,32(a0)
20001482:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001484:	03f67613          	andi	a2,a2,63
20001488:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
2000148c:	40c68633          	sub	a2,a3,a2
20001490:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001492:	8082                	ret

20001494 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001494:	c11d                	beqz	a0,200014ba <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001496:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001498:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
2000149a:	ffd5f693          	andi	a3,a1,-3
2000149e:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200014a2:	fff58713          	addi	a4,a1,-1
200014a6:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200014a8:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200014ac:	00f77463          	bgeu	a4,a5,200014b4 <dif_uart_fifo_reset+0x20>
200014b0:	0025e593          	ori	a1,a1,2
200014b4:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200014b6:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200014b8:	8082                	ret
200014ba:	4509                	li	a0,2
200014bc:	8082                	ret

200014be <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
200014be:	c515                	beqz	a0,200014ea <dif_uart_loopback_set+0x2c>
200014c0:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
200014c2:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
200014c4:	0015b593          	seqz	a1,a1
200014c8:	4715                	li	a4,5
200014ca:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200014ce:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
200014d0:	00163613          	seqz	a2,a2
200014d4:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200014d6:	00b797b3          	sll	a5,a5,a1
200014da:	fff7c793          	not	a5,a5
200014de:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200014e0:	00b615b3          	sll	a1,a2,a1
200014e4:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200014e6:	c54c                	sw	a1,12(a0)
200014e8:	a011                	j	200014ec <dif_uart_loopback_set+0x2e>
200014ea:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200014ec:	8536                	mv	a0,a3
200014ee:	8082                	ret

200014f0 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
200014f0:	862a                	mv	a2,a0
200014f2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
200014f4:	ca11                	beqz	a2,20001508 <dif_uart_enable_rx_timeout+0x18>
200014f6:	0185d693          	srli	a3,a1,0x18
200014fa:	e699                	bnez	a3,20001508 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200014fc:	4210                	lw	a2,0(a2)
200014fe:	4501                	li	a0,0
20001500:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001504:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001506:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001508:	8082                	ret

2000150a <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
2000150a:	c511                	beqz	a0,20001516 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
2000150c:	410c                	lw	a1,0(a0)
2000150e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001510:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001514:	8082                	ret
20001516:	4509                	li	a0,2
20001518:	8082                	ret

2000151a <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
2000151a:	86aa                	mv	a3,a0
2000151c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
2000151e:	ce99                	beqz	a3,2000153c <dif_uart_get_rx_timeout+0x22>
20001520:	cd91                	beqz	a1,2000153c <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001522:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001524:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001526:	fff6c513          	not	a0,a3
2000152a:	817d                	srli	a0,a0,0x1f
2000152c:	c188                	sw	a0,0(a1)
2000152e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001530:	c611                	beqz	a2,2000153c <dif_uart_get_rx_timeout+0x22>
20001532:	010005b7          	lui	a1,0x1000
20001536:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001538:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
2000153a:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
2000153c:	8082                	ret

2000153e <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
2000153e:	88aa                	mv	a7,a0
20001540:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001542:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001544:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001546:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001548:	20069963          	bnez	a3,2000175a <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
2000154c:	200026b7          	lui	a3,0x20002
20001550:	ae468693          	addi	a3,a3,-1308 # 20001ae4 <__clz_tab>
20001554:	0cc5f063          	bgeu	a1,a2,20001614 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001558:	6741                	lui	a4,0x10
2000155a:	0ae67663          	bgeu	a2,a4,20001606 <__udivdi3+0xc8>
2000155e:	0ff00713          	li	a4,255
20001562:	00c73733          	sltu	a4,a4,a2
20001566:	070e                	slli	a4,a4,0x3
20001568:	00e65533          	srl	a0,a2,a4
2000156c:	96aa                	add	a3,a3,a0
2000156e:	0006c683          	lbu	a3,0(a3)
20001572:	02000513          	li	a0,32
20001576:	9736                	add	a4,a4,a3
20001578:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
2000157c:	00e50c63          	beq	a0,a4,20001594 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001580:	00d797b3          	sll	a5,a5,a3
20001584:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001588:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000158c:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001590:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001594:	01085893          	srli	a7,a6,0x10
20001598:	0315d7b3          	divu	a5,a1,a7
2000159c:	01081613          	slli	a2,a6,0x10
200015a0:	8241                	srli	a2,a2,0x10
200015a2:	01035713          	srli	a4,t1,0x10
200015a6:	0315f6b3          	remu	a3,a1,a7
200015aa:	853e                	mv	a0,a5
200015ac:	02f605b3          	mul	a1,a2,a5
200015b0:	06c2                	slli	a3,a3,0x10
200015b2:	8f55                	or	a4,a4,a3
200015b4:	00b77c63          	bgeu	a4,a1,200015cc <__udivdi3+0x8e>
200015b8:	9742                	add	a4,a4,a6
200015ba:	fff78513          	addi	a0,a5,-1
200015be:	01076763          	bltu	a4,a6,200015cc <__udivdi3+0x8e>
200015c2:	00b77563          	bgeu	a4,a1,200015cc <__udivdi3+0x8e>
200015c6:	ffe78513          	addi	a0,a5,-2
200015ca:	9742                	add	a4,a4,a6
200015cc:	8f0d                	sub	a4,a4,a1
200015ce:	031777b3          	remu	a5,a4,a7
200015d2:	0342                	slli	t1,t1,0x10
200015d4:	01035313          	srli	t1,t1,0x10
200015d8:	03175733          	divu	a4,a4,a7
200015dc:	07c2                	slli	a5,a5,0x10
200015de:	0067e333          	or	t1,a5,t1
200015e2:	02e606b3          	mul	a3,a2,a4
200015e6:	863a                	mv	a2,a4
200015e8:	00d37b63          	bgeu	t1,a3,200015fe <__udivdi3+0xc0>
200015ec:	9342                	add	t1,t1,a6
200015ee:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200015f2:	01036663          	bltu	t1,a6,200015fe <__udivdi3+0xc0>
200015f6:	00d37463          	bgeu	t1,a3,200015fe <__udivdi3+0xc0>
200015fa:	ffe70613          	addi	a2,a4,-2
200015fe:	0542                	slli	a0,a0,0x10
20001600:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001602:	4581                	li	a1,0
20001604:	a85d                	j	200016ba <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001606:	01000537          	lui	a0,0x1000
2000160a:	4741                	li	a4,16
2000160c:	f4a66ee3          	bltu	a2,a0,20001568 <__udivdi3+0x2a>
20001610:	4761                	li	a4,24
20001612:	bf99                	j	20001568 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001614:	e601                	bnez	a2,2000161c <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001616:	4705                	li	a4,1
20001618:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
2000161c:	6741                	lui	a4,0x10
2000161e:	08e87f63          	bgeu	a6,a4,200016bc <__udivdi3+0x17e>
20001622:	0ff00713          	li	a4,255
20001626:	01077363          	bgeu	a4,a6,2000162c <__udivdi3+0xee>
2000162a:	4521                	li	a0,8
2000162c:	00a85733          	srl	a4,a6,a0
20001630:	96ba                	add	a3,a3,a4
20001632:	0006c703          	lbu	a4,0(a3)
20001636:	02000613          	li	a2,32
2000163a:	972a                	add	a4,a4,a0
2000163c:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001640:	08e61563          	bne	a2,a4,200016ca <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001644:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001648:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
2000164a:	01085893          	srli	a7,a6,0x10
2000164e:	01081613          	slli	a2,a6,0x10
20001652:	8241                	srli	a2,a2,0x10
20001654:	01035713          	srli	a4,t1,0x10
20001658:	0317f6b3          	remu	a3,a5,a7
2000165c:	0317d7b3          	divu	a5,a5,a7
20001660:	06c2                	slli	a3,a3,0x10
20001662:	8f55                	or	a4,a4,a3
20001664:	02f60e33          	mul	t3,a2,a5
20001668:	853e                	mv	a0,a5
2000166a:	01c77c63          	bgeu	a4,t3,20001682 <__udivdi3+0x144>
2000166e:	9742                	add	a4,a4,a6
20001670:	fff78513          	addi	a0,a5,-1
20001674:	01076763          	bltu	a4,a6,20001682 <__udivdi3+0x144>
20001678:	01c77563          	bgeu	a4,t3,20001682 <__udivdi3+0x144>
2000167c:	ffe78513          	addi	a0,a5,-2
20001680:	9742                	add	a4,a4,a6
20001682:	41c70733          	sub	a4,a4,t3
20001686:	031777b3          	remu	a5,a4,a7
2000168a:	0342                	slli	t1,t1,0x10
2000168c:	01035313          	srli	t1,t1,0x10
20001690:	03175733          	divu	a4,a4,a7
20001694:	07c2                	slli	a5,a5,0x10
20001696:	0067e333          	or	t1,a5,t1
2000169a:	02e606b3          	mul	a3,a2,a4
2000169e:	863a                	mv	a2,a4
200016a0:	00d37b63          	bgeu	t1,a3,200016b6 <__udivdi3+0x178>
200016a4:	9342                	add	t1,t1,a6
200016a6:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200016aa:	01036663          	bltu	t1,a6,200016b6 <__udivdi3+0x178>
200016ae:	00d37463          	bgeu	t1,a3,200016b6 <__udivdi3+0x178>
200016b2:	ffe70613          	addi	a2,a4,-2
200016b6:	0542                	slli	a0,a0,0x10
200016b8:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
200016ba:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200016bc:	01000737          	lui	a4,0x1000
200016c0:	4541                	li	a0,16
200016c2:	f6e865e3          	bltu	a6,a4,2000162c <__udivdi3+0xee>
200016c6:	4561                	li	a0,24
200016c8:	b795                	j	2000162c <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
200016ca:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
200016ce:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
200016d2:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200016d6:	00d797b3          	sll	a5,a5,a3
200016da:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200016de:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200016e2:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200016e6:	0315f733          	remu	a4,a1,a7
200016ea:	01081793          	slli	a5,a6,0x10
200016ee:	83c1                	srli	a5,a5,0x10
200016f0:	01065513          	srli	a0,a2,0x10
200016f4:	0315d5b3          	divu	a1,a1,a7
200016f8:	0742                	slli	a4,a4,0x10
200016fa:	8f49                	or	a4,a4,a0
200016fc:	02b786b3          	mul	a3,a5,a1
20001700:	852e                	mv	a0,a1
20001702:	00d77c63          	bgeu	a4,a3,2000171a <__udivdi3+0x1dc>
20001706:	9742                	add	a4,a4,a6
20001708:	fff58513          	addi	a0,a1,-1 # ffffff <test_gateable_clocks.kLogFields.23+0xfefe6f>
2000170c:	01076763          	bltu	a4,a6,2000171a <__udivdi3+0x1dc>
20001710:	00d77563          	bgeu	a4,a3,2000171a <__udivdi3+0x1dc>
20001714:	ffe58513          	addi	a0,a1,-2
20001718:	9742                	add	a4,a4,a6
2000171a:	40d706b3          	sub	a3,a4,a3
2000171e:	0316f733          	remu	a4,a3,a7
20001722:	0642                	slli	a2,a2,0x10
20001724:	8241                	srli	a2,a2,0x10
20001726:	0316d6b3          	divu	a3,a3,a7
2000172a:	0742                	slli	a4,a4,0x10
2000172c:	02d788b3          	mul	a7,a5,a3
20001730:	00c767b3          	or	a5,a4,a2
20001734:	8736                	mv	a4,a3
20001736:	0117fc63          	bgeu	a5,a7,2000174e <__udivdi3+0x210>
2000173a:	97c2                	add	a5,a5,a6
2000173c:	fff68713          	addi	a4,a3,-1
20001740:	0107e763          	bltu	a5,a6,2000174e <__udivdi3+0x210>
20001744:	0117f563          	bgeu	a5,a7,2000174e <__udivdi3+0x210>
20001748:	ffe68713          	addi	a4,a3,-2
2000174c:	97c2                	add	a5,a5,a6
2000174e:	01051593          	slli	a1,a0,0x10
20001752:	411787b3          	sub	a5,a5,a7
20001756:	8dd9                	or	a1,a1,a4
20001758:	bdcd                	j	2000164a <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
2000175a:	14d5e263          	bltu	a1,a3,2000189e <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
2000175e:	6741                	lui	a4,0x10
20001760:	02e6ff63          	bgeu	a3,a4,2000179e <__udivdi3+0x260>
20001764:	0ff00713          	li	a4,255
20001768:	00d735b3          	sltu	a1,a4,a3
2000176c:	058e                	slli	a1,a1,0x3
2000176e:	20002737          	lui	a4,0x20002
20001772:	00b6d533          	srl	a0,a3,a1
20001776:	ae470713          	addi	a4,a4,-1308 # 20001ae4 <__clz_tab>
2000177a:	972a                	add	a4,a4,a0
2000177c:	00074703          	lbu	a4,0(a4)
20001780:	02000513          	li	a0,32
20001784:	972e                	add	a4,a4,a1
20001786:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
2000178a:	02e51163          	bne	a0,a4,200017ac <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
2000178e:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001790:	f2f6e5e3          	bltu	a3,a5,200016ba <__udivdi3+0x17c>
20001794:	00c8b533          	sltu	a0,a7,a2
20001798:	00154513          	xori	a0,a0,1
2000179c:	bf39                	j	200016ba <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
2000179e:	01000737          	lui	a4,0x1000
200017a2:	45c1                	li	a1,16
200017a4:	fce6e5e3          	bltu	a3,a4,2000176e <__udivdi3+0x230>
200017a8:	45e1                	li	a1,24
200017aa:	b7d1                	j	2000176e <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
200017ac:	00e65333          	srl	t1,a2,a4
200017b0:	00b696b3          	sll	a3,a3,a1
200017b4:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017b8:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
200017bc:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
200017c0:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017c4:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
200017c8:	00b797b3          	sll	a5,a5,a1
200017cc:	00e8d733          	srl	a4,a7,a4
200017d0:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017d4:	01031793          	slli	a5,t1,0x10
200017d8:	83c1                	srli	a5,a5,0x10
200017da:	01085713          	srli	a4,a6,0x10
200017de:	02a65633          	divu	a2,a2,a0
200017e2:	06c2                	slli	a3,a3,0x10
200017e4:	8f55                	or	a4,a4,a3
200017e6:	02c78f33          	mul	t5,a5,a2
200017ea:	8e32                	mv	t3,a2
200017ec:	01e77c63          	bgeu	a4,t5,20001804 <__udivdi3+0x2c6>
200017f0:	971a                	add	a4,a4,t1
200017f2:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
200017f6:	00676763          	bltu	a4,t1,20001804 <__udivdi3+0x2c6>
200017fa:	01e77563          	bgeu	a4,t5,20001804 <__udivdi3+0x2c6>
200017fe:	ffe60e13          	addi	t3,a2,-2
20001802:	971a                	add	a4,a4,t1
20001804:	41e70733          	sub	a4,a4,t5
20001808:	02a776b3          	remu	a3,a4,a0
2000180c:	02a75733          	divu	a4,a4,a0
20001810:	06c2                	slli	a3,a3,0x10
20001812:	02e78633          	mul	a2,a5,a4
20001816:	01081793          	slli	a5,a6,0x10
2000181a:	83c1                	srli	a5,a5,0x10
2000181c:	8fd5                	or	a5,a5,a3
2000181e:	86ba                	mv	a3,a4
20001820:	00c7fc63          	bgeu	a5,a2,20001838 <__udivdi3+0x2fa>
20001824:	979a                	add	a5,a5,t1
20001826:	fff70693          	addi	a3,a4,-1 # ffffff <test_gateable_clocks.kLogFields.23+0xfefe6f>
2000182a:	0067e763          	bltu	a5,t1,20001838 <__udivdi3+0x2fa>
2000182e:	00c7f563          	bgeu	a5,a2,20001838 <__udivdi3+0x2fa>
20001832:	ffe70693          	addi	a3,a4,-2
20001836:	979a                	add	a5,a5,t1
20001838:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000183c:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000183e:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001840:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001844:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001848:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000184a:	00def6b3          	and	a3,t4,a3
2000184e:	01055613          	srli	a2,a0,0x10
20001852:	010ede93          	srli	t4,t4,0x10
20001856:	02d80333          	mul	t1,a6,a3
2000185a:	02d606b3          	mul	a3,a2,a3
2000185e:	01035713          	srli	a4,t1,0x10
20001862:	03d80833          	mul	a6,a6,t4
20001866:	9836                	add	a6,a6,a3
20001868:	9742                	add	a4,a4,a6
2000186a:	03d60633          	mul	a2,a2,t4
2000186e:	00d77363          	bgeu	a4,a3,20001874 <__udivdi3+0x336>
20001872:	9672                	add	a2,a2,t3
20001874:	01075693          	srli	a3,a4,0x10
20001878:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
2000187a:	02c7e063          	bltu	a5,a2,2000189a <__udivdi3+0x35c>
2000187e:	d8c792e3          	bne	a5,a2,20001602 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001882:	67c1                	lui	a5,0x10
20001884:	17fd                	addi	a5,a5,-1
20001886:	8f7d                	and	a4,a4,a5
20001888:	0742                	slli	a4,a4,0x10
2000188a:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
2000188e:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001892:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001894:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001896:	e2e8f2e3          	bgeu	a7,a4,200016ba <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
2000189a:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
2000189c:	b39d                	j	20001602 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
2000189e:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
200018a0:	4501                	li	a0,0
200018a2:	bd21                	j	200016ba <__udivdi3+0x17c>
