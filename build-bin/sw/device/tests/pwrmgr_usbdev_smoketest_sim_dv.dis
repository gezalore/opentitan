
sw/device/tests/pwrmgr_usbdev_smoketest_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001b9c  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       0000084b  20001d20  20001d20  00002d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  2000256c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000000c  10000008  20002574  00004008  2**2
                  ALLOC
  8 .logs.fields  00000168  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00004170  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007d31  00000000  00000000  00004196  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001756  00000000  00000000  0000bec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000d61d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004838  00000000  00000000  0000d6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004346  00000000  00000000  00011eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000248  00000000  00000000  00016233  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002688  00000000  00000000  0001647b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000930  00000000  00000000  00018b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fec58593          	addi	a1,a1,-20 # 10000014 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	51c60613          	addi	a2,a2,1308 # 2000256c <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2e7d                	jal	2000043c <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	6100006f          	j	20000690 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0800006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1b80006f          	j	200002c4 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2000006f          	j	2000031c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2480006f          	j	20000374 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000182:	de06                	sw	ra,60(sp)
20000184:	dc16                	sw	t0,56(sp)
20000186:	da1a                	sw	t1,52(sp)
20000188:	d81e                	sw	t2,48(sp)
2000018a:	d62a                	sw	a0,44(sp)
2000018c:	d42e                	sw	a1,40(sp)
2000018e:	d232                	sw	a2,36(sp)
20000190:	d036                	sw	a3,32(sp)
20000192:	ce3a                	sw	a4,28(sp)
20000194:	cc3e                	sw	a5,24(sp)
20000196:	ca42                	sw	a6,20(sp)
20000198:	c846                	sw	a7,16(sp)
2000019a:	c672                	sw	t3,12(sp)
2000019c:	c476                	sw	t4,8(sp)
2000019e:	c27a                	sw	t5,4(sp)
200001a0:	c07e                	sw	t6,0(sp)
200001a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200001a6:	897d                	andi	a0,a0,31
200001a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200001aa:	00a5dc63          	bge	a1,a0,200001c2 <handler_exception+0x42>
200001ae:	4599                	li	a1,6
200001b0:	02a5c263          	blt	a1,a0,200001d4 <handler_exception+0x54>
200001b4:	458d                	li	a1,3
200001b6:	02b50c63          	beq	a0,a1,200001ee <handler_exception+0x6e>
200001ba:	4595                	li	a1,5
200001bc:	02b50763          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001c0:	a015                	j	200001e4 <handler_exception+0x64>
200001c2:	c115                	beqz	a0,200001e6 <handler_exception+0x66>
200001c4:	4585                	li	a1,1
200001c6:	02b50063          	beq	a0,a1,200001e6 <handler_exception+0x66>
200001ca:	4589                	li	a1,2
200001cc:	00b51c63          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200001d0:	208d                	jal	20000232 <handler_instr_ill_fault>
200001d2:	a839                	j	200001f0 <handler_exception+0x70>
200001d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200001d6:	00b50a63          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001da:	45ad                	li	a1,11
200001dc:	00b51463          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200001e0:	2065                	jal	20000288 <handler_ecall>
200001e2:	a039                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200001e4:	a001                	j	200001e4 <handler_exception+0x64>
200001e6:	2805                	jal	20000216 <handler_instr_acc_fault>
200001e8:	a021                	j	200001f0 <handler_exception+0x70>
200001ea:	2049                	jal	2000026c <handler_lsu_fault>
200001ec:	a011                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200001ee:	208d                	jal	20000250 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200001f0:	4f82                	lw	t6,0(sp)
200001f2:	4f12                	lw	t5,4(sp)
200001f4:	4ea2                	lw	t4,8(sp)
200001f6:	4e32                	lw	t3,12(sp)
200001f8:	48c2                	lw	a7,16(sp)
200001fa:	4852                	lw	a6,20(sp)
200001fc:	47e2                	lw	a5,24(sp)
200001fe:	4772                	lw	a4,28(sp)
20000200:	5682                	lw	a3,32(sp)
20000202:	5612                	lw	a2,36(sp)
20000204:	55a2                	lw	a1,40(sp)
20000206:	5532                	lw	a0,44(sp)
20000208:	53c2                	lw	t2,48(sp)
2000020a:	5352                	lw	t1,52(sp)
2000020c:	52e2                	lw	t0,56(sp)
2000020e:	50f2                	lw	ra,60(sp)
20000210:	6121                	addi	sp,sp,64
20000212:	30200073          	mret

20000216 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20000216:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20000218:	de06                	sw	ra,60(sp)
2000021a:	dc22                	sw	s0,56(sp)
2000021c:	00002597          	auipc	a1,0x2
20000220:	e9458593          	addi	a1,a1,-364 # 200020b0 <__clz_tab+0x160>
20000224:	0040                	addi	s0,sp,4
20000226:	03400613          	li	a2,52
2000022a:	8522                	mv	a0,s0
2000022c:	29a5                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
2000022e:	8522                	mv	a0,s0
20000230:	2a71                	jal	200003cc <print_exc_msg>

20000232 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20000232:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20000234:	c686                	sw	ra,76(sp)
20000236:	c4a2                	sw	s0,72(sp)
20000238:	00002597          	auipc	a1,0x2
2000023c:	eac58593          	addi	a1,a1,-340 # 200020e4 <__clz_tab+0x194>
20000240:	00d10413          	addi	s0,sp,13
20000244:	03b00613          	li	a2,59
20000248:	8522                	mv	a0,s0
2000024a:	29a9                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
2000024c:	8522                	mv	a0,s0
2000024e:	2abd                	jal	200003cc <print_exc_msg>

20000250 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000250:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000252:	de06                	sw	ra,60(sp)
20000254:	dc22                	sw	s0,56(sp)
20000256:	00002597          	auipc	a1,0x2
2000025a:	ec958593          	addi	a1,a1,-311 # 2000211f <__clz_tab+0x1cf>
2000025e:	840a                	mv	s0,sp
20000260:	03800613          	li	a2,56
20000264:	8522                	mv	a0,s0
20000266:	293d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20000268:	8522                	mv	a0,s0
2000026a:	228d                	jal	200003cc <print_exc_msg>

2000026c <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
2000026c:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
2000026e:	de06                	sw	ra,60(sp)
20000270:	dc22                	sw	s0,56(sp)
20000272:	00002597          	auipc	a1,0x2
20000276:	ee558593          	addi	a1,a1,-283 # 20002157 <__clz_tab+0x207>
2000027a:	0020                	addi	s0,sp,8
2000027c:	03000613          	li	a2,48
20000280:	8522                	mv	a0,s0
20000282:	210d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000284:	8522                	mv	a0,s0
20000286:	2299                	jal	200003cc <print_exc_msg>

20000288 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000288:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000028a:	ce06                	sw	ra,28(sp)
2000028c:	cc22                	sw	s0,24(sp)
2000028e:	00002517          	auipc	a0,0x2
20000292:	b8a50513          	addi	a0,a0,-1142 # 20001e18 <kDeviceLogBypassUartAddress>
20000296:	4108                	lw	a0,0(a0)
20000298:	c909                	beqz	a0,200002aa <handler_ecall+0x22>
2000029a:	e0010517          	auipc	a0,0xe0010
2000029e:	da250513          	addi	a0,a0,-606 # 1003c <handler_ecall.kLogFields>
200002a2:	4581                	li	a1,0
200002a4:	64f000ef          	jal	ra,200010f2 <base_log_internal_dv>
200002a8:	a821                	j	200002c0 <handler_ecall+0x38>
200002aa:	00002597          	auipc	a1,0x2
200002ae:	ab258593          	addi	a1,a1,-1358 # 20001d5c <__udivdi3+0x3a6>
200002b2:	840a                	mv	s0,sp
200002b4:	4651                	li	a2,20
200002b6:	8522                	mv	a0,s0
200002b8:	26f5                	jal	200006a4 <memcpy>
200002ba:	8522                	mv	a0,s0
200002bc:	58d000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200002c0:	a001                	j	200002c0 <handler_ecall+0x38>
200002c2:	0001                	nop

200002c4 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200002c4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200002c6:	ce86                	sw	ra,92(sp)
200002c8:	cc96                	sw	t0,88(sp)
200002ca:	ca9a                	sw	t1,84(sp)
200002cc:	c89e                	sw	t2,80(sp)
200002ce:	c6a2                	sw	s0,76(sp)
200002d0:	c4aa                	sw	a0,72(sp)
200002d2:	c2ae                	sw	a1,68(sp)
200002d4:	c0b2                	sw	a2,64(sp)
200002d6:	de36                	sw	a3,60(sp)
200002d8:	dc3a                	sw	a4,56(sp)
200002da:	da3e                	sw	a5,52(sp)
200002dc:	d842                	sw	a6,48(sp)
200002de:	d646                	sw	a7,44(sp)
200002e0:	d472                	sw	t3,40(sp)
200002e2:	d276                	sw	t4,36(sp)
200002e4:	d07a                	sw	t5,32(sp)
200002e6:	ce7e                	sw	t6,28(sp)
200002e8:	00002517          	auipc	a0,0x2
200002ec:	b3050513          	addi	a0,a0,-1232 # 20001e18 <kDeviceLogBypassUartAddress>
200002f0:	4108                	lw	a0,0(a0)
200002f2:	c909                	beqz	a0,20000304 <handler_irq_software+0x40>
200002f4:	e0010517          	auipc	a0,0xe0010
200002f8:	d0c50513          	addi	a0,a0,-756 # 10000 <_dv_log_offset>
200002fc:	4581                	li	a1,0
200002fe:	5f5000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000302:	a821                	j	2000031a <handler_irq_software+0x56>
20000304:	00002597          	auipc	a1,0x2
20000308:	a1c58593          	addi	a1,a1,-1508 # 20001d20 <__udivdi3+0x36a>
2000030c:	0020                	addi	s0,sp,8
2000030e:	4651                	li	a2,20
20000310:	8522                	mv	a0,s0
20000312:	2e49                	jal	200006a4 <memcpy>
20000314:	8522                	mv	a0,s0
20000316:	533000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000031a:	a001                	j	2000031a <handler_irq_software+0x56>

2000031c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
2000031c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
2000031e:	ce86                	sw	ra,92(sp)
20000320:	cc96                	sw	t0,88(sp)
20000322:	ca9a                	sw	t1,84(sp)
20000324:	c89e                	sw	t2,80(sp)
20000326:	c6a2                	sw	s0,76(sp)
20000328:	c4aa                	sw	a0,72(sp)
2000032a:	c2ae                	sw	a1,68(sp)
2000032c:	c0b2                	sw	a2,64(sp)
2000032e:	de36                	sw	a3,60(sp)
20000330:	dc3a                	sw	a4,56(sp)
20000332:	da3e                	sw	a5,52(sp)
20000334:	d842                	sw	a6,48(sp)
20000336:	d646                	sw	a7,44(sp)
20000338:	d472                	sw	t3,40(sp)
2000033a:	d276                	sw	t4,36(sp)
2000033c:	d07a                	sw	t5,32(sp)
2000033e:	ce7e                	sw	t6,28(sp)
20000340:	00002517          	auipc	a0,0x2
20000344:	ad850513          	addi	a0,a0,-1320 # 20001e18 <kDeviceLogBypassUartAddress>
20000348:	4108                	lw	a0,0(a0)
2000034a:	c909                	beqz	a0,2000035c <handler_irq_timer+0x40>
2000034c:	e0010517          	auipc	a0,0xe0010
20000350:	cc850513          	addi	a0,a0,-824 # 10014 <handler_irq_timer.kLogFields>
20000354:	4581                	li	a1,0
20000356:	59d000ef          	jal	ra,200010f2 <base_log_internal_dv>
2000035a:	a821                	j	20000372 <handler_irq_timer+0x56>
2000035c:	00002597          	auipc	a1,0x2
20000360:	9d858593          	addi	a1,a1,-1576 # 20001d34 <__udivdi3+0x37e>
20000364:	0020                	addi	s0,sp,8
20000366:	4651                	li	a2,20
20000368:	8522                	mv	a0,s0
2000036a:	2e2d                	jal	200006a4 <memcpy>
2000036c:	8522                	mv	a0,s0
2000036e:	4db000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000372:	a001                	j	20000372 <handler_irq_timer+0x56>

20000374 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000374:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000376:	ce86                	sw	ra,92(sp)
20000378:	cc96                	sw	t0,88(sp)
2000037a:	ca9a                	sw	t1,84(sp)
2000037c:	c89e                	sw	t2,80(sp)
2000037e:	c6a2                	sw	s0,76(sp)
20000380:	c4aa                	sw	a0,72(sp)
20000382:	c2ae                	sw	a1,68(sp)
20000384:	c0b2                	sw	a2,64(sp)
20000386:	de36                	sw	a3,60(sp)
20000388:	dc3a                	sw	a4,56(sp)
2000038a:	da3e                	sw	a5,52(sp)
2000038c:	d842                	sw	a6,48(sp)
2000038e:	d646                	sw	a7,44(sp)
20000390:	d472                	sw	t3,40(sp)
20000392:	d276                	sw	t4,36(sp)
20000394:	d07a                	sw	t5,32(sp)
20000396:	ce7e                	sw	t6,28(sp)
20000398:	00002517          	auipc	a0,0x2
2000039c:	a8050513          	addi	a0,a0,-1408 # 20001e18 <kDeviceLogBypassUartAddress>
200003a0:	4108                	lw	a0,0(a0)
200003a2:	c909                	beqz	a0,200003b4 <handler_irq_external+0x40>
200003a4:	e0010517          	auipc	a0,0xe0010
200003a8:	c8450513          	addi	a0,a0,-892 # 10028 <handler_irq_external.kLogFields>
200003ac:	4581                	li	a1,0
200003ae:	545000ef          	jal	ra,200010f2 <base_log_internal_dv>
200003b2:	a821                	j	200003ca <handler_irq_external+0x56>
200003b4:	00002597          	auipc	a1,0x2
200003b8:	99458593          	addi	a1,a1,-1644 # 20001d48 <__udivdi3+0x392>
200003bc:	0020                	addi	s0,sp,8
200003be:	4651                	li	a2,20
200003c0:	8522                	mv	a0,s0
200003c2:	24cd                	jal	200006a4 <memcpy>
200003c4:	8522                	mv	a0,s0
200003c6:	483000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200003ca:	a001                	j	200003ca <handler_irq_external+0x56>

200003cc <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200003cc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200003ce:	ce06                	sw	ra,28(sp)
200003d0:	cc22                	sw	s0,24(sp)
200003d2:	ca26                	sw	s1,20(sp)
200003d4:	00002597          	auipc	a1,0x2
200003d8:	a4458593          	addi	a1,a1,-1468 # 20001e18 <kDeviceLogBypassUartAddress>
200003dc:	418c                	lw	a1,0(a1)
200003de:	842a                	mv	s0,a0
200003e0:	c19d                	beqz	a1,20000406 <print_exc_msg+0x3a>
200003e2:	e0010517          	auipc	a0,0xe0010
200003e6:	c6e50513          	addi	a0,a0,-914 # 10050 <print_exc_msg.kLogFields>
200003ea:	4585                	li	a1,1
200003ec:	8622                	mv	a2,s0
200003ee:	505000ef          	jal	ra,200010f2 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200003f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200003f6:	e0010517          	auipc	a0,0xe0010
200003fa:	c6e50513          	addi	a0,a0,-914 # 10064 <print_exc_msg.kLogFields.6>
200003fe:	4585                	li	a1,1
20000400:	4f3000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000404:	a81d                	j	2000043a <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000406:	00002597          	auipc	a1,0x2
2000040a:	96a58593          	addi	a1,a1,-1686 # 20001d70 <__udivdi3+0x3ba>
2000040e:	848a                	mv	s1,sp
20000410:	4651                	li	a2,20
20000412:	8526                	mv	a0,s1
20000414:	2c41                	jal	200006a4 <memcpy>
20000416:	8526                	mv	a0,s1
20000418:	85a2                	mv	a1,s0
2000041a:	42f000ef          	jal	ra,20001048 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000041e:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000422:	00002597          	auipc	a1,0x2
20000426:	96258593          	addi	a1,a1,-1694 # 20001d84 <__udivdi3+0x3ce>
2000042a:	848a                	mv	s1,sp
2000042c:	4651                	li	a2,20
2000042e:	8526                	mv	a0,s1
20000430:	2c95                	jal	200006a4 <memcpy>
20000432:	8526                	mv	a0,s1
20000434:	85a2                	mv	a1,s0
20000436:	413000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
2000043a:	a001                	j	2000043a <print_exc_msg+0x6e>

2000043c <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
2000043c:	1141                	addi	sp,sp,-16
2000043e:	c606                	sw	ra,12(sp)
20000440:	c422                	sw	s0,8(sp)
20000442:	6511                	lui	a0,0x4
20000444:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000448:	2231                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
2000044a:	00002517          	auipc	a0,0x2
2000044e:	99e50513          	addi	a0,a0,-1634 # 20001de8 <kDeviceType>
20000452:	4108                	lw	a0,0(a0)
20000454:	c111                	beqz	a0,20000458 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000456:	280d                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000458:	2ce1                	jal	20000730 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
2000045a:	00002597          	auipc	a1,0x2
2000045e:	a6258593          	addi	a1,a1,-1438 # 20001ebc <kTestConfig>
20000462:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000466:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000468:	c191                	beqz	a1,2000046c <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
2000046a:	2839                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
2000046c:	2435                	jal	20000698 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
2000046e:	e409                	bnez	s0,20000478 <main+0x3c>
20000470:	6531                	lui	a0,0xc
20000472:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000476:	a019                	j	2000047c <main+0x40>
20000478:	6525                	lui	a0,0x9
2000047a:	0535                	addi	a0,a0,13
2000047c:	28e1                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000047e:	4505                	li	a0,1
20000480:	4422                	lw	s0,8(sp)
20000482:	40b2                	lw	ra,12(sp)
20000484:	0141                	addi	sp,sp,16
20000486:	8082                	ret

20000488 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000488:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
2000048a:	ce06                	sw	ra,28(sp)
2000048c:	cc22                	sw	s0,24(sp)
2000048e:	ca26                	sw	s1,20(sp)
20000490:	f0000597          	auipc	a1,0xf0000
20000494:	b7858593          	addi	a1,a1,-1160 # 10000008 <_data_end>
20000498:	40000537          	lui	a0,0x40000
2000049c:	154010ef          	jal	ra,200015f0 <dif_uart_init>
200004a0:	00002497          	auipc	s1,0x2
200004a4:	97848493          	addi	s1,s1,-1672 # 20001e18 <kDeviceLogBypassUartAddress>
200004a8:	c915                	beqz	a0,200004dc <init_uart+0x54>
200004aa:	4088                	lw	a0,0(s1)
200004ac:	c909                	beqz	a0,200004be <init_uart+0x36>
200004ae:	e0010517          	auipc	a0,0xe0010
200004b2:	bca50513          	addi	a0,a0,-1078 # 10078 <init_uart.kLogFields>
200004b6:	4581                	li	a1,0
200004b8:	43b000ef          	jal	ra,200010f2 <base_log_internal_dv>
200004bc:	a821                	j	200004d4 <init_uart+0x4c>
200004be:	00002597          	auipc	a1,0x2
200004c2:	8da58593          	addi	a1,a1,-1830 # 20001d98 <__udivdi3+0x3e2>
200004c6:	840a                	mv	s0,sp
200004c8:	4651                	li	a2,20
200004ca:	8522                	mv	a0,s0
200004cc:	2ae1                	jal	200006a4 <memcpy>
200004ce:	8522                	mv	a0,s0
200004d0:	379000ef          	jal	ra,20001048 <base_log_internal_core>
200004d4:	6531                	lui	a0,0xc
200004d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004da:	28ad                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200004dc:	00002517          	auipc	a0,0x2
200004e0:	92c50513          	addi	a0,a0,-1748 # 20001e08 <kUartBaudrate>
200004e4:	4108                	lw	a0,0(a0)
200004e6:	00002597          	auipc	a1,0x2
200004ea:	91258593          	addi	a1,a1,-1774 # 20001df8 <kClockFreqPeripheralHz>
200004ee:	418c                	lw	a1,0(a1)
200004f0:	c02a                	sw	a0,0(sp)
200004f2:	c22e                	sw	a1,4(sp)
200004f4:	4505                	li	a0,1
200004f6:	c42a                	sw	a0,8(sp)
200004f8:	c62a                	sw	a0,12(sp)
200004fa:	f0000517          	auipc	a0,0xf0000
200004fe:	b0e50513          	addi	a0,a0,-1266 # 10000008 <_data_end>
20000502:	858a                	mv	a1,sp
20000504:	0fa010ef          	jal	ra,200015fe <dif_uart_configure>
20000508:	c915                	beqz	a0,2000053c <init_uart+0xb4>
2000050a:	4088                	lw	a0,0(s1)
2000050c:	c909                	beqz	a0,2000051e <init_uart+0x96>
2000050e:	e0010517          	auipc	a0,0xe0010
20000512:	b7e50513          	addi	a0,a0,-1154 # 1008c <init_uart.kLogFields.2>
20000516:	4581                	li	a1,0
20000518:	3db000ef          	jal	ra,200010f2 <base_log_internal_dv>
2000051c:	a821                	j	20000534 <init_uart+0xac>
2000051e:	00002597          	auipc	a1,0x2
20000522:	88e58593          	addi	a1,a1,-1906 # 20001dac <__udivdi3+0x3f6>
20000526:	840a                	mv	s0,sp
20000528:	4651                	li	a2,20
2000052a:	8522                	mv	a0,s0
2000052c:	2aa5                	jal	200006a4 <memcpy>
2000052e:	8522                	mv	a0,s0
20000530:	319000ef          	jal	ra,20001048 <base_log_internal_core>
20000534:	6531                	lui	a0,0xc
20000536:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000053a:	2829                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
2000053c:	f0000517          	auipc	a0,0xf0000
20000540:	acc50513          	addi	a0,a0,-1332 # 10000008 <_data_end>
20000544:	401000ef          	jal	ra,20001144 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000548:	44d2                	lw	s1,20(sp)
2000054a:	4462                	lw	s0,24(sp)
2000054c:	40f2                	lw	ra,28(sp)
2000054e:	6105                	addi	sp,sp,32
20000550:	8082                	ret
	...

20000554 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000554:	1101                	addi	sp,sp,-32
20000556:	ce06                	sw	ra,28(sp)
20000558:	cc22                	sw	s0,24(sp)
2000055a:	65b1                	lui	a1,0xc
2000055c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000560:	02b50163          	beq	a0,a1,20000582 <test_status_set+0x2e>
20000564:	65a5                	lui	a1,0x9
20000566:	05b5                	addi	a1,a1,13
20000568:	02b50f63          	beq	a0,a1,200005a6 <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
2000056c:	00002597          	auipc	a1,0x2
20000570:	8a858593          	addi	a1,a1,-1880 # 20001e14 <kDeviceTestStatusAddress>
20000574:	418c                	lw	a1,0(a1)
20000576:	c191                	beqz	a1,2000057a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000578:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
2000057a:	4462                	lw	s0,24(sp)
2000057c:	40f2                	lw	ra,28(sp)
2000057e:	6105                	addi	sp,sp,32
20000580:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000582:	00002517          	auipc	a0,0x2
20000586:	89650513          	addi	a0,a0,-1898 # 20001e18 <kDeviceLogBypassUartAddress>
2000058a:	4108                	lw	a0,0(a0)
2000058c:	ed1d                	bnez	a0,200005ca <test_status_set+0x76>
2000058e:	00002597          	auipc	a1,0x2
20000592:	84658593          	addi	a1,a1,-1978 # 20001dd4 <__udivdi3+0x41e>
20000596:	840a                	mv	s0,sp
20000598:	4651                	li	a2,20
2000059a:	8522                	mv	a0,s0
2000059c:	2221                	jal	200006a4 <memcpy>
2000059e:	8522                	mv	a0,s0
200005a0:	2a9000ef          	jal	ra,20001048 <base_log_internal_core>
200005a4:	a815                	j	200005d8 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005a6:	00002517          	auipc	a0,0x2
200005aa:	87250513          	addi	a0,a0,-1934 # 20001e18 <kDeviceLogBypassUartAddress>
200005ae:	4108                	lw	a0,0(a0)
200005b0:	ed15                	bnez	a0,200005ec <test_status_set+0x98>
200005b2:	00002597          	auipc	a1,0x2
200005b6:	80e58593          	addi	a1,a1,-2034 # 20001dc0 <__udivdi3+0x40a>
200005ba:	840a                	mv	s0,sp
200005bc:	4651                	li	a2,20
200005be:	8522                	mv	a0,s0
200005c0:	20d5                	jal	200006a4 <memcpy>
200005c2:	8522                	mv	a0,s0
200005c4:	285000ef          	jal	ra,20001048 <base_log_internal_core>
200005c8:	a80d                	j	200005fa <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200005ca:	e0010517          	auipc	a0,0xe0010
200005ce:	aea50513          	addi	a0,a0,-1302 # 100b4 <test_status_set.kLogFields.2>
200005d2:	4581                	li	a1,0
200005d4:	31f000ef          	jal	ra,200010f2 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005d8:	00002517          	auipc	a0,0x2
200005dc:	83c50513          	addi	a0,a0,-1988 # 20001e14 <kDeviceTestStatusAddress>
200005e0:	4108                	lw	a0,0(a0)
200005e2:	c50d                	beqz	a0,2000060c <test_status_set+0xb8>
200005e4:	65b1                	lui	a1,0xc
200005e6:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200005ea:	a005                	j	2000060a <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005ec:	e0010517          	auipc	a0,0xe0010
200005f0:	ab450513          	addi	a0,a0,-1356 # 100a0 <test_status_set.kLogFields>
200005f4:	4581                	li	a1,0
200005f6:	2fd000ef          	jal	ra,200010f2 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005fa:	00002517          	auipc	a0,0x2
200005fe:	81a50513          	addi	a0,a0,-2022 # 20001e14 <kDeviceTestStatusAddress>
20000602:	4108                	lw	a0,0(a0)
20000604:	c501                	beqz	a0,2000060c <test_status_set+0xb8>
20000606:	65a5                	lui	a1,0x9
20000608:	05b5                	addi	a1,a1,13
2000060a:	c10c                	sw	a1,0(a0)
2000060c:	2051                	jal	20000690 <abort>
	...

20000610 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000610:	10500073          	wfi
20000614:	8082                	ret

20000616 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000616:	1141                	addi	sp,sp,-16
20000618:	c606                	sw	ra,12(sp)
2000061a:	00001597          	auipc	a1,0x1
2000061e:	7d658593          	addi	a1,a1,2006 # 20001df0 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000622:	41d0                	lw	a2,4(a1)
20000624:	4194                	lw	a3,0(a1)
20000626:	02a605b3          	mul	a1,a2,a0
2000062a:	02a6b633          	mulhu	a2,a3,a0
2000062e:	95b2                	add	a1,a1,a2
20000630:	02a68533          	mul	a0,a3,a0
20000634:	000f4637          	lui	a2,0xf4
20000638:	24060613          	addi	a2,a2,576 # f4240 <test_main.kLogFields.20+0xe40ec>
2000063c:	4681                	li	a3,0
2000063e:	378010ef          	jal	ra,200019b6 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000642:	4801                	li	a6,0
20000644:	4701                	li	a4,0

20000646 <read0>:
20000646:	b8002873          	csrr	a6,mcycleh
2000064a:	b00026f3          	csrr	a3,mcycle
2000064e:	b8002773          	csrr	a4,mcycleh
20000652:	fee81ae3          	bne	a6,a4,20000646 <read0>
20000656:	4781                	li	a5,0
20000658:	4601                	li	a2,0

2000065a <read1>:
2000065a:	b80027f3          	csrr	a5,mcycleh
2000065e:	b0002773          	csrr	a4,mcycle
20000662:	b8002673          	csrr	a2,mcycleh
20000666:	fec79ae3          	bne	a5,a2,2000065a <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
2000066a:	00d73633          	sltu	a2,a4,a3
2000066e:	410787b3          	sub	a5,a5,a6
20000672:	8f91                	sub	a5,a5,a2
20000674:	00b78663          	beq	a5,a1,20000680 <read1+0x26>
20000678:	00b7b733          	sltu	a4,a5,a1
2000067c:	ff69                	bnez	a4,20000656 <read0+0x10>
2000067e:	a031                	j	2000068a <read1+0x30>
20000680:	40d70633          	sub	a2,a4,a3
20000684:	00a63733          	sltu	a4,a2,a0
20000688:	f779                	bnez	a4,20000656 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
2000068a:	40b2                	lw	ra,12(sp)
2000068c:	0141                	addi	sp,sp,16
2000068e:	8082                	ret

20000690 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000690:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000694:	bff5                	j	20000690 <abort>
	...

20000698 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000698:	8082                	ret
	...

2000069c <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
2000069c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
2000069e:	8082                	ret

200006a0 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200006a0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200006a2:	8082                	ret

200006a4 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200006a4:	ca11                	beqz	a2,200006b8 <memcpy+0x14>
200006a6:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200006a8:	00058703          	lb	a4,0(a1)
200006ac:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006b0:	167d                	addi	a2,a2,-1
200006b2:	0685                	addi	a3,a3,1
200006b4:	0585                	addi	a1,a1,1
200006b6:	fa6d                	bnez	a2,200006a8 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006b8:	8082                	ret

200006ba <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ba:	c619                	beqz	a2,200006c8 <memset+0xe>
200006bc:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006be:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006c2:	167d                	addi	a2,a2,-1
200006c4:	0685                	addi	a3,a3,1
200006c6:	fe65                	bnez	a2,200006be <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006c8:	8082                	ret

200006ca <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006ca:	ce09                	beqz	a2,200006e4 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006cc:	00054683          	lbu	a3,0(a0)
200006d0:	0005c703          	lbu	a4,0(a1)
200006d4:	00e6ea63          	bltu	a3,a4,200006e8 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006d8:	00d76b63          	bltu	a4,a3,200006ee <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006dc:	167d                	addi	a2,a2,-1
200006de:	0585                	addi	a1,a1,1
200006e0:	0505                	addi	a0,a0,1
200006e2:	f66d                	bnez	a2,200006cc <memcmp+0x2>
200006e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006e6:	8082                	ret
200006e8:	fd600513          	li	a0,-42
200006ec:	8082                	ret
200006ee:	02a00513          	li	a0,42
200006f2:	8082                	ret

200006f4 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006f4:	ca11                	beqz	a2,20000708 <memchr+0x14>
200006f6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006fa:	00054683          	lbu	a3,0(a0)
200006fe:	00b68663          	beq	a3,a1,2000070a <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000702:	167d                	addi	a2,a2,-1
20000704:	0505                	addi	a0,a0,1
20000706:	fa75                	bnez	a2,200006fa <memchr+0x6>
20000708:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000070a:	8082                	ret

2000070c <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000070c:	ce09                	beqz	a2,20000726 <memrchr+0x1a>
2000070e:	fff50693          	addi	a3,a0,-1
20000712:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000716:	00c68733          	add	a4,a3,a2
2000071a:	00074703          	lbu	a4,0(a4)
2000071e:	00b70663          	beq	a4,a1,2000072a <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000722:	167d                	addi	a2,a2,-1
20000724:	fa6d                	bnez	a2,20000716 <memrchr+0xa>
20000726:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000728:	8082                	ret
2000072a:	9532                	add	a0,a0,a2
2000072c:	157d                	addi	a0,a0,-1
2000072e:	8082                	ret

20000730 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:33
static bool compare_wakeup_reasons(dif_pwrmgr_wakeup_reason_t lhs,
                                   dif_pwrmgr_wakeup_reason_t rhs) {
  return lhs.types == rhs.types && lhs.request_sources == rhs.request_sources;
}

bool test_main(void) {
20000730:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:34
  CHECK(dif_pwrmgr_init(
20000732:	d606                	sw	ra,44(sp)
20000734:	d422                	sw	s0,40(sp)
20000736:	d226                	sw	s1,36(sp)
20000738:	d04a                	sw	s2,32(sp)
2000073a:	f0000597          	auipc	a1,0xf0000
2000073e:	8d258593          	addi	a1,a1,-1838 # 1000000c <pwrmgr>
20000742:	40400537          	lui	a0,0x40400
20000746:	2c09                	jal	20000958 <dif_pwrmgr_init>
20000748:	00001917          	auipc	s2,0x1
2000074c:	6d090913          	addi	s2,s2,1744 # 20001e18 <kDeviceLogBypassUartAddress>
20000750:	c91d                	beqz	a0,20000786 <test_main+0x56>
20000752:	00092503          	lw	a0,0(s2)
20000756:	c909                	beqz	a0,20000768 <test_main+0x38>
20000758:	e0010517          	auipc	a0,0xe0010
2000075c:	97050513          	addi	a0,a0,-1680 # 100c8 <test_main.kLogFields>
20000760:	4581                	li	a1,0
20000762:	191000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000766:	a821                	j	2000077e <test_main+0x4e>
20000768:	00001597          	auipc	a1,0x1
2000076c:	6b458593          	addi	a1,a1,1716 # 20001e1c <kDeviceLogBypassUartAddress+0x4>
20000770:	0020                	addi	s0,sp,8
20000772:	4651                	li	a2,20
20000774:	8522                	mv	a0,s0
20000776:	373d                	jal	200006a4 <memcpy>
20000778:	8522                	mv	a0,s0
2000077a:	0cf000ef          	jal	ra,20001048 <base_log_internal_core>
2000077e:	6531                	lui	a0,0xc
20000780:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000784:	3bc1                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:43
            },
            &pwrmgr) == kDifPwrmgrOk);

  // Assuming the chip hasn't slept yet, wakeup reason should be empty.
  dif_pwrmgr_wakeup_reason_t wakeup_reason;
  CHECK(dif_pwrmgr_wakeup_reason_get(&pwrmgr, &wakeup_reason) == kDifPwrmgrOk);
20000786:	f0000517          	auipc	a0,0xf0000
2000078a:	88650513          	addi	a0,a0,-1914 # 1000000c <pwrmgr>
2000078e:	858a                	mv	a1,sp
20000790:	26ed                	jal	20000b7a <dif_pwrmgr_wakeup_reason_get>
20000792:	c91d                	beqz	a0,200007c8 <test_main+0x98>
20000794:	00092503          	lw	a0,0(s2)
20000798:	c909                	beqz	a0,200007aa <test_main+0x7a>
2000079a:	e0010517          	auipc	a0,0xe0010
2000079e:	94250513          	addi	a0,a0,-1726 # 100dc <test_main.kLogFields.2>
200007a2:	4581                	li	a1,0
200007a4:	14f000ef          	jal	ra,200010f2 <base_log_internal_dv>
200007a8:	a821                	j	200007c0 <test_main+0x90>
200007aa:	00001597          	auipc	a1,0x1
200007ae:	68658593          	addi	a1,a1,1670 # 20001e30 <kDeviceLogBypassUartAddress+0x18>
200007b2:	0020                	addi	s0,sp,8
200007b4:	4651                	li	a2,20
200007b6:	8522                	mv	a0,s0
200007b8:	35f5                	jal	200006a4 <memcpy>
200007ba:	8522                	mv	a0,s0
200007bc:	08d000ef          	jal	ra,20001048 <base_log_internal_core>
200007c0:	6531                	lui	a0,0xc
200007c2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007c6:	3379                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:56
      .types = kDifPwrmgrWakeupTypeRequest,
      .request_sources = kDifPwrmgrWakeupRequestSourceThree,
  };

  bool low_power_exit = false;
  if (compare_wakeup_reasons(wakeup_reason, exp_por_wakeup_reason)) {
200007c8:	00014483          	lbu	s1,0(sp)
200007cc:	4412                	lw	s0,4(sp)
compare_wakeup_reasons():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:30
  return lhs.types == rhs.types && lhs.request_sources == rhs.request_sources;
200007ce:	00946533          	or	a0,s0,s1
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:56
  if (compare_wakeup_reasons(wakeup_reason, exp_por_wakeup_reason)) {
200007d2:	c115                	beqz	a0,200007f6 <test_main+0xc6>
200007d4:	00092503          	lw	a0,0(s2)
200007d8:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:58
    LOG_INFO("Powered up for the first time, begin test");
  } else if (compare_wakeup_reasons(wakeup_reason, exp_test_wakeup_reason)) {
200007da:	02b41963          	bne	s0,a1,2000080c <test_main+0xdc>
200007de:	4585                	li	a1,1
200007e0:	02b49663          	bne	s1,a1,2000080c <test_main+0xdc>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:60
    low_power_exit = true;
    LOG_INFO("USB wakeup detected");
200007e4:	c941                	beqz	a0,20000874 <test_main+0x144>
200007e6:	e0010517          	auipc	a0,0xe0010
200007ea:	91e50513          	addi	a0,a0,-1762 # 10104 <test_main.kLogFields.8>
200007ee:	4581                	li	a1,0
200007f0:	103000ef          	jal	ra,200010f2 <base_log_internal_dv>
200007f4:	aa91                	j	20000948 <test_main+0x218>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:57
    LOG_INFO("Powered up for the first time, begin test");
200007f6:	00092483          	lw	s1,0(s2)
200007fa:	c485                	beqz	s1,20000822 <test_main+0xf2>
200007fc:	e0010517          	auipc	a0,0xe0010
20000800:	8f450513          	addi	a0,a0,-1804 # 100f0 <test_main.kLogFields.5>
20000804:	4581                	li	a1,0
20000806:	0ed000ef          	jal	ra,200010f2 <base_log_internal_dv>
2000080a:	a03d                	j	20000838 <test_main+0x108>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:62
  } else {
    LOG_ERROR("Unexpected wakeup reason (types: %2x, sources: %8x)",
2000080c:	c141                	beqz	a0,2000088c <test_main+0x15c>
2000080e:	e0010517          	auipc	a0,0xe0010
20000812:	90a50513          	addi	a0,a0,-1782 # 10118 <test_main.kLogFields.11>
20000816:	4589                	li	a1,2
20000818:	8626                	mv	a2,s1
2000081a:	86a2                	mv	a3,s0
2000081c:	0d7000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000820:	a061                	j	200008a8 <test_main+0x178>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:57
    LOG_INFO("Powered up for the first time, begin test");
20000822:	00001597          	auipc	a1,0x1
20000826:	62258593          	addi	a1,a1,1570 # 20001e44 <kDeviceLogBypassUartAddress+0x2c>
2000082a:	0020                	addi	s0,sp,8
2000082c:	4651                	li	a2,20
2000082e:	8522                	mv	a0,s0
20000830:	3d95                	jal	200006a4 <memcpy>
20000832:	8522                	mv	a0,s0
20000834:	015000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:70
  }

  // Fake low power entry through usb
  // Force usb to output suspend indication
  if (!low_power_exit) {
    usbdev_wake(true);
20000838:	4505                	li	a0,1
2000083a:	001000ef          	jal	ra,2000103a <usbdev_wake>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:71
    usbdev_force_suspend();
2000083e:	7ea000ef          	jal	ra,20001028 <usbdev_force_suspend>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:72
    usbdev_force_dx_pullup(kDpSel, true);
20000842:	4585                	li	a1,1
20000844:	4501                	li	a0,0
20000846:	7bc000ef          	jal	ra,20001002 <usbdev_force_dx_pullup>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:73
    usbdev_force_dx_pullup(kDnSel, true);
2000084a:	4505                	li	a0,1
2000084c:	4585                	li	a1,1
2000084e:	7b4000ef          	jal	ra,20001002 <usbdev_force_dx_pullup>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:76

    // Enable low power on the next WFI with default settings.
    CHECK(dif_pwrmgr_set_request_sources(&pwrmgr, kDifPwrmgrReqTypeWakeup,
20000852:	effff517          	auipc	a0,0xeffff
20000856:	7ba50513          	addi	a0,a0,1978 # 1000000c <pwrmgr>
2000085a:	4611                	li	a2,4
2000085c:	4581                	li	a1,0
2000085e:	226d                	jal	20000a08 <dif_pwrmgr_set_request_sources>
20000860:	c52d                	beqz	a0,200008ca <test_main+0x19a>
20000862:	c4a9                	beqz	s1,200008ac <test_main+0x17c>
20000864:	e0010517          	auipc	a0,0xe0010
20000868:	8c850513          	addi	a0,a0,-1848 # 1012c <test_main.kLogFields.14>
2000086c:	4581                	li	a1,0
2000086e:	085000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000872:	a881                	j	200008c2 <test_main+0x192>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:60
    LOG_INFO("USB wakeup detected");
20000874:	00001597          	auipc	a1,0x1
20000878:	5e458593          	addi	a1,a1,1508 # 20001e58 <kDeviceLogBypassUartAddress+0x40>
2000087c:	0020                	addi	s0,sp,8
2000087e:	4651                	li	a2,20
20000880:	8522                	mv	a0,s0
20000882:	350d                	jal	200006a4 <memcpy>
20000884:	8522                	mv	a0,s0
20000886:	7c2000ef          	jal	ra,20001048 <base_log_internal_core>
2000088a:	a87d                	j	20000948 <test_main+0x218>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:62
    LOG_ERROR("Unexpected wakeup reason (types: %2x, sources: %8x)",
2000088c:	00001597          	auipc	a1,0x1
20000890:	5e058593          	addi	a1,a1,1504 # 20001e6c <kDeviceLogBypassUartAddress+0x54>
20000894:	00810913          	addi	s2,sp,8
20000898:	4651                	li	a2,20
2000089a:	854a                	mv	a0,s2
2000089c:	3521                	jal	200006a4 <memcpy>
2000089e:	854a                	mv	a0,s2
200008a0:	85a6                	mv	a1,s1
200008a2:	8622                	mv	a2,s0
200008a4:	7a4000ef          	jal	ra,20001048 <base_log_internal_core>
200008a8:	4501                	li	a0,0
200008aa:	a045                	j	2000094a <test_main+0x21a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:76
    CHECK(dif_pwrmgr_set_request_sources(&pwrmgr, kDifPwrmgrReqTypeWakeup,
200008ac:	00001597          	auipc	a1,0x1
200008b0:	5d458593          	addi	a1,a1,1492 # 20001e80 <kDeviceLogBypassUartAddress+0x68>
200008b4:	0020                	addi	s0,sp,8
200008b6:	4651                	li	a2,20
200008b8:	8522                	mv	a0,s0
200008ba:	33ed                	jal	200006a4 <memcpy>
200008bc:	8522                	mv	a0,s0
200008be:	78a000ef          	jal	ra,20001048 <base_log_internal_core>
200008c2:	6531                	lui	a0,0xc
200008c4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008c8:	3171                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:79
                                         kDifPwrmgrWakeupRequestSourceThree) ==
          kDifPwrmgrConfigOk);
    CHECK(dif_pwrmgr_set_domain_config(
200008ca:	effff517          	auipc	a0,0xeffff
200008ce:	74250513          	addi	a0,a0,1858 # 1000000c <pwrmgr>
200008d2:	45a1                	li	a1,8
200008d4:	20d5                	jal	200009b8 <dif_pwrmgr_set_domain_config>
200008d6:	c90d                	beqz	a0,20000908 <test_main+0x1d8>
200008d8:	c889                	beqz	s1,200008ea <test_main+0x1ba>
200008da:	e0010517          	auipc	a0,0xe0010
200008de:	86650513          	addi	a0,a0,-1946 # 10140 <test_main.kLogFields.17>
200008e2:	4581                	li	a1,0
200008e4:	00f000ef          	jal	ra,200010f2 <base_log_internal_dv>
200008e8:	a821                	j	20000900 <test_main+0x1d0>
200008ea:	00001597          	auipc	a1,0x1
200008ee:	5aa58593          	addi	a1,a1,1450 # 20001e94 <kDeviceLogBypassUartAddress+0x7c>
200008f2:	0020                	addi	s0,sp,8
200008f4:	4651                	li	a2,20
200008f6:	8522                	mv	a0,s0
200008f8:	3375                	jal	200006a4 <memcpy>
200008fa:	8522                	mv	a0,s0
200008fc:	74c000ef          	jal	ra,20001048 <base_log_internal_core>
20000900:	6531                	lui	a0,0xc
20000902:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000906:	31b9                	jal	20000554 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:82
              &pwrmgr, kDifPwrmgrDomainOptionUsbClockInActivePower) ==
          kDifPwrmgrConfigOk);
    CHECK(dif_pwrmgr_low_power_set_enabled(&pwrmgr, kDifPwrmgrToggleEnabled) ==
20000908:	effff517          	auipc	a0,0xeffff
2000090c:	70450513          	addi	a0,a0,1796 # 1000000c <pwrmgr>
20000910:	4581                	li	a1,0
20000912:	2891                	jal	20000966 <dif_pwrmgr_low_power_set_enabled>
20000914:	c905                	beqz	a0,20000944 <test_main+0x214>
20000916:	c889                	beqz	s1,20000928 <test_main+0x1f8>
20000918:	e0010517          	auipc	a0,0xe0010
2000091c:	83c50513          	addi	a0,a0,-1988 # 10154 <test_main.kLogFields.20>
20000920:	4581                	li	a1,0
20000922:	7d0000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000926:	a819                	j	2000093c <test_main+0x20c>
20000928:	00001597          	auipc	a1,0x1
2000092c:	58058593          	addi	a1,a1,1408 # 20001ea8 <kDeviceLogBypassUartAddress+0x90>
20000930:	0020                	addi	s0,sp,8
20000932:	4651                	li	a2,20
20000934:	8522                	mv	a0,s0
20000936:	33bd                	jal	200006a4 <memcpy>
20000938:	8522                	mv	a0,s0
2000093a:	2739                	jal	20001048 <base_log_internal_core>
2000093c:	6531                	lui	a0,0xc
2000093e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000942:	3909                	jal	20000554 <test_status_set>
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000944:	10500073          	wfi
20000948:	4505                	li	a0,1
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/pwrmgr_usbdev_smoketest.c:90
    // Enter low power mode.
    wait_for_interrupt();
  }

  return true;
}
2000094a:	5902                	lw	s2,32(sp)
2000094c:	5492                	lw	s1,36(sp)
2000094e:	5422                	lw	s0,40(sp)
20000950:	50b2                	lw	ra,44(sp)
20000952:	6145                	addi	sp,sp,48
20000954:	8082                	ret
	...

20000958 <dif_pwrmgr_init>:
dif_pwrmgr_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:247
  return !bitfield_bit32_read(reg_val, reg_info.write_enable_bit_index);
}

dif_pwrmgr_result_t dif_pwrmgr_init(dif_pwrmgr_params_t params,
                                    dif_pwrmgr_t *pwrmgr) {
  if (pwrmgr == NULL) {
20000958:	c581                	beqz	a1,20000960 <dif_pwrmgr_init+0x8>
2000095a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:251
    return kDifPwrmgrBadArg;
  }

  *pwrmgr = (dif_pwrmgr_t){.params = params};
2000095c:	c188                	sw	a0,0(a1)
2000095e:	a011                	j	20000962 <dif_pwrmgr_init+0xa>
20000960:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:254

  return kDifPwrmgrOk;
}
20000962:	8532                	mv	a0,a2
20000964:	8082                	ret

20000966 <dif_pwrmgr_low_power_set_enabled>:
dif_pwrmgr_low_power_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:257

dif_pwrmgr_config_result_t dif_pwrmgr_low_power_set_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t new_state) {
20000966:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:258
  if (pwrmgr == NULL) {
20000968:	c915                	beqz	a0,2000099c <dif_pwrmgr_low_power_set_enabled+0x36>
toggle_to_bool():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:155
  switch (val) {
2000096a:	c591                	beqz	a1,20000976 <dif_pwrmgr_low_power_set_enabled+0x10>
2000096c:	4685                	li	a3,1
2000096e:	02d59763          	bne	a1,a3,2000099c <dif_pwrmgr_low_power_set_enabled+0x36>
20000972:	4581                	li	a1,0
20000974:	a011                	j	20000978 <dif_pwrmgr_low_power_set_enabled+0x12>
20000976:	4585                	li	a1,1
control_register_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:210
      mmio_region_read32(pwrmgr->params.base_addr,
20000978:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000097a:	46d0                	lw	a2,12(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000097c:	00167713          	andi	a4,a2,1
20000980:	460d                	li	a2,3
dif_pwrmgr_low_power_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:267
  bool enable = false;
  if (!toggle_to_bool(new_state, &enable)) {
    return kDifPwrmgrConfigBadArg;
  }

  if (control_register_is_locked(pwrmgr)) {
20000982:	cf09                	beqz	a4,2000099c <dif_pwrmgr_low_power_set_enabled+0x36>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000984:	4a90                	lw	a2,16(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000986:	9a79                	andi	a2,a2,-2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000988:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000098a:	ca8c                	sw	a1,16(a3)
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:223
  mmio_region_write32(
2000098c:	410c                	lw	a1,0(a0)
2000098e:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000990:	c9d0                	sw	a2,20(a1)
20000992:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000994:	494c                	lw	a1,20(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000996:	8985                	andi	a1,a1,1
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:226
  while (bitfield_bit32_read(mmio_region_read32(pwrmgr->params.base_addr,
20000998:	fdf5                	bnez	a1,20000994 <dif_pwrmgr_low_power_set_enabled+0x2e>
2000099a:	4601                	li	a2,0
dif_pwrmgr_low_power_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:282

  // Slow clock domain must be synced for changes to take effect.
  sync_slow_clock_domain_polled(pwrmgr);

  return kDifPwrmgrConfigOk;
}
2000099c:	8532                	mv	a0,a2
2000099e:	8082                	ret

200009a0 <dif_pwrmgr_low_power_get_enabled>:
dif_pwrmgr_low_power_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:285

dif_pwrmgr_result_t dif_pwrmgr_low_power_get_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t *cur_state) {
200009a0:	862a                	mv	a2,a0
200009a2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:286
  if (pwrmgr == NULL || cur_state == NULL) {
200009a4:	ca09                	beqz	a2,200009b6 <dif_pwrmgr_low_power_get_enabled+0x16>
200009a6:	c981                	beqz	a1,200009b6 <dif_pwrmgr_low_power_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:291
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val =
      mmio_region_read32(pwrmgr->params.base_addr, PWRMGR_CONTROL_REG_OFFSET);
200009a8:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200009aa:	4910                	lw	a2,16(a0)
200009ac:	4501                	li	a0,0
200009ae:	fff64613          	not	a2,a2
bool_to_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:172
  return val ? kDifPwrmgrToggleEnabled : kDifPwrmgrToggleDisabled;
200009b2:	8a05                	andi	a2,a2,1
dif_pwrmgr_low_power_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:292
  *cur_state = bool_to_toggle(
200009b4:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:296
      bitfield_bit32_read(reg_val, PWRMGR_CONTROL_LOW_POWER_HINT_BIT));

  return kDifPwrmgrOk;
}
200009b6:	8082                	ret

200009b8 <dif_pwrmgr_set_domain_config>:
dif_pwrmgr_set_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:299

dif_pwrmgr_config_result_t dif_pwrmgr_set_domain_config(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_domain_config_t config) {
200009b8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:300
  if (pwrmgr == NULL || !is_valid_for_bitfield(config, kDomainConfigBitfield)) {
200009ba:	c90d                	beqz	a0,200009ec <dif_pwrmgr_set_domain_config+0x34>
200009bc:	46fd                	li	a3,31
200009be:	02b6e763          	bltu	a3,a1,200009ec <dif_pwrmgr_set_domain_config+0x34>
control_register_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:210
      mmio_region_read32(pwrmgr->params.base_addr,
200009c2:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200009c4:	46d0                	lw	a2,12(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200009c6:	00167713          	andi	a4,a2,1
200009ca:	460d                	li	a2,3
dif_pwrmgr_set_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:304
    return kDifPwrmgrConfigBadArg;
  }

  if (control_register_is_locked(pwrmgr)) {
200009cc:	c305                	beqz	a4,200009ec <dif_pwrmgr_set_domain_config+0x34>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200009ce:	4a90                	lw	a2,16(a3)
200009d0:	89fd                	andi	a1,a1,31
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200009d2:	e0f67613          	andi	a2,a2,-497
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200009d6:	0592                	slli	a1,a1,0x4
200009d8:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200009da:	ca8c                	sw	a1,16(a3)
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:223
  mmio_region_write32(
200009dc:	410c                	lw	a1,0(a0)
200009de:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200009e0:	c9d0                	sw	a2,20(a1)
200009e2:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200009e4:	494c                	lw	a1,20(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200009e6:	8985                	andi	a1,a1,1
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:226
  while (bitfield_bit32_read(mmio_region_read32(pwrmgr->params.base_addr,
200009e8:	fdf5                	bnez	a1,200009e4 <dif_pwrmgr_set_domain_config+0x2c>
200009ea:	4601                	li	a2,0
dif_pwrmgr_set_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:318

  // Slow clock domain must be synced for changes to take effect.
  sync_slow_clock_domain_polled(pwrmgr);

  return kDifPwrmgrConfigOk;
}
200009ec:	8532                	mv	a0,a2
200009ee:	8082                	ret

200009f0 <dif_pwrmgr_get_domain_config>:
dif_pwrmgr_get_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:321

dif_pwrmgr_result_t dif_pwrmgr_get_domain_config(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_domain_config_t *config) {
200009f0:	862a                	mv	a2,a0
200009f2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:322
  if (pwrmgr == NULL || config == NULL) {
200009f4:	ca09                	beqz	a2,20000a06 <dif_pwrmgr_get_domain_config+0x16>
200009f6:	c981                	beqz	a1,20000a06 <dif_pwrmgr_get_domain_config+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:327
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val =
      mmio_region_read32(pwrmgr->params.base_addr, PWRMGR_CONTROL_REG_OFFSET);
200009f8:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200009fa:	4910                	lw	a2,16(a0)
200009fc:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200009fe:	8211                	srli	a2,a2,0x4
dif_pwrmgr_get_domain_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:328
  *config = bitfield_field32_read(reg_val, kDomainConfigBitfield);
20000a00:	8a7d                	andi	a2,a2,31
20000a02:	00c58023          	sb	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:331

  return kDifPwrmgrOk;
}
20000a06:	8082                	ret

20000a08 <dif_pwrmgr_set_request_sources>:
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:335

dif_pwrmgr_config_result_t dif_pwrmgr_set_request_sources(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    dif_pwrmgr_request_sources_t sources) {
20000a08:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:336
  if (pwrmgr == NULL || !is_valid_req_type(req_type)) {
20000a0a:	c135                	beqz	a0,20000a6e <dif_pwrmgr_set_request_sources+0x66>
20000a0c:	4705                	li	a4,1
20000a0e:	06b76063          	bltu	a4,a1,20000a6e <dif_pwrmgr_set_request_sources+0x66>
20000a12:	4761                	li	a4,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:340
    return kDifPwrmgrConfigBadArg;
  }

  request_reg_info_t reg_info = request_reg_infos[req_type];
20000a14:	02e58733          	mul	a4,a1,a4
20000a18:	00001797          	auipc	a5,0x1
20000a1c:	4a878793          	addi	a5,a5,1192 # 20001ec0 <request_reg_infos>
20000a20:	00e78833          	add	a6,a5,a4
20000a24:	01082583          	lw	a1,16(a6)
is_valid_for_bitfield():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:197
  return (val & bitfield.mask) == val;
20000a28:	8df1                	and	a1,a1,a2
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:342

  if (!is_valid_for_bitfield(sources, reg_info.bitfield)) {
20000a2a:	04c59263          	bne	a1,a2,20000a6e <dif_pwrmgr_set_request_sources+0x66>
request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000a2e:	00f705b3          	add	a1,a4,a5
20000a32:	4198                	lw	a4,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:239
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000a34:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000a36:	41cc                	lw	a1,4(a1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000a38:	9b71                	andi	a4,a4,-4
20000a3a:	9736                	add	a4,a4,a3
20000a3c:	4318                	lw	a4,0(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000a3e:	00b755b3          	srl	a1,a4,a1
20000a42:	8985                	andi	a1,a1,1
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:347
    return kDifPwrmgrConfigBadArg;
  }

  // Return early if locked.
  if (request_sources_is_locked(pwrmgr, req_type)) {
20000a44:	c585                	beqz	a1,20000a6c <dif_pwrmgr_set_request_sources+0x64>
20000a46:	01482583          	lw	a1,20(a6)
20000a4a:	00882703          	lw	a4,8(a6)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000a4e:	00b615b3          	sll	a1,a2,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a52:	ffc77613          	andi	a2,a4,-4
20000a56:	9636                	add	a2,a2,a3
20000a58:	c20c                	sw	a1,0(a2)
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:223
  mmio_region_write32(
20000a5a:	410c                	lw	a1,0(a0)
20000a5c:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a5e:	c9d0                	sw	a2,20(a1)
20000a60:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a62:	494c                	lw	a1,20(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000a64:	8985                	andi	a1,a1,1
sync_slow_clock_domain_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:226
  while (bitfield_bit32_read(mmio_region_read32(pwrmgr->params.base_addr,
20000a66:	fdf5                	bnez	a1,20000a62 <dif_pwrmgr_set_request_sources+0x5a>
20000a68:	4681                	li	a3,0
20000a6a:	a011                	j	20000a6e <dif_pwrmgr_set_request_sources+0x66>
20000a6c:	468d                	li	a3,3
dif_pwrmgr_set_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:359
                      reg_info.sources_enable_reg_offset, reg_val);
  // Slow clock domain must be synced for changes to take effect.
  sync_slow_clock_domain_polled(pwrmgr);

  return kDifPwrmgrConfigOk;
}
20000a6e:	8536                	mv	a0,a3
20000a70:	8082                	ret

20000a72 <dif_pwrmgr_get_request_sources>:
dif_pwrmgr_get_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:363

dif_pwrmgr_result_t dif_pwrmgr_get_request_sources(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    dif_pwrmgr_request_sources_t *sources) {
20000a72:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:364
  if (pwrmgr == NULL || !is_valid_req_type(req_type) || sources == NULL) {
20000a74:	c90d                	beqz	a0,20000aa6 <dif_pwrmgr_get_request_sources+0x34>
20000a76:	4705                	li	a4,1
20000a78:	02b76763          	bltu	a4,a1,20000aa6 <dif_pwrmgr_get_request_sources+0x34>
20000a7c:	c60d                	beqz	a2,20000aa6 <dif_pwrmgr_get_request_sources+0x34>
20000a7e:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:368
    return kDifPwrmgrBadArg;
  }

  request_reg_info_t reg_info = request_reg_infos[req_type];
20000a80:	02d585b3          	mul	a1,a1,a3
20000a84:	00001697          	auipc	a3,0x1
20000a88:	43c68693          	addi	a3,a3,1084 # 20001ec0 <request_reg_infos>
20000a8c:	95b6                	add	a1,a1,a3
20000a8e:	4594                	lw	a3,8(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:369
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000a90:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:368
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000a92:	49d8                	lw	a4,20(a1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000a94:	9af1                	andi	a3,a3,-4
20000a96:	9536                	add	a0,a0,a3
20000a98:	4108                	lw	a0,0(a0)
dif_pwrmgr_get_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:368
20000a9a:	498c                	lw	a1,16(a1)
20000a9c:	4681                	li	a3,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000a9e:	00e55533          	srl	a0,a0,a4
20000aa2:	8d6d                	and	a0,a0,a1
dif_pwrmgr_get_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:371
                                        reg_info.sources_enable_reg_offset);
  *sources = bitfield_field32_read(reg_val, reg_info.bitfield);
20000aa4:	c208                	sw	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:374

  return kDifPwrmgrOk;
}
20000aa6:	8536                	mv	a0,a3
20000aa8:	8082                	ret

20000aaa <dif_pwrmgr_get_current_request_sources>:
dif_pwrmgr_get_current_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:378

dif_pwrmgr_result_t dif_pwrmgr_get_current_request_sources(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    dif_pwrmgr_request_sources_t *sources) {
20000aaa:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:379
  if (pwrmgr == NULL || !is_valid_req_type(req_type) || sources == NULL) {
20000aac:	c90d                	beqz	a0,20000ade <dif_pwrmgr_get_current_request_sources+0x34>
20000aae:	4705                	li	a4,1
20000ab0:	02b76763          	bltu	a4,a1,20000ade <dif_pwrmgr_get_current_request_sources+0x34>
20000ab4:	c60d                	beqz	a2,20000ade <dif_pwrmgr_get_current_request_sources+0x34>
20000ab6:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:383
    return kDifPwrmgrBadArg;
  }

  request_reg_info_t reg_info = request_reg_infos[req_type];
20000ab8:	02d585b3          	mul	a1,a1,a3
20000abc:	00001697          	auipc	a3,0x1
20000ac0:	40468693          	addi	a3,a3,1028 # 20001ec0 <request_reg_infos>
20000ac4:	95b6                	add	a1,a1,a3
20000ac6:	45d4                	lw	a3,12(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:384
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000ac8:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:383
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000aca:	49d8                	lw	a4,20(a1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000acc:	9af1                	andi	a3,a3,-4
20000ace:	9536                	add	a0,a0,a3
20000ad0:	4108                	lw	a0,0(a0)
dif_pwrmgr_get_current_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:383
20000ad2:	498c                	lw	a1,16(a1)
20000ad4:	4681                	li	a3,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20000ad6:	00e55533          	srl	a0,a0,a4
20000ada:	8d6d                	and	a0,a0,a1
dif_pwrmgr_get_current_request_sources():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:386
                                        reg_info.cur_req_sources_reg_offset);
  *sources = bitfield_field32_read(reg_val, reg_info.bitfield);
20000adc:	c208                	sw	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:389

  return kDifPwrmgrOk;
}
20000ade:	8536                	mv	a0,a3
20000ae0:	8082                	ret

20000ae2 <dif_pwrmgr_request_sources_lock>:
dif_pwrmgr_request_sources_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:392

dif_pwrmgr_result_t dif_pwrmgr_request_sources_lock(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type) {
20000ae2:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:393
  if (pwrmgr == NULL || !is_valid_req_type(req_type)) {
20000ae4:	c11d                	beqz	a0,20000b0a <dif_pwrmgr_request_sources_lock+0x28>
20000ae6:	4685                	li	a3,1
20000ae8:	02b6e163          	bltu	a3,a1,20000b0a <dif_pwrmgr_request_sources_lock+0x28>
20000aec:	4661                	li	a2,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:400
  }

  // Only a single bit of this register is significant, thus we don't perform a
  // read-modify-write. Setting this bit to 0 locks sources.
  mmio_region_write32(pwrmgr->params.base_addr,
                      request_reg_infos[req_type].write_enable_reg_offset, 0);
20000aee:	02c585b3          	mul	a1,a1,a2
20000af2:	00001617          	auipc	a2,0x1
20000af6:	3ce60613          	addi	a2,a2,974 # 20001ec0 <request_reg_infos>
20000afa:	95b2                	add	a1,a1,a2
20000afc:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:399
  mmio_region_write32(pwrmgr->params.base_addr,
20000afe:	4108                	lw	a0,0(a0)
20000b00:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b02:	99f1                	andi	a1,a1,-4
20000b04:	952e                	add	a0,a0,a1
20000b06:	00052023          	sw	zero,0(a0)
dif_pwrmgr_request_sources_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:403

  return kDifPwrmgrOk;
}
20000b0a:	8532                	mv	a0,a2
20000b0c:	8082                	ret

20000b0e <dif_pwrmgr_request_sources_is_locked>:
dif_pwrmgr_request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:407

dif_pwrmgr_result_t dif_pwrmgr_request_sources_is_locked(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_req_type_t req_type,
    bool *is_locked) {
20000b0e:	86aa                	mv	a3,a0
20000b10:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:408
  if (pwrmgr == NULL || !is_valid_req_type(req_type) || is_locked == NULL) {
20000b12:	ce85                	beqz	a3,20000b4a <dif_pwrmgr_request_sources_is_locked+0x3c>
20000b14:	4705                	li	a4,1
20000b16:	02b76a63          	bltu	a4,a1,20000b4a <dif_pwrmgr_request_sources_is_locked+0x3c>
20000b1a:	ca05                	beqz	a2,20000b4a <dif_pwrmgr_request_sources_is_locked+0x3c>
20000b1c:	4561                	li	a0,24
request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000b1e:	02a58533          	mul	a0,a1,a0
20000b22:	00001597          	auipc	a1,0x1
20000b26:	39e58593          	addi	a1,a1,926 # 20001ec0 <request_reg_infos>
20000b2a:	952e                	add	a0,a0,a1
20000b2c:	410c                	lw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:239
  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000b2e:	4294                	lw	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:238
  request_reg_info_t reg_info = request_reg_infos[req_type];
20000b30:	4158                	lw	a4,4(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b32:	ffc5f513          	andi	a0,a1,-4
20000b36:	9536                	add	a0,a0,a3
20000b38:	410c                	lw	a1,0(a0)
20000b3a:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b3c:	00e5d5b3          	srl	a1,a1,a4
20000b40:	8985                	andi	a1,a1,1
20000b42:	0015b593          	seqz	a1,a1
dif_pwrmgr_request_sources_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:412
    return kDifPwrmgrBadArg;
  }

  *is_locked = request_sources_is_locked(pwrmgr, req_type);
20000b46:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:415

  return kDifPwrmgrOk;
}
20000b4a:	8082                	ret

20000b4c <dif_pwrmgr_wakeup_request_recording_set_enabled>:
dif_pwrmgr_wakeup_request_recording_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:418

dif_pwrmgr_result_t dif_pwrmgr_wakeup_request_recording_set_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t new_state) {
20000b4c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:419
  if (pwrmgr == NULL) {
20000b4e:	c911                	beqz	a0,20000b62 <dif_pwrmgr_wakeup_request_recording_set_enabled+0x16>
toggle_to_bool():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:155
  switch (val) {
20000b50:	c589                	beqz	a1,20000b5a <dif_pwrmgr_wakeup_request_recording_set_enabled+0xe>
20000b52:	4685                	li	a3,1
20000b54:	00d58463          	beq	a1,a3,20000b5c <dif_pwrmgr_wakeup_request_recording_set_enabled+0x10>
20000b58:	a029                	j	20000b62 <dif_pwrmgr_wakeup_request_recording_set_enabled+0x16>
20000b5a:	86ae                	mv	a3,a1
dif_pwrmgr_wakeup_request_recording_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:433
  // Only a single bit of this register is significant, thus we don't perform a
  // read-modify-write. Setting this bit to 1 disables recording.
  uint32_t reg_val =
      bitfield_bit32_write(0, PWRMGR_WAKE_INFO_CAPTURE_DIS_VAL_BIT, !enable);

  mmio_region_write32(pwrmgr->params.base_addr,
20000b5c:	4108                	lw	a0,0(a0)
20000b5e:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b60:	d954                	sw	a3,52(a0)
dif_pwrmgr_wakeup_request_recording_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:437
                      PWRMGR_WAKE_INFO_CAPTURE_DIS_REG_OFFSET, reg_val);

  return kDifPwrmgrOk;
}
20000b62:	8532                	mv	a0,a2
20000b64:	8082                	ret

20000b66 <dif_pwrmgr_wakeup_request_recording_get_enabled>:
dif_pwrmgr_wakeup_request_recording_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:440

dif_pwrmgr_result_t dif_pwrmgr_wakeup_request_recording_get_enabled(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_toggle_t *cur_state) {
20000b66:	862a                	mv	a2,a0
20000b68:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:441
  if (pwrmgr == NULL || cur_state == NULL) {
20000b6a:	c619                	beqz	a2,20000b78 <dif_pwrmgr_wakeup_request_recording_get_enabled+0x12>
20000b6c:	c591                	beqz	a1,20000b78 <dif_pwrmgr_wakeup_request_recording_get_enabled+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:445
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(
20000b6e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b70:	5950                	lw	a2,52(a0)
20000b72:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000b74:	8a05                	andi	a2,a2,1
dif_pwrmgr_wakeup_request_recording_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:448
      pwrmgr->params.base_addr, PWRMGR_WAKE_INFO_CAPTURE_DIS_REG_OFFSET);
  // Recording is disabled if this bit is set to 1.
  *cur_state = bool_to_toggle(
20000b76:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:452
      !bitfield_bit32_read(reg_val, PWRMGR_WAKE_INFO_CAPTURE_DIS_VAL_BIT));

  return kDifPwrmgrOk;
}
20000b78:	8082                	ret

20000b7a <dif_pwrmgr_wakeup_reason_get>:
dif_pwrmgr_wakeup_reason_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:455

dif_pwrmgr_result_t dif_pwrmgr_wakeup_reason_get(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_wakeup_reason_t *reason) {
20000b7a:	1141                	addi	sp,sp,-16
20000b7c:	862a                	mv	a2,a0
20000b7e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:456
  if (pwrmgr == NULL || reason == NULL) {
20000b80:	ce05                	beqz	a2,20000bb8 <dif_pwrmgr_wakeup_reason_get+0x3e>
20000b82:	c99d                	beqz	a1,20000bb8 <dif_pwrmgr_wakeup_reason_get+0x3e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:461
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val =
      mmio_region_read32(pwrmgr->params.base_addr, PWRMGR_WAKE_INFO_REG_OFFSET);
20000b84:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b86:	5d08                	lw	a0,56(a0)
dif_pwrmgr_wakeup_reason_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:464

  dif_pwrmgr_wakeup_types_t types = 0;
  if (bitfield_bit32_read(reg_val, PWRMGR_WAKE_INFO_FALL_THROUGH_BIT)) {
20000b88:	00455613          	srli	a2,a0,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:467
    types |= kDifPwrmgrWakeupTypeFallThrough;
  }
  if (bitfield_bit32_read(reg_val, PWRMGR_WAKE_INFO_ABORT_BIT)) {
20000b8c:	8a19                	andi	a2,a2,6
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000b8e:	01f57693          	andi	a3,a0,31
dif_pwrmgr_wakeup_reason_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:473
    types |= kDifPwrmgrWakeupTypeAbort;
  }

  uint32_t request_sources = bitfield_field32_read(
      reg_val, request_reg_infos[kDifPwrmgrReqTypeWakeup].bitfield);
  if (request_sources != 0) {
20000b92:	00d03533          	snez	a0,a3
20000b96:	8d51                	or	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:477
    types |= kDifPwrmgrWakeupTypeRequest;
  }

  *reason = (dif_pwrmgr_wakeup_reason_t){
20000b98:	00a58023          	sb	a0,0(a1)
20000b9c:	00d10503          	lb	a0,13(sp)
20000ba0:	00a580a3          	sb	a0,1(a1)
20000ba4:	00e10503          	lb	a0,14(sp)
20000ba8:	00a58123          	sb	a0,2(a1)
20000bac:	00f10603          	lb	a2,15(sp)
20000bb0:	4501                	li	a0,0
20000bb2:	00c581a3          	sb	a2,3(a1)
20000bb6:	c1d4                	sw	a3,4(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:483
      .types = types,
      .request_sources = request_sources,
  };

  return kDifPwrmgrOk;
}
20000bb8:	0141                	addi	sp,sp,16
20000bba:	8082                	ret

20000bbc <dif_pwrmgr_wakeup_reason_clear>:
dif_pwrmgr_wakeup_reason_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:486

dif_pwrmgr_result_t dif_pwrmgr_wakeup_reason_clear(const dif_pwrmgr_t *pwrmgr) {
  if (pwrmgr == NULL) {
20000bbc:	c511                	beqz	a0,20000bc8 <dif_pwrmgr_wakeup_reason_clear+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:490
    return kDifPwrmgrBadArg;
  }

  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_WAKE_INFO_REG_OFFSET,
20000bbe:	410c                	lw	a1,0(a0)
20000bc0:	4501                	li	a0,0
20000bc2:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000bc4:	dd90                	sw	a2,56(a1)
dif_pwrmgr_wakeup_reason_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:494
                      UINT32_MAX);

  return kDifPwrmgrOk;
}
20000bc6:	8082                	ret
20000bc8:	4509                	li	a0,2
20000bca:	8082                	ret

20000bcc <dif_pwrmgr_irq_is_pending>:
dif_pwrmgr_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:498

dif_pwrmgr_result_t dif_pwrmgr_irq_is_pending(const dif_pwrmgr_t *pwrmgr,
                                              dif_pwrmgr_irq_t irq,
                                              bool *is_pending) {
20000bcc:	86aa                	mv	a3,a0
20000bce:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:499
  if (pwrmgr == NULL || !is_valid_irq(irq) || is_pending == NULL) {
20000bd0:	ca89                	beqz	a3,20000be2 <dif_pwrmgr_irq_is_pending+0x16>
20000bd2:	e981                	bnez	a1,20000be2 <dif_pwrmgr_irq_is_pending+0x16>
20000bd4:	c619                	beqz	a2,20000be2 <dif_pwrmgr_irq_is_pending+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:503
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000bd6:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bd8:	410c                	lw	a1,0(a0)
20000bda:	4501                	li	a0,0
dif_pwrmgr_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:505
                                        PWRMGR_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg_val, irq);
20000bdc:	8985                	andi	a1,a1,1
20000bde:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:508

  return kDifPwrmgrOk;
}
20000be2:	8082                	ret

20000be4 <dif_pwrmgr_irq_acknowledge>:
dif_pwrmgr_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:511

dif_pwrmgr_result_t dif_pwrmgr_irq_acknowledge(const dif_pwrmgr_t *pwrmgr,
                                               dif_pwrmgr_irq_t irq) {
20000be4:	862a                	mv	a2,a0
20000be6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:512
  if (pwrmgr == NULL || !is_valid_irq(irq)) {
20000be8:	c611                	beqz	a2,20000bf4 <dif_pwrmgr_irq_acknowledge+0x10>
20000bea:	e589                	bnez	a1,20000bf4 <dif_pwrmgr_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:517
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = bitfield_bit32_write(0, irq, true);
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_STATE_REG_OFFSET,
20000bec:	420c                	lw	a1,0(a2)
20000bee:	4501                	li	a0,0
20000bf0:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000bf2:	c190                	sw	a2,0(a1)
dif_pwrmgr_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:521
                      reg_val);

  return kDifPwrmgrOk;
}
20000bf4:	8082                	ret

20000bf6 <dif_pwrmgr_irq_get_enabled>:
dif_pwrmgr_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:525

dif_pwrmgr_result_t dif_pwrmgr_irq_get_enabled(const dif_pwrmgr_t *pwrmgr,
                                               dif_pwrmgr_irq_t irq,
                                               dif_pwrmgr_toggle_t *state) {
20000bf6:	86aa                	mv	a3,a0
20000bf8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:526
  if (pwrmgr == NULL || !is_valid_irq(irq) || state == NULL) {
20000bfa:	ca91                	beqz	a3,20000c0e <dif_pwrmgr_irq_get_enabled+0x18>
20000bfc:	e989                	bnez	a1,20000c0e <dif_pwrmgr_irq_get_enabled+0x18>
20000bfe:	ca01                	beqz	a2,20000c0e <dif_pwrmgr_irq_get_enabled+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:530
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000c00:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c02:	414c                	lw	a1,4(a0)
20000c04:	4501                	li	a0,0
20000c06:	fff5c593          	not	a1,a1
bool_to_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:172
  return val ? kDifPwrmgrToggleEnabled : kDifPwrmgrToggleDisabled;
20000c0a:	8985                	andi	a1,a1,1
dif_pwrmgr_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:532
                                        PWRMGR_INTR_ENABLE_REG_OFFSET);
  *state = bool_to_toggle(bitfield_bit32_read(reg_val, irq));
20000c0c:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:535

  return kDifPwrmgrOk;
}
20000c0e:	8082                	ret

20000c10 <dif_pwrmgr_irq_set_enabled>:
dif_pwrmgr_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:539

dif_pwrmgr_result_t dif_pwrmgr_irq_set_enabled(const dif_pwrmgr_t *pwrmgr,
                                               dif_pwrmgr_irq_t irq,
                                               dif_pwrmgr_toggle_t state) {
20000c10:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:540
  if (pwrmgr == NULL || !is_valid_irq(irq)) {
20000c12:	cd09                	beqz	a0,20000c2c <dif_pwrmgr_irq_set_enabled+0x1c>
20000c14:	ed81                	bnez	a1,20000c2c <dif_pwrmgr_irq_set_enabled+0x1c>
20000c16:	4585                	li	a1,1
toggle_to_bool():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:155
  switch (val) {
20000c18:	c601                	beqz	a2,20000c20 <dif_pwrmgr_irq_set_enabled+0x10>
20000c1a:	00b61963          	bne	a2,a1,20000c2c <dif_pwrmgr_irq_set_enabled+0x1c>
20000c1e:	4581                	li	a1,0
dif_pwrmgr_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:549
  bool enable = false;
  if (!toggle_to_bool(state, &enable)) {
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = mmio_region_read32(pwrmgr->params.base_addr,
20000c20:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c22:	4150                	lw	a2,4(a0)
20000c24:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c26:	9a79                	andi	a2,a2,-2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c28:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c2a:	c14c                	sw	a1,4(a0)
dif_pwrmgr_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:556
  reg_val = bitfield_bit32_write(reg_val, irq, enable);
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
                      reg_val);

  return kDifPwrmgrOk;
}
20000c2c:	8536                	mv	a0,a3
20000c2e:	8082                	ret

20000c30 <dif_pwrmgr_irq_force>:
dif_pwrmgr_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:559

dif_pwrmgr_result_t dif_pwrmgr_irq_force(const dif_pwrmgr_t *pwrmgr,
                                         dif_pwrmgr_irq_t irq) {
20000c30:	862a                	mv	a2,a0
20000c32:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:560
  if (pwrmgr == NULL || !is_valid_irq(irq)) {
20000c34:	c611                	beqz	a2,20000c40 <dif_pwrmgr_irq_force+0x10>
20000c36:	e589                	bnez	a1,20000c40 <dif_pwrmgr_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:565
    return kDifPwrmgrBadArg;
  }

  uint32_t reg_val = bitfield_bit32_write(0, irq, true);
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_TEST_REG_OFFSET,
20000c38:	420c                	lw	a1,0(a2)
20000c3a:	4501                	li	a0,0
20000c3c:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c3e:	c590                	sw	a2,8(a1)
dif_pwrmgr_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:569
                      reg_val);

  return kDifPwrmgrOk;
}
20000c40:	8082                	ret

20000c42 <dif_pwrmgr_irq_disable_all>:
dif_pwrmgr_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:573

dif_pwrmgr_result_t dif_pwrmgr_irq_disable_all(
    const dif_pwrmgr_t *pwrmgr, dif_pwrmgr_irq_snapshot_t *snapshot) {
  if (pwrmgr == NULL) {
20000c42:	c911                	beqz	a0,20000c56 <dif_pwrmgr_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:577
    return kDifPwrmgrBadArg;
  }

  if (snapshot != NULL) {
20000c44:	c581                	beqz	a1,20000c4c <dif_pwrmgr_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:578
    *snapshot = mmio_region_read32(pwrmgr->params.base_addr,
20000c46:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c48:	4250                	lw	a2,4(a2)
dif_pwrmgr_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:578
20000c4a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:581
                                   PWRMGR_INTR_ENABLE_REG_OFFSET);
  }
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
20000c4c:	410c                	lw	a1,0(a0)
20000c4e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c50:	0005a223          	sw	zero,4(a1)
dif_pwrmgr_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:585
                      0);

  return kDifPwrmgrOk;
}
20000c54:	8082                	ret
20000c56:	4509                	li	a0,2
20000c58:	8082                	ret

20000c5a <dif_pwrmgr_irq_restore_all>:
dif_pwrmgr_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:588

dif_pwrmgr_result_t dif_pwrmgr_irq_restore_all(
    const dif_pwrmgr_t *pwrmgr, const dif_pwrmgr_irq_snapshot_t *snapshot) {
20000c5a:	862a                	mv	a2,a0
20000c5c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:589
  if (pwrmgr == NULL || snapshot == NULL) {
20000c5e:	c611                	beqz	a2,20000c6a <dif_pwrmgr_irq_restore_all+0x10>
20000c60:	c589                	beqz	a1,20000c6a <dif_pwrmgr_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:594
    return kDifPwrmgrBadArg;
  }

  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000c62:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:593
  mmio_region_write32(pwrmgr->params.base_addr, PWRMGR_INTR_ENABLE_REG_OFFSET,
20000c64:	4210                	lw	a2,0(a2)
20000c66:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c68:	c24c                	sw	a1,4(a2)
dif_pwrmgr_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_pwrmgr.c:596
  return kDifPwrmgrOk;
}
20000c6a:	8082                	ret

20000c6c <usbdev_buf_allocate_byid>:
usbdev_buf_allocate_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:31
  ctx->nfree = NUM_BUFS;
}

// Allocating a buffer just pops next ID from the stack
usbbufid_t usbdev_buf_allocate_byid(usbdev_ctx_t *ctx) {
  if (ctx->nfree <= 0) {
20000c6c:	550c                	lw	a1,40(a0)
20000c6e:	4605                	li	a2,1
20000c70:	00c5c863          	blt	a1,a2,20000c80 <usbdev_buf_allocate_byid+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:34
    return -1;
  }
  return ctx->freebuf[--ctx->nfree];
20000c74:	15fd                	addi	a1,a1,-1
20000c76:	d50c                	sw	a1,40(a0)
20000c78:	952e                	add	a0,a0,a1
20000c7a:	00454503          	lbu	a0,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:35
}
20000c7e:	8082                	ret
20000c80:	557d                	li	a0,-1
20000c82:	8082                	ret

20000c84 <usbdev_buf_free_byid>:
usbdev_buf_free_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:38

// Freeing a buffer just pushes the ID back on the stack
int usbdev_buf_free_byid(usbdev_ctx_t *ctx, usbbufid_t buf) {
20000c84:	477d                	li	a4,31
20000c86:	567d                	li	a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:39
  if ((ctx->nfree >= NUM_BUFS) || (buf >= NUM_BUFS)) {
20000c88:	00b74c63          	blt	a4,a1,20000ca0 <usbdev_buf_free_byid+0x1c>
20000c8c:	5514                	lw	a3,40(a0)
20000c8e:	00d74963          	blt	a4,a3,20000ca0 <usbdev_buf_free_byid+0x1c>
20000c92:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:42
    return -1;
  }
  ctx->freebuf[ctx->nfree++] = buf;
20000c94:	00168713          	addi	a4,a3,1
20000c98:	d518                	sw	a4,40(a0)
20000c9a:	9536                	add	a0,a0,a3
20000c9c:	00b50223          	sb	a1,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:44
  return 0;
}
20000ca0:	8532                	mv	a0,a2
20000ca2:	8082                	ret

20000ca4 <usbdev_buf_idtoaddr>:
usbdev_buf_idtoaddr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:48

uint32_t *usbdev_buf_idtoaddr(usbdev_ctx_t *ctx, usbbufid_t buf) {
  return (uint32_t *)(USBDEV_BASE_ADDR + USBDEV_BUFFER_REG_OFFSET +
                      (buf * BUF_LENGTH));
20000ca4:	00659513          	slli	a0,a1,0x6
20000ca8:	401115b7          	lui	a1,0x40111
20000cac:	80058593          	addi	a1,a1,-2048 # 40110800 <_data_init_start+0x2010e294>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:47
  return (uint32_t *)(USBDEV_BASE_ADDR + USBDEV_BUFFER_REG_OFFSET +
20000cb0:	952e                	add	a0,a0,a1
20000cb2:	8082                	ret

20000cb4 <usbdev_buf_copyto_byid>:
usbdev_buf_copyto_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:52
}

void usbdev_buf_copyto_byid(usbdev_ctx_t *ctx, usbbufid_t buf, const void *from,
                            size_t len_bytes) {
20000cb4:	04000513          	li	a0,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:57
  int32_t *from_word = (int32_t *)from;
  int len_words;
  volatile uint32_t *bp = usbdev_buf_idtoaddr(ctx, buf);

  if (len_bytes > BUF_LENGTH) {
20000cb8:	00a6e463          	bltu	a3,a0,20000cc0 <usbdev_buf_copyto_byid+0xc>
20000cbc:	04000693          	li	a3,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:62
    len_bytes = BUF_LENGTH;
  }
  // This will round up if len_bytes is not on a multiple of int32_t
  // Always ok to fill the extra bytes since the buffers are aligned
  len_words = (len_bytes + sizeof(int32_t) - 1) / sizeof(int32_t);
20000cc0:	00368513          	addi	a0,a3,3
20000cc4:	8109                	srli	a0,a0,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:63
  for (int i = 0; i < len_words; i++) {
20000cc6:	cd09                	beqz	a0,20000ce0 <usbdev_buf_copyto_byid+0x2c>
20000cc8:	401116b7          	lui	a3,0x40111
20000ccc:	059a                	slli	a1,a1,0x6
20000cce:	80068693          	addi	a3,a3,-2048 # 40110800 <_data_init_start+0x2010e294>
20000cd2:	95b6                	add	a1,a1,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:64
    bp[i] = from_word[i];
20000cd4:	4214                	lw	a3,0(a2)
20000cd6:	c194                	sw	a3,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:63
  for (int i = 0; i < len_words; i++) {
20000cd8:	157d                	addi	a0,a0,-1
20000cda:	0591                	addi	a1,a1,4
20000cdc:	0611                	addi	a2,a2,4
20000cde:	f97d                	bnez	a0,20000cd4 <usbdev_buf_copyto_byid+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:66
  }
}
20000ce0:	8082                	ret

20000ce2 <usbdev_sendbuf_byid>:
usbdev_sendbuf_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:82
    REG32(USBDEV_BASE_ADDR + USBDEV_AVBUFFER_REG_OFFSET) = buf;
  }
}

void usbdev_sendbuf_byid(usbdev_ctx_t *ctx, usbbufid_t buf, size_t size,
                         int endpoint) {
20000ce2:	457d                	li	a0,31
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:86
  uint32_t configin =
      USBDEV_BASE_ADDR + USBDEV_CONFIGIN_0_REG_OFFSET + (4 * endpoint);

  if ((endpoint >= NUM_ENDPOINTS) || (buf >= NUM_BUFS)) {
20000ce4:	02b54863          	blt	a0,a1,20000d14 <usbdev_sendbuf_byid+0x32>
20000ce8:	452d                	li	a0,11
20000cea:	02d54563          	blt	a0,a3,20000d14 <usbdev_sendbuf_byid+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:84
      USBDEV_BASE_ADDR + USBDEV_CONFIGIN_0_REG_OFFSET + (4 * endpoint);
20000cee:	00269513          	slli	a0,a3,0x2
20000cf2:	401106b7          	lui	a3,0x40110
20000cf6:	02c68693          	addi	a3,a3,44 # 4011002c <_data_init_start+0x2010dac0>
20000cfa:	04000713          	li	a4,64
20000cfe:	9536                	add	a0,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:90
    return;
  }

  if (size > BUF_LENGTH) {
20000d00:	00e66463          	bltu	a2,a4,20000d08 <usbdev_sendbuf_byid+0x26>
20000d04:	04000613          	li	a2,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:95
    size = BUF_LENGTH;
  }

  REG32(configin) = ((buf << USBDEV_CONFIGIN_0_BUFFER_0_OFFSET) |
                     (size << USBDEV_CONFIGIN_0_SIZE_0_OFFSET) |
20000d08:	0622                	slli	a2,a2,0x8
20000d0a:	8dd1                	or	a1,a1,a2
20000d0c:	80000637          	lui	a2,0x80000
20000d10:	8dd1                	or	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:94
  REG32(configin) = ((buf << USBDEV_CONFIGIN_0_BUFFER_0_OFFSET) |
20000d12:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:97
                     (1 << USBDEV_CONFIGIN_0_RDY_0_BIT));
}
20000d14:	8082                	ret

20000d16 <usbdev_poll>:
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:99

void usbdev_poll(usbdev_ctx_t *ctx) {
20000d16:	7179                	addi	sp,sp,-48
20000d18:	d606                	sw	ra,44(sp)
20000d1a:	d422                	sw	s0,40(sp)
20000d1c:	d226                	sw	s1,36(sp)
20000d1e:	d04a                	sw	s2,32(sp)
20000d20:	ce4e                	sw	s3,28(sp)
20000d22:	cc52                	sw	s4,24(sp)
20000d24:	ca56                	sw	s5,20(sp)
20000d26:	c85a                	sw	s6,16(sp)
20000d28:	c65e                	sw	s7,12(sp)
20000d2a:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:100
  uint32_t istate = REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET);
20000d2e:	0005a903          	lw	s2,0(a1) # 40110000 <_data_init_start+0x2010da94>
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20000d32:	4994                	lw	a3,16(a1)
20000d34:	00800637          	lui	a2,0x800
20000d38:	8ef1                	and	a3,a3,a2
20000d3a:	8a2a                	mv	s4,a0
20000d3c:	e285                	bnez	a3,20000d5c <usbdev_poll+0x46>
20000d3e:	4505                	li	a0,1
usbdev_buf_allocate_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:31
  if (ctx->nfree <= 0) {
20000d40:	028a2683          	lw	a3,40(s4)
20000d44:	00a6cc63          	blt	a3,a0,20000d5c <usbdev_poll+0x46>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:34
  return ctx->freebuf[--ctx->nfree];
20000d48:	16fd                	addi	a3,a3,-1
20000d4a:	02da2423          	sw	a3,40(s4)
20000d4e:	96d2                	add	a3,a3,s4
20000d50:	0046c683          	lbu	a3,4(a3)
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:77
    REG32(USBDEV_BASE_ADDR + USBDEV_AVBUFFER_REG_OFFSET) = buf;
20000d54:	c9d4                	sw	a3,20(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20000d56:	4994                	lw	a3,16(a1)
20000d58:	8ef1                	and	a3,a3,a2
20000d5a:	d2fd                	beqz	a3,20000d40 <usbdev_poll+0x2a>
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:107
  // Do this first to keep things going
  fill_av_fifo(ctx);

  // Process IN completions first so we get the fact that send completed
  // before processing a response
  if (istate & (1 << USBDEV_INTR_STATE_PKT_SENT_BIT)) {
20000d5c:	00297513          	andi	a0,s2,2
20000d60:	cd31                	beqz	a0,20000dbc <usbdev_poll+0xa6>
20000d62:	4481                	li	s1,0
20000d64:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:108
    uint32_t sentep = REG32(USBDEV_BASE_ADDR + USBDEV_IN_SENT_REG_OFFSET);
20000d68:	02452983          	lw	s3,36(a0) # 40110024 <_data_init_start+0x2010dab8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:111
    uint32_t configin = USBDEV_BASE_ADDR + USBDEV_CONFIGIN_0_REG_OFFSET;
    TRC_C('a' + sentep);
    for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
20000d6c:	060a0413          	addi	s0,s4,96
20000d70:	02c50a93          	addi	s5,a0,44
20000d74:	4b31                	li	s6,12
20000d76:	4bfd                	li	s7,31
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:112
      if (sentep & (1 << ep)) {
20000d78:	0099d533          	srl	a0,s3,s1
20000d7c:	8905                	andi	a0,a0,1
20000d7e:	c505                	beqz	a0,20000da6 <usbdev_poll+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:114
        // Free up the buffer and optionally callback
        int32_t cfgin = REG32(configin + (4 * ep));
20000d80:	000aa583          	lw	a1,0(s5)
usbdev_buf_free_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:39
  if ((ctx->nfree >= NUM_BUFS) || (buf >= NUM_BUFS)) {
20000d84:	028a2503          	lw	a0,40(s4)
20000d88:	00abca63          	blt	s7,a0,20000d9c <usbdev_poll+0x86>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:42
  ctx->freebuf[ctx->nfree++] = buf;
20000d8c:	89fd                	andi	a1,a1,31
20000d8e:	00150613          	addi	a2,a0,1
20000d92:	02ca2423          	sw	a2,40(s4)
20000d96:	9552                	add	a0,a0,s4
20000d98:	00b50223          	sb	a1,4(a0)
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:116
        usbdev_buf_free_byid(ctx, EXTRACT(cfgin, CONFIGIN_0_BUFFER_0));
        if (ctx->tx_done_callback[ep]) {
20000d9c:	400c                	lw	a1,0(s0)
20000d9e:	c581                	beqz	a1,20000da6 <usbdev_poll+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:117
          ctx->tx_done_callback[ep](ctx->ep_ctx[ep]);
20000da0:	fd042503          	lw	a0,-48(s0)
20000da4:	9582                	jalr	a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:111
    for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
20000da6:	0485                	addi	s1,s1,1
20000da8:	0a91                	addi	s5,s5,4
20000daa:	0411                	addi	s0,s0,4
20000dac:	fd6496e3          	bne	s1,s6,20000d78 <usbdev_poll+0x62>
20000db0:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:122
        }
      }
    }
    // Write one to clear all the ones we handled
    REG32(USBDEV_BASE_ADDR + USBDEV_IN_SENT_REG_OFFSET) = sentep;
20000db4:	03352223          	sw	s3,36(a0) # 40110024 <_data_init_start+0x2010dab8>
20000db8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:124
    // Clear the interupt
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
20000dba:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:128
        (1 << USBDEV_INTR_STATE_PKT_SENT_BIT);
  }

  if (istate & (1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT)) {
20000dbc:	00197513          	andi	a0,s2,1
20000dc0:	c12d                	beqz	a0,20000e22 <usbdev_poll+0x10c>
20000dc2:	401109b7          	lui	s3,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:129
    while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20000dc6:	0109a503          	lw	a0,16(s3) # 40110010 <_data_init_start+0x2010daa4>
20000dca:	04054963          	bltz	a0,20000e1c <usbdev_poll+0x106>
20000dce:	4afd                	li	s5,31
20000dd0:	547d                	li	s0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:131
             (1 << USBDEV_USBSTAT_RX_EMPTY_BIT))) {
      uint32_t rxinfo = REG32(USBDEV_BASE_ADDR + USBDEV_RXFIFO_REG_OFFSET);
20000dd2:	0189a583          	lw	a1,24(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:134
      usbbufid_t buf = EXTRACT(rxinfo, RXFIFO_BUFFER);
      int size = EXTRACT(rxinfo, RXFIFO_SIZE);
      int endpoint = EXTRACT(rxinfo, RXFIFO_EP);
20000dd6:	0145d513          	srli	a0,a1,0x14
20000dda:	893d                	andi	a0,a0,15
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:137
      int setup = (rxinfo >> USBDEV_RXFIFO_SETUP_BIT) & 1;

      if (ctx->rx_callback[endpoint]) {
20000ddc:	050a                	slli	a0,a0,0x2
20000dde:	9552                	add	a0,a0,s4
20000de0:	09052703          	lw	a4,144(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:132
      usbbufid_t buf = EXTRACT(rxinfo, RXFIFO_BUFFER);
20000de4:	01f5f493          	andi	s1,a1,31
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:137
      if (ctx->rx_callback[endpoint]) {
20000de8:	cb19                	beqz	a4,20000dfe <usbdev_poll+0xe8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:135
      int setup = (rxinfo >> USBDEV_RXFIFO_SETUP_BIT) & 1;
20000dea:	0135d613          	srli	a2,a1,0x13
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:138
        ctx->rx_callback[endpoint](ctx->ep_ctx[endpoint], buf, size, setup);
20000dee:	5908                	lw	a0,48(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:135
      int setup = (rxinfo >> USBDEV_RXFIFO_SETUP_BIT) & 1;
20000df0:	00167693          	andi	a3,a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:133
      int size = EXTRACT(rxinfo, RXFIFO_SIZE);
20000df4:	81a1                	srli	a1,a1,0x8
20000df6:	07f5f613          	andi	a2,a1,127
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:138
        ctx->rx_callback[endpoint](ctx->ep_ctx[endpoint], buf, size, setup);
20000dfa:	85a6                	mv	a1,s1
20000dfc:	9702                	jalr	a4
usbdev_buf_free_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:39
  if ((ctx->nfree >= NUM_BUFS) || (buf >= NUM_BUFS)) {
20000dfe:	028a2503          	lw	a0,40(s4)
20000e02:	00aac963          	blt	s5,a0,20000e14 <usbdev_poll+0xfe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:42
  ctx->freebuf[ctx->nfree++] = buf;
20000e06:	00150593          	addi	a1,a0,1
20000e0a:	02ba2423          	sw	a1,40(s4)
20000e0e:	9552                	add	a0,a0,s4
20000e10:	00950223          	sb	s1,4(a0)
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:129
    while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20000e14:	0109a503          	lw	a0,16(s3)
20000e18:	faa44de3          	blt	s0,a0,20000dd2 <usbdev_poll+0xbc>
20000e1c:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:146
        TRC_I(rxinfo, 24);
      }
      usbdev_buf_free_byid(ctx, buf);
    }
    // Clear the interupt
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
20000e1e:	00a9a023          	sw	a0,0(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:149
        (1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT);
  }
  if (istate & ~((1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT) |
20000e22:	ffc97513          	andi	a0,s2,-4
20000e26:	c905                	beqz	a0,20000e56 <usbdev_poll+0x140>
20000e28:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:157
    TRC_I(istate, 12);
    TRC_C(' ');
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
        istate & ~((1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT) |
                   (1 << USBDEV_INTR_STATE_PKT_SENT_BIT));
    if (istate & (1 << USBDEV_INTR_ENABLE_LINK_RESET_BIT)) {
20000e2c:	01097613          	andi	a2,s2,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:154
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
20000e30:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:157
    if (istate & (1 << USBDEV_INTR_ENABLE_LINK_RESET_BIT)) {
20000e32:	c215                	beqz	a2,20000e56 <usbdev_poll+0x140>
20000e34:	4401                	li	s0,0
20000e36:	03000493          	li	s1,48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:160
      // Link reset
      for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
        if (ctx->reset[ep]) {
20000e3a:	008a0533          	add	a0,s4,s0
20000e3e:	0f052583          	lw	a1,240(a0)
20000e42:	c199                	beqz	a1,20000e48 <usbdev_poll+0x132>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:161
          ctx->reset[ep](ctx->ep_ctx[ep]);
20000e44:	5908                	lw	a0,48(a0)
20000e46:	9582                	jalr	a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:159
      for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
20000e48:	0411                	addi	s0,s0,4
20000e4a:	fe9418e3          	bne	s0,s1,20000e3a <usbdev_poll+0x124>
20000e4e:	40110537          	lui	a0,0x40110
20000e52:	45c1                	li	a1,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:166
        }
      }

      // Clear the interupt
      REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
20000e54:	c10c                	sw	a1,0(a0)
20000e56:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:174
  }
  // TODO - clean this up
  // Frame ticks every 1ms, use to flush data every 16ms
  // (faster in DPI but this seems to work ok)
  // At reset frame count is 0, compare to 1 so no calls before SOF received
  uint32_t usbframe = EXTRACT(
20000e5a:	4908                	lw	a0,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:176
      REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET), USBSTAT_FRAME);
  if ((usbframe & 0xf) == 1) {
20000e5c:	893d                	andi	a0,a0,15
20000e5e:	4585                	li	a1,1
20000e60:	02b51463          	bne	a0,a1,20000e88 <usbdev_poll+0x172>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:177
    if (ctx->flushed == 0) {
20000e64:	02ca2503          	lw	a0,44(s4)
20000e68:	e11d                	bnez	a0,20000e8e <usbdev_poll+0x178>
20000e6a:	4401                	li	s0,0
20000e6c:	03000493          	li	s1,48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:179
      for (int i = 0; i < NUM_ENDPOINTS; i++) {
        if (ctx->flush[i]) {
20000e70:	008a0533          	add	a0,s4,s0
20000e74:	0c052583          	lw	a1,192(a0) # 401100c0 <_data_init_start+0x2010db54>
20000e78:	c199                	beqz	a1,20000e7e <usbdev_poll+0x168>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:180
          ctx->flush[i](ctx->ep_ctx[i]);
20000e7a:	5908                	lw	a0,48(a0)
20000e7c:	9582                	jalr	a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:178
      for (int i = 0; i < NUM_ENDPOINTS; i++) {
20000e7e:	0411                	addi	s0,s0,4
20000e80:	fe9418e3          	bne	s0,s1,20000e70 <usbdev_poll+0x15a>
20000e84:	4505                	li	a0,1
20000e86:	a011                	j	20000e8a <usbdev_poll+0x174>
20000e88:	4501                	li	a0,0
20000e8a:	02aa2623          	sw	a0,44(s4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:189
    }
  } else {
    ctx->flushed = 0;
  }
  // TODO Errors? What Errors?
}
20000e8e:	4bb2                	lw	s7,12(sp)
20000e90:	4b42                	lw	s6,16(sp)
20000e92:	4ad2                	lw	s5,20(sp)
20000e94:	4a62                	lw	s4,24(sp)
20000e96:	49f2                	lw	s3,28(sp)
20000e98:	5902                	lw	s2,32(sp)
20000e9a:	5492                	lw	s1,36(sp)
20000e9c:	5422                	lw	s0,40(sp)
20000e9e:	50b2                	lw	ra,44(sp)
20000ea0:	6145                	addi	sp,sp,48
20000ea2:	8082                	ret

20000ea4 <usbdev_get_status>:
usbdev_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:191

unsigned int usbdev_get_status(usbdev_ctx_t *ctx) {
20000ea4:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:192
  unsigned int status = REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET);
20000ea8:	4908                	lw	a0,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:193
  return status;
20000eaa:	8082                	ret

20000eac <usbdev_get_link_state>:
usbdev_get_link_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:196
}

unsigned int usbdev_get_link_state(usbdev_ctx_t *ctx) {
20000eac:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:197
  unsigned int link_state = EXTRACT(
20000eb0:	4908                	lw	a0,16(a0)
20000eb2:	8131                	srli	a0,a0,0xc
20000eb4:	891d                	andi	a0,a0,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:199
      REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET), USBSTAT_LINK_STATE);
  return link_state;
20000eb6:	8082                	ret

20000eb8 <usbdev_get_address>:
usbdev_get_address():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:202
}

unsigned int usbdev_get_address(usbdev_ctx_t *ctx) {
20000eb8:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:204
  unsigned int addr =
      EXTRACT(REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET),
20000ebc:	4548                	lw	a0,12(a0)
20000ebe:	8141                	srli	a0,a0,0x10
20000ec0:	07f57513          	andi	a0,a0,127
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:206
              USBCTRL_DEVICE_ADDRESS);
  return addr;
20000ec4:	8082                	ret

20000ec6 <usbdev_set_deviceid>:
usbdev_set_deviceid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:212
}

void usbdev_set_deviceid(usbdev_ctx_t *ctx, int deviceid) {
  REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET) =
      (1 << USBDEV_USBCTRL_ENABLE_BIT) |
      (deviceid << USBDEV_USBCTRL_DEVICE_ADDRESS_OFFSET);
20000ec6:	01059513          	slli	a0,a1,0x10
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:211
      (1 << USBDEV_USBCTRL_ENABLE_BIT) |
20000eca:	00156513          	ori	a0,a0,1
20000ece:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:210
  REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET) =
20000ed2:	c5c8                	sw	a0,12(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:213
}
20000ed4:	8082                	ret

20000ed6 <usbdev_halt>:
usbdev_halt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:215

void usbdev_halt(usbdev_ctx_t *ctx, int endpoint, int enable) {
20000ed6:	401106b7          	lui	a3,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:217
  uint32_t epbit = 1 << endpoint;
  uint32_t stall = REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET);
20000eda:	5698                	lw	a4,40(a3)
20000edc:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:216
  uint32_t epbit = 1 << endpoint;
20000ede:	00b795b3          	sll	a1,a5,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:218
  if (enable) {
20000ee2:	c219                	beqz	a2,20000ee8 <usbdev_halt+0x12>
20000ee4:	8dd9                	or	a1,a1,a4
20000ee6:	a021                	j	20000eee <usbdev_halt+0x18>
20000ee8:	fff5c593          	not	a1,a1
20000eec:	8df9                	and	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:223
    stall |= epbit;
  } else {
    stall &= ~epbit;
  }
  REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) = stall;
20000eee:	d68c                	sw	a1,40(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:224
  ctx->halted = stall;
20000ef0:	d14c                	sw	a1,36(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:227
  // TODO future addition would be to callback the endpoint driver
  // for now it just sees its traffic has stopped
}
20000ef2:	8082                	ret

20000ef4 <usbdev_set_iso>:
usbdev_set_iso():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:229

void usbdev_set_iso(usbdev_ctx_t *ctx, int endpoint, int enable) {
20000ef4:	40110537          	lui	a0,0x40110
20000ef8:	4d74                	lw	a3,92(a0)
20000efa:	4705                	li	a4,1
20000efc:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:230
  if (enable) {
20000f00:	c219                	beqz	a2,20000f06 <usbdev_set_iso+0x12>
20000f02:	8dd5                	or	a1,a1,a3
20000f04:	a021                	j	20000f0c <usbdev_set_iso+0x18>
20000f06:	fff5c593          	not	a1,a1
20000f0a:	8df5                	and	a1,a1,a3
20000f0c:	cd6c                	sw	a1,92(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:237
        SETBIT(REG32(USBDEV_BASE_ADDR + USBDEV_ISO_REG_OFFSET), endpoint);
  } else {
    REG32(USBDEV_BASE_ADDR + USBDEV_ISO_REG_OFFSET) =
        CLRBIT(REG32(USBDEV_BASE_ADDR + USBDEV_ISO_REG_OFFSET), endpoint);
  }
}
20000f0e:	8082                	ret

20000f10 <usbdev_clear_data_toggle>:
usbdev_clear_data_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:239

void usbdev_clear_data_toggle(usbdev_ctx_t *ctx, int endpoint) {
20000f10:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:241
  REG32(USBDEV_BASE_ADDR + USBDEV_DATA_TOGGLE_CLEAR_REG_OFFSET) =
      (1 << endpoint);
20000f12:	00b51533          	sll	a0,a0,a1
20000f16:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:240
  REG32(USBDEV_BASE_ADDR + USBDEV_DATA_TOGGLE_CLEAR_REG_OFFSET) =
20000f1a:	d1a8                	sw	a0,96(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:242
}
20000f1c:	8082                	ret

20000f1e <usbdev_set_ep0_stall>:
usbdev_set_ep0_stall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:244

void usbdev_set_ep0_stall(usbdev_ctx_t *ctx, int stall) {
20000f1e:	40110537          	lui	a0,0x40110
20000f22:	5510                	lw	a2,40(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:245
  if (stall) {
20000f24:	00b035b3          	snez	a1,a1
20000f28:	9a79                	andi	a2,a2,-2
20000f2a:	8dd1                	or	a1,a1,a2
20000f2c:	d50c                	sw	a1,40(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:252
        REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) | 1;
  } else {
    REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) =
        REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) & ~(1);
  }
}
20000f2e:	8082                	ret

20000f30 <usbdev_can_rem_wake>:
usbdev_can_rem_wake():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:255

// TODO got hang with this inline
int usbdev_can_rem_wake(usbdev_ctx_t *ctx) { return ctx->can_wake; }
20000f30:	4108                	lw	a0,0(a0)
20000f32:	8082                	ret

20000f34 <usbdev_endpoint_setup>:
usbdev_endpoint_setup():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:261

void usbdev_endpoint_setup(usbdev_ctx_t *ctx, int ep, int enableout,
                           void *ep_ctx, void (*tx_done)(void *),
                           void (*rx)(void *, usbbufid_t, int, int),
                           void (*flush)(void *), void (*reset)(void *)) {
  ctx->ep_ctx[ep] = ep_ctx;
20000f34:	00259293          	slli	t0,a1,0x2
20000f38:	9516                	add	a0,a0,t0
20000f3a:	d914                	sw	a3,48(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:262
  ctx->tx_done_callback[ep] = tx_done;
20000f3c:	d138                	sw	a4,96(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:263
  ctx->rx_callback[ep] = rx;
20000f3e:	08f52823          	sw	a5,144(a0) # 40110090 <_data_init_start+0x2010db24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:264
  ctx->flush[ep] = flush;
20000f42:	0d052023          	sw	a6,192(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:265
  ctx->reset[ep] = reset;
20000f46:	0f152823          	sw	a7,240(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:266
  if (enableout) {
20000f4a:	ca19                	beqz	a2,20000f60 <usbdev_endpoint_setup+0x2c>
20000f4c:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:267
    uint32_t rxen = REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_OUT_REG_OFFSET);
20000f50:	5110                	lw	a2,32(a0)
20000f52:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:268
    rxen |= (1 << (ep + USBDEV_RXENABLE_OUT_OUT_0_BIT));
20000f54:	00b695b3          	sll	a1,a3,a1
20000f58:	8dd1                	or	a1,a1,a2
20000f5a:	02050513          	addi	a0,a0,32 # 40110020 <_data_init_start+0x2010dab4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:269
    REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_OUT_REG_OFFSET) = rxen;
20000f5e:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:271
  }
}
20000f60:	8082                	ret

20000f62 <usbdev_init>:
usbdev_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:273

void usbdev_init(usbdev_ctx_t *ctx, bool pinflip, bool diff_rx, bool diff_tx) {
20000f62:	1101                	addi	sp,sp,-32
20000f64:	ce06                	sw	ra,28(sp)
20000f66:	cc22                	sw	s0,24(sp)
20000f68:	ca26                	sw	s1,20(sp)
20000f6a:	c84a                	sw	s2,16(sp)
20000f6c:	c64e                	sw	s3,12(sp)
20000f6e:	8436                	mv	s0,a3
20000f70:	8932                	mv	s2,a2
20000f72:	89ae                	mv	s3,a1
20000f74:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:275
  // setup context
  for (int i = 0; i < NUM_ENDPOINTS; i++) {
20000f76:	03050513          	addi	a0,a0,48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:278
    usbdev_endpoint_setup(ctx, i, 0, NULL, NULL, NULL, NULL, NULL);
  }
  ctx->halted = 0;
20000f7a:	0204a223          	sw	zero,36(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:279
  ctx->can_wake = 0;
20000f7e:	0004a023          	sw	zero,0(s1)
usbdev_endpoint_setup():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:262
  ctx->tx_done_callback[ep] = tx_done;
20000f82:	0f000613          	li	a2,240
20000f86:	4581                	li	a1,0
20000f88:	f32ff0ef          	jal	ra,200006ba <memset>
20000f8c:	4501                	li	a0,0
buf_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:23
  for (int i = 0; i < NUM_BUFS; i++) {
20000f8e:	00448593          	addi	a1,s1,4
20000f92:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:24
    ctx->freebuf[i] = i;
20000f96:	00a586b3          	add	a3,a1,a0
20000f9a:	00a68023          	sb	a0,0(a3) # 40110000 <_data_init_start+0x2010da94>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:23
  for (int i = 0; i < NUM_BUFS; i++) {
20000f9e:	0505                	addi	a0,a0,1
20000fa0:	fec51be3          	bne	a0,a2,20000f96 <usbdev_init+0x34>
20000fa4:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:26
  ctx->nfree = NUM_BUFS;
20000fa8:	d488                	sw	a0,40(s1)
20000faa:	40110537          	lui	a0,0x40110
usbdev_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:283
  buf_init(ctx);

  // All about polling...
  REG32(USBDEV_BASE_ADDR + USBDEV_INTR_ENABLE_REG_OFFSET) = 0;
20000fae:	00052223          	sw	zero,4(a0) # 40110004 <_data_init_start+0x2010da98>
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20000fb2:	4910                	lw	a2,16(a0)
20000fb4:	008005b7          	lui	a1,0x800
20000fb8:	8e6d                	and	a2,a2,a1
20000fba:	ee11                	bnez	a2,20000fd6 <usbdev_init+0x74>
20000fbc:	4605                	li	a2,1
usbdev_buf_allocate_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:31
  if (ctx->nfree <= 0) {
20000fbe:	5494                	lw	a3,40(s1)
20000fc0:	00c6cb63          	blt	a3,a2,20000fd6 <usbdev_init+0x74>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:34
  return ctx->freebuf[--ctx->nfree];
20000fc4:	16fd                	addi	a3,a3,-1
20000fc6:	d494                	sw	a3,40(s1)
20000fc8:	96a6                	add	a3,a3,s1
20000fca:	0046c683          	lbu	a3,4(a3)
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:77
    REG32(USBDEV_BASE_ADDR + USBDEV_AVBUFFER_REG_OFFSET) = buf;
20000fce:	c954                	sw	a3,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20000fd0:	4914                	lw	a3,16(a0)
20000fd2:	8eed                	and	a3,a3,a1
20000fd4:	d6ed                	beqz	a3,20000fbe <usbdev_init+0x5c>
20000fd6:	4585                	li	a1,1
usbdev_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:288

  // Provide buffers for any reception
  fill_av_fifo(ctx);

  REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_SETUP_REG_OFFSET) =
20000fd8:	cd4c                	sw	a1,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:290
      (1 << USBDEV_RXENABLE_SETUP_SETUP_0_BIT);
  REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_OUT_REG_OFFSET) =
20000fda:	d10c                	sw	a1,32(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:296
      (1 << USBDEV_RXENABLE_OUT_OUT_0_BIT);

  uint32_t phy_config =
      (pinflip << USBDEV_PHY_CONFIG_PINFLIP_BIT) |
      (diff_rx << USBDEV_PHY_CONFIG_RX_DIFFERENTIAL_MODE_BIT) |
      (diff_tx << USBDEV_PHY_CONFIG_TX_DIFFERENTIAL_MODE_BIT) |
20000fdc:	00141613          	slli	a2,s0,0x1
20000fe0:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:294
      (pinflip << USBDEV_PHY_CONFIG_PINFLIP_BIT) |
20000fe4:	00099363          	bnez	s3,20000fea <usbdev_init+0x88>
20000fe8:	4691                	li	a3,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:295
      (diff_rx << USBDEV_PHY_CONFIG_RX_DIFFERENTIAL_MODE_BIT) |
20000fea:	0126e6b3          	or	a3,a3,s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:296
      (diff_tx << USBDEV_PHY_CONFIG_TX_DIFFERENTIAL_MODE_BIT) |
20000fee:	8e55                	or	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:298
      (1 << USBDEV_PHY_CONFIG_EOP_SINGLE_BIT_BIT);
  REG32(USBDEV_BASE_ADDR + USBDEV_PHY_CONFIG_REG_OFFSET) = phy_config;
20000ff0:	d570                	sw	a2,108(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:300

  REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET) =
20000ff2:	c54c                	sw	a1,12(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:302
      (1 << USBDEV_USBCTRL_ENABLE_BIT);
}
20000ff4:	49b2                	lw	s3,12(sp)
20000ff6:	4942                	lw	s2,16(sp)
20000ff8:	44d2                	lw	s1,20(sp)
20000ffa:	4462                	lw	s0,24(sp)
20000ffc:	40f2                	lw	ra,28(sp)
20000ffe:	6105                	addi	sp,sp,32
20001000:	8082                	ret

20001002 <usbdev_force_dx_pullup>:
usbdev_force_dx_pullup():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:304

void usbdev_force_dx_pullup(line_sel_t line, bool set) {
20001002:	40110637          	lui	a2,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:306
  // Force usb to pretend it is in suspend
  uint32_t reg_val = REG32(USBDEV_BASE_ADDR + USBDEV_PHY_PINS_DRIVE_REG_OFFSET);
20001006:	5634                	lw	a3,104(a2)
20001008:	04000713          	li	a4,64
2000100c:	c119                	beqz	a0,20001012 <usbdev_force_dx_pullup+0x10>
2000100e:	08000713          	li	a4,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:312
  uint32_t mask;

  mask = line == kDpSel ? USBDEV_PHY_PINS_DRIVE_DP_PULLUP_EN_O_BIT
                        : USBDEV_PHY_PINS_DRIVE_DN_PULLUP_EN_O_BIT;

  if (set) {
20001012:	e589                	bnez	a1,2000101c <usbdev_force_dx_pullup+0x1a>
20001014:	fff74513          	not	a0,a4
20001018:	8d75                	and	a0,a0,a3
2000101a:	a019                	j	20001020 <usbdev_force_dx_pullup+0x1e>
2000101c:	00e6e533          	or	a0,a3,a4
20001020:	65c1                	lui	a1,0x10
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:318
    reg_val = SETBIT(reg_val, mask);
  } else {
    reg_val = CLRBIT(reg_val, mask);
  }

  reg_val = SETBIT(reg_val, USBDEV_PHY_PINS_DRIVE_EN_BIT);
20001022:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:319
  REG32(USBDEV_BASE_ADDR + USBDEV_PHY_PINS_DRIVE_REG_OFFSET) = reg_val;
20001024:	d628                	sw	a0,104(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:320
}
20001026:	8082                	ret

20001028 <usbdev_force_suspend>:
usbdev_force_suspend():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:322

void usbdev_force_suspend() {
20001028:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:324
  // Force usb to pretend it is in suspend
  REG32(USBDEV_BASE_ADDR + USBDEV_PHY_PINS_DRIVE_REG_OFFSET) |=
2000102c:	552c                	lw	a1,104(a0)
2000102e:	6641                	lui	a2,0x10
20001030:	10060613          	addi	a2,a2,256 # 10100 <test_main.kLogFields.5+0x10>
20001034:	8dd1                	or	a1,a1,a2
20001036:	d52c                	sw	a1,104(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:327
      1 << USBDEV_PHY_PINS_DRIVE_SUSPEND_O_BIT |
      1 << USBDEV_PHY_PINS_DRIVE_EN_BIT;
}
20001038:	8082                	ret

2000103a <usbdev_wake>:
usbdev_wake():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:329

void usbdev_wake(bool set) {
2000103a:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:330
  uint32_t reg_val = REG32(USBDEV_BASE_ADDR + USBDEV_WAKE_CONFIG_REG_OFFSET);
2000103e:	59b0                	lw	a2,112(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:331
  if (set) {
20001040:	9a79                	andi	a2,a2,-2
20001042:	8d51                	or	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:336
    reg_val = SETBIT(reg_val, USBDEV_WAKE_CONFIG_WAKE_EN_BIT);
  } else {
    reg_val = CLRBIT(reg_val, USBDEV_WAKE_CONFIG_WAKE_EN_BIT);
  }
  REG32(USBDEV_BASE_ADDR + USBDEV_WAKE_CONFIG_REG_OFFSET) = reg_val;
20001044:	d9a8                	sw	a0,112(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:337
}
20001046:	8082                	ret

20001048 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20001048:	7139                	addi	sp,sp,-64
2000104a:	ce06                	sw	ra,28(sp)
2000104c:	cc22                	sw	s0,24(sp)
2000104e:	ca26                	sw	s1,20(sp)
20001050:	c84a                	sw	s2,16(sp)
20001052:	892a                	mv	s2,a0
20001054:	de46                	sw	a7,60(sp)
20001056:	dc42                	sw	a6,56(sp)
20001058:	da3e                	sw	a5,52(sp)
2000105a:	d83a                	sw	a4,48(sp)
2000105c:	d636                	sw	a3,44(sp)
2000105e:	d432                	sw	a2,40(sp)
20001060:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20001062:	4144                	lw	s1,4(a0)
20001064:	80000537          	lui	a0,0x80000
20001068:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffda93>
2000106c:	8526                	mv	a0,s1
2000106e:	4581                	li	a1,0
20001070:	e84ff0ef          	jal	ra,200006f4 <memchr>
20001074:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20001078:	02f00593          	li	a1,47
2000107c:	8526                	mv	a0,s1
2000107e:	e8eff0ef          	jal	ra,2000070c <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001082:	00092583          	lw	a1,0(s2)
20001086:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001088:	00b66b63          	bltu	a2,a1,2000109e <base_log_internal_core+0x56>
2000108c:	058a                	slli	a1,a1,0x2
2000108e:	00001617          	auipc	a2,0x1
20001092:	e6260613          	addi	a2,a2,-414 # 20001ef0 <request_reg_infos+0x30>
20001096:	95b2                	add	a1,a1,a2
20001098:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
2000109a:	e519                	bnez	a0,200010a8 <base_log_internal_core+0x60>
2000109c:	a801                	j	200010ac <base_log_internal_core+0x64>
2000109e:	00001597          	auipc	a1,0x1
200010a2:	4c458593          	addi	a1,a1,1220 # 20002562 <__clz_tab+0x612>
200010a6:	c119                	beqz	a0,200010ac <base_log_internal_core+0x64>
200010a8:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
200010ac:	effff417          	auipc	s0,0xeffff
200010b0:	f6440413          	addi	s0,s0,-156 # 10000010 <base_log_internal_core.global_log_counter>
200010b4:	00045603          	lhu	a2,0(s0)
200010b8:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200010bc:	00001517          	auipc	a0,0x1
200010c0:	48d50513          	addi	a0,a0,1165 # 20002549 <__clz_tab+0x5f9>
200010c4:	86a6                	mv	a3,s1
200010c6:	28d1                	jal	2000119a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
200010c8:	00041503          	lh	a0,0(s0)
200010cc:	0505                	addi	a0,a0,1
200010ce:	00a41023          	sh	a0,0(s0)
200010d2:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
200010d4:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
200010d6:	01092503          	lw	a0,16(s2)
200010da:	28c5                	jal	200011ca <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
200010dc:	00001517          	auipc	a0,0x1
200010e0:	47b50513          	addi	a0,a0,1147 # 20002557 <__clz_tab+0x607>
200010e4:	285d                	jal	2000119a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
200010e6:	4942                	lw	s2,16(sp)
200010e8:	44d2                	lw	s1,20(sp)
200010ea:	4462                	lw	s0,24(sp)
200010ec:	40f2                	lw	ra,28(sp)
200010ee:	6121                	addi	sp,sp,64
200010f0:	8082                	ret

200010f2 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
200010f2:	1101                	addi	sp,sp,-32
200010f4:	ce46                	sw	a7,28(sp)
200010f6:	cc42                	sw	a6,24(sp)
200010f8:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
200010fa:	00001797          	auipc	a5,0x1
200010fe:	d1e78793          	addi	a5,a5,-738 # 20001e18 <kDeviceLogBypassUartAddress>
20001102:	439c                	lw	a5,0(a5)
20001104:	c83a                	sw	a4,16(sp)
20001106:	c636                	sw	a3,12(sp)
20001108:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000110a:	c388                	sw	a0,0(a5)
2000110c:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
2000110e:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001110:	c989                	beqz	a1,20001122 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20001112:	4512                	lw	a0,4(sp)
20001114:	00450613          	addi	a2,a0,4
20001118:	c232                	sw	a2,4(sp)
2000111a:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
2000111c:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000111e:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001120:	f9ed                	bnez	a1,20001112 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20001122:	6105                	addi	sp,sp,32
20001124:	8082                	ret
	...

20001128 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20001128:	e589                	bnez	a1,20001132 <base_set_stdout+0xa>
2000112a:	00000597          	auipc	a1,0x0
2000112e:	01658593          	addi	a1,a1,22 # 20001140 <base_dev_null>
20001132:	effff617          	auipc	a2,0xeffff
20001136:	ece60613          	addi	a2,a2,-306 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
2000113a:	c208                	sw	a0,0(a2)
2000113c:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
2000113e:	8082                	ret

20001140 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001140:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20001142:	8082                	ret

20001144 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001144:	effff597          	auipc	a1,0xeffff
20001148:	ebc58593          	addi	a1,a1,-324 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
2000114c:	c188                	sw	a0,0(a1)
2000114e:	00000517          	auipc	a0,0x0
20001152:	00c50513          	addi	a0,a0,12 # 2000115a <base_dev_uart>
20001156:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001158:	8082                	ret

2000115a <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
2000115a:	1101                	addi	sp,sp,-32
2000115c:	ce06                	sw	ra,28(sp)
2000115e:	cc22                	sw	s0,24(sp)
20001160:	ca26                	sw	s1,20(sp)
20001162:	c84a                	sw	s2,16(sp)
20001164:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001166:	c20d                	beqz	a2,20001188 <base_dev_uart+0x2e>
20001168:	8432                	mv	s0,a2
2000116a:	892e                	mv	s2,a1
2000116c:	89aa                	mv	s3,a0
2000116e:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001170:	00990533          	add	a0,s2,s1
20001174:	00054583          	lbu	a1,0(a0)
20001178:	854e                	mv	a0,s3
2000117a:	2f11                	jal	2000188e <dif_uart_byte_send_polled>
2000117c:	e519                	bnez	a0,2000118a <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
2000117e:	0485                	addi	s1,s1,1
20001180:	fe9418e3          	bne	s0,s1,20001170 <base_dev_uart+0x16>
20001184:	84a2                	mv	s1,s0
20001186:	a011                	j	2000118a <base_dev_uart+0x30>
20001188:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
2000118a:	8526                	mv	a0,s1
2000118c:	49b2                	lw	s3,12(sp)
2000118e:	4942                	lw	s2,16(sp)
20001190:	44d2                	lw	s1,20(sp)
20001192:	4462                	lw	s0,24(sp)
20001194:	40f2                	lw	ra,28(sp)
20001196:	6105                	addi	sp,sp,32
20001198:	8082                	ret

2000119a <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
2000119a:	7179                	addi	sp,sp,-48
2000119c:	c606                	sw	ra,12(sp)
2000119e:	d646                	sw	a7,44(sp)
200011a0:	d442                	sw	a6,40(sp)
200011a2:	d23e                	sw	a5,36(sp)
200011a4:	d03a                	sw	a4,32(sp)
200011a6:	ce36                	sw	a3,28(sp)
200011a8:	cc32                	sw	a2,24(sp)
200011aa:	ca2e                	sw	a1,20(sp)
200011ac:	effff597          	auipc	a1,0xeffff
200011b0:	e5458593          	addi	a1,a1,-428 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
200011b4:	4190                	lw	a2,0(a1)
200011b6:	41cc                	lw	a1,4(a1)
200011b8:	872a                	mv	a4,a0
200011ba:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
200011bc:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200011be:	8532                	mv	a0,a2
200011c0:	863a                	mv	a2,a4
200011c2:	200d                	jal	200011e4 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
200011c4:	40b2                	lw	ra,12(sp)
200011c6:	6145                	addi	sp,sp,48
200011c8:	8082                	ret

200011ca <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
200011ca:	effff697          	auipc	a3,0xeffff
200011ce:	e3668693          	addi	a3,a3,-458 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200011d2:	4290                	lw	a2,0(a3)
200011d4:	42d4                	lw	a3,4(a3)
200011d6:	872e                	mv	a4,a1
200011d8:	87aa                	mv	a5,a0
200011da:	8532                	mv	a0,a2
200011dc:	85b6                	mv	a1,a3
200011de:	863e                	mv	a2,a5
200011e0:	86ba                	mv	a3,a4
200011e2:	a009                	j	200011e4 <base_vfprintf>

200011e4 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
200011e4:	7139                	addi	sp,sp,-64
200011e6:	de06                	sw	ra,60(sp)
200011e8:	dc22                	sw	s0,56(sp)
200011ea:	da26                	sw	s1,52(sp)
200011ec:	d84a                	sw	s2,48(sp)
200011ee:	d64e                	sw	s3,44(sp)
200011f0:	d452                	sw	s4,40(sp)
200011f2:	d256                	sw	s5,36(sp)
200011f4:	d05a                	sw	s6,32(sp)
200011f6:	ce5e                	sw	s7,28(sp)
200011f8:	cc62                	sw	s8,24(sp)
200011fa:	ca66                	sw	s9,20(sp)
200011fc:	c86a                	sw	s10,16(sp)
200011fe:	c66e                	sw	s11,12(sp)
20001200:	8bb2                	mv	s7,a2
20001202:	892a                	mv	s2,a0
20001204:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20001206:	c199                	beqz	a1,2000120c <base_vfprintf+0x28>
20001208:	89ae                	mv	s3,a1
2000120a:	a029                	j	20001214 <base_vfprintf+0x30>
2000120c:	00000997          	auipc	s3,0x0
20001210:	f3498993          	addi	s3,s3,-204 # 20001140 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001214:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20001216:	000bc503          	lbu	a0,0(s7)
2000121a:	28050f63          	beqz	a0,200014b8 <base_vfprintf+0x2d4>
2000121e:	4b01                	li	s6,0
20001220:	02500c13          	li	s8,37
20001224:	4ca5                	li	s9,9
20001226:	02000d13          	li	s10,32
2000122a:	06800d93          	li	s11,104
2000122e:	00001a17          	auipc	s4,0x1
20001232:	336a0a13          	addi	s4,s4,822 # 20002564 <__clz_tab+0x614>
20001236:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20001238:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
2000123a:	0ff57413          	andi	s0,a0,255
2000123e:	01840963          	beq	s0,s8,20001250 <base_vfprintf+0x6c>
20001242:	c419                	beqz	s0,20001250 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001244:	009b8533          	add	a0,s7,s1
20001248:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
2000124c:	0485                	addi	s1,s1,1
2000124e:	b7f5                	j	2000123a <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20001250:	c491                	beqz	s1,2000125c <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20001252:	854a                	mv	a0,s2
20001254:	85de                	mv	a1,s7
20001256:	8626                	mv	a2,s1
20001258:	9982                	jalr	s3
2000125a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
2000125c:	24040f63          	beqz	s0,200014ba <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001260:	009b8633          	add	a2,s7,s1
20001264:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001268:	22050f63          	beqz	a0,200014a6 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
2000126c:	fd050593          	addi	a1,a0,-48
20001270:	0ff5f593          	andi	a1,a1,255
20001274:	00bcf863          	bgeu	s9,a1,20001284 <base_vfprintf+0xa0>
20001278:	4401                	li	s0,0
2000127a:	4581                	li	a1,0
2000127c:	4605                	li	a2,1
2000127e:	028d7f63          	bgeu	s10,s0,200012bc <base_vfprintf+0xd8>
20001282:	aca1                	j	200014da <base_vfprintf+0x2f6>
20001284:	4581                	li	a1,0
20001286:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001288:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000128a:	00b606b3          	add	a3,a2,a1
2000128e:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001292:	20068a63          	beqz	a3,200014a6 <base_vfprintf+0x2c2>
20001296:	0ff57513          	andi	a0,a0,255
2000129a:	03540733          	mul	a4,s0,s5
2000129e:	953a                	add	a0,a0,a4
200012a0:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200012a4:	fd068513          	addi	a0,a3,-48
200012a8:	0ff57713          	andi	a4,a0,255
200012ac:	0585                	addi	a1,a1,1
200012ae:	8536                	mv	a0,a3
200012b0:	fcecfde3          	bgeu	s9,a4,2000128a <base_vfprintf+0xa6>
200012b4:	4601                	li	a2,0
200012b6:	8536                	mv	a0,a3
200012b8:	228d6163          	bltu	s10,s0,200014da <base_vfprintf+0x2f6>
200012bc:	008036b3          	snez	a3,s0
200012c0:	8e55                	or	a2,a2,a3
200012c2:	20060c63          	beqz	a2,200014da <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200012c6:	95de                	add	a1,a1,s7
200012c8:	95a6                	add	a1,a1,s1
200012ca:	00258b93          	addi	s7,a1,2
200012ce:	02adce63          	blt	s11,a0,2000130a <base_vfprintf+0x126>
200012d2:	06100593          	li	a1,97
200012d6:	06a5d563          	bge	a1,a0,20001340 <base_vfprintf+0x15c>
200012da:	06300593          	li	a1,99
200012de:	0ca5cb63          	blt	a1,a0,200013b4 <base_vfprintf+0x1d0>
200012e2:	06200593          	li	a1,98
200012e6:	14b50a63          	beq	a0,a1,2000143a <base_vfprintf+0x256>
200012ea:	06300593          	li	a1,99
200012ee:	18b51f63          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
200012f2:	4502                	lw	a0,0(sp)
200012f4:	00450593          	addi	a1,a0,4
200012f8:	c02e                	sw	a1,0(sp)
200012fa:	4108                	lw	a0,0(a0)
200012fc:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20001300:	4605                	li	a2,1
20001302:	854a                	mv	a0,s2
20001304:	00b10593          	addi	a1,sp,11
20001308:	aa41                	j	20001498 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000130a:	07200593          	li	a1,114
2000130e:	04a5dd63          	bge	a1,a0,20001368 <base_vfprintf+0x184>
20001312:	07700593          	li	a1,119
20001316:	0aa5c663          	blt	a1,a0,200013c2 <base_vfprintf+0x1de>
2000131a:	07300593          	li	a1,115
2000131e:	12b50963          	beq	a0,a1,20001450 <base_vfprintf+0x26c>
20001322:	07500593          	li	a1,117
20001326:	16b51363          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
2000132a:	4502                	lw	a0,0(sp)
2000132c:	00450593          	addi	a1,a0,4
20001330:	c02e                	sw	a1,0(sp)
20001332:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001334:	00001797          	auipc	a5,0x1
20001338:	be978793          	addi	a5,a5,-1047 # 20001f1d <kDigitsLow>
2000133c:	4729                	li	a4,10
2000133e:	a8cd                	j	20001430 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001340:	13850763          	beq	a0,s8,2000146e <base_vfprintf+0x28a>
20001344:	04800593          	li	a1,72
20001348:	00b50663          	beq	a0,a1,20001354 <base_vfprintf+0x170>
2000134c:	05800593          	li	a1,88
20001350:	12b51e63          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001354:	4502                	lw	a0,0(sp)
20001356:	00450593          	addi	a1,a0,4
2000135a:	c02e                	sw	a1,0(sp)
2000135c:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
2000135e:	00001797          	auipc	a5,0x1
20001362:	bcf78793          	addi	a5,a5,-1073 # 20001f2d <kDigitsHigh>
20001366:	a0e1                	j	2000142e <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001368:	06900593          	li	a1,105
2000136c:	06b50d63          	beq	a0,a1,200013e6 <base_vfprintf+0x202>
20001370:	06f00593          	li	a1,111
20001374:	10b50163          	beq	a0,a1,20001476 <base_vfprintf+0x292>
20001378:	07000593          	li	a1,112
2000137c:	10b51863          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001380:	00001597          	auipc	a1,0x1
20001384:	1e858593          	addi	a1,a1,488 # 20002568 <__clz_tab+0x618>
20001388:	4609                	li	a2,2
2000138a:	854a                	mv	a0,s2
2000138c:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000138e:	4582                	lw	a1,0(sp)
20001390:	00458613          	addi	a2,a1,4
20001394:	c032                	sw	a2,0(sp)
20001396:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001398:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
2000139c:	00001797          	auipc	a5,0x1
200013a0:	b8178793          	addi	a5,a5,-1151 # 20001f1d <kDigitsLow>
200013a4:	46a1                	li	a3,8
200013a6:	4741                	li	a4,16
200013a8:	854a                	mv	a0,s2
200013aa:	85ce                	mv	a1,s3
200013ac:	2a5d                	jal	20001562 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
200013ae:	00a40b33          	add	s6,s0,a0
200013b2:	a0ed                	j	2000149c <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200013b4:	06400593          	li	a1,100
200013b8:	02b50763          	beq	a0,a1,200013e6 <base_vfprintf+0x202>
200013bc:	07b50063          	beq	a0,s11,2000141c <base_vfprintf+0x238>
200013c0:	a0f1                	j	2000148c <base_vfprintf+0x2a8>
200013c2:	07800593          	li	a1,120
200013c6:	04b50b63          	beq	a0,a1,2000141c <base_vfprintf+0x238>
200013ca:	07a00593          	li	a1,122
200013ce:	0ab51f63          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
200013d2:	4502                	lw	a0,0(sp)
200013d4:	00450593          	addi	a1,a0,4
200013d8:	c02e                	sw	a1,0(sp)
200013da:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
200013dc:	00850593          	addi	a1,a0,8
200013e0:	c02e                	sw	a1,0(sp)
200013e2:	414c                	lw	a1,4(a0)
200013e4:	a84d                	j	20001496 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
200013e6:	4502                	lw	a0,0(sp)
200013e8:	00450593          	addi	a1,a0,4
200013ec:	c02e                	sw	a1,0(sp)
200013ee:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
200013f0:	557d                	li	a0,-1
200013f2:	00954c63          	blt	a0,s1,2000140a <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
200013f6:	00001597          	auipc	a1,0x1
200013fa:	17058593          	addi	a1,a1,368 # 20002566 <__clz_tab+0x616>
200013fe:	4605                	li	a2,1
20001400:	854a                	mv	a0,s2
20001402:	9982                	jalr	s3
20001404:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20001406:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
2000140a:	00001797          	auipc	a5,0x1
2000140e:	b1378793          	addi	a5,a5,-1261 # 20001f1d <kDigitsLow>
20001412:	4729                	li	a4,10
20001414:	854a                	mv	a0,s2
20001416:	85ce                	mv	a1,s3
20001418:	8626                	mv	a2,s1
2000141a:	a829                	j	20001434 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
2000141c:	4502                	lw	a0,0(sp)
2000141e:	00450593          	addi	a1,a0,4
20001422:	c02e                	sw	a1,0(sp)
20001424:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20001426:	00001797          	auipc	a5,0x1
2000142a:	af778793          	addi	a5,a5,-1289 # 20001f1d <kDigitsLow>
2000142e:	4741                	li	a4,16
20001430:	854a                	mv	a0,s2
20001432:	85ce                	mv	a1,s3
20001434:	86a2                	mv	a3,s0
20001436:	2235                	jal	20001562 <write_digits>
20001438:	a08d                	j	2000149a <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
2000143a:	4502                	lw	a0,0(sp)
2000143c:	00450593          	addi	a1,a0,4
20001440:	c02e                	sw	a1,0(sp)
20001442:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20001444:	00001797          	auipc	a5,0x1
20001448:	ad978793          	addi	a5,a5,-1319 # 20001f1d <kDigitsLow>
2000144c:	4709                	li	a4,2
2000144e:	b7cd                	j	20001430 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20001450:	4502                	lw	a0,0(sp)
20001452:	00450593          	addi	a1,a0,4
20001456:	c02e                	sw	a1,0(sp)
20001458:	410c                	lw	a1,0(a0)
2000145a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
2000145c:	00a58633          	add	a2,a1,a0
20001460:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20001464:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001466:	fa7d                	bnez	a2,2000145c <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001468:	fff50613          	addi	a2,a0,-1
2000146c:	a02d                	j	20001496 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
2000146e:	4605                	li	a2,1
20001470:	854a                	mv	a0,s2
20001472:	85d2                	mv	a1,s4
20001474:	a015                	j	20001498 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20001476:	4502                	lw	a0,0(sp)
20001478:	00450593          	addi	a1,a0,4
2000147c:	c02e                	sw	a1,0(sp)
2000147e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001480:	00001797          	auipc	a5,0x1
20001484:	a9d78793          	addi	a5,a5,-1379 # 20001f1d <kDigitsLow>
20001488:	4721                	li	a4,8
2000148a:	b75d                	j	20001430 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
2000148c:	00001597          	auipc	a1,0x1
20001490:	ab158593          	addi	a1,a1,-1359 # 20001f3d <kUnknownSpec>
20001494:	463d                	li	a2,15
20001496:	854a                	mv	a0,s2
20001498:	9982                	jalr	s3
2000149a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
2000149c:	000bc503          	lbu	a0,0(s7)
200014a0:	d8051ce3          	bnez	a0,20001238 <base_vfprintf+0x54>
200014a4:	a819                	j	200014ba <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
200014a6:	00001597          	auipc	a1,0x1
200014aa:	a5a58593          	addi	a1,a1,-1446 # 20001f00 <kErrorNul>
200014ae:	4645                	li	a2,17
200014b0:	854a                	mv	a0,s2
200014b2:	9982                	jalr	s3
200014b4:	9b2a                	add	s6,s6,a0
200014b6:	a011                	j	200014ba <base_vfprintf+0x2d6>
200014b8:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
200014ba:	855a                	mv	a0,s6
200014bc:	4db2                	lw	s11,12(sp)
200014be:	4d42                	lw	s10,16(sp)
200014c0:	4cd2                	lw	s9,20(sp)
200014c2:	4c62                	lw	s8,24(sp)
200014c4:	4bf2                	lw	s7,28(sp)
200014c6:	5b02                	lw	s6,32(sp)
200014c8:	5a92                	lw	s5,36(sp)
200014ca:	5a22                	lw	s4,40(sp)
200014cc:	59b2                	lw	s3,44(sp)
200014ce:	5942                	lw	s2,48(sp)
200014d0:	54d2                	lw	s1,52(sp)
200014d2:	5462                	lw	s0,56(sp)
200014d4:	50f2                	lw	ra,60(sp)
200014d6:	6121                	addi	sp,sp,64
200014d8:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
200014da:	00001597          	auipc	a1,0x1
200014de:	a3758593          	addi	a1,a1,-1481 # 20001f11 <kErrorTooWide>
200014e2:	4631                	li	a2,12
200014e4:	b7f1                	j	200014b0 <base_vfprintf+0x2cc>

200014e6 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
200014e6:	7179                	addi	sp,sp,-48
200014e8:	ca06                	sw	ra,20(sp)
200014ea:	d646                	sw	a7,44(sp)
200014ec:	d442                	sw	a6,40(sp)
200014ee:	d23e                	sw	a5,36(sp)
200014f0:	d03a                	sw	a4,32(sp)
200014f2:	ce36                	sw	a3,28(sp)
200014f4:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200014f6:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200014f8:	c42a                	sw	a0,8(sp)
200014fa:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200014fc:	00000597          	auipc	a1,0x0
20001500:	01258593          	addi	a1,a1,18 # 2000150e <snprintf_sink>
20001504:	0028                	addi	a0,sp,8
20001506:	39f9                	jal	200011e4 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001508:	40d2                	lw	ra,20(sp)
2000150a:	6145                	addi	sp,sp,48
2000150c:	8082                	ret

2000150e <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000150e:	1141                	addi	sp,sp,-16
20001510:	c606                	sw	ra,12(sp)
20001512:	c422                	sw	s0,8(sp)
20001514:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20001516:	4140                	lw	s0,4(a0)
20001518:	c00d                	beqz	s0,2000153a <snprintf_sink+0x2c>
2000151a:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
2000151c:	00c46363          	bltu	s0,a2,20001522 <snprintf_sink+0x14>
20001520:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20001522:	4088                	lw	a0,0(s1)
20001524:	8622                	mv	a2,s0
20001526:	97eff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000152a:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
2000152c:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000152e:	9522                	add	a0,a0,s0
20001530:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001532:	40858533          	sub	a0,a1,s0
20001536:	c0c8                	sw	a0,4(s1)
20001538:	a011                	j	2000153c <snprintf_sink+0x2e>
2000153a:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
2000153c:	8522                	mv	a0,s0
2000153e:	4492                	lw	s1,4(sp)
20001540:	4422                	lw	s0,8(sp)
20001542:	40b2                	lw	ra,12(sp)
20001544:	0141                	addi	sp,sp,16
20001546:	8082                	ret

20001548 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001548:	1101                	addi	sp,sp,-32
2000154a:	c206                	sw	ra,4(sp)
2000154c:	ce46                	sw	a7,28(sp)
2000154e:	cc42                	sw	a6,24(sp)
20001550:	ca3e                	sw	a5,20(sp)
20001552:	c83a                	sw	a4,16(sp)
20001554:	c636                	sw	a3,12(sp)
20001556:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001558:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
2000155a:	3169                	jal	200011e4 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
2000155c:	4092                	lw	ra,4(sp)
2000155e:	6105                	addi	sp,sp,32
20001560:	8082                	ret

20001562 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001562:	7139                	addi	sp,sp,-64
20001564:	de06                	sw	ra,60(sp)
20001566:	dc22                	sw	s0,56(sp)
20001568:	da26                	sw	s1,52(sp)
2000156a:	d84a                	sw	s2,48(sp)
2000156c:	d64e                	sw	s3,44(sp)
2000156e:	892e                	mv	s2,a1
20001570:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001572:	ca05                	beqz	a2,200015a2 <write_digits+0x40>
20001574:	4501                	li	a0,0
20001576:	02b10813          	addi	a6,sp,43
2000157a:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
2000157c:	02e65633          	divu	a2,a2,a4
20001580:	02e60433          	mul	s0,a2,a4
20001584:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001588:	943e                	add	s0,s0,a5
2000158a:	00040403          	lb	s0,0(s0)
2000158e:	00a805b3          	add	a1,a6,a0
20001592:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001596:	157d                	addi	a0,a0,-1
20001598:	fee4f1e3          	bgeu	s1,a4,2000157a <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
2000159c:	40a00633          	neg	a2,a0
200015a0:	a011                	j	200015a4 <write_digits+0x42>
200015a2:	4601                	li	a2,0
200015a4:	4485                	li	s1,1
200015a6:	c291                	beqz	a3,200015aa <write_digits+0x48>
200015a8:	84b6                	mv	s1,a3
200015aa:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
200015ae:	00a4e463          	bltu	s1,a0,200015b6 <write_digits+0x54>
200015b2:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200015b6:	02967063          	bgeu	a2,s1,200015d6 <write_digits+0x74>
200015ba:	0068                	addi	a0,sp,12
200015bc:	8d05                	sub	a0,a0,s1
200015be:	02050513          	addi	a0,a0,32
200015c2:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
200015c6:	03000593          	li	a1,48
200015ca:	8622                	mv	a2,s0
200015cc:	8eeff0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200015d0:	147d                	addi	s0,s0,-1
200015d2:	fc7d                	bnez	s0,200015d0 <write_digits+0x6e>
200015d4:	8626                	mv	a2,s1
200015d6:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
200015d8:	8d11                	sub	a0,a0,a2
200015da:	02050593          	addi	a1,a0,32
200015de:	854e                	mv	a0,s3
200015e0:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200015e2:	59b2                	lw	s3,44(sp)
200015e4:	5942                	lw	s2,48(sp)
200015e6:	54d2                	lw	s1,52(sp)
200015e8:	5462                	lw	s0,56(sp)
200015ea:	50f2                	lw	ra,60(sp)
200015ec:	6121                	addi	sp,sp,64
200015ee:	8082                	ret

200015f0 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
200015f0:	c581                	beqz	a1,200015f8 <dif_uart_init+0x8>
200015f2:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200015f4:	c188                	sw	a0,0(a1)
200015f6:	a011                	j	200015fa <dif_uart_init+0xa>
200015f8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200015fa:	8532                	mv	a0,a2
200015fc:	8082                	ret

200015fe <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200015fe:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001600:	c606                	sw	ra,12(sp)
20001602:	c422                	sw	s0,8(sp)
20001604:	c226                	sw	s1,4(sp)
20001606:	c92d                	beqz	a0,20001678 <dif_uart_configure+0x7a>
20001608:	84ae                	mv	s1,a1
2000160a:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
2000160c:	418c                	lw	a1,0(a1)
2000160e:	450d                	li	a0,3
20001610:	c5ad                	beqz	a1,2000167a <dif_uart_configure+0x7c>
20001612:	40d0                	lw	a2,4(s1)
20001614:	c23d                	beqz	a2,2000167a <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20001616:	01459513          	slli	a0,a1,0x14
2000161a:	81b1                	srli	a1,a1,0xc
2000161c:	4681                	li	a3,0
2000161e:	2e61                	jal	200019b6 <__udivdi3>
20001620:	6641                	lui	a2,0x10
20001622:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20001624:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20001626:	8d31                	xor	a0,a0,a2
20001628:	8dc9                	or	a1,a1,a0
2000162a:	4511                	li	a0,4
2000162c:	e5b9                	bnez	a1,2000167a <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
2000162e:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001630:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20001634:	4008                	lw	a0,0(s0)
20001636:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001638:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
2000163a:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000163c:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001640:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001642:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001646:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001648:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
2000164c:	4008                	lw	a0,0(s0)
2000164e:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001650:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20001652:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001654:	01061513          	slli	a0,a2,0x10
20001658:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
2000165c:	c291                	beqz	a3,20001660 <dif_uart_configure+0x62>
2000165e:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001660:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001662:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001664:	e219                	bnez	a2,2000166a <dif_uart_configure+0x6c>
20001666:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
2000166a:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000166c:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000166e:	400c                	lw	a1,0(s0)
20001670:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001672:	0005a223          	sw	zero,4(a1)
20001676:	a011                	j	2000167a <dif_uart_configure+0x7c>
20001678:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
2000167a:	4492                	lw	s1,4(sp)
2000167c:	4422                	lw	s0,8(sp)
2000167e:	40b2                	lw	ra,12(sp)
20001680:	0141                	addi	sp,sp,16
20001682:	8082                	ret

20001684 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001684:	1141                	addi	sp,sp,-16
20001686:	c606                	sw	ra,12(sp)
20001688:	c422                	sw	s0,8(sp)
2000168a:	c226                	sw	s1,4(sp)
2000168c:	84aa                	mv	s1,a0
2000168e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001690:	c09d                	beqz	s1,200016b6 <dif_uart_irq_is_pending+0x32>
20001692:	8432                	mv	s0,a2
20001694:	c20d                	beqz	a2,200016b6 <dif_uart_irq_is_pending+0x32>
20001696:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001698:	852e                	mv	a0,a1
2000169a:	85b2                	mv	a1,a2
2000169c:	2015                	jal	200016c0 <uart_irq_offset_get>
2000169e:	85aa                	mv	a1,a0
200016a0:	4505                	li	a0,1
200016a2:	c991                	beqz	a1,200016b6 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
200016a4:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200016a6:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
200016a8:	4602                	lw	a2,0(sp)
200016aa:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200016ac:	00c5d5b3          	srl	a1,a1,a2
200016b0:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
200016b2:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
200016b6:	4492                	lw	s1,4(sp)
200016b8:	4422                	lw	s0,8(sp)
200016ba:	40b2                	lw	ra,12(sp)
200016bc:	0141                	addi	sp,sp,16
200016be:	8082                	ret

200016c0 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
200016c0:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
200016c2:	00a66563          	bltu	a2,a0,200016cc <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
200016c6:	c188                	sw	a0,0(a1)
200016c8:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
200016ca:	8082                	ret
200016cc:	4501                	li	a0,0
200016ce:	8082                	ret

200016d0 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
200016d0:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
200016d2:	c606                	sw	ra,12(sp)
200016d4:	c422                	sw	s0,8(sp)
200016d6:	c10d                	beqz	a0,200016f8 <dif_uart_irq_acknowledge+0x28>
200016d8:	842a                	mv	s0,a0
200016da:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200016dc:	852e                	mv	a0,a1
200016de:	85b2                	mv	a1,a2
200016e0:	37c5                	jal	200016c0 <uart_irq_offset_get>
200016e2:	85aa                	mv	a1,a0
200016e4:	4505                	li	a0,1
200016e6:	c991                	beqz	a1,200016fa <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200016e8:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
200016ea:	4010                	lw	a2,0(s0)
200016ec:	4501                	li	a0,0
200016ee:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200016f0:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200016f4:	c20c                	sw	a1,0(a2)
200016f6:	a011                	j	200016fa <dif_uart_irq_acknowledge+0x2a>
200016f8:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
200016fa:	4422                	lw	s0,8(sp)
200016fc:	40b2                	lw	ra,12(sp)
200016fe:	0141                	addi	sp,sp,16
20001700:	8082                	ret

20001702 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001702:	c911                	beqz	a0,20001716 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001704:	c581                	beqz	a1,2000170c <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001706:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001708:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
2000170a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000170c:	410c                	lw	a1,0(a0)
2000170e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001710:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001714:	8082                	ret
20001716:	4509                	li	a0,2
20001718:	8082                	ret

2000171a <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
2000171a:	862a                	mv	a2,a0
2000171c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
2000171e:	c611                	beqz	a2,2000172a <dif_uart_irq_restore_all+0x10>
20001720:	c589                	beqz	a1,2000172a <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001722:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001724:	4210                	lw	a2,0(a2)
20001726:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001728:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
2000172a:	8082                	ret

2000172c <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
2000172c:	1141                	addi	sp,sp,-16
2000172e:	c606                	sw	ra,12(sp)
20001730:	c422                	sw	s0,8(sp)
20001732:	c226                	sw	s1,4(sp)
20001734:	84aa                	mv	s1,a0
20001736:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20001738:	c485                	beqz	s1,20001760 <dif_uart_irq_get_enabled+0x34>
2000173a:	8432                	mv	s0,a2
2000173c:	c215                	beqz	a2,20001760 <dif_uart_irq_get_enabled+0x34>
2000173e:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001740:	852e                	mv	a0,a1
20001742:	85b2                	mv	a1,a2
20001744:	3fb5                	jal	200016c0 <uart_irq_offset_get>
20001746:	85aa                	mv	a1,a0
20001748:	4505                	li	a0,1
2000174a:	c999                	beqz	a1,20001760 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000174c:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000174e:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001750:	4602                	lw	a2,0(sp)
20001752:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001754:	00c5d5b3          	srl	a1,a1,a2
20001758:	8985                	andi	a1,a1,1
2000175a:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
2000175e:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001760:	4492                	lw	s1,4(sp)
20001762:	4422                	lw	s0,8(sp)
20001764:	40b2                	lw	ra,12(sp)
20001766:	0141                	addi	sp,sp,16
20001768:	8082                	ret

2000176a <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
2000176a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
2000176c:	c606                	sw	ra,12(sp)
2000176e:	c422                	sw	s0,8(sp)
20001770:	c226                	sw	s1,4(sp)
20001772:	c91d                	beqz	a0,200017a8 <dif_uart_irq_set_enabled+0x3e>
20001774:	8432                	mv	s0,a2
20001776:	84aa                	mv	s1,a0
20001778:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000177a:	852e                	mv	a0,a1
2000177c:	85b2                	mv	a1,a2
2000177e:	3789                	jal	200016c0 <uart_irq_offset_get>
20001780:	85aa                	mv	a1,a0
20001782:	4505                	li	a0,1
20001784:	c19d                	beqz	a1,200017aa <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001786:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001788:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
2000178a:	4682                	lw	a3,0(sp)
2000178c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
2000178e:	00143713          	seqz	a4,s0
20001792:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001794:	00d797b3          	sll	a5,a5,a3
20001798:	fff7c793          	not	a5,a5
2000179c:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000179e:	00d716b3          	sll	a3,a4,a3
200017a2:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017a4:	c1d0                	sw	a2,4(a1)
200017a6:	a011                	j	200017aa <dif_uart_irq_set_enabled+0x40>
200017a8:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200017aa:	4492                	lw	s1,4(sp)
200017ac:	4422                	lw	s0,8(sp)
200017ae:	40b2                	lw	ra,12(sp)
200017b0:	0141                	addi	sp,sp,16
200017b2:	8082                	ret

200017b4 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200017b4:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200017b6:	c606                	sw	ra,12(sp)
200017b8:	c422                	sw	s0,8(sp)
200017ba:	c10d                	beqz	a0,200017dc <dif_uart_irq_force+0x28>
200017bc:	842a                	mv	s0,a0
200017be:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200017c0:	852e                	mv	a0,a1
200017c2:	85b2                	mv	a1,a2
200017c4:	3df5                	jal	200016c0 <uart_irq_offset_get>
200017c6:	85aa                	mv	a1,a0
200017c8:	4505                	li	a0,1
200017ca:	c991                	beqz	a1,200017de <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200017cc:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
200017ce:	4010                	lw	a2,0(s0)
200017d0:	4501                	li	a0,0
200017d2:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200017d4:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017d8:	c60c                	sw	a1,8(a2)
200017da:	a011                	j	200017de <dif_uart_irq_force+0x2a>
200017dc:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
200017de:	4422                	lw	s0,8(sp)
200017e0:	40b2                	lw	ra,12(sp)
200017e2:	0141                	addi	sp,sp,16
200017e4:	8082                	ret

200017e6 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200017e6:	cd09                	beqz	a0,20001800 <dif_uart_watermark_rx_set+0x1a>
200017e8:	4691                	li	a3,4
200017ea:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200017ec:	00b6eb63          	bltu	a3,a1,20001802 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200017f0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017f2:	4d54                	lw	a3,28(a0)
200017f4:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
200017f6:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200017f8:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200017fa:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017fc:	cd4c                	sw	a1,28(a0)
200017fe:	a011                	j	20001802 <dif_uart_watermark_rx_set+0x1c>
20001800:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001802:	8532                	mv	a0,a2
20001804:	8082                	ret

20001806 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001806:	cd11                	beqz	a0,20001822 <dif_uart_watermark_tx_set+0x1c>
20001808:	468d                	li	a3,3
2000180a:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000180c:	00b6ec63          	bltu	a3,a1,20001824 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001810:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001812:	4d54                	lw	a3,28(a0)
20001814:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20001816:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001818:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000181c:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000181e:	cd4c                	sw	a1,28(a0)
20001820:	a011                	j	20001824 <dif_uart_watermark_tx_set+0x1e>
20001822:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001824:	8532                	mv	a0,a2
20001826:	8082                	ret

20001828 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001828:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
2000182a:	c51d                	beqz	a0,20001858 <dif_uart_bytes_send+0x30>
2000182c:	c595                	beqz	a1,20001858 <dif_uart_bytes_send+0x30>
2000182e:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001830:	c20d                	beqz	a2,20001852 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001832:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001836:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000183a:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000183c:	eb19                	bnez	a4,20001852 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
2000183e:	00f58733          	add	a4,a1,a5
20001842:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001846:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001848:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000184c:	fef613e3          	bne	a2,a5,20001832 <dif_uart_bytes_send+0xa>
20001850:	87b2                	mv	a5,a2
20001852:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001854:	c291                	beqz	a3,20001858 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001856:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001858:	853a                	mv	a0,a4
2000185a:	8082                	ret

2000185c <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
2000185c:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
2000185e:	c515                	beqz	a0,2000188a <dif_uart_bytes_receive+0x2e>
20001860:	c60d                	beqz	a2,2000188a <dif_uart_bytes_receive+0x2e>
20001862:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001864:	cd99                	beqz	a1,20001882 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001866:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001868:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000186a:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000186e:	eb91                	bnez	a5,20001882 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001870:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001872:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001876:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001878:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000187c:	ff0595e3          	bne	a1,a6,20001866 <dif_uart_bytes_receive+0xa>
20001880:	882e                	mv	a6,a1
20001882:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001884:	c299                	beqz	a3,2000188a <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001886:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
2000188a:	853a                	mv	a0,a4
2000188c:	8082                	ret

2000188e <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
2000188e:	cd19                	beqz	a0,200018ac <dif_uart_byte_send_polled+0x1e>
20001890:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001892:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001894:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001896:	fef5                	bnez	a3,20001892 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001898:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000189a:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000189c:	e299                	bnez	a3,200018a2 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000189e:	ce0c                	sw	a1,24(a2)
200018a0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018a2:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200018a4:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200018a6:	dd75                	beqz	a0,200018a2 <dif_uart_byte_send_polled+0x14>
200018a8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
200018aa:	8082                	ret
200018ac:	4509                	li	a0,2
200018ae:	8082                	ret

200018b0 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
200018b0:	862a                	mv	a2,a0
200018b2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
200018b4:	c205                	beqz	a2,200018d4 <dif_uart_byte_receive_polled+0x24>
200018b6:	cd99                	beqz	a1,200018d4 <dif_uart_byte_receive_polled+0x24>
200018b8:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018ba:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200018bc:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200018c0:	fd6d                	bnez	a0,200018ba <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018c2:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200018c4:	02057693          	andi	a3,a0,32
200018c8:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200018ca:	e689                	bnez	a3,200018d4 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018cc:	4a50                	lw	a2,20(a2)
200018ce:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200018d0:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
200018d4:	8082                	ret

200018d6 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200018d6:	862a                	mv	a2,a0
200018d8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
200018da:	ca09                	beqz	a2,200018ec <dif_uart_rx_bytes_available+0x16>
200018dc:	c981                	beqz	a1,200018ec <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200018de:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018e0:	5110                	lw	a2,32(a0)
200018e2:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200018e4:	8241                	srli	a2,a2,0x10
200018e6:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
200018ea:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
200018ec:	8082                	ret

200018ee <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200018ee:	862a                	mv	a2,a0
200018f0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
200018f2:	ce01                	beqz	a2,2000190a <dif_uart_tx_bytes_available+0x1c>
200018f4:	c999                	beqz	a1,2000190a <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200018f6:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018f8:	5110                	lw	a2,32(a0)
200018fa:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
200018fc:	03f67613          	andi	a2,a2,63
20001900:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001904:	40c68633          	sub	a2,a3,a2
20001908:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
2000190a:	8082                	ret

2000190c <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
2000190c:	c11d                	beqz	a0,20001932 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000190e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001910:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001912:	ffd5f693          	andi	a3,a1,-3
20001916:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
2000191a:	fff58713          	addi	a4,a1,-1
2000191e:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001920:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001924:	00f77463          	bgeu	a4,a5,2000192c <dif_uart_fifo_reset+0x20>
20001928:	0025e593          	ori	a1,a1,2
2000192c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000192e:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001930:	8082                	ret
20001932:	4509                	li	a0,2
20001934:	8082                	ret

20001936 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001936:	c515                	beqz	a0,20001962 <dif_uart_loopback_set+0x2c>
20001938:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
2000193a:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
2000193c:	0015b593          	seqz	a1,a1
20001940:	4715                	li	a4,5
20001942:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001946:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001948:	00163613          	seqz	a2,a2
2000194c:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000194e:	00b797b3          	sll	a5,a5,a1
20001952:	fff7c793          	not	a5,a5
20001956:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001958:	00b615b3          	sll	a1,a2,a1
2000195c:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000195e:	c54c                	sw	a1,12(a0)
20001960:	a011                	j	20001964 <dif_uart_loopback_set+0x2e>
20001962:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001964:	8536                	mv	a0,a3
20001966:	8082                	ret

20001968 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001968:	862a                	mv	a2,a0
2000196a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
2000196c:	ca11                	beqz	a2,20001980 <dif_uart_enable_rx_timeout+0x18>
2000196e:	0185d693          	srli	a3,a1,0x18
20001972:	e699                	bnez	a3,20001980 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001974:	4210                	lw	a2,0(a2)
20001976:	4501                	li	a0,0
20001978:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000197c:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000197e:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001980:	8082                	ret

20001982 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001982:	c511                	beqz	a0,2000198e <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001984:	410c                	lw	a1,0(a0)
20001986:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001988:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
2000198c:	8082                	ret
2000198e:	4509                	li	a0,2
20001990:	8082                	ret

20001992 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001992:	86aa                	mv	a3,a0
20001994:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001996:	ce99                	beqz	a3,200019b4 <dif_uart_get_rx_timeout+0x22>
20001998:	cd91                	beqz	a1,200019b4 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
2000199a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000199c:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
2000199e:	fff6c513          	not	a0,a3
200019a2:	817d                	srli	a0,a0,0x1f
200019a4:	c188                	sw	a0,0(a1)
200019a6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
200019a8:	c611                	beqz	a2,200019b4 <dif_uart_get_rx_timeout+0x22>
200019aa:	010005b7          	lui	a1,0x1000
200019ae:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200019b0:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
200019b2:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
200019b4:	8082                	ret

200019b6 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200019b6:	88aa                	mv	a7,a0
200019b8:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200019ba:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200019bc:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200019be:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200019c0:	20069963          	bnez	a3,20001bd2 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200019c4:	200026b7          	lui	a3,0x20002
200019c8:	f5068693          	addi	a3,a3,-176 # 20001f50 <__clz_tab>
200019cc:	0cc5f063          	bgeu	a1,a2,20001a8c <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200019d0:	6741                	lui	a4,0x10
200019d2:	0ae67663          	bgeu	a2,a4,20001a7e <__udivdi3+0xc8>
200019d6:	0ff00713          	li	a4,255
200019da:	00c73733          	sltu	a4,a4,a2
200019de:	070e                	slli	a4,a4,0x3
200019e0:	00e65533          	srl	a0,a2,a4
200019e4:	96aa                	add	a3,a3,a0
200019e6:	0006c683          	lbu	a3,0(a3)
200019ea:	02000513          	li	a0,32
200019ee:	9736                	add	a4,a4,a3
200019f0:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
200019f4:	00e50c63          	beq	a0,a4,20001a0c <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200019f8:	00d797b3          	sll	a5,a5,a3
200019fc:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001a00:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001a04:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001a08:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001a0c:	01085893          	srli	a7,a6,0x10
20001a10:	0315d7b3          	divu	a5,a1,a7
20001a14:	01081613          	slli	a2,a6,0x10
20001a18:	8241                	srli	a2,a2,0x10
20001a1a:	01035713          	srli	a4,t1,0x10
20001a1e:	0315f6b3          	remu	a3,a1,a7
20001a22:	853e                	mv	a0,a5
20001a24:	02f605b3          	mul	a1,a2,a5
20001a28:	06c2                	slli	a3,a3,0x10
20001a2a:	8f55                	or	a4,a4,a3
20001a2c:	00b77c63          	bgeu	a4,a1,20001a44 <__udivdi3+0x8e>
20001a30:	9742                	add	a4,a4,a6
20001a32:	fff78513          	addi	a0,a5,-1
20001a36:	01076763          	bltu	a4,a6,20001a44 <__udivdi3+0x8e>
20001a3a:	00b77563          	bgeu	a4,a1,20001a44 <__udivdi3+0x8e>
20001a3e:	ffe78513          	addi	a0,a5,-2
20001a42:	9742                	add	a4,a4,a6
20001a44:	8f0d                	sub	a4,a4,a1
20001a46:	031777b3          	remu	a5,a4,a7
20001a4a:	0342                	slli	t1,t1,0x10
20001a4c:	01035313          	srli	t1,t1,0x10
20001a50:	03175733          	divu	a4,a4,a7
20001a54:	07c2                	slli	a5,a5,0x10
20001a56:	0067e333          	or	t1,a5,t1
20001a5a:	02e606b3          	mul	a3,a2,a4
20001a5e:	863a                	mv	a2,a4
20001a60:	00d37b63          	bgeu	t1,a3,20001a76 <__udivdi3+0xc0>
20001a64:	9342                	add	t1,t1,a6
20001a66:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001a6a:	01036663          	bltu	t1,a6,20001a76 <__udivdi3+0xc0>
20001a6e:	00d37463          	bgeu	t1,a3,20001a76 <__udivdi3+0xc0>
20001a72:	ffe70613          	addi	a2,a4,-2
20001a76:	0542                	slli	a0,a0,0x10
20001a78:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001a7a:	4581                	li	a1,0
20001a7c:	a85d                	j	20001b32 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001a7e:	01000537          	lui	a0,0x1000
20001a82:	4741                	li	a4,16
20001a84:	f4a66ee3          	bltu	a2,a0,200019e0 <__udivdi3+0x2a>
20001a88:	4761                	li	a4,24
20001a8a:	bf99                	j	200019e0 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001a8c:	e601                	bnez	a2,20001a94 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001a8e:	4705                	li	a4,1
20001a90:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001a94:	6741                	lui	a4,0x10
20001a96:	08e87f63          	bgeu	a6,a4,20001b34 <__udivdi3+0x17e>
20001a9a:	0ff00713          	li	a4,255
20001a9e:	01077363          	bgeu	a4,a6,20001aa4 <__udivdi3+0xee>
20001aa2:	4521                	li	a0,8
20001aa4:	00a85733          	srl	a4,a6,a0
20001aa8:	96ba                	add	a3,a3,a4
20001aaa:	0006c703          	lbu	a4,0(a3)
20001aae:	02000613          	li	a2,32
20001ab2:	972a                	add	a4,a4,a0
20001ab4:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001ab8:	08e61563          	bne	a2,a4,20001b42 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001abc:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001ac0:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001ac2:	01085893          	srli	a7,a6,0x10
20001ac6:	01081613          	slli	a2,a6,0x10
20001aca:	8241                	srli	a2,a2,0x10
20001acc:	01035713          	srli	a4,t1,0x10
20001ad0:	0317f6b3          	remu	a3,a5,a7
20001ad4:	0317d7b3          	divu	a5,a5,a7
20001ad8:	06c2                	slli	a3,a3,0x10
20001ada:	8f55                	or	a4,a4,a3
20001adc:	02f60e33          	mul	t3,a2,a5
20001ae0:	853e                	mv	a0,a5
20001ae2:	01c77c63          	bgeu	a4,t3,20001afa <__udivdi3+0x144>
20001ae6:	9742                	add	a4,a4,a6
20001ae8:	fff78513          	addi	a0,a5,-1
20001aec:	01076763          	bltu	a4,a6,20001afa <__udivdi3+0x144>
20001af0:	01c77563          	bgeu	a4,t3,20001afa <__udivdi3+0x144>
20001af4:	ffe78513          	addi	a0,a5,-2
20001af8:	9742                	add	a4,a4,a6
20001afa:	41c70733          	sub	a4,a4,t3
20001afe:	031777b3          	remu	a5,a4,a7
20001b02:	0342                	slli	t1,t1,0x10
20001b04:	01035313          	srli	t1,t1,0x10
20001b08:	03175733          	divu	a4,a4,a7
20001b0c:	07c2                	slli	a5,a5,0x10
20001b0e:	0067e333          	or	t1,a5,t1
20001b12:	02e606b3          	mul	a3,a2,a4
20001b16:	863a                	mv	a2,a4
20001b18:	00d37b63          	bgeu	t1,a3,20001b2e <__udivdi3+0x178>
20001b1c:	9342                	add	t1,t1,a6
20001b1e:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001b22:	01036663          	bltu	t1,a6,20001b2e <__udivdi3+0x178>
20001b26:	00d37463          	bgeu	t1,a3,20001b2e <__udivdi3+0x178>
20001b2a:	ffe70613          	addi	a2,a4,-2
20001b2e:	0542                	slli	a0,a0,0x10
20001b30:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001b32:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001b34:	01000737          	lui	a4,0x1000
20001b38:	4541                	li	a0,16
20001b3a:	f6e865e3          	bltu	a6,a4,20001aa4 <__udivdi3+0xee>
20001b3e:	4561                	li	a0,24
20001b40:	b795                	j	20001aa4 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001b42:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001b46:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001b4a:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001b4e:	00d797b3          	sll	a5,a5,a3
20001b52:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001b56:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001b5a:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001b5e:	0315f733          	remu	a4,a1,a7
20001b62:	01081793          	slli	a5,a6,0x10
20001b66:	83c1                	srli	a5,a5,0x10
20001b68:	01065513          	srli	a0,a2,0x10
20001b6c:	0315d5b3          	divu	a1,a1,a7
20001b70:	0742                	slli	a4,a4,0x10
20001b72:	8f49                	or	a4,a4,a0
20001b74:	02b786b3          	mul	a3,a5,a1
20001b78:	852e                	mv	a0,a1
20001b7a:	00d77c63          	bgeu	a4,a3,20001b92 <__udivdi3+0x1dc>
20001b7e:	9742                	add	a4,a4,a6
20001b80:	fff58513          	addi	a0,a1,-1 # ffffff <test_main.kLogFields.20+0xfefeab>
20001b84:	01076763          	bltu	a4,a6,20001b92 <__udivdi3+0x1dc>
20001b88:	00d77563          	bgeu	a4,a3,20001b92 <__udivdi3+0x1dc>
20001b8c:	ffe58513          	addi	a0,a1,-2
20001b90:	9742                	add	a4,a4,a6
20001b92:	40d706b3          	sub	a3,a4,a3
20001b96:	0316f733          	remu	a4,a3,a7
20001b9a:	0642                	slli	a2,a2,0x10
20001b9c:	8241                	srli	a2,a2,0x10
20001b9e:	0316d6b3          	divu	a3,a3,a7
20001ba2:	0742                	slli	a4,a4,0x10
20001ba4:	02d788b3          	mul	a7,a5,a3
20001ba8:	00c767b3          	or	a5,a4,a2
20001bac:	8736                	mv	a4,a3
20001bae:	0117fc63          	bgeu	a5,a7,20001bc6 <__udivdi3+0x210>
20001bb2:	97c2                	add	a5,a5,a6
20001bb4:	fff68713          	addi	a4,a3,-1
20001bb8:	0107e763          	bltu	a5,a6,20001bc6 <__udivdi3+0x210>
20001bbc:	0117f563          	bgeu	a5,a7,20001bc6 <__udivdi3+0x210>
20001bc0:	ffe68713          	addi	a4,a3,-2
20001bc4:	97c2                	add	a5,a5,a6
20001bc6:	01051593          	slli	a1,a0,0x10
20001bca:	411787b3          	sub	a5,a5,a7
20001bce:	8dd9                	or	a1,a1,a4
20001bd0:	bdcd                	j	20001ac2 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001bd2:	14d5e263          	bltu	a1,a3,20001d16 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001bd6:	6741                	lui	a4,0x10
20001bd8:	02e6ff63          	bgeu	a3,a4,20001c16 <__udivdi3+0x260>
20001bdc:	0ff00713          	li	a4,255
20001be0:	00d735b3          	sltu	a1,a4,a3
20001be4:	058e                	slli	a1,a1,0x3
20001be6:	20002737          	lui	a4,0x20002
20001bea:	00b6d533          	srl	a0,a3,a1
20001bee:	f5070713          	addi	a4,a4,-176 # 20001f50 <__clz_tab>
20001bf2:	972a                	add	a4,a4,a0
20001bf4:	00074703          	lbu	a4,0(a4)
20001bf8:	02000513          	li	a0,32
20001bfc:	972e                	add	a4,a4,a1
20001bfe:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001c02:	02e51163          	bne	a0,a4,20001c24 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001c06:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001c08:	f2f6e5e3          	bltu	a3,a5,20001b32 <__udivdi3+0x17c>
20001c0c:	00c8b533          	sltu	a0,a7,a2
20001c10:	00154513          	xori	a0,a0,1
20001c14:	bf39                	j	20001b32 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001c16:	01000737          	lui	a4,0x1000
20001c1a:	45c1                	li	a1,16
20001c1c:	fce6e5e3          	bltu	a3,a4,20001be6 <__udivdi3+0x230>
20001c20:	45e1                	li	a1,24
20001c22:	b7d1                	j	20001be6 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001c24:	00e65333          	srl	t1,a2,a4
20001c28:	00b696b3          	sll	a3,a3,a1
20001c2c:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c30:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001c34:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001c38:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c3c:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001c40:	00b797b3          	sll	a5,a5,a1
20001c44:	00e8d733          	srl	a4,a7,a4
20001c48:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c4c:	01031793          	slli	a5,t1,0x10
20001c50:	83c1                	srli	a5,a5,0x10
20001c52:	01085713          	srli	a4,a6,0x10
20001c56:	02a65633          	divu	a2,a2,a0
20001c5a:	06c2                	slli	a3,a3,0x10
20001c5c:	8f55                	or	a4,a4,a3
20001c5e:	02c78f33          	mul	t5,a5,a2
20001c62:	8e32                	mv	t3,a2
20001c64:	01e77c63          	bgeu	a4,t5,20001c7c <__udivdi3+0x2c6>
20001c68:	971a                	add	a4,a4,t1
20001c6a:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001c6e:	00676763          	bltu	a4,t1,20001c7c <__udivdi3+0x2c6>
20001c72:	01e77563          	bgeu	a4,t5,20001c7c <__udivdi3+0x2c6>
20001c76:	ffe60e13          	addi	t3,a2,-2
20001c7a:	971a                	add	a4,a4,t1
20001c7c:	41e70733          	sub	a4,a4,t5
20001c80:	02a776b3          	remu	a3,a4,a0
20001c84:	02a75733          	divu	a4,a4,a0
20001c88:	06c2                	slli	a3,a3,0x10
20001c8a:	02e78633          	mul	a2,a5,a4
20001c8e:	01081793          	slli	a5,a6,0x10
20001c92:	83c1                	srli	a5,a5,0x10
20001c94:	8fd5                	or	a5,a5,a3
20001c96:	86ba                	mv	a3,a4
20001c98:	00c7fc63          	bgeu	a5,a2,20001cb0 <__udivdi3+0x2fa>
20001c9c:	979a                	add	a5,a5,t1
20001c9e:	fff70693          	addi	a3,a4,-1 # ffffff <test_main.kLogFields.20+0xfefeab>
20001ca2:	0067e763          	bltu	a5,t1,20001cb0 <__udivdi3+0x2fa>
20001ca6:	00c7f563          	bgeu	a5,a2,20001cb0 <__udivdi3+0x2fa>
20001caa:	ffe70693          	addi	a3,a4,-2
20001cae:	979a                	add	a5,a5,t1
20001cb0:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cb4:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cb6:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cb8:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001cbc:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cc0:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cc2:	00def6b3          	and	a3,t4,a3
20001cc6:	01055613          	srli	a2,a0,0x10
20001cca:	010ede93          	srli	t4,t4,0x10
20001cce:	02d80333          	mul	t1,a6,a3
20001cd2:	02d606b3          	mul	a3,a2,a3
20001cd6:	01035713          	srli	a4,t1,0x10
20001cda:	03d80833          	mul	a6,a6,t4
20001cde:	9836                	add	a6,a6,a3
20001ce0:	9742                	add	a4,a4,a6
20001ce2:	03d60633          	mul	a2,a2,t4
20001ce6:	00d77363          	bgeu	a4,a3,20001cec <__udivdi3+0x336>
20001cea:	9672                	add	a2,a2,t3
20001cec:	01075693          	srli	a3,a4,0x10
20001cf0:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001cf2:	02c7e063          	bltu	a5,a2,20001d12 <__udivdi3+0x35c>
20001cf6:	d8c792e3          	bne	a5,a2,20001a7a <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cfa:	67c1                	lui	a5,0x10
20001cfc:	17fd                	addi	a5,a5,-1
20001cfe:	8f7d                	and	a4,a4,a5
20001d00:	0742                	slli	a4,a4,0x10
20001d02:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001d06:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d0a:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001d0c:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001d0e:	e2e8f2e3          	bgeu	a7,a4,20001b32 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001d12:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001d14:	b39d                	j	20001a7a <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001d16:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001d18:	4501                	li	a0,0
20001d1a:	bd21                	j	20001b32 <__udivdi3+0x17c>
