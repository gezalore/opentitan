
sw/device/tests/spi_tx_rx_test_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000e0  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         0000302e  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00001738  200031b0  200031b0  000041b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  200048e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  10000008  200048f0  00006008  2**2
                  ALLOC
  8 .logs.fields  00000578  00010000  00010000  00006008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00006580  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a922  00000000  00000000  000065a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b94  00000000  00000000  00010ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  00012a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005cec  00000000  00000000  00012af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005e6a  00000000  00000000  000187e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e8  00000000  00000000  0001e64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004acd  00000000  00000000  0001ea32  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000a58  00000000  00000000  00023500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	00058593          	mv	a1,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2899                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2091                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00005617          	auipc	a2,0x5
20000054:	89860613          	addi	a2,a2,-1896 # 200048e8 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2889                	jal	200000aa <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	3b7020ef          	jal	ra,20002c34 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	0350206f          	j	200028b6 <abort>

20000086 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000086:	00b57e63          	bgeu	a0,a1,200000a2 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
2000008a:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008e:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000092:	00029b63          	bnez	t0,200000a8 <L_clear_error>

20000096 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000096:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
2000009a:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009c:	feb56de3          	bltu	a0,a1,20000096 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
200000a0:	8082                	ret

200000a2 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a2:	00b51363          	bne	a0,a1,200000a8 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a6:	8082                	ret

200000a8 <L_clear_error>:
	...

200000aa <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000aa:	02b57963          	bgeu	a0,a1,200000dc <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ae:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b2:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b6:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000ba:	02029463          	bnez	t0,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000be:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c2:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c6:	0062ee63          	bltu	t0,t1,200000e2 <L_copy_error>

200000ca <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000ca:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000ce:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000d0:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d4:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d6:	feb56ae3          	bltu	a0,a1,200000ca <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000da:	8082                	ret

200000dc <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000dc:	00b51363          	bne	a0,a1,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000e0:	8082                	ret

200000e2 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0790206f          	j	20002978 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1b10206f          	j	20002abc <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	1f90206f          	j	20002b14 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	0540006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:70
 * Provides external irq handling for this test.
 *
 * This function overrides the default external irq handler in
 * `sw/device/lib/handler.h`.
 */
void handler_irq_external(void) {
20000180:	7159                	addi	sp,sp,-112
20000182:	d686                	sw	ra,108(sp)
20000184:	d496                	sw	t0,104(sp)
20000186:	d29a                	sw	t1,100(sp)
20000188:	d09e                	sw	t2,96(sp)
2000018a:	cea2                	sw	s0,92(sp)
2000018c:	cca6                	sw	s1,88(sp)
2000018e:	caaa                	sw	a0,84(sp)
20000190:	c8ae                	sw	a1,80(sp)
20000192:	c6b2                	sw	a2,76(sp)
20000194:	c4b6                	sw	a3,72(sp)
20000196:	c2ba                	sw	a4,68(sp)
20000198:	c0be                	sw	a5,64(sp)
2000019a:	de42                	sw	a6,60(sp)
2000019c:	dc46                	sw	a7,56(sp)
2000019e:	da4a                	sw	s2,52(sp)
200001a0:	d872                	sw	t3,48(sp)
200001a2:	d676                	sw	t4,44(sp)
200001a4:	d47a                	sw	t5,40(sp)
200001a6:	d27e                	sw	t6,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:73
  // Find which interrupt fired at PLIC by claiming it.
  dif_plic_irq_id_t plic_irq_id;
  CHECK(dif_plic_irq_claim(&plic0, kTopEarlgreyPlicTargetIbex0, &plic_irq_id) ==
200001a8:	f0000517          	auipc	a0,0xf0000
200001ac:	e6050513          	addi	a0,a0,-416 # 10000008 <_data_end>
200001b0:	1010                	addi	a2,sp,32
200001b2:	4581                	li	a1,0
200001b4:	4a3010ef          	jal	ra,20001e56 <dif_plic_irq_claim>
200001b8:	00004917          	auipc	s2,0x4
200001bc:	a8890913          	addi	s2,s2,-1400 # 20003c40 <kDeviceLogBypassUartAddress>
200001c0:	cd0d                	beqz	a0,200001fa <handler_irq_external+0x7a>
200001c2:	00092503          	lw	a0,0(s2)
200001c6:	c909                	beqz	a0,200001d8 <handler_irq_external+0x58>
200001c8:	e0010517          	auipc	a0,0xe0010
200001cc:	e3850513          	addi	a0,a0,-456 # 10000 <_dv_log_offset>
200001d0:	4581                	li	a1,0
200001d2:	5a1010ef          	jal	ra,20001f72 <base_log_internal_dv>
200001d6:	a829                	j	200001f0 <handler_irq_external+0x70>
200001d8:	00003597          	auipc	a1,0x3
200001dc:	fd858593          	addi	a1,a1,-40 # 200031b0 <__udivdi3+0x368>
200001e0:	0020                	addi	s0,sp,8
200001e2:	4651                	li	a2,20
200001e4:	8522                	mv	a0,s0
200001e6:	37b020ef          	jal	ra,20002d60 <memcpy>
200001ea:	8522                	mv	a0,s0
200001ec:	4dd010ef          	jal	ra,20001ec8 <base_log_internal_core>
200001f0:	6531                	lui	a0,0xc
200001f2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200001f6:	6c6020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:79
            kDifPlicOk,
        "dif_plic_irq_claim failed");

  // Check if it is the right peripheral.
  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
200001fa:	5402                	lw	s0,32(sp)
200001fc:	00241513          	slli	a0,s0,0x2
20000200:	00003597          	auipc	a1,0x3
20000204:	6b058593          	addi	a1,a1,1712 # 200038b0 <top_earlgrey_plic_interrupt_for_peripheral>
20000208:	952e                	add	a0,a0,a1
2000020a:	4104                	lw	s1,0(a0)
2000020c:	4519                	li	a0,6
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:80
  CHECK(peripheral == kTopEarlgreyPlicPeripheralSpiDevice,
2000020e:	04a48163          	beq	s1,a0,20000250 <handler_irq_external+0xd0>
20000212:	00092503          	lw	a0,0(s2)
20000216:	c911                	beqz	a0,2000022a <handler_irq_external+0xaa>
20000218:	e0010517          	auipc	a0,0xe0010
2000021c:	dfc50513          	addi	a0,a0,-516 # 10014 <handler_irq_external.kLogFields.2>
20000220:	4585                	li	a1,1
20000222:	8626                	mv	a2,s1
20000224:	54f010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000228:	a831                	j	20000244 <handler_irq_external+0xc4>
2000022a:	00003597          	auipc	a1,0x3
2000022e:	f9a58593          	addi	a1,a1,-102 # 200031c4 <__udivdi3+0x37c>
20000232:	0020                	addi	s0,sp,8
20000234:	4651                	li	a2,20
20000236:	8522                	mv	a0,s0
20000238:	329020ef          	jal	ra,20002d60 <memcpy>
2000023c:	8522                	mv	a0,s0
2000023e:	85a6                	mv	a1,s1
20000240:	489010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000244:	6531                	lui	a0,0xc
20000246:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000024a:	672020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:85
        "Interurpt from unexpected peripheral: %d", peripheral);

  // Correlate the interrupt fired at PLIC with SPI DEVICE.
  dif_spi_device_irq_t spi_device_irq = 0;
  switch (plic_irq_id) {
2000024e:	5402                	lw	s0,32(sp)
20000250:	04300513          	li	a0,67
20000254:	04854063          	blt	a0,s0,20000294 <handler_irq_external+0x114>
20000258:	04100513          	li	a0,65
2000025c:	06a40963          	beq	s0,a0,200002ce <handler_irq_external+0x14e>
20000260:	04200513          	li	a0,66
20000264:	08a40963          	beq	s0,a0,200002f6 <handler_irq_external+0x176>
20000268:	04300513          	li	a0,67
2000026c:	0ea41a63          	bne	s0,a0,20000360 <handler_irq_external+0x1e0>
20000270:	f0000517          	auipc	a0,0xf0000
20000274:	d9c50513          	addi	a0,a0,-612 # 1000000c <expected_irqs>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:97
      CHECK(expected_irqs[spi_device_irq],
            "Unexpected RX above level interrupt");
      break;
    case kTopEarlgreyPlicIrqIdSpiDeviceTxlvl:
      spi_device_irq = kDifSpiDeviceIrqTxBelowLevel;
      CHECK(expected_irqs[spi_device_irq],
20000278:	00254503          	lbu	a0,2(a0)
2000027c:	4409                	li	s0,2
2000027e:	18051363          	bnez	a0,20000404 <handler_irq_external+0x284>
20000282:	00092503          	lw	a0,0(s2)
20000286:	10050763          	beqz	a0,20000394 <handler_irq_external+0x214>
2000028a:	e0010517          	auipc	a0,0xe0010
2000028e:	dc650513          	addi	a0,a0,-570 # 10050 <handler_irq_external.kLogFields.11>
20000292:	a0d9                	j	20000358 <handler_irq_external+0x1d8>
20000294:	04400513          	li	a0,68
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:85
  switch (plic_irq_id) {
20000298:	08a40063          	beq	s0,a0,20000318 <handler_irq_external+0x198>
2000029c:	04500513          	li	a0,69
200002a0:	08a40d63          	beq	s0,a0,2000033a <handler_irq_external+0x1ba>
200002a4:	04600513          	li	a0,70
200002a8:	0aa41c63          	bne	s0,a0,20000360 <handler_irq_external+0x1e0>
200002ac:	f0000517          	auipc	a0,0xf0000
200002b0:	d6050513          	addi	a0,a0,-672 # 1000000c <expected_irqs>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:110
      spi_device_irq = kDifSpiDeviceIrqRxOverflow;
      CHECK(expected_irqs[spi_device_irq], "Unexpected RX overflow interrupt");
      break;
    case kTopEarlgreyPlicIrqIdSpiDeviceTxunderflow:
      spi_device_irq = kDifSpiDeviceIrqTxUnderflow;
      CHECK(expected_irqs[spi_device_irq], "Unexpected TX underflow interrupt");
200002b4:	00554503          	lbu	a0,5(a0)
200002b8:	4415                	li	s0,5
200002ba:	14051563          	bnez	a0,20000404 <handler_irq_external+0x284>
200002be:	00092503          	lw	a0,0(s2)
200002c2:	cd71                	beqz	a0,2000039e <handler_irq_external+0x21e>
200002c4:	e0010517          	auipc	a0,0xe0010
200002c8:	dc850513          	addi	a0,a0,-568 # 1008c <handler_irq_external.kLogFields.20>
200002cc:	a071                	j	20000358 <handler_irq_external+0x1d8>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:88
      CHECK(expected_irqs[spi_device_irq], "Unexpected RX full interrupt");
200002ce:	f0000517          	auipc	a0,0xf0000
200002d2:	d3e50513          	addi	a0,a0,-706 # 1000000c <expected_irqs>
200002d6:	00054503          	lbu	a0,0(a0)
200002da:	4401                	li	s0,0
200002dc:	12051463          	bnez	a0,20000404 <handler_irq_external+0x284>
200002e0:	00092503          	lw	a0,0(s2)
200002e4:	c171                	beqz	a0,200003a8 <handler_irq_external+0x228>
200002e6:	e0010517          	auipc	a0,0xe0010
200002ea:	d4250513          	addi	a0,a0,-702 # 10028 <handler_irq_external.kLogFields.5>
200002ee:	4581                	li	a1,0
200002f0:	483010ef          	jal	ra,20001f72 <base_log_internal_dv>
200002f4:	a0f1                	j	200003c0 <handler_irq_external+0x240>
200002f6:	f0000517          	auipc	a0,0xf0000
200002fa:	d1650513          	addi	a0,a0,-746 # 1000000c <expected_irqs>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:92
      CHECK(expected_irqs[spi_device_irq],
200002fe:	00154503          	lbu	a0,1(a0)
20000302:	4405                	li	s0,1
20000304:	10051063          	bnez	a0,20000404 <handler_irq_external+0x284>
20000308:	00092503          	lw	a0,0(s2)
2000030c:	c571                	beqz	a0,200003d8 <handler_irq_external+0x258>
2000030e:	e0010517          	auipc	a0,0xe0010
20000312:	d2e50513          	addi	a0,a0,-722 # 1003c <handler_irq_external.kLogFields.8>
20000316:	a089                	j	20000358 <handler_irq_external+0x1d8>
20000318:	f0000517          	auipc	a0,0xf0000
2000031c:	cf450513          	addi	a0,a0,-780 # 1000000c <expected_irqs>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:102
      CHECK(expected_irqs[spi_device_irq], "Unexpected RX error interrupt");
20000320:	00354503          	lbu	a0,3(a0)
20000324:	440d                	li	s0,3
20000326:	0c051f63          	bnez	a0,20000404 <handler_irq_external+0x284>
2000032a:	00092503          	lw	a0,0(s2)
2000032e:	c145                	beqz	a0,200003ce <handler_irq_external+0x24e>
20000330:	e0010517          	auipc	a0,0xe0010
20000334:	d3450513          	addi	a0,a0,-716 # 10064 <handler_irq_external.kLogFields.14>
20000338:	a005                	j	20000358 <handler_irq_external+0x1d8>
2000033a:	f0000517          	auipc	a0,0xf0000
2000033e:	cd250513          	addi	a0,a0,-814 # 1000000c <expected_irqs>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:106
      CHECK(expected_irqs[spi_device_irq], "Unexpected RX overflow interrupt");
20000342:	00454503          	lbu	a0,4(a0)
20000346:	4411                	li	s0,4
20000348:	ed55                	bnez	a0,20000404 <handler_irq_external+0x284>
2000034a:	00092503          	lw	a0,0(s2)
2000034e:	c951                	beqz	a0,200003e2 <handler_irq_external+0x262>
20000350:	e0010517          	auipc	a0,0xe0010
20000354:	d2850513          	addi	a0,a0,-728 # 10078 <handler_irq_external.kLogFields.17>
20000358:	4581                	li	a1,0
2000035a:	419010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000035e:	a871                	j	200003fa <handler_irq_external+0x27a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:113
      break;
    default:
      LOG_ERROR("Unexpected interrupt (at PLIC): %d", plic_irq_id);
20000360:	00092503          	lw	a0,0(s2)
20000364:	c911                	beqz	a0,20000378 <handler_irq_external+0x1f8>
20000366:	e0010517          	auipc	a0,0xe0010
2000036a:	d3a50513          	addi	a0,a0,-710 # 100a0 <handler_irq_external.kLogFields.23>
2000036e:	4585                	li	a1,1
20000370:	8622                	mv	a2,s0
20000372:	401010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000376:	a0a9                	j	200003c0 <handler_irq_external+0x240>
20000378:	00003597          	auipc	a1,0x3
2000037c:	ed858593          	addi	a1,a1,-296 # 20003250 <__udivdi3+0x408>
20000380:	0024                	addi	s1,sp,8
20000382:	4651                	li	a2,20
20000384:	8526                	mv	a0,s1
20000386:	1db020ef          	jal	ra,20002d60 <memcpy>
2000038a:	8526                	mv	a0,s1
2000038c:	85a2                	mv	a1,s0
2000038e:	33b010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000392:	a03d                	j	200003c0 <handler_irq_external+0x240>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:97
      CHECK(expected_irqs[spi_device_irq],
20000394:	00003597          	auipc	a1,0x3
20000398:	e6c58593          	addi	a1,a1,-404 # 20003200 <__udivdi3+0x3b8>
2000039c:	a0b9                	j	200003ea <handler_irq_external+0x26a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:110
      CHECK(expected_irqs[spi_device_irq], "Unexpected TX underflow interrupt");
2000039e:	00003597          	auipc	a1,0x3
200003a2:	e9e58593          	addi	a1,a1,-354 # 2000323c <__udivdi3+0x3f4>
200003a6:	a091                	j	200003ea <handler_irq_external+0x26a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:88
      CHECK(expected_irqs[spi_device_irq], "Unexpected RX full interrupt");
200003a8:	00003597          	auipc	a1,0x3
200003ac:	e3058593          	addi	a1,a1,-464 # 200031d8 <__udivdi3+0x390>
200003b0:	0020                	addi	s0,sp,8
200003b2:	4651                	li	a2,20
200003b4:	8522                	mv	a0,s0
200003b6:	1ab020ef          	jal	ra,20002d60 <memcpy>
200003ba:	8522                	mv	a0,s0
200003bc:	30d010ef          	jal	ra,20001ec8 <base_log_internal_core>
200003c0:	6531                	lui	a0,0xc
200003c2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200003c6:	4f6020ef          	jal	ra,200028bc <test_status_set>
200003ca:	4401                	li	s0,0
200003cc:	a825                	j	20000404 <handler_irq_external+0x284>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:102
      CHECK(expected_irqs[spi_device_irq], "Unexpected RX error interrupt");
200003ce:	00003597          	auipc	a1,0x3
200003d2:	e4658593          	addi	a1,a1,-442 # 20003214 <__udivdi3+0x3cc>
200003d6:	a811                	j	200003ea <handler_irq_external+0x26a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:92
      CHECK(expected_irqs[spi_device_irq],
200003d8:	00003597          	auipc	a1,0x3
200003dc:	e1458593          	addi	a1,a1,-492 # 200031ec <__udivdi3+0x3a4>
200003e0:	a029                	j	200003ea <handler_irq_external+0x26a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:106
      CHECK(expected_irqs[spi_device_irq], "Unexpected RX overflow interrupt");
200003e2:	00003597          	auipc	a1,0x3
200003e6:	e4658593          	addi	a1,a1,-442 # 20003228 <__udivdi3+0x3e0>
200003ea:	0024                	addi	s1,sp,8
200003ec:	4651                	li	a2,20
200003ee:	8526                	mv	a0,s1
200003f0:	171020ef          	jal	ra,20002d60 <memcpy>
200003f4:	8526                	mv	a0,s1
200003f6:	2d3010ef          	jal	ra,20001ec8 <base_log_internal_core>
200003fa:	6531                	lui	a0,0xc
200003fc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000400:	4bc020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:116
      test_status_set(kTestStatusFailed);
  }
  fired_irqs[spi_device_irq] = true;
20000404:	f0000517          	auipc	a0,0xf0000
20000408:	c0e50513          	addi	a0,a0,-1010 # 10000012 <fired_irqs>
2000040c:	9522                	add	a0,a0,s0
2000040e:	4585                	li	a1,1
20000410:	00b50023          	sb	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:120

  // Check if the same interrupt fired at SPI DEVICE as well.
  bool flag_out;
  CHECK(dif_spi_device_irq_is_pending(&spi_device, spi_device_irq, &flag_out) ==
20000414:	f0000517          	auipc	a0,0xf0000
20000418:	c0450513          	addi	a0,a0,-1020 # 10000018 <spi_device>
2000041c:	00710613          	addi	a2,sp,7
20000420:	85a2                	mv	a1,s0
20000422:	3a6010ef          	jal	ra,200017c8 <dif_spi_device_irq_is_pending>
20000426:	cd0d                	beqz	a0,20000460 <handler_irq_external+0x2e0>
20000428:	00092503          	lw	a0,0(s2)
2000042c:	c909                	beqz	a0,2000043e <handler_irq_external+0x2be>
2000042e:	e0010517          	auipc	a0,0xe0010
20000432:	c8650513          	addi	a0,a0,-890 # 100b4 <handler_irq_external.kLogFields.26>
20000436:	4581                	li	a1,0
20000438:	33b010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000043c:	a829                	j	20000456 <handler_irq_external+0x2d6>
2000043e:	00003597          	auipc	a1,0x3
20000442:	e2658593          	addi	a1,a1,-474 # 20003264 <__udivdi3+0x41c>
20000446:	0024                	addi	s1,sp,8
20000448:	4651                	li	a2,20
2000044a:	8526                	mv	a0,s1
2000044c:	115020ef          	jal	ra,20002d60 <memcpy>
20000450:	8526                	mv	a0,s1
20000452:	277010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000456:	6531                	lui	a0,0xc
20000458:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000045c:	460020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:123
            kDifSpiDeviceOk,
        "dif_spi_device_irq_state_get failed");
  CHECK(flag_out,
20000460:	00714503          	lbu	a0,7(sp)
20000464:	ed0d                	bnez	a0,2000049e <handler_irq_external+0x31e>
20000466:	00092503          	lw	a0,0(s2)
2000046a:	c909                	beqz	a0,2000047c <handler_irq_external+0x2fc>
2000046c:	e0010517          	auipc	a0,0xe0010
20000470:	c5c50513          	addi	a0,a0,-932 # 100c8 <handler_irq_external.kLogFields.29>
20000474:	4581                	li	a1,0
20000476:	2fd010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000047a:	a829                	j	20000494 <handler_irq_external+0x314>
2000047c:	00003597          	auipc	a1,0x3
20000480:	dfc58593          	addi	a1,a1,-516 # 20003278 <__udivdi3+0x430>
20000484:	0024                	addi	s1,sp,8
20000486:	4651                	li	a2,20
20000488:	8526                	mv	a0,s1
2000048a:	0d7020ef          	jal	ra,20002d60 <memcpy>
2000048e:	8526                	mv	a0,s1
20000490:	239010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000494:	6531                	lui	a0,0xc
20000496:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000049a:	422020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:127
        "SPI_DEVICE interrupt fired at PLIC did not fire at SPI_DEVICE");

  // Clear the interrupt at SPI DEVICE.
  CHECK(dif_spi_device_irq_acknowledge(&spi_device, spi_device_irq) ==
2000049e:	f0000517          	auipc	a0,0xf0000
200004a2:	b7a50513          	addi	a0,a0,-1158 # 10000018 <spi_device>
200004a6:	85a2                	mv	a1,s0
200004a8:	340010ef          	jal	ra,200017e8 <dif_spi_device_irq_acknowledge>
200004ac:	cd0d                	beqz	a0,200004e6 <handler_irq_external+0x366>
200004ae:	00092503          	lw	a0,0(s2)
200004b2:	c909                	beqz	a0,200004c4 <handler_irq_external+0x344>
200004b4:	e0010517          	auipc	a0,0xe0010
200004b8:	c2850513          	addi	a0,a0,-984 # 100dc <handler_irq_external.kLogFields.32>
200004bc:	4581                	li	a1,0
200004be:	2b5010ef          	jal	ra,20001f72 <base_log_internal_dv>
200004c2:	a829                	j	200004dc <handler_irq_external+0x35c>
200004c4:	00003597          	auipc	a1,0x3
200004c8:	dc858593          	addi	a1,a1,-568 # 2000328c <__udivdi3+0x444>
200004cc:	0020                	addi	s0,sp,8
200004ce:	4651                	li	a2,20
200004d0:	8522                	mv	a0,s0
200004d2:	08f020ef          	jal	ra,20002d60 <memcpy>
200004d6:	8522                	mv	a0,s0
200004d8:	1f1010ef          	jal	ra,20001ec8 <base_log_internal_core>
200004dc:	6531                	lui	a0,0xc
200004de:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004e2:	3da020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:132
            kDifSpiDeviceOk,
        "dif_spi_device_irq_state_clear failed");

  // Complete the IRQ at PLIC.
  CHECK(dif_plic_irq_complete(&plic0, kTopEarlgreyPlicTargetIbex0,
200004e6:	f0000517          	auipc	a0,0xf0000
200004ea:	b2250513          	addi	a0,a0,-1246 # 10000008 <_data_end>
200004ee:	1010                	addi	a2,sp,32
200004f0:	4581                	li	a1,0
200004f2:	17b010ef          	jal	ra,20001e6c <dif_plic_irq_complete>
200004f6:	cd0d                	beqz	a0,20000530 <handler_irq_external+0x3b0>
200004f8:	00092503          	lw	a0,0(s2)
200004fc:	c909                	beqz	a0,2000050e <handler_irq_external+0x38e>
200004fe:	e0010517          	auipc	a0,0xe0010
20000502:	bf250513          	addi	a0,a0,-1038 # 100f0 <handler_irq_external.kLogFields.35>
20000506:	4581                	li	a1,0
20000508:	26b010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000050c:	a829                	j	20000526 <handler_irq_external+0x3a6>
2000050e:	00003597          	auipc	a1,0x3
20000512:	d9258593          	addi	a1,a1,-622 # 200032a0 <__udivdi3+0x458>
20000516:	0020                	addi	s0,sp,8
20000518:	4651                	li	a2,20
2000051a:	8522                	mv	a0,s0
2000051c:	045020ef          	jal	ra,20002d60 <memcpy>
20000520:	8522                	mv	a0,s0
20000522:	1a7010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000526:	6531                	lui	a0,0xc
20000528:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000052c:	390020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:135
                              &plic_irq_id) == kDifPlicOk,
        "dif_plic_irq_complete failed");
}
20000530:	5f92                	lw	t6,36(sp)
20000532:	5f22                	lw	t5,40(sp)
20000534:	5eb2                	lw	t4,44(sp)
20000536:	5e42                	lw	t3,48(sp)
20000538:	5952                	lw	s2,52(sp)
2000053a:	58e2                	lw	a7,56(sp)
2000053c:	5872                	lw	a6,60(sp)
2000053e:	4786                	lw	a5,64(sp)
20000540:	4716                	lw	a4,68(sp)
20000542:	46a6                	lw	a3,72(sp)
20000544:	4636                	lw	a2,76(sp)
20000546:	45c6                	lw	a1,80(sp)
20000548:	4556                	lw	a0,84(sp)
2000054a:	44e6                	lw	s1,88(sp)
2000054c:	4476                	lw	s0,92(sp)
2000054e:	5386                	lw	t2,96(sp)
20000550:	5316                	lw	t1,100(sp)
20000552:	52a6                	lw	t0,104(sp)
20000554:	50b6                	lw	ra,108(sp)
20000556:	6165                	addi	sp,sp,112
20000558:	30200073          	mret

2000055c <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:392
  return true;
}

const test_config_t kTestConfig;

bool test_main(void) {
2000055c:	712d                	addi	sp,sp,-288
2000055e:	10112e23          	sw	ra,284(sp)
20000562:	10812c23          	sw	s0,280(sp)
20000566:	10912a23          	sw	s1,276(sp)
2000056a:	11212823          	sw	s2,272(sp)
2000056e:	11312623          	sw	s3,268(sp)
20000572:	11412423          	sw	s4,264(sp)
20000576:	11512223          	sw	s5,260(sp)
2000057a:	11612023          	sw	s6,256(sp)
2000057e:	dfde                	sw	s7,252(sp)
20000580:	dde2                	sw	s8,248(sp)
20000582:	dbe6                	sw	s9,244(sp)
20000584:	d9ea                	sw	s10,240(sp)
20000586:	d7ee                	sw	s11,236(sp)
spi_device_init_with_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:142
  LOG_INFO("Initializing the SPI_DEVICE.");
20000588:	00003517          	auipc	a0,0x3
2000058c:	6b850513          	addi	a0,a0,1720 # 20003c40 <kDeviceLogBypassUartAddress>
20000590:	00052d83          	lw	s11,0(a0)
20000594:	020d8a63          	beqz	s11,200005c8 <test_main+0x6c>
20000598:	e0010517          	auipc	a0,0xe0010
2000059c:	b6c50513          	addi	a0,a0,-1172 # 10104 <spi_device_init_with_irqs.kLogFields>
200005a0:	4581                	li	a1,0
200005a2:	1d1010ef          	jal	ra,20001f72 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:153
  CHECK(dif_spi_device_init((dif_spi_device_params_t){base_addr}, spi_device) ==
200005a6:	f0000597          	auipc	a1,0xf0000
200005aa:	a7258593          	addi	a1,a1,-1422 # 10000018 <spi_device>
200005ae:	40050537          	lui	a0,0x40050
200005b2:	16e010ef          	jal	ra,20001720 <dif_spi_device_init>
200005b6:	cd39                	beqz	a0,20000614 <test_main+0xb8>
200005b8:	e0010517          	auipc	a0,0xe0010
200005bc:	b6050513          	addi	a0,a0,-1184 # 10118 <spi_device_init_with_irqs.kLogFields.39>
200005c0:	4581                	li	a1,0
200005c2:	1b1010ef          	jal	ra,20001f72 <base_log_internal_dv>
200005c6:	a091                	j	2000060a <test_main+0xae>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:142
  LOG_INFO("Initializing the SPI_DEVICE.");
200005c8:	00003597          	auipc	a1,0x3
200005cc:	cf058593          	addi	a1,a1,-784 # 200032b8 <kTestConfig+0x4>
200005d0:	1080                	addi	s0,sp,96
200005d2:	4651                	li	a2,20
200005d4:	8522                	mv	a0,s0
200005d6:	78a020ef          	jal	ra,20002d60 <memcpy>
200005da:	8522                	mv	a0,s0
200005dc:	0ed010ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:153
  CHECK(dif_spi_device_init((dif_spi_device_params_t){base_addr}, spi_device) ==
200005e0:	f0000597          	auipc	a1,0xf0000
200005e4:	a3858593          	addi	a1,a1,-1480 # 10000018 <spi_device>
200005e8:	40050537          	lui	a0,0x40050
200005ec:	134010ef          	jal	ra,20001720 <dif_spi_device_init>
200005f0:	c115                	beqz	a0,20000614 <test_main+0xb8>
200005f2:	00003597          	auipc	a1,0x3
200005f6:	cf258593          	addi	a1,a1,-782 # 200032e4 <kTestConfig+0x30>
200005fa:	1080                	addi	s0,sp,96
200005fc:	4651                	li	a2,20
200005fe:	8522                	mv	a0,s0
20000600:	760020ef          	jal	ra,20002d60 <memcpy>
20000604:	8522                	mv	a0,s0
20000606:	0c3010ef          	jal	ra,20001ec8 <base_log_internal_core>
2000060a:	6531                	lui	a0,0xc
2000060c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000610:	2ac020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:157
  CHECK(dif_spi_device_configure(spi_device, spi_device_config) ==
20000614:	00003597          	auipc	a1,0x3
20000618:	cb858593          	addi	a1,a1,-840 # 200032cc <kTestConfig+0x18>
2000061c:	06010a93          	addi	s5,sp,96
20000620:	4661                	li	a2,24
20000622:	8556                	mv	a0,s5
20000624:	73c020ef          	jal	ra,20002d60 <memcpy>
20000628:	f0000517          	auipc	a0,0xf0000
2000062c:	9f050513          	addi	a0,a0,-1552 # 10000018 <spi_device>
20000630:	85d6                	mv	a1,s5
20000632:	100010ef          	jal	ra,20001732 <dif_spi_device_configure>
20000636:	cd05                	beqz	a0,2000066e <test_main+0x112>
20000638:	000d8a63          	beqz	s11,2000064c <test_main+0xf0>
2000063c:	e0010517          	auipc	a0,0xe0010
20000640:	af050513          	addi	a0,a0,-1296 # 1012c <spi_device_init_with_irqs.kLogFields.42>
20000644:	4581                	li	a1,0
20000646:	12d010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000064a:	a829                	j	20000664 <test_main+0x108>
2000064c:	00003597          	auipc	a1,0x3
20000650:	cac58593          	addi	a1,a1,-852 # 200032f8 <kTestConfig+0x44>
20000654:	1080                	addi	s0,sp,96
20000656:	4651                	li	a2,20
20000658:	8522                	mv	a0,s0
2000065a:	706020ef          	jal	ra,20002d60 <memcpy>
2000065e:	8522                	mv	a0,s0
20000660:	069010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000664:	6531                	lui	a0,0xc
20000666:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000066a:	252020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:161
  CHECK(dif_spi_device_irq_set_enabled(spi_device, kDifSpiDeviceIrqRxFull,
2000066e:	f0000517          	auipc	a0,0xf0000
20000672:	9aa50513          	addi	a0,a0,-1622 # 10000018 <spi_device>
20000676:	4581                	li	a1,0
20000678:	4601                	li	a2,0
2000067a:	1aa010ef          	jal	ra,20001824 <dif_spi_device_irq_set_enabled>
2000067e:	cd05                	beqz	a0,200006b6 <test_main+0x15a>
20000680:	000d8a63          	beqz	s11,20000694 <test_main+0x138>
20000684:	e0010517          	auipc	a0,0xe0010
20000688:	abc50513          	addi	a0,a0,-1348 # 10140 <spi_device_init_with_irqs.kLogFields.44>
2000068c:	4581                	li	a1,0
2000068e:	0e5010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000692:	a829                	j	200006ac <test_main+0x150>
20000694:	00003597          	auipc	a1,0x3
20000698:	c7858593          	addi	a1,a1,-904 # 2000330c <kTestConfig+0x58>
2000069c:	1080                	addi	s0,sp,96
2000069e:	4651                	li	a2,20
200006a0:	8522                	mv	a0,s0
200006a2:	6be020ef          	jal	ra,20002d60 <memcpy>
200006a6:	8522                	mv	a0,s0
200006a8:	021010ef          	jal	ra,20001ec8 <base_log_internal_core>
200006ac:	6531                	lui	a0,0xc
200006ae:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200006b2:	20a020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:165
  CHECK(dif_spi_device_irq_set_enabled(spi_device, kDifSpiDeviceIrqRxAboveLevel,
200006b6:	f0000517          	auipc	a0,0xf0000
200006ba:	96250513          	addi	a0,a0,-1694 # 10000018 <spi_device>
200006be:	4585                	li	a1,1
200006c0:	4601                	li	a2,0
200006c2:	162010ef          	jal	ra,20001824 <dif_spi_device_irq_set_enabled>
200006c6:	cd05                	beqz	a0,200006fe <test_main+0x1a2>
200006c8:	000d8a63          	beqz	s11,200006dc <test_main+0x180>
200006cc:	e0010517          	auipc	a0,0xe0010
200006d0:	a8850513          	addi	a0,a0,-1400 # 10154 <spi_device_init_with_irqs.kLogFields.47>
200006d4:	4581                	li	a1,0
200006d6:	09d010ef          	jal	ra,20001f72 <base_log_internal_dv>
200006da:	a829                	j	200006f4 <test_main+0x198>
200006dc:	00003597          	auipc	a1,0x3
200006e0:	c4458593          	addi	a1,a1,-956 # 20003320 <kTestConfig+0x6c>
200006e4:	1080                	addi	s0,sp,96
200006e6:	4651                	li	a2,20
200006e8:	8522                	mv	a0,s0
200006ea:	676020ef          	jal	ra,20002d60 <memcpy>
200006ee:	8522                	mv	a0,s0
200006f0:	7d8010ef          	jal	ra,20001ec8 <base_log_internal_core>
200006f4:	6531                	lui	a0,0xc
200006f6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200006fa:	1c2020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:169
  CHECK(dif_spi_device_irq_set_enabled(spi_device, kDifSpiDeviceIrqTxBelowLevel,
200006fe:	f0000517          	auipc	a0,0xf0000
20000702:	91a50513          	addi	a0,a0,-1766 # 10000018 <spi_device>
20000706:	4589                	li	a1,2
20000708:	4601                	li	a2,0
2000070a:	11a010ef          	jal	ra,20001824 <dif_spi_device_irq_set_enabled>
2000070e:	cd05                	beqz	a0,20000746 <test_main+0x1ea>
20000710:	000d8a63          	beqz	s11,20000724 <test_main+0x1c8>
20000714:	e0010517          	auipc	a0,0xe0010
20000718:	a5450513          	addi	a0,a0,-1452 # 10168 <spi_device_init_with_irqs.kLogFields.50>
2000071c:	4581                	li	a1,0
2000071e:	055010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000722:	a829                	j	2000073c <test_main+0x1e0>
20000724:	00003597          	auipc	a1,0x3
20000728:	c1058593          	addi	a1,a1,-1008 # 20003334 <kTestConfig+0x80>
2000072c:	1080                	addi	s0,sp,96
2000072e:	4651                	li	a2,20
20000730:	8522                	mv	a0,s0
20000732:	62e020ef          	jal	ra,20002d60 <memcpy>
20000736:	8522                	mv	a0,s0
20000738:	790010ef          	jal	ra,20001ec8 <base_log_internal_core>
2000073c:	6531                	lui	a0,0xc
2000073e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000742:	17a020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:173
  CHECK(dif_spi_device_irq_set_enabled(spi_device, kDifSpiDeviceIrqRxError,
20000746:	f0000517          	auipc	a0,0xf0000
2000074a:	8d250513          	addi	a0,a0,-1838 # 10000018 <spi_device>
2000074e:	458d                	li	a1,3
20000750:	4601                	li	a2,0
20000752:	0d2010ef          	jal	ra,20001824 <dif_spi_device_irq_set_enabled>
20000756:	cd05                	beqz	a0,2000078e <test_main+0x232>
20000758:	000d8a63          	beqz	s11,2000076c <test_main+0x210>
2000075c:	e0010517          	auipc	a0,0xe0010
20000760:	a2050513          	addi	a0,a0,-1504 # 1017c <spi_device_init_with_irqs.kLogFields.53>
20000764:	4581                	li	a1,0
20000766:	00d010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000076a:	a829                	j	20000784 <test_main+0x228>
2000076c:	00003597          	auipc	a1,0x3
20000770:	bdc58593          	addi	a1,a1,-1060 # 20003348 <kTestConfig+0x94>
20000774:	1080                	addi	s0,sp,96
20000776:	4651                	li	a2,20
20000778:	8522                	mv	a0,s0
2000077a:	5e6020ef          	jal	ra,20002d60 <memcpy>
2000077e:	8522                	mv	a0,s0
20000780:	748010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000784:	6531                	lui	a0,0xc
20000786:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000078a:	132020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:177
  CHECK(dif_spi_device_irq_set_enabled(spi_device, kDifSpiDeviceIrqRxOverflow,
2000078e:	f0000517          	auipc	a0,0xf0000
20000792:	88a50513          	addi	a0,a0,-1910 # 10000018 <spi_device>
20000796:	4591                	li	a1,4
20000798:	4601                	li	a2,0
2000079a:	08a010ef          	jal	ra,20001824 <dif_spi_device_irq_set_enabled>
2000079e:	cd05                	beqz	a0,200007d6 <test_main+0x27a>
200007a0:	000d8a63          	beqz	s11,200007b4 <test_main+0x258>
200007a4:	e0010517          	auipc	a0,0xe0010
200007a8:	9ec50513          	addi	a0,a0,-1556 # 10190 <spi_device_init_with_irqs.kLogFields.56>
200007ac:	4581                	li	a1,0
200007ae:	7c4010ef          	jal	ra,20001f72 <base_log_internal_dv>
200007b2:	a829                	j	200007cc <test_main+0x270>
200007b4:	00003597          	auipc	a1,0x3
200007b8:	ba858593          	addi	a1,a1,-1112 # 2000335c <kTestConfig+0xa8>
200007bc:	1080                	addi	s0,sp,96
200007be:	4651                	li	a2,20
200007c0:	8522                	mv	a0,s0
200007c2:	59e020ef          	jal	ra,20002d60 <memcpy>
200007c6:	8522                	mv	a0,s0
200007c8:	700010ef          	jal	ra,20001ec8 <base_log_internal_core>
200007cc:	6531                	lui	a0,0xc
200007ce:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007d2:	0ea020ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:181
  CHECK(dif_spi_device_irq_set_enabled(spi_device, kDifSpiDeviceIrqTxUnderflow,
200007d6:	f0000517          	auipc	a0,0xf0000
200007da:	84250513          	addi	a0,a0,-1982 # 10000018 <spi_device>
200007de:	4595                	li	a1,5
200007e0:	4601                	li	a2,0
200007e2:	042010ef          	jal	ra,20001824 <dif_spi_device_irq_set_enabled>
200007e6:	cd05                	beqz	a0,2000081e <test_main+0x2c2>
200007e8:	000d8a63          	beqz	s11,200007fc <test_main+0x2a0>
200007ec:	e0010517          	auipc	a0,0xe0010
200007f0:	9b850513          	addi	a0,a0,-1608 # 101a4 <spi_device_init_with_irqs.kLogFields.59>
200007f4:	4581                	li	a1,0
200007f6:	77c010ef          	jal	ra,20001f72 <base_log_internal_dv>
200007fa:	a829                	j	20000814 <test_main+0x2b8>
200007fc:	00003597          	auipc	a1,0x3
20000800:	b7458593          	addi	a1,a1,-1164 # 20003370 <kTestConfig+0xbc>
20000804:	1080                	addi	s0,sp,96
20000806:	4651                	li	a2,20
20000808:	8522                	mv	a0,s0
2000080a:	556020ef          	jal	ra,20002d60 <memcpy>
2000080e:	8522                	mv	a0,s0
20000810:	6b8010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000814:	6531                	lui	a0,0xc
20000816:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000081a:	0a2020ef          	jal	ra,200028bc <test_status_set>
2000081e:	4501                	li	a0,0
20000820:	effff997          	auipc	s3,0xeffff
20000824:	7ec98993          	addi	s3,s3,2028 # 1000000c <expected_irqs>
20000828:	effffb17          	auipc	s6,0xeffff
2000082c:	7eab0b13          	addi	s6,s6,2026 # 10000012 <fired_irqs>
20000830:	4599                	li	a1,6
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:188
    expected_irqs[i] = false;
20000832:	01350633          	add	a2,a0,s3
20000836:	00060023          	sb	zero,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:189
    fired_irqs[i] = false;
2000083a:	01650633          	add	a2,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:187
  for (int i = 0; i < SPI_DEVICE_NUM_IRQS; i++) {
2000083e:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:189
    fired_irqs[i] = false;
20000840:	00060023          	sb	zero,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:187
  for (int i = 0; i < SPI_DEVICE_NUM_IRQS; i++) {
20000844:	feb517e3          	bne	a0,a1,20000832 <test_main+0x2d6>
20000848:	c0ce                	sw	s3,64(sp)
2000084a:	de5a                	sw	s6,60(sp)
plic_init_with_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:197
  LOG_INFO("Initializing the PLIC.");
2000084c:	020d8a63          	beqz	s11,20000880 <test_main+0x324>
20000850:	e0010517          	auipc	a0,0xe0010
20000854:	96850513          	addi	a0,a0,-1688 # 101b8 <plic_init_with_irqs.kLogFields>
20000858:	4581                	li	a1,0
2000085a:	718010ef          	jal	ra,20001f72 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:199
  CHECK(dif_plic_init((dif_plic_params_t){.base_addr = base_addr}, plic) ==
2000085e:	effff597          	auipc	a1,0xeffff
20000862:	7aa58593          	addi	a1,a1,1962 # 10000008 <_data_end>
20000866:	41010537          	lui	a0,0x41010
2000086a:	472010ef          	jal	ra,20001cdc <dif_plic_init>
2000086e:	cd25                	beqz	a0,200008e6 <test_main+0x38a>
20000870:	e0010517          	auipc	a0,0xe0010
20000874:	95c50513          	addi	a0,a0,-1700 # 101cc <plic_init_with_irqs.kLogFields.63>
20000878:	4581                	li	a1,0
2000087a:	6f8010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000087e:	a091                	j	200008c2 <test_main+0x366>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:197
  LOG_INFO("Initializing the PLIC.");
20000880:	00003597          	auipc	a1,0x3
20000884:	b0458593          	addi	a1,a1,-1276 # 20003384 <kTestConfig+0xd0>
20000888:	1080                	addi	s0,sp,96
2000088a:	4651                	li	a2,20
2000088c:	8522                	mv	a0,s0
2000088e:	4d2020ef          	jal	ra,20002d60 <memcpy>
20000892:	8522                	mv	a0,s0
20000894:	634010ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:199
  CHECK(dif_plic_init((dif_plic_params_t){.base_addr = base_addr}, plic) ==
20000898:	effff597          	auipc	a1,0xeffff
2000089c:	77058593          	addi	a1,a1,1904 # 10000008 <_data_end>
200008a0:	41010537          	lui	a0,0x41010
200008a4:	438010ef          	jal	ra,20001cdc <dif_plic_init>
200008a8:	c12d                	beqz	a0,2000090a <test_main+0x3ae>
200008aa:	00003597          	auipc	a1,0x3
200008ae:	aee58593          	addi	a1,a1,-1298 # 20003398 <kTestConfig+0xe4>
200008b2:	1080                	addi	s0,sp,96
200008b4:	4651                	li	a2,20
200008b6:	8522                	mv	a0,s0
200008b8:	4a8020ef          	jal	ra,20002d60 <memcpy>
200008bc:	8522                	mv	a0,s0
200008be:	60a010ef          	jal	ra,20001ec8 <base_log_internal_core>
200008c2:	6531                	lui	a0,0xc
200008c4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008c8:	7f5010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:204
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxf,
200008cc:	effff517          	auipc	a0,0xeffff
200008d0:	73c50513          	addi	a0,a0,1852 # 10000008 <_data_end>
200008d4:	04100593          	li	a1,65
200008d8:	4601                	li	a2,0
200008da:	4d4010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
200008de:	c135                	beqz	a0,20000942 <test_main+0x3e6>
200008e0:	000d9d63          	bnez	s11,200008fa <test_main+0x39e>
200008e4:	a835                	j	20000920 <test_main+0x3c4>
200008e6:	effff517          	auipc	a0,0xeffff
200008ea:	72250513          	addi	a0,a0,1826 # 10000008 <_data_end>
200008ee:	04100593          	li	a1,65
200008f2:	4601                	li	a2,0
200008f4:	4ba010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
200008f8:	c935                	beqz	a0,2000096c <test_main+0x410>
200008fa:	e0010517          	auipc	a0,0xe0010
200008fe:	8e650513          	addi	a0,a0,-1818 # 101e0 <plic_init_with_irqs.kLogFields.66>
20000902:	4581                	li	a1,0
20000904:	66e010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000908:	a805                	j	20000938 <test_main+0x3dc>
2000090a:	effff517          	auipc	a0,0xeffff
2000090e:	6fe50513          	addi	a0,a0,1790 # 10000008 <_data_end>
20000912:	04100593          	li	a1,65
20000916:	4601                	li	a2,0
20000918:	496010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
2000091c:	12050263          	beqz	a0,20000a40 <test_main+0x4e4>
20000920:	00003597          	auipc	a1,0x3
20000924:	a8c58593          	addi	a1,a1,-1396 # 200033ac <kTestConfig+0xf8>
20000928:	1080                	addi	s0,sp,96
2000092a:	4651                	li	a2,20
2000092c:	8522                	mv	a0,s0
2000092e:	432020ef          	jal	ra,20002d60 <memcpy>
20000932:	8522                	mv	a0,s0
20000934:	594010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000938:	6531                	lui	a0,0xc
2000093a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000093e:	77f010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:207
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxlvl,
20000942:	effff517          	auipc	a0,0xeffff
20000946:	6c650513          	addi	a0,a0,1734 # 10000008 <_data_end>
2000094a:	04200593          	li	a1,66
2000094e:	4601                	li	a2,0
20000950:	45e010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000954:	12050163          	beqz	a0,20000a76 <test_main+0x51a>
20000958:	0e0d8e63          	beqz	s11,20000a54 <test_main+0x4f8>
2000095c:	e0010517          	auipc	a0,0xe0010
20000960:	89850513          	addi	a0,a0,-1896 # 101f4 <plic_init_with_irqs.kLogFields.69>
20000964:	4581                	li	a1,0
20000966:	60c010ef          	jal	ra,20001f72 <base_log_internal_dv>
2000096a:	a209                	j	20000a6c <test_main+0x510>
2000096c:	effff517          	auipc	a0,0xeffff
20000970:	69c50513          	addi	a0,a0,1692 # 10000008 <_data_end>
20000974:	04200593          	li	a1,66
20000978:	4601                	li	a2,0
2000097a:	434010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
2000097e:	fd79                	bnez	a0,2000095c <test_main+0x400>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:210
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceTxlvl,
20000980:	effff517          	auipc	a0,0xeffff
20000984:	68850513          	addi	a0,a0,1672 # 10000008 <_data_end>
20000988:	04300593          	li	a1,67
2000098c:	4601                	li	a2,0
2000098e:	420010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000992:	0e051e63          	bnez	a0,20000a8e <test_main+0x532>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:213
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxerr,
20000996:	effff517          	auipc	a0,0xeffff
2000099a:	67250513          	addi	a0,a0,1650 # 10000008 <_data_end>
2000099e:	04400593          	li	a1,68
200009a2:	4601                	li	a2,0
200009a4:	40a010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
200009a8:	14051263          	bnez	a0,20000aec <test_main+0x590>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:216
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxoverflow,
200009ac:	effff517          	auipc	a0,0xeffff
200009b0:	65c50513          	addi	a0,a0,1628 # 10000008 <_data_end>
200009b4:	04500593          	li	a1,69
200009b8:	4601                	li	a2,0
200009ba:	3f4010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
200009be:	18051663          	bnez	a0,20000b4a <test_main+0x5ee>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:219
  CHECK(
200009c2:	effff517          	auipc	a0,0xeffff
200009c6:	64650513          	addi	a0,a0,1606 # 10000008 <_data_end>
200009ca:	04600593          	li	a1,70
200009ce:	4601                	li	a2,0
200009d0:	3de010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
200009d4:	1c051a63          	bnez	a0,20000ba8 <test_main+0x64c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:226
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxf,
200009d8:	00003517          	auipc	a0,0x3
200009dc:	dac50513          	addi	a0,a0,-596 # 20003784 <kDifPlicMaxPriority>
200009e0:	4104                	lw	s1,0(a0)
200009e2:	effff517          	auipc	a0,0xeffff
200009e6:	62650513          	addi	a0,a0,1574 # 10000008 <_data_end>
200009ea:	04100593          	li	a1,65
200009ee:	8626                	mv	a2,s1
200009f0:	3fe010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
200009f4:	20051e63          	bnez	a0,20000c10 <test_main+0x6b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:229
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxlvl,
200009f8:	effff517          	auipc	a0,0xeffff
200009fc:	61050513          	addi	a0,a0,1552 # 10000008 <_data_end>
20000a00:	04200593          	li	a1,66
20000a04:	8626                	mv	a2,s1
20000a06:	3e8010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000a0a:	26051763          	bnez	a0,20000c78 <test_main+0x71c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:232
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceTxlvl,
20000a0e:	effff517          	auipc	a0,0xeffff
20000a12:	5fa50513          	addi	a0,a0,1530 # 10000008 <_data_end>
20000a16:	04300593          	li	a1,67
20000a1a:	8626                	mv	a2,s1
20000a1c:	3d2010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000a20:	2a051b63          	bnez	a0,20000cd6 <test_main+0x77a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:235
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxerr,
20000a24:	effff517          	auipc	a0,0xeffff
20000a28:	5e450513          	addi	a0,a0,1508 # 10000008 <_data_end>
20000a2c:	04400593          	li	a1,68
20000a30:	8626                	mv	a2,s1
20000a32:	3bc010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000a36:	38050263          	beqz	a0,20000dba <test_main+0x85e>
20000a3a:	4986                	lw	s3,64(sp)
20000a3c:	5b72                	lw	s6,60(sp)
20000a3e:	a629                	j	20000d48 <test_main+0x7ec>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:207
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxlvl,
20000a40:	effff517          	auipc	a0,0xeffff
20000a44:	5c850513          	addi	a0,a0,1480 # 10000008 <_data_end>
20000a48:	04200593          	li	a1,66
20000a4c:	4601                	li	a2,0
20000a4e:	360010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000a52:	c531                	beqz	a0,20000a9e <test_main+0x542>
20000a54:	00003597          	auipc	a1,0x3
20000a58:	96c58593          	addi	a1,a1,-1684 # 200033c0 <kTestConfig+0x10c>
20000a5c:	1080                	addi	s0,sp,96
20000a5e:	4651                	li	a2,20
20000a60:	8522                	mv	a0,s0
20000a62:	2fe020ef          	jal	ra,20002d60 <memcpy>
20000a66:	8522                	mv	a0,s0
20000a68:	460010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000a6c:	6531                	lui	a0,0xc
20000a6e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a72:	64b010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:210
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceTxlvl,
20000a76:	effff517          	auipc	a0,0xeffff
20000a7a:	59250513          	addi	a0,a0,1426 # 10000008 <_data_end>
20000a7e:	04300593          	li	a1,67
20000a82:	4601                	li	a2,0
20000a84:	32a010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000a88:	c531                	beqz	a0,20000ad4 <test_main+0x578>
20000a8a:	020d8463          	beqz	s11,20000ab2 <test_main+0x556>
20000a8e:	e000f517          	auipc	a0,0xe000f
20000a92:	77a50513          	addi	a0,a0,1914 # 10208 <plic_init_with_irqs.kLogFields.71>
20000a96:	4581                	li	a1,0
20000a98:	4da010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000a9c:	a03d                	j	20000aca <test_main+0x56e>
20000a9e:	effff517          	auipc	a0,0xeffff
20000aa2:	56a50513          	addi	a0,a0,1386 # 10000008 <_data_end>
20000aa6:	04300593          	li	a1,67
20000aaa:	4601                	li	a2,0
20000aac:	302010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000ab0:	c531                	beqz	a0,20000afc <test_main+0x5a0>
20000ab2:	00003597          	auipc	a1,0x3
20000ab6:	92258593          	addi	a1,a1,-1758 # 200033d4 <kTestConfig+0x120>
20000aba:	1080                	addi	s0,sp,96
20000abc:	4651                	li	a2,20
20000abe:	8522                	mv	a0,s0
20000ac0:	2a0020ef          	jal	ra,20002d60 <memcpy>
20000ac4:	8522                	mv	a0,s0
20000ac6:	402010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000aca:	6531                	lui	a0,0xc
20000acc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ad0:	5ed010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:213
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxerr,
20000ad4:	effff517          	auipc	a0,0xeffff
20000ad8:	53450513          	addi	a0,a0,1332 # 10000008 <_data_end>
20000adc:	04400593          	li	a1,68
20000ae0:	4601                	li	a2,0
20000ae2:	2cc010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000ae6:	c531                	beqz	a0,20000b32 <test_main+0x5d6>
20000ae8:	020d8463          	beqz	s11,20000b10 <test_main+0x5b4>
20000aec:	e000f517          	auipc	a0,0xe000f
20000af0:	73050513          	addi	a0,a0,1840 # 1021c <plic_init_with_irqs.kLogFields.73>
20000af4:	4581                	li	a1,0
20000af6:	47c010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000afa:	a03d                	j	20000b28 <test_main+0x5cc>
20000afc:	effff517          	auipc	a0,0xeffff
20000b00:	50c50513          	addi	a0,a0,1292 # 10000008 <_data_end>
20000b04:	04400593          	li	a1,68
20000b08:	4601                	li	a2,0
20000b0a:	2a4010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000b0e:	c531                	beqz	a0,20000b5a <test_main+0x5fe>
20000b10:	00003597          	auipc	a1,0x3
20000b14:	8d858593          	addi	a1,a1,-1832 # 200033e8 <kTestConfig+0x134>
20000b18:	1080                	addi	s0,sp,96
20000b1a:	4651                	li	a2,20
20000b1c:	8522                	mv	a0,s0
20000b1e:	242020ef          	jal	ra,20002d60 <memcpy>
20000b22:	8522                	mv	a0,s0
20000b24:	3a4010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000b28:	6531                	lui	a0,0xc
20000b2a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b2e:	58f010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:216
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxoverflow,
20000b32:	effff517          	auipc	a0,0xeffff
20000b36:	4d650513          	addi	a0,a0,1238 # 10000008 <_data_end>
20000b3a:	04500593          	li	a1,69
20000b3e:	4601                	li	a2,0
20000b40:	26e010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000b44:	c531                	beqz	a0,20000b90 <test_main+0x634>
20000b46:	020d8463          	beqz	s11,20000b6e <test_main+0x612>
20000b4a:	e000f517          	auipc	a0,0xe000f
20000b4e:	6e650513          	addi	a0,a0,1766 # 10230 <plic_init_with_irqs.kLogFields.75>
20000b52:	4581                	li	a1,0
20000b54:	41e010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000b58:	a03d                	j	20000b86 <test_main+0x62a>
20000b5a:	effff517          	auipc	a0,0xeffff
20000b5e:	4ae50513          	addi	a0,a0,1198 # 10000008 <_data_end>
20000b62:	04500593          	li	a1,69
20000b66:	4601                	li	a2,0
20000b68:	246010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000b6c:	c531                	beqz	a0,20000bb8 <test_main+0x65c>
20000b6e:	00003597          	auipc	a1,0x3
20000b72:	88e58593          	addi	a1,a1,-1906 # 200033fc <kTestConfig+0x148>
20000b76:	1080                	addi	s0,sp,96
20000b78:	4651                	li	a2,20
20000b7a:	8522                	mv	a0,s0
20000b7c:	1e4020ef          	jal	ra,20002d60 <memcpy>
20000b80:	8522                	mv	a0,s0
20000b82:	346010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000b86:	6531                	lui	a0,0xc
20000b88:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b8c:	531010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:219
  CHECK(
20000b90:	effff517          	auipc	a0,0xeffff
20000b94:	47850513          	addi	a0,a0,1144 # 10000008 <_data_end>
20000b98:	04600593          	li	a1,70
20000b9c:	4601                	li	a2,0
20000b9e:	210010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000ba2:	c531                	beqz	a0,20000bee <test_main+0x692>
20000ba4:	020d8463          	beqz	s11,20000bcc <test_main+0x670>
20000ba8:	e000f517          	auipc	a0,0xe000f
20000bac:	69c50513          	addi	a0,a0,1692 # 10244 <plic_init_with_irqs.kLogFields.77>
20000bb0:	4581                	li	a1,0
20000bb2:	3c0010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000bb6:	a03d                	j	20000be4 <test_main+0x688>
20000bb8:	effff517          	auipc	a0,0xeffff
20000bbc:	45050513          	addi	a0,a0,1104 # 10000008 <_data_end>
20000bc0:	04600593          	li	a1,70
20000bc4:	4601                	li	a2,0
20000bc6:	1e8010ef          	jal	ra,20001dae <dif_plic_irq_set_trigger>
20000bca:	c939                	beqz	a0,20000c20 <test_main+0x6c4>
20000bcc:	00003597          	auipc	a1,0x3
20000bd0:	84458593          	addi	a1,a1,-1980 # 20003410 <kTestConfig+0x15c>
20000bd4:	1080                	addi	s0,sp,96
20000bd6:	4651                	li	a2,20
20000bd8:	8522                	mv	a0,s0
20000bda:	186020ef          	jal	ra,20002d60 <memcpy>
20000bde:	8522                	mv	a0,s0
20000be0:	2e8010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000be4:	6531                	lui	a0,0xc
20000be6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000bea:	4d3010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:226
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxf,
20000bee:	00003517          	auipc	a0,0x3
20000bf2:	b9650513          	addi	a0,a0,-1130 # 20003784 <kDifPlicMaxPriority>
20000bf6:	4104                	lw	s1,0(a0)
20000bf8:	effff517          	auipc	a0,0xeffff
20000bfc:	41050513          	addi	a0,a0,1040 # 10000008 <_data_end>
20000c00:	04100593          	li	a1,65
20000c04:	8626                	mv	a2,s1
20000c06:	1e8010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000c0a:	c939                	beqz	a0,20000c60 <test_main+0x704>
20000c0c:	020d8963          	beqz	s11,20000c3e <test_main+0x6e2>
20000c10:	e000f517          	auipc	a0,0xe000f
20000c14:	64850513          	addi	a0,a0,1608 # 10258 <plic_init_with_irqs.kLogFields.79>
20000c18:	4581                	li	a1,0
20000c1a:	358010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000c1e:	a825                	j	20000c56 <test_main+0x6fa>
20000c20:	00003517          	auipc	a0,0x3
20000c24:	b6450513          	addi	a0,a0,-1180 # 20003784 <kDifPlicMaxPriority>
20000c28:	4104                	lw	s1,0(a0)
20000c2a:	effff517          	auipc	a0,0xeffff
20000c2e:	3de50513          	addi	a0,a0,990 # 10000008 <_data_end>
20000c32:	04100593          	li	a1,65
20000c36:	8626                	mv	a2,s1
20000c38:	1b6010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000c3c:	c531                	beqz	a0,20000c88 <test_main+0x72c>
20000c3e:	00002597          	auipc	a1,0x2
20000c42:	7e658593          	addi	a1,a1,2022 # 20003424 <kTestConfig+0x170>
20000c46:	1080                	addi	s0,sp,96
20000c48:	4651                	li	a2,20
20000c4a:	8522                	mv	a0,s0
20000c4c:	114020ef          	jal	ra,20002d60 <memcpy>
20000c50:	8522                	mv	a0,s0
20000c52:	276010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000c56:	6531                	lui	a0,0xc
20000c58:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000c5c:	461010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:229
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxlvl,
20000c60:	effff517          	auipc	a0,0xeffff
20000c64:	3a850513          	addi	a0,a0,936 # 10000008 <_data_end>
20000c68:	04200593          	li	a1,66
20000c6c:	8626                	mv	a2,s1
20000c6e:	180010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000c72:	c531                	beqz	a0,20000cbe <test_main+0x762>
20000c74:	020d8463          	beqz	s11,20000c9c <test_main+0x740>
20000c78:	e000f517          	auipc	a0,0xe000f
20000c7c:	5f450513          	addi	a0,a0,1524 # 1026c <plic_init_with_irqs.kLogFields.82>
20000c80:	4581                	li	a1,0
20000c82:	2f0010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000c86:	a03d                	j	20000cb4 <test_main+0x758>
20000c88:	effff517          	auipc	a0,0xeffff
20000c8c:	38050513          	addi	a0,a0,896 # 10000008 <_data_end>
20000c90:	04200593          	li	a1,66
20000c94:	8626                	mv	a2,s1
20000c96:	158010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000c9a:	c931                	beqz	a0,20000cee <test_main+0x792>
20000c9c:	00002597          	auipc	a1,0x2
20000ca0:	79c58593          	addi	a1,a1,1948 # 20003438 <kTestConfig+0x184>
20000ca4:	1080                	addi	s0,sp,96
20000ca6:	4651                	li	a2,20
20000ca8:	8522                	mv	a0,s0
20000caa:	0b6020ef          	jal	ra,20002d60 <memcpy>
20000cae:	8522                	mv	a0,s0
20000cb0:	218010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000cb4:	6531                	lui	a0,0xc
20000cb6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000cba:	403010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:232
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceTxlvl,
20000cbe:	effff517          	auipc	a0,0xeffff
20000cc2:	34a50513          	addi	a0,a0,842 # 10000008 <_data_end>
20000cc6:	04300593          	li	a1,67
20000cca:	8626                	mv	a2,s1
20000ccc:	122010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000cd0:	c125                	beqz	a0,20000d30 <test_main+0x7d4>
20000cd2:	020d8a63          	beqz	s11,20000d06 <test_main+0x7aa>
20000cd6:	e000f517          	auipc	a0,0xe000f
20000cda:	5aa50513          	addi	a0,a0,1450 # 10280 <plic_init_with_irqs.kLogFields.84>
20000cde:	00003617          	auipc	a2,0x3
20000ce2:	4f060613          	addi	a2,a2,1264 # 200041ce <__clz_tab+0x58a>
20000ce6:	4585                	li	a1,1
20000ce8:	28a010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000cec:	a82d                	j	20000d26 <test_main+0x7ca>
20000cee:	effff517          	auipc	a0,0xeffff
20000cf2:	31a50513          	addi	a0,a0,794 # 10000008 <_data_end>
20000cf6:	04300593          	li	a1,67
20000cfa:	8626                	mv	a2,s1
20000cfc:	0f2010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000d00:	cd21                	beqz	a0,20000d58 <test_main+0x7fc>
20000d02:	4986                	lw	s3,64(sp)
20000d04:	5b72                	lw	s6,60(sp)
20000d06:	00002597          	auipc	a1,0x2
20000d0a:	74658593          	addi	a1,a1,1862 # 2000344c <kTestConfig+0x198>
20000d0e:	1080                	addi	s0,sp,96
20000d10:	4651                	li	a2,20
20000d12:	8522                	mv	a0,s0
20000d14:	04c020ef          	jal	ra,20002d60 <memcpy>
20000d18:	00003597          	auipc	a1,0x3
20000d1c:	4b658593          	addi	a1,a1,1206 # 200041ce <__clz_tab+0x58a>
20000d20:	8522                	mv	a0,s0
20000d22:	1a6010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000d26:	6531                	lui	a0,0xc
20000d28:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000d2c:	391010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:235
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxerr,
20000d30:	effff517          	auipc	a0,0xeffff
20000d34:	2d850513          	addi	a0,a0,728 # 10000008 <_data_end>
20000d38:	04400593          	li	a1,68
20000d3c:	8626                	mv	a2,s1
20000d3e:	0b0010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000d42:	c921                	beqz	a0,20000d92 <test_main+0x836>
20000d44:	020d8663          	beqz	s11,20000d70 <test_main+0x814>
20000d48:	e000f517          	auipc	a0,0xe000f
20000d4c:	54c50513          	addi	a0,a0,1356 # 10294 <plic_init_with_irqs.kLogFields.88>
20000d50:	4581                	li	a1,0
20000d52:	220010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000d56:	a80d                	j	20000d88 <test_main+0x82c>
20000d58:	effff517          	auipc	a0,0xeffff
20000d5c:	2b050513          	addi	a0,a0,688 # 10000008 <_data_end>
20000d60:	04400593          	li	a1,68
20000d64:	8626                	mv	a2,s1
20000d66:	088010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000d6a:	c52d                	beqz	a0,20000dd4 <test_main+0x878>
20000d6c:	4986                	lw	s3,64(sp)
20000d6e:	5b72                	lw	s6,60(sp)
20000d70:	00002597          	auipc	a1,0x2
20000d74:	6f058593          	addi	a1,a1,1776 # 20003460 <kTestConfig+0x1ac>
20000d78:	1080                	addi	s0,sp,96
20000d7a:	4651                	li	a2,20
20000d7c:	8522                	mv	a0,s0
20000d7e:	7e3010ef          	jal	ra,20002d60 <memcpy>
20000d82:	8522                	mv	a0,s0
20000d84:	144010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000d88:	6531                	lui	a0,0xc
20000d8a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000d8e:	32f010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:238
  CHECK(
20000d92:	effff517          	auipc	a0,0xeffff
20000d96:	27650513          	addi	a0,a0,630 # 10000008 <_data_end>
20000d9a:	04500593          	li	a1,69
20000d9e:	8626                	mv	a2,s1
20000da0:	04e010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000da4:	c535                	beqz	a0,20000e10 <test_main+0x8b4>
20000da6:	040d8463          	beqz	s11,20000dee <test_main+0x892>
20000daa:	e000f517          	auipc	a0,0xe000f
20000dae:	4fe50513          	addi	a0,a0,1278 # 102a8 <plic_init_with_irqs.kLogFields.90>
20000db2:	4581                	li	a1,0
20000db4:	1be010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000db8:	a0b9                	j	20000e06 <test_main+0x8aa>
20000dba:	effff517          	auipc	a0,0xeffff
20000dbe:	24e50513          	addi	a0,a0,590 # 10000008 <_data_end>
20000dc2:	04500593          	li	a1,69
20000dc6:	8626                	mv	a2,s1
20000dc8:	026010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000dcc:	c53d                	beqz	a0,20000e3a <test_main+0x8de>
20000dce:	4986                	lw	s3,64(sp)
20000dd0:	5b72                	lw	s6,60(sp)
20000dd2:	bfe1                	j	20000daa <test_main+0x84e>
20000dd4:	effff517          	auipc	a0,0xeffff
20000dd8:	23450513          	addi	a0,a0,564 # 10000008 <_data_end>
20000ddc:	04500593          	li	a1,69
20000de0:	8626                	mv	a2,s1
20000de2:	00c010ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000de6:	10050963          	beqz	a0,20000ef8 <test_main+0x99c>
20000dea:	4986                	lw	s3,64(sp)
20000dec:	5b72                	lw	s6,60(sp)
20000dee:	00002597          	auipc	a1,0x2
20000df2:	68658593          	addi	a1,a1,1670 # 20003474 <kTestConfig+0x1c0>
20000df6:	1080                	addi	s0,sp,96
20000df8:	4651                	li	a2,20
20000dfa:	8522                	mv	a0,s0
20000dfc:	765010ef          	jal	ra,20002d60 <memcpy>
20000e00:	8522                	mv	a0,s0
20000e02:	0c6010ef          	jal	ra,20001ec8 <base_log_internal_core>
20000e06:	6531                	lui	a0,0xc
20000e08:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000e0c:	2b1010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:242
  CHECK(
20000e10:	effff517          	auipc	a0,0xeffff
20000e14:	1f850513          	addi	a0,a0,504 # 10000008 <_data_end>
20000e18:	04600593          	li	a1,70
20000e1c:	8626                	mv	a2,s1
20000e1e:	7d1000ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000e22:	10050863          	beqz	a0,20000f32 <test_main+0x9d6>
20000e26:	0e0d8563          	beqz	s11,20000f10 <test_main+0x9b4>
20000e2a:	e000f517          	auipc	a0,0xe000f
20000e2e:	49250513          	addi	a0,a0,1170 # 102bc <plic_init_with_irqs.kLogFields.92>
20000e32:	4581                	li	a1,0
20000e34:	13e010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000e38:	a8c5                	j	20000f28 <test_main+0x9cc>
20000e3a:	effff517          	auipc	a0,0xeffff
20000e3e:	1ce50513          	addi	a0,a0,462 # 10000008 <_data_end>
20000e42:	04600593          	li	a1,70
20000e46:	8626                	mv	a2,s1
20000e48:	7a7000ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000e4c:	4986                	lw	s3,64(sp)
20000e4e:	5b72                	lw	s6,60(sp)
20000e50:	fd69                	bnez	a0,20000e2a <test_main+0x8ce>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:248
  CHECK(dif_plic_target_set_threshold(plic, kTopEarlgreyPlicTargetIbex0, 0x0) ==
20000e52:	effff517          	auipc	a0,0xeffff
20000e56:	1b650513          	addi	a0,a0,438 # 10000008 <_data_end>
20000e5a:	4581                	li	a1,0
20000e5c:	4601                	li	a2,0
20000e5e:	7b1000ef          	jal	ra,20001e0e <dif_plic_target_set_threshold>
20000e62:	0e051363          	bnez	a0,20000f48 <test_main+0x9ec>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:252
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxf,
20000e66:	effff517          	auipc	a0,0xeffff
20000e6a:	1a250513          	addi	a0,a0,418 # 10000008 <_data_end>
20000e6e:	04100593          	li	a1,65
20000e72:	4601                	li	a2,0
20000e74:	4681                	li	a3,0
20000e76:	6f3000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000e7a:	12051663          	bnez	a0,20000fa6 <test_main+0xa4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:257
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxlvl,
20000e7e:	effff517          	auipc	a0,0xeffff
20000e82:	18a50513          	addi	a0,a0,394 # 10000008 <_data_end>
20000e86:	04200593          	li	a1,66
20000e8a:	4601                	li	a2,0
20000e8c:	4681                	li	a3,0
20000e8e:	6db000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000e92:	16051b63          	bnez	a0,20001008 <test_main+0xaac>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:262
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceTxlvl,
20000e96:	effff517          	auipc	a0,0xeffff
20000e9a:	17250513          	addi	a0,a0,370 # 10000008 <_data_end>
20000e9e:	04300593          	li	a1,67
20000ea2:	4601                	li	a2,0
20000ea4:	4681                	li	a3,0
20000ea6:	6c3000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000eaa:	1c051063          	bnez	a0,2000106a <test_main+0xb0e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:267
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxerr,
20000eae:	effff517          	auipc	a0,0xeffff
20000eb2:	15a50513          	addi	a0,a0,346 # 10000008 <_data_end>
20000eb6:	04400593          	li	a1,68
20000eba:	4601                	li	a2,0
20000ebc:	4681                	li	a3,0
20000ebe:	6ab000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000ec2:	20051563          	bnez	a0,200010cc <test_main+0xb70>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:272
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxoverflow,
20000ec6:	effff517          	auipc	a0,0xeffff
20000eca:	14250513          	addi	a0,a0,322 # 10000008 <_data_end>
20000ece:	04500593          	li	a1,69
20000ed2:	4601                	li	a2,0
20000ed4:	4681                	li	a3,0
20000ed6:	693000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000eda:	24051a63          	bnez	a0,2000112e <test_main+0xbd2>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:277
  CHECK(dif_plic_irq_set_enabled(
20000ede:	effff517          	auipc	a0,0xeffff
20000ee2:	12a50513          	addi	a0,a0,298 # 10000008 <_data_end>
20000ee6:	04600593          	li	a1,70
20000eea:	4601                	li	a2,0
20000eec:	4681                	li	a3,0
20000eee:	67b000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000ef2:	28051f63          	bnez	a0,20001190 <test_main+0xc34>
20000ef6:	a4cd                	j	200011d8 <test_main+0xc7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:242
  CHECK(
20000ef8:	effff517          	auipc	a0,0xeffff
20000efc:	11050513          	addi	a0,a0,272 # 10000008 <_data_end>
20000f00:	04600593          	li	a1,70
20000f04:	8626                	mv	a2,s1
20000f06:	6e9000ef          	jal	ra,20001dee <dif_plic_irq_set_priority>
20000f0a:	4986                	lw	s3,64(sp)
20000f0c:	5b72                	lw	s6,60(sp)
20000f0e:	c529                	beqz	a0,20000f58 <test_main+0x9fc>
20000f10:	00002597          	auipc	a1,0x2
20000f14:	57858593          	addi	a1,a1,1400 # 20003488 <kTestConfig+0x1d4>
20000f18:	1080                	addi	s0,sp,96
20000f1a:	4651                	li	a2,20
20000f1c:	8522                	mv	a0,s0
20000f1e:	643010ef          	jal	ra,20002d60 <memcpy>
20000f22:	8522                	mv	a0,s0
20000f24:	7a5000ef          	jal	ra,20001ec8 <base_log_internal_core>
20000f28:	6531                	lui	a0,0xc
20000f2a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000f2e:	18f010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:248
  CHECK(dif_plic_target_set_threshold(plic, kTopEarlgreyPlicTargetIbex0, 0x0) ==
20000f32:	effff517          	auipc	a0,0xeffff
20000f36:	0d650513          	addi	a0,a0,214 # 10000008 <_data_end>
20000f3a:	4581                	li	a1,0
20000f3c:	4601                	li	a2,0
20000f3e:	6d1000ef          	jal	ra,20001e0e <dif_plic_target_set_threshold>
20000f42:	c529                	beqz	a0,20000f8c <test_main+0xa30>
20000f44:	020d8363          	beqz	s11,20000f6a <test_main+0xa0e>
20000f48:	e000f517          	auipc	a0,0xe000f
20000f4c:	38850513          	addi	a0,a0,904 # 102d0 <plic_init_with_irqs.kLogFields.94>
20000f50:	4581                	li	a1,0
20000f52:	020010ef          	jal	ra,20001f72 <base_log_internal_dv>
20000f56:	a035                	j	20000f82 <test_main+0xa26>
20000f58:	effff517          	auipc	a0,0xeffff
20000f5c:	0b050513          	addi	a0,a0,176 # 10000008 <_data_end>
20000f60:	4581                	li	a1,0
20000f62:	4601                	li	a2,0
20000f64:	6ab000ef          	jal	ra,20001e0e <dif_plic_target_set_threshold>
20000f68:	c539                	beqz	a0,20000fb6 <test_main+0xa5a>
20000f6a:	00002597          	auipc	a1,0x2
20000f6e:	53258593          	addi	a1,a1,1330 # 2000349c <kTestConfig+0x1e8>
20000f72:	1080                	addi	s0,sp,96
20000f74:	4651                	li	a2,20
20000f76:	8522                	mv	a0,s0
20000f78:	5e9010ef          	jal	ra,20002d60 <memcpy>
20000f7c:	8522                	mv	a0,s0
20000f7e:	74b000ef          	jal	ra,20001ec8 <base_log_internal_core>
20000f82:	6531                	lui	a0,0xc
20000f84:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000f88:	135010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:252
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxf,
20000f8c:	effff517          	auipc	a0,0xeffff
20000f90:	07c50513          	addi	a0,a0,124 # 10000008 <_data_end>
20000f94:	04100593          	li	a1,65
20000f98:	4601                	li	a2,0
20000f9a:	4681                	li	a3,0
20000f9c:	5cd000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000fa0:	c539                	beqz	a0,20000fee <test_main+0xa92>
20000fa2:	020d8563          	beqz	s11,20000fcc <test_main+0xa70>
20000fa6:	e000f517          	auipc	a0,0xe000f
20000faa:	33e50513          	addi	a0,a0,830 # 102e4 <plic_init_with_irqs.kLogFields.97>
20000fae:	4581                	li	a1,0
20000fb0:	7c3000ef          	jal	ra,20001f72 <base_log_internal_dv>
20000fb4:	a805                	j	20000fe4 <test_main+0xa88>
20000fb6:	effff517          	auipc	a0,0xeffff
20000fba:	05250513          	addi	a0,a0,82 # 10000008 <_data_end>
20000fbe:	04100593          	li	a1,65
20000fc2:	4601                	li	a2,0
20000fc4:	4681                	li	a3,0
20000fc6:	5a3000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20000fca:	c539                	beqz	a0,20001018 <test_main+0xabc>
20000fcc:	00002597          	auipc	a1,0x2
20000fd0:	4e458593          	addi	a1,a1,1252 # 200034b0 <kTestConfig+0x1fc>
20000fd4:	1080                	addi	s0,sp,96
20000fd6:	4651                	li	a2,20
20000fd8:	8522                	mv	a0,s0
20000fda:	587010ef          	jal	ra,20002d60 <memcpy>
20000fde:	8522                	mv	a0,s0
20000fe0:	6e9000ef          	jal	ra,20001ec8 <base_log_internal_core>
20000fe4:	6531                	lui	a0,0xc
20000fe6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000fea:	0d3010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:257
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxlvl,
20000fee:	effff517          	auipc	a0,0xeffff
20000ff2:	01a50513          	addi	a0,a0,26 # 10000008 <_data_end>
20000ff6:	04200593          	li	a1,66
20000ffa:	4601                	li	a2,0
20000ffc:	4681                	li	a3,0
20000ffe:	56b000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20001002:	c539                	beqz	a0,20001050 <test_main+0xaf4>
20001004:	020d8563          	beqz	s11,2000102e <test_main+0xad2>
20001008:	e000f517          	auipc	a0,0xe000f
2000100c:	2f050513          	addi	a0,a0,752 # 102f8 <plic_init_with_irqs.kLogFields.100>
20001010:	4581                	li	a1,0
20001012:	761000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001016:	a805                	j	20001046 <test_main+0xaea>
20001018:	effff517          	auipc	a0,0xeffff
2000101c:	ff050513          	addi	a0,a0,-16 # 10000008 <_data_end>
20001020:	04200593          	li	a1,66
20001024:	4601                	li	a2,0
20001026:	4681                	li	a3,0
20001028:	541000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
2000102c:	c539                	beqz	a0,2000107a <test_main+0xb1e>
2000102e:	00002597          	auipc	a1,0x2
20001032:	49658593          	addi	a1,a1,1174 # 200034c4 <kTestConfig+0x210>
20001036:	1080                	addi	s0,sp,96
20001038:	4651                	li	a2,20
2000103a:	8522                	mv	a0,s0
2000103c:	525010ef          	jal	ra,20002d60 <memcpy>
20001040:	8522                	mv	a0,s0
20001042:	687000ef          	jal	ra,20001ec8 <base_log_internal_core>
20001046:	6531                	lui	a0,0xc
20001048:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000104c:	071010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:262
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceTxlvl,
20001050:	effff517          	auipc	a0,0xeffff
20001054:	fb850513          	addi	a0,a0,-72 # 10000008 <_data_end>
20001058:	04300593          	li	a1,67
2000105c:	4601                	li	a2,0
2000105e:	4681                	li	a3,0
20001060:	509000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20001064:	c539                	beqz	a0,200010b2 <test_main+0xb56>
20001066:	020d8563          	beqz	s11,20001090 <test_main+0xb34>
2000106a:	e000f517          	auipc	a0,0xe000f
2000106e:	2a250513          	addi	a0,a0,674 # 1030c <plic_init_with_irqs.kLogFields.102>
20001072:	4581                	li	a1,0
20001074:	6ff000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001078:	a805                	j	200010a8 <test_main+0xb4c>
2000107a:	effff517          	auipc	a0,0xeffff
2000107e:	f8e50513          	addi	a0,a0,-114 # 10000008 <_data_end>
20001082:	04300593          	li	a1,67
20001086:	4601                	li	a2,0
20001088:	4681                	li	a3,0
2000108a:	4df000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
2000108e:	c539                	beqz	a0,200010dc <test_main+0xb80>
20001090:	00002597          	auipc	a1,0x2
20001094:	44858593          	addi	a1,a1,1096 # 200034d8 <kTestConfig+0x224>
20001098:	1080                	addi	s0,sp,96
2000109a:	4651                	li	a2,20
2000109c:	8522                	mv	a0,s0
2000109e:	4c3010ef          	jal	ra,20002d60 <memcpy>
200010a2:	8522                	mv	a0,s0
200010a4:	625000ef          	jal	ra,20001ec8 <base_log_internal_core>
200010a8:	6531                	lui	a0,0xc
200010aa:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200010ae:	00f010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:267
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxerr,
200010b2:	effff517          	auipc	a0,0xeffff
200010b6:	f5650513          	addi	a0,a0,-170 # 10000008 <_data_end>
200010ba:	04400593          	li	a1,68
200010be:	4601                	li	a2,0
200010c0:	4681                	li	a3,0
200010c2:	4a7000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
200010c6:	c539                	beqz	a0,20001114 <test_main+0xbb8>
200010c8:	020d8563          	beqz	s11,200010f2 <test_main+0xb96>
200010cc:	e000f517          	auipc	a0,0xe000f
200010d0:	25450513          	addi	a0,a0,596 # 10320 <plic_init_with_irqs.kLogFields.104>
200010d4:	4581                	li	a1,0
200010d6:	69d000ef          	jal	ra,20001f72 <base_log_internal_dv>
200010da:	a805                	j	2000110a <test_main+0xbae>
200010dc:	effff517          	auipc	a0,0xeffff
200010e0:	f2c50513          	addi	a0,a0,-212 # 10000008 <_data_end>
200010e4:	04400593          	li	a1,68
200010e8:	4601                	li	a2,0
200010ea:	4681                	li	a3,0
200010ec:	47d000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
200010f0:	c539                	beqz	a0,2000113e <test_main+0xbe2>
200010f2:	00002597          	auipc	a1,0x2
200010f6:	3fa58593          	addi	a1,a1,1018 # 200034ec <kTestConfig+0x238>
200010fa:	1080                	addi	s0,sp,96
200010fc:	4651                	li	a2,20
200010fe:	8522                	mv	a0,s0
20001100:	461010ef          	jal	ra,20002d60 <memcpy>
20001104:	8522                	mv	a0,s0
20001106:	5c3000ef          	jal	ra,20001ec8 <base_log_internal_core>
2000110a:	6531                	lui	a0,0xc
2000110c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001110:	7ac010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:272
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdSpiDeviceRxoverflow,
20001114:	effff517          	auipc	a0,0xeffff
20001118:	ef450513          	addi	a0,a0,-268 # 10000008 <_data_end>
2000111c:	04500593          	li	a1,69
20001120:	4601                	li	a2,0
20001122:	4681                	li	a3,0
20001124:	445000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20001128:	c539                	beqz	a0,20001176 <test_main+0xc1a>
2000112a:	020d8563          	beqz	s11,20001154 <test_main+0xbf8>
2000112e:	e000f517          	auipc	a0,0xe000f
20001132:	20650513          	addi	a0,a0,518 # 10334 <plic_init_with_irqs.kLogFields.106>
20001136:	4581                	li	a1,0
20001138:	63b000ef          	jal	ra,20001f72 <base_log_internal_dv>
2000113c:	a805                	j	2000116c <test_main+0xc10>
2000113e:	effff517          	auipc	a0,0xeffff
20001142:	eca50513          	addi	a0,a0,-310 # 10000008 <_data_end>
20001146:	04500593          	li	a1,69
2000114a:	4601                	li	a2,0
2000114c:	4681                	li	a3,0
2000114e:	41b000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
20001152:	c539                	beqz	a0,200011a0 <test_main+0xc44>
20001154:	00002597          	auipc	a1,0x2
20001158:	3ac58593          	addi	a1,a1,940 # 20003500 <kTestConfig+0x24c>
2000115c:	1080                	addi	s0,sp,96
2000115e:	4651                	li	a2,20
20001160:	8522                	mv	a0,s0
20001162:	3ff010ef          	jal	ra,20002d60 <memcpy>
20001166:	8522                	mv	a0,s0
20001168:	561000ef          	jal	ra,20001ec8 <base_log_internal_core>
2000116c:	6531                	lui	a0,0xc
2000116e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001172:	74a010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:277
  CHECK(dif_plic_irq_set_enabled(
20001176:	effff517          	auipc	a0,0xeffff
2000117a:	e9250513          	addi	a0,a0,-366 # 10000008 <_data_end>
2000117e:	04600593          	li	a1,70
20001182:	4601                	li	a2,0
20001184:	4681                	li	a3,0
20001186:	3e3000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
2000118a:	c539                	beqz	a0,200011d8 <test_main+0xc7c>
2000118c:	020d8563          	beqz	s11,200011b6 <test_main+0xc5a>
20001190:	e000f517          	auipc	a0,0xe000f
20001194:	1b850513          	addi	a0,a0,440 # 10348 <plic_init_with_irqs.kLogFields.108>
20001198:	4581                	li	a1,0
2000119a:	5d9000ef          	jal	ra,20001f72 <base_log_internal_dv>
2000119e:	a805                	j	200011ce <test_main+0xc72>
200011a0:	effff517          	auipc	a0,0xeffff
200011a4:	e6850513          	addi	a0,a0,-408 # 10000008 <_data_end>
200011a8:	04600593          	li	a1,70
200011ac:	4601                	li	a2,0
200011ae:	4681                	li	a3,0
200011b0:	3b9000ef          	jal	ra,20001d68 <dif_plic_irq_set_enabled>
200011b4:	c115                	beqz	a0,200011d8 <test_main+0xc7c>
200011b6:	00002597          	auipc	a1,0x2
200011ba:	35e58593          	addi	a1,a1,862 # 20003514 <kTestConfig+0x260>
200011be:	1080                	addi	s0,sp,96
200011c0:	4651                	li	a2,20
200011c2:	8522                	mv	a0,s0
200011c4:	39d010ef          	jal	ra,20002d60 <memcpy>
200011c8:	8522                	mv	a0,s0
200011ca:	4ff000ef          	jal	ra,20001ec8 <base_log_internal_core>
200011ce:	6531                	lui	a0,0xc
200011d0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200011d4:	6e8010ef          	jal	ra,200028bc <test_status_set>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:404
      mmio_region_from_addr(TOP_EARLGREY_RV_PLIC_BASE_ADDR);
  // Initialize the PLIC
  plic_init_with_irqs(plic_base_addr, &plic0);

  // Enable the external IRQ at Ibex.
  irq_global_ctrl(true);
200011d8:	4505                	li	a0,1
200011da:	419010ef          	jal	ra,20002df2 <irq_global_ctrl>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:405
  irq_external_ctrl(true);
200011de:	4505                	li	a0,1
200011e0:	425010ef          	jal	ra,20002e04 <irq_external_ctrl>
execute_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:292
  LOG_INFO("Executing the test.");
200011e4:	000d8a63          	beqz	s11,200011f8 <test_main+0xc9c>
200011e8:	e000f517          	auipc	a0,0xe000f
200011ec:	17450513          	addi	a0,a0,372 # 1035c <execute_test.kLogFields>
200011f0:	4581                	li	a1,0
200011f2:	581000ef          	jal	ra,20001f72 <base_log_internal_dv>
200011f6:	a829                	j	20001210 <test_main+0xcb4>
200011f8:	00002597          	auipc	a1,0x2
200011fc:	33058593          	addi	a1,a1,816 # 20003528 <kTestConfig+0x274>
20001200:	1080                	addi	s0,sp,96
20001202:	4651                	li	a2,20
20001204:	8522                	mv	a0,s0
20001206:	35b010ef          	jal	ra,20002d60 <memcpy>
2000120a:	8522                	mv	a0,s0
2000120c:	4bd000ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:294
  size_t bytes_transferred = 0;
20001210:	d582                	sw	zero,232(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:295
  CHECK(dif_spi_device_send(spi_device, spi_device_tx_data,
20001212:	effff517          	auipc	a0,0xeffff
20001216:	e0650513          	addi	a0,a0,-506 # 10000018 <spi_device>
2000121a:	00002597          	auipc	a1,0x2
2000121e:	32258593          	addi	a1,a1,802 # 2000353c <spi_device_tx_data>
20001222:	11b4                	addi	a3,sp,232
20001224:	08000613          	li	a2,128
20001228:	08000413          	li	s0,128
2000122c:	07d000ef          	jal	ra,20001aa8 <dif_spi_device_send>
20001230:	cd05                	beqz	a0,20001268 <test_main+0xd0c>
20001232:	000d8a63          	beqz	s11,20001246 <test_main+0xcea>
20001236:	e000f517          	auipc	a0,0xe000f
2000123a:	13a50513          	addi	a0,a0,314 # 10370 <execute_test.kLogFields.111>
2000123e:	4581                	li	a1,0
20001240:	533000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001244:	a829                	j	2000125e <test_main+0xd02>
20001246:	00002597          	auipc	a1,0x2
2000124a:	37658593          	addi	a1,a1,886 # 200035bc <spi_device_tx_data+0x80>
2000124e:	1084                	addi	s1,sp,96
20001250:	4651                	li	a2,20
20001252:	8526                	mv	a0,s1
20001254:	30d010ef          	jal	ra,20002d60 <memcpy>
20001258:	8526                	mv	a0,s1
2000125a:	46f000ef          	jal	ra,20001ec8 <base_log_internal_core>
2000125e:	6531                	lui	a0,0xc
20001260:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001264:	658010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:298
  if (bytes_transferred != SPI_DEVICE_DATASET_SIZE) {
20001268:	54ae                	lw	s1,232(sp)
2000126a:	00849e63          	bne	s1,s0,20001286 <test_main+0xd2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:303
    LOG_INFO("Transferred %0d bytes to SPI_DEVICE TX_FIFO.", bytes_transferred);
2000126e:	020d8963          	beqz	s11,200012a0 <test_main+0xd44>
20001272:	e000f517          	auipc	a0,0xe000f
20001276:	12650513          	addi	a0,a0,294 # 10398 <execute_test.kLogFields.117>
2000127a:	4585                	li	a1,1
2000127c:	08000613          	li	a2,128
20001280:	4f3000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001284:	a8a1                	j	200012dc <test_main+0xd80>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:299
    LOG_ERROR(
20001286:	020d8c63          	beqz	s11,200012be <test_main+0xd62>
2000128a:	e000f517          	auipc	a0,0xe000f
2000128e:	0fa50513          	addi	a0,a0,250 # 10384 <execute_test.kLogFields.114>
20001292:	4589                	li	a1,2
20001294:	08000693          	li	a3,128
20001298:	8626                	mv	a2,s1
2000129a:	4d9000ef          	jal	ra,20001f72 <base_log_internal_dv>
2000129e:	a83d                	j	200012dc <test_main+0xd80>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:303
    LOG_INFO("Transferred %0d bytes to SPI_DEVICE TX_FIFO.", bytes_transferred);
200012a0:	00002597          	auipc	a1,0x2
200012a4:	34458593          	addi	a1,a1,836 # 200035e4 <spi_device_tx_data+0xa8>
200012a8:	1080                	addi	s0,sp,96
200012aa:	4651                	li	a2,20
200012ac:	8522                	mv	a0,s0
200012ae:	2b3010ef          	jal	ra,20002d60 <memcpy>
200012b2:	08000593          	li	a1,128
200012b6:	8522                	mv	a0,s0
200012b8:	411000ef          	jal	ra,20001ec8 <base_log_internal_core>
200012bc:	a005                	j	200012dc <test_main+0xd80>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:299
    LOG_ERROR(
200012be:	00002597          	auipc	a1,0x2
200012c2:	31258593          	addi	a1,a1,786 # 200035d0 <spi_device_tx_data+0x94>
200012c6:	1080                	addi	s0,sp,96
200012c8:	4651                	li	a2,20
200012ca:	8522                	mv	a0,s0
200012cc:	295010ef          	jal	ra,20002d60 <memcpy>
200012d0:	08000613          	li	a2,128
200012d4:	8522                	mv	a0,s0
200012d6:	85a6                	mv	a1,s1
200012d8:	3f1000ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:306
  CHECK(dif_spi_device_set_irq_levels(spi_device, SPI_DEVICE_DATASET_SIZE,
200012dc:	effff517          	auipc	a0,0xeffff
200012e0:	d3c50513          	addi	a0,a0,-708 # 10000018 <spi_device>
200012e4:	08000593          	li	a1,128
200012e8:	04000613          	li	a2,64
200012ec:	08000d13          	li	s10,128
200012f0:	5ac000ef          	jal	ra,2000189c <dif_spi_device_set_irq_levels>
200012f4:	cd05                	beqz	a0,2000132c <test_main+0xdd0>
200012f6:	000d8a63          	beqz	s11,2000130a <test_main+0xdae>
200012fa:	e000f517          	auipc	a0,0xe000f
200012fe:	0b250513          	addi	a0,a0,178 # 103ac <execute_test.kLogFields.120>
20001302:	4581                	li	a1,0
20001304:	46f000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001308:	a829                	j	20001322 <test_main+0xdc6>
2000130a:	00002597          	auipc	a1,0x2
2000130e:	2ee58593          	addi	a1,a1,750 # 200035f8 <spi_device_tx_data+0xbc>
20001312:	1080                	addi	s0,sp,96
20001314:	4651                	li	a2,20
20001316:	8522                	mv	a0,s0
20001318:	249010ef          	jal	ra,20002d60 <memcpy>
2000131c:	8522                	mv	a0,s0
2000131e:	3ab000ef          	jal	ra,20001ec8 <base_log_internal_core>
20001322:	6531                	lui	a0,0xc
20001324:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001328:	594010ef          	jal	ra,200028bc <test_status_set>
2000132c:	4901                	li	s2,0
2000132e:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:309
  expected_irqs[kDifSpiDeviceIrqTxBelowLevel] = true;
20001330:	00a98123          	sb	a0,2(s3)
20001334:	00002517          	auipc	a0,0x2
20001338:	42050513          	addi	a0,a0,1056 # 20003754 <exp_spi_device_rx_data+0xbc>
2000133c:	cc2a                	sw	a0,24(sp)
2000133e:	e000f517          	auipc	a0,0xe000f
20001342:	14a50513          	addi	a0,a0,330 # 10488 <execute_test.kLogFields.153>
20001346:	da2a                	sw	a0,52(sp)
20001348:	effff517          	auipc	a0,0xeffff
2000134c:	cd050513          	addi	a0,a0,-816 # 10000018 <spi_device>
20001350:	c2aa                	sw	a0,68(sp)
20001352:	00002517          	auipc	a0,0x2
20001356:	3ee50513          	addi	a0,a0,1006 # 20003740 <exp_spi_device_rx_data+0xa8>
2000135a:	ca2a                	sw	a0,20(sp)
2000135c:	e000f517          	auipc	a0,0xe000f
20001360:	11850513          	addi	a0,a0,280 # 10474 <execute_test.kLogFields.150>
20001364:	d82a                	sw	a0,48(sp)
20001366:	00002517          	auipc	a0,0x2
2000136a:	3c650513          	addi	a0,a0,966 # 2000372c <exp_spi_device_rx_data+0x94>
2000136e:	c02a                	sw	a0,0(sp)
20001370:	6531                	lui	a0,0xc
20001372:	aad50493          	addi	s1,a0,-1363 # baad <_stack_size+0x9aad>
20001376:	e000f517          	auipc	a0,0xe000f
2000137a:	0ea50513          	addi	a0,a0,234 # 10460 <execute_test.kLogFields.147>
2000137e:	ce2a                	sw	a0,28(sp)
20001380:	00002517          	auipc	a0,0x2
20001384:	3e850513          	addi	a0,a0,1000 # 20003768 <exp_spi_device_rx_data+0xd0>
20001388:	c22a                	sw	a0,4(sp)
2000138a:	e000f517          	auipc	a0,0xe000f
2000138e:	11250513          	addi	a0,a0,274 # 1049c <execute_test.kLogFields.156>
20001392:	d02a                	sw	a0,32(sp)
20001394:	e000f517          	auipc	a0,0xe000f
20001398:	07c50513          	addi	a0,a0,124 # 10410 <execute_test.kLogFields.135>
2000139c:	d42a                	sw	a0,40(sp)
2000139e:	00002517          	auipc	a0,0x2
200013a2:	2be50513          	addi	a0,a0,702 # 2000365c <spi_device_tx_data+0x120>
200013a6:	c62a                	sw	a0,12(sp)
200013a8:	04810c93          	addi	s9,sp,72
200013ac:	00002517          	auipc	a0,0x2
200013b0:	2d850513          	addi	a0,a0,728 # 20003684 <spi_device_tx_data+0x148>
200013b4:	d62a                	sw	a0,44(sp)
200013b6:	00002b97          	auipc	s7,0x2
200013ba:	2e2b8b93          	addi	s7,s7,738 # 20003698 <exp_spi_device_rx_data>
200013be:	00002a17          	auipc	s4,0x2
200013c2:	35aa0a13          	addi	s4,s4,858 # 20003718 <exp_spi_device_rx_data+0x80>
200013c6:	e000fc17          	auipc	s8,0xe000f
200013ca:	086c0c13          	addi	s8,s8,134 # 1044c <execute_test.kLogFields.144>
200013ce:	e000f517          	auipc	a0,0xe000f
200013d2:	06a50513          	addi	a0,a0,106 # 10438 <execute_test.kLogFields.141>
200013d6:	dc2a                	sw	a0,56(sp)
200013d8:	e000f517          	auipc	a0,0xe000f
200013dc:	04c50513          	addi	a0,a0,76 # 10424 <execute_test.kLogFields.138>
200013e0:	d22a                	sw	a0,36(sp)
200013e2:	00002517          	auipc	a0,0x2
200013e6:	28e50513          	addi	a0,a0,654 # 20003670 <spi_device_tx_data+0x134>
200013ea:	c42a                	sw	a0,8(sp)
200013ec:	00002517          	auipc	a0,0x2
200013f0:	25c50513          	addi	a0,a0,604 # 20003648 <spi_device_tx_data+0x10c>
200013f4:	c82a                	sw	a0,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:312
  while (!read_rx_fifo_done || !exp_irqs_fired()) {
200013f6:	00197413          	andi	s0,s2,1
200013fa:	c00d                	beqz	s0,2000141c <test_main+0xec0>
exp_irqs_fired():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:284
  return fired_irqs[kDifSpiDeviceIrqRxAboveLevel] &&
200013fc:	001b4503          	lbu	a0,1(s6)
20001400:	cd11                	beqz	a0,2000141c <test_main+0xec0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:285
         fired_irqs[kDifSpiDeviceIrqTxBelowLevel] &&
20001402:	002b4503          	lbu	a0,2(s6)
20001406:	c919                	beqz	a0,2000141c <test_main+0xec0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:286
         fired_irqs[kDifSpiDeviceIrqRxOverflow] &&
20001408:	004b4503          	lbu	a0,4(s6)
2000140c:	c901                	beqz	a0,2000141c <test_main+0xec0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:287
         fired_irqs[kDifSpiDeviceIrqTxUnderflow] &&
2000140e:	005b4503          	lbu	a0,5(s6)
20001412:	c509                	beqz	a0,2000141c <test_main+0xec0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:288
         fired_irqs[kDifSpiDeviceIrqRxFull];
20001414:	000b4503          	lbu	a0,0(s6)
execute_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:312
  while (!read_rx_fifo_done || !exp_irqs_fired()) {
20001418:	2c051c63          	bnez	a0,200016f0 <test_main+0x1194>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:314
    if (fired_irqs[kDifSpiDeviceIrqTxBelowLevel] &&
2000141c:	002b4503          	lbu	a0,2(s6)
20001420:	c141                	beqz	a0,200014a0 <test_main+0xf44>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:315
        expected_irqs[kDifSpiDeviceIrqTxBelowLevel]) {
20001422:	0029c503          	lbu	a0,2(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:314
    if (fired_irqs[kDifSpiDeviceIrqTxBelowLevel] &&
20001426:	cd2d                	beqz	a0,200014a0 <test_main+0xf44>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:316
      CHECK(dif_spi_device_set_irq_levels(spi_device, SPI_DEVICE_DATASET_SIZE,
20001428:	effff517          	auipc	a0,0xeffff
2000142c:	bf050513          	addi	a0,a0,-1040 # 10000018 <spi_device>
20001430:	08000593          	li	a1,128
20001434:	4601                	li	a2,0
20001436:	466000ef          	jal	ra,2000189c <dif_spi_device_set_irq_levels>
2000143a:	c90d                	beqz	a0,2000146c <test_main+0xf10>
2000143c:	000d8a63          	beqz	s11,20001450 <test_main+0xef4>
20001440:	e000f517          	auipc	a0,0xe000f
20001444:	f8050513          	addi	a0,a0,-128 # 103c0 <execute_test.kLogFields.123>
20001448:	4581                	li	a1,0
2000144a:	329000ef          	jal	ra,20001f72 <base_log_internal_dv>
2000144e:	a821                	j	20001466 <test_main+0xf0a>
20001450:	00002597          	auipc	a1,0x2
20001454:	1bc58593          	addi	a1,a1,444 # 2000360c <spi_device_tx_data+0xd0>
20001458:	4651                	li	a2,20
2000145a:	8556                	mv	a0,s5
2000145c:	105010ef          	jal	ra,20002d60 <memcpy>
20001460:	8556                	mv	a0,s5
20001462:	267000ef          	jal	ra,20001ec8 <base_log_internal_core>
20001466:	8526                	mv	a0,s1
20001468:	454010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:318
      expected_irqs[kDifSpiDeviceIrqTxBelowLevel] = false;
2000146c:	00098123          	sb	zero,2(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:319
      expected_irqs[kDifSpiDeviceIrqRxAboveLevel] = true;
20001470:	4505                	li	a0,1
20001472:	00a980a3          	sb	a0,1(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:320
      LOG_INFO("SPI_DEVICE tx_below_level interrupt fired.");
20001476:	000d8a63          	beqz	s11,2000148a <test_main+0xf2e>
2000147a:	e000f517          	auipc	a0,0xe000f
2000147e:	f5a50513          	addi	a0,a0,-166 # 103d4 <execute_test.kLogFields.126>
20001482:	4581                	li	a1,0
20001484:	2ef000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001488:	a821                	j	200014a0 <test_main+0xf44>
2000148a:	00002597          	auipc	a1,0x2
2000148e:	19658593          	addi	a1,a1,406 # 20003620 <spi_device_tx_data+0xe4>
20001492:	4651                	li	a2,20
20001494:	8556                	mv	a0,s5
20001496:	0cb010ef          	jal	ra,20002d60 <memcpy>
2000149a:	8556                	mv	a0,s5
2000149c:	22d000ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:324
    if (fired_irqs[kDifSpiDeviceIrqRxAboveLevel] &&
200014a0:	001b4503          	lbu	a0,1(s6)
200014a4:	c91d                	beqz	a0,200014da <test_main+0xf7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:325
        expected_irqs[kDifSpiDeviceIrqRxAboveLevel]) {
200014a6:	0019c503          	lbu	a0,1(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:324
    if (fired_irqs[kDifSpiDeviceIrqRxAboveLevel] &&
200014aa:	c905                	beqz	a0,200014da <test_main+0xf7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:326
      expected_irqs[kDifSpiDeviceIrqRxAboveLevel] = false;
200014ac:	000980a3          	sb	zero,1(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:327
      LOG_INFO("SPI_DEVICE rx_above_level interrupt fired.");
200014b0:	000d8a63          	beqz	s11,200014c4 <test_main+0xf68>
200014b4:	e000f517          	auipc	a0,0xe000f
200014b8:	f3450513          	addi	a0,a0,-204 # 103e8 <execute_test.kLogFields.129>
200014bc:	4581                	li	a1,0
200014be:	2b5000ef          	jal	ra,20001f72 <base_log_internal_dv>
200014c2:	a821                	j	200014da <test_main+0xf7e>
200014c4:	00002597          	auipc	a1,0x2
200014c8:	17058593          	addi	a1,a1,368 # 20003634 <spi_device_tx_data+0xf8>
200014cc:	4651                	li	a2,20
200014ce:	8556                	mv	a0,s5
200014d0:	091010ef          	jal	ra,20002d60 <memcpy>
200014d4:	8556                	mv	a0,s5
200014d6:	1f3000ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:332
    if (fired_irqs[kDifSpiDeviceIrqRxAboveLevel] && !read_rx_fifo_done) {
200014da:	001b4503          	lbu	a0,1(s6)
200014de:	00153513          	seqz	a0,a0
200014e2:	00a96533          	or	a0,s2,a0
200014e6:	8905                	andi	a0,a0,1
200014e8:	c509                	beqz	a0,200014f2 <test_main+0xf96>
200014ea:	4901                	li	s2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:359
    if (read_rx_fifo_done && fired_irqs[kDifSpiDeviceIrqTxUnderflow]) {
200014ec:	10041d63          	bnez	s0,20001606 <test_main+0x10aa>
200014f0:	a2d9                	j	200016b6 <test_main+0x115a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:333
      size_t bytes_recved = 0;
200014f2:	d382                	sw	zero,228(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:335
      CHECK(dif_spi_device_recv(spi_device, spi_device_rx_data,
200014f4:	08000613          	li	a2,128
200014f8:	4516                	lw	a0,68(sp)
200014fa:	85d6                	mv	a1,s5
200014fc:	11d4                	addi	a3,sp,228
200014fe:	420000ef          	jal	ra,2000191e <dif_spi_device_recv>
20001502:	c515                	beqz	a0,2000152e <test_main+0xfd2>
20001504:	000d8a63          	beqz	s11,20001518 <test_main+0xfbc>
20001508:	e000f517          	auipc	a0,0xe000f
2000150c:	ef450513          	addi	a0,a0,-268 # 103fc <execute_test.kLogFields.132>
20001510:	4581                	li	a1,0
20001512:	261000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001516:	a809                	j	20001528 <test_main+0xfcc>
20001518:	4651                	li	a2,20
2000151a:	8566                	mv	a0,s9
2000151c:	45c2                	lw	a1,16(sp)
2000151e:	043010ef          	jal	ra,20002d60 <memcpy>
20001522:	8566                	mv	a0,s9
20001524:	1a5000ef          	jal	ra,20001ec8 <base_log_internal_core>
20001528:	8526                	mv	a0,s1
2000152a:	392010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:338
      if (bytes_recved == SPI_DEVICE_DATASET_SIZE) {
2000152e:	541e                	lw	s0,228(sp)
20001530:	01a41c63          	bne	s0,s10,20001548 <test_main+0xfec>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:339
        LOG_INFO("Received %0d bytes from SPI_DEVICE RX_FIFO.", bytes_recved);
20001534:	020d8463          	beqz	s11,2000155c <test_main+0x1000>
20001538:	4585                	li	a1,1
2000153a:	08000613          	li	a2,128
2000153e:	4405                	li	s0,1
20001540:	5522                	lw	a0,40(sp)
20001542:	231000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001546:	a099                	j	2000158c <test_main+0x1030>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:342
        LOG_ERROR(
20001548:	020d8663          	beqz	s11,20001574 <test_main+0x1018>
2000154c:	4589                	li	a1,2
2000154e:	08000693          	li	a3,128
20001552:	5512                	lw	a0,36(sp)
20001554:	8622                	mv	a2,s0
20001556:	21d000ef          	jal	ra,20001f72 <base_log_internal_dv>
2000155a:	a805                	j	2000158a <test_main+0x102e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:339
        LOG_INFO("Received %0d bytes from SPI_DEVICE RX_FIFO.", bytes_recved);
2000155c:	4651                	li	a2,20
2000155e:	8566                	mv	a0,s9
20001560:	45b2                	lw	a1,12(sp)
20001562:	7fe010ef          	jal	ra,20002d60 <memcpy>
20001566:	08000593          	li	a1,128
2000156a:	8566                	mv	a0,s9
2000156c:	15d000ef          	jal	ra,20001ec8 <base_log_internal_core>
20001570:	4405                	li	s0,1
20001572:	a829                	j	2000158c <test_main+0x1030>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:342
        LOG_ERROR(
20001574:	4651                	li	a2,20
20001576:	8566                	mv	a0,s9
20001578:	45a2                	lw	a1,8(sp)
2000157a:	7e6010ef          	jal	ra,20002d60 <memcpy>
2000157e:	08000613          	li	a2,128
20001582:	8566                	mv	a0,s9
20001584:	85a2                	mv	a1,s0
20001586:	143000ef          	jal	ra,20001ec8 <base_log_internal_core>
2000158a:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:347
      expected_irqs[kDifSpiDeviceIrqTxUnderflow] = true;
2000158c:	4505                	li	a0,1
2000158e:	00a982a3          	sb	a0,5(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:348
      fired_irqs[kDifSpiDeviceIrqRxAboveLevel] = false;
20001592:	000b00a3          	sb	zero,1(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:351
      LOG_INFO("Checking the received SPI_HOST RX_FIFO data for consistency.");
20001596:	000d8763          	beqz	s11,200015a4 <test_main+0x1048>
2000159a:	5562                	lw	a0,56(sp)
2000159c:	4581                	li	a1,0
2000159e:	1d5000ef          	jal	ra,20001f72 <base_log_internal_dv>
200015a2:	a809                	j	200015b4 <test_main+0x1058>
200015a4:	4651                	li	a2,20
200015a6:	8566                	mv	a0,s9
200015a8:	55b2                	lw	a1,44(sp)
200015aa:	7b6010ef          	jal	ra,20002d60 <memcpy>
200015ae:	8566                	mv	a0,s9
200015b0:	119000ef          	jal	ra,20001ec8 <base_log_internal_core>
200015b4:	4b01                	li	s6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:353
        CHECK(spi_device_rx_data[i] == exp_spi_device_rx_data[i],
200015b6:	016a8533          	add	a0,s5,s6
200015ba:	00054903          	lbu	s2,0(a0)
200015be:	017b0533          	add	a0,s6,s7
200015c2:	00054983          	lbu	s3,0(a0)
200015c6:	03390a63          	beq	s2,s3,200015fa <test_main+0x109e>
200015ca:	000d8a63          	beqz	s11,200015de <test_main+0x1082>
200015ce:	458d                	li	a1,3
200015d0:	8562                	mv	a0,s8
200015d2:	865a                	mv	a2,s6
200015d4:	86ca                	mv	a3,s2
200015d6:	874e                	mv	a4,s3
200015d8:	19b000ef          	jal	ra,20001f72 <base_log_internal_dv>
200015dc:	a821                	j	200015f4 <test_main+0x1098>
200015de:	4651                	li	a2,20
200015e0:	8566                	mv	a0,s9
200015e2:	85d2                	mv	a1,s4
200015e4:	77c010ef          	jal	ra,20002d60 <memcpy>
200015e8:	8566                	mv	a0,s9
200015ea:	85da                	mv	a1,s6
200015ec:	864a                	mv	a2,s2
200015ee:	86ce                	mv	a3,s3
200015f0:	0d9000ef          	jal	ra,20001ec8 <base_log_internal_core>
200015f4:	8526                	mv	a0,s1
200015f6:	2c6010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:352
      for (int i = 0; i < SPI_DEVICE_DATASET_SIZE; ++i) {
200015fa:	0b05                	addi	s6,s6,1
200015fc:	fbab1de3          	bne	s6,s10,200015b6 <test_main+0x105a>
20001600:	4986                	lw	s3,64(sp)
20001602:	5b72                	lw	s6,60(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:359
    if (read_rx_fifo_done && fired_irqs[kDifSpiDeviceIrqTxUnderflow]) {
20001604:	c01d                	beqz	s0,2000162a <test_main+0x10ce>
20001606:	005b4503          	lbu	a0,5(s6)
2000160a:	c115                	beqz	a0,2000162e <test_main+0x10d2>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:360
      expected_irqs[kDifSpiDeviceIrqRxAboveLevel] = true;
2000160c:	4505                	li	a0,1
2000160e:	00a980a3          	sb	a0,1(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:362
      CHECK(dif_spi_device_irq_set_enabled(
20001612:	4595                	li	a1,5
20001614:	4605                	li	a2,1
20001616:	4516                	lw	a0,68(sp)
20001618:	2431                	jal	20001824 <dif_spi_device_irq_set_enabled>
2000161a:	c121                	beqz	a0,2000165a <test_main+0x10fe>
2000161c:	020d8463          	beqz	s11,20001644 <test_main+0x10e8>
20001620:	4572                	lw	a0,28(sp)
20001622:	4581                	li	a1,0
20001624:	14f000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001628:	a035                	j	20001654 <test_main+0x10f8>
2000162a:	4901                	li	s2,0
2000162c:	a069                	j	200016b6 <test_main+0x115a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:370
    if (read_rx_fifo_done && fired_irqs[kDifSpiDeviceIrqRxAboveLevel]) {
2000162e:	001b4503          	lbu	a0,1(s6)
20001632:	c149                	beqz	a0,200016b4 <test_main+0x1158>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:371
      expected_irqs[kDifSpiDeviceIrqRxAboveLevel] = false;
20001634:	000980a3          	sb	zero,1(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:372
      expected_irqs[kDifSpiDeviceIrqRxFull] = true;
20001638:	4505                	li	a0,1
2000163a:	00a98023          	sb	a0,0(s3)
2000163e:	020d9e63          	bnez	s11,2000167a <test_main+0x111e>
20001642:	a08d                	j	200016a4 <test_main+0x1148>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:362
      CHECK(dif_spi_device_irq_set_enabled(
20001644:	4651                	li	a2,20
20001646:	8556                	mv	a0,s5
20001648:	4582                	lw	a1,0(sp)
2000164a:	716010ef          	jal	ra,20002d60 <memcpy>
2000164e:	8556                	mv	a0,s5
20001650:	079000ef          	jal	ra,20001ec8 <base_log_internal_core>
20001654:	8526                	mv	a0,s1
20001656:	266010ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:366
      expected_irqs[kDifSpiDeviceIrqTxUnderflow] = false;
2000165a:	000982a3          	sb	zero,5(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:367
      LOG_INFO("SPI_DEVICE Tx Below level interrupt fired.");
2000165e:	020d8363          	beqz	s11,20001684 <test_main+0x1128>
20001662:	5542                	lw	a0,48(sp)
20001664:	4581                	li	a1,0
20001666:	10d000ef          	jal	ra,20001f72 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:370
    if (read_rx_fifo_done && fired_irqs[kDifSpiDeviceIrqRxAboveLevel]) {
2000166a:	001b4503          	lbu	a0,1(s6)
2000166e:	c139                	beqz	a0,200016b4 <test_main+0x1158>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:371
      expected_irqs[kDifSpiDeviceIrqRxAboveLevel] = false;
20001670:	000980a3          	sb	zero,1(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:372
      expected_irqs[kDifSpiDeviceIrqRxFull] = true;
20001674:	4505                	li	a0,1
20001676:	00a98023          	sb	a0,0(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:373
      LOG_INFO("SPI_DEVICE RX Above level interrupt fired.");
2000167a:	5552                	lw	a0,52(sp)
2000167c:	4581                	li	a1,0
2000167e:	0f5000ef          	jal	ra,20001f72 <base_log_internal_dv>
20001682:	a80d                	j	200016b4 <test_main+0x1158>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:367
      LOG_INFO("SPI_DEVICE Tx Below level interrupt fired.");
20001684:	4651                	li	a2,20
20001686:	8556                	mv	a0,s5
20001688:	45d2                	lw	a1,20(sp)
2000168a:	6d6010ef          	jal	ra,20002d60 <memcpy>
2000168e:	8556                	mv	a0,s5
20001690:	039000ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:370
    if (read_rx_fifo_done && fired_irqs[kDifSpiDeviceIrqRxAboveLevel]) {
20001694:	001b4503          	lbu	a0,1(s6)
20001698:	cd11                	beqz	a0,200016b4 <test_main+0x1158>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:371
      expected_irqs[kDifSpiDeviceIrqRxAboveLevel] = false;
2000169a:	000980a3          	sb	zero,1(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:372
      expected_irqs[kDifSpiDeviceIrqRxFull] = true;
2000169e:	4505                	li	a0,1
200016a0:	00a98023          	sb	a0,0(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:373
      LOG_INFO("SPI_DEVICE RX Above level interrupt fired.");
200016a4:	4651                	li	a2,20
200016a6:	8556                	mv	a0,s5
200016a8:	45e2                	lw	a1,24(sp)
200016aa:	6b6010ef          	jal	ra,20002d60 <memcpy>
200016ae:	8556                	mv	a0,s5
200016b0:	019000ef          	jal	ra,20001ec8 <base_log_internal_core>
200016b4:	4905                	li	s2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:377
    if (fired_irqs[kDifSpiDeviceIrqRxFull] &&
200016b6:	000b4503          	lbu	a0,0(s6)
200016ba:	c905                	beqz	a0,200016ea <test_main+0x118e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:378
        !fired_irqs[kDifSpiDeviceIrqRxOverflow]) {
200016bc:	004b4503          	lbu	a0,4(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:377
    if (fired_irqs[kDifSpiDeviceIrqRxFull] &&
200016c0:	e50d                	bnez	a0,200016ea <test_main+0x118e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:379
      expected_irqs[kDifSpiDeviceIrqRxFull] = false;
200016c2:	00098023          	sb	zero,0(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:380
      expected_irqs[kDifSpiDeviceIrqRxOverflow] = true;
200016c6:	4505                	li	a0,1
200016c8:	00a98223          	sb	a0,4(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:381
      LOG_INFO("SPI_DEVICE RX_FIFO full interrupt fired.");
200016cc:	000d8763          	beqz	s11,200016da <test_main+0x117e>
200016d0:	5502                	lw	a0,32(sp)
200016d2:	4581                	li	a1,0
200016d4:	09f000ef          	jal	ra,20001f72 <base_log_internal_dv>
200016d8:	a809                	j	200016ea <test_main+0x118e>
200016da:	4651                	li	a2,20
200016dc:	8556                	mv	a0,s5
200016de:	4592                	lw	a1,4(sp)
200016e0:	680010ef          	jal	ra,20002d60 <memcpy>
200016e4:	8556                	mv	a0,s5
200016e6:	7e2000ef          	jal	ra,20001ec8 <base_log_internal_core>
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
200016ea:	10500073          	wfi
200016ee:	b321                	j	200013f6 <test_main+0xe9a>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/sim_dv/spi_tx_rx_test.c:407

  return execute_test(&spi_device);
200016f0:	4505                	li	a0,1
200016f2:	5dbe                	lw	s11,236(sp)
200016f4:	5d4e                	lw	s10,240(sp)
200016f6:	5cde                	lw	s9,244(sp)
200016f8:	5c6e                	lw	s8,248(sp)
200016fa:	5bfe                	lw	s7,252(sp)
200016fc:	10012b03          	lw	s6,256(sp)
20001700:	10412a83          	lw	s5,260(sp)
20001704:	10812a03          	lw	s4,264(sp)
20001708:	10c12983          	lw	s3,268(sp)
2000170c:	11012903          	lw	s2,272(sp)
20001710:	11412483          	lw	s1,276(sp)
20001714:	11812403          	lw	s0,280(sp)
20001718:	11c12083          	lw	ra,284(sp)
2000171c:	6115                	addi	sp,sp,288
2000171e:	8082                	ret

20001720 <dif_spi_device_init>:
dif_spi_device_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:15

const uint16_t kDifSpiDeviceBufferLen = SPI_DEVICE_BUFFER_SIZE_BYTES;

dif_spi_device_result_t dif_spi_device_init(dif_spi_device_params_t params,
                                            dif_spi_device_t *spi) {
  if (spi == NULL) {
20001720:	c591                	beqz	a1,2000172c <dif_spi_device_init+0xc>
20001722:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:20
    return kDifSpiDeviceBadArg;
  }

  // This ensures all other fields are zeroed.
  *spi = (dif_spi_device_t){.params = params};
20001724:	c188                	sw	a0,0(a1)
20001726:	0005a223          	sw	zero,4(a1)
2000172a:	a011                	j	2000172e <dif_spi_device_init+0xe>
2000172c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:23

  return kDifSpiDeviceOk;
}
2000172e:	8532                	mv	a0,a2
20001730:	8082                	ret

20001732 <dif_spi_device_configure>:
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:48

  return val;
}

dif_spi_device_result_t dif_spi_device_configure(
    dif_spi_device_t *spi, dif_spi_device_config_t config) {
20001732:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:49
  if (spi == NULL) {
20001734:	c935                	beqz	a0,200017a8 <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:59
  // function argument checks, to avoid a halfway-configured SPI.

  uint32_t device_config = build_control_word(config);

  uint16_t rx_fifo_start = 0x0;
  uint16_t rx_fifo_end = config.rx_fifo_len - 1;
20001736:	0125d683          	lhu	a3,18(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:61
  uint16_t tx_fifo_start = rx_fifo_end + 1;
  uint16_t tx_fifo_end = tx_fifo_start + config.tx_fifo_len - 1;
2000173a:	0145d703          	lhu	a4,20(a1)
2000173e:	fff68893          	addi	a7,a3,-1
20001742:	00e88833          	add	a6,a7,a4
20001746:	67bd                	lui	a5,0xf
20001748:	00f877b3          	and	a5,a6,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:62
  if (tx_fifo_end >= kDifSpiDeviceBufferLen) {
2000174c:	83b1                	srli	a5,a5,0xc
2000174e:	efa9                	bnez	a5,200017a8 <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
20001750:	41d0                	lw	a2,4(a1)
20001752:	419c                	lw	a5,0(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:36
                             config.data_phase == kDifSpiDeviceEdgePositive);
20001754:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
20001758:	00161293          	slli	t0,a2,0x1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
2000175c:	4590                	lw	a2,8(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:34
                           config.clock_polarity == kDifSpiDeviceEdgeNegative);
2000175e:	17fd                	addi	a5,a5,-1
20001760:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001764:	00f2e2b3          	or	t0,t0,a5
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
20001768:	167d                	addi	a2,a2,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
2000176a:	45dc                	lw	a5,12(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
2000176c:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001770:	060a                	slli	a2,a2,0x2
20001772:	00c2e633          	or	a2,t0,a2
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
20001776:	17fd                	addi	a5,a5,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
20001778:	0105c583          	lbu	a1,16(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
2000177c:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001780:	078e                	slli	a5,a5,0x3
20001782:	8e5d                	or	a2,a2,a5
20001784:	05a2                	slli	a1,a1,0x8
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:82
      tx_fifo_bounds, SPI_DEVICE_TXF_ADDR_LIMIT_FIELD, tx_fifo_end);

  spi->rx_fifo_len = config.rx_fifo_len;
  spi->tx_fifo_len = config.tx_fifo_len;

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_CFG_REG_OFFSET,
20001786:	411c                	lw	a5,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001788:	8dd1                	or	a1,a1,a2
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:79
  spi->rx_fifo_len = config.rx_fifo_len;
2000178a:	00d51223          	sh	a3,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:80
  spi->tx_fifo_len = config.tx_fifo_len;
2000178e:	00e51323          	sh	a4,6(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001792:	cb8c                	sw	a1,16(a5)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:84
                      device_config);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_RXF_ADDR_REG_OFFSET,
20001794:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001796:	01089613          	slli	a2,a7,0x10
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000179a:	d590                	sw	a2,40(a1)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:86
                      rx_fifo_bounds);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_TXF_ADDR_REG_OFFSET,
2000179c:	4108                	lw	a0,0(a0)
2000179e:	4601                	li	a2,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200017a0:	01081593          	slli	a1,a6,0x10
200017a4:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017a6:	d54c                	sw	a1,44(a0)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:90
                      tx_fifo_bounds);

  return kDifSpiDeviceOk;
}
200017a8:	8532                	mv	a0,a2
200017aa:	8082                	ret

200017ac <dif_spi_device_abort>:
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:93

dif_spi_device_result_t dif_spi_device_abort(const dif_spi_device_t *spi) {
  if (spi == NULL) {
200017ac:	cd01                	beqz	a0,200017c4 <dif_spi_device_abort+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:99
    return kDifSpiDeviceBadArg;
  }

  // Set the `abort` bit, and then spin until `abort_done` is asserted.
  uint32_t reg =
      mmio_region_read32(spi->params.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET);
200017ae:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017b0:	45d0                	lw	a2,12(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200017b2:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017b6:	c5d0                	sw	a2,12(a1)
200017b8:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017ba:	4d4c                	lw	a1,28(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200017bc:	89c1                	andi	a1,a1,16
200017be:	ddf5                	beqz	a1,200017ba <dif_spi_device_abort+0xe>
200017c0:	4501                	li	a0,0
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:111
        mmio_region_read32(spi->params.base_addr, SPI_DEVICE_STATUS_REG_OFFSET);
    if (bitfield_bit32_read(reg, SPI_DEVICE_STATUS_ABORT_DONE_BIT)) {
      return kDifSpiDeviceOk;
    }
  }
}
200017c2:	8082                	ret
200017c4:	4509                	li	a0,2
200017c6:	8082                	ret

200017c8 <dif_spi_device_irq_is_pending>:
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:141
  }
  return true;
}

dif_spi_device_result_t dif_spi_device_irq_is_pending(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq, bool *is_pending) {
200017c8:	86aa                	mv	a3,a0
200017ca:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:142
  if (spi == NULL || is_pending == NULL) {
200017cc:	ce89                	beqz	a3,200017e6 <dif_spi_device_irq_is_pending+0x1e>
200017ce:	ce01                	beqz	a2,200017e6 <dif_spi_device_irq_is_pending+0x1e>
200017d0:	4715                	li	a4,5
200017d2:	00b76a63          	bltu	a4,a1,200017e6 <dif_spi_device_irq_is_pending+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:151
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
200017d6:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200017d8:	4114                	lw	a3,0(a0)
200017da:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200017dc:	00b6d5b3          	srl	a1,a3,a1
200017e0:	8985                	andi	a1,a1,1
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:153
                                    SPI_DEVICE_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg, index);
200017e2:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:156

  return kDifSpiDeviceOk;
}
200017e6:	8082                	ret

200017e8 <dif_spi_device_irq_acknowledge>:
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:159

dif_spi_device_result_t dif_spi_device_irq_acknowledge(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq) {
200017e8:	862a                	mv	a2,a0
200017ea:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:160
  if (spi == NULL) {
200017ec:	ca11                	beqz	a2,20001800 <dif_spi_device_irq_acknowledge+0x18>
200017ee:	4695                	li	a3,5
200017f0:	00b6e863          	bltu	a3,a1,20001800 <dif_spi_device_irq_acknowledge+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:170
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_STATE_REG_OFFSET,
200017f4:	4210                	lw	a2,0(a2)
200017f6:	4501                	li	a0,0
200017f8:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200017fa:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017fe:	c20c                	sw	a1,0(a2)
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:174
                      reg);

  return kDifSpiDeviceOk;
}
20001800:	8082                	ret

20001802 <dif_spi_device_irq_get_enabled>:
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:178

dif_spi_device_result_t dif_spi_device_irq_get_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t *state) {
20001802:	86aa                	mv	a3,a0
20001804:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:179
  if (spi == NULL || state == NULL) {
20001806:	ce91                	beqz	a3,20001822 <dif_spi_device_irq_get_enabled+0x20>
20001808:	ce09                	beqz	a2,20001822 <dif_spi_device_irq_get_enabled+0x20>
2000180a:	4715                	li	a4,5
2000180c:	00b76b63          	bltu	a4,a1,20001822 <dif_spi_device_irq_get_enabled+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:188
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
20001810:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001812:	4154                	lw	a3,4(a0)
20001814:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001816:	00b6d5b3          	srl	a1,a3,a1
2000181a:	8985                	andi	a1,a1,1
2000181c:	0015b593          	seqz	a1,a1
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:190
                                    SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  *state = bitfield_bit32_read(reg, index) ? kDifSpiDeviceToggleEnabled
20001820:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:194
                                           : kDifSpiDeviceToggleDisabled;

  return kDifSpiDeviceOk;
}
20001822:	8082                	ret

20001824 <dif_spi_device_irq_set_enabled>:
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:198

dif_spi_device_result_t dif_spi_device_irq_set_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t state) {
20001824:	86aa                	mv	a3,a0
20001826:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:199
  if (spi == NULL) {
20001828:	c69d                	beqz	a3,20001856 <dif_spi_device_irq_set_enabled+0x32>
2000182a:	4715                	li	a4,5
2000182c:	02b76563          	bltu	a4,a1,20001856 <dif_spi_device_irq_set_enabled+0x32>
20001830:	4705                	li	a4,1
20001832:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:209
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  bool flag;
  switch (state) {
20001834:	c609                	beqz	a2,2000183e <dif_spi_device_irq_set_enabled+0x1a>
20001836:	4785                	li	a5,1
20001838:	00f61f63          	bne	a2,a5,20001856 <dif_spi_device_irq_set_enabled+0x32>
2000183c:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:220
      break;
    default:
      return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
2000183e:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001840:	4254                	lw	a3,4(a2)
20001842:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001844:	00b71733          	sll	a4,a4,a1
20001848:	fff74713          	not	a4,a4
2000184c:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000184e:	00b795b3          	sll	a1,a5,a1
20001852:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001854:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:227
  reg = bitfield_bit32_write(reg, index, flag);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      reg);

  return kDifSpiDeviceOk;
}
20001856:	8082                	ret

20001858 <dif_spi_device_irq_force>:
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:230

dif_spi_device_result_t dif_spi_device_irq_force(const dif_spi_device_t *spi,
                                                 dif_spi_device_irq_t irq) {
20001858:	862a                	mv	a2,a0
2000185a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:231
  if (spi == NULL) {
2000185c:	ca11                	beqz	a2,20001870 <dif_spi_device_irq_force+0x18>
2000185e:	4695                	li	a3,5
20001860:	00b6e863          	bltu	a3,a1,20001870 <dif_spi_device_irq_force+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:241
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_TEST_REG_OFFSET,
20001864:	4210                	lw	a2,0(a2)
20001866:	4501                	li	a0,0
20001868:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000186a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000186e:	c60c                	sw	a1,8(a2)
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:245
                      reg);

  return kDifSpiDeviceOk;
}
20001870:	8082                	ret

20001872 <dif_spi_device_irq_disable_all>:
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:249

dif_spi_device_result_t dif_spi_device_irq_disable_all(
    const dif_spi_device_t *spi, dif_spi_device_irq_snapshot_t *snapshot) {
  if (spi == NULL) {
20001872:	c911                	beqz	a0,20001886 <dif_spi_device_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:253
    return kDifSpiDeviceBadArg;
  }

  if (snapshot != NULL) {
20001874:	c581                	beqz	a1,2000187c <dif_spi_device_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
    *snapshot = mmio_region_read32(spi->params.base_addr,
20001876:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001878:	4250                	lw	a2,4(a2)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
2000187a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:258
                                   SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
2000187c:	410c                	lw	a1,0(a0)
2000187e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001880:	0005a223          	sw	zero,4(a1)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:262
                      0);

  return kDifSpiDeviceOk;
}
20001884:	8082                	ret
20001886:	4509                	li	a0,2
20001888:	8082                	ret

2000188a <dif_spi_device_irq_restore_all>:
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:266

dif_spi_device_result_t dif_spi_device_irq_restore_all(
    const dif_spi_device_t *spi,
    const dif_spi_device_irq_snapshot_t *snapshot) {
2000188a:	862a                	mv	a2,a0
2000188c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:267
  if (spi == NULL || snapshot == NULL) {
2000188e:	c611                	beqz	a2,2000189a <dif_spi_device_irq_restore_all+0x10>
20001890:	c589                	beqz	a1,2000189a <dif_spi_device_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:272
    return kDifSpiDeviceBadArg;
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001892:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:271
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
20001894:	4210                	lw	a2,0(a2)
20001896:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001898:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:275

  return kDifSpiDeviceOk;
}
2000189a:	8082                	ret

2000189c <dif_spi_device_set_irq_levels>:
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:279

dif_spi_device_result_t dif_spi_device_set_irq_levels(
    const dif_spi_device_t *spi, uint16_t rx_level, uint16_t tx_level) {
  if (spi == NULL) {
2000189c:	c519                	beqz	a0,200018aa <dif_spi_device_set_irq_levels+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:288
  uint32_t compressed_limit = 0;
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_RXLVL_FIELD, rx_level);
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_TXLVL_FIELD, tx_level);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_FIFO_LEVEL_REG_OFFSET,
2000189e:	4114                	lw	a3,0(a0)
200018a0:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200018a2:	0642                	slli	a2,a2,0x10
200018a4:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200018a6:	cacc                	sw	a1,20(a3)
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:292
                      compressed_limit);

  return kDifSpiDeviceOk;
}
200018a8:	8082                	ret
200018aa:	4509                	li	a0,2
200018ac:	8082                	ret

200018ae <dif_spi_device_rx_pending>:
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:473
  // In particular, when r == w, the fifo is full.
  return fifo_len - (ptrs.read_ptr.offset - ptrs.write_ptr.offset);
}

dif_spi_device_result_t dif_spi_device_rx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
200018ae:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:474
  if (spi == NULL || bytes_pending == NULL) {
200018b0:	c90d                	beqz	a0,200018e2 <dif_spi_device_rx_pending+0x34>
200018b2:	c985                	beqz	a1,200018e2 <dif_spi_device_rx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
200018b4:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018b6:	5214                	lw	a3,32(a2)
200018b8:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
200018ba:	0106d713          	srli	a4,a3,0x10
200018be:	6785                	lui	a5,0x1
200018c0:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
200018c2:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
200018c6:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
200018c8:	8eb9                	xor	a3,a3,a4
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kRxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
200018ca:	00451503          	lh	a0,4(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
200018ce:	06ce                	slli	a3,a3,0x13
200018d0:	86fd                	srai	a3,a3,0x1f
200018d2:	40f80733          	sub	a4,a6,a5
200018d6:	8d75                	and	a0,a0,a3
200018d8:	953a                	add	a0,a0,a4
200018da:	66c1                	lui	a3,0x10
200018dc:	16fd                	addi	a3,a3,-1
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
200018de:	8d75                	and	a0,a0,a3
200018e0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:482

  return kDifSpiDeviceOk;
}
200018e2:	8532                	mv	a0,a2
200018e4:	8082                	ret

200018e6 <dif_spi_device_tx_pending>:
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:485

dif_spi_device_result_t dif_spi_device_tx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
200018e6:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:486
  if (spi == NULL || bytes_pending == NULL) {
200018e8:	c90d                	beqz	a0,2000191a <dif_spi_device_tx_pending+0x34>
200018ea:	c985                	beqz	a1,2000191a <dif_spi_device_tx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
200018ec:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018ee:	5254                	lw	a3,36(a2)
200018f0:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
200018f2:	0106d713          	srli	a4,a3,0x10
200018f6:	6785                	lui	a5,0x1
200018f8:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
200018fa:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
200018fe:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001900:	8eb9                	xor	a3,a3,a4
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kTxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
20001902:	00651503          	lh	a0,6(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001906:	06ce                	slli	a3,a3,0x13
20001908:	86fd                	srai	a3,a3,0x1f
2000190a:	40f80733          	sub	a4,a6,a5
2000190e:	8d75                	and	a0,a0,a3
20001910:	953a                	add	a0,a0,a4
20001912:	66c1                	lui	a3,0x10
20001914:	16fd                	addi	a3,a3,-1
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
20001916:	8d75                	and	a0,a0,a3
20001918:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:494

  return kDifSpiDeviceOk;
}
2000191a:	8532                	mv	a0,a2
2000191c:	8082                	ret

2000191e <dif_spi_device_recv>:
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:569
  return total_bytes;
}

dif_spi_device_result_t dif_spi_device_recv(const dif_spi_device_t *spi,
                                            void *buf, size_t buf_len,
                                            size_t *bytes_received) {
2000191e:	1101                	addi	sp,sp,-32
20001920:	ce06                	sw	ra,28(sp)
20001922:	cc22                	sw	s0,24(sp)
20001924:	ca26                	sw	s1,20(sp)
20001926:	c84a                	sw	s2,16(sp)
20001928:	842a                	mv	s0,a0
2000192a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:570
  if (spi == NULL || buf == NULL) {
2000192c:	c43d                	beqz	s0,2000199a <dif_spi_device_recv+0x7c>
2000192e:	872e                	mv	a4,a1
20001930:	c5ad                	beqz	a1,2000199a <dif_spi_device_recv+0x7c>
20001932:	8936                	mv	s2,a3
20001934:	88b2                	mv	a7,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
20001936:	4008                	lw	a0,0(s0)
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:575
    return kDifSpiDeviceBadArg;
  }

  uint16_t fifo_base = 0;
  uint16_t fifo_len = spi->rx_fifo_len;
20001938:	00445683          	lhu	a3,4(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000193c:	5108                	lw	a0,32(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
2000193e:	01055593          	srli	a1,a0,0x10
20001942:	6605                	lui	a2,0x1
20001944:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
20001946:	8df1                	and	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
20001948:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
2000194a:	00c55793          	srli	a5,a0,0xc
2000194e:	64c1                	lui	s1,0x10
20001950:	8fe5                	and	a5,a5,s1
20001952:	8ddd                	or	a1,a1,a5
20001954:	0512                	slli	a0,a0,0x4
20001956:	8d65                	and	a0,a0,s1
20001958:	8d51                	or	a0,a0,a2
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:576
  fifo_ptrs_t fifo = decompress_ptrs(spi, kRxFifoParams);
2000195a:	c42e                	sw	a1,8(sp)
2000195c:	c62a                	sw	a0,12(sp)
2000195e:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:578

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
20001960:	4805                	li	a6,1
20001962:	8522                	mv	a0,s0
20001964:	4601                	li	a2,0
20001966:	87c6                	mv	a5,a7
20001968:	283d                	jal	200019a6 <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:580
                            buf_len, /*is_recv=*/true);
  if (bytes_received != NULL) {
2000196a:	00090463          	beqz	s2,20001972 <dif_spi_device_recv+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:581
    *bytes_received = bytes;
2000196e:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:583
  }
  if (bytes > 0) {
20001972:	c11d                	beqz	a0,20001998 <dif_spi_device_recv+0x7a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:585
    // Commit the new RX FIFO pointers.
    compress_ptrs(spi, kRxFifoParams, fifo);
20001974:	4522                	lw	a0,8(sp)
20001976:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
20001978:	00455613          	srli	a2,a0,0x4
2000197c:	6685                	lui	a3,0x1
2000197e:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
20001980:	0045d713          	srli	a4,a1,0x4
20001984:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
20001986:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001988:	0542                	slli	a0,a0,0x10
2000198a:	6641                	lui	a2,0x10
2000198c:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
2000198e:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
20001990:	8df1                	and	a1,a1,a2
20001992:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001994:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001996:	d308                	sw	a0,32(a4)
20001998:	4501                	li	a0,0
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:588
  }
  return kDifSpiDeviceOk;
}
2000199a:	4942                	lw	s2,16(sp)
2000199c:	44d2                	lw	s1,20(sp)
2000199e:	4462                	lw	s0,24(sp)
200019a0:	40f2                	lw	ra,28(sp)
200019a2:	6105                	addi	sp,sp,32
200019a4:	8082                	ret

200019a6 <spi_memcpy>:
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:514
                         uint8_t *byte_buf, size_t buf_len, bool is_recv) {
200019a6:	7139                	addi	sp,sp,-64
200019a8:	de06                	sw	ra,60(sp)
200019aa:	dc22                	sw	s0,56(sp)
200019ac:	da26                	sw	s1,52(sp)
200019ae:	d84a                	sw	s2,48(sp)
200019b0:	d64e                	sw	s3,44(sp)
200019b2:	d452                	sw	s4,40(sp)
200019b4:	d256                	sw	s5,36(sp)
200019b6:	d05a                	sw	s6,32(sp)
200019b8:	ce5e                	sw	s7,28(sp)
200019ba:	cc62                	sw	s8,24(sp)
200019bc:	ca66                	sw	s9,20(sp)
200019be:	c86a                	sw	s10,16(sp)
200019c0:	c66e                	sw	s11,12(sp)
200019c2:	89c2                	mv	s3,a6
200019c4:	893e                	mv	s2,a5
200019c6:	8d3a                	mv	s10,a4
200019c8:	8a36                	mv	s4,a3
200019ca:	8b2e                	mv	s6,a1
200019cc:	8aaa                	mv	s5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:515
  uint16_t bytes_left = fifo_bytes_in_use(*fifo, fifo_len);
200019ce:	0025d503          	lhu	a0,2(a1)
200019d2:	0005d583          	lhu	a1,0(a1)
200019d6:	006b5683          	lhu	a3,6(s6)
200019da:	004b5703          	lhu	a4,4(s6)
200019de:	0542                	slli	a0,a0,0x10
200019e0:	8dc9                	or	a1,a1,a0
200019e2:	06c2                	slli	a3,a3,0x10
200019e4:	8f55                	or	a4,a4,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
200019e6:	8d35                	xor	a0,a0,a3
200019e8:	053e                	slli	a0,a0,0xf
200019ea:	857d                	srai	a0,a0,0x1f
200019ec:	8d99                	sub	a1,a1,a4
200019ee:	01457533          	and	a0,a0,s4
200019f2:	952e                	add	a0,a0,a1
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:517
  if (!is_recv) {
200019f4:	00081463          	bnez	a6,200019fc <spi_memcpy+0x56>
200019f8:	40aa0533          	sub	a0,s4,a0
200019fc:	65c1                	lui	a1,0x10
200019fe:	15fd                	addi	a1,a1,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:521
  if (bytes_left > buf_len) {
20001a00:	00b576b3          	and	a3,a0,a1
20001a04:	00d96363          	bltu	s2,a3,20001a0a <spi_memcpy+0x64>
20001a08:	892a                	mv	s2,a0
20001a0a:	00b97533          	and	a0,s2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
20001a0e:	c935                	beqz	a0,20001a82 <spi_memcpy+0xdc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:533
  if (is_recv) {
20001a10:	00098363          	beqz	s3,20001a16 <spi_memcpy+0x70>
20001a14:	0b11                	addi	s6,s6,4
20001a16:	6585                	lui	a1,0x1
20001a18:	00b60bb3          	add	s7,a2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
20001a1c:	000b5503          	lhu	a0,0(s6)
20001a20:	6641                	lui	a2,0x10
20001a22:	fff60c13          	addi	s8,a2,-1 # ffff <_stack_size+0xdfff>
20001a26:	fff58c93          	addi	s9,a1,-1 # fff <__DYNAMIC+0xfff>
20001a2a:	844a                	mv	s0,s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
20001a2c:	01847633          	and	a2,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
20001a30:	018575b3          	and	a1,a0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:545
    const uint32_t bytes_until_wrap = fifo_len - ptr->offset;
20001a34:	40ba04b3          	sub	s1,s4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:547
    if (bytes_to_copy > bytes_until_wrap) {
20001a38:	00c4e363          	bltu	s1,a2,20001a3e <spi_memcpy+0x98>
20001a3c:	84a2                	mv	s1,s0
20001a3e:	000aa503          	lw	a0,0(s5)
20001a42:	95de                	add	a1,a1,s7
20001a44:	0184fdb3          	and	s11,s1,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
20001a48:	866a                	mv	a2,s10
20001a4a:	86ee                	mv	a3,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:550
    if (is_recv) {
20001a4c:	00098463          	beqz	s3,20001a54 <spi_memcpy+0xae>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:552
      mmio_region_memcpy_from_mmio32(spi->params.base_addr, mmio_offset,
20001a50:	20e5                	jal	20001b38 <mmio_region_memcpy_from_mmio32>
20001a52:	a011                	j	20001a56 <spi_memcpy+0xb0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
20001a54:	2a5d                	jal	20001c0a <mmio_region_memcpy_to_mmio32>
fifo_ptr_increment():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:355
  uint32_t inc_with_overflow = ptr->offset + increment;
20001a56:	000b5503          	lhu	a0,0(s6)
20001a5a:	956e                	add	a0,a0,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:357
  if (inc_with_overflow >= fifo_len) {
20001a5c:	01456a63          	bltu	a0,s4,20001a70 <spi_memcpy+0xca>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
20001a60:	002b0583          	lb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:358
    inc_with_overflow -= fifo_len;
20001a64:	41450533          	sub	a0,a0,s4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
20001a68:	0015c593          	xori	a1,a1,1
20001a6c:	00bb0123          	sb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:362
  ptr->offset = inc_with_overflow & kFifoOffsetMask;
20001a70:	01957533          	and	a0,a0,s9
20001a74:	00ab1023          	sh	a0,0(s6)
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:561
    bytes_left -= bytes_to_copy;
20001a78:	8c05                	sub	s0,s0,s1
20001a7a:	018475b3          	and	a1,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:560
    byte_buf += bytes_to_copy;
20001a7e:	9d6e                	add	s10,s10,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
20001a80:	f5d5                	bnez	a1,20001a2c <spi_memcpy+0x86>
20001a82:	6541                	lui	a0,0x10
20001a84:	157d                	addi	a0,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
20001a86:	00a97533          	and	a0,s2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:565
}
20001a8a:	4db2                	lw	s11,12(sp)
20001a8c:	4d42                	lw	s10,16(sp)
20001a8e:	4cd2                	lw	s9,20(sp)
20001a90:	4c62                	lw	s8,24(sp)
20001a92:	4bf2                	lw	s7,28(sp)
20001a94:	5b02                	lw	s6,32(sp)
20001a96:	5a92                	lw	s5,36(sp)
20001a98:	5a22                	lw	s4,40(sp)
20001a9a:	59b2                	lw	s3,44(sp)
20001a9c:	5942                	lw	s2,48(sp)
20001a9e:	54d2                	lw	s1,52(sp)
20001aa0:	5462                	lw	s0,56(sp)
20001aa2:	50f2                	lw	ra,60(sp)
20001aa4:	6121                	addi	sp,sp,64
20001aa6:	8082                	ret

20001aa8 <dif_spi_device_send>:
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:592

dif_spi_device_result_t dif_spi_device_send(const dif_spi_device_t *spi,
                                            const void *buf, size_t buf_len,
                                            size_t *bytes_sent) {
20001aa8:	1101                	addi	sp,sp,-32
20001aaa:	ce06                	sw	ra,28(sp)
20001aac:	cc22                	sw	s0,24(sp)
20001aae:	ca26                	sw	s1,20(sp)
20001ab0:	c84a                	sw	s2,16(sp)
20001ab2:	842a                	mv	s0,a0
20001ab4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:593
  if (spi == NULL || buf == NULL) {
20001ab6:	c835                	beqz	s0,20001b2a <dif_spi_device_send+0x82>
20001ab8:	872e                	mv	a4,a1
20001aba:	c9a5                	beqz	a1,20001b2a <dif_spi_device_send+0x82>
20001abc:	8936                	mv	s2,a3
20001abe:	8832                	mv	a6,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
20001ac0:	4008                	lw	a0,0(s0)
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:598
    return kDifSpiDeviceBadArg;
  }

  // Start of the TX FIFO is the end of the RX FIFO.
  uint16_t fifo_base = spi->rx_fifo_len;
20001ac2:	00445603          	lhu	a2,4(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:599
  uint16_t fifo_len = spi->tx_fifo_len;
20001ac6:	00645683          	lhu	a3,6(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001aca:	5148                	lw	a0,36(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
20001acc:	01055593          	srli	a1,a0,0x10
20001ad0:	6785                	lui	a5,0x1
20001ad2:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
20001ad4:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
20001ad6:	8fe9                	and	a5,a5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
20001ad8:	00c55493          	srli	s1,a0,0xc
20001adc:	68c1                	lui	a7,0x10
20001ade:	0114f4b3          	and	s1,s1,a7
20001ae2:	8dc5                	or	a1,a1,s1
20001ae4:	0512                	slli	a0,a0,0x4
20001ae6:	01157533          	and	a0,a0,a7
20001aea:	8d5d                	or	a0,a0,a5
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:600
  fifo_ptrs_t fifo = decompress_ptrs(spi, kTxFifoParams);
20001aec:	c42e                	sw	a1,8(sp)
20001aee:	c62a                	sw	a0,12(sp)
20001af0:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:602

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
20001af2:	8522                	mv	a0,s0
20001af4:	87c2                	mv	a5,a6
20001af6:	4801                	li	a6,0
20001af8:	357d                	jal	200019a6 <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:604
                            buf_len, /*is_recv=*/false);
  if (bytes_sent != NULL) {
20001afa:	00090463          	beqz	s2,20001b02 <dif_spi_device_send+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:605
    *bytes_sent = bytes;
20001afe:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:607
  }
  if (bytes > 0) {
20001b02:	c11d                	beqz	a0,20001b28 <dif_spi_device_send+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:609
    // Commit the new TX FIFO pointers.
    compress_ptrs(spi, kTxFifoParams, fifo);
20001b04:	4522                	lw	a0,8(sp)
20001b06:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
20001b08:	00455613          	srli	a2,a0,0x4
20001b0c:	6685                	lui	a3,0x1
20001b0e:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
20001b10:	0045d713          	srli	a4,a1,0x4
20001b14:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
20001b16:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001b18:	0542                	slli	a0,a0,0x10
20001b1a:	6641                	lui	a2,0x10
20001b1c:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
20001b1e:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
20001b20:	8df1                	and	a1,a1,a2
20001b22:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001b24:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b26:	d348                	sw	a0,36(a4)
20001b28:	4501                	li	a0,0
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:612
  }
  return kDifSpiDeviceOk;
}
20001b2a:	4942                	lw	s2,16(sp)
20001b2c:	44d2                	lw	s1,20(sp)
20001b2e:	4462                	lw	s0,24(sp)
20001b30:	40f2                	lw	ra,28(sp)
20001b32:	6105                	addi	sp,sp,32
20001b34:	8082                	ret
	...

20001b38 <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:112
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
20001b38:	4705                	li	a4,1
20001b3a:	a009                	j	20001b3c <mmio_region_memcpy32>

20001b3c <mmio_region_memcpy32>:
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:35
                                 size_t len, bool from_mmio) {
20001b3c:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:36
  if (len == 0) {
20001b3e:	d606                	sw	ra,44(sp)
20001b40:	d422                	sw	s0,40(sp)
20001b42:	d226                	sw	s1,36(sp)
20001b44:	d04a                	sw	s2,32(sp)
20001b46:	ce4e                	sw	s3,28(sp)
20001b48:	cc52                	sw	s4,24(sp)
20001b4a:	ca56                	sw	s5,20(sp)
20001b4c:	c85a                	sw	s6,16(sp)
20001b4e:	c6c5                	beqz	a3,20001bf6 <mmio_region_memcpy32+0xba>
20001b50:	893a                	mv	s2,a4
20001b52:	8436                	mv	s0,a3
20001b54:	89b2                	mv	s3,a2
20001b56:	8b2e                	mv	s6,a1
20001b58:	8a2a                	mv	s4,a0
misalignment32_of():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:16
  return addr % alignof(uint32_t);
20001b5a:	0035f513          	andi	a0,a1,3
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:43
  if (misalignment != 0) {
20001b5e:	c139                	beqz	a0,20001ba4 <mmio_region_memcpy32+0x68>
20001b60:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:46
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
20001b62:	8d89                	sub	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:50
    if (realignment > len) {
20001b64:	84a2                	mv	s1,s0
20001b66:	00b46363          	bltu	s0,a1,20001b6c <mmio_region_memcpy32+0x30>
20001b6a:	84ae                	mv	s1,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b6c:	ffcb7593          	andi	a1,s6,-4
20001b70:	00ba0ab3          	add	s5,s4,a1
20001b74:	000aa583          	lw	a1,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:57
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
20001b78:	c62e                	sw	a1,12(sp)
20001b7a:	006c                	addi	a1,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:61
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
20001b7c:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:62
    if (from_mmio) {
20001b7e:	00090763          	beqz	s2,20001b8c <mmio_region_memcpy32+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:63
      memcpy(buf, current_byte, realignment);
20001b82:	854e                	mv	a0,s3
20001b84:	8626                	mv	a2,s1
20001b86:	1da010ef          	jal	ra,20002d60 <memcpy>
20001b8a:	a809                	j	20001b9c <mmio_region_memcpy32+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:66
      memcpy(current_byte, buf, realignment);
20001b8c:	852e                	mv	a0,a1
20001b8e:	85ce                	mv	a1,s3
20001b90:	8626                	mv	a2,s1
20001b92:	1ce010ef          	jal	ra,20002d60 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:67
      mmio_region_write32(base, current_word_offset, current_word);
20001b96:	4532                	lw	a0,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b98:	00aaa023          	sw	a0,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:72
    len -= realignment;
20001b9c:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20001b9e:	cc21                	beqz	s0,20001bf6 <mmio_region_memcpy32+0xba>
20001ba0:	9b26                	add	s6,s6,s1
20001ba2:	99a6                	add	s3,s3,s1
20001ba4:	00810a93          	addi	s5,sp,8
20001ba8:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:81
    if (bytes_to_copy > len) {
20001baa:	84a2                	mv	s1,s0
20001bac:	00a46363          	bltu	s0,a0,20001bb2 <mmio_region_memcpy32+0x76>
20001bb0:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:86
    uint32_t current_word = 0;
20001bb2:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:87
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
20001bb4:	00a46c63          	bltu	s0,a0,20001bcc <mmio_region_memcpy32+0x90>
20001bb8:	00091a63          	bnez	s2,20001bcc <mmio_region_memcpy32+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20001bbc:	00090f63          	beqz	s2,20001bda <mmio_region_memcpy32+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:97
      memcpy(buf, &current_word, bytes_to_copy);
20001bc0:	854e                	mv	a0,s3
20001bc2:	85d6                	mv	a1,s5
20001bc4:	8626                	mv	a2,s1
20001bc6:	19a010ef          	jal	ra,20002d60 <memcpy>
20001bca:	a015                	j	20001bee <mmio_region_memcpy32+0xb2>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001bcc:	ffcb7513          	andi	a0,s6,-4
20001bd0:	9552                	add	a0,a0,s4
20001bd2:	4108                	lw	a0,0(a0)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:92
      current_word = mmio_region_read32(base, offset);
20001bd4:	c42a                	sw	a0,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20001bd6:	fe0915e3          	bnez	s2,20001bc0 <mmio_region_memcpy32+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:100
      memcpy(&current_word, buf, bytes_to_copy);
20001bda:	8556                	mv	a0,s5
20001bdc:	85ce                	mv	a1,s3
20001bde:	8626                	mv	a2,s1
20001be0:	180010ef          	jal	ra,20002d60 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:101
      mmio_region_write32(base, offset, current_word);
20001be4:	4522                	lw	a0,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001be6:	ffcb7593          	andi	a1,s6,-4
20001bea:	95d2                	add	a1,a1,s4
20001bec:	c188                	sw	a0,0(a1)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:104
    offset += bytes_to_copy;
20001bee:	9b26                	add	s6,s6,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:106
    len -= bytes_to_copy;
20001bf0:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:105
    buf += bytes_to_copy;
20001bf2:	99a6                	add	s3,s3,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20001bf4:	f855                	bnez	s0,20001ba8 <mmio_region_memcpy32+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:108
}
20001bf6:	4b42                	lw	s6,16(sp)
20001bf8:	4ad2                	lw	s5,20(sp)
20001bfa:	4a62                	lw	s4,24(sp)
20001bfc:	49f2                	lw	s3,28(sp)
20001bfe:	5902                	lw	s2,32(sp)
20001c00:	5492                	lw	s1,36(sp)
20001c02:	5422                	lw	s0,40(sp)
20001c04:	50b2                	lw	ra,44(sp)
20001c06:	6145                	addi	sp,sp,48
20001c08:	8082                	ret

20001c0a <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:120
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
20001c0a:	4701                	li	a4,0
20001c0c:	bf05                	j	20001b3c <mmio_region_memcpy32>

20001c0e <mmio_region_read8>:
mmio_region_read8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:85
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
20001c0e:	952e                	add	a0,a0,a1
20001c10:	00054503          	lbu	a0,0(a0) # 10000 <_dv_log_offset>
20001c14:	8082                	ret

20001c16 <mmio_region_read32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c16:	99f1                	andi	a1,a1,-4
20001c18:	952e                	add	a0,a0,a1
20001c1a:	4108                	lw	a0,0(a0)
20001c1c:	8082                	ret

20001c1e <mmio_region_write8>:
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
20001c1e:	952e                	add	a0,a0,a1
20001c20:	00c50023          	sb	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:118
}
20001c24:	8082                	ret

20001c26 <mmio_region_write32>:
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c26:	99f1                	andi	a1,a1,-4
20001c28:	952e                	add	a0,a0,a1
20001c2a:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:134
}
20001c2c:	8082                	ret

20001c2e <mmio_region_read_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c2e:	99f1                	andi	a1,a1,-4
20001c30:	952e                	add	a0,a0,a1
20001c32:	4108                	lw	a0,0(a0)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001c34:	00d55533          	srl	a0,a0,a3
20001c38:	8d71                	and	a0,a0,a2
mmio_region_read_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:176
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
20001c3a:	8082                	ret

20001c3c <mmio_region_get_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c3c:	99f1                	andi	a1,a1,-4
20001c3e:	952e                	add	a0,a0,a1
20001c40:	4108                	lw	a0,0(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001c42:	00c55533          	srl	a0,a0,a2
20001c46:	8905                	andi	a0,a0,1
mmio_region_get_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:197
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
20001c48:	8082                	ret

20001c4a <mmio_region_nonatomic_clear_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c4a:	99f1                	andi	a1,a1,-4
20001c4c:	952e                	add	a0,a0,a1
20001c4e:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001c50:	00d61633          	sll	a2,a2,a3
20001c54:	fff64613          	not	a2,a2
20001c58:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c5a:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:220
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
20001c5c:	8082                	ret

20001c5e <mmio_region_nonatomic_set_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c5e:	99f1                	andi	a1,a1,-4
20001c60:	952e                	add	a0,a0,a1
20001c62:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001c64:	00d61633          	sll	a2,a2,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001c68:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c6a:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:242
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20001c6c:	8082                	ret

20001c6e <mmio_region_write_only_set_mask32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001c6e:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c72:	99f1                	andi	a1,a1,-4
20001c74:	952e                	add	a0,a0,a1
20001c76:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:264
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20001c78:	8082                	ret

20001c7a <mmio_region_nonatomic_set_field32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c7a:	99f1                	andi	a1,a1,-4
20001c7c:	952e                	add	a0,a0,a1
20001c7e:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001c80:	00d617b3          	sll	a5,a2,a3
20001c84:	fff7c793          	not	a5,a5
20001c88:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001c8a:	8e79                	and	a2,a2,a4
20001c8c:	00d61633          	sll	a2,a2,a3
20001c90:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c92:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:288
                                              bitfield_field32_t field,
                                              uint32_t value) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
20001c94:	8082                	ret

20001c96 <mmio_region_write_only_set_field32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001c96:	8e79                	and	a2,a2,a4
20001c98:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c9c:	99f1                	andi	a1,a1,-4
20001c9e:	952e                	add	a0,a0,a1
20001ca0:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:309
                                               bitfield_field32_t field,
                                               uint32_t value) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
20001ca2:	8082                	ret

20001ca4 <mmio_region_nonatomic_clear_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001ca4:	99f1                	andi	a1,a1,-4
20001ca6:	952e                	add	a0,a0,a1
20001ca8:	410c                	lw	a1,0(a0)
20001caa:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001cac:	00c69633          	sll	a2,a3,a2
20001cb0:	fff64613          	not	a2,a2
20001cb4:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001cb6:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:328
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
20001cb8:	8082                	ret

20001cba <mmio_region_nonatomic_set_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001cba:	99f1                	andi	a1,a1,-4
20001cbc:	952e                	add	a0,a0,a1
20001cbe:	410c                	lw	a1,0(a0)
20001cc0:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001cc2:	00c69633          	sll	a2,a3,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001cc6:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001cc8:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:346
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20001cca:	8082                	ret

20001ccc <mmio_region_write_only_set_bit32>:
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:363
 * @param bit_index the bit to set.
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_bit32(mmio_region_t base,
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
20001ccc:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001cce:	00c69633          	sll	a2,a3,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001cd2:	99f1                	andi	a1,a1,-4
20001cd4:	952e                	add	a0,a0,a1
20001cd6:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:367
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20001cd8:	8082                	ret
	...

20001cdc <dif_plic_init>:
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:170
    mmio_region_write32(plic->params.base_addr, offset, 0);
  }
}

dif_plic_result_t dif_plic_init(dif_plic_params_t params, dif_plic_t *plic) {
  if (plic == NULL) {
20001cdc:	cda1                	beqz	a1,20001d34 <dif_plic_init+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:174
    return kDifPlicBadArg;
  }

  plic->params = params;
20001cde:	c188                	sw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001ce0:	00052c23          	sw	zero,24(a0)
20001ce4:	4571                	li	a0,28
20001ce6:	03000613          	li	a2,48
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:140
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001cea:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001cec:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
  for (int i = 0; i < RV_PLIC_LE_MULTIREG_COUNT; ++i) {
20001cee:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001cf0:	0006a023          	sw	zero,0(a3) # 1000 <__DYNAMIC+0x1000>
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
20001cf4:	fec51be3          	bne	a0,a2,20001cea <dif_plic_init+0xe>
20001cf8:	03000513          	li	a0,48
20001cfc:	30000613          	li	a2,768
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:146
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001d00:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d02:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
  for (int i = 0; i < RV_PLIC_PARAM_NUM_SRC; ++i) {
20001d04:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d06:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
20001d0a:	fec51be3          	bne	a0,a2,20001d00 <dif_plic_init+0x24>
20001d0e:	30000513          	li	a0,768
20001d12:	31800613          	li	a2,792
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:156
      mmio_region_write32(plic->params.base_addr, multireg_offset, 0);
20001d16:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d18:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
    for (int i = 0; i < RV_PLIC_IE0_MULTIREG_COUNT; ++i) {
20001d1a:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d1c:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
20001d20:	fec51be3          	bne	a0,a2,20001d16 <dif_plic_init+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:161
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001d24:	4188                	lw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d26:	30052c23          	sw	zero,792(a0)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:165
    mmio_region_write32(plic->params.base_addr, offset, 0);
20001d2a:	418c                	lw	a1,0(a1)
20001d2c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d2e:	3205a023          	sw	zero,800(a1)
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:180

  // TODO: Move this out into its own function.
  plic_reset(plic);

  return kDifPlicOk;
}
20001d32:	8082                	ret
20001d34:	4509                	li	a0,2
20001d36:	8082                	ret

20001d38 <dif_plic_irq_get_enabled>:
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:185

dif_plic_result_t dif_plic_irq_get_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t *state) {
20001d38:	872a                	mv	a4,a0
20001d3a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:186
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001d3c:	c70d                	beqz	a4,20001d66 <dif_plic_irq_get_enabled+0x2e>
20001d3e:	0b300793          	li	a5,179
20001d42:	02b7e263          	bltu	a5,a1,20001d66 <dif_plic_irq_get_enabled+0x2e>
20001d46:	e205                	bnez	a2,20001d66 <dif_plic_irq_get_enabled+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:193
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001d48:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001d4a:	0035d613          	srli	a2,a1,0x3
20001d4e:	3fc67613          	andi	a2,a2,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
20001d52:	9532                	add	a0,a0,a2
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001d54:	30052603          	lw	a2,768(a0)
20001d58:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001d5a:	00b655b3          	srl	a1,a2,a1
20001d5e:	8985                	andi	a1,a1,1
20001d60:	0015b593          	seqz	a1,a1
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:195
  bool is_enabled = bitfield_bit32_read(reg, reg_info.bit_index);
  *state = is_enabled ? kDifPlicToggleEnabled : kDifPlicToggleDisabled;
20001d64:	c28c                	sw	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:198

  return kDifPlicOk;
}
20001d66:	8082                	ret

20001d68 <dif_plic_irq_set_enabled>:
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:203

dif_plic_result_t dif_plic_irq_set_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t state) {
20001d68:	872a                	mv	a4,a0
20001d6a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:204
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001d6c:	c321                	beqz	a4,20001dac <dif_plic_irq_set_enabled+0x44>
20001d6e:	0b300793          	li	a5,179
20001d72:	02b7ed63          	bltu	a5,a1,20001dac <dif_plic_irq_set_enabled+0x44>
20001d76:	ea1d                	bnez	a2,20001dac <dif_plic_irq_set_enabled+0x44>
20001d78:	4605                	li	a2,1
20001d7a:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:210
      target >= RV_PLIC_PARAM_NUM_TARGET) {
    return kDifPlicBadArg;
  }

  bool flag;
  switch (state) {
20001d7c:	c689                	beqz	a3,20001d86 <dif_plic_irq_set_enabled+0x1e>
20001d7e:	4785                	li	a5,1
20001d80:	02f69663          	bne	a3,a5,20001dac <dif_plic_irq_set_enabled+0x44>
20001d84:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:223
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001d86:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001d88:	0035d693          	srli	a3,a1,0x3
20001d8c:	3fc6f693          	andi	a3,a3,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
20001d90:	96aa                	add	a3,a3,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001d92:	3006a703          	lw	a4,768(a3)
20001d96:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001d98:	00b61633          	sll	a2,a2,a1
20001d9c:	fff64613          	not	a2,a2
20001da0:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001da2:	00b795b3          	sll	a1,a5,a1
20001da6:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001da8:	30b6a023          	sw	a1,768(a3)
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:228
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
20001dac:	8082                	ret

20001dae <dif_plic_irq_set_trigger>:
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:232

dif_plic_result_t dif_plic_irq_set_trigger(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_irq_trigger_t trigger) {
20001dae:	86aa                	mv	a3,a0
20001db0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:233
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC) {
20001db2:	ce8d                	beqz	a3,20001dec <dif_plic_irq_set_trigger+0x3e>
20001db4:	0b300713          	li	a4,179
20001db8:	02b76a63          	bltu	a4,a1,20001dec <dif_plic_irq_set_trigger+0x3e>
20001dbc:	4705                	li	a4,1
20001dbe:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:238
    return kDifPlicBadArg;
  }

  bool flag;
  switch (trigger) {
20001dc0:	c609                	beqz	a2,20001dca <dif_plic_irq_set_trigger+0x1c>
20001dc2:	4785                	li	a5,1
20001dc4:	02f61463          	bne	a2,a5,20001dec <dif_plic_irq_set_trigger+0x3e>
20001dc8:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:251
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_trigger_type_reg_info(irq);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001dca:	4288                	lw	a0,0(a3)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001dcc:	0035d613          	srli	a2,a1,0x3
20001dd0:	3fc67613          	andi	a2,a2,1020
plic_irq_trigger_type_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:101
      .offset = RV_PLIC_LE_0_REG_OFFSET + offset,
20001dd4:	962a                	add	a2,a2,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001dd6:	4e14                	lw	a3,24(a2)
20001dd8:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001dda:	00b71733          	sll	a4,a4,a1
20001dde:	fff74713          	not	a4,a4
20001de2:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001de4:	00b795b3          	sll	a1,a5,a1
20001de8:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001dea:	ce0c                	sw	a1,24(a2)
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:256
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
20001dec:	8082                	ret

20001dee <dif_plic_irq_set_priority>:
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:260

dif_plic_result_t dif_plic_irq_set_priority(const dif_plic_t *plic,
                                            dif_plic_irq_id_t irq,
                                            uint32_t priority) {
20001dee:	86aa                	mv	a3,a0
20001df0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:261
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20001df2:	ce89                	beqz	a3,20001e0c <dif_plic_irq_set_priority+0x1e>
20001df4:	0b300713          	li	a4,179
20001df8:	00b76a63          	bltu	a4,a1,20001e0c <dif_plic_irq_set_priority+0x1e>
20001dfc:	470d                	li	a4,3
20001dfe:	00c76763          	bltu	a4,a2,20001e0c <dif_plic_irq_set_priority+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:267
      priority > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t offset = plic_priority_reg_offset(irq);
  mmio_region_write32(plic->params.base_addr, offset, priority);
20001e02:	4294                	lw	a3,0(a3)
20001e04:	4501                	li	a0,0
plic_priority_reg_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:124
  ptrdiff_t offset = irq * sizeof(uint32_t);
20001e06:	058a                	slli	a1,a1,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:125
  return RV_PLIC_PRIO0_REG_OFFSET + offset;
20001e08:	95b6                	add	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001e0a:	d990                	sw	a2,48(a1)
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:270

  return kDifPlicOk;
}
20001e0c:	8082                	ret

20001e0e <dif_plic_target_set_threshold>:
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:274

dif_plic_result_t dif_plic_target_set_threshold(const dif_plic_t *plic,
                                                dif_plic_target_t target,
                                                uint32_t threshold) {
20001e0e:	86aa                	mv	a3,a0
20001e10:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:275
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001e12:	ca89                	beqz	a3,20001e24 <dif_plic_target_set_threshold+0x16>
20001e14:	e981                	bnez	a1,20001e24 <dif_plic_target_set_threshold+0x16>
20001e16:	458d                	li	a1,3
20001e18:	00c5e663          	bltu	a1,a2,20001e24 <dif_plic_target_set_threshold+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:281
      threshold > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t threshold_offset = plic_threshold_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, threshold_offset, threshold);
20001e1c:	428c                	lw	a1,0(a3)
20001e1e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001e20:	30c5ac23          	sw	a2,792(a1)
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:284

  return kDifPlicOk;
}
20001e24:	8082                	ret

20001e26 <dif_plic_irq_is_pending>:
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:288

dif_plic_result_t dif_plic_irq_is_pending(const dif_plic_t *plic,
                                          dif_plic_irq_id_t irq,
                                          bool *is_pending) {
20001e26:	86aa                	mv	a3,a0
20001e28:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:289
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC || is_pending == NULL) {
20001e2a:	c68d                	beqz	a3,20001e54 <dif_plic_irq_is_pending+0x2e>
20001e2c:	0b300713          	li	a4,179
20001e30:	02b76263          	bltu	a4,a1,20001e54 <dif_plic_irq_is_pending+0x2e>
20001e34:	c205                	beqz	a2,20001e54 <dif_plic_irq_is_pending+0x2e>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001e36:	0035d513          	srli	a0,a1,0x3
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:294
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_pending_reg_info(irq);
  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20001e3a:	4294                	lw	a3,0(a3)
20001e3c:	20000737          	lui	a4,0x20000
20001e40:	1771                	addi	a4,a4,-4
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20001e42:	8d79                	and	a0,a0,a4
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e44:	9536                	add	a0,a0,a3
20001e46:	4114                	lw	a3,0(a0)
20001e48:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001e4a:	00b6d5b3          	srl	a1,a3,a1
20001e4e:	8985                	andi	a1,a1,1
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:295
  *is_pending = bitfield_bit32_read(reg, reg_info.bit_index);
20001e50:	00b60023          	sb	a1,0(a2) # 10000 <_dv_log_offset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:298

  return kDifPlicOk;
}
20001e54:	8082                	ret

20001e56 <dif_plic_irq_claim>:
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:302

dif_plic_result_t dif_plic_irq_claim(const dif_plic_t *plic,
                                     dif_plic_target_t target,
                                     dif_plic_irq_id_t *claim_data) {
20001e56:	86aa                	mv	a3,a0
20001e58:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:303
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001e5a:	ca81                	beqz	a3,20001e6a <dif_plic_irq_claim+0x14>
20001e5c:	e599                	bnez	a1,20001e6a <dif_plic_irq_claim+0x14>
20001e5e:	c611                	beqz	a2,20001e6a <dif_plic_irq_claim+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
      claim_data == NULL) {
    return kDifPlicBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->params.base_addr, claim_complete_reg);
20001e60:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e62:	31c52583          	lw	a1,796(a0)
20001e66:	4501                	li	a0,0
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
20001e68:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:312

  return kDifPlicOk;
}
20001e6a:	8082                	ret

20001e6c <dif_plic_irq_complete>:
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:316

dif_plic_result_t dif_plic_irq_complete(
    const dif_plic_t *plic, dif_plic_target_t target,
    const dif_plic_irq_id_t *complete_data) {
20001e6c:	86aa                	mv	a3,a0
20001e6e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:317
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001e70:	ca81                	beqz	a3,20001e80 <dif_plic_irq_complete+0x14>
20001e72:	e599                	bnez	a1,20001e80 <dif_plic_irq_complete+0x14>
20001e74:	c611                	beqz	a2,20001e80 <dif_plic_irq_complete+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:326

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
                      *complete_data);
20001e76:	420c                	lw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:325
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
20001e78:	4290                	lw	a2,0(a3)
20001e7a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001e7c:	30b62e23          	sw	a1,796(a2)
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:329

  return kDifPlicOk;
}
20001e80:	8082                	ret

20001e82 <dif_plic_software_irq_force>:
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:332

dif_plic_result_t dif_plic_software_irq_force(const dif_plic_t *plic,
                                              dif_plic_target_t target) {
20001e82:	862a                	mv	a2,a0
20001e84:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:333
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
20001e86:	c619                	beqz	a2,20001e94 <dif_plic_software_irq_force+0x12>
20001e88:	e591                	bnez	a1,20001e94 <dif_plic_software_irq_force+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:338
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 1);
20001e8a:	420c                	lw	a1,0(a2)
20001e8c:	4501                	li	a0,0
20001e8e:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001e90:	32c5a023          	sw	a2,800(a1)
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:341

  return kDifPlicOk;
}
20001e94:	8082                	ret

20001e96 <dif_plic_software_irq_acknowledge>:
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:344

dif_plic_result_t dif_plic_software_irq_acknowledge(const dif_plic_t *plic,
                                                    dif_plic_target_t target) {
20001e96:	862a                	mv	a2,a0
20001e98:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:345
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
20001e9a:	c611                	beqz	a2,20001ea6 <dif_plic_software_irq_acknowledge+0x10>
20001e9c:	e589                	bnez	a1,20001ea6 <dif_plic_software_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:350
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 0);
20001e9e:	420c                	lw	a1,0(a2)
20001ea0:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001ea2:	3205a023          	sw	zero,800(a1)
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:353

  return kDifPlicOk;
}
20001ea6:	8082                	ret

20001ea8 <dif_plic_software_irq_is_pending>:
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:357

dif_plic_result_t dif_plic_software_irq_is_pending(const dif_plic_t *plic,
                                                   dif_plic_target_t target,
                                                   bool *is_pending) {
20001ea8:	86aa                	mv	a3,a0
20001eaa:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:358
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20001eac:	ce81                	beqz	a3,20001ec4 <dif_plic_software_irq_is_pending+0x1c>
20001eae:	e999                	bnez	a1,20001ec4 <dif_plic_software_irq_is_pending+0x1c>
20001eb0:	ca11                	beqz	a2,20001ec4 <dif_plic_software_irq_is_pending+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:365
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  uint32_t register_value =
      mmio_region_read32(plic->params.base_addr, msip_offset);
20001eb2:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001eb4:	32052583          	lw	a1,800(a0)
20001eb8:	4501                	li	a0,0
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:367

  *is_pending = (register_value == 1) ? true : false;
20001eba:	15fd                	addi	a1,a1,-1
20001ebc:	0015b593          	seqz	a1,a1
20001ec0:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:370

  return kDifPlicOk;
}
20001ec4:	8082                	ret
	...

20001ec8 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20001ec8:	7139                	addi	sp,sp,-64
20001eca:	ce06                	sw	ra,28(sp)
20001ecc:	cc22                	sw	s0,24(sp)
20001ece:	ca26                	sw	s1,20(sp)
20001ed0:	c84a                	sw	s2,16(sp)
20001ed2:	892a                	mv	s2,a0
20001ed4:	de46                	sw	a7,60(sp)
20001ed6:	dc42                	sw	a6,56(sp)
20001ed8:	da3e                	sw	a5,52(sp)
20001eda:	d83a                	sw	a4,48(sp)
20001edc:	d636                	sw	a3,44(sp)
20001ede:	d432                	sw	a2,40(sp)
20001ee0:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20001ee2:	4144                	lw	s1,4(a0)
20001ee4:	80000537          	lui	a0,0x80000
20001ee8:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffb717>
20001eec:	8526                	mv	a0,s1
20001eee:	4581                	li	a1,0
20001ef0:	6c1000ef          	jal	ra,20002db0 <memchr>
20001ef4:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20001ef8:	02f00593          	li	a1,47
20001efc:	8526                	mv	a0,s1
20001efe:	6cb000ef          	jal	ra,20002dc8 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001f02:	00092583          	lw	a1,0(s2)
20001f06:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001f08:	00b66b63          	bltu	a2,a1,20001f1e <base_log_internal_core+0x56>
20001f0c:	058a                	slli	a1,a1,0x2
20001f0e:	00002617          	auipc	a2,0x2
20001f12:	87a60613          	addi	a2,a2,-1926 # 20003788 <kDifPlicMaxPriority+0x4>
20001f16:	95b2                	add	a1,a1,a2
20001f18:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20001f1a:	e519                	bnez	a0,20001f28 <base_log_internal_core+0x60>
20001f1c:	a801                	j	20001f2c <base_log_internal_core+0x64>
20001f1e:	00002597          	auipc	a1,0x2
20001f22:	7b958593          	addi	a1,a1,1977 # 200046d7 <__clz_tab+0xa93>
20001f26:	c119                	beqz	a0,20001f2c <base_log_internal_core+0x64>
20001f28:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20001f2c:	efffe417          	auipc	s0,0xefffe
20001f30:	0f440413          	addi	s0,s0,244 # 10000020 <base_log_internal_core.global_log_counter>
20001f34:	00045603          	lhu	a2,0(s0)
20001f38:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001f3c:	00002517          	auipc	a0,0x2
20001f40:	78450513          	addi	a0,a0,1924 # 200046c0 <__clz_tab+0xa7c>
20001f44:	86a6                	mv	a3,s1
20001f46:	28d1                	jal	2000201a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001f48:	00041503          	lh	a0,0(s0)
20001f4c:	0505                	addi	a0,a0,1
20001f4e:	00a41023          	sh	a0,0(s0)
20001f52:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20001f54:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20001f56:	01092503          	lw	a0,16(s2)
20001f5a:	28c5                	jal	2000204a <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001f5c:	00002517          	auipc	a0,0x2
20001f60:	77250513          	addi	a0,a0,1906 # 200046ce <__clz_tab+0xa8a>
20001f64:	285d                	jal	2000201a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20001f66:	4942                	lw	s2,16(sp)
20001f68:	44d2                	lw	s1,20(sp)
20001f6a:	4462                	lw	s0,24(sp)
20001f6c:	40f2                	lw	ra,28(sp)
20001f6e:	6121                	addi	sp,sp,64
20001f70:	8082                	ret

20001f72 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20001f72:	1101                	addi	sp,sp,-32
20001f74:	ce46                	sw	a7,28(sp)
20001f76:	cc42                	sw	a6,24(sp)
20001f78:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20001f7a:	00002797          	auipc	a5,0x2
20001f7e:	cc678793          	addi	a5,a5,-826 # 20003c40 <kDeviceLogBypassUartAddress>
20001f82:	439c                	lw	a5,0(a5)
20001f84:	c83a                	sw	a4,16(sp)
20001f86:	c636                	sw	a3,12(sp)
20001f88:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001f8a:	c388                	sw	a0,0(a5)
20001f8c:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20001f8e:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001f90:	c989                	beqz	a1,20001fa2 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20001f92:	4512                	lw	a0,4(sp)
20001f94:	00450613          	addi	a2,a0,4
20001f98:	c232                	sw	a2,4(sp)
20001f9a:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001f9c:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f9e:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001fa0:	f9ed                	bnez	a1,20001f92 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20001fa2:	6105                	addi	sp,sp,32
20001fa4:	8082                	ret
	...

20001fa8 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20001fa8:	e589                	bnez	a1,20001fb2 <base_set_stdout+0xa>
20001faa:	00000597          	auipc	a1,0x0
20001fae:	01658593          	addi	a1,a1,22 # 20001fc0 <base_dev_null>
20001fb2:	efffe617          	auipc	a2,0xefffe
20001fb6:	04e60613          	addi	a2,a2,78 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20001fba:	c208                	sw	a0,0(a2)
20001fbc:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20001fbe:	8082                	ret

20001fc0 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001fc0:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20001fc2:	8082                	ret

20001fc4 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001fc4:	efffe597          	auipc	a1,0xefffe
20001fc8:	03c58593          	addi	a1,a1,60 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20001fcc:	c188                	sw	a0,0(a1)
20001fce:	00000517          	auipc	a0,0x0
20001fd2:	00c50513          	addi	a0,a0,12 # 20001fda <base_dev_uart>
20001fd6:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001fd8:	8082                	ret

20001fda <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20001fda:	1101                	addi	sp,sp,-32
20001fdc:	ce06                	sw	ra,28(sp)
20001fde:	cc22                	sw	s0,24(sp)
20001fe0:	ca26                	sw	s1,20(sp)
20001fe2:	c84a                	sw	s2,16(sp)
20001fe4:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001fe6:	c20d                	beqz	a2,20002008 <base_dev_uart+0x2e>
20001fe8:	8432                	mv	s0,a2
20001fea:	892e                	mv	s2,a1
20001fec:	89aa                	mv	s3,a0
20001fee:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001ff0:	00990533          	add	a0,s2,s1
20001ff4:	00054583          	lbu	a1,0(a0)
20001ff8:	854e                	mv	a0,s3
20001ffa:	2f19                	jal	20002710 <dif_uart_byte_send_polled>
20001ffc:	e519                	bnez	a0,2000200a <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001ffe:	0485                	addi	s1,s1,1
20002000:	fe9418e3          	bne	s0,s1,20001ff0 <base_dev_uart+0x16>
20002004:	84a2                	mv	s1,s0
20002006:	a011                	j	2000200a <base_dev_uart+0x30>
20002008:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
2000200a:	8526                	mv	a0,s1
2000200c:	49b2                	lw	s3,12(sp)
2000200e:	4942                	lw	s2,16(sp)
20002010:	44d2                	lw	s1,20(sp)
20002012:	4462                	lw	s0,24(sp)
20002014:	40f2                	lw	ra,28(sp)
20002016:	6105                	addi	sp,sp,32
20002018:	8082                	ret

2000201a <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
2000201a:	7179                	addi	sp,sp,-48
2000201c:	c606                	sw	ra,12(sp)
2000201e:	d646                	sw	a7,44(sp)
20002020:	d442                	sw	a6,40(sp)
20002022:	d23e                	sw	a5,36(sp)
20002024:	d03a                	sw	a4,32(sp)
20002026:	ce36                	sw	a3,28(sp)
20002028:	cc32                	sw	a2,24(sp)
2000202a:	ca2e                	sw	a1,20(sp)
2000202c:	efffe597          	auipc	a1,0xefffe
20002030:	fd458593          	addi	a1,a1,-44 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20002034:	4190                	lw	a2,0(a1)
20002036:	41cc                	lw	a1,4(a1)
20002038:	872a                	mv	a4,a0
2000203a:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
2000203c:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000203e:	8532                	mv	a0,a2
20002040:	863a                	mv	a2,a4
20002042:	200d                	jal	20002064 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20002044:	40b2                	lw	ra,12(sp)
20002046:	6145                	addi	sp,sp,48
20002048:	8082                	ret

2000204a <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
2000204a:	efffe697          	auipc	a3,0xefffe
2000204e:	fb668693          	addi	a3,a3,-74 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20002052:	4290                	lw	a2,0(a3)
20002054:	42d4                	lw	a3,4(a3)
20002056:	872e                	mv	a4,a1
20002058:	87aa                	mv	a5,a0
2000205a:	8532                	mv	a0,a2
2000205c:	85b6                	mv	a1,a3
2000205e:	863e                	mv	a2,a5
20002060:	86ba                	mv	a3,a4
20002062:	a009                	j	20002064 <base_vfprintf>

20002064 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20002064:	7139                	addi	sp,sp,-64
20002066:	de06                	sw	ra,60(sp)
20002068:	dc22                	sw	s0,56(sp)
2000206a:	da26                	sw	s1,52(sp)
2000206c:	d84a                	sw	s2,48(sp)
2000206e:	d64e                	sw	s3,44(sp)
20002070:	d452                	sw	s4,40(sp)
20002072:	d256                	sw	s5,36(sp)
20002074:	d05a                	sw	s6,32(sp)
20002076:	ce5e                	sw	s7,28(sp)
20002078:	cc62                	sw	s8,24(sp)
2000207a:	ca66                	sw	s9,20(sp)
2000207c:	c86a                	sw	s10,16(sp)
2000207e:	c66e                	sw	s11,12(sp)
20002080:	8bb2                	mv	s7,a2
20002082:	892a                	mv	s2,a0
20002084:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20002086:	c199                	beqz	a1,2000208c <base_vfprintf+0x28>
20002088:	89ae                	mv	s3,a1
2000208a:	a029                	j	20002094 <base_vfprintf+0x30>
2000208c:	00000997          	auipc	s3,0x0
20002090:	f3498993          	addi	s3,s3,-204 # 20001fc0 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20002094:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20002096:	000bc503          	lbu	a0,0(s7)
2000209a:	28050f63          	beqz	a0,20002338 <base_vfprintf+0x2d4>
2000209e:	4b01                	li	s6,0
200020a0:	02500c13          	li	s8,37
200020a4:	4ca5                	li	s9,9
200020a6:	02000d13          	li	s10,32
200020aa:	06800d93          	li	s11,104
200020ae:	00002a17          	auipc	s4,0x2
200020b2:	62ba0a13          	addi	s4,s4,1579 # 200046d9 <__clz_tab+0xa95>
200020b6:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200020b8:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200020ba:	0ff57413          	andi	s0,a0,255
200020be:	01840963          	beq	s0,s8,200020d0 <base_vfprintf+0x6c>
200020c2:	c419                	beqz	s0,200020d0 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200020c4:	009b8533          	add	a0,s7,s1
200020c8:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200020cc:	0485                	addi	s1,s1,1
200020ce:	b7f5                	j	200020ba <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200020d0:	c491                	beqz	s1,200020dc <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200020d2:	854a                	mv	a0,s2
200020d4:	85de                	mv	a1,s7
200020d6:	8626                	mv	a2,s1
200020d8:	9982                	jalr	s3
200020da:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
200020dc:	24040f63          	beqz	s0,2000233a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200020e0:	009b8633          	add	a2,s7,s1
200020e4:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200020e8:	22050f63          	beqz	a0,20002326 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200020ec:	fd050593          	addi	a1,a0,-48
200020f0:	0ff5f593          	andi	a1,a1,255
200020f4:	00bcf863          	bgeu	s9,a1,20002104 <base_vfprintf+0xa0>
200020f8:	4401                	li	s0,0
200020fa:	4581                	li	a1,0
200020fc:	4605                	li	a2,1
200020fe:	028d7f63          	bgeu	s10,s0,2000213c <base_vfprintf+0xd8>
20002102:	aca1                	j	2000235a <base_vfprintf+0x2f6>
20002104:	4581                	li	a1,0
20002106:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20002108:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000210a:	00b606b3          	add	a3,a2,a1
2000210e:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20002112:	20068a63          	beqz	a3,20002326 <base_vfprintf+0x2c2>
20002116:	0ff57513          	andi	a0,a0,255
2000211a:	03540733          	mul	a4,s0,s5
2000211e:	953a                	add	a0,a0,a4
20002120:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20002124:	fd068513          	addi	a0,a3,-48
20002128:	0ff57713          	andi	a4,a0,255
2000212c:	0585                	addi	a1,a1,1
2000212e:	8536                	mv	a0,a3
20002130:	fcecfde3          	bgeu	s9,a4,2000210a <base_vfprintf+0xa6>
20002134:	4601                	li	a2,0
20002136:	8536                	mv	a0,a3
20002138:	228d6163          	bltu	s10,s0,2000235a <base_vfprintf+0x2f6>
2000213c:	008036b3          	snez	a3,s0
20002140:	8e55                	or	a2,a2,a3
20002142:	20060c63          	beqz	a2,2000235a <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20002146:	95de                	add	a1,a1,s7
20002148:	95a6                	add	a1,a1,s1
2000214a:	00258b93          	addi	s7,a1,2
2000214e:	02adce63          	blt	s11,a0,2000218a <base_vfprintf+0x126>
20002152:	06100593          	li	a1,97
20002156:	06a5d563          	bge	a1,a0,200021c0 <base_vfprintf+0x15c>
2000215a:	06300593          	li	a1,99
2000215e:	0ca5cb63          	blt	a1,a0,20002234 <base_vfprintf+0x1d0>
20002162:	06200593          	li	a1,98
20002166:	14b50a63          	beq	a0,a1,200022ba <base_vfprintf+0x256>
2000216a:	06300593          	li	a1,99
2000216e:	18b51f63          	bne	a0,a1,2000230c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20002172:	4502                	lw	a0,0(sp)
20002174:	00450593          	addi	a1,a0,4
20002178:	c02e                	sw	a1,0(sp)
2000217a:	4108                	lw	a0,0(a0)
2000217c:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20002180:	4605                	li	a2,1
20002182:	854a                	mv	a0,s2
20002184:	00b10593          	addi	a1,sp,11
20002188:	aa41                	j	20002318 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000218a:	07200593          	li	a1,114
2000218e:	04a5dd63          	bge	a1,a0,200021e8 <base_vfprintf+0x184>
20002192:	07700593          	li	a1,119
20002196:	0aa5c663          	blt	a1,a0,20002242 <base_vfprintf+0x1de>
2000219a:	07300593          	li	a1,115
2000219e:	12b50963          	beq	a0,a1,200022d0 <base_vfprintf+0x26c>
200021a2:	07500593          	li	a1,117
200021a6:	16b51363          	bne	a0,a1,2000230c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200021aa:	4502                	lw	a0,0(sp)
200021ac:	00450593          	addi	a1,a0,4
200021b0:	c02e                	sw	a1,0(sp)
200021b2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200021b4:	00001797          	auipc	a5,0x1
200021b8:	60178793          	addi	a5,a5,1537 # 200037b5 <kDigitsLow>
200021bc:	4729                	li	a4,10
200021be:	a8cd                	j	200022b0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200021c0:	13850763          	beq	a0,s8,200022ee <base_vfprintf+0x28a>
200021c4:	04800593          	li	a1,72
200021c8:	00b50663          	beq	a0,a1,200021d4 <base_vfprintf+0x170>
200021cc:	05800593          	li	a1,88
200021d0:	12b51e63          	bne	a0,a1,2000230c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
200021d4:	4502                	lw	a0,0(sp)
200021d6:	00450593          	addi	a1,a0,4
200021da:	c02e                	sw	a1,0(sp)
200021dc:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
200021de:	00001797          	auipc	a5,0x1
200021e2:	5e778793          	addi	a5,a5,1511 # 200037c5 <kDigitsHigh>
200021e6:	a0e1                	j	200022ae <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200021e8:	06900593          	li	a1,105
200021ec:	06b50d63          	beq	a0,a1,20002266 <base_vfprintf+0x202>
200021f0:	06f00593          	li	a1,111
200021f4:	10b50163          	beq	a0,a1,200022f6 <base_vfprintf+0x292>
200021f8:	07000593          	li	a1,112
200021fc:	10b51863          	bne	a0,a1,2000230c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20002200:	00002597          	auipc	a1,0x2
20002204:	4dd58593          	addi	a1,a1,1245 # 200046dd <__clz_tab+0xa99>
20002208:	4609                	li	a2,2
2000220a:	854a                	mv	a0,s2
2000220c:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000220e:	4582                	lw	a1,0(sp)
20002210:	00458613          	addi	a2,a1,4
20002214:	c032                	sw	a2,0(sp)
20002216:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20002218:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
2000221c:	00001797          	auipc	a5,0x1
20002220:	59978793          	addi	a5,a5,1433 # 200037b5 <kDigitsLow>
20002224:	46a1                	li	a3,8
20002226:	4741                	li	a4,16
20002228:	854a                	mv	a0,s2
2000222a:	85ce                	mv	a1,s3
2000222c:	2a5d                	jal	200023e2 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
2000222e:	00a40b33          	add	s6,s0,a0
20002232:	a0ed                	j	2000231c <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20002234:	06400593          	li	a1,100
20002238:	02b50763          	beq	a0,a1,20002266 <base_vfprintf+0x202>
2000223c:	07b50063          	beq	a0,s11,2000229c <base_vfprintf+0x238>
20002240:	a0f1                	j	2000230c <base_vfprintf+0x2a8>
20002242:	07800593          	li	a1,120
20002246:	04b50b63          	beq	a0,a1,2000229c <base_vfprintf+0x238>
2000224a:	07a00593          	li	a1,122
2000224e:	0ab51f63          	bne	a0,a1,2000230c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20002252:	4502                	lw	a0,0(sp)
20002254:	00450593          	addi	a1,a0,4
20002258:	c02e                	sw	a1,0(sp)
2000225a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
2000225c:	00850593          	addi	a1,a0,8
20002260:	c02e                	sw	a1,0(sp)
20002262:	414c                	lw	a1,4(a0)
20002264:	a84d                	j	20002316 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20002266:	4502                	lw	a0,0(sp)
20002268:	00450593          	addi	a1,a0,4
2000226c:	c02e                	sw	a1,0(sp)
2000226e:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20002270:	557d                	li	a0,-1
20002272:	00954c63          	blt	a0,s1,2000228a <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20002276:	00002597          	auipc	a1,0x2
2000227a:	46558593          	addi	a1,a1,1125 # 200046db <__clz_tab+0xa97>
2000227e:	4605                	li	a2,1
20002280:	854a                	mv	a0,s2
20002282:	9982                	jalr	s3
20002284:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20002286:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
2000228a:	00001797          	auipc	a5,0x1
2000228e:	52b78793          	addi	a5,a5,1323 # 200037b5 <kDigitsLow>
20002292:	4729                	li	a4,10
20002294:	854a                	mv	a0,s2
20002296:	85ce                	mv	a1,s3
20002298:	8626                	mv	a2,s1
2000229a:	a829                	j	200022b4 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
2000229c:	4502                	lw	a0,0(sp)
2000229e:	00450593          	addi	a1,a0,4
200022a2:	c02e                	sw	a1,0(sp)
200022a4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200022a6:	00001797          	auipc	a5,0x1
200022aa:	50f78793          	addi	a5,a5,1295 # 200037b5 <kDigitsLow>
200022ae:	4741                	li	a4,16
200022b0:	854a                	mv	a0,s2
200022b2:	85ce                	mv	a1,s3
200022b4:	86a2                	mv	a3,s0
200022b6:	2235                	jal	200023e2 <write_digits>
200022b8:	a08d                	j	2000231a <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200022ba:	4502                	lw	a0,0(sp)
200022bc:	00450593          	addi	a1,a0,4
200022c0:	c02e                	sw	a1,0(sp)
200022c2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200022c4:	00001797          	auipc	a5,0x1
200022c8:	4f178793          	addi	a5,a5,1265 # 200037b5 <kDigitsLow>
200022cc:	4709                	li	a4,2
200022ce:	b7cd                	j	200022b0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200022d0:	4502                	lw	a0,0(sp)
200022d2:	00450593          	addi	a1,a0,4
200022d6:	c02e                	sw	a1,0(sp)
200022d8:	410c                	lw	a1,0(a0)
200022da:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200022dc:	00a58633          	add	a2,a1,a0
200022e0:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200022e4:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200022e6:	fa7d                	bnez	a2,200022dc <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200022e8:	fff50613          	addi	a2,a0,-1
200022ec:	a02d                	j	20002316 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200022ee:	4605                	li	a2,1
200022f0:	854a                	mv	a0,s2
200022f2:	85d2                	mv	a1,s4
200022f4:	a015                	j	20002318 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200022f6:	4502                	lw	a0,0(sp)
200022f8:	00450593          	addi	a1,a0,4
200022fc:	c02e                	sw	a1,0(sp)
200022fe:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20002300:	00001797          	auipc	a5,0x1
20002304:	4b578793          	addi	a5,a5,1205 # 200037b5 <kDigitsLow>
20002308:	4721                	li	a4,8
2000230a:	b75d                	j	200022b0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
2000230c:	00001597          	auipc	a1,0x1
20002310:	4c958593          	addi	a1,a1,1225 # 200037d5 <kUnknownSpec>
20002314:	463d                	li	a2,15
20002316:	854a                	mv	a0,s2
20002318:	9982                	jalr	s3
2000231a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
2000231c:	000bc503          	lbu	a0,0(s7)
20002320:	d8051ce3          	bnez	a0,200020b8 <base_vfprintf+0x54>
20002324:	a819                	j	2000233a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20002326:	00001597          	auipc	a1,0x1
2000232a:	47258593          	addi	a1,a1,1138 # 20003798 <kErrorNul>
2000232e:	4645                	li	a2,17
20002330:	854a                	mv	a0,s2
20002332:	9982                	jalr	s3
20002334:	9b2a                	add	s6,s6,a0
20002336:	a011                	j	2000233a <base_vfprintf+0x2d6>
20002338:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
2000233a:	855a                	mv	a0,s6
2000233c:	4db2                	lw	s11,12(sp)
2000233e:	4d42                	lw	s10,16(sp)
20002340:	4cd2                	lw	s9,20(sp)
20002342:	4c62                	lw	s8,24(sp)
20002344:	4bf2                	lw	s7,28(sp)
20002346:	5b02                	lw	s6,32(sp)
20002348:	5a92                	lw	s5,36(sp)
2000234a:	5a22                	lw	s4,40(sp)
2000234c:	59b2                	lw	s3,44(sp)
2000234e:	5942                	lw	s2,48(sp)
20002350:	54d2                	lw	s1,52(sp)
20002352:	5462                	lw	s0,56(sp)
20002354:	50f2                	lw	ra,60(sp)
20002356:	6121                	addi	sp,sp,64
20002358:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
2000235a:	00001597          	auipc	a1,0x1
2000235e:	44f58593          	addi	a1,a1,1103 # 200037a9 <kErrorTooWide>
20002362:	4631                	li	a2,12
20002364:	b7f1                	j	20002330 <base_vfprintf+0x2cc>

20002366 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20002366:	7179                	addi	sp,sp,-48
20002368:	ca06                	sw	ra,20(sp)
2000236a:	d646                	sw	a7,44(sp)
2000236c:	d442                	sw	a6,40(sp)
2000236e:	d23e                	sw	a5,36(sp)
20002370:	d03a                	sw	a4,32(sp)
20002372:	ce36                	sw	a3,28(sp)
20002374:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20002376:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20002378:	c42a                	sw	a0,8(sp)
2000237a:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
2000237c:	00000597          	auipc	a1,0x0
20002380:	01258593          	addi	a1,a1,18 # 2000238e <snprintf_sink>
20002384:	0028                	addi	a0,sp,8
20002386:	39f9                	jal	20002064 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20002388:	40d2                	lw	ra,20(sp)
2000238a:	6145                	addi	sp,sp,48
2000238c:	8082                	ret

2000238e <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000238e:	1141                	addi	sp,sp,-16
20002390:	c606                	sw	ra,12(sp)
20002392:	c422                	sw	s0,8(sp)
20002394:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20002396:	4140                	lw	s0,4(a0)
20002398:	c00d                	beqz	s0,200023ba <snprintf_sink+0x2c>
2000239a:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
2000239c:	00c46363          	bltu	s0,a2,200023a2 <snprintf_sink+0x14>
200023a0:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200023a2:	4088                	lw	a0,0(s1)
200023a4:	8622                	mv	a2,s0
200023a6:	1bb000ef          	jal	ra,20002d60 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200023aa:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200023ac:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200023ae:	9522                	add	a0,a0,s0
200023b0:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200023b2:	40858533          	sub	a0,a1,s0
200023b6:	c0c8                	sw	a0,4(s1)
200023b8:	a011                	j	200023bc <snprintf_sink+0x2e>
200023ba:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200023bc:	8522                	mv	a0,s0
200023be:	4492                	lw	s1,4(sp)
200023c0:	4422                	lw	s0,8(sp)
200023c2:	40b2                	lw	ra,12(sp)
200023c4:	0141                	addi	sp,sp,16
200023c6:	8082                	ret

200023c8 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200023c8:	1101                	addi	sp,sp,-32
200023ca:	c206                	sw	ra,4(sp)
200023cc:	ce46                	sw	a7,28(sp)
200023ce:	cc42                	sw	a6,24(sp)
200023d0:	ca3e                	sw	a5,20(sp)
200023d2:	c83a                	sw	a4,16(sp)
200023d4:	c636                	sw	a3,12(sp)
200023d6:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200023d8:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200023da:	3169                	jal	20002064 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200023dc:	4092                	lw	ra,4(sp)
200023de:	6105                	addi	sp,sp,32
200023e0:	8082                	ret

200023e2 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
200023e2:	7139                	addi	sp,sp,-64
200023e4:	de06                	sw	ra,60(sp)
200023e6:	dc22                	sw	s0,56(sp)
200023e8:	da26                	sw	s1,52(sp)
200023ea:	d84a                	sw	s2,48(sp)
200023ec:	d64e                	sw	s3,44(sp)
200023ee:	892e                	mv	s2,a1
200023f0:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200023f2:	ca05                	beqz	a2,20002422 <write_digits+0x40>
200023f4:	4501                	li	a0,0
200023f6:	02b10813          	addi	a6,sp,43
200023fa:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
200023fc:	02e65633          	divu	a2,a2,a4
20002400:	02e60433          	mul	s0,a2,a4
20002404:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20002408:	943e                	add	s0,s0,a5
2000240a:	00040403          	lb	s0,0(s0)
2000240e:	00a805b3          	add	a1,a6,a0
20002412:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20002416:	157d                	addi	a0,a0,-1
20002418:	fee4f1e3          	bgeu	s1,a4,200023fa <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
2000241c:	40a00633          	neg	a2,a0
20002420:	a011                	j	20002424 <write_digits+0x42>
20002422:	4601                	li	a2,0
20002424:	4485                	li	s1,1
20002426:	c291                	beqz	a3,2000242a <write_digits+0x48>
20002428:	84b6                	mv	s1,a3
2000242a:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
2000242e:	00a4e463          	bltu	s1,a0,20002436 <write_digits+0x54>
20002432:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20002436:	02967063          	bgeu	a2,s1,20002456 <write_digits+0x74>
2000243a:	0068                	addi	a0,sp,12
2000243c:	8d05                	sub	a0,a0,s1
2000243e:	02050513          	addi	a0,a0,32
20002442:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20002446:	03000593          	li	a1,48
2000244a:	8622                	mv	a2,s0
2000244c:	12b000ef          	jal	ra,20002d76 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20002450:	147d                	addi	s0,s0,-1
20002452:	fc7d                	bnez	s0,20002450 <write_digits+0x6e>
20002454:	8626                	mv	a2,s1
20002456:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20002458:	8d11                	sub	a0,a0,a2
2000245a:	02050593          	addi	a1,a0,32
2000245e:	854e                	mv	a0,s3
20002460:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20002462:	59b2                	lw	s3,44(sp)
20002464:	5942                	lw	s2,48(sp)
20002466:	54d2                	lw	s1,52(sp)
20002468:	5462                	lw	s0,56(sp)
2000246a:	50f2                	lw	ra,60(sp)
2000246c:	6121                	addi	sp,sp,64
2000246e:	8082                	ret

20002470 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20002470:	c581                	beqz	a1,20002478 <dif_uart_init+0x8>
20002472:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20002474:	c188                	sw	a0,0(a1)
20002476:	a011                	j	2000247a <dif_uart_init+0xa>
20002478:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
2000247a:	8532                	mv	a0,a2
2000247c:	8082                	ret

2000247e <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
2000247e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20002480:	c606                	sw	ra,12(sp)
20002482:	c422                	sw	s0,8(sp)
20002484:	c226                	sw	s1,4(sp)
20002486:	c935                	beqz	a0,200024fa <dif_uart_configure+0x7c>
20002488:	84ae                	mv	s1,a1
2000248a:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
2000248c:	418c                	lw	a1,0(a1)
2000248e:	450d                	li	a0,3
20002490:	c5b5                	beqz	a1,200024fc <dif_uart_configure+0x7e>
20002492:	40d0                	lw	a2,4(s1)
20002494:	c625                	beqz	a2,200024fc <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20002496:	01459513          	slli	a0,a1,0x14
2000249a:	81b1                	srli	a1,a1,0xc
2000249c:	4681                	li	a3,0
2000249e:	1ab000ef          	jal	ra,20002e48 <__udivdi3>
200024a2:	6641                	lui	a2,0x10
200024a4:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200024a6:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200024a8:	8d31                	xor	a0,a0,a2
200024aa:	8dc9                	or	a1,a1,a0
200024ac:	4511                	li	a0,4
200024ae:	e5b9                	bnez	a1,200024fc <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200024b0:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024b2:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200024b6:	4008                	lw	a0,0(s0)
200024b8:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024ba:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200024bc:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024be:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200024c2:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024c4:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200024c8:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024ca:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200024ce:	4008                	lw	a0,0(s0)
200024d0:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024d2:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200024d4:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200024d6:	01061513          	slli	a0,a2,0x10
200024da:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
200024de:	c291                	beqz	a3,200024e2 <dif_uart_configure+0x64>
200024e0:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
200024e2:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
200024e4:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
200024e6:	e219                	bnez	a2,200024ec <dif_uart_configure+0x6e>
200024e8:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
200024ec:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024ee:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200024f0:	400c                	lw	a1,0(s0)
200024f2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200024f4:	0005a223          	sw	zero,4(a1)
200024f8:	a011                	j	200024fc <dif_uart_configure+0x7e>
200024fa:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
200024fc:	4492                	lw	s1,4(sp)
200024fe:	4422                	lw	s0,8(sp)
20002500:	40b2                	lw	ra,12(sp)
20002502:	0141                	addi	sp,sp,16
20002504:	8082                	ret

20002506 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20002506:	1141                	addi	sp,sp,-16
20002508:	c606                	sw	ra,12(sp)
2000250a:	c422                	sw	s0,8(sp)
2000250c:	c226                	sw	s1,4(sp)
2000250e:	84aa                	mv	s1,a0
20002510:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20002512:	c09d                	beqz	s1,20002538 <dif_uart_irq_is_pending+0x32>
20002514:	8432                	mv	s0,a2
20002516:	c20d                	beqz	a2,20002538 <dif_uart_irq_is_pending+0x32>
20002518:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000251a:	852e                	mv	a0,a1
2000251c:	85b2                	mv	a1,a2
2000251e:	2015                	jal	20002542 <uart_irq_offset_get>
20002520:	85aa                	mv	a1,a0
20002522:	4505                	li	a0,1
20002524:	c991                	beqz	a1,20002538 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20002526:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002528:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
2000252a:	4602                	lw	a2,0(sp)
2000252c:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000252e:	00c5d5b3          	srl	a1,a1,a2
20002532:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20002534:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20002538:	4492                	lw	s1,4(sp)
2000253a:	4422                	lw	s0,8(sp)
2000253c:	40b2                	lw	ra,12(sp)
2000253e:	0141                	addi	sp,sp,16
20002540:	8082                	ret

20002542 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20002542:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20002544:	00a66563          	bltu	a2,a0,2000254e <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20002548:	c188                	sw	a0,0(a1)
2000254a:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
2000254c:	8082                	ret
2000254e:	4501                	li	a0,0
20002550:	8082                	ret

20002552 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20002552:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20002554:	c606                	sw	ra,12(sp)
20002556:	c422                	sw	s0,8(sp)
20002558:	c10d                	beqz	a0,2000257a <dif_uart_irq_acknowledge+0x28>
2000255a:	842a                	mv	s0,a0
2000255c:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000255e:	852e                	mv	a0,a1
20002560:	85b2                	mv	a1,a2
20002562:	37c5                	jal	20002542 <uart_irq_offset_get>
20002564:	85aa                	mv	a1,a0
20002566:	4505                	li	a0,1
20002568:	c991                	beqz	a1,2000257c <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
2000256a:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
2000256c:	4010                	lw	a2,0(s0)
2000256e:	4501                	li	a0,0
20002570:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002572:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002576:	c20c                	sw	a1,0(a2)
20002578:	a011                	j	2000257c <dif_uart_irq_acknowledge+0x2a>
2000257a:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
2000257c:	4422                	lw	s0,8(sp)
2000257e:	40b2                	lw	ra,12(sp)
20002580:	0141                	addi	sp,sp,16
20002582:	8082                	ret

20002584 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20002584:	c911                	beqz	a0,20002598 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20002586:	c581                	beqz	a1,2000258e <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20002588:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000258a:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
2000258c:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000258e:	410c                	lw	a1,0(a0)
20002590:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002592:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20002596:	8082                	ret
20002598:	4509                	li	a0,2
2000259a:	8082                	ret

2000259c <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
2000259c:	862a                	mv	a2,a0
2000259e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200025a0:	c611                	beqz	a2,200025ac <dif_uart_irq_restore_all+0x10>
200025a2:	c589                	beqz	a1,200025ac <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200025a4:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200025a6:	4210                	lw	a2,0(a2)
200025a8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200025aa:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200025ac:	8082                	ret

200025ae <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200025ae:	1141                	addi	sp,sp,-16
200025b0:	c606                	sw	ra,12(sp)
200025b2:	c422                	sw	s0,8(sp)
200025b4:	c226                	sw	s1,4(sp)
200025b6:	84aa                	mv	s1,a0
200025b8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200025ba:	c485                	beqz	s1,200025e2 <dif_uart_irq_get_enabled+0x34>
200025bc:	8432                	mv	s0,a2
200025be:	c215                	beqz	a2,200025e2 <dif_uart_irq_get_enabled+0x34>
200025c0:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200025c2:	852e                	mv	a0,a1
200025c4:	85b2                	mv	a1,a2
200025c6:	3fb5                	jal	20002542 <uart_irq_offset_get>
200025c8:	85aa                	mv	a1,a0
200025ca:	4505                	li	a0,1
200025cc:	c999                	beqz	a1,200025e2 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200025ce:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200025d0:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
200025d2:	4602                	lw	a2,0(sp)
200025d4:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200025d6:	00c5d5b3          	srl	a1,a1,a2
200025da:	8985                	andi	a1,a1,1
200025dc:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
200025e0:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
200025e2:	4492                	lw	s1,4(sp)
200025e4:	4422                	lw	s0,8(sp)
200025e6:	40b2                	lw	ra,12(sp)
200025e8:	0141                	addi	sp,sp,16
200025ea:	8082                	ret

200025ec <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
200025ec:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
200025ee:	c606                	sw	ra,12(sp)
200025f0:	c422                	sw	s0,8(sp)
200025f2:	c226                	sw	s1,4(sp)
200025f4:	c91d                	beqz	a0,2000262a <dif_uart_irq_set_enabled+0x3e>
200025f6:	8432                	mv	s0,a2
200025f8:	84aa                	mv	s1,a0
200025fa:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200025fc:	852e                	mv	a0,a1
200025fe:	85b2                	mv	a1,a2
20002600:	3789                	jal	20002542 <uart_irq_offset_get>
20002602:	85aa                	mv	a1,a0
20002604:	4505                	li	a0,1
20002606:	c19d                	beqz	a1,2000262c <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20002608:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000260a:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
2000260c:	4682                	lw	a3,0(sp)
2000260e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20002610:	00143713          	seqz	a4,s0
20002614:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002616:	00d797b3          	sll	a5,a5,a3
2000261a:	fff7c793          	not	a5,a5
2000261e:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002620:	00d716b3          	sll	a3,a4,a3
20002624:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002626:	c1d0                	sw	a2,4(a1)
20002628:	a011                	j	2000262c <dif_uart_irq_set_enabled+0x40>
2000262a:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
2000262c:	4492                	lw	s1,4(sp)
2000262e:	4422                	lw	s0,8(sp)
20002630:	40b2                	lw	ra,12(sp)
20002632:	0141                	addi	sp,sp,16
20002634:	8082                	ret

20002636 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20002636:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20002638:	c606                	sw	ra,12(sp)
2000263a:	c422                	sw	s0,8(sp)
2000263c:	c10d                	beqz	a0,2000265e <dif_uart_irq_force+0x28>
2000263e:	842a                	mv	s0,a0
20002640:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20002642:	852e                	mv	a0,a1
20002644:	85b2                	mv	a1,a2
20002646:	3df5                	jal	20002542 <uart_irq_offset_get>
20002648:	85aa                	mv	a1,a0
2000264a:	4505                	li	a0,1
2000264c:	c991                	beqz	a1,20002660 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
2000264e:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20002650:	4010                	lw	a2,0(s0)
20002652:	4501                	li	a0,0
20002654:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002656:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000265a:	c60c                	sw	a1,8(a2)
2000265c:	a011                	j	20002660 <dif_uart_irq_force+0x2a>
2000265e:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20002660:	4422                	lw	s0,8(sp)
20002662:	40b2                	lw	ra,12(sp)
20002664:	0141                	addi	sp,sp,16
20002666:	8082                	ret

20002668 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20002668:	cd09                	beqz	a0,20002682 <dif_uart_watermark_rx_set+0x1a>
2000266a:	4691                	li	a3,4
2000266c:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000266e:	00b6eb63          	bltu	a3,a1,20002684 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20002672:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002674:	4d54                	lw	a3,28(a0)
20002676:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20002678:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
2000267a:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000267c:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000267e:	cd4c                	sw	a1,28(a0)
20002680:	a011                	j	20002684 <dif_uart_watermark_rx_set+0x1c>
20002682:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20002684:	8532                	mv	a0,a2
20002686:	8082                	ret

20002688 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20002688:	cd11                	beqz	a0,200026a4 <dif_uart_watermark_tx_set+0x1c>
2000268a:	468d                	li	a3,3
2000268c:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000268e:	00b6ec63          	bltu	a3,a1,200026a6 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20002692:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002694:	4d54                	lw	a3,28(a0)
20002696:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20002698:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000269a:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000269e:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200026a0:	cd4c                	sw	a1,28(a0)
200026a2:	a011                	j	200026a6 <dif_uart_watermark_tx_set+0x1e>
200026a4:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200026a6:	8532                	mv	a0,a2
200026a8:	8082                	ret

200026aa <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200026aa:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200026ac:	c51d                	beqz	a0,200026da <dif_uart_bytes_send+0x30>
200026ae:	c595                	beqz	a1,200026da <dif_uart_bytes_send+0x30>
200026b0:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200026b2:	c20d                	beqz	a2,200026d4 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200026b4:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200026b8:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200026bc:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200026be:	eb19                	bnez	a4,200026d4 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
200026c0:	00f58733          	add	a4,a1,a5
200026c4:	00074703          	lbu	a4,0(a4) # 20000000 <_stack_end+0xffe0000>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
200026c8:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200026ca:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200026ce:	fef613e3          	bne	a2,a5,200026b4 <dif_uart_bytes_send+0xa>
200026d2:	87b2                	mv	a5,a2
200026d4:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
200026d6:	c291                	beqz	a3,200026da <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
200026d8:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
200026da:	853a                	mv	a0,a4
200026dc:	8082                	ret

200026de <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
200026de:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
200026e0:	c515                	beqz	a0,2000270c <dif_uart_bytes_receive+0x2e>
200026e2:	c60d                	beqz	a2,2000270c <dif_uart_bytes_receive+0x2e>
200026e4:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200026e6:	cd99                	beqz	a1,20002704 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200026e8:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200026ea:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200026ec:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200026f0:	eb91                	bnez	a5,20002704 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200026f2:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200026f4:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
200026f8:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200026fa:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200026fe:	ff0595e3          	bne	a1,a6,200026e8 <dif_uart_bytes_receive+0xa>
20002702:	882e                	mv	a6,a1
20002704:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20002706:	c299                	beqz	a3,2000270c <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20002708:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
2000270c:	853a                	mv	a0,a4
2000270e:	8082                	ret

20002710 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20002710:	cd19                	beqz	a0,2000272e <dif_uart_byte_send_polled+0x1e>
20002712:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20002714:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20002716:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20002718:	fef5                	bnez	a3,20002714 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000271a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000271c:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000271e:	e299                	bnez	a3,20002724 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002720:	ce0c                	sw	a1,24(a2)
20002722:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002724:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20002726:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20002728:	dd75                	beqz	a0,20002724 <dif_uart_byte_send_polled+0x14>
2000272a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
2000272c:	8082                	ret
2000272e:	4509                	li	a0,2
20002730:	8082                	ret

20002732 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20002732:	862a                	mv	a2,a0
20002734:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20002736:	c205                	beqz	a2,20002756 <dif_uart_byte_receive_polled+0x24>
20002738:	cd99                	beqz	a1,20002756 <dif_uart_byte_receive_polled+0x24>
2000273a:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000273c:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000273e:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20002742:	fd6d                	bnez	a0,2000273c <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20002744:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20002746:	02057693          	andi	a3,a0,32
2000274a:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000274c:	e689                	bnez	a3,20002756 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000274e:	4a50                	lw	a2,20(a2)
20002750:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20002752:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20002756:	8082                	ret

20002758 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20002758:	862a                	mv	a2,a0
2000275a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
2000275c:	ca09                	beqz	a2,2000276e <dif_uart_rx_bytes_available+0x16>
2000275e:	c981                	beqz	a1,2000276e <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20002760:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20002762:	5110                	lw	a2,32(a0)
20002764:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20002766:	8241                	srli	a2,a2,0x10
20002768:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
2000276c:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
2000276e:	8082                	ret

20002770 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20002770:	862a                	mv	a2,a0
20002772:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20002774:	ce01                	beqz	a2,2000278c <dif_uart_tx_bytes_available+0x1c>
20002776:	c999                	beqz	a1,2000278c <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20002778:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000277a:	5110                	lw	a2,32(a0)
2000277c:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
2000277e:	03f67613          	andi	a2,a2,63
20002782:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20002786:	40c68633          	sub	a2,a3,a2
2000278a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
2000278c:	8082                	ret

2000278e <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
2000278e:	c11d                	beqz	a0,200027b4 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20002790:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20002792:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20002794:	ffd5f693          	andi	a3,a1,-3
20002798:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
2000279c:	fff58713          	addi	a4,a1,-1
200027a0:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200027a2:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200027a6:	00f77463          	bgeu	a4,a5,200027ae <dif_uart_fifo_reset+0x20>
200027aa:	0025e593          	ori	a1,a1,2
200027ae:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200027b0:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200027b2:	8082                	ret
200027b4:	4509                	li	a0,2
200027b6:	8082                	ret

200027b8 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
200027b8:	c515                	beqz	a0,200027e4 <dif_uart_loopback_set+0x2c>
200027ba:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
200027bc:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
200027be:	0015b593          	seqz	a1,a1
200027c2:	4715                	li	a4,5
200027c4:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200027c8:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
200027ca:	00163613          	seqz	a2,a2
200027ce:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200027d0:	00b797b3          	sll	a5,a5,a1
200027d4:	fff7c793          	not	a5,a5
200027d8:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200027da:	00b615b3          	sll	a1,a2,a1
200027de:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200027e0:	c54c                	sw	a1,12(a0)
200027e2:	a011                	j	200027e6 <dif_uart_loopback_set+0x2e>
200027e4:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200027e6:	8536                	mv	a0,a3
200027e8:	8082                	ret

200027ea <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
200027ea:	862a                	mv	a2,a0
200027ec:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
200027ee:	ca11                	beqz	a2,20002802 <dif_uart_enable_rx_timeout+0x18>
200027f0:	0185d693          	srli	a3,a1,0x18
200027f4:	e699                	bnez	a3,20002802 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200027f6:	4210                	lw	a2,0(a2)
200027f8:	4501                	li	a0,0
200027fa:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200027fe:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20002800:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20002802:	8082                	ret

20002804 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20002804:	c511                	beqz	a0,20002810 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20002806:	410c                	lw	a1,0(a0)
20002808:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000280a:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
2000280e:	8082                	ret
20002810:	4509                	li	a0,2
20002812:	8082                	ret

20002814 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20002814:	86aa                	mv	a3,a0
20002816:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20002818:	ce99                	beqz	a3,20002836 <dif_uart_get_rx_timeout+0x22>
2000281a:	cd91                	beqz	a1,20002836 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
2000281c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000281e:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20002820:	fff6c513          	not	a0,a3
20002824:	817d                	srli	a0,a0,0x1f
20002826:	c188                	sw	a0,0(a1)
20002828:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
2000282a:	c611                	beqz	a2,20002836 <dif_uart_get_rx_timeout+0x22>
2000282c:	010005b7          	lui	a1,0x1000
20002830:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20002832:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20002834:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20002836:	8082                	ret

20002838 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20002838:	10500073          	wfi
2000283c:	8082                	ret

2000283e <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
2000283e:	1141                	addi	sp,sp,-16
20002840:	c606                	sw	ra,12(sp)
20002842:	00001597          	auipc	a1,0x1
20002846:	3d658593          	addi	a1,a1,982 # 20003c18 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
2000284a:	41d0                	lw	a2,4(a1)
2000284c:	4194                	lw	a3,0(a1)
2000284e:	02a605b3          	mul	a1,a2,a0
20002852:	02a6b633          	mulhu	a2,a3,a0
20002856:	95b2                	add	a1,a1,a2
20002858:	02a68533          	mul	a0,a3,a0
2000285c:	000f4637          	lui	a2,0xf4
20002860:	24060613          	addi	a2,a2,576 # f4240 <init_uart.kLogFields.2+0xe3cdc>
20002864:	4681                	li	a3,0
20002866:	23cd                	jal	20002e48 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20002868:	4801                	li	a6,0
2000286a:	4701                	li	a4,0

2000286c <read0>:
2000286c:	b8002873          	csrr	a6,mcycleh
20002870:	b00026f3          	csrr	a3,mcycle
20002874:	b8002773          	csrr	a4,mcycleh
20002878:	fee81ae3          	bne	a6,a4,2000286c <read0>
2000287c:	4781                	li	a5,0
2000287e:	4601                	li	a2,0

20002880 <read1>:
20002880:	b80027f3          	csrr	a5,mcycleh
20002884:	b0002773          	csrr	a4,mcycle
20002888:	b8002673          	csrr	a2,mcycleh
2000288c:	fec79ae3          	bne	a5,a2,20002880 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20002890:	00d73633          	sltu	a2,a4,a3
20002894:	410787b3          	sub	a5,a5,a6
20002898:	8f91                	sub	a5,a5,a2
2000289a:	00b78663          	beq	a5,a1,200028a6 <read1+0x26>
2000289e:	00b7b733          	sltu	a4,a5,a1
200028a2:	ff69                	bnez	a4,2000287c <read0+0x10>
200028a4:	a031                	j	200028b0 <read1+0x30>
200028a6:	40d70633          	sub	a2,a4,a3
200028aa:	00a63733          	sltu	a4,a2,a0
200028ae:	f779                	bnez	a4,2000287c <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200028b0:	40b2                	lw	ra,12(sp)
200028b2:	0141                	addi	sp,sp,16
200028b4:	8082                	ret

200028b6 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
200028b6:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
200028ba:	bff5                	j	200028b6 <abort>

200028bc <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
200028bc:	1101                	addi	sp,sp,-32
200028be:	ce06                	sw	ra,28(sp)
200028c0:	cc22                	sw	s0,24(sp)
200028c2:	65b1                	lui	a1,0xc
200028c4:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
200028c8:	02b50163          	beq	a0,a1,200028ea <test_status_set+0x2e>
200028cc:	65a5                	lui	a1,0x9
200028ce:	05b5                	addi	a1,a1,13
200028d0:	02b50f63          	beq	a0,a1,2000290e <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200028d4:	00001597          	auipc	a1,0x1
200028d8:	36858593          	addi	a1,a1,872 # 20003c3c <kDeviceTestStatusAddress>
200028dc:	418c                	lw	a1,0(a1)
200028de:	c191                	beqz	a1,200028e2 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200028e0:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
200028e2:	4462                	lw	s0,24(sp)
200028e4:	40f2                	lw	ra,28(sp)
200028e6:	6105                	addi	sp,sp,32
200028e8:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200028ea:	00001517          	auipc	a0,0x1
200028ee:	35650513          	addi	a0,a0,854 # 20003c40 <kDeviceLogBypassUartAddress>
200028f2:	4108                	lw	a0,0(a0)
200028f4:	ed1d                	bnez	a0,20002932 <test_status_set+0x76>
200028f6:	00001597          	auipc	a1,0x1
200028fa:	f0658593          	addi	a1,a1,-250 # 200037fc <kDifUartFifoSizeBytes+0x18>
200028fe:	840a                	mv	s0,sp
20002900:	4651                	li	a2,20
20002902:	8522                	mv	a0,s0
20002904:	29b1                	jal	20002d60 <memcpy>
20002906:	8522                	mv	a0,s0
20002908:	dc0ff0ef          	jal	ra,20001ec8 <base_log_internal_core>
2000290c:	a815                	j	20002940 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
2000290e:	00001517          	auipc	a0,0x1
20002912:	33250513          	addi	a0,a0,818 # 20003c40 <kDeviceLogBypassUartAddress>
20002916:	4108                	lw	a0,0(a0)
20002918:	ed15                	bnez	a0,20002954 <test_status_set+0x98>
2000291a:	00001597          	auipc	a1,0x1
2000291e:	ece58593          	addi	a1,a1,-306 # 200037e8 <kDifUartFifoSizeBytes+0x4>
20002922:	840a                	mv	s0,sp
20002924:	4651                	li	a2,20
20002926:	8522                	mv	a0,s0
20002928:	2925                	jal	20002d60 <memcpy>
2000292a:	8522                	mv	a0,s0
2000292c:	d9cff0ef          	jal	ra,20001ec8 <base_log_internal_core>
20002930:	a80d                	j	20002962 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20002932:	e000e517          	auipc	a0,0xe000e
20002936:	b9250513          	addi	a0,a0,-1134 # 104c4 <test_status_set.kLogFields.2>
2000293a:	4581                	li	a1,0
2000293c:	e36ff0ef          	jal	ra,20001f72 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20002940:	00001517          	auipc	a0,0x1
20002944:	2fc50513          	addi	a0,a0,764 # 20003c3c <kDeviceTestStatusAddress>
20002948:	4108                	lw	a0,0(a0)
2000294a:	c50d                	beqz	a0,20002974 <test_status_set+0xb8>
2000294c:	65b1                	lui	a1,0xc
2000294e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20002952:	a005                	j	20002972 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20002954:	e000e517          	auipc	a0,0xe000e
20002958:	b5c50513          	addi	a0,a0,-1188 # 104b0 <test_status_set.kLogFields>
2000295c:	4581                	li	a1,0
2000295e:	e14ff0ef          	jal	ra,20001f72 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20002962:	00001517          	auipc	a0,0x1
20002966:	2da50513          	addi	a0,a0,730 # 20003c3c <kDeviceTestStatusAddress>
2000296a:	4108                	lw	a0,0(a0)
2000296c:	c501                	beqz	a0,20002974 <test_status_set+0xb8>
2000296e:	65a5                	lui	a1,0x9
20002970:	05b5                	addi	a1,a1,13
20002972:	c10c                	sw	a1,0(a0)
20002974:	3789                	jal	200028b6 <abort>
	...

20002978 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20002978:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000297a:	de06                	sw	ra,60(sp)
2000297c:	dc16                	sw	t0,56(sp)
2000297e:	da1a                	sw	t1,52(sp)
20002980:	d81e                	sw	t2,48(sp)
20002982:	d62a                	sw	a0,44(sp)
20002984:	d42e                	sw	a1,40(sp)
20002986:	d232                	sw	a2,36(sp)
20002988:	d036                	sw	a3,32(sp)
2000298a:	ce3a                	sw	a4,28(sp)
2000298c:	cc3e                	sw	a5,24(sp)
2000298e:	ca42                	sw	a6,20(sp)
20002990:	c846                	sw	a7,16(sp)
20002992:	c672                	sw	t3,12(sp)
20002994:	c476                	sw	t4,8(sp)
20002996:	c27a                	sw	t5,4(sp)
20002998:	c07e                	sw	t6,0(sp)
2000299a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000299e:	897d                	andi	a0,a0,31
200029a0:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200029a2:	00a5dc63          	bge	a1,a0,200029ba <handler_exception+0x42>
200029a6:	4599                	li	a1,6
200029a8:	02a5c263          	blt	a1,a0,200029cc <handler_exception+0x54>
200029ac:	458d                	li	a1,3
200029ae:	02b50c63          	beq	a0,a1,200029e6 <handler_exception+0x6e>
200029b2:	4595                	li	a1,5
200029b4:	02b50763          	beq	a0,a1,200029e2 <handler_exception+0x6a>
200029b8:	a015                	j	200029dc <handler_exception+0x64>
200029ba:	c115                	beqz	a0,200029de <handler_exception+0x66>
200029bc:	4585                	li	a1,1
200029be:	02b50063          	beq	a0,a1,200029de <handler_exception+0x66>
200029c2:	4589                	li	a1,2
200029c4:	00b51c63          	bne	a0,a1,200029dc <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200029c8:	208d                	jal	20002a2a <handler_instr_ill_fault>
200029ca:	a839                	j	200029e8 <handler_exception+0x70>
200029cc:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200029ce:	00b50a63          	beq	a0,a1,200029e2 <handler_exception+0x6a>
200029d2:	45ad                	li	a1,11
200029d4:	00b51463          	bne	a0,a1,200029dc <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200029d8:	2065                	jal	20002a80 <handler_ecall>
200029da:	a039                	j	200029e8 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200029dc:	a001                	j	200029dc <handler_exception+0x64>
200029de:	2805                	jal	20002a0e <handler_instr_acc_fault>
200029e0:	a021                	j	200029e8 <handler_exception+0x70>
200029e2:	2049                	jal	20002a64 <handler_lsu_fault>
200029e4:	a011                	j	200029e8 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200029e6:	208d                	jal	20002a48 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200029e8:	4f82                	lw	t6,0(sp)
200029ea:	4f12                	lw	t5,4(sp)
200029ec:	4ea2                	lw	t4,8(sp)
200029ee:	4e32                	lw	t3,12(sp)
200029f0:	48c2                	lw	a7,16(sp)
200029f2:	4852                	lw	a6,20(sp)
200029f4:	47e2                	lw	a5,24(sp)
200029f6:	4772                	lw	a4,28(sp)
200029f8:	5682                	lw	a3,32(sp)
200029fa:	5612                	lw	a2,36(sp)
200029fc:	55a2                	lw	a1,40(sp)
200029fe:	5532                	lw	a0,44(sp)
20002a00:	53c2                	lw	t2,48(sp)
20002a02:	5352                	lw	t1,52(sp)
20002a04:	52e2                	lw	t0,56(sp)
20002a06:	50f2                	lw	ra,60(sp)
20002a08:	6121                	addi	sp,sp,64
20002a0a:	30200073          	mret

20002a0e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20002a0e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20002a10:	de06                	sw	ra,60(sp)
20002a12:	dc22                	sw	s0,56(sp)
20002a14:	00002597          	auipc	a1,0x2
20002a18:	d5f58593          	addi	a1,a1,-673 # 20004773 <__clz_tab+0xb2f>
20002a1c:	0040                	addi	s0,sp,4
20002a1e:	03400613          	li	a2,52
20002a22:	8522                	mv	a0,s0
20002a24:	2e35                	jal	20002d60 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
20002a26:	8522                	mv	a0,s0
20002a28:	2a71                	jal	20002bc4 <print_exc_msg>

20002a2a <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20002a2a:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20002a2c:	c686                	sw	ra,76(sp)
20002a2e:	c4a2                	sw	s0,72(sp)
20002a30:	00002597          	auipc	a1,0x2
20002a34:	d7758593          	addi	a1,a1,-649 # 200047a7 <__clz_tab+0xb63>
20002a38:	00d10413          	addi	s0,sp,13
20002a3c:	03b00613          	li	a2,59
20002a40:	8522                	mv	a0,s0
20002a42:	2e39                	jal	20002d60 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20002a44:	8522                	mv	a0,s0
20002a46:	2abd                	jal	20002bc4 <print_exc_msg>

20002a48 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20002a48:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20002a4a:	de06                	sw	ra,60(sp)
20002a4c:	dc22                	sw	s0,56(sp)
20002a4e:	00002597          	auipc	a1,0x2
20002a52:	d9458593          	addi	a1,a1,-620 # 200047e2 <__clz_tab+0xb9e>
20002a56:	840a                	mv	s0,sp
20002a58:	03800613          	li	a2,56
20002a5c:	8522                	mv	a0,s0
20002a5e:	2609                	jal	20002d60 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20002a60:	8522                	mv	a0,s0
20002a62:	228d                	jal	20002bc4 <print_exc_msg>

20002a64 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20002a64:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20002a66:	de06                	sw	ra,60(sp)
20002a68:	dc22                	sw	s0,56(sp)
20002a6a:	00002597          	auipc	a1,0x2
20002a6e:	db058593          	addi	a1,a1,-592 # 2000481a <__clz_tab+0xbd6>
20002a72:	0020                	addi	s0,sp,8
20002a74:	03000613          	li	a2,48
20002a78:	8522                	mv	a0,s0
20002a7a:	24dd                	jal	20002d60 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20002a7c:	8522                	mv	a0,s0
20002a7e:	2299                	jal	20002bc4 <print_exc_msg>

20002a80 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20002a80:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20002a82:	ce06                	sw	ra,28(sp)
20002a84:	cc22                	sw	s0,24(sp)
20002a86:	00001517          	auipc	a0,0x1
20002a8a:	1ba50513          	addi	a0,a0,442 # 20003c40 <kDeviceLogBypassUartAddress>
20002a8e:	4108                	lw	a0,0(a0)
20002a90:	c909                	beqz	a0,20002aa2 <handler_ecall+0x22>
20002a92:	e000e517          	auipc	a0,0xe000e
20002a96:	a8250513          	addi	a0,a0,-1406 # 10514 <handler_ecall.kLogFields>
20002a9a:	4581                	li	a1,0
20002a9c:	cd6ff0ef          	jal	ra,20001f72 <base_log_internal_dv>
20002aa0:	a821                	j	20002ab8 <handler_ecall+0x38>
20002aa2:	00001597          	auipc	a1,0x1
20002aa6:	daa58593          	addi	a1,a1,-598 # 2000384c <kDifUartFifoSizeBytes+0x68>
20002aaa:	840a                	mv	s0,sp
20002aac:	4651                	li	a2,20
20002aae:	8522                	mv	a0,s0
20002ab0:	2c45                	jal	20002d60 <memcpy>
20002ab2:	8522                	mv	a0,s0
20002ab4:	c14ff0ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20002ab8:	a001                	j	20002ab8 <handler_ecall+0x38>
20002aba:	0001                	nop

20002abc <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20002abc:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
20002abe:	ce86                	sw	ra,92(sp)
20002ac0:	cc96                	sw	t0,88(sp)
20002ac2:	ca9a                	sw	t1,84(sp)
20002ac4:	c89e                	sw	t2,80(sp)
20002ac6:	c6a2                	sw	s0,76(sp)
20002ac8:	c4aa                	sw	a0,72(sp)
20002aca:	c2ae                	sw	a1,68(sp)
20002acc:	c0b2                	sw	a2,64(sp)
20002ace:	de36                	sw	a3,60(sp)
20002ad0:	dc3a                	sw	a4,56(sp)
20002ad2:	da3e                	sw	a5,52(sp)
20002ad4:	d842                	sw	a6,48(sp)
20002ad6:	d646                	sw	a7,44(sp)
20002ad8:	d472                	sw	t3,40(sp)
20002ada:	d276                	sw	t4,36(sp)
20002adc:	d07a                	sw	t5,32(sp)
20002ade:	ce7e                	sw	t6,28(sp)
20002ae0:	00001517          	auipc	a0,0x1
20002ae4:	16050513          	addi	a0,a0,352 # 20003c40 <kDeviceLogBypassUartAddress>
20002ae8:	4108                	lw	a0,0(a0)
20002aea:	c909                	beqz	a0,20002afc <handler_irq_software+0x40>
20002aec:	e000e517          	auipc	a0,0xe000e
20002af0:	9ec50513          	addi	a0,a0,-1556 # 104d8 <handler_irq_software.kLogFields>
20002af4:	4581                	li	a1,0
20002af6:	c7cff0ef          	jal	ra,20001f72 <base_log_internal_dv>
20002afa:	a821                	j	20002b12 <handler_irq_software+0x56>
20002afc:	00001597          	auipc	a1,0x1
20002b00:	d1458593          	addi	a1,a1,-748 # 20003810 <kDifUartFifoSizeBytes+0x2c>
20002b04:	0020                	addi	s0,sp,8
20002b06:	4651                	li	a2,20
20002b08:	8522                	mv	a0,s0
20002b0a:	2c99                	jal	20002d60 <memcpy>
20002b0c:	8522                	mv	a0,s0
20002b0e:	bbaff0ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
20002b12:	a001                	j	20002b12 <handler_irq_software+0x56>

20002b14 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
20002b14:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
20002b16:	ce86                	sw	ra,92(sp)
20002b18:	cc96                	sw	t0,88(sp)
20002b1a:	ca9a                	sw	t1,84(sp)
20002b1c:	c89e                	sw	t2,80(sp)
20002b1e:	c6a2                	sw	s0,76(sp)
20002b20:	c4aa                	sw	a0,72(sp)
20002b22:	c2ae                	sw	a1,68(sp)
20002b24:	c0b2                	sw	a2,64(sp)
20002b26:	de36                	sw	a3,60(sp)
20002b28:	dc3a                	sw	a4,56(sp)
20002b2a:	da3e                	sw	a5,52(sp)
20002b2c:	d842                	sw	a6,48(sp)
20002b2e:	d646                	sw	a7,44(sp)
20002b30:	d472                	sw	t3,40(sp)
20002b32:	d276                	sw	t4,36(sp)
20002b34:	d07a                	sw	t5,32(sp)
20002b36:	ce7e                	sw	t6,28(sp)
20002b38:	00001517          	auipc	a0,0x1
20002b3c:	10850513          	addi	a0,a0,264 # 20003c40 <kDeviceLogBypassUartAddress>
20002b40:	4108                	lw	a0,0(a0)
20002b42:	c909                	beqz	a0,20002b54 <handler_irq_timer+0x40>
20002b44:	e000e517          	auipc	a0,0xe000e
20002b48:	9a850513          	addi	a0,a0,-1624 # 104ec <handler_irq_timer.kLogFields>
20002b4c:	4581                	li	a1,0
20002b4e:	c24ff0ef          	jal	ra,20001f72 <base_log_internal_dv>
20002b52:	a821                	j	20002b6a <handler_irq_timer+0x56>
20002b54:	00001597          	auipc	a1,0x1
20002b58:	cd058593          	addi	a1,a1,-816 # 20003824 <kDifUartFifoSizeBytes+0x40>
20002b5c:	0020                	addi	s0,sp,8
20002b5e:	4651                	li	a2,20
20002b60:	8522                	mv	a0,s0
20002b62:	2afd                	jal	20002d60 <memcpy>
20002b64:	8522                	mv	a0,s0
20002b66:	b62ff0ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20002b6a:	a001                	j	20002b6a <handler_irq_timer+0x56>
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20002b6c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20002b6e:	ce86                	sw	ra,92(sp)
20002b70:	cc96                	sw	t0,88(sp)
20002b72:	ca9a                	sw	t1,84(sp)
20002b74:	c89e                	sw	t2,80(sp)
20002b76:	c6a2                	sw	s0,76(sp)
20002b78:	c4aa                	sw	a0,72(sp)
20002b7a:	c2ae                	sw	a1,68(sp)
20002b7c:	c0b2                	sw	a2,64(sp)
20002b7e:	de36                	sw	a3,60(sp)
20002b80:	dc3a                	sw	a4,56(sp)
20002b82:	da3e                	sw	a5,52(sp)
20002b84:	d842                	sw	a6,48(sp)
20002b86:	d646                	sw	a7,44(sp)
20002b88:	d472                	sw	t3,40(sp)
20002b8a:	d276                	sw	t4,36(sp)
20002b8c:	d07a                	sw	t5,32(sp)
20002b8e:	ce7e                	sw	t6,28(sp)
20002b90:	00001517          	auipc	a0,0x1
20002b94:	0b050513          	addi	a0,a0,176 # 20003c40 <kDeviceLogBypassUartAddress>
20002b98:	4108                	lw	a0,0(a0)
20002b9a:	c909                	beqz	a0,20002bac <handler_irq_timer+0x98>
20002b9c:	e000e517          	auipc	a0,0xe000e
20002ba0:	96450513          	addi	a0,a0,-1692 # 10500 <handler_irq_external.kLogFields>
20002ba4:	4581                	li	a1,0
20002ba6:	bccff0ef          	jal	ra,20001f72 <base_log_internal_dv>
20002baa:	a821                	j	20002bc2 <handler_irq_timer+0xae>
20002bac:	00001597          	auipc	a1,0x1
20002bb0:	c8c58593          	addi	a1,a1,-884 # 20003838 <kDifUartFifoSizeBytes+0x54>
20002bb4:	0020                	addi	s0,sp,8
20002bb6:	4651                	li	a2,20
20002bb8:	8522                	mv	a0,s0
20002bba:	225d                	jal	20002d60 <memcpy>
20002bbc:	8522                	mv	a0,s0
20002bbe:	b0aff0ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20002bc2:	a001                	j	20002bc2 <handler_irq_timer+0xae>

20002bc4 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20002bc4:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20002bc6:	ce06                	sw	ra,28(sp)
20002bc8:	cc22                	sw	s0,24(sp)
20002bca:	ca26                	sw	s1,20(sp)
20002bcc:	00001597          	auipc	a1,0x1
20002bd0:	07458593          	addi	a1,a1,116 # 20003c40 <kDeviceLogBypassUartAddress>
20002bd4:	418c                	lw	a1,0(a1)
20002bd6:	842a                	mv	s0,a0
20002bd8:	c19d                	beqz	a1,20002bfe <print_exc_msg+0x3a>
20002bda:	e000e517          	auipc	a0,0xe000e
20002bde:	94e50513          	addi	a0,a0,-1714 # 10528 <print_exc_msg.kLogFields>
20002be2:	4585                	li	a1,1
20002be4:	8622                	mv	a2,s0
20002be6:	b8cff0ef          	jal	ra,20001f72 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20002bea:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20002bee:	e000e517          	auipc	a0,0xe000e
20002bf2:	94e50513          	addi	a0,a0,-1714 # 1053c <print_exc_msg.kLogFields.6>
20002bf6:	4585                	li	a1,1
20002bf8:	b7aff0ef          	jal	ra,20001f72 <base_log_internal_dv>
20002bfc:	a81d                	j	20002c32 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20002bfe:	00001597          	auipc	a1,0x1
20002c02:	c6258593          	addi	a1,a1,-926 # 20003860 <kDifUartFifoSizeBytes+0x7c>
20002c06:	848a                	mv	s1,sp
20002c08:	4651                	li	a2,20
20002c0a:	8526                	mv	a0,s1
20002c0c:	2a91                	jal	20002d60 <memcpy>
20002c0e:	8526                	mv	a0,s1
20002c10:	85a2                	mv	a1,s0
20002c12:	ab6ff0ef          	jal	ra,20001ec8 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20002c16:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20002c1a:	00001597          	auipc	a1,0x1
20002c1e:	c5a58593          	addi	a1,a1,-934 # 20003874 <kDifUartFifoSizeBytes+0x90>
20002c22:	848a                	mv	s1,sp
20002c24:	4651                	li	a2,20
20002c26:	8526                	mv	a0,s1
20002c28:	2a25                	jal	20002d60 <memcpy>
20002c2a:	8526                	mv	a0,s1
20002c2c:	85a2                	mv	a1,s0
20002c2e:	a9aff0ef          	jal	ra,20001ec8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20002c32:	a001                	j	20002c32 <print_exc_msg+0x6e>

20002c34 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20002c34:	1141                	addi	sp,sp,-16
20002c36:	c606                	sw	ra,12(sp)
20002c38:	c422                	sw	s0,8(sp)
20002c3a:	6511                	lui	a0,0x4
20002c3c:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20002c40:	c7dff0ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20002c44:	00001517          	auipc	a0,0x1
20002c48:	fcc50513          	addi	a0,a0,-52 # 20003c10 <kDeviceType>
20002c4c:	4108                	lw	a0,0(a0)
20002c4e:	c111                	beqz	a0,20002c52 <main+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20002c50:	281d                	jal	20002c86 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20002c52:	90bfd0ef          	jal	ra,2000055c <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20002c56:	00000597          	auipc	a1,0x0
20002c5a:	65e58593          	addi	a1,a1,1630 # 200032b4 <kTestConfig>
20002c5e:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20002c62:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20002c64:	c191                	beqz	a1,20002c68 <main+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20002c66:	2005                	jal	20002c86 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20002c68:	20f5                	jal	20002d54 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20002c6a:	e409                	bnez	s0,20002c74 <main+0x40>
20002c6c:	6531                	lui	a0,0xc
20002c6e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20002c72:	a019                	j	20002c78 <main+0x44>
20002c74:	6525                	lui	a0,0x9
20002c76:	0535                	addi	a0,a0,13
20002c78:	c45ff0ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20002c7c:	4505                	li	a0,1
20002c7e:	4422                	lw	s0,8(sp)
20002c80:	40b2                	lw	ra,12(sp)
20002c82:	0141                	addi	sp,sp,16
20002c84:	8082                	ret

20002c86 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20002c86:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20002c88:	ce06                	sw	ra,28(sp)
20002c8a:	cc22                	sw	s0,24(sp)
20002c8c:	ca26                	sw	s1,20(sp)
20002c8e:	efffd597          	auipc	a1,0xefffd
20002c92:	39658593          	addi	a1,a1,918 # 10000024 <uart0>
20002c96:	40000537          	lui	a0,0x40000
20002c9a:	fd6ff0ef          	jal	ra,20002470 <dif_uart_init>
20002c9e:	00001497          	auipc	s1,0x1
20002ca2:	fa248493          	addi	s1,s1,-94 # 20003c40 <kDeviceLogBypassUartAddress>
20002ca6:	c91d                	beqz	a0,20002cdc <init_uart+0x56>
20002ca8:	4088                	lw	a0,0(s1)
20002caa:	c909                	beqz	a0,20002cbc <init_uart+0x36>
20002cac:	e000e517          	auipc	a0,0xe000e
20002cb0:	8a450513          	addi	a0,a0,-1884 # 10550 <init_uart.kLogFields>
20002cb4:	4581                	li	a1,0
20002cb6:	abcff0ef          	jal	ra,20001f72 <base_log_internal_dv>
20002cba:	a821                	j	20002cd2 <init_uart+0x4c>
20002cbc:	00001597          	auipc	a1,0x1
20002cc0:	bcc58593          	addi	a1,a1,-1076 # 20003888 <kDifUartFifoSizeBytes+0xa4>
20002cc4:	840a                	mv	s0,sp
20002cc6:	4651                	li	a2,20
20002cc8:	8522                	mv	a0,s0
20002cca:	2859                	jal	20002d60 <memcpy>
20002ccc:	8522                	mv	a0,s0
20002cce:	9faff0ef          	jal	ra,20001ec8 <base_log_internal_core>
20002cd2:	6531                	lui	a0,0xc
20002cd4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20002cd8:	be5ff0ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20002cdc:	00001517          	auipc	a0,0x1
20002ce0:	f5450513          	addi	a0,a0,-172 # 20003c30 <kUartBaudrate>
20002ce4:	4108                	lw	a0,0(a0)
20002ce6:	00001597          	auipc	a1,0x1
20002cea:	f3a58593          	addi	a1,a1,-198 # 20003c20 <kClockFreqPeripheralHz>
20002cee:	418c                	lw	a1,0(a1)
20002cf0:	c02a                	sw	a0,0(sp)
20002cf2:	c22e                	sw	a1,4(sp)
20002cf4:	4505                	li	a0,1
20002cf6:	c42a                	sw	a0,8(sp)
20002cf8:	c62a                	sw	a0,12(sp)
20002cfa:	efffd517          	auipc	a0,0xefffd
20002cfe:	32a50513          	addi	a0,a0,810 # 10000024 <uart0>
20002d02:	858a                	mv	a1,sp
20002d04:	f7aff0ef          	jal	ra,2000247e <dif_uart_configure>
20002d08:	c91d                	beqz	a0,20002d3e <init_uart+0xb8>
20002d0a:	4088                	lw	a0,0(s1)
20002d0c:	c909                	beqz	a0,20002d1e <init_uart+0x98>
20002d0e:	e000e517          	auipc	a0,0xe000e
20002d12:	85650513          	addi	a0,a0,-1962 # 10564 <init_uart.kLogFields.2>
20002d16:	4581                	li	a1,0
20002d18:	a5aff0ef          	jal	ra,20001f72 <base_log_internal_dv>
20002d1c:	a821                	j	20002d34 <init_uart+0xae>
20002d1e:	00001597          	auipc	a1,0x1
20002d22:	b7e58593          	addi	a1,a1,-1154 # 2000389c <kDifUartFifoSizeBytes+0xb8>
20002d26:	840a                	mv	s0,sp
20002d28:	4651                	li	a2,20
20002d2a:	8522                	mv	a0,s0
20002d2c:	2815                	jal	20002d60 <memcpy>
20002d2e:	8522                	mv	a0,s0
20002d30:	998ff0ef          	jal	ra,20001ec8 <base_log_internal_core>
20002d34:	6531                	lui	a0,0xc
20002d36:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20002d3a:	b83ff0ef          	jal	ra,200028bc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
20002d3e:	efffd517          	auipc	a0,0xefffd
20002d42:	2e650513          	addi	a0,a0,742 # 10000024 <uart0>
20002d46:	a7eff0ef          	jal	ra,20001fc4 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20002d4a:	44d2                	lw	s1,20(sp)
20002d4c:	4462                	lw	s0,24(sp)
20002d4e:	40f2                	lw	ra,28(sp)
20002d50:	6105                	addi	sp,sp,32
20002d52:	8082                	ret

20002d54 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20002d54:	8082                	ret
	...

20002d58 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20002d58:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20002d5a:	8082                	ret

20002d5c <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20002d5c:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20002d5e:	8082                	ret

20002d60 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20002d60:	ca11                	beqz	a2,20002d74 <memcpy+0x14>
20002d62:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20002d64:	00058703          	lb	a4,0(a1)
20002d68:	00e68023          	sb	a4,0(a3) # 80000000 <_data_init_start+0x5fffb718>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20002d6c:	167d                	addi	a2,a2,-1
20002d6e:	0685                	addi	a3,a3,1
20002d70:	0585                	addi	a1,a1,1
20002d72:	fa6d                	bnez	a2,20002d64 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20002d74:	8082                	ret

20002d76 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20002d76:	c619                	beqz	a2,20002d84 <memset+0xe>
20002d78:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20002d7a:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20002d7e:	167d                	addi	a2,a2,-1
20002d80:	0685                	addi	a3,a3,1
20002d82:	fe65                	bnez	a2,20002d7a <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20002d84:	8082                	ret

20002d86 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20002d86:	ce09                	beqz	a2,20002da0 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20002d88:	00054683          	lbu	a3,0(a0)
20002d8c:	0005c703          	lbu	a4,0(a1)
20002d90:	00e6ea63          	bltu	a3,a4,20002da4 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20002d94:	00d76b63          	bltu	a4,a3,20002daa <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20002d98:	167d                	addi	a2,a2,-1
20002d9a:	0585                	addi	a1,a1,1
20002d9c:	0505                	addi	a0,a0,1
20002d9e:	f66d                	bnez	a2,20002d88 <memcmp+0x2>
20002da0:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
20002da2:	8082                	ret
20002da4:	fd600513          	li	a0,-42
20002da8:	8082                	ret
20002daa:	02a00513          	li	a0,42
20002dae:	8082                	ret

20002db0 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20002db0:	ca11                	beqz	a2,20002dc4 <memchr+0x14>
20002db2:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20002db6:	00054683          	lbu	a3,0(a0)
20002dba:	00b68663          	beq	a3,a1,20002dc6 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20002dbe:	167d                	addi	a2,a2,-1
20002dc0:	0505                	addi	a0,a0,1
20002dc2:	fa75                	bnez	a2,20002db6 <memchr+0x6>
20002dc4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20002dc6:	8082                	ret

20002dc8 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20002dc8:	ce09                	beqz	a2,20002de2 <memrchr+0x1a>
20002dca:	fff50693          	addi	a3,a0,-1
20002dce:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20002dd2:	00c68733          	add	a4,a3,a2
20002dd6:	00074703          	lbu	a4,0(a4)
20002dda:	00b70663          	beq	a4,a1,20002de6 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20002dde:	167d                	addi	a2,a2,-1
20002de0:	fa6d                	bnez	a2,20002dd2 <memrchr+0xa>
20002de2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20002de4:	8082                	ret
20002de6:	9532                	add	a0,a0,a2
20002de8:	157d                	addi	a0,a0,-1
20002dea:	8082                	ret

20002dec <irq_set_vector_offset>:
irq_set_vector_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:14
static const uint32_t IRQ_EXT_ENABLE_OFFSET = 11;
static const uint32_t IRQ_TIMER_ENABLE_OFFSET = 7;
static const uint32_t IRQ_SW_ENABLE_OFFSET = 3;

void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
20002dec:	30551073          	csrw	mtvec,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:15
}
20002df0:	8082                	ret

20002df2 <irq_global_ctrl>:
irq_global_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:18

void irq_global_ctrl(bool en) {
  if (en) {
20002df2:	c509                	beqz	a0,20002dfc <irq_global_ctrl+0xa>
20002df4:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
20002df6:	30052073          	csrs	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
20002dfa:	8082                	ret
20002dfc:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
20002dfe:	30053073          	csrc	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
}
20002e02:	8082                	ret

20002e04 <irq_external_ctrl>:
irq_external_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
20002e04:	c519                	beqz	a0,20002e12 <irq_external_ctrl+0xe>
20002e06:	6505                	lui	a0,0x1
20002e08:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
20002e0c:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20002e10:	8082                	ret
20002e12:	6505                	lui	a0,0x1
20002e14:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20002e18:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
}
20002e1c:	8082                	ret

20002e1e <irq_timer_ctrl>:
irq_timer_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
20002e1e:	c511                	beqz	a0,20002e2a <irq_timer_ctrl+0xc>
20002e20:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
20002e24:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20002e28:	8082                	ret
20002e2a:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20002e2e:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
}
20002e32:	8082                	ret

20002e34 <irq_software_ctrl>:
irq_software_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
20002e34:	c509                	beqz	a0,20002e3e <irq_software_ctrl+0xa>
20002e36:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
20002e38:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20002e3c:	8082                	ret
20002e3e:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20002e40:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
}
20002e44:	8082                	ret
	...

20002e48 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20002e48:	88aa                	mv	a7,a0
20002e4a:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20002e4c:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20002e4e:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20002e50:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20002e52:	20069963          	bnez	a3,20003064 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20002e56:	200046b7          	lui	a3,0x20004
20002e5a:	c4468693          	addi	a3,a3,-956 # 20003c44 <__clz_tab>
20002e5e:	0cc5f063          	bgeu	a1,a2,20002f1e <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20002e62:	6741                	lui	a4,0x10
20002e64:	0ae67663          	bgeu	a2,a4,20002f10 <__udivdi3+0xc8>
20002e68:	0ff00713          	li	a4,255
20002e6c:	00c73733          	sltu	a4,a4,a2
20002e70:	070e                	slli	a4,a4,0x3
20002e72:	00e65533          	srl	a0,a2,a4
20002e76:	96aa                	add	a3,a3,a0
20002e78:	0006c683          	lbu	a3,0(a3)
20002e7c:	02000513          	li	a0,32
20002e80:	9736                	add	a4,a4,a3
20002e82:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20002e86:	00e50c63          	beq	a0,a4,20002e9e <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002e8a:	00d797b3          	sll	a5,a5,a3
20002e8e:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20002e92:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002e96:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20002e9a:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20002e9e:	01085893          	srli	a7,a6,0x10
20002ea2:	0315d7b3          	divu	a5,a1,a7
20002ea6:	01081613          	slli	a2,a6,0x10
20002eaa:	8241                	srli	a2,a2,0x10
20002eac:	01035713          	srli	a4,t1,0x10
20002eb0:	0315f6b3          	remu	a3,a1,a7
20002eb4:	853e                	mv	a0,a5
20002eb6:	02f605b3          	mul	a1,a2,a5
20002eba:	06c2                	slli	a3,a3,0x10
20002ebc:	8f55                	or	a4,a4,a3
20002ebe:	00b77c63          	bgeu	a4,a1,20002ed6 <__udivdi3+0x8e>
20002ec2:	9742                	add	a4,a4,a6
20002ec4:	fff78513          	addi	a0,a5,-1
20002ec8:	01076763          	bltu	a4,a6,20002ed6 <__udivdi3+0x8e>
20002ecc:	00b77563          	bgeu	a4,a1,20002ed6 <__udivdi3+0x8e>
20002ed0:	ffe78513          	addi	a0,a5,-2
20002ed4:	9742                	add	a4,a4,a6
20002ed6:	8f0d                	sub	a4,a4,a1
20002ed8:	031777b3          	remu	a5,a4,a7
20002edc:	0342                	slli	t1,t1,0x10
20002ede:	01035313          	srli	t1,t1,0x10
20002ee2:	03175733          	divu	a4,a4,a7
20002ee6:	07c2                	slli	a5,a5,0x10
20002ee8:	0067e333          	or	t1,a5,t1
20002eec:	02e606b3          	mul	a3,a2,a4
20002ef0:	863a                	mv	a2,a4
20002ef2:	00d37b63          	bgeu	t1,a3,20002f08 <__udivdi3+0xc0>
20002ef6:	9342                	add	t1,t1,a6
20002ef8:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20002efc:	01036663          	bltu	t1,a6,20002f08 <__udivdi3+0xc0>
20002f00:	00d37463          	bgeu	t1,a3,20002f08 <__udivdi3+0xc0>
20002f04:	ffe70613          	addi	a2,a4,-2
20002f08:	0542                	slli	a0,a0,0x10
20002f0a:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20002f0c:	4581                	li	a1,0
20002f0e:	a85d                	j	20002fc4 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20002f10:	01000537          	lui	a0,0x1000
20002f14:	4741                	li	a4,16
20002f16:	f4a66ee3          	bltu	a2,a0,20002e72 <__udivdi3+0x2a>
20002f1a:	4761                	li	a4,24
20002f1c:	bf99                	j	20002e72 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20002f1e:	e601                	bnez	a2,20002f26 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20002f20:	4705                	li	a4,1
20002f22:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002f26:	6741                	lui	a4,0x10
20002f28:	08e87f63          	bgeu	a6,a4,20002fc6 <__udivdi3+0x17e>
20002f2c:	0ff00713          	li	a4,255
20002f30:	01077363          	bgeu	a4,a6,20002f36 <__udivdi3+0xee>
20002f34:	4521                	li	a0,8
20002f36:	00a85733          	srl	a4,a6,a0
20002f3a:	96ba                	add	a3,a3,a4
20002f3c:	0006c703          	lbu	a4,0(a3)
20002f40:	02000613          	li	a2,32
20002f44:	972a                	add	a4,a4,a0
20002f46:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20002f4a:	08e61563          	bne	a2,a4,20002fd4 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20002f4e:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20002f52:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20002f54:	01085893          	srli	a7,a6,0x10
20002f58:	01081613          	slli	a2,a6,0x10
20002f5c:	8241                	srli	a2,a2,0x10
20002f5e:	01035713          	srli	a4,t1,0x10
20002f62:	0317f6b3          	remu	a3,a5,a7
20002f66:	0317d7b3          	divu	a5,a5,a7
20002f6a:	06c2                	slli	a3,a3,0x10
20002f6c:	8f55                	or	a4,a4,a3
20002f6e:	02f60e33          	mul	t3,a2,a5
20002f72:	853e                	mv	a0,a5
20002f74:	01c77c63          	bgeu	a4,t3,20002f8c <__udivdi3+0x144>
20002f78:	9742                	add	a4,a4,a6
20002f7a:	fff78513          	addi	a0,a5,-1
20002f7e:	01076763          	bltu	a4,a6,20002f8c <__udivdi3+0x144>
20002f82:	01c77563          	bgeu	a4,t3,20002f8c <__udivdi3+0x144>
20002f86:	ffe78513          	addi	a0,a5,-2
20002f8a:	9742                	add	a4,a4,a6
20002f8c:	41c70733          	sub	a4,a4,t3
20002f90:	031777b3          	remu	a5,a4,a7
20002f94:	0342                	slli	t1,t1,0x10
20002f96:	01035313          	srli	t1,t1,0x10
20002f9a:	03175733          	divu	a4,a4,a7
20002f9e:	07c2                	slli	a5,a5,0x10
20002fa0:	0067e333          	or	t1,a5,t1
20002fa4:	02e606b3          	mul	a3,a2,a4
20002fa8:	863a                	mv	a2,a4
20002faa:	00d37b63          	bgeu	t1,a3,20002fc0 <__udivdi3+0x178>
20002fae:	9342                	add	t1,t1,a6
20002fb0:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20002fb4:	01036663          	bltu	t1,a6,20002fc0 <__udivdi3+0x178>
20002fb8:	00d37463          	bgeu	t1,a3,20002fc0 <__udivdi3+0x178>
20002fbc:	ffe70613          	addi	a2,a4,-2
20002fc0:	0542                	slli	a0,a0,0x10
20002fc2:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20002fc4:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002fc6:	01000737          	lui	a4,0x1000
20002fca:	4541                	li	a0,16
20002fcc:	f6e865e3          	bltu	a6,a4,20002f36 <__udivdi3+0xee>
20002fd0:	4561                	li	a0,24
20002fd2:	b795                	j	20002f36 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20002fd4:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20002fd8:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20002fdc:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20002fe0:	00d797b3          	sll	a5,a5,a3
20002fe4:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002fe8:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20002fec:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002ff0:	0315f733          	remu	a4,a1,a7
20002ff4:	01081793          	slli	a5,a6,0x10
20002ff8:	83c1                	srli	a5,a5,0x10
20002ffa:	01065513          	srli	a0,a2,0x10
20002ffe:	0315d5b3          	divu	a1,a1,a7
20003002:	0742                	slli	a4,a4,0x10
20003004:	8f49                	or	a4,a4,a0
20003006:	02b786b3          	mul	a3,a5,a1
2000300a:	852e                	mv	a0,a1
2000300c:	00d77c63          	bgeu	a4,a3,20003024 <__udivdi3+0x1dc>
20003010:	9742                	add	a4,a4,a6
20003012:	fff58513          	addi	a0,a1,-1
20003016:	01076763          	bltu	a4,a6,20003024 <__udivdi3+0x1dc>
2000301a:	00d77563          	bgeu	a4,a3,20003024 <__udivdi3+0x1dc>
2000301e:	ffe58513          	addi	a0,a1,-2
20003022:	9742                	add	a4,a4,a6
20003024:	40d706b3          	sub	a3,a4,a3
20003028:	0316f733          	remu	a4,a3,a7
2000302c:	0642                	slli	a2,a2,0x10
2000302e:	8241                	srli	a2,a2,0x10
20003030:	0316d6b3          	divu	a3,a3,a7
20003034:	0742                	slli	a4,a4,0x10
20003036:	02d788b3          	mul	a7,a5,a3
2000303a:	00c767b3          	or	a5,a4,a2
2000303e:	8736                	mv	a4,a3
20003040:	0117fc63          	bgeu	a5,a7,20003058 <__udivdi3+0x210>
20003044:	97c2                	add	a5,a5,a6
20003046:	fff68713          	addi	a4,a3,-1
2000304a:	0107e763          	bltu	a5,a6,20003058 <__udivdi3+0x210>
2000304e:	0117f563          	bgeu	a5,a7,20003058 <__udivdi3+0x210>
20003052:	ffe68713          	addi	a4,a3,-2
20003056:	97c2                	add	a5,a5,a6
20003058:	01051593          	slli	a1,a0,0x10
2000305c:	411787b3          	sub	a5,a5,a7
20003060:	8dd9                	or	a1,a1,a4
20003062:	bdcd                	j	20002f54 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20003064:	14d5e263          	bltu	a1,a3,200031a8 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20003068:	6741                	lui	a4,0x10
2000306a:	02e6ff63          	bgeu	a3,a4,200030a8 <__udivdi3+0x260>
2000306e:	0ff00713          	li	a4,255
20003072:	00d735b3          	sltu	a1,a4,a3
20003076:	058e                	slli	a1,a1,0x3
20003078:	20004737          	lui	a4,0x20004
2000307c:	00b6d533          	srl	a0,a3,a1
20003080:	c4470713          	addi	a4,a4,-956 # 20003c44 <__clz_tab>
20003084:	972a                	add	a4,a4,a0
20003086:	00074703          	lbu	a4,0(a4)
2000308a:	02000513          	li	a0,32
2000308e:	972e                	add	a4,a4,a1
20003090:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20003094:	02e51163          	bne	a0,a4,200030b6 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20003098:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
2000309a:	f2f6e5e3          	bltu	a3,a5,20002fc4 <__udivdi3+0x17c>
2000309e:	00c8b533          	sltu	a0,a7,a2
200030a2:	00154513          	xori	a0,a0,1
200030a6:	bf39                	j	20002fc4 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200030a8:	01000737          	lui	a4,0x1000
200030ac:	45c1                	li	a1,16
200030ae:	fce6e5e3          	bltu	a3,a4,20003078 <__udivdi3+0x230>
200030b2:	45e1                	li	a1,24
200030b4:	b7d1                	j	20003078 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
200030b6:	00e65333          	srl	t1,a2,a4
200030ba:	00b696b3          	sll	a3,a3,a1
200030be:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200030c2:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
200030c6:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
200030ca:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200030ce:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
200030d2:	00b797b3          	sll	a5,a5,a1
200030d6:	00e8d733          	srl	a4,a7,a4
200030da:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200030de:	01031793          	slli	a5,t1,0x10
200030e2:	83c1                	srli	a5,a5,0x10
200030e4:	01085713          	srli	a4,a6,0x10
200030e8:	02a65633          	divu	a2,a2,a0
200030ec:	06c2                	slli	a3,a3,0x10
200030ee:	8f55                	or	a4,a4,a3
200030f0:	02c78f33          	mul	t5,a5,a2
200030f4:	8e32                	mv	t3,a2
200030f6:	01e77c63          	bgeu	a4,t5,2000310e <__udivdi3+0x2c6>
200030fa:	971a                	add	a4,a4,t1
200030fc:	fff60e13          	addi	t3,a2,-1
20003100:	00676763          	bltu	a4,t1,2000310e <__udivdi3+0x2c6>
20003104:	01e77563          	bgeu	a4,t5,2000310e <__udivdi3+0x2c6>
20003108:	ffe60e13          	addi	t3,a2,-2
2000310c:	971a                	add	a4,a4,t1
2000310e:	41e70733          	sub	a4,a4,t5
20003112:	02a776b3          	remu	a3,a4,a0
20003116:	02a75733          	divu	a4,a4,a0
2000311a:	06c2                	slli	a3,a3,0x10
2000311c:	02e78633          	mul	a2,a5,a4
20003120:	01081793          	slli	a5,a6,0x10
20003124:	83c1                	srli	a5,a5,0x10
20003126:	8fd5                	or	a5,a5,a3
20003128:	86ba                	mv	a3,a4
2000312a:	00c7fc63          	bgeu	a5,a2,20003142 <__udivdi3+0x2fa>
2000312e:	979a                	add	a5,a5,t1
20003130:	fff70693          	addi	a3,a4,-1 # ffffff <init_uart.kLogFields.2+0xfefa9b>
20003134:	0067e763          	bltu	a5,t1,20003142 <__udivdi3+0x2fa>
20003138:	00c7f563          	bgeu	a5,a2,20003142 <__udivdi3+0x2fa>
2000313c:	ffe70693          	addi	a3,a4,-2
20003140:	979a                	add	a5,a5,t1
20003142:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20003146:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20003148:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000314a:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
2000314e:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20003152:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20003154:	00def6b3          	and	a3,t4,a3
20003158:	01055613          	srli	a2,a0,0x10
2000315c:	010ede93          	srli	t4,t4,0x10
20003160:	02d80333          	mul	t1,a6,a3
20003164:	02d606b3          	mul	a3,a2,a3
20003168:	01035713          	srli	a4,t1,0x10
2000316c:	03d80833          	mul	a6,a6,t4
20003170:	9836                	add	a6,a6,a3
20003172:	9742                	add	a4,a4,a6
20003174:	03d60633          	mul	a2,a2,t4
20003178:	00d77363          	bgeu	a4,a3,2000317e <__udivdi3+0x336>
2000317c:	9672                	add	a2,a2,t3
2000317e:	01075693          	srli	a3,a4,0x10
20003182:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20003184:	02c7e063          	bltu	a5,a2,200031a4 <__udivdi3+0x35c>
20003188:	d8c792e3          	bne	a5,a2,20002f0c <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000318c:	67c1                	lui	a5,0x10
2000318e:	17fd                	addi	a5,a5,-1
20003190:	8f7d                	and	a4,a4,a5
20003192:	0742                	slli	a4,a4,0x10
20003194:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20003198:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000319c:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000319e:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200031a0:	e2e8f2e3          	bgeu	a7,a4,20002fc4 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
200031a4:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
200031a6:	b39d                	j	20002f0c <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
200031a8:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
200031aa:	4501                	li	a0,0
200031ac:	bd21                	j	20002fc4 <__udivdi3+0x17c>
