
sw/device/tests/dif_hmac_smoketest_fpga_nexysvideo.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001cd8  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000bde  20001e58  20001e58  00002e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  10000000  20002a38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000028  20002a60  00004028  2**2
                  ALLOC
  8 .logs.fields  00000294  00010000  00010000  00004028  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008a19  00000000  00000000  000042e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001798  00000000  00000000  0000ccfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000e493  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000045a1  00000000  00000000  0000e52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004777  00000000  00000000  00012acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002d8  00000000  00000000  00017243  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000236d  00000000  00000000  0001751b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000008cc  00000000  00000000  00019888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	00850513          	addi	a0,a0,8 # 10000028 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	00858593          	addi	a1,a1,8 # 10000030 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	82818593          	addi	a1,gp,-2008 # 10000028 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00003617          	auipc	a2,0x3
20000054:	9e860613          	addi	a2,a2,-1560 # 20002a38 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	446000ef          	jal	ra,200004c4 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	aabd                	j	20000200 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	1080006f          	j	20000208 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	2400006f          	j	2000034c <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2880006f          	j	200003a4 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2d00006f          	j	200003fc <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000180:	10500073          	wfi
20000184:	8082                	ret

20000186 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000186:	1141                	addi	sp,sp,-16
20000188:	c606                	sw	ra,12(sp)
2000018a:	00002597          	auipc	a1,0x2
2000018e:	d9e58593          	addi	a1,a1,-610 # 20001f28 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000192:	41d0                	lw	a2,4(a1)
20000194:	4194                	lw	a3,0(a1)
20000196:	02a605b3          	mul	a1,a2,a0
2000019a:	02a6b633          	mulhu	a2,a3,a0
2000019e:	95b2                	add	a1,a1,a2
200001a0:	02a68533          	mul	a0,a3,a0
200001a4:	000f4637          	lui	a2,0xf4
200001a8:	24060613          	addi	a2,a2,576 # f4240 <check_digest.kLogFields.50+0xe3fc0>
200001ac:	4681                	li	a3,0
200001ae:	145010ef          	jal	ra,20001af2 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200001b2:	4801                	li	a6,0
200001b4:	4701                	li	a4,0

200001b6 <read0>:
200001b6:	b8002873          	csrr	a6,mcycleh
200001ba:	b00026f3          	csrr	a3,mcycle
200001be:	b8002773          	csrr	a4,mcycleh
200001c2:	fee81ae3          	bne	a6,a4,200001b6 <read0>
200001c6:	4781                	li	a5,0
200001c8:	4601                	li	a2,0

200001ca <read1>:
200001ca:	b80027f3          	csrr	a5,mcycleh
200001ce:	b0002773          	csrr	a4,mcycle
200001d2:	b8002673          	csrr	a2,mcycleh
200001d6:	fec79ae3          	bne	a5,a2,200001ca <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200001da:	00d73633          	sltu	a2,a4,a3
200001de:	410787b3          	sub	a5,a5,a6
200001e2:	8f91                	sub	a5,a5,a2
200001e4:	00b78663          	beq	a5,a1,200001f0 <read1+0x26>
200001e8:	00b7b733          	sltu	a4,a5,a1
200001ec:	ff69                	bnez	a4,200001c6 <read0+0x10>
200001ee:	a031                	j	200001fa <read1+0x30>
200001f0:	40d70633          	sub	a2,a4,a3
200001f4:	00a63733          	sltu	a4,a2,a0
200001f8:	f779                	bnez	a4,200001c6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200001fa:	40b2                	lw	ra,12(sp)
200001fc:	0141                	addi	sp,sp,16
200001fe:	8082                	ret

20000200 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000200:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000204:	bff5                	j	20000200 <abort>
	...

20000208 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000208:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000020a:	de06                	sw	ra,60(sp)
2000020c:	dc16                	sw	t0,56(sp)
2000020e:	da1a                	sw	t1,52(sp)
20000210:	d81e                	sw	t2,48(sp)
20000212:	d62a                	sw	a0,44(sp)
20000214:	d42e                	sw	a1,40(sp)
20000216:	d232                	sw	a2,36(sp)
20000218:	d036                	sw	a3,32(sp)
2000021a:	ce3a                	sw	a4,28(sp)
2000021c:	cc3e                	sw	a5,24(sp)
2000021e:	ca42                	sw	a6,20(sp)
20000220:	c846                	sw	a7,16(sp)
20000222:	c672                	sw	t3,12(sp)
20000224:	c476                	sw	t4,8(sp)
20000226:	c27a                	sw	t5,4(sp)
20000228:	c07e                	sw	t6,0(sp)
2000022a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000022e:	897d                	andi	a0,a0,31
20000230:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20000232:	00a5dc63          	bge	a1,a0,2000024a <handler_exception+0x42>
20000236:	4599                	li	a1,6
20000238:	02a5c263          	blt	a1,a0,2000025c <handler_exception+0x54>
2000023c:	458d                	li	a1,3
2000023e:	02b50c63          	beq	a0,a1,20000276 <handler_exception+0x6e>
20000242:	4595                	li	a1,5
20000244:	02b50763          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000248:	a015                	j	2000026c <handler_exception+0x64>
2000024a:	c115                	beqz	a0,2000026e <handler_exception+0x66>
2000024c:	4585                	li	a1,1
2000024e:	02b50063          	beq	a0,a1,2000026e <handler_exception+0x66>
20000252:	4589                	li	a1,2
20000254:	00b51c63          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000258:	208d                	jal	200002ba <handler_instr_ill_fault>
2000025a:	a839                	j	20000278 <handler_exception+0x70>
2000025c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000025e:	00b50a63          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000262:	45ad                	li	a1,11
20000264:	00b51463          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000268:	2065                	jal	20000310 <handler_ecall>
2000026a:	a039                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000026c:	a001                	j	2000026c <handler_exception+0x64>
2000026e:	2805                	jal	2000029e <handler_instr_acc_fault>
20000270:	a021                	j	20000278 <handler_exception+0x70>
20000272:	2049                	jal	200002f4 <handler_lsu_fault>
20000274:	a011                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20000276:	208d                	jal	200002d8 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20000278:	4f82                	lw	t6,0(sp)
2000027a:	4f12                	lw	t5,4(sp)
2000027c:	4ea2                	lw	t4,8(sp)
2000027e:	4e32                	lw	t3,12(sp)
20000280:	48c2                	lw	a7,16(sp)
20000282:	4852                	lw	a6,20(sp)
20000284:	47e2                	lw	a5,24(sp)
20000286:	4772                	lw	a4,28(sp)
20000288:	5682                	lw	a3,32(sp)
2000028a:	5612                	lw	a2,36(sp)
2000028c:	55a2                	lw	a1,40(sp)
2000028e:	5532                	lw	a0,44(sp)
20000290:	53c2                	lw	t2,48(sp)
20000292:	5352                	lw	t1,52(sp)
20000294:	52e2                	lw	t0,56(sp)
20000296:	50f2                	lw	ra,60(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	30200073          	mret

2000029e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
2000029e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200002a0:	de06                	sw	ra,60(sp)
200002a2:	dc22                	sw	s0,56(sp)
200002a4:	00002597          	auipc	a1,0x2
200002a8:	11058593          	addi	a1,a1,272 # 200023b4 <__clz_tab+0x160>
200002ac:	0040                	addi	s0,sp,4
200002ae:	03400613          	li	a2,52
200002b2:	8522                	mv	a0,s0
200002b4:	2ec5                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200002b6:	8522                	mv	a0,s0
200002b8:	2a71                	jal	20000454 <print_exc_msg>

200002ba <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200002ba:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200002bc:	c686                	sw	ra,76(sp)
200002be:	c4a2                	sw	s0,72(sp)
200002c0:	00002597          	auipc	a1,0x2
200002c4:	12858593          	addi	a1,a1,296 # 200023e8 <__clz_tab+0x194>
200002c8:	00d10413          	addi	s0,sp,13
200002cc:	03b00613          	li	a2,59
200002d0:	8522                	mv	a0,s0
200002d2:	2ec9                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200002d4:	8522                	mv	a0,s0
200002d6:	2abd                	jal	20000454 <print_exc_msg>

200002d8 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200002d8:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200002da:	de06                	sw	ra,60(sp)
200002dc:	dc22                	sw	s0,56(sp)
200002de:	00002597          	auipc	a1,0x2
200002e2:	14558593          	addi	a1,a1,325 # 20002423 <__clz_tab+0x1cf>
200002e6:	840a                	mv	s0,sp
200002e8:	03800613          	li	a2,56
200002ec:	8522                	mv	a0,s0
200002ee:	2e5d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200002f0:	8522                	mv	a0,s0
200002f2:	228d                	jal	20000454 <print_exc_msg>

200002f4 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200002f4:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
200002f6:	de06                	sw	ra,60(sp)
200002f8:	dc22                	sw	s0,56(sp)
200002fa:	00002597          	auipc	a1,0x2
200002fe:	16158593          	addi	a1,a1,353 # 2000245b <__clz_tab+0x207>
20000302:	0020                	addi	s0,sp,8
20000304:	03000613          	li	a2,48
20000308:	8522                	mv	a0,s0
2000030a:	2e69                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000030c:	8522                	mv	a0,s0
2000030e:	2299                	jal	20000454 <print_exc_msg>

20000310 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000310:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20000312:	ce06                	sw	ra,28(sp)
20000314:	cc22                	sw	s0,24(sp)
20000316:	00002517          	auipc	a0,0x2
2000031a:	c3a50513          	addi	a0,a0,-966 # 20001f50 <kDeviceLogBypassUartAddress>
2000031e:	4108                	lw	a0,0(a0)
20000320:	c909                	beqz	a0,20000332 <handler_ecall+0x22>
20000322:	e0010517          	auipc	a0,0xe0010
20000326:	d1a50513          	addi	a0,a0,-742 # 1003c <handler_ecall.kLogFields>
2000032a:	4581                	li	a1,0
2000032c:	703000ef          	jal	ra,2000122e <base_log_internal_dv>
20000330:	a821                	j	20000348 <handler_ecall+0x38>
20000332:	00002597          	auipc	a1,0x2
20000336:	b6258593          	addi	a1,a1,-1182 # 20001e94 <__udivdi3+0x3a2>
2000033a:	840a                	mv	s0,sp
2000033c:	4651                	li	a2,20
2000033e:	8522                	mv	a0,s0
20000340:	2695                	jal	200006a4 <memcpy>
20000342:	8522                	mv	a0,s0
20000344:	641000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20000348:	a001                	j	20000348 <handler_ecall+0x38>
2000034a:	0001                	nop

2000034c <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
2000034c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
2000034e:	ce86                	sw	ra,92(sp)
20000350:	cc96                	sw	t0,88(sp)
20000352:	ca9a                	sw	t1,84(sp)
20000354:	c89e                	sw	t2,80(sp)
20000356:	c6a2                	sw	s0,76(sp)
20000358:	c4aa                	sw	a0,72(sp)
2000035a:	c2ae                	sw	a1,68(sp)
2000035c:	c0b2                	sw	a2,64(sp)
2000035e:	de36                	sw	a3,60(sp)
20000360:	dc3a                	sw	a4,56(sp)
20000362:	da3e                	sw	a5,52(sp)
20000364:	d842                	sw	a6,48(sp)
20000366:	d646                	sw	a7,44(sp)
20000368:	d472                	sw	t3,40(sp)
2000036a:	d276                	sw	t4,36(sp)
2000036c:	d07a                	sw	t5,32(sp)
2000036e:	ce7e                	sw	t6,28(sp)
20000370:	00002517          	auipc	a0,0x2
20000374:	be050513          	addi	a0,a0,-1056 # 20001f50 <kDeviceLogBypassUartAddress>
20000378:	4108                	lw	a0,0(a0)
2000037a:	c909                	beqz	a0,2000038c <handler_irq_software+0x40>
2000037c:	e0010517          	auipc	a0,0xe0010
20000380:	c8450513          	addi	a0,a0,-892 # 10000 <_dv_log_offset>
20000384:	4581                	li	a1,0
20000386:	6a9000ef          	jal	ra,2000122e <base_log_internal_dv>
2000038a:	a821                	j	200003a2 <handler_irq_software+0x56>
2000038c:	00002597          	auipc	a1,0x2
20000390:	acc58593          	addi	a1,a1,-1332 # 20001e58 <__udivdi3+0x366>
20000394:	0020                	addi	s0,sp,8
20000396:	4651                	li	a2,20
20000398:	8522                	mv	a0,s0
2000039a:	2629                	jal	200006a4 <memcpy>
2000039c:	8522                	mv	a0,s0
2000039e:	5e7000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200003a2:	a001                	j	200003a2 <handler_irq_software+0x56>

200003a4 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200003a4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200003a6:	ce86                	sw	ra,92(sp)
200003a8:	cc96                	sw	t0,88(sp)
200003aa:	ca9a                	sw	t1,84(sp)
200003ac:	c89e                	sw	t2,80(sp)
200003ae:	c6a2                	sw	s0,76(sp)
200003b0:	c4aa                	sw	a0,72(sp)
200003b2:	c2ae                	sw	a1,68(sp)
200003b4:	c0b2                	sw	a2,64(sp)
200003b6:	de36                	sw	a3,60(sp)
200003b8:	dc3a                	sw	a4,56(sp)
200003ba:	da3e                	sw	a5,52(sp)
200003bc:	d842                	sw	a6,48(sp)
200003be:	d646                	sw	a7,44(sp)
200003c0:	d472                	sw	t3,40(sp)
200003c2:	d276                	sw	t4,36(sp)
200003c4:	d07a                	sw	t5,32(sp)
200003c6:	ce7e                	sw	t6,28(sp)
200003c8:	00002517          	auipc	a0,0x2
200003cc:	b8850513          	addi	a0,a0,-1144 # 20001f50 <kDeviceLogBypassUartAddress>
200003d0:	4108                	lw	a0,0(a0)
200003d2:	c909                	beqz	a0,200003e4 <handler_irq_timer+0x40>
200003d4:	e0010517          	auipc	a0,0xe0010
200003d8:	c4050513          	addi	a0,a0,-960 # 10014 <handler_irq_timer.kLogFields>
200003dc:	4581                	li	a1,0
200003de:	651000ef          	jal	ra,2000122e <base_log_internal_dv>
200003e2:	a821                	j	200003fa <handler_irq_timer+0x56>
200003e4:	00002597          	auipc	a1,0x2
200003e8:	a8858593          	addi	a1,a1,-1400 # 20001e6c <__udivdi3+0x37a>
200003ec:	0020                	addi	s0,sp,8
200003ee:	4651                	li	a2,20
200003f0:	8522                	mv	a0,s0
200003f2:	2c4d                	jal	200006a4 <memcpy>
200003f4:	8522                	mv	a0,s0
200003f6:	58f000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
200003fa:	a001                	j	200003fa <handler_irq_timer+0x56>

200003fc <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
200003fc:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
200003fe:	ce86                	sw	ra,92(sp)
20000400:	cc96                	sw	t0,88(sp)
20000402:	ca9a                	sw	t1,84(sp)
20000404:	c89e                	sw	t2,80(sp)
20000406:	c6a2                	sw	s0,76(sp)
20000408:	c4aa                	sw	a0,72(sp)
2000040a:	c2ae                	sw	a1,68(sp)
2000040c:	c0b2                	sw	a2,64(sp)
2000040e:	de36                	sw	a3,60(sp)
20000410:	dc3a                	sw	a4,56(sp)
20000412:	da3e                	sw	a5,52(sp)
20000414:	d842                	sw	a6,48(sp)
20000416:	d646                	sw	a7,44(sp)
20000418:	d472                	sw	t3,40(sp)
2000041a:	d276                	sw	t4,36(sp)
2000041c:	d07a                	sw	t5,32(sp)
2000041e:	ce7e                	sw	t6,28(sp)
20000420:	00002517          	auipc	a0,0x2
20000424:	b3050513          	addi	a0,a0,-1232 # 20001f50 <kDeviceLogBypassUartAddress>
20000428:	4108                	lw	a0,0(a0)
2000042a:	c909                	beqz	a0,2000043c <handler_irq_external+0x40>
2000042c:	e0010517          	auipc	a0,0xe0010
20000430:	bfc50513          	addi	a0,a0,-1028 # 10028 <handler_irq_external.kLogFields>
20000434:	4581                	li	a1,0
20000436:	5f9000ef          	jal	ra,2000122e <base_log_internal_dv>
2000043a:	a821                	j	20000452 <handler_irq_external+0x56>
2000043c:	00002597          	auipc	a1,0x2
20000440:	a4458593          	addi	a1,a1,-1468 # 20001e80 <__udivdi3+0x38e>
20000444:	0020                	addi	s0,sp,8
20000446:	4651                	li	a2,20
20000448:	8522                	mv	a0,s0
2000044a:	2ca9                	jal	200006a4 <memcpy>
2000044c:	8522                	mv	a0,s0
2000044e:	537000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000452:	a001                	j	20000452 <handler_irq_external+0x56>

20000454 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000454:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000456:	ce06                	sw	ra,28(sp)
20000458:	cc22                	sw	s0,24(sp)
2000045a:	ca26                	sw	s1,20(sp)
2000045c:	00002597          	auipc	a1,0x2
20000460:	af458593          	addi	a1,a1,-1292 # 20001f50 <kDeviceLogBypassUartAddress>
20000464:	418c                	lw	a1,0(a1)
20000466:	842a                	mv	s0,a0
20000468:	c19d                	beqz	a1,2000048e <print_exc_msg+0x3a>
2000046a:	e0010517          	auipc	a0,0xe0010
2000046e:	be650513          	addi	a0,a0,-1050 # 10050 <print_exc_msg.kLogFields>
20000472:	4585                	li	a1,1
20000474:	8622                	mv	a2,s0
20000476:	5b9000ef          	jal	ra,2000122e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000047a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000047e:	e0010517          	auipc	a0,0xe0010
20000482:	be650513          	addi	a0,a0,-1050 # 10064 <print_exc_msg.kLogFields.6>
20000486:	4585                	li	a1,1
20000488:	5a7000ef          	jal	ra,2000122e <base_log_internal_dv>
2000048c:	a81d                	j	200004c2 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000048e:	00002597          	auipc	a1,0x2
20000492:	a1a58593          	addi	a1,a1,-1510 # 20001ea8 <__udivdi3+0x3b6>
20000496:	848a                	mv	s1,sp
20000498:	4651                	li	a2,20
2000049a:	8526                	mv	a0,s1
2000049c:	2421                	jal	200006a4 <memcpy>
2000049e:	8526                	mv	a0,s1
200004a0:	85a2                	mv	a1,s0
200004a2:	4e3000ef          	jal	ra,20001184 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200004a6:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200004aa:	00002597          	auipc	a1,0x2
200004ae:	a1258593          	addi	a1,a1,-1518 # 20001ebc <__udivdi3+0x3ca>
200004b2:	848a                	mv	s1,sp
200004b4:	4651                	li	a2,20
200004b6:	8526                	mv	a0,s1
200004b8:	22f5                	jal	200006a4 <memcpy>
200004ba:	8526                	mv	a0,s1
200004bc:	85a2                	mv	a1,s0
200004be:	4c7000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200004c2:	a001                	j	200004c2 <print_exc_msg+0x6e>

200004c4 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
200004c4:	1141                	addi	sp,sp,-16
200004c6:	c606                	sw	ra,12(sp)
200004c8:	c422                	sw	s0,8(sp)
200004ca:	6511                	lui	a0,0x4
200004cc:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
200004d0:	2231                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
200004d2:	00002517          	auipc	a0,0x2
200004d6:	a4e50513          	addi	a0,a0,-1458 # 20001f20 <kDeviceType>
200004da:	4108                	lw	a0,0(a0)
200004dc:	c111                	beqz	a0,200004e0 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
200004de:	280d                	jal	20000510 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
200004e0:	2c81                	jal	20000730 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
200004e2:	00002597          	auipc	a1,0x2
200004e6:	ba658593          	addi	a1,a1,-1114 # 20002088 <kTestConfig>
200004ea:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
200004ee:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
200004f0:	c191                	beqz	a1,200004f4 <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
200004f2:	2839                	jal	20000510 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
200004f4:	2255                	jal	20000698 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
200004f6:	e409                	bnez	s0,20000500 <main+0x3c>
200004f8:	6531                	lui	a0,0xc
200004fa:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004fe:	a019                	j	20000504 <main+0x40>
20000500:	6525                	lui	a0,0x9
20000502:	0535                	addi	a0,a0,13
20000504:	28e1                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20000506:	4505                	li	a0,1
20000508:	4422                	lw	s0,8(sp)
2000050a:	40b2                	lw	ra,12(sp)
2000050c:	0141                	addi	sp,sp,16
2000050e:	8082                	ret

20000510 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000510:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000512:	ce06                	sw	ra,28(sp)
20000514:	cc22                	sw	s0,24(sp)
20000516:	ca26                	sw	s1,20(sp)
20000518:	f0000597          	auipc	a1,0xf0000
2000051c:	b1058593          	addi	a1,a1,-1264 # 10000028 <_data_end>
20000520:	40000537          	lui	a0,0x40000
20000524:	208010ef          	jal	ra,2000172c <dif_uart_init>
20000528:	00002497          	auipc	s1,0x2
2000052c:	a2848493          	addi	s1,s1,-1496 # 20001f50 <kDeviceLogBypassUartAddress>
20000530:	c915                	beqz	a0,20000564 <init_uart+0x54>
20000532:	4088                	lw	a0,0(s1)
20000534:	c909                	beqz	a0,20000546 <init_uart+0x36>
20000536:	e0010517          	auipc	a0,0xe0010
2000053a:	b4250513          	addi	a0,a0,-1214 # 10078 <init_uart.kLogFields>
2000053e:	4581                	li	a1,0
20000540:	4ef000ef          	jal	ra,2000122e <base_log_internal_dv>
20000544:	a821                	j	2000055c <init_uart+0x4c>
20000546:	00002597          	auipc	a1,0x2
2000054a:	98a58593          	addi	a1,a1,-1654 # 20001ed0 <__udivdi3+0x3de>
2000054e:	840a                	mv	s0,sp
20000550:	4651                	li	a2,20
20000552:	8522                	mv	a0,s0
20000554:	2a81                	jal	200006a4 <memcpy>
20000556:	8522                	mv	a0,s0
20000558:	42d000ef          	jal	ra,20001184 <base_log_internal_core>
2000055c:	6531                	lui	a0,0xc
2000055e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000562:	28ad                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20000564:	00002517          	auipc	a0,0x2
20000568:	9dc50513          	addi	a0,a0,-1572 # 20001f40 <kUartBaudrate>
2000056c:	4108                	lw	a0,0(a0)
2000056e:	00002597          	auipc	a1,0x2
20000572:	9c258593          	addi	a1,a1,-1598 # 20001f30 <kClockFreqPeripheralHz>
20000576:	418c                	lw	a1,0(a1)
20000578:	c02a                	sw	a0,0(sp)
2000057a:	c22e                	sw	a1,4(sp)
2000057c:	4505                	li	a0,1
2000057e:	c42a                	sw	a0,8(sp)
20000580:	c62a                	sw	a0,12(sp)
20000582:	f0000517          	auipc	a0,0xf0000
20000586:	aa650513          	addi	a0,a0,-1370 # 10000028 <_data_end>
2000058a:	858a                	mv	a1,sp
2000058c:	1ae010ef          	jal	ra,2000173a <dif_uart_configure>
20000590:	c915                	beqz	a0,200005c4 <init_uart+0xb4>
20000592:	4088                	lw	a0,0(s1)
20000594:	c909                	beqz	a0,200005a6 <init_uart+0x96>
20000596:	e0010517          	auipc	a0,0xe0010
2000059a:	af650513          	addi	a0,a0,-1290 # 1008c <init_uart.kLogFields.2>
2000059e:	4581                	li	a1,0
200005a0:	48f000ef          	jal	ra,2000122e <base_log_internal_dv>
200005a4:	a821                	j	200005bc <init_uart+0xac>
200005a6:	00002597          	auipc	a1,0x2
200005aa:	93e58593          	addi	a1,a1,-1730 # 20001ee4 <__udivdi3+0x3f2>
200005ae:	840a                	mv	s0,sp
200005b0:	4651                	li	a2,20
200005b2:	8522                	mv	a0,s0
200005b4:	28c5                	jal	200006a4 <memcpy>
200005b6:	8522                	mv	a0,s0
200005b8:	3cd000ef          	jal	ra,20001184 <base_log_internal_core>
200005bc:	6531                	lui	a0,0xc
200005be:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005c2:	2829                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
200005c4:	f0000517          	auipc	a0,0xf0000
200005c8:	a6450513          	addi	a0,a0,-1436 # 10000028 <_data_end>
200005cc:	4b5000ef          	jal	ra,20001280 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
200005d0:	44d2                	lw	s1,20(sp)
200005d2:	4462                	lw	s0,24(sp)
200005d4:	40f2                	lw	ra,28(sp)
200005d6:	6105                	addi	sp,sp,32
200005d8:	8082                	ret
	...

200005dc <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
200005dc:	1101                	addi	sp,sp,-32
200005de:	ce06                	sw	ra,28(sp)
200005e0:	cc22                	sw	s0,24(sp)
200005e2:	65b1                	lui	a1,0xc
200005e4:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
200005e8:	02b50163          	beq	a0,a1,2000060a <test_status_set+0x2e>
200005ec:	65a5                	lui	a1,0x9
200005ee:	05b5                	addi	a1,a1,13
200005f0:	02b50f63          	beq	a0,a1,2000062e <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005f4:	00002597          	auipc	a1,0x2
200005f8:	95858593          	addi	a1,a1,-1704 # 20001f4c <kDeviceTestStatusAddress>
200005fc:	418c                	lw	a1,0(a1)
200005fe:	c191                	beqz	a1,20000602 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000600:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000602:	4462                	lw	s0,24(sp)
20000604:	40f2                	lw	ra,28(sp)
20000606:	6105                	addi	sp,sp,32
20000608:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000060a:	00002517          	auipc	a0,0x2
2000060e:	94650513          	addi	a0,a0,-1722 # 20001f50 <kDeviceLogBypassUartAddress>
20000612:	4108                	lw	a0,0(a0)
20000614:	ed1d                	bnez	a0,20000652 <test_status_set+0x76>
20000616:	00002597          	auipc	a1,0x2
2000061a:	8f658593          	addi	a1,a1,-1802 # 20001f0c <__udivdi3+0x41a>
2000061e:	840a                	mv	s0,sp
20000620:	4651                	li	a2,20
20000622:	8522                	mv	a0,s0
20000624:	2041                	jal	200006a4 <memcpy>
20000626:	8522                	mv	a0,s0
20000628:	35d000ef          	jal	ra,20001184 <base_log_internal_core>
2000062c:	a815                	j	20000660 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
2000062e:	00002517          	auipc	a0,0x2
20000632:	92250513          	addi	a0,a0,-1758 # 20001f50 <kDeviceLogBypassUartAddress>
20000636:	4108                	lw	a0,0(a0)
20000638:	ed15                	bnez	a0,20000674 <test_status_set+0x98>
2000063a:	00002597          	auipc	a1,0x2
2000063e:	8be58593          	addi	a1,a1,-1858 # 20001ef8 <__udivdi3+0x406>
20000642:	840a                	mv	s0,sp
20000644:	4651                	li	a2,20
20000646:	8522                	mv	a0,s0
20000648:	28b1                	jal	200006a4 <memcpy>
2000064a:	8522                	mv	a0,s0
2000064c:	339000ef          	jal	ra,20001184 <base_log_internal_core>
20000650:	a80d                	j	20000682 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000652:	e0010517          	auipc	a0,0xe0010
20000656:	a6250513          	addi	a0,a0,-1438 # 100b4 <test_status_set.kLogFields.2>
2000065a:	4581                	li	a1,0
2000065c:	3d3000ef          	jal	ra,2000122e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000660:	00002517          	auipc	a0,0x2
20000664:	8ec50513          	addi	a0,a0,-1812 # 20001f4c <kDeviceTestStatusAddress>
20000668:	4108                	lw	a0,0(a0)
2000066a:	c50d                	beqz	a0,20000694 <test_status_set+0xb8>
2000066c:	65b1                	lui	a1,0xc
2000066e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20000672:	a005                	j	20000692 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000674:	e0010517          	auipc	a0,0xe0010
20000678:	a2c50513          	addi	a0,a0,-1492 # 100a0 <test_status_set.kLogFields>
2000067c:	4581                	li	a1,0
2000067e:	3b1000ef          	jal	ra,2000122e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000682:	00002517          	auipc	a0,0x2
20000686:	8ca50513          	addi	a0,a0,-1846 # 20001f4c <kDeviceTestStatusAddress>
2000068a:	4108                	lw	a0,0(a0)
2000068c:	c501                	beqz	a0,20000694 <test_status_set+0xb8>
2000068e:	65a5                	lui	a1,0x9
20000690:	05b5                	addi	a1,a1,13
20000692:	c10c                	sw	a1,0(a0)
20000694:	36b5                	jal	20000200 <abort>
	...

20000698 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000698:	8082                	ret
	...

2000069c <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
2000069c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
2000069e:	8082                	ret

200006a0 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200006a0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200006a2:	8082                	ret

200006a4 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200006a4:	ca11                	beqz	a2,200006b8 <memcpy+0x14>
200006a6:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200006a8:	00058703          	lb	a4,0(a1) # 9000 <_stack_size+0x7000>
200006ac:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006b0:	167d                	addi	a2,a2,-1
200006b2:	0685                	addi	a3,a3,1
200006b4:	0585                	addi	a1,a1,1
200006b6:	fa6d                	bnez	a2,200006a8 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006b8:	8082                	ret

200006ba <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ba:	c619                	beqz	a2,200006c8 <memset+0xe>
200006bc:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006be:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006c2:	167d                	addi	a2,a2,-1
200006c4:	0685                	addi	a3,a3,1
200006c6:	fe65                	bnez	a2,200006be <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006c8:	8082                	ret

200006ca <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006ca:	ce09                	beqz	a2,200006e4 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006cc:	00054683          	lbu	a3,0(a0)
200006d0:	0005c703          	lbu	a4,0(a1)
200006d4:	00e6ea63          	bltu	a3,a4,200006e8 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006d8:	00d76b63          	bltu	a4,a3,200006ee <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006dc:	167d                	addi	a2,a2,-1
200006de:	0585                	addi	a1,a1,1
200006e0:	0505                	addi	a0,a0,1
200006e2:	f66d                	bnez	a2,200006cc <memcmp+0x2>
200006e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006e6:	8082                	ret
200006e8:	fd600513          	li	a0,-42
200006ec:	8082                	ret
200006ee:	02a00513          	li	a0,42
200006f2:	8082                	ret

200006f4 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006f4:	ca11                	beqz	a2,20000708 <memchr+0x14>
200006f6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006fa:	00054683          	lbu	a3,0(a0)
200006fe:	00b68663          	beq	a3,a1,2000070a <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000702:	167d                	addi	a2,a2,-1
20000704:	0505                	addi	a0,a0,1
20000706:	fa75                	bnez	a2,200006fa <memchr+0x6>
20000708:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000070a:	8082                	ret

2000070c <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000070c:	ce09                	beqz	a2,20000726 <memrchr+0x1a>
2000070e:	fff50693          	addi	a3,a0,-1
20000712:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000716:	00c68733          	add	a4,a3,a2
2000071a:	00074703          	lbu	a4,0(a4)
2000071e:	00b70663          	beq	a4,a1,2000072a <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000722:	167d                	addi	a2,a2,-1
20000724:	fa6d                	bnez	a2,20000716 <memrchr+0xa>
20000726:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000728:	8082                	ret
2000072a:	9532                	add	a0,a0,a2
2000072c:	157d                	addi	a0,a0,-1
2000072e:	8082                	ret

20000730 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:192
  check_message_length(hmac, len * 8);
  run_hmac(hmac);
  check_digest(hmac, expected_digest);
}

bool test_main() {
20000730:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:193
  LOG_INFO("Running HMAC DIF test...");
20000732:	de06                	sw	ra,60(sp)
20000734:	dc22                	sw	s0,56(sp)
20000736:	da26                	sw	s1,52(sp)
20000738:	d84a                	sw	s2,48(sp)
2000073a:	00002517          	auipc	a0,0x2
2000073e:	81650513          	addi	a0,a0,-2026 # 20001f50 <kDeviceLogBypassUartAddress>
20000742:	4104                	lw	s1,0(a0)
20000744:	c889                	beqz	s1,20000756 <test_main+0x26>
20000746:	e0010517          	auipc	a0,0xe0010
2000074a:	98250513          	addi	a0,a0,-1662 # 100c8 <test_main.kLogFields>
2000074e:	4581                	li	a1,0
20000750:	2df000ef          	jal	ra,2000122e <base_log_internal_dv>
20000754:	a821                	j	2000076c <test_main+0x3c>
20000756:	00001597          	auipc	a1,0x1
2000075a:	7fe58593          	addi	a1,a1,2046 # 20001f54 <kDeviceLogBypassUartAddress+0x4>
2000075e:	0820                	addi	s0,sp,24
20000760:	4651                	li	a2,20
20000762:	8522                	mv	a0,s0
20000764:	3781                	jal	200006a4 <memcpy>
20000766:	8522                	mv	a0,s0
20000768:	21d000ef          	jal	ra,20001184 <base_log_internal_core>
2000076c:	41110537          	lui	a0,0x41110
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:196

  dif_hmac_config_t hmac_config = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_HMAC_BASE_ADDR),
20000770:	c82a                	sw	a0,16(sp)
20000772:	0808                	addi	a0,sp,16
20000774:	002c                	addi	a1,sp,8
test_setup():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:55
  dif_hmac_result_t res = dif_hmac_init(config, hmac);
20000776:	60a000ef          	jal	ra,20000d80 <dif_hmac_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:57
  CHECK(res != kDifHmacBadArg, "Invalid arguments encountered in HMAC init.");
2000077a:	c525                	beqz	a0,200007e2 <test_main+0xb2>
2000077c:	4589                	li	a1,2
2000077e:	02b51a63          	bne	a0,a1,200007b2 <test_main+0x82>
20000782:	c889                	beqz	s1,20000794 <test_main+0x64>
20000784:	e0010517          	auipc	a0,0xe0010
20000788:	9a850513          	addi	a0,a0,-1624 # 1012c <test_setup.kLogFields>
2000078c:	4581                	li	a1,0
2000078e:	2a1000ef          	jal	ra,2000122e <base_log_internal_dv>
20000792:	a821                	j	200007aa <test_main+0x7a>
20000794:	00002597          	auipc	a1,0x2
20000798:	8f858593          	addi	a1,a1,-1800 # 2000208c <kTestConfig+0x4>
2000079c:	0820                	addi	s0,sp,24
2000079e:	4651                	li	a2,20
200007a0:	8522                	mv	a0,s0
200007a2:	3709                	jal	200006a4 <memcpy>
200007a4:	8522                	mv	a0,s0
200007a6:	1df000ef          	jal	ra,20001184 <base_log_internal_core>
200007aa:	6531                	lui	a0,0xc
200007ac:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007b0:	3535                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:58
  CHECK(res == kDifHmacOk, "Unknown error encountered in HMAC init.");
200007b2:	c889                	beqz	s1,200007c4 <test_main+0x94>
200007b4:	e0010517          	auipc	a0,0xe0010
200007b8:	98c50513          	addi	a0,a0,-1652 # 10140 <test_setup.kLogFields.15>
200007bc:	4581                	li	a1,0
200007be:	271000ef          	jal	ra,2000122e <base_log_internal_dv>
200007c2:	a821                	j	200007da <test_main+0xaa>
200007c4:	00002597          	auipc	a1,0x2
200007c8:	8dc58593          	addi	a1,a1,-1828 # 200020a0 <kTestConfig+0x18>
200007cc:	0820                	addi	s0,sp,24
200007ce:	4651                	li	a2,20
200007d0:	8522                	mv	a0,s0
200007d2:	3dc9                	jal	200006a4 <memcpy>
200007d4:	8522                	mv	a0,s0
200007d6:	1af000ef          	jal	ra,20001184 <base_log_internal_core>
200007da:	6531                	lui	a0,0xc
200007dc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007e0:	3bf5                	jal	200005dc <test_status_set>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:202
  };

  dif_hmac_t hmac;
  test_setup(&hmac_config, &hmac);

  LOG_INFO("Running test SHA256 pass 1...");
200007e2:	c4ad                	beqz	s1,2000084c <test_main+0x11c>
200007e4:	e0010517          	auipc	a0,0xe0010
200007e8:	8f850513          	addi	a0,a0,-1800 # 100dc <test_main.kLogFields.2>
200007ec:	4581                	li	a1,0
200007ee:	241000ef          	jal	ra,2000122e <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:203
  run_test(&hmac, kData, sizeof(kData), NULL, kExpectedShaDigest);
200007f2:	00002417          	auipc	s0,0x2
200007f6:	81a40413          	addi	s0,s0,-2022 # 2000200c <kExpectedShaDigest>
200007fa:	0024                	addi	s1,sp,8
200007fc:	8526                	mv	a0,s1
200007fe:	4581                	li	a1,0
20000800:	8622                	mv	a2,s0
20000802:	28d5                	jal	200008f6 <run_test>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:205

  LOG_INFO("Running test SHA256 pass 2...");
20000804:	e0010517          	auipc	a0,0xe0010
20000808:	8ec50513          	addi	a0,a0,-1812 # 100f0 <test_main.kLogFields.5>
2000080c:	4581                	li	a1,0
2000080e:	221000ef          	jal	ra,2000122e <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:206
  run_test(&hmac, kData, sizeof(kData), NULL, kExpectedShaDigest);
20000812:	8526                	mv	a0,s1
20000814:	4581                	li	a1,0
20000816:	8622                	mv	a2,s0
20000818:	28f9                	jal	200008f6 <run_test>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:208

  LOG_INFO("Running test HMAC pass 1...");
2000081a:	e0010517          	auipc	a0,0xe0010
2000081e:	8ea50513          	addi	a0,a0,-1814 # 10104 <test_main.kLogFields.8>
20000822:	4581                	li	a1,0
20000824:	20b000ef          	jal	ra,2000122e <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:209
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
20000828:	effff597          	auipc	a1,0xeffff
2000082c:	7e058593          	addi	a1,a1,2016 # 10000008 <kHmacKey>
20000830:	00002617          	auipc	a2,0x2
20000834:	82460613          	addi	a2,a2,-2012 # 20002054 <kExpectedHmacDigest>
20000838:	8526                	mv	a0,s1
2000083a:	2875                	jal	200008f6 <run_test>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:212
           kExpectedHmacDigest);

  LOG_INFO("Running test HMAC pass 2...");
2000083c:	e0010517          	auipc	a0,0xe0010
20000840:	8dc50513          	addi	a0,a0,-1828 # 10118 <test_main.kLogFields.11>
20000844:	4581                	li	a1,0
20000846:	1e9000ef          	jal	ra,2000122e <base_log_internal_dv>
2000084a:	a069                	j	200008d4 <test_main+0x1a4>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:202
  LOG_INFO("Running test SHA256 pass 1...");
2000084c:	00001597          	auipc	a1,0x1
20000850:	71c58593          	addi	a1,a1,1820 # 20001f68 <kDeviceLogBypassUartAddress+0x18>
20000854:	0820                	addi	s0,sp,24
20000856:	4651                	li	a2,20
20000858:	8522                	mv	a0,s0
2000085a:	35a9                	jal	200006a4 <memcpy>
2000085c:	8522                	mv	a0,s0
2000085e:	127000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:203
  run_test(&hmac, kData, sizeof(kData), NULL, kExpectedShaDigest);
20000862:	00001417          	auipc	s0,0x1
20000866:	7aa40413          	addi	s0,s0,1962 # 2000200c <kExpectedShaDigest>
2000086a:	00810913          	addi	s2,sp,8
2000086e:	854a                	mv	a0,s2
20000870:	4581                	li	a1,0
20000872:	8622                	mv	a2,s0
20000874:	2049                	jal	200008f6 <run_test>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:205
  LOG_INFO("Running test SHA256 pass 2...");
20000876:	00001597          	auipc	a1,0x1
2000087a:	7b658593          	addi	a1,a1,1974 # 2000202c <kExpectedShaDigest+0x20>
2000087e:	0824                	addi	s1,sp,24
20000880:	4651                	li	a2,20
20000882:	8526                	mv	a0,s1
20000884:	3505                	jal	200006a4 <memcpy>
20000886:	8526                	mv	a0,s1
20000888:	0fd000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:206
  run_test(&hmac, kData, sizeof(kData), NULL, kExpectedShaDigest);
2000088c:	854a                	mv	a0,s2
2000088e:	4581                	li	a1,0
20000890:	8622                	mv	a2,s0
20000892:	2095                	jal	200008f6 <run_test>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:208
  LOG_INFO("Running test HMAC pass 1...");
20000894:	00001597          	auipc	a1,0x1
20000898:	7ac58593          	addi	a1,a1,1964 # 20002040 <kExpectedShaDigest+0x34>
2000089c:	0820                	addi	s0,sp,24
2000089e:	4651                	li	a2,20
200008a0:	8522                	mv	a0,s0
200008a2:	3509                	jal	200006a4 <memcpy>
200008a4:	8522                	mv	a0,s0
200008a6:	0df000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:209
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
200008aa:	effff597          	auipc	a1,0xeffff
200008ae:	75e58593          	addi	a1,a1,1886 # 10000008 <kHmacKey>
200008b2:	00001617          	auipc	a2,0x1
200008b6:	7a260613          	addi	a2,a2,1954 # 20002054 <kExpectedHmacDigest>
200008ba:	854a                	mv	a0,s2
200008bc:	282d                	jal	200008f6 <run_test>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:212
  LOG_INFO("Running test HMAC pass 2...");
200008be:	00001597          	auipc	a1,0x1
200008c2:	7b658593          	addi	a1,a1,1974 # 20002074 <kExpectedHmacDigest+0x20>
200008c6:	0820                	addi	s0,sp,24
200008c8:	4651                	li	a2,20
200008ca:	8522                	mv	a0,s0
200008cc:	3be1                	jal	200006a4 <memcpy>
200008ce:	8522                	mv	a0,s0
200008d0:	0b5000ef          	jal	ra,20001184 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:213
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
200008d4:	effff597          	auipc	a1,0xeffff
200008d8:	73458593          	addi	a1,a1,1844 # 10000008 <kHmacKey>
200008dc:	00001617          	auipc	a2,0x1
200008e0:	77860613          	addi	a2,a2,1912 # 20002054 <kExpectedHmacDigest>
200008e4:	0028                	addi	a0,sp,8
200008e6:	2801                	jal	200008f6 <run_test>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:216
           kExpectedHmacDigest);

  return true;
200008e8:	4505                	li	a0,1
200008ea:	5942                	lw	s2,48(sp)
200008ec:	54d2                	lw	s1,52(sp)
200008ee:	5462                	lw	s0,56(sp)
200008f0:	50f2                	lw	ra,60(sp)
200008f2:	6121                	addi	sp,sp,64
200008f4:	8082                	ret

200008f6 <run_test>:
run_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:183
                     const uint8_t *key, const uint32_t *expected_digest) {
200008f6:	7175                	addi	sp,sp,-144
200008f8:	c706                	sw	ra,140(sp)
200008fa:	c522                	sw	s0,136(sp)
200008fc:	c326                	sw	s1,132(sp)
200008fe:	c14a                	sw	s2,128(sp)
20000900:	dece                	sw	s3,124(sp)
20000902:	dcd2                	sw	s4,120(sp)
20000904:	dad6                	sw	s5,116(sp)
20000906:	d8da                	sw	s6,112(sp)
20000908:	d6de                	sw	s7,108(sp)
2000090a:	d4e2                	sw	s8,104(sp)
2000090c:	d2e6                	sw	s9,100(sp)
2000090e:	d0ea                	sw	s10,96(sp)
20000910:	ceee                	sw	s11,92(sp)
20000912:	8cb2                	mv	s9,a2
20000914:	892a                	mv	s2,a0
test_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:68
  if (key == NULL) {
20000916:	c591                	beqz	a1,20000922 <run_test+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:71
    res = dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig);
20000918:	4605                	li	a2,1
2000091a:	4685                	li	a3,1
2000091c:	854a                	mv	a0,s2
2000091e:	2b15                	jal	20000e52 <dif_hmac_mode_hmac_start>
20000920:	a029                	j	2000092a <run_test+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:69
    res = dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig);
20000922:	4585                	li	a1,1
20000924:	4605                	li	a2,1
20000926:	854a                	mv	a0,s2
20000928:	2b49                	jal	20000eba <dif_hmac_mode_sha256_start>
2000092a:	4609                	li	a2,2
2000092c:	00001597          	auipc	a1,0x1
20000930:	62458593          	addi	a1,a1,1572 # 20001f50 <kDeviceLogBypassUartAddress>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:74
  CHECK(res != kDifHmacBadArg, "Invalid arguments encountered in HMAC start.");
20000934:	00c50663          	beq	a0,a2,20000940 <run_test+0x4a>
20000938:	e105                	bnez	a0,20000958 <run_test+0x62>
2000093a:	0005ad03          	lw	s10,0(a1)
2000093e:	a88d                	j	200009b0 <run_test+0xba>
20000940:	0005ad03          	lw	s10,0(a1)
20000944:	020d0663          	beqz	s10,20000970 <run_test+0x7a>
20000948:	e0010517          	auipc	a0,0xe0010
2000094c:	80c50513          	addi	a0,a0,-2036 # 10154 <test_start.kLogFields>
20000950:	4581                	li	a1,0
20000952:	0dd000ef          	jal	ra,2000122e <base_log_internal_dv>
20000956:	a805                	j	20000986 <run_test+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:75
  CHECK(res == kDifHmacOk, "Unknown error encountered in HMAC start.");
20000958:	0005ad03          	lw	s10,0(a1)
2000095c:	020d0b63          	beqz	s10,20000992 <run_test+0x9c>
20000960:	e0010517          	auipc	a0,0xe0010
20000964:	80850513          	addi	a0,a0,-2040 # 10168 <test_start.kLogFields.19>
20000968:	4581                	li	a1,0
2000096a:	0c5000ef          	jal	ra,2000122e <base_log_internal_dv>
2000096e:	a82d                	j	200009a8 <run_test+0xb2>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:74
  CHECK(res != kDifHmacBadArg, "Invalid arguments encountered in HMAC start.");
20000970:	00001597          	auipc	a1,0x1
20000974:	74458593          	addi	a1,a1,1860 # 200020b4 <kTestConfig+0x2c>
20000978:	1820                	addi	s0,sp,56
2000097a:	4651                	li	a2,20
2000097c:	8522                	mv	a0,s0
2000097e:	331d                	jal	200006a4 <memcpy>
20000980:	8522                	mv	a0,s0
20000982:	003000ef          	jal	ra,20001184 <base_log_internal_core>
20000986:	6531                	lui	a0,0xc
20000988:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000098c:	3981                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:75
  CHECK(res == kDifHmacOk, "Unknown error encountered in HMAC start.");
2000098e:	fc0d19e3          	bnez	s10,20000960 <run_test+0x6a>
20000992:	00001597          	auipc	a1,0x1
20000996:	73658593          	addi	a1,a1,1846 # 200020c8 <kTestConfig+0x40>
2000099a:	1820                	addi	s0,sp,56
2000099c:	4651                	li	a2,20
2000099e:	8522                	mv	a0,s0
200009a0:	3311                	jal	200006a4 <memcpy>
200009a2:	8522                	mv	a0,s0
200009a4:	7e0000ef          	jal	ra,20001184 <base_log_internal_core>
200009a8:	6531                	lui	a0,0xc
200009aa:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200009ae:	313d                	jal	200005dc <test_status_set>
200009b0:	4501                	li	a0,0
200009b2:	4401                	li	s0,0
200009b4:	00001997          	auipc	s3,0x1
200009b8:	5c898993          	addi	s3,s3,1480 # 20001f7c <kData>
200009bc:	08e00d93          	li	s11,142
200009c0:	02010a13          	addi	s4,sp,32
200009c4:	4b2d                	li	s6,11
200009c6:	00001597          	auipc	a1,0x1
200009ca:	75258593          	addi	a1,a1,1874 # 20002118 <kTestConfig+0x90>
200009ce:	ca2e                	sw	a1,20(sp)
200009d0:	03810a93          	addi	s5,sp,56
200009d4:	65b1                	lui	a1,0xc
200009d6:	aad58493          	addi	s1,a1,-1363 # baad <_stack_size+0x9aad>
200009da:	e000f597          	auipc	a1,0xe000f
200009de:	7de58593          	addi	a1,a1,2014 # 101b8 <push_message.kLogFields.28>
200009e2:	ce2e                	sw	a1,28(sp)
200009e4:	4b8d                	li	s7,3
200009e6:	00001597          	auipc	a1,0x1
200009ea:	6f658593          	addi	a1,a1,1782 # 200020dc <kTestConfig+0x54>
200009ee:	c22e                	sw	a1,4(sp)
200009f0:	00001597          	auipc	a1,0x1
200009f4:	70058593          	addi	a1,a1,1792 # 200020f0 <kTestConfig+0x68>
200009f8:	c02e                	sw	a1,0(sp)
200009fa:	e000f597          	auipc	a1,0xe000f
200009fe:	78258593          	addi	a1,a1,1922 # 1017c <push_message.kLogFields>
20000a02:	c62e                	sw	a1,12(sp)
20000a04:	e000f597          	auipc	a1,0xe000f
20000a08:	78c58593          	addi	a1,a1,1932 # 10190 <push_message.kLogFields.23>
20000a0c:	c42e                	sw	a1,8(sp)
20000a0e:	00001597          	auipc	a1,0x1
20000a12:	6f658593          	addi	a1,a1,1782 # 20002104 <kTestConfig+0x7c>
20000a16:	c82e                	sw	a1,16(sp)
20000a18:	e000f597          	auipc	a1,0xe000f
20000a1c:	78c58593          	addi	a1,a1,1932 # 101a4 <push_message.kLogFields.25>
20000a20:	cc2e                	sw	a1,24(sp)
20000a22:	8c4e                	mv	s8,s3
push_message():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:89
        dif_hmac_fifo_push(hmac, dp, len - (dp - data), &sent_bytes);
20000a24:	40ad8633          	sub	a2,s11,a0
20000a28:	854a                	mv	a0,s2
20000a2a:	85e2                	mv	a1,s8
20000a2c:	86d2                	mv	a3,s4
20000a2e:	21f1                	jal	20000efa <dif_hmac_fifo_push>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:91
    CHECK(res != kDifHmacFifoBadArg,
20000a30:	c53d                	beqz	a0,20000a9e <run_test+0x1a8>
20000a32:	03750263          	beq	a0,s7,20000a56 <run_test+0x160>
20000a36:	4589                	li	a1,2
20000a38:	04b51363          	bne	a0,a1,20000a7e <run_test+0x188>
20000a3c:	000d0f63          	beqz	s10,20000a5a <run_test+0x164>
20000a40:	4532                	lw	a0,12(sp)
20000a42:	4581                	li	a1,0
20000a44:	7ea000ef          	jal	ra,2000122e <base_log_internal_dv>
20000a48:	8526                	mv	a0,s1
20000a4a:	3e49                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:97
      CHECK(res != kDifHmacFifoBadArg,
20000a4c:	4522                	lw	a0,8(sp)
20000a4e:	4581                	li	a1,0
20000a50:	7de000ef          	jal	ra,2000122e <base_log_internal_dv>
20000a54:	a01d                	j	20000a7a <run_test+0x184>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:95
      ++fifo_fill_count;
20000a56:	0405                	addi	s0,s0,1
20000a58:	a099                	j	20000a9e <run_test+0x1a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:91
    CHECK(res != kDifHmacFifoBadArg,
20000a5a:	4651                	li	a2,20
20000a5c:	8556                	mv	a0,s5
20000a5e:	4592                	lw	a1,4(sp)
20000a60:	3191                	jal	200006a4 <memcpy>
20000a62:	8556                	mv	a0,s5
20000a64:	720000ef          	jal	ra,20001184 <base_log_internal_core>
20000a68:	8526                	mv	a0,s1
20000a6a:	3e8d                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:97
      CHECK(res != kDifHmacFifoBadArg,
20000a6c:	4651                	li	a2,20
20000a6e:	8556                	mv	a0,s5
20000a70:	4582                	lw	a1,0(sp)
20000a72:	390d                	jal	200006a4 <memcpy>
20000a74:	8556                	mv	a0,s5
20000a76:	70e000ef          	jal	ra,20001184 <base_log_internal_core>
20000a7a:	8526                	mv	a0,s1
20000a7c:	3685                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:99
      CHECK(res == kDifHmacFifoOk,
20000a7e:	000d0763          	beqz	s10,20000a8c <run_test+0x196>
20000a82:	4562                	lw	a0,24(sp)
20000a84:	4581                	li	a1,0
20000a86:	7a8000ef          	jal	ra,2000122e <base_log_internal_dv>
20000a8a:	a801                	j	20000a9a <run_test+0x1a4>
20000a8c:	4651                	li	a2,20
20000a8e:	8556                	mv	a0,s5
20000a90:	45c2                	lw	a1,16(sp)
20000a92:	3909                	jal	200006a4 <memcpy>
20000a94:	8556                	mv	a0,s5
20000a96:	6ee000ef          	jal	ra,20001184 <base_log_internal_core>
20000a9a:	8526                	mv	a0,s1
20000a9c:	3681                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:103
    CHECK(fifo_fill_count <= MAX_FIFO_FILL,
20000a9e:	03644263          	blt	s0,s6,20000ac2 <run_test+0x1cc>
20000aa2:	000d0763          	beqz	s10,20000ab0 <run_test+0x1ba>
20000aa6:	4572                	lw	a0,28(sp)
20000aa8:	4581                	li	a1,0
20000aaa:	784000ef          	jal	ra,2000122e <base_log_internal_dv>
20000aae:	a801                	j	20000abe <run_test+0x1c8>
20000ab0:	4651                	li	a2,20
20000ab2:	8556                	mv	a0,s5
20000ab4:	45d2                	lw	a1,20(sp)
20000ab6:	36fd                	jal	200006a4 <memcpy>
20000ab8:	8556                	mv	a0,s5
20000aba:	6ca000ef          	jal	ra,20001184 <base_log_internal_core>
20000abe:	8526                	mv	a0,s1
20000ac0:	3e31                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:106
    dp += sent_bytes;
20000ac2:	5502                	lw	a0,32(sp)
20000ac4:	9c2a                	add	s8,s8,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:87
  while (dp - data < len) {
20000ac6:	413c0533          	sub	a0,s8,s3
20000aca:	f5b56de3          	bltu	a0,s11,20000a24 <run_test+0x12e>
20000ace:	1000                	addi	s0,sp,32
20000ad0:	4c09                	li	s8,2
20000ad2:	00001997          	auipc	s3,0x1
20000ad6:	65a98993          	addi	s3,s3,1626 # 2000212c <kTestConfig+0xa4>
20000ada:	03810a13          	addi	s4,sp,56
20000ade:	6531                	lui	a0,0xc
20000ae0:	aad50493          	addi	s1,a0,-1363 # baad <_stack_size+0x9aad>
20000ae4:	e000fa97          	auipc	s5,0xe000f
20000ae8:	6e8a8a93          	addi	s5,s5,1768 # 101cc <wait_for_fifo_empty.kLogFields>
20000aec:	00001b17          	auipc	s6,0x1
20000af0:	654b0b13          	addi	s6,s6,1620 # 20002140 <kTestConfig+0xb8>
20000af4:	e000fb97          	auipc	s7,0xe000f
20000af8:	6ecb8b93          	addi	s7,s7,1772 # 101e0 <wait_for_fifo_empty.kLogFields.32>
wait_for_fifo_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:116
    dif_hmac_result_t res = dif_hmac_fifo_count_entries(hmac, &fifo_depth);
20000afc:	854a                	mv	a0,s2
20000afe:	85a2                	mv	a1,s0
20000b00:	21b9                	jal	20000f4e <dif_hmac_fifo_count_entries>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:118
    CHECK(res != kDifHmacBadArg,
20000b02:	c139                	beqz	a0,20000b48 <run_test+0x252>
20000b04:	03851263          	bne	a0,s8,20000b28 <run_test+0x232>
20000b08:	000d0763          	beqz	s10,20000b16 <run_test+0x220>
20000b0c:	8556                	mv	a0,s5
20000b0e:	4581                	li	a1,0
20000b10:	71e000ef          	jal	ra,2000122e <base_log_internal_dv>
20000b14:	a801                	j	20000b24 <run_test+0x22e>
20000b16:	4651                	li	a2,20
20000b18:	8552                	mv	a0,s4
20000b1a:	85ce                	mv	a1,s3
20000b1c:	3661                	jal	200006a4 <memcpy>
20000b1e:	8552                	mv	a0,s4
20000b20:	664000ef          	jal	ra,20001184 <base_log_internal_core>
20000b24:	8526                	mv	a0,s1
20000b26:	3c5d                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:120
    CHECK(res == kDifHmacOk, "Unknown error encountered checking FIFO depth.");
20000b28:	000d0763          	beqz	s10,20000b36 <run_test+0x240>
20000b2c:	855e                	mv	a0,s7
20000b2e:	4581                	li	a1,0
20000b30:	6fe000ef          	jal	ra,2000122e <base_log_internal_dv>
20000b34:	a801                	j	20000b44 <run_test+0x24e>
20000b36:	4651                	li	a2,20
20000b38:	8552                	mv	a0,s4
20000b3a:	85da                	mv	a1,s6
20000b3c:	36a5                	jal	200006a4 <memcpy>
20000b3e:	8552                	mv	a0,s4
20000b40:	644000ef          	jal	ra,20001184 <base_log_internal_core>
20000b44:	8526                	mv	a0,s1
20000b46:	3c59                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:121
  } while (fifo_depth > 0);
20000b48:	5502                	lw	a0,32(sp)
20000b4a:	f94d                	bnez	a0,20000afc <run_test+0x206>
20000b4c:	100c                	addi	a1,sp,32
check_message_length():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:131
  dif_hmac_result_t res = dif_hmac_get_message_length(hmac, &sent_bits);
20000b4e:	854a                	mv	a0,s2
20000b50:	2911                	jal	20000f64 <dif_hmac_get_message_length>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:133
  CHECK(res != kDifHmacBadArg,
20000b52:	c535                	beqz	a0,20000bbe <run_test+0x2c8>
20000b54:	4589                	li	a1,2
20000b56:	02b51b63          	bne	a0,a1,20000b8c <run_test+0x296>
20000b5a:	000d0a63          	beqz	s10,20000b6e <run_test+0x278>
20000b5e:	e000f517          	auipc	a0,0xe000f
20000b62:	69650513          	addi	a0,a0,1686 # 101f4 <check_message_length.kLogFields>
20000b66:	4581                	li	a1,0
20000b68:	6c6000ef          	jal	ra,2000122e <base_log_internal_dv>
20000b6c:	a821                	j	20000b84 <run_test+0x28e>
20000b6e:	00001597          	auipc	a1,0x1
20000b72:	5e658593          	addi	a1,a1,1510 # 20002154 <kTestConfig+0xcc>
20000b76:	1820                	addi	s0,sp,56
20000b78:	4651                	li	a2,20
20000b7a:	8522                	mv	a0,s0
20000b7c:	3625                	jal	200006a4 <memcpy>
20000b7e:	8522                	mv	a0,s0
20000b80:	604000ef          	jal	ra,20001184 <base_log_internal_core>
20000b84:	6531                	lui	a0,0xc
20000b86:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b8a:	3c89                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:135
  CHECK(res == kDifHmacOk,
20000b8c:	000d0a63          	beqz	s10,20000ba0 <run_test+0x2aa>
20000b90:	e000f517          	auipc	a0,0xe000f
20000b94:	67850513          	addi	a0,a0,1656 # 10208 <check_message_length.kLogFields.36>
20000b98:	4581                	li	a1,0
20000b9a:	694000ef          	jal	ra,2000122e <base_log_internal_dv>
20000b9e:	a821                	j	20000bb6 <run_test+0x2c0>
20000ba0:	00001597          	auipc	a1,0x1
20000ba4:	5c858593          	addi	a1,a1,1480 # 20002168 <kTestConfig+0xe0>
20000ba8:	1820                	addi	s0,sp,56
20000baa:	4651                	li	a2,20
20000bac:	8522                	mv	a0,s0
20000bae:	3cdd                	jal	200006a4 <memcpy>
20000bb0:	8522                	mv	a0,s0
20000bb2:	5d2000ef          	jal	ra,20001184 <base_log_internal_core>
20000bb6:	6531                	lui	a0,0xc
20000bb8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000bbc:	3405                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:139
  CHECK(expected_sent_bits == sent_bits,
20000bbe:	5402                	lw	s0,32(sp)
20000bc0:	5512                	lw	a0,36(sp)
20000bc2:	47044593          	xori	a1,s0,1136
20000bc6:	8d4d                	or	a0,a0,a1
20000bc8:	cd1d                	beqz	a0,20000c06 <run_test+0x310>
20000bca:	000d0d63          	beqz	s10,20000be4 <run_test+0x2ee>
20000bce:	e000f517          	auipc	a0,0xe000f
20000bd2:	64e50513          	addi	a0,a0,1614 # 1021c <check_message_length.kLogFields.39>
20000bd6:	4589                	li	a1,2
20000bd8:	47000613          	li	a2,1136
20000bdc:	86a2                	mv	a3,s0
20000bde:	650000ef          	jal	ra,2000122e <base_log_internal_dv>
20000be2:	a831                	j	20000bfe <run_test+0x308>
20000be4:	00001597          	auipc	a1,0x1
20000be8:	59858593          	addi	a1,a1,1432 # 2000217c <kTestConfig+0xf4>
20000bec:	1824                	addi	s1,sp,56
20000bee:	4651                	li	a2,20
20000bf0:	8526                	mv	a0,s1
20000bf2:	3c4d                	jal	200006a4 <memcpy>
20000bf4:	47000593          	li	a1,1136
20000bf8:	8526                	mv	a0,s1
20000bfa:	8622                	mv	a2,s0
20000bfc:	2361                	jal	20001184 <base_log_internal_core>
20000bfe:	6531                	lui	a0,0xc
20000c00:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000c04:	3ae1                	jal	200005dc <test_status_set>
run_hmac():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:148
  dif_hmac_result_t res = dif_hmac_process(hmac);
20000c06:	854a                	mv	a0,s2
20000c08:	2e8d                	jal	20000f7a <dif_hmac_process>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:150
  CHECK(res != kDifHmacBadArg, "Invalid arguments encountered running HMAC.");
20000c0a:	c525                	beqz	a0,20000c72 <run_test+0x37c>
20000c0c:	4589                	li	a1,2
20000c0e:	02b51a63          	bne	a0,a1,20000c42 <run_test+0x34c>
20000c12:	000d0a63          	beqz	s10,20000c26 <run_test+0x330>
20000c16:	e000f517          	auipc	a0,0xe000f
20000c1a:	61a50513          	addi	a0,a0,1562 # 10230 <run_hmac.kLogFields>
20000c1e:	4581                	li	a1,0
20000c20:	60e000ef          	jal	ra,2000122e <base_log_internal_dv>
20000c24:	a819                	j	20000c3a <run_test+0x344>
20000c26:	00001597          	auipc	a1,0x1
20000c2a:	56a58593          	addi	a1,a1,1386 # 20002190 <kTestConfig+0x108>
20000c2e:	1820                	addi	s0,sp,56
20000c30:	4651                	li	a2,20
20000c32:	8522                	mv	a0,s0
20000c34:	3c85                	jal	200006a4 <memcpy>
20000c36:	8522                	mv	a0,s0
20000c38:	23b1                	jal	20001184 <base_log_internal_core>
20000c3a:	6531                	lui	a0,0xc
20000c3c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000c40:	3a71                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:151
  CHECK(res == kDifHmacOk, "Unknown error encountered running HMAC.");
20000c42:	000d0a63          	beqz	s10,20000c56 <run_test+0x360>
20000c46:	e000f517          	auipc	a0,0xe000f
20000c4a:	5fe50513          	addi	a0,a0,1534 # 10244 <run_hmac.kLogFields.43>
20000c4e:	4581                	li	a1,0
20000c50:	5de000ef          	jal	ra,2000122e <base_log_internal_dv>
20000c54:	a819                	j	20000c6a <run_test+0x374>
20000c56:	00001597          	auipc	a1,0x1
20000c5a:	54e58593          	addi	a1,a1,1358 # 200021a4 <kTestConfig+0x11c>
20000c5e:	1820                	addi	s0,sp,56
20000c60:	4651                	li	a2,20
20000c62:	8522                	mv	a0,s0
20000c64:	3481                	jal	200006a4 <memcpy>
20000c66:	8522                	mv	a0,s0
20000c68:	2b31                	jal	20001184 <base_log_internal_core>
20000c6a:	6531                	lui	a0,0xc
20000c6c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000c70:	32b5                	jal	200005dc <test_status_set>
20000c72:	03810c13          	addi	s8,sp,56
20000c76:	4489                	li	s1,2
20000c78:	00001517          	auipc	a0,0x1
20000c7c:	54050513          	addi	a0,a0,1344 # 200021b8 <kTestConfig+0x130>
20000c80:	ce2a                	sw	a0,28(sp)
20000c82:	02010a13          	addi	s4,sp,32
20000c86:	6531                	lui	a0,0xc
20000c88:	aad50413          	addi	s0,a0,-1363 # baad <_stack_size+0x9aad>
20000c8c:	e000fa97          	auipc	s5,0xe000f
20000c90:	5cca8a93          	addi	s5,s5,1484 # 10258 <check_digest.kLogFields>
20000c94:	00001b17          	auipc	s6,0x1
20000c98:	538b0b13          	addi	s6,s6,1336 # 200021cc <kTestConfig+0x144>
20000c9c:	e000fb97          	auipc	s7,0xe000f
20000ca0:	5d0b8b93          	addi	s7,s7,1488 # 1026c <check_digest.kLogFields.47>
20000ca4:	4d8d                	li	s11,3
check_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:162
    dif_hmac_digest_result_t res = dif_hmac_finish(hmac, &digest_result);
20000ca6:	854a                	mv	a0,s2
20000ca8:	85e2                	mv	a1,s8
20000caa:	24d5                	jal	20000f8e <dif_hmac_finish>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:164
    CHECK(res != kDifHmacDigestBadArg,
20000cac:	00951863          	bne	a0,s1,20000cbc <run_test+0x3c6>
20000cb0:	020d0563          	beqz	s10,20000cda <run_test+0x3e4>
20000cb4:	8556                	mv	a0,s5
20000cb6:	4581                	li	a1,0
20000cb8:	2b9d                	jal	2000122e <base_log_internal_dv>
20000cba:	a035                	j	20000ce6 <run_test+0x3f0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:169
    if (hmac_done) {
20000cbc:	ffb505e3          	beq	a0,s11,20000ca6 <run_test+0x3b0>
20000cc0:	c129                	beqz	a0,20000d02 <run_test+0x40c>
20000cc2:	1575                	addi	a0,a0,-3
20000cc4:	00153993          	seqz	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:170
      CHECK(res == kDifHmacDigestOk,
20000cc8:	020d1563          	bnez	s10,20000cf2 <run_test+0x3fc>
20000ccc:	4651                	li	a2,20
20000cce:	8552                	mv	a0,s4
20000cd0:	85da                	mv	a1,s6
20000cd2:	3ac9                	jal	200006a4 <memcpy>
20000cd4:	8552                	mv	a0,s4
20000cd6:	217d                	jal	20001184 <base_log_internal_core>
20000cd8:	a005                	j	20000cf8 <run_test+0x402>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:164
    CHECK(res != kDifHmacDigestBadArg,
20000cda:	4651                	li	a2,20
20000cdc:	8552                	mv	a0,s4
20000cde:	45f2                	lw	a1,28(sp)
20000ce0:	32d1                	jal	200006a4 <memcpy>
20000ce2:	8552                	mv	a0,s4
20000ce4:	2145                	jal	20001184 <base_log_internal_core>
20000ce6:	8522                	mv	a0,s0
20000ce8:	8f5ff0ef          	jal	ra,200005dc <test_status_set>
20000cec:	4981                	li	s3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:170
      CHECK(res == kDifHmacDigestOk,
20000cee:	fc0d0fe3          	beqz	s10,20000ccc <run_test+0x3d6>
20000cf2:	855e                	mv	a0,s7
20000cf4:	4581                	li	a1,0
20000cf6:	2b25                	jal	2000122e <base_log_internal_dv>
20000cf8:	8522                	mv	a0,s0
20000cfa:	8e3ff0ef          	jal	ra,200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:173
  } while (!hmac_done);
20000cfe:	fa0994e3          	bnez	s3,20000ca6 <run_test+0x3b0>
20000d02:	4401                	li	s0,0
20000d04:	4ba1                	li	s7,8
20000d06:	00001917          	auipc	s2,0x1
20000d0a:	4da90913          	addi	s2,s2,1242 # 200021e0 <kTestConfig+0x158>
20000d0e:	02010993          	addi	s3,sp,32
20000d12:	6531                	lui	a0,0xc
20000d14:	aad50a13          	addi	s4,a0,-1363 # baad <_stack_size+0x9aad>
20000d18:	e000fa97          	auipc	s5,0xe000f
20000d1c:	568a8a93          	addi	s5,s5,1384 # 10280 <check_digest.kLogFields.50>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:176
    CHECK(expected_digest[i] == digest_result.digest[i],
20000d20:	000ca483          	lw	s1,0(s9)
20000d24:	000c2b03          	lw	s6,0(s8)
20000d28:	03648763          	beq	s1,s6,20000d56 <run_test+0x460>
20000d2c:	000d0963          	beqz	s10,20000d3e <run_test+0x448>
20000d30:	458d                	li	a1,3
20000d32:	8556                	mv	a0,s5
20000d34:	8626                	mv	a2,s1
20000d36:	86a2                	mv	a3,s0
20000d38:	875a                	mv	a4,s6
20000d3a:	29d5                	jal	2000122e <base_log_internal_dv>
20000d3c:	a811                	j	20000d50 <run_test+0x45a>
20000d3e:	4651                	li	a2,20
20000d40:	854e                	mv	a0,s3
20000d42:	85ca                	mv	a1,s2
20000d44:	3285                	jal	200006a4 <memcpy>
20000d46:	854e                	mv	a0,s3
20000d48:	85a6                	mv	a1,s1
20000d4a:	8622                	mv	a2,s0
20000d4c:	86da                	mv	a3,s6
20000d4e:	291d                	jal	20001184 <base_log_internal_core>
20000d50:	8552                	mv	a0,s4
20000d52:	88bff0ef          	jal	ra,200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:175
  for (int i = 0; i < 8; ++i) {
20000d56:	0405                	addi	s0,s0,1
20000d58:	0c11                	addi	s8,s8,4
20000d5a:	0c91                	addi	s9,s9,4
20000d5c:	fd7412e3          	bne	s0,s7,20000d20 <run_test+0x42a>
run_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_hmac_smoketest.c:190
}
20000d60:	4df6                	lw	s11,92(sp)
20000d62:	5d06                	lw	s10,96(sp)
20000d64:	5c96                	lw	s9,100(sp)
20000d66:	5c26                	lw	s8,104(sp)
20000d68:	5bb6                	lw	s7,108(sp)
20000d6a:	5b46                	lw	s6,112(sp)
20000d6c:	5ad6                	lw	s5,116(sp)
20000d6e:	5a66                	lw	s4,120(sp)
20000d70:	59f6                	lw	s3,124(sp)
20000d72:	490a                	lw	s2,128(sp)
20000d74:	449a                	lw	s1,132(sp)
20000d76:	442a                	lw	s0,136(sp)
20000d78:	40ba                	lw	ra,140(sp)
20000d7a:	6149                	addi	sp,sp,144
20000d7c:	8082                	ret
	...

20000d80 <dif_hmac_init>:
dif_hmac_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:69

  return true;
}

dif_hmac_result_t dif_hmac_init(const dif_hmac_config_t *config,
                                dif_hmac_t *hmac) {
20000d80:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:71
  // Basic checks on parameters. In `kDifHmacModeHmac` mode a key is required.
  if (config == NULL || hmac == NULL) {
20000d82:	c919                	beqz	a0,20000d98 <dif_hmac_init+0x18>
20000d84:	c991                	beqz	a1,20000d98 <dif_hmac_init+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:75
    return kDifHmacBadArg;
  }

  hmac->base_addr = config->base_addr;
20000d86:	4110                	lw	a2,0(a0)
20000d88:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:78

  // Clear the config, stopping the SHA engine.
  mmio_region_write32(config->base_addr, HMAC_CFG_REG_OFFSET, 0);
20000d8a:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d8c:	0005a623          	sw	zero,12(a1)
dif_hmac_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:81

  // Clear INTER.
  mmio_region_write32(config->base_addr, HMAC_INTR_STATE_REG_OFFSET,
20000d90:	4108                	lw	a0,0(a0)
20000d92:	4601                	li	a2,0
20000d94:	459d                	li	a1,7
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d96:	c10c                	sw	a1,0(a0)
dif_hmac_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:87
                      (1 << HMAC_INTR_STATE_HMAC_DONE_BIT) |
                          (1 << HMAC_INTR_STATE_FIFO_EMPTY_BIT) |
                          (1 << HMAC_INTR_STATE_HMAC_ERR_BIT));

  return kDifHmacOk;
}
20000d98:	8532                	mv	a0,a2
20000d9a:	8082                	ret

20000d9c <dif_hmac_irq_state_get>:
dif_hmac_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:91

dif_hmac_result_t dif_hmac_irq_state_get(const dif_hmac_t *hmac,
                                         dif_hmac_interrupt_t irq_type,
                                         dif_hmac_enable_t *state) {
20000d9c:	86aa                	mv	a3,a0
20000d9e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:92
  if (hmac == NULL || state == NULL) {
20000da0:	ce99                	beqz	a3,20000dbe <dif_hmac_irq_state_get+0x22>
20000da2:	ce11                	beqz	a2,20000dbe <dif_hmac_irq_state_get+0x22>
20000da4:	4709                	li	a4,2
20000da6:	4505                	li	a0,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
20000da8:	00b76b63          	bltu	a4,a1,20000dbe <dif_hmac_irq_state_get+0x22>
dif_hmac_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:102
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Get the interrupt state.
  bool enabled = mmio_region_get_bit32(hmac->base_addr,
20000dac:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dae:	4114                	lw	a3,0(a0)
20000db0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000db2:	00b6d5b3          	srl	a1,a3,a1
20000db6:	8985                	andi	a1,a1,1
20000db8:	0015b593          	seqz	a1,a1
dif_hmac_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:104
                                       HMAC_INTR_STATE_REG_OFFSET, offset);
  *state = (enabled ? kDifHmacEnable : kDifHmacDisable);
20000dbc:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:107

  return kDifHmacOk;
}
20000dbe:	8082                	ret

20000dc0 <dif_hmac_irq_state_clear>:
dif_hmac_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:111

dif_hmac_result_t dif_hmac_irq_state_clear(const dif_hmac_t *hmac,
                                           dif_hmac_interrupt_t irq_type) {
  if (hmac == NULL) {
20000dc0:	cd01                	beqz	a0,20000dd8 <dif_hmac_irq_state_clear+0x18>
20000dc2:	4689                	li	a3,2
20000dc4:	4605                	li	a2,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
20000dc6:	00b6ea63          	bltu	a3,a1,20000dda <dif_hmac_irq_state_clear+0x1a>
dif_hmac_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:121
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Clear the interrupt state.
  mmio_region_write_only_set_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
20000dca:	4108                	lw	a0,0(a0)
20000dcc:	4601                	li	a2,0
20000dce:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000dd0:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dd4:	c10c                	sw	a1,0(a0)
20000dd6:	a011                	j	20000dda <dif_hmac_irq_state_clear+0x1a>
20000dd8:	4609                	li	a2,2
dif_hmac_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:125
                                   offset);

  return kDifHmacOk;
}
20000dda:	8532                	mv	a0,a2
20000ddc:	8082                	ret

20000dde <dif_hmac_irqs_disable>:
dif_hmac_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:129

dif_hmac_result_t dif_hmac_irqs_disable(const dif_hmac_t *hmac,
                                        uint32_t *state) {
  if (hmac == NULL) {
20000dde:	c911                	beqz	a0,20000df2 <dif_hmac_irqs_disable+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:134
    return kDifHmacBadArg;
  }

  // Pass the interrupt state back to the caller.
  if (state != NULL) {
20000de0:	c581                	beqz	a1,20000de8 <dif_hmac_irqs_disable+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:135
    *state = mmio_region_read32(hmac->base_addr, HMAC_INTR_ENABLE_REG_OFFSET);
20000de2:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000de4:	4250                	lw	a2,4(a2)
dif_hmac_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:135
20000de6:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:139
  }

  // Disable all interrupts.
  mmio_region_write32(hmac->base_addr, HMAC_INTR_ENABLE_REG_OFFSET, 0u);
20000de8:	410c                	lw	a1,0(a0)
20000dea:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dec:	0005a223          	sw	zero,4(a1)
dif_hmac_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:142

  return kDifHmacOk;
}
20000df0:	8082                	ret
20000df2:	4509                	li	a0,2
20000df4:	8082                	ret

20000df6 <dif_hmac_irqs_restore>:
dif_hmac_irqs_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:146

dif_hmac_result_t dif_hmac_irqs_restore(const dif_hmac_t *hmac,
                                        uint32_t state) {
  if (hmac == NULL) {
20000df6:	c509                	beqz	a0,20000e00 <dif_hmac_irqs_restore+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:151
    return kDifHmacBadArg;
  }

  // Restore interrupt state.
  mmio_region_write32(hmac->base_addr, HMAC_INTR_ENABLE_REG_OFFSET, state);
20000df8:	4110                	lw	a2,0(a0)
20000dfa:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dfc:	c24c                	sw	a1,4(a2)
dif_hmac_irqs_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:154

  return kDifHmacOk;
}
20000dfe:	8082                	ret
20000e00:	4509                	li	a0,2
20000e02:	8082                	ret

20000e04 <dif_hmac_irq_control>:
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:159

dif_hmac_result_t dif_hmac_irq_control(const dif_hmac_t *hmac,
                                       dif_hmac_interrupt_t irq_type,
                                       dif_hmac_enable_t enable) {
  if (hmac == NULL) {
20000e04:	c10d                	beqz	a0,20000e26 <dif_hmac_irq_control+0x22>
20000e06:	86aa                	mv	a3,a0
20000e08:	4709                	li	a4,2
20000e0a:	4505                	li	a0,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
20000e0c:	02b76163          	bltu	a4,a1,20000e2e <dif_hmac_irq_control+0x2a>
20000e10:	4294                	lw	a3,0(a3)
20000e12:	42d8                	lw	a4,4(a3)
20000e14:	4505                	li	a0,1
20000e16:	00b515b3          	sll	a1,a0,a1
20000e1a:	4501                	li	a0,0
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:169
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Enable/Disable interrupt.
  if (enable == kDifHmacEnable) {
20000e1c:	c619                	beqz	a2,20000e2a <dif_hmac_irq_control+0x26>
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000e1e:	fff5c593          	not	a1,a1
20000e22:	8df9                	and	a1,a1,a4
20000e24:	a021                	j	20000e2c <dif_hmac_irq_control+0x28>
20000e26:	4509                	li	a0,2
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:178
    mmio_region_nonatomic_clear_bit32(hmac->base_addr,
                                      HMAC_INTR_ENABLE_REG_OFFSET, offset);
  }

  return kDifHmacOk;
}
20000e28:	8082                	ret
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e2a:	8dd9                	or	a1,a1,a4
20000e2c:	c2cc                	sw	a1,4(a3)
dif_hmac_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:178
20000e2e:	8082                	ret

20000e30 <dif_hmac_irq_force>:
dif_hmac_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:182

dif_hmac_result_t dif_hmac_irq_force(const dif_hmac_t *hmac,
                                     dif_hmac_interrupt_t irq_type) {
  if (hmac == NULL) {
20000e30:	cd11                	beqz	a0,20000e4c <dif_hmac_irq_force+0x1c>
20000e32:	4689                	li	a3,2
20000e34:	4605                	li	a2,1
irq_bit_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:49
  switch (irq_type) {
20000e36:	00b6ec63          	bltu	a3,a1,20000e4e <dif_hmac_irq_force+0x1e>
dif_hmac_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:192
  if (!irq_bit_offset_get(irq_type, &offset)) {
    return kDifHmacError;
  }

  // Force the requested interrupt.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_INTR_TEST_REG_OFFSET,
20000e3a:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e3c:	4514                	lw	a3,8(a0)
20000e3e:	4601                	li	a2,0
20000e40:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e42:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e46:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e48:	c50c                	sw	a1,8(a0)
20000e4a:	a011                	j	20000e4e <dif_hmac_irq_force+0x1e>
20000e4c:	4609                	li	a2,2
dif_hmac_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:196
                                  offset);

  return kDifHmacOk;
}
20000e4e:	8532                	mv	a0,a2
20000e50:	8082                	ret

20000e52 <dif_hmac_mode_hmac_start>:
dif_hmac_mode_hmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:254
  return kDifHmacOk;
}

dif_hmac_result_t dif_hmac_mode_hmac_start(
    const dif_hmac_t *hmac, const uint8_t *key,
    const dif_hmac_transaction_t config) {
20000e52:	1141                	addi	sp,sp,-16
20000e54:	c606                	sw	ra,12(sp)
20000e56:	c422                	sw	s0,8(sp)
20000e58:	c226                	sw	s1,4(sp)
20000e5a:	c04a                	sw	s2,0(sp)
20000e5c:	842a                	mv	s0,a0
20000e5e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:255
  if (hmac == NULL || key == NULL) {
20000e60:	c439                	beqz	s0,20000eae <dif_hmac_mode_hmac_start+0x5c>
20000e62:	84b2                	mv	s1,a2
20000e64:	862e                	mv	a2,a1
20000e66:	c5a1                	beqz	a1,20000eae <dif_hmac_mode_hmac_start+0x5c>
20000e68:	8936                	mv	s2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:261
    return kDifHmacBadArg;
  }

  // Set the HMAC key.
  // TODO Static assert register layout.
  mmio_region_memcpy_to_mmio32(hmac->base_addr, HMAC_KEY_0_REG_OFFSET, key,
20000e6a:	4008                	lw	a0,0(s0)
20000e6c:	02000593          	li	a1,32
20000e70:	02000693          	li	a3,32
20000e74:	2c3d                	jal	200010b2 <mmio_region_memcpy_to_mmio32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:266
                               HMAC_PARAM_NUM_WORDS * sizeof(uint32_t));

  // Read current CFG register value.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
20000e76:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e78:	45d0                	lw	a2,12(a1)
20000e7a:	4505                	li	a0,1
dif_hmac_calculate_device_config_value():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:218
  switch (config.message_endianness) {
20000e7c:	c489                	beqz	s1,20000e86 <dif_hmac_mode_hmac_start+0x34>
20000e7e:	4685                	li	a3,1
20000e80:	02d49763          	bne	s1,a3,20000eae <dif_hmac_mode_hmac_start+0x5c>
20000e84:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:231
  switch (config.digest_endianness) {
20000e86:	00090663          	beqz	s2,20000e92 <dif_hmac_mode_hmac_start+0x40>
20000e8a:	4685                	li	a3,1
20000e8c:	02d91163          	bne	s2,a3,20000eae <dif_hmac_mode_hmac_start+0x5c>
20000e90:	4921                	li	s2,8
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e92:	ff067513          	andi	a0,a2,-16
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e96:	8d45                	or	a0,a0,s1
20000e98:	01256533          	or	a0,a0,s2
20000e9c:	00356513          	ori	a0,a0,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ea0:	c5c8                	sw	a0,12(a1)
dif_hmac_mode_hmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:283
  device_config =
      bitfield_bit32_write(device_config, HMAC_CFG_HMAC_EN_BIT, true);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  // Begin HMAC operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
20000ea2:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ea4:	4990                	lw	a2,16(a1)
20000ea6:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000ea8:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000eac:	c990                	sw	a2,16(a1)
dif_hmac_mode_hmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:286
                                  HMAC_CMD_HASH_START_BIT);
  return kDifHmacOk;
}
20000eae:	4902                	lw	s2,0(sp)
20000eb0:	4492                	lw	s1,4(sp)
20000eb2:	4422                	lw	s0,8(sp)
20000eb4:	40b2                	lw	ra,12(sp)
20000eb6:	0141                	addi	sp,sp,16
20000eb8:	8082                	ret

20000eba <dif_hmac_mode_sha256_start>:
dif_hmac_mode_sha256_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:290

dif_hmac_result_t dif_hmac_mode_sha256_start(
    const dif_hmac_t *hmac, const dif_hmac_transaction_t config) {
  if (hmac == NULL) {
20000eba:	cd0d                	beqz	a0,20000ef4 <dif_hmac_mode_sha256_start+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:298

  // TODO: Clear HMAC Key? Write Zeroed HMAC Key?

  // Read current CFG register value.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
20000ebc:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ebe:	00c72803          	lw	a6,12(a4)
20000ec2:	4685                	li	a3,1
dif_hmac_calculate_device_config_value():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:218
  switch (config.message_endianness) {
20000ec4:	c589                	beqz	a1,20000ece <dif_hmac_mode_sha256_start+0x14>
20000ec6:	4785                	li	a5,1
20000ec8:	02f59763          	bne	a1,a5,20000ef6 <dif_hmac_mode_sha256_start+0x3c>
20000ecc:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:231
  switch (config.digest_endianness) {
20000ece:	c609                	beqz	a2,20000ed8 <dif_hmac_mode_sha256_start+0x1e>
20000ed0:	4785                	li	a5,1
20000ed2:	02f61263          	bne	a2,a5,20000ef6 <dif_hmac_mode_sha256_start+0x3c>
20000ed6:	4621                	li	a2,8
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000ed8:	ff087693          	andi	a3,a6,-16
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000edc:	8dd5                	or	a1,a1,a3
20000ede:	8dd1                	or	a1,a1,a2
20000ee0:	0025e593          	ori	a1,a1,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ee4:	c74c                	sw	a1,12(a4)
dif_hmac_mode_sha256_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:317

  // Write new CFG register value.
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  // Begin SHA256-only operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
20000ee6:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ee8:	490c                	lw	a1,16(a0)
20000eea:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000eec:	0015e593          	ori	a1,a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ef0:	c90c                	sw	a1,16(a0)
20000ef2:	a011                	j	20000ef6 <dif_hmac_mode_sha256_start+0x3c>
20000ef4:	4689                	li	a3,2
dif_hmac_mode_sha256_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:321
                                  HMAC_CMD_HASH_START_BIT);

  return kDifHmacOk;
}
20000ef6:	8536                	mv	a0,a3
20000ef8:	8082                	ret

20000efa <dif_hmac_fifo_push>:
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:325

dif_hmac_fifo_result_t dif_hmac_fifo_push(const dif_hmac_t *hmac,
                                          const void *data, size_t len,
                                          size_t *bytes_sent) {
20000efa:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:326
  if (hmac == NULL || data == NULL) {
20000efc:	c539                	beqz	a0,20000f4a <dif_hmac_fifo_push+0x50>
20000efe:	c5b1                	beqz	a1,20000f4a <dif_hmac_fifo_push+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:333
  }

  const uint8_t *data_sent = (const uint8_t *)data;
  size_t bytes_remaining = len;

  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
20000f00:	c231                	beqz	a2,20000f44 <dif_hmac_fifo_push+0x4a>
20000f02:	4811                	li	a6,4
20000f04:	6705                	lui	a4,0x1
20000f06:	80070893          	addi	a7,a4,-2048 # 800 <__DYNAMIC+0x800>
20000f0a:	8732                	mv	a4,a2
get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
20000f0c:	00052283          	lw	t0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f10:	0142a783          	lw	a5,20(t0)
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:337
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
    size_t bytes_written = 0;

    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
20000f14:	01076563          	bltu	a4,a6,20000f1e <dif_hmac_fifo_push+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:334
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
20000f18:	0035f793          	andi	a5,a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:337
    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
20000f1c:	cf81                	beqz	a5,20000f34 <dif_hmac_fifo_push+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:340
      // Individual byte writes are needed if the buffer isn't aligned or there
      // are no more full words to write.
      mmio_region_write8(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, *data_sent);
20000f1e:	00058303          	lb	t1,0(a1)
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
20000f22:	011287b3          	add	a5,t0,a7
20000f26:	00678023          	sb	t1,0(a5)
20000f2a:	4785                	li	a5,1
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:349
      uint32_t word = read_32(data_sent);
      mmio_region_write32(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, word);
      bytes_written = sizeof(uint32_t);
    }

    bytes_remaining -= bytes_written;
20000f2c:	8f1d                	sub	a4,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:350
    data_sent += bytes_written;
20000f2e:	95be                	add	a1,a1,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:333
  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
20000f30:	ff71                	bnez	a4,20000f0c <dif_hmac_fifo_push+0x12>
20000f32:	a809                	j	20000f44 <dif_hmac_fifo_push+0x4a>
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20000f34:	0005a303          	lw	t1,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f38:	011287b3          	add	a5,t0,a7
20000f3c:	0067a023          	sw	t1,0(a5)
20000f40:	4791                	li	a5,4
20000f42:	b7ed                	j	20000f2c <dif_hmac_fifo_push+0x32>
20000f44:	4701                	li	a4,0
dif_hmac_fifo_push():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:353
  }

  if (bytes_sent != NULL) {
20000f46:	c291                	beqz	a3,20000f4a <dif_hmac_fifo_push+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:354
    *bytes_sent = len - bytes_remaining;
20000f48:	c290                	sw	a2,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:362
  if (bytes_remaining > 0) {
    return kDifHmacFifoFull;
  }

  return kDifHmacFifoOk;
}
20000f4a:	853a                	mv	a0,a4
20000f4c:	8082                	ret

20000f4e <dif_hmac_fifo_count_entries>:
dif_hmac_fifo_count_entries():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:365

dif_hmac_result_t dif_hmac_fifo_count_entries(const dif_hmac_t *hmac,
                                              uint32_t *num_entries) {
20000f4e:	862a                	mv	a2,a0
20000f50:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:366
  if (hmac == NULL || num_entries == NULL) {
20000f52:	ca01                	beqz	a2,20000f62 <dif_hmac_fifo_count_entries+0x14>
20000f54:	c599                	beqz	a1,20000f62 <dif_hmac_fifo_count_entries+0x14>
get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
20000f56:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f58:	4950                	lw	a2,20(a0)
20000f5a:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000f5c:	8211                	srli	a2,a2,0x4
20000f5e:	8a7d                	andi	a2,a2,31
dif_hmac_fifo_count_entries():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:370
    return kDifHmacBadArg;
  }

  *num_entries = get_fifo_entry_count(hmac);
20000f60:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:373

  return kDifHmacOk;
}
20000f62:	8082                	ret

20000f64 <dif_hmac_get_message_length>:
dif_hmac_get_message_length():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:376

dif_hmac_result_t dif_hmac_get_message_length(const dif_hmac_t *hmac,
                                              uint64_t *msg_len) {
20000f64:	862a                	mv	a2,a0
20000f66:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:377
  if (hmac == NULL || msg_len == NULL) {
20000f68:	ca01                	beqz	a2,20000f78 <dif_hmac_get_message_length+0x14>
20000f6a:	c599                	beqz	a1,20000f78 <dif_hmac_get_message_length+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:382
    return kDifHmacBadArg;
  }

  uint64_t msg_lower =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_LOWER_REG_OFFSET);
20000f6c:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f6e:	5130                	lw	a2,96(a0)
dif_hmac_get_message_length():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:384
  uint64_t msg_upper =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_UPPER_REG_OFFSET);
20000f70:	5174                	lw	a3,100(a0)
20000f72:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:386

  *msg_len = (msg_upper << 32) | msg_lower;
20000f74:	c1d4                	sw	a3,4(a1)
20000f76:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:389

  return kDifHmacOk;
}
20000f78:	8082                	ret

20000f7a <dif_hmac_process>:
dif_hmac_process():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:392

dif_hmac_result_t dif_hmac_process(const dif_hmac_t *hmac) {
  if (hmac == NULL) {
20000f7a:	c901                	beqz	a0,20000f8a <dif_hmac_process+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:396
    return kDifHmacBadArg;
  }

  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
20000f7c:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f7e:	4990                	lw	a2,16(a1)
20000f80:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000f82:	00266613          	ori	a2,a2,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f86:	c990                	sw	a2,16(a1)
dif_hmac_process():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:399
                                  HMAC_CMD_HASH_PROCESS_BIT);
  return kDifHmacOk;
}
20000f88:	8082                	ret
20000f8a:	4509                	li	a0,2
20000f8c:	8082                	ret

20000f8e <dif_hmac_finish>:
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:402

dif_hmac_digest_result_t dif_hmac_finish(const dif_hmac_t *hmac,
                                         dif_hmac_digest_t *digest) {
20000f8e:	1141                	addi	sp,sp,-16
20000f90:	c606                	sw	ra,12(sp)
20000f92:	c422                	sw	s0,8(sp)
20000f94:	842a                	mv	s0,a0
20000f96:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:403
  if (hmac == NULL || digest == NULL) {
20000f98:	c805                	beqz	s0,20000fc8 <dif_hmac_finish+0x3a>
20000f9a:	862e                	mv	a2,a1
20000f9c:	c595                	beqz	a1,20000fc8 <dif_hmac_finish+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:408
    return kDifHmacDigestBadArg;
  }

  // Check if hmac_done is asserted.
  bool done = mmio_region_get_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
20000f9e:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fa0:	4188                	lw	a0,0(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000fa2:	00157693          	andi	a3,a0,1
20000fa6:	450d                	li	a0,3
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:411
                                    HMAC_INTR_STATE_HMAC_DONE_BIT);

  if (done) {
20000fa8:	c285                	beqz	a3,20000fc8 <dif_hmac_finish+0x3a>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000faa:	4188                	lw	a0,0(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000fac:	00156513          	ori	a0,a0,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fb0:	c188                	sw	a0,0(a1)
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:421
    return kDifHmacDigestProcessing;
  }

  // Read the digest.
  // TODO Static assert register layout.
  mmio_region_memcpy_from_mmio32(hmac->base_addr, HMAC_DIGEST_0_REG_OFFSET,
20000fb2:	4008                	lw	a0,0(s0)
20000fb4:	04000593          	li	a1,64
20000fb8:	02000693          	li	a3,32
20000fbc:	2015                	jal	20000fe0 <mmio_region_memcpy_from_mmio32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:428
                                 HMAC_PARAM_NUM_WORDS * sizeof(uint32_t));

  // Disable HMAC and SHA256 until the next transaction, clearing the current
  // digest.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
20000fbe:	400c                	lw	a1,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fc0:	45d0                	lw	a2,12(a1)
20000fc2:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000fc4:	9a71                	andi	a2,a2,-4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fc6:	c5d0                	sw	a2,12(a1)
dif_hmac_finish():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:436
  device_config =
      bitfield_bit32_write(device_config, HMAC_CFG_HMAC_EN_BIT, false);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  return kDifHmacDigestOk;
}
20000fc8:	4422                	lw	s0,8(sp)
20000fca:	40b2                	lw	ra,12(sp)
20000fcc:	0141                	addi	sp,sp,16
20000fce:	8082                	ret

20000fd0 <dif_hmac_wipe_secret>:
dif_hmac_wipe_secret():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:440

dif_hmac_result_t dif_hmac_wipe_secret(const dif_hmac_t *hmac,
                                       uint32_t entropy) {
  if (hmac == NULL) {
20000fd0:	c509                	beqz	a0,20000fda <dif_hmac_wipe_secret+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:444
    return kDifHmacBadArg;
  }

  mmio_region_write32(hmac->base_addr, HMAC_WIPE_SECRET_REG_OFFSET, entropy);
20000fd2:	4110                	lw	a2,0(a0)
20000fd4:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fd6:	ce4c                	sw	a1,28(a2)
dif_hmac_wipe_secret():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_hmac.c:447

  return kDifHmacOk;
}
20000fd8:	8082                	ret
20000fda:	4509                	li	a0,2
20000fdc:	8082                	ret
	...

20000fe0 <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:112
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
20000fe0:	4705                	li	a4,1
20000fe2:	a009                	j	20000fe4 <mmio_region_memcpy32>

20000fe4 <mmio_region_memcpy32>:
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:35
                                 size_t len, bool from_mmio) {
20000fe4:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:36
  if (len == 0) {
20000fe6:	d606                	sw	ra,44(sp)
20000fe8:	d422                	sw	s0,40(sp)
20000fea:	d226                	sw	s1,36(sp)
20000fec:	d04a                	sw	s2,32(sp)
20000fee:	ce4e                	sw	s3,28(sp)
20000ff0:	cc52                	sw	s4,24(sp)
20000ff2:	ca56                	sw	s5,20(sp)
20000ff4:	c85a                	sw	s6,16(sp)
20000ff6:	c6c5                	beqz	a3,2000109e <mmio_region_memcpy32+0xba>
20000ff8:	893a                	mv	s2,a4
20000ffa:	8436                	mv	s0,a3
20000ffc:	89b2                	mv	s3,a2
20000ffe:	8b2e                	mv	s6,a1
20001000:	8a2a                	mv	s4,a0
misalignment32_of():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:16
  return addr % alignof(uint32_t);
20001002:	0035f513          	andi	a0,a1,3
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:43
  if (misalignment != 0) {
20001006:	c139                	beqz	a0,2000104c <mmio_region_memcpy32+0x68>
20001008:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:46
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
2000100a:	8d89                	sub	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:50
    if (realignment > len) {
2000100c:	84a2                	mv	s1,s0
2000100e:	00b46363          	bltu	s0,a1,20001014 <mmio_region_memcpy32+0x30>
20001012:	84ae                	mv	s1,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001014:	ffcb7593          	andi	a1,s6,-4
20001018:	00ba0ab3          	add	s5,s4,a1
2000101c:	000aa583          	lw	a1,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:57
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
20001020:	c62e                	sw	a1,12(sp)
20001022:	006c                	addi	a1,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:61
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
20001024:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:62
    if (from_mmio) {
20001026:	00090763          	beqz	s2,20001034 <mmio_region_memcpy32+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:63
      memcpy(buf, current_byte, realignment);
2000102a:	854e                	mv	a0,s3
2000102c:	8626                	mv	a2,s1
2000102e:	e76ff0ef          	jal	ra,200006a4 <memcpy>
20001032:	a809                	j	20001044 <mmio_region_memcpy32+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:66
      memcpy(current_byte, buf, realignment);
20001034:	852e                	mv	a0,a1
20001036:	85ce                	mv	a1,s3
20001038:	8626                	mv	a2,s1
2000103a:	e6aff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:67
      mmio_region_write32(base, current_word_offset, current_word);
2000103e:	4532                	lw	a0,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001040:	00aaa023          	sw	a0,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:72
    len -= realignment;
20001044:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20001046:	cc21                	beqz	s0,2000109e <mmio_region_memcpy32+0xba>
20001048:	9b26                	add	s6,s6,s1
2000104a:	99a6                	add	s3,s3,s1
2000104c:	00810a93          	addi	s5,sp,8
20001050:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:81
    if (bytes_to_copy > len) {
20001052:	84a2                	mv	s1,s0
20001054:	00a46363          	bltu	s0,a0,2000105a <mmio_region_memcpy32+0x76>
20001058:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:86
    uint32_t current_word = 0;
2000105a:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:87
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
2000105c:	00a46c63          	bltu	s0,a0,20001074 <mmio_region_memcpy32+0x90>
20001060:	00091a63          	bnez	s2,20001074 <mmio_region_memcpy32+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20001064:	00090f63          	beqz	s2,20001082 <mmio_region_memcpy32+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:97
      memcpy(buf, &current_word, bytes_to_copy);
20001068:	854e                	mv	a0,s3
2000106a:	85d6                	mv	a1,s5
2000106c:	8626                	mv	a2,s1
2000106e:	e36ff0ef          	jal	ra,200006a4 <memcpy>
20001072:	a015                	j	20001096 <mmio_region_memcpy32+0xb2>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001074:	ffcb7513          	andi	a0,s6,-4
20001078:	9552                	add	a0,a0,s4
2000107a:	4108                	lw	a0,0(a0)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:92
      current_word = mmio_region_read32(base, offset);
2000107c:	c42a                	sw	a0,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
2000107e:	fe0915e3          	bnez	s2,20001068 <mmio_region_memcpy32+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:100
      memcpy(&current_word, buf, bytes_to_copy);
20001082:	8556                	mv	a0,s5
20001084:	85ce                	mv	a1,s3
20001086:	8626                	mv	a2,s1
20001088:	e1cff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:101
      mmio_region_write32(base, offset, current_word);
2000108c:	4522                	lw	a0,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000108e:	ffcb7593          	andi	a1,s6,-4
20001092:	95d2                	add	a1,a1,s4
20001094:	c188                	sw	a0,0(a1)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:104
    offset += bytes_to_copy;
20001096:	9b26                	add	s6,s6,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:106
    len -= bytes_to_copy;
20001098:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:105
    buf += bytes_to_copy;
2000109a:	99a6                	add	s3,s3,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
2000109c:	f855                	bnez	s0,20001050 <mmio_region_memcpy32+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:108
}
2000109e:	4b42                	lw	s6,16(sp)
200010a0:	4ad2                	lw	s5,20(sp)
200010a2:	4a62                	lw	s4,24(sp)
200010a4:	49f2                	lw	s3,28(sp)
200010a6:	5902                	lw	s2,32(sp)
200010a8:	5492                	lw	s1,36(sp)
200010aa:	5422                	lw	s0,40(sp)
200010ac:	50b2                	lw	ra,44(sp)
200010ae:	6145                	addi	sp,sp,48
200010b0:	8082                	ret

200010b2 <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:120
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
200010b2:	4701                	li	a4,0
200010b4:	bf05                	j	20000fe4 <mmio_region_memcpy32>

200010b6 <mmio_region_read8>:
mmio_region_read8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:85
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
200010b6:	952e                	add	a0,a0,a1
200010b8:	00054503          	lbu	a0,0(a0)
200010bc:	8082                	ret

200010be <mmio_region_read32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010be:	99f1                	andi	a1,a1,-4
200010c0:	952e                	add	a0,a0,a1
200010c2:	4108                	lw	a0,0(a0)
200010c4:	8082                	ret

200010c6 <mmio_region_write8>:
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
200010c6:	952e                	add	a0,a0,a1
200010c8:	00c50023          	sb	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:118
}
200010cc:	8082                	ret

200010ce <mmio_region_write32>:
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200010ce:	99f1                	andi	a1,a1,-4
200010d0:	952e                	add	a0,a0,a1
200010d2:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:134
}
200010d4:	8082                	ret

200010d6 <mmio_region_read_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010d6:	99f1                	andi	a1,a1,-4
200010d8:	952e                	add	a0,a0,a1
200010da:	4108                	lw	a0,0(a0)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200010dc:	00d55533          	srl	a0,a0,a3
200010e0:	8d71                	and	a0,a0,a2
mmio_region_read_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:176
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
200010e2:	8082                	ret

200010e4 <mmio_region_get_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010e4:	99f1                	andi	a1,a1,-4
200010e6:	952e                	add	a0,a0,a1
200010e8:	4108                	lw	a0,0(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200010ea:	00c55533          	srl	a0,a0,a2
200010ee:	8905                	andi	a0,a0,1
mmio_region_get_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:197
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
200010f0:	8082                	ret

200010f2 <mmio_region_nonatomic_clear_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010f2:	99f1                	andi	a1,a1,-4
200010f4:	952e                	add	a0,a0,a1
200010f6:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200010f8:	00d61633          	sll	a2,a2,a3
200010fc:	fff64613          	not	a2,a2
20001100:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001102:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:220
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
20001104:	8082                	ret

20001106 <mmio_region_nonatomic_set_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001106:	99f1                	andi	a1,a1,-4
20001108:	952e                	add	a0,a0,a1
2000110a:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
2000110c:	00d61633          	sll	a2,a2,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001110:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001112:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:242
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20001114:	8082                	ret

20001116 <mmio_region_write_only_set_mask32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001116:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000111a:	99f1                	andi	a1,a1,-4
2000111c:	952e                	add	a0,a0,a1
2000111e:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:264
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20001120:	8082                	ret

20001122 <mmio_region_nonatomic_set_field32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001122:	99f1                	andi	a1,a1,-4
20001124:	952e                	add	a0,a0,a1
20001126:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001128:	00d617b3          	sll	a5,a2,a3
2000112c:	fff7c793          	not	a5,a5
20001130:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001132:	8e79                	and	a2,a2,a4
20001134:	00d61633          	sll	a2,a2,a3
20001138:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000113a:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:288
                                              bitfield_field32_t field,
                                              uint32_t value) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
2000113c:	8082                	ret

2000113e <mmio_region_write_only_set_field32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000113e:	8e79                	and	a2,a2,a4
20001140:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001144:	99f1                	andi	a1,a1,-4
20001146:	952e                	add	a0,a0,a1
20001148:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:309
                                               bitfield_field32_t field,
                                               uint32_t value) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
2000114a:	8082                	ret

2000114c <mmio_region_nonatomic_clear_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000114c:	99f1                	andi	a1,a1,-4
2000114e:	952e                	add	a0,a0,a1
20001150:	410c                	lw	a1,0(a0)
20001152:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001154:	00c69633          	sll	a2,a3,a2
20001158:	fff64613          	not	a2,a2
2000115c:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000115e:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:328
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
20001160:	8082                	ret

20001162 <mmio_region_nonatomic_set_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001162:	99f1                	andi	a1,a1,-4
20001164:	952e                	add	a0,a0,a1
20001166:	410c                	lw	a1,0(a0)
20001168:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
2000116a:	00c69633          	sll	a2,a3,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000116e:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001170:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:346
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20001172:	8082                	ret

20001174 <mmio_region_write_only_set_bit32>:
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:363
 * @param bit_index the bit to set.
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_bit32(mmio_region_t base,
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
20001174:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001176:	00c69633          	sll	a2,a3,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000117a:	99f1                	andi	a1,a1,-4
2000117c:	952e                	add	a0,a0,a1
2000117e:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:367
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20001180:	8082                	ret
	...

20001184 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20001184:	7139                	addi	sp,sp,-64
20001186:	ce06                	sw	ra,28(sp)
20001188:	cc22                	sw	s0,24(sp)
2000118a:	ca26                	sw	s1,20(sp)
2000118c:	c84a                	sw	s2,16(sp)
2000118e:	892a                	mv	s2,a0
20001190:	de46                	sw	a7,60(sp)
20001192:	dc42                	sw	a6,56(sp)
20001194:	da3e                	sw	a5,52(sp)
20001196:	d83a                	sw	a4,48(sp)
20001198:	d636                	sw	a3,44(sp)
2000119a:	d432                	sw	a2,40(sp)
2000119c:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
2000119e:	4144                	lw	s1,4(a0)
200011a0:	80000537          	lui	a0,0x80000
200011a4:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd5c7>
200011a8:	8526                	mv	a0,s1
200011aa:	4581                	li	a1,0
200011ac:	d48ff0ef          	jal	ra,200006f4 <memchr>
200011b0:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
200011b4:	02f00593          	li	a1,47
200011b8:	8526                	mv	a0,s1
200011ba:	d52ff0ef          	jal	ra,2000070c <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200011be:	00092583          	lw	a1,0(s2)
200011c2:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
200011c4:	00b66b63          	bltu	a2,a1,200011da <base_log_internal_core+0x56>
200011c8:	058a                	slli	a1,a1,0x2
200011ca:	00001617          	auipc	a2,0x1
200011ce:	02a60613          	addi	a2,a2,42 # 200021f4 <kTestConfig+0x16c>
200011d2:	95b2                	add	a1,a1,a2
200011d4:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
200011d6:	e519                	bnez	a0,200011e4 <base_log_internal_core+0x60>
200011d8:	a801                	j	200011e8 <base_log_internal_core+0x64>
200011da:	00002597          	auipc	a1,0x2
200011de:	85358593          	addi	a1,a1,-1965 # 20002a2d <__clz_tab+0x7d9>
200011e2:	c119                	beqz	a0,200011e8 <base_log_internal_core+0x64>
200011e4:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
200011e8:	effff417          	auipc	s0,0xeffff
200011ec:	e4440413          	addi	s0,s0,-444 # 1000002c <base_log_internal_core.global_log_counter>
200011f0:	00045603          	lhu	a2,0(s0)
200011f4:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200011f8:	00002517          	auipc	a0,0x2
200011fc:	81c50513          	addi	a0,a0,-2020 # 20002a14 <__clz_tab+0x7c0>
20001200:	86a6                	mv	a3,s1
20001202:	28d1                	jal	200012d6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001204:	00041503          	lh	a0,0(s0)
20001208:	0505                	addi	a0,a0,1
2000120a:	00a41023          	sh	a0,0(s0)
2000120e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20001210:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20001212:	01092503          	lw	a0,16(s2)
20001216:	28c5                	jal	20001306 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001218:	00002517          	auipc	a0,0x2
2000121c:	80a50513          	addi	a0,a0,-2038 # 20002a22 <__clz_tab+0x7ce>
20001220:	285d                	jal	200012d6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20001222:	4942                	lw	s2,16(sp)
20001224:	44d2                	lw	s1,20(sp)
20001226:	4462                	lw	s0,24(sp)
20001228:	40f2                	lw	ra,28(sp)
2000122a:	6121                	addi	sp,sp,64
2000122c:	8082                	ret

2000122e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
2000122e:	1101                	addi	sp,sp,-32
20001230:	ce46                	sw	a7,28(sp)
20001232:	cc42                	sw	a6,24(sp)
20001234:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20001236:	00001797          	auipc	a5,0x1
2000123a:	d1a78793          	addi	a5,a5,-742 # 20001f50 <kDeviceLogBypassUartAddress>
2000123e:	439c                	lw	a5,0(a5)
20001240:	c83a                	sw	a4,16(sp)
20001242:	c636                	sw	a3,12(sp)
20001244:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001246:	c388                	sw	a0,0(a5)
20001248:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
2000124a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
2000124c:	c989                	beqz	a1,2000125e <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
2000124e:	4512                	lw	a0,4(sp)
20001250:	00450613          	addi	a2,a0,4
20001254:	c232                	sw	a2,4(sp)
20001256:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001258:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000125a:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
2000125c:	f9ed                	bnez	a1,2000124e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
2000125e:	6105                	addi	sp,sp,32
20001260:	8082                	ret
	...

20001264 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20001264:	e589                	bnez	a1,2000126e <base_set_stdout+0xa>
20001266:	00000597          	auipc	a1,0x0
2000126a:	01658593          	addi	a1,a1,22 # 2000127c <base_dev_null>
2000126e:	effff617          	auipc	a2,0xeffff
20001272:	d9260613          	addi	a2,a2,-622 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20001276:	c208                	sw	a0,0(a2)
20001278:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
2000127a:	8082                	ret

2000127c <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
2000127c:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
2000127e:	8082                	ret

20001280 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001280:	effff597          	auipc	a1,0xeffff
20001284:	d8058593          	addi	a1,a1,-640 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20001288:	c188                	sw	a0,0(a1)
2000128a:	00000517          	auipc	a0,0x0
2000128e:	00c50513          	addi	a0,a0,12 # 20001296 <base_dev_uart>
20001292:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001294:	8082                	ret

20001296 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20001296:	1101                	addi	sp,sp,-32
20001298:	ce06                	sw	ra,28(sp)
2000129a:	cc22                	sw	s0,24(sp)
2000129c:	ca26                	sw	s1,20(sp)
2000129e:	c84a                	sw	s2,16(sp)
200012a0:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200012a2:	c20d                	beqz	a2,200012c4 <base_dev_uart+0x2e>
200012a4:	8432                	mv	s0,a2
200012a6:	892e                	mv	s2,a1
200012a8:	89aa                	mv	s3,a0
200012aa:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
200012ac:	00990533          	add	a0,s2,s1
200012b0:	00054583          	lbu	a1,0(a0)
200012b4:	854e                	mv	a0,s3
200012b6:	2f11                	jal	200019ca <dif_uart_byte_send_polled>
200012b8:	e519                	bnez	a0,200012c6 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200012ba:	0485                	addi	s1,s1,1
200012bc:	fe9418e3          	bne	s0,s1,200012ac <base_dev_uart+0x16>
200012c0:	84a2                	mv	s1,s0
200012c2:	a011                	j	200012c6 <base_dev_uart+0x30>
200012c4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
200012c6:	8526                	mv	a0,s1
200012c8:	49b2                	lw	s3,12(sp)
200012ca:	4942                	lw	s2,16(sp)
200012cc:	44d2                	lw	s1,20(sp)
200012ce:	4462                	lw	s0,24(sp)
200012d0:	40f2                	lw	ra,28(sp)
200012d2:	6105                	addi	sp,sp,32
200012d4:	8082                	ret

200012d6 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
200012d6:	7179                	addi	sp,sp,-48
200012d8:	c606                	sw	ra,12(sp)
200012da:	d646                	sw	a7,44(sp)
200012dc:	d442                	sw	a6,40(sp)
200012de:	d23e                	sw	a5,36(sp)
200012e0:	d03a                	sw	a4,32(sp)
200012e2:	ce36                	sw	a3,28(sp)
200012e4:	cc32                	sw	a2,24(sp)
200012e6:	ca2e                	sw	a1,20(sp)
200012e8:	effff597          	auipc	a1,0xeffff
200012ec:	d1858593          	addi	a1,a1,-744 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
200012f0:	4190                	lw	a2,0(a1)
200012f2:	41cc                	lw	a1,4(a1)
200012f4:	872a                	mv	a4,a0
200012f6:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
200012f8:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200012fa:	8532                	mv	a0,a2
200012fc:	863a                	mv	a2,a4
200012fe:	200d                	jal	20001320 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20001300:	40b2                	lw	ra,12(sp)
20001302:	6145                	addi	sp,sp,48
20001304:	8082                	ret

20001306 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20001306:	effff697          	auipc	a3,0xeffff
2000130a:	cfa68693          	addi	a3,a3,-774 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000130e:	4290                	lw	a2,0(a3)
20001310:	42d4                	lw	a3,4(a3)
20001312:	872e                	mv	a4,a1
20001314:	87aa                	mv	a5,a0
20001316:	8532                	mv	a0,a2
20001318:	85b6                	mv	a1,a3
2000131a:	863e                	mv	a2,a5
2000131c:	86ba                	mv	a3,a4
2000131e:	a009                	j	20001320 <base_vfprintf>

20001320 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20001320:	7139                	addi	sp,sp,-64
20001322:	de06                	sw	ra,60(sp)
20001324:	dc22                	sw	s0,56(sp)
20001326:	da26                	sw	s1,52(sp)
20001328:	d84a                	sw	s2,48(sp)
2000132a:	d64e                	sw	s3,44(sp)
2000132c:	d452                	sw	s4,40(sp)
2000132e:	d256                	sw	s5,36(sp)
20001330:	d05a                	sw	s6,32(sp)
20001332:	ce5e                	sw	s7,28(sp)
20001334:	cc62                	sw	s8,24(sp)
20001336:	ca66                	sw	s9,20(sp)
20001338:	c86a                	sw	s10,16(sp)
2000133a:	c66e                	sw	s11,12(sp)
2000133c:	8bb2                	mv	s7,a2
2000133e:	892a                	mv	s2,a0
20001340:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20001342:	c199                	beqz	a1,20001348 <base_vfprintf+0x28>
20001344:	89ae                	mv	s3,a1
20001346:	a029                	j	20001350 <base_vfprintf+0x30>
20001348:	00000997          	auipc	s3,0x0
2000134c:	f3498993          	addi	s3,s3,-204 # 2000127c <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001350:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20001352:	000bc503          	lbu	a0,0(s7)
20001356:	28050f63          	beqz	a0,200015f4 <base_vfprintf+0x2d4>
2000135a:	4b01                	li	s6,0
2000135c:	02500c13          	li	s8,37
20001360:	4ca5                	li	s9,9
20001362:	02000d13          	li	s10,32
20001366:	06800d93          	li	s11,104
2000136a:	00001a17          	auipc	s4,0x1
2000136e:	6c5a0a13          	addi	s4,s4,1733 # 20002a2f <__clz_tab+0x7db>
20001372:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20001374:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20001376:	0ff57413          	andi	s0,a0,255
2000137a:	01840963          	beq	s0,s8,2000138c <base_vfprintf+0x6c>
2000137e:	c419                	beqz	s0,2000138c <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001380:	009b8533          	add	a0,s7,s1
20001384:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20001388:	0485                	addi	s1,s1,1
2000138a:	b7f5                	j	20001376 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
2000138c:	c491                	beqz	s1,20001398 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
2000138e:	854a                	mv	a0,s2
20001390:	85de                	mv	a1,s7
20001392:	8626                	mv	a2,s1
20001394:	9982                	jalr	s3
20001396:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20001398:	24040f63          	beqz	s0,200015f6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000139c:	009b8633          	add	a2,s7,s1
200013a0:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200013a4:	22050f63          	beqz	a0,200015e2 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200013a8:	fd050593          	addi	a1,a0,-48
200013ac:	0ff5f593          	andi	a1,a1,255
200013b0:	00bcf863          	bgeu	s9,a1,200013c0 <base_vfprintf+0xa0>
200013b4:	4401                	li	s0,0
200013b6:	4581                	li	a1,0
200013b8:	4605                	li	a2,1
200013ba:	028d7f63          	bgeu	s10,s0,200013f8 <base_vfprintf+0xd8>
200013be:	aca1                	j	20001616 <base_vfprintf+0x2f6>
200013c0:	4581                	li	a1,0
200013c2:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200013c4:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200013c6:	00b606b3          	add	a3,a2,a1
200013ca:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200013ce:	20068a63          	beqz	a3,200015e2 <base_vfprintf+0x2c2>
200013d2:	0ff57513          	andi	a0,a0,255
200013d6:	03540733          	mul	a4,s0,s5
200013da:	953a                	add	a0,a0,a4
200013dc:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200013e0:	fd068513          	addi	a0,a3,-48
200013e4:	0ff57713          	andi	a4,a0,255
200013e8:	0585                	addi	a1,a1,1
200013ea:	8536                	mv	a0,a3
200013ec:	fcecfde3          	bgeu	s9,a4,200013c6 <base_vfprintf+0xa6>
200013f0:	4601                	li	a2,0
200013f2:	8536                	mv	a0,a3
200013f4:	228d6163          	bltu	s10,s0,20001616 <base_vfprintf+0x2f6>
200013f8:	008036b3          	snez	a3,s0
200013fc:	8e55                	or	a2,a2,a3
200013fe:	20060c63          	beqz	a2,20001616 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001402:	95de                	add	a1,a1,s7
20001404:	95a6                	add	a1,a1,s1
20001406:	00258b93          	addi	s7,a1,2
2000140a:	02adce63          	blt	s11,a0,20001446 <base_vfprintf+0x126>
2000140e:	06100593          	li	a1,97
20001412:	06a5d563          	bge	a1,a0,2000147c <base_vfprintf+0x15c>
20001416:	06300593          	li	a1,99
2000141a:	0ca5cb63          	blt	a1,a0,200014f0 <base_vfprintf+0x1d0>
2000141e:	06200593          	li	a1,98
20001422:	14b50a63          	beq	a0,a1,20001576 <base_vfprintf+0x256>
20001426:	06300593          	li	a1,99
2000142a:	18b51f63          	bne	a0,a1,200015c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
2000142e:	4502                	lw	a0,0(sp)
20001430:	00450593          	addi	a1,a0,4
20001434:	c02e                	sw	a1,0(sp)
20001436:	4108                	lw	a0,0(a0)
20001438:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
2000143c:	4605                	li	a2,1
2000143e:	854a                	mv	a0,s2
20001440:	00b10593          	addi	a1,sp,11
20001444:	aa41                	j	200015d4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001446:	07200593          	li	a1,114
2000144a:	04a5dd63          	bge	a1,a0,200014a4 <base_vfprintf+0x184>
2000144e:	07700593          	li	a1,119
20001452:	0aa5c663          	blt	a1,a0,200014fe <base_vfprintf+0x1de>
20001456:	07300593          	li	a1,115
2000145a:	12b50963          	beq	a0,a1,2000158c <base_vfprintf+0x26c>
2000145e:	07500593          	li	a1,117
20001462:	16b51363          	bne	a0,a1,200015c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20001466:	4502                	lw	a0,0(sp)
20001468:	00450593          	addi	a1,a0,4
2000146c:	c02e                	sw	a1,0(sp)
2000146e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001470:	00001797          	auipc	a5,0x1
20001474:	db178793          	addi	a5,a5,-591 # 20002221 <kDigitsLow>
20001478:	4729                	li	a4,10
2000147a:	a8cd                	j	2000156c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000147c:	13850763          	beq	a0,s8,200015aa <base_vfprintf+0x28a>
20001480:	04800593          	li	a1,72
20001484:	00b50663          	beq	a0,a1,20001490 <base_vfprintf+0x170>
20001488:	05800593          	li	a1,88
2000148c:	12b51e63          	bne	a0,a1,200015c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001490:	4502                	lw	a0,0(sp)
20001492:	00450593          	addi	a1,a0,4
20001496:	c02e                	sw	a1,0(sp)
20001498:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
2000149a:	00001797          	auipc	a5,0x1
2000149e:	d9778793          	addi	a5,a5,-617 # 20002231 <kDigitsHigh>
200014a2:	a0e1                	j	2000156a <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200014a4:	06900593          	li	a1,105
200014a8:	06b50d63          	beq	a0,a1,20001522 <base_vfprintf+0x202>
200014ac:	06f00593          	li	a1,111
200014b0:	10b50163          	beq	a0,a1,200015b2 <base_vfprintf+0x292>
200014b4:	07000593          	li	a1,112
200014b8:	10b51863          	bne	a0,a1,200015c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200014bc:	00001597          	auipc	a1,0x1
200014c0:	57758593          	addi	a1,a1,1399 # 20002a33 <__clz_tab+0x7df>
200014c4:	4609                	li	a2,2
200014c6:	854a                	mv	a0,s2
200014c8:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
200014ca:	4582                	lw	a1,0(sp)
200014cc:	00458613          	addi	a2,a1,4
200014d0:	c032                	sw	a2,0(sp)
200014d2:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200014d4:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
200014d8:	00001797          	auipc	a5,0x1
200014dc:	d4978793          	addi	a5,a5,-695 # 20002221 <kDigitsLow>
200014e0:	46a1                	li	a3,8
200014e2:	4741                	li	a4,16
200014e4:	854a                	mv	a0,s2
200014e6:	85ce                	mv	a1,s3
200014e8:	2a5d                	jal	2000169e <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
200014ea:	00a40b33          	add	s6,s0,a0
200014ee:	a0ed                	j	200015d8 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200014f0:	06400593          	li	a1,100
200014f4:	02b50763          	beq	a0,a1,20001522 <base_vfprintf+0x202>
200014f8:	07b50063          	beq	a0,s11,20001558 <base_vfprintf+0x238>
200014fc:	a0f1                	j	200015c8 <base_vfprintf+0x2a8>
200014fe:	07800593          	li	a1,120
20001502:	04b50b63          	beq	a0,a1,20001558 <base_vfprintf+0x238>
20001506:	07a00593          	li	a1,122
2000150a:	0ab51f63          	bne	a0,a1,200015c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
2000150e:	4502                	lw	a0,0(sp)
20001510:	00450593          	addi	a1,a0,4
20001514:	c02e                	sw	a1,0(sp)
20001516:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001518:	00850593          	addi	a1,a0,8
2000151c:	c02e                	sw	a1,0(sp)
2000151e:	414c                	lw	a1,4(a0)
20001520:	a84d                	j	200015d2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20001522:	4502                	lw	a0,0(sp)
20001524:	00450593          	addi	a1,a0,4
20001528:	c02e                	sw	a1,0(sp)
2000152a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
2000152c:	557d                	li	a0,-1
2000152e:	00954c63          	blt	a0,s1,20001546 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20001532:	00001597          	auipc	a1,0x1
20001536:	4ff58593          	addi	a1,a1,1279 # 20002a31 <__clz_tab+0x7dd>
2000153a:	4605                	li	a2,1
2000153c:	854a                	mv	a0,s2
2000153e:	9982                	jalr	s3
20001540:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20001542:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001546:	00001797          	auipc	a5,0x1
2000154a:	cdb78793          	addi	a5,a5,-805 # 20002221 <kDigitsLow>
2000154e:	4729                	li	a4,10
20001550:	854a                	mv	a0,s2
20001552:	85ce                	mv	a1,s3
20001554:	8626                	mv	a2,s1
20001556:	a829                	j	20001570 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20001558:	4502                	lw	a0,0(sp)
2000155a:	00450593          	addi	a1,a0,4
2000155e:	c02e                	sw	a1,0(sp)
20001560:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20001562:	00001797          	auipc	a5,0x1
20001566:	cbf78793          	addi	a5,a5,-833 # 20002221 <kDigitsLow>
2000156a:	4741                	li	a4,16
2000156c:	854a                	mv	a0,s2
2000156e:	85ce                	mv	a1,s3
20001570:	86a2                	mv	a3,s0
20001572:	2235                	jal	2000169e <write_digits>
20001574:	a08d                	j	200015d6 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20001576:	4502                	lw	a0,0(sp)
20001578:	00450593          	addi	a1,a0,4
2000157c:	c02e                	sw	a1,0(sp)
2000157e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20001580:	00001797          	auipc	a5,0x1
20001584:	ca178793          	addi	a5,a5,-863 # 20002221 <kDigitsLow>
20001588:	4709                	li	a4,2
2000158a:	b7cd                	j	2000156c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
2000158c:	4502                	lw	a0,0(sp)
2000158e:	00450593          	addi	a1,a0,4
20001592:	c02e                	sw	a1,0(sp)
20001594:	410c                	lw	a1,0(a0)
20001596:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001598:	00a58633          	add	a2,a1,a0
2000159c:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200015a0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200015a2:	fa7d                	bnez	a2,20001598 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200015a4:	fff50613          	addi	a2,a0,-1
200015a8:	a02d                	j	200015d2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200015aa:	4605                	li	a2,1
200015ac:	854a                	mv	a0,s2
200015ae:	85d2                	mv	a1,s4
200015b0:	a015                	j	200015d4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200015b2:	4502                	lw	a0,0(sp)
200015b4:	00450593          	addi	a1,a0,4
200015b8:	c02e                	sw	a1,0(sp)
200015ba:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
200015bc:	00001797          	auipc	a5,0x1
200015c0:	c6578793          	addi	a5,a5,-923 # 20002221 <kDigitsLow>
200015c4:	4721                	li	a4,8
200015c6:	b75d                	j	2000156c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
200015c8:	00001597          	auipc	a1,0x1
200015cc:	c7958593          	addi	a1,a1,-903 # 20002241 <kUnknownSpec>
200015d0:	463d                	li	a2,15
200015d2:	854a                	mv	a0,s2
200015d4:	9982                	jalr	s3
200015d6:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
200015d8:	000bc503          	lbu	a0,0(s7)
200015dc:	d8051ce3          	bnez	a0,20001374 <base_vfprintf+0x54>
200015e0:	a819                	j	200015f6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
200015e2:	00001597          	auipc	a1,0x1
200015e6:	c2258593          	addi	a1,a1,-990 # 20002204 <kErrorNul>
200015ea:	4645                	li	a2,17
200015ec:	854a                	mv	a0,s2
200015ee:	9982                	jalr	s3
200015f0:	9b2a                	add	s6,s6,a0
200015f2:	a011                	j	200015f6 <base_vfprintf+0x2d6>
200015f4:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
200015f6:	855a                	mv	a0,s6
200015f8:	4db2                	lw	s11,12(sp)
200015fa:	4d42                	lw	s10,16(sp)
200015fc:	4cd2                	lw	s9,20(sp)
200015fe:	4c62                	lw	s8,24(sp)
20001600:	4bf2                	lw	s7,28(sp)
20001602:	5b02                	lw	s6,32(sp)
20001604:	5a92                	lw	s5,36(sp)
20001606:	5a22                	lw	s4,40(sp)
20001608:	59b2                	lw	s3,44(sp)
2000160a:	5942                	lw	s2,48(sp)
2000160c:	54d2                	lw	s1,52(sp)
2000160e:	5462                	lw	s0,56(sp)
20001610:	50f2                	lw	ra,60(sp)
20001612:	6121                	addi	sp,sp,64
20001614:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001616:	00001597          	auipc	a1,0x1
2000161a:	bff58593          	addi	a1,a1,-1025 # 20002215 <kErrorTooWide>
2000161e:	4631                	li	a2,12
20001620:	b7f1                	j	200015ec <base_vfprintf+0x2cc>

20001622 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20001622:	7179                	addi	sp,sp,-48
20001624:	ca06                	sw	ra,20(sp)
20001626:	d646                	sw	a7,44(sp)
20001628:	d442                	sw	a6,40(sp)
2000162a:	d23e                	sw	a5,36(sp)
2000162c:	d03a                	sw	a4,32(sp)
2000162e:	ce36                	sw	a3,28(sp)
20001630:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20001632:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001634:	c42a                	sw	a0,8(sp)
20001636:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001638:	00000597          	auipc	a1,0x0
2000163c:	01258593          	addi	a1,a1,18 # 2000164a <snprintf_sink>
20001640:	0028                	addi	a0,sp,8
20001642:	39f9                	jal	20001320 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001644:	40d2                	lw	ra,20(sp)
20001646:	6145                	addi	sp,sp,48
20001648:	8082                	ret

2000164a <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000164a:	1141                	addi	sp,sp,-16
2000164c:	c606                	sw	ra,12(sp)
2000164e:	c422                	sw	s0,8(sp)
20001650:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20001652:	4140                	lw	s0,4(a0)
20001654:	c00d                	beqz	s0,20001676 <snprintf_sink+0x2c>
20001656:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20001658:	00c46363          	bltu	s0,a2,2000165e <snprintf_sink+0x14>
2000165c:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
2000165e:	4088                	lw	a0,0(s1)
20001660:	8622                	mv	a2,s0
20001662:	842ff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001666:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001668:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000166a:	9522                	add	a0,a0,s0
2000166c:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
2000166e:	40858533          	sub	a0,a1,s0
20001672:	c0c8                	sw	a0,4(s1)
20001674:	a011                	j	20001678 <snprintf_sink+0x2e>
20001676:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20001678:	8522                	mv	a0,s0
2000167a:	4492                	lw	s1,4(sp)
2000167c:	4422                	lw	s0,8(sp)
2000167e:	40b2                	lw	ra,12(sp)
20001680:	0141                	addi	sp,sp,16
20001682:	8082                	ret

20001684 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001684:	1101                	addi	sp,sp,-32
20001686:	c206                	sw	ra,4(sp)
20001688:	ce46                	sw	a7,28(sp)
2000168a:	cc42                	sw	a6,24(sp)
2000168c:	ca3e                	sw	a5,20(sp)
2000168e:	c83a                	sw	a4,16(sp)
20001690:	c636                	sw	a3,12(sp)
20001692:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001694:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20001696:	3169                	jal	20001320 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001698:	4092                	lw	ra,4(sp)
2000169a:	6105                	addi	sp,sp,32
2000169c:	8082                	ret

2000169e <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
2000169e:	7139                	addi	sp,sp,-64
200016a0:	de06                	sw	ra,60(sp)
200016a2:	dc22                	sw	s0,56(sp)
200016a4:	da26                	sw	s1,52(sp)
200016a6:	d84a                	sw	s2,48(sp)
200016a8:	d64e                	sw	s3,44(sp)
200016aa:	892e                	mv	s2,a1
200016ac:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200016ae:	ca05                	beqz	a2,200016de <write_digits+0x40>
200016b0:	4501                	li	a0,0
200016b2:	02b10813          	addi	a6,sp,43
200016b6:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
200016b8:	02e65633          	divu	a2,a2,a4
200016bc:	02e60433          	mul	s0,a2,a4
200016c0:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
200016c4:	943e                	add	s0,s0,a5
200016c6:	00040403          	lb	s0,0(s0)
200016ca:	00a805b3          	add	a1,a6,a0
200016ce:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200016d2:	157d                	addi	a0,a0,-1
200016d4:	fee4f1e3          	bgeu	s1,a4,200016b6 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
200016d8:	40a00633          	neg	a2,a0
200016dc:	a011                	j	200016e0 <write_digits+0x42>
200016de:	4601                	li	a2,0
200016e0:	4485                	li	s1,1
200016e2:	c291                	beqz	a3,200016e6 <write_digits+0x48>
200016e4:	84b6                	mv	s1,a3
200016e6:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
200016ea:	00a4e463          	bltu	s1,a0,200016f2 <write_digits+0x54>
200016ee:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200016f2:	02967063          	bgeu	a2,s1,20001712 <write_digits+0x74>
200016f6:	0068                	addi	a0,sp,12
200016f8:	8d05                	sub	a0,a0,s1
200016fa:	02050513          	addi	a0,a0,32
200016fe:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001702:	03000593          	li	a1,48
20001706:	8622                	mv	a2,s0
20001708:	fb3fe0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000170c:	147d                	addi	s0,s0,-1
2000170e:	fc7d                	bnez	s0,2000170c <write_digits+0x6e>
20001710:	8626                	mv	a2,s1
20001712:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001714:	8d11                	sub	a0,a0,a2
20001716:	02050593          	addi	a1,a0,32
2000171a:	854e                	mv	a0,s3
2000171c:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
2000171e:	59b2                	lw	s3,44(sp)
20001720:	5942                	lw	s2,48(sp)
20001722:	54d2                	lw	s1,52(sp)
20001724:	5462                	lw	s0,56(sp)
20001726:	50f2                	lw	ra,60(sp)
20001728:	6121                	addi	sp,sp,64
2000172a:	8082                	ret

2000172c <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
2000172c:	c581                	beqz	a1,20001734 <dif_uart_init+0x8>
2000172e:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20001730:	c188                	sw	a0,0(a1)
20001732:	a011                	j	20001736 <dif_uart_init+0xa>
20001734:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001736:	8532                	mv	a0,a2
20001738:	8082                	ret

2000173a <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
2000173a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
2000173c:	c606                	sw	ra,12(sp)
2000173e:	c422                	sw	s0,8(sp)
20001740:	c226                	sw	s1,4(sp)
20001742:	c92d                	beqz	a0,200017b4 <dif_uart_configure+0x7a>
20001744:	84ae                	mv	s1,a1
20001746:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001748:	418c                	lw	a1,0(a1)
2000174a:	450d                	li	a0,3
2000174c:	c5ad                	beqz	a1,200017b6 <dif_uart_configure+0x7c>
2000174e:	40d0                	lw	a2,4(s1)
20001750:	c23d                	beqz	a2,200017b6 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20001752:	01459513          	slli	a0,a1,0x14
20001756:	81b1                	srli	a1,a1,0xc
20001758:	4681                	li	a3,0
2000175a:	2e61                	jal	20001af2 <__udivdi3>
2000175c:	6641                	lui	a2,0x10
2000175e:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20001760:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20001762:	8d31                	xor	a0,a0,a2
20001764:	8dc9                	or	a1,a1,a0
20001766:	4511                	li	a0,4
20001768:	e5b9                	bnez	a1,200017b6 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
2000176a:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000176c:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20001770:	4008                	lw	a0,0(s0)
20001772:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001774:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20001776:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001778:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
2000177c:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000177e:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001782:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001784:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20001788:	4008                	lw	a0,0(s0)
2000178a:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000178c:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
2000178e:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001790:	01061513          	slli	a0,a2,0x10
20001794:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20001798:	c291                	beqz	a3,2000179c <dif_uart_configure+0x62>
2000179a:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
2000179c:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
2000179e:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
200017a0:	e219                	bnez	a2,200017a6 <dif_uart_configure+0x6c>
200017a2:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
200017a6:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017a8:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200017aa:	400c                	lw	a1,0(s0)
200017ac:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017ae:	0005a223          	sw	zero,4(a1)
200017b2:	a011                	j	200017b6 <dif_uart_configure+0x7c>
200017b4:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
200017b6:	4492                	lw	s1,4(sp)
200017b8:	4422                	lw	s0,8(sp)
200017ba:	40b2                	lw	ra,12(sp)
200017bc:	0141                	addi	sp,sp,16
200017be:	8082                	ret

200017c0 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
200017c0:	1141                	addi	sp,sp,-16
200017c2:	c606                	sw	ra,12(sp)
200017c4:	c422                	sw	s0,8(sp)
200017c6:	c226                	sw	s1,4(sp)
200017c8:	84aa                	mv	s1,a0
200017ca:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
200017cc:	c09d                	beqz	s1,200017f2 <dif_uart_irq_is_pending+0x32>
200017ce:	8432                	mv	s0,a2
200017d0:	c20d                	beqz	a2,200017f2 <dif_uart_irq_is_pending+0x32>
200017d2:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200017d4:	852e                	mv	a0,a1
200017d6:	85b2                	mv	a1,a2
200017d8:	2015                	jal	200017fc <uart_irq_offset_get>
200017da:	85aa                	mv	a1,a0
200017dc:	4505                	li	a0,1
200017de:	c991                	beqz	a1,200017f2 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
200017e0:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017e2:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
200017e4:	4602                	lw	a2,0(sp)
200017e6:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200017e8:	00c5d5b3          	srl	a1,a1,a2
200017ec:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
200017ee:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
200017f2:	4492                	lw	s1,4(sp)
200017f4:	4422                	lw	s0,8(sp)
200017f6:	40b2                	lw	ra,12(sp)
200017f8:	0141                	addi	sp,sp,16
200017fa:	8082                	ret

200017fc <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
200017fc:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
200017fe:	00a66563          	bltu	a2,a0,20001808 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001802:	c188                	sw	a0,0(a1)
20001804:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001806:	8082                	ret
20001808:	4501                	li	a0,0
2000180a:	8082                	ret

2000180c <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
2000180c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
2000180e:	c606                	sw	ra,12(sp)
20001810:	c422                	sw	s0,8(sp)
20001812:	c10d                	beqz	a0,20001834 <dif_uart_irq_acknowledge+0x28>
20001814:	842a                	mv	s0,a0
20001816:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001818:	852e                	mv	a0,a1
2000181a:	85b2                	mv	a1,a2
2000181c:	37c5                	jal	200017fc <uart_irq_offset_get>
2000181e:	85aa                	mv	a1,a0
20001820:	4505                	li	a0,1
20001822:	c991                	beqz	a1,20001836 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001824:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001826:	4010                	lw	a2,0(s0)
20001828:	4501                	li	a0,0
2000182a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000182c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001830:	c20c                	sw	a1,0(a2)
20001832:	a011                	j	20001836 <dif_uart_irq_acknowledge+0x2a>
20001834:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001836:	4422                	lw	s0,8(sp)
20001838:	40b2                	lw	ra,12(sp)
2000183a:	0141                	addi	sp,sp,16
2000183c:	8082                	ret

2000183e <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
2000183e:	c911                	beqz	a0,20001852 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001840:	c581                	beqz	a1,20001848 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001842:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001844:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001846:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001848:	410c                	lw	a1,0(a0)
2000184a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000184c:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001850:	8082                	ret
20001852:	4509                	li	a0,2
20001854:	8082                	ret

20001856 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20001856:	862a                	mv	a2,a0
20001858:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
2000185a:	c611                	beqz	a2,20001866 <dif_uart_irq_restore_all+0x10>
2000185c:	c589                	beqz	a1,20001866 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
2000185e:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001860:	4210                	lw	a2,0(a2)
20001862:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001864:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20001866:	8082                	ret

20001868 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20001868:	1141                	addi	sp,sp,-16
2000186a:	c606                	sw	ra,12(sp)
2000186c:	c422                	sw	s0,8(sp)
2000186e:	c226                	sw	s1,4(sp)
20001870:	84aa                	mv	s1,a0
20001872:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20001874:	c485                	beqz	s1,2000189c <dif_uart_irq_get_enabled+0x34>
20001876:	8432                	mv	s0,a2
20001878:	c215                	beqz	a2,2000189c <dif_uart_irq_get_enabled+0x34>
2000187a:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000187c:	852e                	mv	a0,a1
2000187e:	85b2                	mv	a1,a2
20001880:	3fb5                	jal	200017fc <uart_irq_offset_get>
20001882:	85aa                	mv	a1,a0
20001884:	4505                	li	a0,1
20001886:	c999                	beqz	a1,2000189c <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001888:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000188a:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
2000188c:	4602                	lw	a2,0(sp)
2000188e:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001890:	00c5d5b3          	srl	a1,a1,a2
20001894:	8985                	andi	a1,a1,1
20001896:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
2000189a:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
2000189c:	4492                	lw	s1,4(sp)
2000189e:	4422                	lw	s0,8(sp)
200018a0:	40b2                	lw	ra,12(sp)
200018a2:	0141                	addi	sp,sp,16
200018a4:	8082                	ret

200018a6 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
200018a6:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
200018a8:	c606                	sw	ra,12(sp)
200018aa:	c422                	sw	s0,8(sp)
200018ac:	c226                	sw	s1,4(sp)
200018ae:	c91d                	beqz	a0,200018e4 <dif_uart_irq_set_enabled+0x3e>
200018b0:	8432                	mv	s0,a2
200018b2:	84aa                	mv	s1,a0
200018b4:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200018b6:	852e                	mv	a0,a1
200018b8:	85b2                	mv	a1,a2
200018ba:	3789                	jal	200017fc <uart_irq_offset_get>
200018bc:	85aa                	mv	a1,a0
200018be:	4505                	li	a0,1
200018c0:	c19d                	beqz	a1,200018e6 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200018c2:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018c4:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
200018c6:	4682                	lw	a3,0(sp)
200018c8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
200018ca:	00143713          	seqz	a4,s0
200018ce:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200018d0:	00d797b3          	sll	a5,a5,a3
200018d4:	fff7c793          	not	a5,a5
200018d8:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200018da:	00d716b3          	sll	a3,a4,a3
200018de:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018e0:	c1d0                	sw	a2,4(a1)
200018e2:	a011                	j	200018e6 <dif_uart_irq_set_enabled+0x40>
200018e4:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200018e6:	4492                	lw	s1,4(sp)
200018e8:	4422                	lw	s0,8(sp)
200018ea:	40b2                	lw	ra,12(sp)
200018ec:	0141                	addi	sp,sp,16
200018ee:	8082                	ret

200018f0 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200018f0:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200018f2:	c606                	sw	ra,12(sp)
200018f4:	c422                	sw	s0,8(sp)
200018f6:	c10d                	beqz	a0,20001918 <dif_uart_irq_force+0x28>
200018f8:	842a                	mv	s0,a0
200018fa:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200018fc:	852e                	mv	a0,a1
200018fe:	85b2                	mv	a1,a2
20001900:	3df5                	jal	200017fc <uart_irq_offset_get>
20001902:	85aa                	mv	a1,a0
20001904:	4505                	li	a0,1
20001906:	c991                	beqz	a1,2000191a <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001908:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
2000190a:	4010                	lw	a2,0(s0)
2000190c:	4501                	li	a0,0
2000190e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001910:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001914:	c60c                	sw	a1,8(a2)
20001916:	a011                	j	2000191a <dif_uart_irq_force+0x2a>
20001918:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
2000191a:	4422                	lw	s0,8(sp)
2000191c:	40b2                	lw	ra,12(sp)
2000191e:	0141                	addi	sp,sp,16
20001920:	8082                	ret

20001922 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001922:	cd09                	beqz	a0,2000193c <dif_uart_watermark_rx_set+0x1a>
20001924:	4691                	li	a3,4
20001926:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001928:	00b6eb63          	bltu	a3,a1,2000193e <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000192c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000192e:	4d54                	lw	a3,28(a0)
20001930:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20001932:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001934:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001936:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001938:	cd4c                	sw	a1,28(a0)
2000193a:	a011                	j	2000193e <dif_uart_watermark_rx_set+0x1c>
2000193c:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000193e:	8532                	mv	a0,a2
20001940:	8082                	ret

20001942 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001942:	cd11                	beqz	a0,2000195e <dif_uart_watermark_tx_set+0x1c>
20001944:	468d                	li	a3,3
20001946:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001948:	00b6ec63          	bltu	a3,a1,20001960 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000194c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000194e:	4d54                	lw	a3,28(a0)
20001950:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20001952:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001954:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001958:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000195a:	cd4c                	sw	a1,28(a0)
2000195c:	a011                	j	20001960 <dif_uart_watermark_tx_set+0x1e>
2000195e:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001960:	8532                	mv	a0,a2
20001962:	8082                	ret

20001964 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001964:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20001966:	c51d                	beqz	a0,20001994 <dif_uart_bytes_send+0x30>
20001968:	c595                	beqz	a1,20001994 <dif_uart_bytes_send+0x30>
2000196a:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000196c:	c20d                	beqz	a2,2000198e <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
2000196e:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001972:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001976:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001978:	eb19                	bnez	a4,2000198e <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
2000197a:	00f58733          	add	a4,a1,a5
2000197e:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001982:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001984:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001988:	fef613e3          	bne	a2,a5,2000196e <dif_uart_bytes_send+0xa>
2000198c:	87b2                	mv	a5,a2
2000198e:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001990:	c291                	beqz	a3,20001994 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001992:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001994:	853a                	mv	a0,a4
20001996:	8082                	ret

20001998 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001998:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
2000199a:	c515                	beqz	a0,200019c6 <dif_uart_bytes_receive+0x2e>
2000199c:	c60d                	beqz	a2,200019c6 <dif_uart_bytes_receive+0x2e>
2000199e:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200019a0:	cd99                	beqz	a1,200019be <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200019a2:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019a4:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200019a6:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200019aa:	eb91                	bnez	a5,200019be <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200019ac:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200019ae:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
200019b2:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200019b4:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200019b8:	ff0595e3          	bne	a1,a6,200019a2 <dif_uart_bytes_receive+0xa>
200019bc:	882e                	mv	a6,a1
200019be:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
200019c0:	c299                	beqz	a3,200019c6 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
200019c2:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
200019c6:	853a                	mv	a0,a4
200019c8:	8082                	ret

200019ca <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
200019ca:	cd19                	beqz	a0,200019e8 <dif_uart_byte_send_polled+0x1e>
200019cc:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200019ce:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200019d0:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
200019d2:	fef5                	bnez	a3,200019ce <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200019d4:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200019d6:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200019d8:	e299                	bnez	a3,200019de <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200019da:	ce0c                	sw	a1,24(a2)
200019dc:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019de:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200019e0:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200019e2:	dd75                	beqz	a0,200019de <dif_uart_byte_send_polled+0x14>
200019e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
200019e6:	8082                	ret
200019e8:	4509                	li	a0,2
200019ea:	8082                	ret

200019ec <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
200019ec:	862a                	mv	a2,a0
200019ee:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
200019f0:	c205                	beqz	a2,20001a10 <dif_uart_byte_receive_polled+0x24>
200019f2:	cd99                	beqz	a1,20001a10 <dif_uart_byte_receive_polled+0x24>
200019f4:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200019f6:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200019f8:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200019fc:	fd6d                	bnez	a0,200019f6 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200019fe:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a00:	02057693          	andi	a3,a0,32
20001a04:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a06:	e689                	bnez	a3,20001a10 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a08:	4a50                	lw	a2,20(a2)
20001a0a:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001a0c:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001a10:	8082                	ret

20001a12 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001a12:	862a                	mv	a2,a0
20001a14:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001a16:	ca09                	beqz	a2,20001a28 <dif_uart_rx_bytes_available+0x16>
20001a18:	c981                	beqz	a1,20001a28 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001a1a:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a1c:	5110                	lw	a2,32(a0)
20001a1e:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001a20:	8241                	srli	a2,a2,0x10
20001a22:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001a26:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001a28:	8082                	ret

20001a2a <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001a2a:	862a                	mv	a2,a0
20001a2c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001a2e:	ce01                	beqz	a2,20001a46 <dif_uart_tx_bytes_available+0x1c>
20001a30:	c999                	beqz	a1,20001a46 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001a32:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a34:	5110                	lw	a2,32(a0)
20001a36:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001a38:	03f67613          	andi	a2,a2,63
20001a3c:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001a40:	40c68633          	sub	a2,a3,a2
20001a44:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001a46:	8082                	ret

20001a48 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001a48:	c11d                	beqz	a0,20001a6e <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001a4a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a4c:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001a4e:	ffd5f693          	andi	a3,a1,-3
20001a52:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001a56:	fff58713          	addi	a4,a1,-1
20001a5a:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001a5c:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001a60:	00f77463          	bgeu	a4,a5,20001a68 <dif_uart_fifo_reset+0x20>
20001a64:	0025e593          	ori	a1,a1,2
20001a68:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a6a:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001a6c:	8082                	ret
20001a6e:	4509                	li	a0,2
20001a70:	8082                	ret

20001a72 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001a72:	c515                	beqz	a0,20001a9e <dif_uart_loopback_set+0x2c>
20001a74:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20001a76:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001a78:	0015b593          	seqz	a1,a1
20001a7c:	4715                	li	a4,5
20001a7e:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a82:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001a84:	00163613          	seqz	a2,a2
20001a88:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001a8a:	00b797b3          	sll	a5,a5,a1
20001a8e:	fff7c793          	not	a5,a5
20001a92:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001a94:	00b615b3          	sll	a1,a2,a1
20001a98:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a9a:	c54c                	sw	a1,12(a0)
20001a9c:	a011                	j	20001aa0 <dif_uart_loopback_set+0x2e>
20001a9e:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001aa0:	8536                	mv	a0,a3
20001aa2:	8082                	ret

20001aa4 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001aa4:	862a                	mv	a2,a0
20001aa6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001aa8:	ca11                	beqz	a2,20001abc <dif_uart_enable_rx_timeout+0x18>
20001aaa:	0185d693          	srli	a3,a1,0x18
20001aae:	e699                	bnez	a3,20001abc <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001ab0:	4210                	lw	a2,0(a2)
20001ab2:	4501                	li	a0,0
20001ab4:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001ab8:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001aba:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001abc:	8082                	ret

20001abe <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001abe:	c511                	beqz	a0,20001aca <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001ac0:	410c                	lw	a1,0(a0)
20001ac2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001ac4:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001ac8:	8082                	ret
20001aca:	4509                	li	a0,2
20001acc:	8082                	ret

20001ace <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001ace:	86aa                	mv	a3,a0
20001ad0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001ad2:	ce99                	beqz	a3,20001af0 <dif_uart_get_rx_timeout+0x22>
20001ad4:	cd91                	beqz	a1,20001af0 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001ad6:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001ad8:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001ada:	fff6c513          	not	a0,a3
20001ade:	817d                	srli	a0,a0,0x1f
20001ae0:	c188                	sw	a0,0(a1)
20001ae2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001ae4:	c611                	beqz	a2,20001af0 <dif_uart_get_rx_timeout+0x22>
20001ae6:	010005b7          	lui	a1,0x1000
20001aea:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001aec:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001aee:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001af0:	8082                	ret

20001af2 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001af2:	88aa                	mv	a7,a0
20001af4:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001af6:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001af8:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001afa:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001afc:	20069963          	bnez	a3,20001d0e <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001b00:	200026b7          	lui	a3,0x20002
20001b04:	25468693          	addi	a3,a3,596 # 20002254 <__clz_tab>
20001b08:	0cc5f063          	bgeu	a1,a2,20001bc8 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001b0c:	6741                	lui	a4,0x10
20001b0e:	0ae67663          	bgeu	a2,a4,20001bba <__udivdi3+0xc8>
20001b12:	0ff00713          	li	a4,255
20001b16:	00c73733          	sltu	a4,a4,a2
20001b1a:	070e                	slli	a4,a4,0x3
20001b1c:	00e65533          	srl	a0,a2,a4
20001b20:	96aa                	add	a3,a3,a0
20001b22:	0006c683          	lbu	a3,0(a3)
20001b26:	02000513          	li	a0,32
20001b2a:	9736                	add	a4,a4,a3
20001b2c:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001b30:	00e50c63          	beq	a0,a4,20001b48 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001b34:	00d797b3          	sll	a5,a5,a3
20001b38:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001b3c:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001b40:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001b44:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001b48:	01085893          	srli	a7,a6,0x10
20001b4c:	0315d7b3          	divu	a5,a1,a7
20001b50:	01081613          	slli	a2,a6,0x10
20001b54:	8241                	srli	a2,a2,0x10
20001b56:	01035713          	srli	a4,t1,0x10
20001b5a:	0315f6b3          	remu	a3,a1,a7
20001b5e:	853e                	mv	a0,a5
20001b60:	02f605b3          	mul	a1,a2,a5
20001b64:	06c2                	slli	a3,a3,0x10
20001b66:	8f55                	or	a4,a4,a3
20001b68:	00b77c63          	bgeu	a4,a1,20001b80 <__udivdi3+0x8e>
20001b6c:	9742                	add	a4,a4,a6
20001b6e:	fff78513          	addi	a0,a5,-1
20001b72:	01076763          	bltu	a4,a6,20001b80 <__udivdi3+0x8e>
20001b76:	00b77563          	bgeu	a4,a1,20001b80 <__udivdi3+0x8e>
20001b7a:	ffe78513          	addi	a0,a5,-2
20001b7e:	9742                	add	a4,a4,a6
20001b80:	8f0d                	sub	a4,a4,a1
20001b82:	031777b3          	remu	a5,a4,a7
20001b86:	0342                	slli	t1,t1,0x10
20001b88:	01035313          	srli	t1,t1,0x10
20001b8c:	03175733          	divu	a4,a4,a7
20001b90:	07c2                	slli	a5,a5,0x10
20001b92:	0067e333          	or	t1,a5,t1
20001b96:	02e606b3          	mul	a3,a2,a4
20001b9a:	863a                	mv	a2,a4
20001b9c:	00d37b63          	bgeu	t1,a3,20001bb2 <__udivdi3+0xc0>
20001ba0:	9342                	add	t1,t1,a6
20001ba2:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001ba6:	01036663          	bltu	t1,a6,20001bb2 <__udivdi3+0xc0>
20001baa:	00d37463          	bgeu	t1,a3,20001bb2 <__udivdi3+0xc0>
20001bae:	ffe70613          	addi	a2,a4,-2
20001bb2:	0542                	slli	a0,a0,0x10
20001bb4:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001bb6:	4581                	li	a1,0
20001bb8:	a85d                	j	20001c6e <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001bba:	01000537          	lui	a0,0x1000
20001bbe:	4741                	li	a4,16
20001bc0:	f4a66ee3          	bltu	a2,a0,20001b1c <__udivdi3+0x2a>
20001bc4:	4761                	li	a4,24
20001bc6:	bf99                	j	20001b1c <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001bc8:	e601                	bnez	a2,20001bd0 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001bca:	4705                	li	a4,1
20001bcc:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001bd0:	6741                	lui	a4,0x10
20001bd2:	08e87f63          	bgeu	a6,a4,20001c70 <__udivdi3+0x17e>
20001bd6:	0ff00713          	li	a4,255
20001bda:	01077363          	bgeu	a4,a6,20001be0 <__udivdi3+0xee>
20001bde:	4521                	li	a0,8
20001be0:	00a85733          	srl	a4,a6,a0
20001be4:	96ba                	add	a3,a3,a4
20001be6:	0006c703          	lbu	a4,0(a3)
20001bea:	02000613          	li	a2,32
20001bee:	972a                	add	a4,a4,a0
20001bf0:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001bf4:	08e61563          	bne	a2,a4,20001c7e <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001bf8:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001bfc:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001bfe:	01085893          	srli	a7,a6,0x10
20001c02:	01081613          	slli	a2,a6,0x10
20001c06:	8241                	srli	a2,a2,0x10
20001c08:	01035713          	srli	a4,t1,0x10
20001c0c:	0317f6b3          	remu	a3,a5,a7
20001c10:	0317d7b3          	divu	a5,a5,a7
20001c14:	06c2                	slli	a3,a3,0x10
20001c16:	8f55                	or	a4,a4,a3
20001c18:	02f60e33          	mul	t3,a2,a5
20001c1c:	853e                	mv	a0,a5
20001c1e:	01c77c63          	bgeu	a4,t3,20001c36 <__udivdi3+0x144>
20001c22:	9742                	add	a4,a4,a6
20001c24:	fff78513          	addi	a0,a5,-1
20001c28:	01076763          	bltu	a4,a6,20001c36 <__udivdi3+0x144>
20001c2c:	01c77563          	bgeu	a4,t3,20001c36 <__udivdi3+0x144>
20001c30:	ffe78513          	addi	a0,a5,-2
20001c34:	9742                	add	a4,a4,a6
20001c36:	41c70733          	sub	a4,a4,t3
20001c3a:	031777b3          	remu	a5,a4,a7
20001c3e:	0342                	slli	t1,t1,0x10
20001c40:	01035313          	srli	t1,t1,0x10
20001c44:	03175733          	divu	a4,a4,a7
20001c48:	07c2                	slli	a5,a5,0x10
20001c4a:	0067e333          	or	t1,a5,t1
20001c4e:	02e606b3          	mul	a3,a2,a4
20001c52:	863a                	mv	a2,a4
20001c54:	00d37b63          	bgeu	t1,a3,20001c6a <__udivdi3+0x178>
20001c58:	9342                	add	t1,t1,a6
20001c5a:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001c5e:	01036663          	bltu	t1,a6,20001c6a <__udivdi3+0x178>
20001c62:	00d37463          	bgeu	t1,a3,20001c6a <__udivdi3+0x178>
20001c66:	ffe70613          	addi	a2,a4,-2
20001c6a:	0542                	slli	a0,a0,0x10
20001c6c:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001c6e:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001c70:	01000737          	lui	a4,0x1000
20001c74:	4541                	li	a0,16
20001c76:	f6e865e3          	bltu	a6,a4,20001be0 <__udivdi3+0xee>
20001c7a:	4561                	li	a0,24
20001c7c:	b795                	j	20001be0 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001c7e:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001c82:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001c86:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001c8a:	00d797b3          	sll	a5,a5,a3
20001c8e:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001c92:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001c96:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001c9a:	0315f733          	remu	a4,a1,a7
20001c9e:	01081793          	slli	a5,a6,0x10
20001ca2:	83c1                	srli	a5,a5,0x10
20001ca4:	01065513          	srli	a0,a2,0x10
20001ca8:	0315d5b3          	divu	a1,a1,a7
20001cac:	0742                	slli	a4,a4,0x10
20001cae:	8f49                	or	a4,a4,a0
20001cb0:	02b786b3          	mul	a3,a5,a1
20001cb4:	852e                	mv	a0,a1
20001cb6:	00d77c63          	bgeu	a4,a3,20001cce <__udivdi3+0x1dc>
20001cba:	9742                	add	a4,a4,a6
20001cbc:	fff58513          	addi	a0,a1,-1 # ffffff <check_digest.kLogFields.50+0xfefd7f>
20001cc0:	01076763          	bltu	a4,a6,20001cce <__udivdi3+0x1dc>
20001cc4:	00d77563          	bgeu	a4,a3,20001cce <__udivdi3+0x1dc>
20001cc8:	ffe58513          	addi	a0,a1,-2
20001ccc:	9742                	add	a4,a4,a6
20001cce:	40d706b3          	sub	a3,a4,a3
20001cd2:	0316f733          	remu	a4,a3,a7
20001cd6:	0642                	slli	a2,a2,0x10
20001cd8:	8241                	srli	a2,a2,0x10
20001cda:	0316d6b3          	divu	a3,a3,a7
20001cde:	0742                	slli	a4,a4,0x10
20001ce0:	02d788b3          	mul	a7,a5,a3
20001ce4:	00c767b3          	or	a5,a4,a2
20001ce8:	8736                	mv	a4,a3
20001cea:	0117fc63          	bgeu	a5,a7,20001d02 <__udivdi3+0x210>
20001cee:	97c2                	add	a5,a5,a6
20001cf0:	fff68713          	addi	a4,a3,-1
20001cf4:	0107e763          	bltu	a5,a6,20001d02 <__udivdi3+0x210>
20001cf8:	0117f563          	bgeu	a5,a7,20001d02 <__udivdi3+0x210>
20001cfc:	ffe68713          	addi	a4,a3,-2
20001d00:	97c2                	add	a5,a5,a6
20001d02:	01051593          	slli	a1,a0,0x10
20001d06:	411787b3          	sub	a5,a5,a7
20001d0a:	8dd9                	or	a1,a1,a4
20001d0c:	bdcd                	j	20001bfe <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001d0e:	14d5e263          	bltu	a1,a3,20001e52 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001d12:	6741                	lui	a4,0x10
20001d14:	02e6ff63          	bgeu	a3,a4,20001d52 <__udivdi3+0x260>
20001d18:	0ff00713          	li	a4,255
20001d1c:	00d735b3          	sltu	a1,a4,a3
20001d20:	058e                	slli	a1,a1,0x3
20001d22:	20002737          	lui	a4,0x20002
20001d26:	00b6d533          	srl	a0,a3,a1
20001d2a:	25470713          	addi	a4,a4,596 # 20002254 <__clz_tab>
20001d2e:	972a                	add	a4,a4,a0
20001d30:	00074703          	lbu	a4,0(a4)
20001d34:	02000513          	li	a0,32
20001d38:	972e                	add	a4,a4,a1
20001d3a:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001d3e:	02e51163          	bne	a0,a4,20001d60 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001d42:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001d44:	f2f6e5e3          	bltu	a3,a5,20001c6e <__udivdi3+0x17c>
20001d48:	00c8b533          	sltu	a0,a7,a2
20001d4c:	00154513          	xori	a0,a0,1
20001d50:	bf39                	j	20001c6e <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001d52:	01000737          	lui	a4,0x1000
20001d56:	45c1                	li	a1,16
20001d58:	fce6e5e3          	bltu	a3,a4,20001d22 <__udivdi3+0x230>
20001d5c:	45e1                	li	a1,24
20001d5e:	b7d1                	j	20001d22 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001d60:	00e65333          	srl	t1,a2,a4
20001d64:	00b696b3          	sll	a3,a3,a1
20001d68:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d6c:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001d70:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001d74:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d78:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001d7c:	00b797b3          	sll	a5,a5,a1
20001d80:	00e8d733          	srl	a4,a7,a4
20001d84:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d88:	01031793          	slli	a5,t1,0x10
20001d8c:	83c1                	srli	a5,a5,0x10
20001d8e:	01085713          	srli	a4,a6,0x10
20001d92:	02a65633          	divu	a2,a2,a0
20001d96:	06c2                	slli	a3,a3,0x10
20001d98:	8f55                	or	a4,a4,a3
20001d9a:	02c78f33          	mul	t5,a5,a2
20001d9e:	8e32                	mv	t3,a2
20001da0:	01e77c63          	bgeu	a4,t5,20001db8 <__udivdi3+0x2c6>
20001da4:	971a                	add	a4,a4,t1
20001da6:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001daa:	00676763          	bltu	a4,t1,20001db8 <__udivdi3+0x2c6>
20001dae:	01e77563          	bgeu	a4,t5,20001db8 <__udivdi3+0x2c6>
20001db2:	ffe60e13          	addi	t3,a2,-2
20001db6:	971a                	add	a4,a4,t1
20001db8:	41e70733          	sub	a4,a4,t5
20001dbc:	02a776b3          	remu	a3,a4,a0
20001dc0:	02a75733          	divu	a4,a4,a0
20001dc4:	06c2                	slli	a3,a3,0x10
20001dc6:	02e78633          	mul	a2,a5,a4
20001dca:	01081793          	slli	a5,a6,0x10
20001dce:	83c1                	srli	a5,a5,0x10
20001dd0:	8fd5                	or	a5,a5,a3
20001dd2:	86ba                	mv	a3,a4
20001dd4:	00c7fc63          	bgeu	a5,a2,20001dec <__udivdi3+0x2fa>
20001dd8:	979a                	add	a5,a5,t1
20001dda:	fff70693          	addi	a3,a4,-1 # ffffff <check_digest.kLogFields.50+0xfefd7f>
20001dde:	0067e763          	bltu	a5,t1,20001dec <__udivdi3+0x2fa>
20001de2:	00c7f563          	bgeu	a5,a2,20001dec <__udivdi3+0x2fa>
20001de6:	ffe70693          	addi	a3,a4,-2
20001dea:	979a                	add	a5,a5,t1
20001dec:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001df0:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001df2:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001df4:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001df8:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001dfc:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001dfe:	00def6b3          	and	a3,t4,a3
20001e02:	01055613          	srli	a2,a0,0x10
20001e06:	010ede93          	srli	t4,t4,0x10
20001e0a:	02d80333          	mul	t1,a6,a3
20001e0e:	02d606b3          	mul	a3,a2,a3
20001e12:	01035713          	srli	a4,t1,0x10
20001e16:	03d80833          	mul	a6,a6,t4
20001e1a:	9836                	add	a6,a6,a3
20001e1c:	9742                	add	a4,a4,a6
20001e1e:	03d60633          	mul	a2,a2,t4
20001e22:	00d77363          	bgeu	a4,a3,20001e28 <__udivdi3+0x336>
20001e26:	9672                	add	a2,a2,t3
20001e28:	01075693          	srli	a3,a4,0x10
20001e2c:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001e2e:	02c7e063          	bltu	a5,a2,20001e4e <__udivdi3+0x35c>
20001e32:	d8c792e3          	bne	a5,a2,20001bb6 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001e36:	67c1                	lui	a5,0x10
20001e38:	17fd                	addi	a5,a5,-1
20001e3a:	8f7d                	and	a4,a4,a5
20001e3c:	0742                	slli	a4,a4,0x10
20001e3e:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001e42:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001e46:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001e48:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001e4a:	e2e8f2e3          	bgeu	a7,a4,20001c6e <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001e4e:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001e50:	b39d                	j	20001bb6 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001e52:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001e54:	4501                	li	a0,0
20001e56:	bd21                	j	20001c6e <__udivdi3+0x17c>
