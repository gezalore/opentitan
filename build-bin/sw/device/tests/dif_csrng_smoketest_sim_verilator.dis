
sw/device/tests/dif_csrng_smoketest_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         000016b0  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       0000084a  20001830  20001830  00002830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  2000207c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20002084  00004008  2**2
                  ALLOC
  8 .logs.fields  0000017c  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006b04  00000000  00000000  000041aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001516  00000000  00000000  0000acae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000c1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000039db  00000000  00000000  0000c25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003345  00000000  00000000  0000fc37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000218  00000000  00000000  00012f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000202f  00000000  00000000  00013194  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000768  00000000  00000000  000151c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	02c60613          	addi	a2,a2,44 # 2000207c <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2e7d                	jal	2000043c <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	6040006f          	j	20000684 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0800006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1b80006f          	j	200002c4 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2000006f          	j	2000031c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2480006f          	j	20000374 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000182:	de06                	sw	ra,60(sp)
20000184:	dc16                	sw	t0,56(sp)
20000186:	da1a                	sw	t1,52(sp)
20000188:	d81e                	sw	t2,48(sp)
2000018a:	d62a                	sw	a0,44(sp)
2000018c:	d42e                	sw	a1,40(sp)
2000018e:	d232                	sw	a2,36(sp)
20000190:	d036                	sw	a3,32(sp)
20000192:	ce3a                	sw	a4,28(sp)
20000194:	cc3e                	sw	a5,24(sp)
20000196:	ca42                	sw	a6,20(sp)
20000198:	c846                	sw	a7,16(sp)
2000019a:	c672                	sw	t3,12(sp)
2000019c:	c476                	sw	t4,8(sp)
2000019e:	c27a                	sw	t5,4(sp)
200001a0:	c07e                	sw	t6,0(sp)
200001a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200001a6:	897d                	andi	a0,a0,31
200001a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200001aa:	00a5dc63          	bge	a1,a0,200001c2 <handler_exception+0x42>
200001ae:	4599                	li	a1,6
200001b0:	02a5c263          	blt	a1,a0,200001d4 <handler_exception+0x54>
200001b4:	458d                	li	a1,3
200001b6:	02b50c63          	beq	a0,a1,200001ee <handler_exception+0x6e>
200001ba:	4595                	li	a1,5
200001bc:	02b50763          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001c0:	a015                	j	200001e4 <handler_exception+0x64>
200001c2:	c115                	beqz	a0,200001e6 <handler_exception+0x66>
200001c4:	4585                	li	a1,1
200001c6:	02b50063          	beq	a0,a1,200001e6 <handler_exception+0x66>
200001ca:	4589                	li	a1,2
200001cc:	00b51c63          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200001d0:	208d                	jal	20000232 <handler_instr_ill_fault>
200001d2:	a839                	j	200001f0 <handler_exception+0x70>
200001d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200001d6:	00b50a63          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001da:	45ad                	li	a1,11
200001dc:	00b51463          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200001e0:	2065                	jal	20000288 <handler_ecall>
200001e2:	a039                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200001e4:	a001                	j	200001e4 <handler_exception+0x64>
200001e6:	2805                	jal	20000216 <handler_instr_acc_fault>
200001e8:	a021                	j	200001f0 <handler_exception+0x70>
200001ea:	2049                	jal	2000026c <handler_lsu_fault>
200001ec:	a011                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200001ee:	208d                	jal	20000250 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200001f0:	4f82                	lw	t6,0(sp)
200001f2:	4f12                	lw	t5,4(sp)
200001f4:	4ea2                	lw	t4,8(sp)
200001f6:	4e32                	lw	t3,12(sp)
200001f8:	48c2                	lw	a7,16(sp)
200001fa:	4852                	lw	a6,20(sp)
200001fc:	47e2                	lw	a5,24(sp)
200001fe:	4772                	lw	a4,28(sp)
20000200:	5682                	lw	a3,32(sp)
20000202:	5612                	lw	a2,36(sp)
20000204:	55a2                	lw	a1,40(sp)
20000206:	5532                	lw	a0,44(sp)
20000208:	53c2                	lw	t2,48(sp)
2000020a:	5352                	lw	t1,52(sp)
2000020c:	52e2                	lw	t0,56(sp)
2000020e:	50f2                	lw	ra,60(sp)
20000210:	6121                	addi	sp,sp,64
20000212:	30200073          	mret

20000216 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20000216:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20000218:	de06                	sw	ra,60(sp)
2000021a:	dc22                	sw	s0,56(sp)
2000021c:	00002597          	auipc	a1,0x2
20000220:	a0058593          	addi	a1,a1,-1536 # 20001c1c <__clz_tab+0x160>
20000224:	0040                	addi	s0,sp,4
20000226:	03400613          	li	a2,52
2000022a:	8522                	mv	a0,s0
2000022c:	21b5                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
2000022e:	8522                	mv	a0,s0
20000230:	2a71                	jal	200003cc <print_exc_msg>

20000232 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20000232:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20000234:	c686                	sw	ra,76(sp)
20000236:	c4a2                	sw	s0,72(sp)
20000238:	00002597          	auipc	a1,0x2
2000023c:	a1858593          	addi	a1,a1,-1512 # 20001c50 <__clz_tab+0x194>
20000240:	00d10413          	addi	s0,sp,13
20000244:	03b00613          	li	a2,59
20000248:	8522                	mv	a0,s0
2000024a:	21b9                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
2000024c:	8522                	mv	a0,s0
2000024e:	2abd                	jal	200003cc <print_exc_msg>

20000250 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000250:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000252:	de06                	sw	ra,60(sp)
20000254:	dc22                	sw	s0,56(sp)
20000256:	00002597          	auipc	a1,0x2
2000025a:	a3558593          	addi	a1,a1,-1483 # 20001c8b <__clz_tab+0x1cf>
2000025e:	840a                	mv	s0,sp
20000260:	03800613          	li	a2,56
20000264:	8522                	mv	a0,s0
20000266:	290d                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20000268:	8522                	mv	a0,s0
2000026a:	228d                	jal	200003cc <print_exc_msg>

2000026c <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
2000026c:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
2000026e:	de06                	sw	ra,60(sp)
20000270:	dc22                	sw	s0,56(sp)
20000272:	00002597          	auipc	a1,0x2
20000276:	a5158593          	addi	a1,a1,-1455 # 20001cc3 <__clz_tab+0x207>
2000027a:	0020                	addi	s0,sp,8
2000027c:	03000613          	li	a2,48
20000280:	8522                	mv	a0,s0
20000282:	2919                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000284:	8522                	mv	a0,s0
20000286:	2299                	jal	200003cc <print_exc_msg>

20000288 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000288:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000028a:	ce06                	sw	ra,28(sp)
2000028c:	cc22                	sw	s0,24(sp)
2000028e:	00001517          	auipc	a0,0x1
20000292:	69a50513          	addi	a0,a0,1690 # 20001928 <kDeviceLogBypassUartAddress>
20000296:	4108                	lw	a0,0(a0)
20000298:	c909                	beqz	a0,200002aa <handler_ecall+0x22>
2000029a:	e0010517          	auipc	a0,0xe0010
2000029e:	da250513          	addi	a0,a0,-606 # 1003c <handler_ecall.kLogFields>
200002a2:	4581                	li	a1,0
200002a4:	163000ef          	jal	ra,20000c06 <base_log_internal_dv>
200002a8:	a821                	j	200002c0 <handler_ecall+0x38>
200002aa:	00001597          	auipc	a1,0x1
200002ae:	5c258593          	addi	a1,a1,1474 # 2000186c <__udivdi3+0x3a2>
200002b2:	840a                	mv	s0,sp
200002b4:	4651                	li	a2,20
200002b6:	8522                	mv	a0,s0
200002b8:	26c5                	jal	20000698 <memcpy>
200002ba:	8522                	mv	a0,s0
200002bc:	0a5000ef          	jal	ra,20000b60 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200002c0:	a001                	j	200002c0 <handler_ecall+0x38>
200002c2:	0001                	nop

200002c4 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200002c4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200002c6:	ce86                	sw	ra,92(sp)
200002c8:	cc96                	sw	t0,88(sp)
200002ca:	ca9a                	sw	t1,84(sp)
200002cc:	c89e                	sw	t2,80(sp)
200002ce:	c6a2                	sw	s0,76(sp)
200002d0:	c4aa                	sw	a0,72(sp)
200002d2:	c2ae                	sw	a1,68(sp)
200002d4:	c0b2                	sw	a2,64(sp)
200002d6:	de36                	sw	a3,60(sp)
200002d8:	dc3a                	sw	a4,56(sp)
200002da:	da3e                	sw	a5,52(sp)
200002dc:	d842                	sw	a6,48(sp)
200002de:	d646                	sw	a7,44(sp)
200002e0:	d472                	sw	t3,40(sp)
200002e2:	d276                	sw	t4,36(sp)
200002e4:	d07a                	sw	t5,32(sp)
200002e6:	ce7e                	sw	t6,28(sp)
200002e8:	00001517          	auipc	a0,0x1
200002ec:	64050513          	addi	a0,a0,1600 # 20001928 <kDeviceLogBypassUartAddress>
200002f0:	4108                	lw	a0,0(a0)
200002f2:	c909                	beqz	a0,20000304 <handler_irq_software+0x40>
200002f4:	e0010517          	auipc	a0,0xe0010
200002f8:	d0c50513          	addi	a0,a0,-756 # 10000 <_dv_log_offset>
200002fc:	4581                	li	a1,0
200002fe:	109000ef          	jal	ra,20000c06 <base_log_internal_dv>
20000302:	a821                	j	2000031a <handler_irq_software+0x56>
20000304:	00001597          	auipc	a1,0x1
20000308:	52c58593          	addi	a1,a1,1324 # 20001830 <__udivdi3+0x366>
2000030c:	0020                	addi	s0,sp,8
2000030e:	4651                	li	a2,20
20000310:	8522                	mv	a0,s0
20000312:	2659                	jal	20000698 <memcpy>
20000314:	8522                	mv	a0,s0
20000316:	04b000ef          	jal	ra,20000b60 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000031a:	a001                	j	2000031a <handler_irq_software+0x56>

2000031c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
2000031c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
2000031e:	ce86                	sw	ra,92(sp)
20000320:	cc96                	sw	t0,88(sp)
20000322:	ca9a                	sw	t1,84(sp)
20000324:	c89e                	sw	t2,80(sp)
20000326:	c6a2                	sw	s0,76(sp)
20000328:	c4aa                	sw	a0,72(sp)
2000032a:	c2ae                	sw	a1,68(sp)
2000032c:	c0b2                	sw	a2,64(sp)
2000032e:	de36                	sw	a3,60(sp)
20000330:	dc3a                	sw	a4,56(sp)
20000332:	da3e                	sw	a5,52(sp)
20000334:	d842                	sw	a6,48(sp)
20000336:	d646                	sw	a7,44(sp)
20000338:	d472                	sw	t3,40(sp)
2000033a:	d276                	sw	t4,36(sp)
2000033c:	d07a                	sw	t5,32(sp)
2000033e:	ce7e                	sw	t6,28(sp)
20000340:	00001517          	auipc	a0,0x1
20000344:	5e850513          	addi	a0,a0,1512 # 20001928 <kDeviceLogBypassUartAddress>
20000348:	4108                	lw	a0,0(a0)
2000034a:	c909                	beqz	a0,2000035c <handler_irq_timer+0x40>
2000034c:	e0010517          	auipc	a0,0xe0010
20000350:	cc850513          	addi	a0,a0,-824 # 10014 <handler_irq_timer.kLogFields>
20000354:	4581                	li	a1,0
20000356:	0b1000ef          	jal	ra,20000c06 <base_log_internal_dv>
2000035a:	a821                	j	20000372 <handler_irq_timer+0x56>
2000035c:	00001597          	auipc	a1,0x1
20000360:	4e858593          	addi	a1,a1,1256 # 20001844 <__udivdi3+0x37a>
20000364:	0020                	addi	s0,sp,8
20000366:	4651                	li	a2,20
20000368:	8522                	mv	a0,s0
2000036a:	263d                	jal	20000698 <memcpy>
2000036c:	8522                	mv	a0,s0
2000036e:	7f2000ef          	jal	ra,20000b60 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000372:	a001                	j	20000372 <handler_irq_timer+0x56>

20000374 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000374:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000376:	ce86                	sw	ra,92(sp)
20000378:	cc96                	sw	t0,88(sp)
2000037a:	ca9a                	sw	t1,84(sp)
2000037c:	c89e                	sw	t2,80(sp)
2000037e:	c6a2                	sw	s0,76(sp)
20000380:	c4aa                	sw	a0,72(sp)
20000382:	c2ae                	sw	a1,68(sp)
20000384:	c0b2                	sw	a2,64(sp)
20000386:	de36                	sw	a3,60(sp)
20000388:	dc3a                	sw	a4,56(sp)
2000038a:	da3e                	sw	a5,52(sp)
2000038c:	d842                	sw	a6,48(sp)
2000038e:	d646                	sw	a7,44(sp)
20000390:	d472                	sw	t3,40(sp)
20000392:	d276                	sw	t4,36(sp)
20000394:	d07a                	sw	t5,32(sp)
20000396:	ce7e                	sw	t6,28(sp)
20000398:	00001517          	auipc	a0,0x1
2000039c:	59050513          	addi	a0,a0,1424 # 20001928 <kDeviceLogBypassUartAddress>
200003a0:	4108                	lw	a0,0(a0)
200003a2:	c909                	beqz	a0,200003b4 <handler_irq_external+0x40>
200003a4:	e0010517          	auipc	a0,0xe0010
200003a8:	c8450513          	addi	a0,a0,-892 # 10028 <handler_irq_external.kLogFields>
200003ac:	4581                	li	a1,0
200003ae:	059000ef          	jal	ra,20000c06 <base_log_internal_dv>
200003b2:	a821                	j	200003ca <handler_irq_external+0x56>
200003b4:	00001597          	auipc	a1,0x1
200003b8:	4a458593          	addi	a1,a1,1188 # 20001858 <__udivdi3+0x38e>
200003bc:	0020                	addi	s0,sp,8
200003be:	4651                	li	a2,20
200003c0:	8522                	mv	a0,s0
200003c2:	2cd9                	jal	20000698 <memcpy>
200003c4:	8522                	mv	a0,s0
200003c6:	79a000ef          	jal	ra,20000b60 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200003ca:	a001                	j	200003ca <handler_irq_external+0x56>

200003cc <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200003cc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200003ce:	ce06                	sw	ra,28(sp)
200003d0:	cc22                	sw	s0,24(sp)
200003d2:	ca26                	sw	s1,20(sp)
200003d4:	00001597          	auipc	a1,0x1
200003d8:	55458593          	addi	a1,a1,1364 # 20001928 <kDeviceLogBypassUartAddress>
200003dc:	418c                	lw	a1,0(a1)
200003de:	842a                	mv	s0,a0
200003e0:	c19d                	beqz	a1,20000406 <print_exc_msg+0x3a>
200003e2:	e0010517          	auipc	a0,0xe0010
200003e6:	c6e50513          	addi	a0,a0,-914 # 10050 <print_exc_msg.kLogFields>
200003ea:	4585                	li	a1,1
200003ec:	8622                	mv	a2,s0
200003ee:	019000ef          	jal	ra,20000c06 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200003f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200003f6:	e0010517          	auipc	a0,0xe0010
200003fa:	c6e50513          	addi	a0,a0,-914 # 10064 <print_exc_msg.kLogFields.6>
200003fe:	4585                	li	a1,1
20000400:	007000ef          	jal	ra,20000c06 <base_log_internal_dv>
20000404:	a81d                	j	2000043a <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000406:	00001597          	auipc	a1,0x1
2000040a:	47a58593          	addi	a1,a1,1146 # 20001880 <__udivdi3+0x3b6>
2000040e:	848a                	mv	s1,sp
20000410:	4651                	li	a2,20
20000412:	8526                	mv	a0,s1
20000414:	2451                	jal	20000698 <memcpy>
20000416:	8526                	mv	a0,s1
20000418:	85a2                	mv	a1,s0
2000041a:	746000ef          	jal	ra,20000b60 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000041e:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000422:	00001597          	auipc	a1,0x1
20000426:	47258593          	addi	a1,a1,1138 # 20001894 <__udivdi3+0x3ca>
2000042a:	848a                	mv	s1,sp
2000042c:	4651                	li	a2,20
2000042e:	8526                	mv	a0,s1
20000430:	24a5                	jal	20000698 <memcpy>
20000432:	8526                	mv	a0,s1
20000434:	85a2                	mv	a1,s0
20000436:	72a000ef          	jal	ra,20000b60 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
2000043a:	a001                	j	2000043a <print_exc_msg+0x6e>

2000043c <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
2000043c:	1141                	addi	sp,sp,-16
2000043e:	c606                	sw	ra,12(sp)
20000440:	c422                	sw	s0,8(sp)
20000442:	6511                	lui	a0,0x4
20000444:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000448:	2221                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
2000044a:	00001517          	auipc	a0,0x1
2000044e:	4ae50513          	addi	a0,a0,1198 # 200018f8 <kDeviceType>
20000452:	4108                	lw	a0,0(a0)
20000454:	c111                	beqz	a0,20000458 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000456:	280d                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000458:	21c5                	jal	20000938 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
2000045a:	00001597          	auipc	a1,0x1
2000045e:	5fe58593          	addi	a1,a1,1534 # 20001a58 <kTestConfig>
20000462:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000466:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000468:	c191                	beqz	a1,2000046c <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
2000046a:	2839                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
2000046c:	2405                	jal	2000068c <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
2000046e:	e409                	bnez	s0,20000478 <main+0x3c>
20000470:	6531                	lui	a0,0xc
20000472:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000476:	a019                	j	2000047c <main+0x40>
20000478:	6525                	lui	a0,0x9
2000047a:	0535                	addi	a0,a0,13
2000047c:	28d1                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000047e:	4505                	li	a0,1
20000480:	4422                	lw	s0,8(sp)
20000482:	40b2                	lw	ra,12(sp)
20000484:	0141                	addi	sp,sp,16
20000486:	8082                	ret

20000488 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000488:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
2000048a:	ce06                	sw	ra,28(sp)
2000048c:	cc22                	sw	s0,24(sp)
2000048e:	ca26                	sw	s1,20(sp)
20000490:	f0000597          	auipc	a1,0xf0000
20000494:	b7858593          	addi	a1,a1,-1160 # 10000008 <_data_end>
20000498:	40000537          	lui	a0,0x40000
2000049c:	469000ef          	jal	ra,20001104 <dif_uart_init>
200004a0:	00001497          	auipc	s1,0x1
200004a4:	48848493          	addi	s1,s1,1160 # 20001928 <kDeviceLogBypassUartAddress>
200004a8:	c915                	beqz	a0,200004dc <init_uart+0x54>
200004aa:	4088                	lw	a0,0(s1)
200004ac:	c909                	beqz	a0,200004be <init_uart+0x36>
200004ae:	e0010517          	auipc	a0,0xe0010
200004b2:	bca50513          	addi	a0,a0,-1078 # 10078 <init_uart.kLogFields>
200004b6:	4581                	li	a1,0
200004b8:	74e000ef          	jal	ra,20000c06 <base_log_internal_dv>
200004bc:	a821                	j	200004d4 <init_uart+0x4c>
200004be:	00001597          	auipc	a1,0x1
200004c2:	3ea58593          	addi	a1,a1,1002 # 200018a8 <__udivdi3+0x3de>
200004c6:	840a                	mv	s0,sp
200004c8:	4651                	li	a2,20
200004ca:	8522                	mv	a0,s0
200004cc:	22f1                	jal	20000698 <memcpy>
200004ce:	8522                	mv	a0,s0
200004d0:	690000ef          	jal	ra,20000b60 <base_log_internal_core>
200004d4:	6531                	lui	a0,0xc
200004d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004da:	289d                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200004dc:	00001517          	auipc	a0,0x1
200004e0:	43c50513          	addi	a0,a0,1084 # 20001918 <kUartBaudrate>
200004e4:	4108                	lw	a0,0(a0)
200004e6:	00001597          	auipc	a1,0x1
200004ea:	42258593          	addi	a1,a1,1058 # 20001908 <kClockFreqPeripheralHz>
200004ee:	418c                	lw	a1,0(a1)
200004f0:	c02a                	sw	a0,0(sp)
200004f2:	c22e                	sw	a1,4(sp)
200004f4:	4505                	li	a0,1
200004f6:	c42a                	sw	a0,8(sp)
200004f8:	c62a                	sw	a0,12(sp)
200004fa:	f0000517          	auipc	a0,0xf0000
200004fe:	b0e50513          	addi	a0,a0,-1266 # 10000008 <_data_end>
20000502:	858a                	mv	a1,sp
20000504:	40f000ef          	jal	ra,20001112 <dif_uart_configure>
20000508:	c90d                	beqz	a0,2000053a <init_uart+0xb2>
2000050a:	4088                	lw	a0,0(s1)
2000050c:	c909                	beqz	a0,2000051e <init_uart+0x96>
2000050e:	e0010517          	auipc	a0,0xe0010
20000512:	b7e50513          	addi	a0,a0,-1154 # 1008c <init_uart.kLogFields.2>
20000516:	4581                	li	a1,0
20000518:	6ee000ef          	jal	ra,20000c06 <base_log_internal_dv>
2000051c:	a819                	j	20000532 <init_uart+0xaa>
2000051e:	00001597          	auipc	a1,0x1
20000522:	39e58593          	addi	a1,a1,926 # 200018bc <__udivdi3+0x3f2>
20000526:	840a                	mv	s0,sp
20000528:	4651                	li	a2,20
2000052a:	8522                	mv	a0,s0
2000052c:	22b5                	jal	20000698 <memcpy>
2000052e:	8522                	mv	a0,s0
20000530:	2d05                	jal	20000b60 <base_log_internal_core>
20000532:	6531                	lui	a0,0xc
20000534:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000538:	2821                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
2000053a:	f0000517          	auipc	a0,0xf0000
2000053e:	ace50513          	addi	a0,a0,-1330 # 10000008 <_data_end>
20000542:	716000ef          	jal	ra,20000c58 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000546:	44d2                	lw	s1,20(sp)
20000548:	4462                	lw	s0,24(sp)
2000054a:	40f2                	lw	ra,28(sp)
2000054c:	6105                	addi	sp,sp,32
2000054e:	8082                	ret

20000550 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000550:	1101                	addi	sp,sp,-32
20000552:	ce06                	sw	ra,28(sp)
20000554:	cc22                	sw	s0,24(sp)
20000556:	65b1                	lui	a1,0xc
20000558:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
2000055c:	02b50163          	beq	a0,a1,2000057e <test_status_set+0x2e>
20000560:	65a5                	lui	a1,0x9
20000562:	05b5                	addi	a1,a1,13
20000564:	02b50e63          	beq	a0,a1,200005a0 <test_status_set+0x50>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000568:	00001597          	auipc	a1,0x1
2000056c:	3bc58593          	addi	a1,a1,956 # 20001924 <kDeviceTestStatusAddress>
20000570:	418c                	lw	a1,0(a1)
20000572:	c191                	beqz	a1,20000576 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000574:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000576:	4462                	lw	s0,24(sp)
20000578:	40f2                	lw	ra,28(sp)
2000057a:	6105                	addi	sp,sp,32
2000057c:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000057e:	00001517          	auipc	a0,0x1
20000582:	3aa50513          	addi	a0,a0,938 # 20001928 <kDeviceLogBypassUartAddress>
20000586:	4108                	lw	a0,0(a0)
20000588:	ed0d                	bnez	a0,200005c2 <test_status_set+0x72>
2000058a:	00001597          	auipc	a1,0x1
2000058e:	35a58593          	addi	a1,a1,858 # 200018e4 <__udivdi3+0x41a>
20000592:	840a                	mv	s0,sp
20000594:	4651                	li	a2,20
20000596:	8522                	mv	a0,s0
20000598:	2201                	jal	20000698 <memcpy>
2000059a:	8522                	mv	a0,s0
2000059c:	23d1                	jal	20000b60 <base_log_internal_core>
2000059e:	a805                	j	200005ce <test_status_set+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005a0:	00001517          	auipc	a0,0x1
200005a4:	38850513          	addi	a0,a0,904 # 20001928 <kDeviceLogBypassUartAddress>
200005a8:	4108                	lw	a0,0(a0)
200005aa:	ed05                	bnez	a0,200005e2 <test_status_set+0x92>
200005ac:	00001597          	auipc	a1,0x1
200005b0:	32458593          	addi	a1,a1,804 # 200018d0 <__udivdi3+0x406>
200005b4:	840a                	mv	s0,sp
200005b6:	4651                	li	a2,20
200005b8:	8522                	mv	a0,s0
200005ba:	28f9                	jal	20000698 <memcpy>
200005bc:	8522                	mv	a0,s0
200005be:	234d                	jal	20000b60 <base_log_internal_core>
200005c0:	a03d                	j	200005ee <test_status_set+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200005c2:	e0010517          	auipc	a0,0xe0010
200005c6:	af250513          	addi	a0,a0,-1294 # 100b4 <test_status_set.kLogFields.2>
200005ca:	4581                	li	a1,0
200005cc:	2d2d                	jal	20000c06 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005ce:	00001517          	auipc	a0,0x1
200005d2:	35650513          	addi	a0,a0,854 # 20001924 <kDeviceTestStatusAddress>
200005d6:	4108                	lw	a0,0(a0)
200005d8:	c505                	beqz	a0,20000600 <test_status_set+0xb0>
200005da:	65b1                	lui	a1,0xc
200005dc:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200005e0:	a839                	j	200005fe <test_status_set+0xae>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005e2:	e0010517          	auipc	a0,0xe0010
200005e6:	abe50513          	addi	a0,a0,-1346 # 100a0 <test_status_set.kLogFields>
200005ea:	4581                	li	a1,0
200005ec:	2d29                	jal	20000c06 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005ee:	00001517          	auipc	a0,0x1
200005f2:	33650513          	addi	a0,a0,822 # 20001924 <kDeviceTestStatusAddress>
200005f6:	4108                	lw	a0,0(a0)
200005f8:	c501                	beqz	a0,20000600 <test_status_set+0xb0>
200005fa:	65a5                	lui	a1,0x9
200005fc:	05b5                	addi	a1,a1,13
200005fe:	c10c                	sw	a1,0(a0)
20000600:	2051                	jal	20000684 <abort>
	...

20000604 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000604:	10500073          	wfi
20000608:	8082                	ret

2000060a <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
2000060a:	1141                	addi	sp,sp,-16
2000060c:	c606                	sw	ra,12(sp)
2000060e:	00001597          	auipc	a1,0x1
20000612:	2f258593          	addi	a1,a1,754 # 20001900 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000616:	41d0                	lw	a2,4(a1)
20000618:	4194                	lw	a3,0(a1)
2000061a:	02a605b3          	mul	a1,a2,a0
2000061e:	02a6b633          	mulhu	a2,a3,a0
20000622:	95b2                	add	a1,a1,a2
20000624:	02a68533          	mul	a0,a3,a0
20000628:	000f4637          	lui	a2,0xf4
2000062c:	24060613          	addi	a2,a2,576 # f4240 <test_main.kLogFields.21+0xe40d8>
20000630:	4681                	li	a3,0
20000632:	699000ef          	jal	ra,200014ca <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000636:	4801                	li	a6,0
20000638:	4701                	li	a4,0

2000063a <read0>:
2000063a:	b8002873          	csrr	a6,mcycleh
2000063e:	b00026f3          	csrr	a3,mcycle
20000642:	b8002773          	csrr	a4,mcycleh
20000646:	fee81ae3          	bne	a6,a4,2000063a <read0>
2000064a:	4781                	li	a5,0
2000064c:	4601                	li	a2,0

2000064e <read1>:
2000064e:	b80027f3          	csrr	a5,mcycleh
20000652:	b0002773          	csrr	a4,mcycle
20000656:	b8002673          	csrr	a2,mcycleh
2000065a:	fec79ae3          	bne	a5,a2,2000064e <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
2000065e:	00d73633          	sltu	a2,a4,a3
20000662:	410787b3          	sub	a5,a5,a6
20000666:	8f91                	sub	a5,a5,a2
20000668:	00b78663          	beq	a5,a1,20000674 <read1+0x26>
2000066c:	00b7b733          	sltu	a4,a5,a1
20000670:	ff69                	bnez	a4,2000064a <read0+0x10>
20000672:	a031                	j	2000067e <read1+0x30>
20000674:	40d70633          	sub	a2,a4,a3
20000678:	00a63733          	sltu	a4,a2,a0
2000067c:	f779                	bnez	a4,2000064a <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
2000067e:	40b2                	lw	ra,12(sp)
20000680:	0141                	addi	sp,sp,16
20000682:	8082                	ret

20000684 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000684:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000688:	bff5                	j	20000684 <abort>
	...

2000068c <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
2000068c:	8082                	ret
	...

20000690 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20000690:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20000692:	8082                	ret

20000694 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20000694:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20000696:	8082                	ret

20000698 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20000698:	ca11                	beqz	a2,200006ac <memcpy+0x14>
2000069a:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
2000069c:	00058703          	lb	a4,0(a1)
200006a0:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006a4:	167d                	addi	a2,a2,-1
200006a6:	0685                	addi	a3,a3,1
200006a8:	0585                	addi	a1,a1,1
200006aa:	fa6d                	bnez	a2,2000069c <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006ac:	8082                	ret

200006ae <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ae:	c619                	beqz	a2,200006bc <memset+0xe>
200006b0:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006b2:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006b6:	167d                	addi	a2,a2,-1
200006b8:	0685                	addi	a3,a3,1
200006ba:	fe65                	bnez	a2,200006b2 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006bc:	8082                	ret

200006be <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006be:	ce09                	beqz	a2,200006d8 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006c0:	00054683          	lbu	a3,0(a0)
200006c4:	0005c703          	lbu	a4,0(a1)
200006c8:	00e6ea63          	bltu	a3,a4,200006dc <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006cc:	00d76b63          	bltu	a4,a3,200006e2 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006d0:	167d                	addi	a2,a2,-1
200006d2:	0585                	addi	a1,a1,1
200006d4:	0505                	addi	a0,a0,1
200006d6:	f66d                	bnez	a2,200006c0 <memcmp+0x2>
200006d8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006da:	8082                	ret
200006dc:	fd600513          	li	a0,-42
200006e0:	8082                	ret
200006e2:	02a00513          	li	a0,42
200006e6:	8082                	ret

200006e8 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006e8:	ca11                	beqz	a2,200006fc <memchr+0x14>
200006ea:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006ee:	00054683          	lbu	a3,0(a0)
200006f2:	00b68663          	beq	a3,a1,200006fe <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
200006f6:	167d                	addi	a2,a2,-1
200006f8:	0505                	addi	a0,a0,1
200006fa:	fa75                	bnez	a2,200006ee <memchr+0x6>
200006fc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
200006fe:	8082                	ret

20000700 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000700:	ce09                	beqz	a2,2000071a <memrchr+0x1a>
20000702:	fff50693          	addi	a3,a0,-1
20000706:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
2000070a:	00c68733          	add	a4,a3,a2
2000070e:	00074703          	lbu	a4,0(a4)
20000712:	00b70663          	beq	a4,a1,2000071e <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000716:	167d                	addi	a2,a2,-1
20000718:	fa6d                	bnez	a2,2000070a <memrchr+0xa>
2000071a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
2000071c:	8082                	ret
2000071e:	9532                	add	a0,a0,a2
20000720:	157d                	addi	a0,a0,-1
20000722:	8082                	ret

20000724 <test_ctr_drbg_ctr0>:
test_ctr_drbg_ctr0():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:70

/**
 * Run CAVP CTR DRBG Counter=0 with `kEntropyInput` deterministic
 * seed material.
 */
void test_ctr_drbg_ctr0(const dif_csrng_t *csrng) {
20000724:	7155                	addi	sp,sp,-208
20000726:	c786                	sw	ra,204(sp)
20000728:	c5a2                	sw	s0,200(sp)
2000072a:	c3a6                	sw	s1,196(sp)
2000072c:	c1ca                	sw	s2,192(sp)
2000072e:	df4e                	sw	s3,188(sp)
20000730:	dd52                	sw	s4,184(sp)
20000732:	db56                	sw	s5,180(sp)
20000734:	d95a                	sw	s6,176(sp)
20000736:	d75e                	sw	s7,172(sp)
20000738:	d562                	sw	s8,168(sp)
2000073a:	d366                	sw	s9,164(sp)
2000073c:	d16a                	sw	s10,160(sp)
2000073e:	cf6e                	sw	s11,156(sp)
20000740:	8a2a                	mv	s4,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:72
  wait_for_csrng_cmd_ready(csrng);
  CHECK(dif_csrng_instantiate(csrng, kDifCsrngEntropySrcToggleDisable,
20000742:	00001617          	auipc	a2,0x1
20000746:	1ea60613          	addi	a2,a2,490 # 2000192c <kEntropyInput>
2000074a:	4585                	li	a1,1
2000074c:	244d                	jal	200009ee <dif_csrng_instantiate>
2000074e:	00001497          	auipc	s1,0x1
20000752:	1da48493          	addi	s1,s1,474 # 20001928 <kDeviceLogBypassUartAddress>
20000756:	c905                	beqz	a0,20000786 <test_ctr_drbg_ctr0+0x62>
20000758:	4088                	lw	a0,0(s1)
2000075a:	c901                	beqz	a0,2000076a <test_ctr_drbg_ctr0+0x46>
2000075c:	e0010517          	auipc	a0,0xe0010
20000760:	96c50513          	addi	a0,a0,-1684 # 100c8 <test_ctr_drbg_ctr0.kLogFields>
20000764:	4581                	li	a1,0
20000766:	2145                	jal	20000c06 <base_log_internal_dv>
20000768:	a819                	j	2000077e <test_ctr_drbg_ctr0+0x5a>
2000076a:	00001597          	auipc	a1,0x1
2000076e:	23a58593          	addi	a1,a1,570 # 200019a4 <kExpectedOutputLen+0x4>
20000772:	1000                	addi	s0,sp,32
20000774:	4651                	li	a2,20
20000776:	8522                	mv	a0,s0
20000778:	3705                	jal	20000698 <memcpy>
2000077a:	8522                	mv	a0,s0
2000077c:	26d5                	jal	20000b60 <base_log_internal_core>
2000077e:	6531                	lui	a0,0xc
20000780:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000784:	33f1                	jal	20000550 <test_status_set>
20000786:	10a0                	addi	s0,sp,104
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:76
                              &kEntropyInput) == kDifCsrngOk);

  wait_for_csrng_cmd_ready(csrng);
  const dif_csrng_seed_material_t seed_material = {0};
20000788:	03400613          	li	a2,52
2000078c:	8522                	mv	a0,s0
2000078e:	4581                	li	a1,0
20000790:	3f39                	jal	200006ae <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:77
  CHECK(dif_csrng_reseed(csrng, &seed_material) == kDifCsrngOk);
20000792:	8552                	mv	a0,s4
20000794:	85a2                	mv	a1,s0
20000796:	24f1                	jal	20000a62 <dif_csrng_reseed>
20000798:	c905                	beqz	a0,200007c8 <test_ctr_drbg_ctr0+0xa4>
2000079a:	4088                	lw	a0,0(s1)
2000079c:	c901                	beqz	a0,200007ac <test_ctr_drbg_ctr0+0x88>
2000079e:	e0010517          	auipc	a0,0xe0010
200007a2:	93e50513          	addi	a0,a0,-1730 # 100dc <test_ctr_drbg_ctr0.kLogFields.2>
200007a6:	4581                	li	a1,0
200007a8:	29b9                	jal	20000c06 <base_log_internal_dv>
200007aa:	a819                	j	200007c0 <test_ctr_drbg_ctr0+0x9c>
200007ac:	00001597          	auipc	a1,0x1
200007b0:	20c58593          	addi	a1,a1,524 # 200019b8 <kExpectedOutputLen+0x18>
200007b4:	1000                	addi	s0,sp,32
200007b6:	4651                	li	a2,20
200007b8:	8522                	mv	a0,s0
200007ba:	3df9                	jal	20000698 <memcpy>
200007bc:	8522                	mv	a0,s0
200007be:	264d                	jal	20000b60 <base_log_internal_core>
200007c0:	6531                	lui	a0,0xc
200007c2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007c6:	3369                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:80

  wait_for_csrng_cmd_ready(csrng);
  CHECK(dif_csrng_generate_start(csrng, kExpectedOutputLen) == kDifCsrngOk);
200007c8:	45c1                	li	a1,16
200007ca:	8552                	mv	a0,s4
200007cc:	24d9                	jal	20000a92 <dif_csrng_generate_start>
200007ce:	c905                	beqz	a0,200007fe <test_ctr_drbg_ctr0+0xda>
200007d0:	4088                	lw	a0,0(s1)
200007d2:	c901                	beqz	a0,200007e2 <test_ctr_drbg_ctr0+0xbe>
200007d4:	e0010517          	auipc	a0,0xe0010
200007d8:	91c50513          	addi	a0,a0,-1764 # 100f0 <test_ctr_drbg_ctr0.kLogFields.5>
200007dc:	4581                	li	a1,0
200007de:	2125                	jal	20000c06 <base_log_internal_dv>
200007e0:	a819                	j	200007f6 <test_ctr_drbg_ctr0+0xd2>
200007e2:	00001597          	auipc	a1,0x1
200007e6:	1ea58593          	addi	a1,a1,490 # 200019cc <kExpectedOutputLen+0x2c>
200007ea:	1000                	addi	s0,sp,32
200007ec:	4651                	li	a2,20
200007ee:	8522                	mv	a0,s0
200007f0:	3565                	jal	20000698 <memcpy>
200007f2:	8522                	mv	a0,s0
200007f4:	26b5                	jal	20000b60 <base_log_internal_core>
200007f6:	6531                	lui	a0,0xc
200007f8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007fc:	3b91                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:82

  dif_csrng_output_status_t output_status = {0};
200007fe:	06011323          	sh	zero,102(sp)
20000802:	0004ad03          	lw	s10,0(s1)
20000806:	06610493          	addi	s1,sp,102
2000080a:	00001917          	auipc	s2,0x1
2000080e:	1d690913          	addi	s2,s2,470 # 200019e0 <kExpectedOutputLen+0x40>
20000812:	02010993          	addi	s3,sp,32
20000816:	6531                	lui	a0,0xc
20000818:	aad50413          	addi	s0,a0,-1363 # baad <_stack_size+0x9aad>
2000081c:	e0010a97          	auipc	s5,0xe0010
20000820:	8e8a8a93          	addi	s5,s5,-1816 # 10104 <test_ctr_drbg_ctr0.kLogFields.8>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:84
  while (!output_status.valid_data) {
    CHECK(dif_csrng_get_output_status(csrng, &output_status) == kDifCsrngOk);
20000824:	8552                	mv	a0,s4
20000826:	85a6                	mv	a1,s1
20000828:	2e19                	jal	20000b3e <dif_csrng_get_output_status>
2000082a:	cd19                	beqz	a0,20000848 <test_ctr_drbg_ctr0+0x124>
2000082c:	000d0663          	beqz	s10,20000838 <test_ctr_drbg_ctr0+0x114>
20000830:	8556                	mv	a0,s5
20000832:	4581                	li	a1,0
20000834:	2ec9                	jal	20000c06 <base_log_internal_dv>
20000836:	a039                	j	20000844 <test_ctr_drbg_ctr0+0x120>
20000838:	4651                	li	a2,20
2000083a:	854e                	mv	a0,s3
2000083c:	85ca                	mv	a1,s2
2000083e:	3da9                	jal	20000698 <memcpy>
20000840:	854e                	mv	a0,s3
20000842:	2e39                	jal	20000b60 <base_log_internal_core>
20000844:	8522                	mv	a0,s0
20000846:	3329                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:83
  while (!output_status.valid_data) {
20000848:	06614503          	lbu	a0,102(sp)
2000084c:	dd61                	beqz	a0,20000824 <test_ctr_drbg_ctr0+0x100>
2000084e:	02010c13          	addi	s8,sp,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:88
  }

  uint32_t output[16];
  CHECK(dif_csrng_generate_end(csrng, output, kExpectedOutputLen) ==
20000852:	4641                	li	a2,16
20000854:	4dc1                	li	s11,16
20000856:	8552                	mv	a0,s4
20000858:	85e2                	mv	a1,s8
2000085a:	2ca9                	jal	20000ab4 <dif_csrng_generate_end>
2000085c:	c905                	beqz	a0,2000088c <test_ctr_drbg_ctr0+0x168>
2000085e:	000d0963          	beqz	s10,20000870 <test_ctr_drbg_ctr0+0x14c>
20000862:	e0010517          	auipc	a0,0xe0010
20000866:	8b650513          	addi	a0,a0,-1866 # 10118 <test_ctr_drbg_ctr0.kLogFields.11>
2000086a:	4581                	li	a1,0
2000086c:	2e69                	jal	20000c06 <base_log_internal_dv>
2000086e:	a819                	j	20000884 <test_ctr_drbg_ctr0+0x160>
20000870:	00001597          	auipc	a1,0x1
20000874:	18458593          	addi	a1,a1,388 # 200019f4 <kExpectedOutputLen+0x54>
20000878:	0020                	addi	s0,sp,8
2000087a:	4651                	li	a2,20
2000087c:	8522                	mv	a0,s0
2000087e:	3d29                	jal	20000698 <memcpy>
20000880:	8522                	mv	a0,s0
20000882:	2cf9                	jal	20000b60 <base_log_internal_core>
20000884:	6531                	lui	a0,0xc
20000886:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000088a:	31d9                	jal	20000550 <test_status_set>
2000088c:	4401                	li	s0,0
2000088e:	00001917          	auipc	s2,0x1
20000892:	0d290913          	addi	s2,s2,210 # 20001960 <kExpectedOutput>
20000896:	00001517          	auipc	a0,0x1
2000089a:	17250513          	addi	a0,a0,370 # 20001a08 <kExpectedOutputLen+0x68>
2000089e:	c22a                	sw	a0,4(sp)
200008a0:	00810993          	addi	s3,sp,8
200008a4:	6531                	lui	a0,0xc
200008a6:	aad50a13          	addi	s4,a0,-1363 # baad <_stack_size+0x9aad>
200008aa:	e0010a97          	auipc	s5,0xe0010
200008ae:	882a8a93          	addi	s5,s5,-1918 # 1012c <test_ctr_drbg_ctr0.kLogFields.14>
200008b2:	00001b17          	auipc	s6,0x1
200008b6:	16ab0b13          	addi	s6,s6,362 # 20001a1c <kExpectedOutputLen+0x7c>
200008ba:	e0010b97          	auipc	s7,0xe0010
200008be:	886b8b93          	addi	s7,s7,-1914 # 10140 <test_ctr_drbg_ctr0.kLogFields.17>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:93
        kDifCsrngOk);

  // TODO(#5982): Enable CSRNG SW path without entropy source.
  for (uint32_t i = 0; i < 16; ++i) {
    CHECK(output[i] != 0u);
200008c2:	000c2483          	lw	s1,0(s8)
200008c6:	e08d                	bnez	s1,200008e8 <test_ctr_drbg_ctr0+0x1c4>
200008c8:	000d0663          	beqz	s10,200008d4 <test_ctr_drbg_ctr0+0x1b0>
200008cc:	8556                	mv	a0,s5
200008ce:	4581                	li	a1,0
200008d0:	2e1d                	jal	20000c06 <base_log_internal_dv>
200008d2:	a039                	j	200008e0 <test_ctr_drbg_ctr0+0x1bc>
200008d4:	4651                	li	a2,20
200008d6:	854e                	mv	a0,s3
200008d8:	4592                	lw	a1,4(sp)
200008da:	3b7d                	jal	20000698 <memcpy>
200008dc:	854e                	mv	a0,s3
200008de:	2449                	jal	20000b60 <base_log_internal_core>
200008e0:	8552                	mv	a0,s4
200008e2:	31bd                	jal	20000550 <test_status_set>
200008e4:	000c2483          	lw	s1,0(s8)
200008e8:	00092c83          	lw	s9,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:94
    LOG_INFO("[%d] got = 0x%x; expected = 0x%x", i, output[i],
200008ec:	000d0963          	beqz	s10,200008fe <test_ctr_drbg_ctr0+0x1da>
200008f0:	458d                	li	a1,3
200008f2:	855e                	mv	a0,s7
200008f4:	8622                	mv	a2,s0
200008f6:	86a6                	mv	a3,s1
200008f8:	8766                	mv	a4,s9
200008fa:	2631                	jal	20000c06 <base_log_internal_dv>
200008fc:	a811                	j	20000910 <test_ctr_drbg_ctr0+0x1ec>
200008fe:	4651                	li	a2,20
20000900:	854e                	mv	a0,s3
20000902:	85da                	mv	a1,s6
20000904:	3b51                	jal	20000698 <memcpy>
20000906:	854e                	mv	a0,s3
20000908:	85a2                	mv	a1,s0
2000090a:	8626                	mv	a2,s1
2000090c:	86e6                	mv	a3,s9
2000090e:	2c89                	jal	20000b60 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:92
  for (uint32_t i = 0; i < 16; ++i) {
20000910:	0405                	addi	s0,s0,1
20000912:	0911                	addi	s2,s2,4
20000914:	0c11                	addi	s8,s8,4
20000916:	fbb416e3          	bne	s0,s11,200008c2 <test_ctr_drbg_ctr0+0x19e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:97
             kExpectedOutput[i]);
  }
}
2000091a:	4dfa                	lw	s11,156(sp)
2000091c:	5d0a                	lw	s10,160(sp)
2000091e:	5c9a                	lw	s9,164(sp)
20000920:	5c2a                	lw	s8,168(sp)
20000922:	5bba                	lw	s7,172(sp)
20000924:	5b4a                	lw	s6,176(sp)
20000926:	5ada                	lw	s5,180(sp)
20000928:	5a6a                	lw	s4,184(sp)
2000092a:	59fa                	lw	s3,188(sp)
2000092c:	490e                	lw	s2,192(sp)
2000092e:	449e                	lw	s1,196(sp)
20000930:	442e                	lw	s0,200(sp)
20000932:	40be                	lw	ra,204(sp)
20000934:	6169                	addi	sp,sp,208
20000936:	8082                	ret

20000938 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:99

bool test_main() {
20000938:	7179                	addi	sp,sp,-48
2000093a:	d606                	sw	ra,44(sp)
2000093c:	d422                	sw	s0,40(sp)
2000093e:	d226                	sw	s1,36(sp)
20000940:	100c                	addi	a1,sp,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:104
  const dif_csrng_params_t params = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_CSRNG_BASE_ADDR),
  };
  dif_csrng_t csrng;
  CHECK(dif_csrng_init(params, &csrng) == kDifCsrngOk);
20000942:	41150537          	lui	a0,0x41150
20000946:	2049                	jal	200009c8 <dif_csrng_init>
20000948:	00001497          	auipc	s1,0x1
2000094c:	fe048493          	addi	s1,s1,-32 # 20001928 <kDeviceLogBypassUartAddress>
20000950:	c905                	beqz	a0,20000980 <test_main+0x48>
20000952:	4088                	lw	a0,0(s1)
20000954:	c901                	beqz	a0,20000964 <test_main+0x2c>
20000956:	e000f517          	auipc	a0,0xe000f
2000095a:	7fe50513          	addi	a0,a0,2046 # 10154 <test_main.kLogFields>
2000095e:	4581                	li	a1,0
20000960:	245d                	jal	20000c06 <base_log_internal_dv>
20000962:	a819                	j	20000978 <test_main+0x40>
20000964:	00001597          	auipc	a1,0x1
20000968:	0cc58593          	addi	a1,a1,204 # 20001a30 <kExpectedOutputLen+0x90>
2000096c:	0020                	addi	s0,sp,8
2000096e:	4651                	li	a2,20
20000970:	8522                	mv	a0,s0
20000972:	331d                	jal	20000698 <memcpy>
20000974:	8522                	mv	a0,s0
20000976:	22ed                	jal	20000b60 <base_log_internal_core>
20000978:	6531                	lui	a0,0xc
2000097a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000097e:	3ec9                	jal	20000550 <test_status_set>
20000980:	1008                	addi	a0,sp,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:109

  const dif_csrng_config_t config = {
      .debug_config = {.bypass_aes_cipher = false},
  };
  CHECK(dif_csrng_configure(&csrng, config) == kDifCsrngOk);
20000982:	4581                	li	a1,0
20000984:	2889                	jal	200009d6 <dif_csrng_configure>
20000986:	c905                	beqz	a0,200009b6 <test_main+0x7e>
20000988:	4088                	lw	a0,0(s1)
2000098a:	c901                	beqz	a0,2000099a <test_main+0x62>
2000098c:	e000f517          	auipc	a0,0xe000f
20000990:	7dc50513          	addi	a0,a0,2012 # 10168 <test_main.kLogFields.21>
20000994:	4581                	li	a1,0
20000996:	2c85                	jal	20000c06 <base_log_internal_dv>
20000998:	a819                	j	200009ae <test_main+0x76>
2000099a:	00001597          	auipc	a1,0x1
2000099e:	0aa58593          	addi	a1,a1,170 # 20001a44 <kExpectedOutputLen+0xa4>
200009a2:	0020                	addi	s0,sp,8
200009a4:	4651                	li	a2,20
200009a6:	8522                	mv	a0,s0
200009a8:	39c5                	jal	20000698 <memcpy>
200009aa:	8522                	mv	a0,s0
200009ac:	2a55                	jal	20000b60 <base_log_internal_core>
200009ae:	6531                	lui	a0,0xc
200009b0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200009b4:	3e71                	jal	20000550 <test_status_set>
200009b6:	1008                	addi	a0,sp,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:111

  test_ctr_drbg_ctr0(&csrng);
200009b8:	33b5                	jal	20000724 <test_ctr_drbg_ctr0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_csrng_smoketest.c:113

  return true;
200009ba:	4505                	li	a0,1
200009bc:	5492                	lw	s1,36(sp)
200009be:	5422                	lw	s0,40(sp)
200009c0:	50b2                	lw	ra,44(sp)
200009c2:	6145                	addi	sp,sp,48
200009c4:	8082                	ret
	...

200009c8 <dif_csrng_init>:
dif_csrng_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:120
  return status.valid_data;
}

dif_csrng_result_t dif_csrng_init(dif_csrng_params_t params,
                                  dif_csrng_t *csrng) {
  if (csrng == NULL) {
200009c8:	c581                	beqz	a1,200009d0 <dif_csrng_init+0x8>
200009ca:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:123
    return kDifCsrngBadArg;
  }
  *csrng = (dif_csrng_t){.params = params};
200009cc:	c188                	sw	a0,0(a1)
200009ce:	a011                	j	200009d2 <dif_csrng_init+0xa>
200009d0:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:125
  return kDifCsrngOk;
}
200009d2:	8532                	mv	a0,a2
200009d4:	8082                	ret

200009d6 <dif_csrng_configure>:
dif_csrng_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:129

dif_csrng_result_t dif_csrng_configure(const dif_csrng_t *csrng,
                                       dif_csrng_config_t config) {
  if (csrng == NULL) {
200009d6:	c909                	beqz	a0,200009e8 <dif_csrng_configure+0x12>
200009d8:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:141

  // TODO: Determine if the dif library should support a diagnostics mode
  // of operation.
  reg = bitfield_field32_write(reg, CSRNG_CTRL_FIFO_DEPTH_STS_SEL_FIELD, 0);

  mmio_region_write32(csrng->params.base_addr, CSRNG_CTRL_REG_OFFSET, reg);
200009da:	4108                	lw	a0,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
200009dc:	0586                	slli	a1,a1,0x1
200009de:	8989                	andi	a1,a1,2
200009e0:	0015e593          	ori	a1,a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200009e4:	c94c                	sw	a1,20(a0)
200009e6:	a011                	j	200009ea <dif_csrng_configure+0x14>
200009e8:	4609                	li	a2,2
dif_csrng_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:143
  return kDifCsrngOk;
}
200009ea:	8532                	mv	a0,a2
200009ec:	8082                	ret

200009ee <dif_csrng_instantiate>:
dif_csrng_instantiate():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:147

dif_csrng_result_t dif_csrng_instantiate(
    const dif_csrng_t *csrng, dif_csrng_entropy_src_toggle_t entropy_src_enable,
    const dif_csrng_seed_material_t *seed_material) {
200009ee:	1101                	addi	sp,sp,-32
200009f0:	ce06                	sw	ra,28(sp)
200009f2:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:148
  const csrng_app_cmd_t app_cmd = {
200009f4:	c436                	sw	a3,8(sp)
200009f6:	c62e                	sw	a1,12(sp)
200009f8:	c832                	sw	a2,16(sp)
200009fa:	ca02                	sw	zero,20(sp)
200009fc:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:154
      .id = kCsrngAppCmdInstantiate,
      .entropy_src_enable = entropy_src_enable,
      .seed_material = seed_material,
      .generate_len = 0,
  };
  return write_application_command(csrng, &app_cmd);
200009fe:	2021                	jal	20000a06 <write_application_command>
20000a00:	40f2                	lw	ra,28(sp)
20000a02:	6105                	addi	sp,sp,32
20000a04:	8082                	ret

20000a06 <write_application_command>:
write_application_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:62
    const dif_csrng_t *csrng, const csrng_app_cmd_t *cmd) {
20000a06:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:63
  if (csrng == NULL || cmd == NULL) {
20000a08:	c939                	beqz	a0,20000a5e <write_application_command+0x58>
20000a0a:	c9b1                	beqz	a1,20000a5e <write_application_command+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:76
      cmd->seed_material == NULL ? 0 : cmd->seed_material->seed_material_len;
20000a0c:	4598                	lw	a4,8(a1)
20000a0e:	c711                	beqz	a4,20000a1a <write_application_command+0x14>
20000a10:	4314                	lw	a3,0(a4)
20000a12:	47bd                	li	a5,15
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:78
  if (cmd_len & ~kAppCmdFieldCmdLen.mask) {
20000a14:	00d7f463          	bgeu	a5,a3,20000a1c <write_application_command+0x16>
20000a18:	a099                	j	20000a5e <write_application_command+0x58>
20000a1a:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:83
  uint32_t reg = bitfield_field32_write(0, kAppCmdFieldCmdId, cmd->id);
20000a1c:	4190                	lw	a2,0(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000a1e:	8a3d                	andi	a2,a2,15
20000a20:	00469793          	slli	a5,a3,0x4
write_application_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:85
  reg = bitfield_bit32_write(reg, kAppCmdBitFlag0, cmd->entropy_src_enable);
20000a24:	0045a803          	lw	a6,4(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000a28:	0f07f793          	andi	a5,a5,240
20000a2c:	8e5d                	or	a2,a2,a5
write_application_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:86
  reg = bitfield_field32_write(reg, kAppCmdFieldGlen, cmd->generate_len);
20000a2e:	45cc                	lw	a1,12(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:85
  reg = bitfield_bit32_write(reg, kAppCmdBitFlag0, cmd->entropy_src_enable);
20000a30:	010037b3          	snez	a5,a6
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000a34:	07a2                	slli	a5,a5,0x8
20000a36:	00f66833          	or	a6,a2,a5
20000a3a:	05b2                	slli	a1,a1,0xc
write_application_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:87
  mmio_region_write32(csrng->params.base_addr, CSRNG_CMD_REQ_REG_OFFSET, reg);
20000a3c:	411c                	lw	a5,0(a0)
20000a3e:	7ffff637          	lui	a2,0x7ffff
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000a42:	8df1                	and	a1,a1,a2
20000a44:	00b865b3          	or	a1,a6,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a48:	cfcc                	sw	a1,28(a5)
write_application_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:89
  for (size_t i = 0; i < cmd_len; ++i) {
20000a4a:	ca89                	beqz	a3,20000a5c <write_application_command+0x56>
20000a4c:	00470593          	addi	a1,a4,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:91
                        cmd->seed_material->seed_material[i]);
20000a50:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:90
    mmio_region_write32(csrng->params.base_addr, CSRNG_CMD_REQ_REG_OFFSET,
20000a52:	4118                	lw	a4,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a54:	cf50                	sw	a2,28(a4)
write_application_command():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:89
  for (size_t i = 0; i < cmd_len; ++i) {
20000a56:	16fd                	addi	a3,a3,-1
20000a58:	0591                	addi	a1,a1,4
20000a5a:	fafd                	bnez	a3,20000a50 <write_application_command+0x4a>
20000a5c:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:94
}
20000a5e:	8532                	mv	a0,a2
20000a60:	8082                	ret

20000a62 <dif_csrng_reseed>:
dif_csrng_reseed():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:158
}

dif_csrng_result_t dif_csrng_reseed(
    const dif_csrng_t *csrng, const dif_csrng_seed_material_t *seed_material) {
20000a62:	1101                	addi	sp,sp,-32
20000a64:	ce06                	sw	ra,28(sp)
20000a66:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:159
  const csrng_app_cmd_t app_cmd = {
20000a68:	c432                	sw	a2,8(sp)
20000a6a:	c602                	sw	zero,12(sp)
20000a6c:	c82e                	sw	a1,16(sp)
20000a6e:	ca02                	sw	zero,20(sp)
20000a70:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:165
      .id = kCsrngAppCmdReseed,
      .entropy_src_enable = false,
      .seed_material = seed_material,
      .generate_len = 0,
  };
  return write_application_command(csrng, &app_cmd);
20000a72:	3f51                	jal	20000a06 <write_application_command>
20000a74:	40f2                	lw	ra,28(sp)
20000a76:	6105                	addi	sp,sp,32
20000a78:	8082                	ret

20000a7a <dif_csrng_update>:
dif_csrng_update():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:169
}

dif_csrng_result_t dif_csrng_update(
    const dif_csrng_t *csrng, const dif_csrng_seed_material_t *seed_material) {
20000a7a:	1101                	addi	sp,sp,-32
20000a7c:	ce06                	sw	ra,28(sp)
20000a7e:	4611                	li	a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:170
  const csrng_app_cmd_t app_cmd = {
20000a80:	c432                	sw	a2,8(sp)
20000a82:	c602                	sw	zero,12(sp)
20000a84:	c82e                	sw	a1,16(sp)
20000a86:	ca02                	sw	zero,20(sp)
20000a88:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:176
      .id = kCsrngAppCmdUpdate,
      .entropy_src_enable = false,
      .seed_material = seed_material,
      .generate_len = 0,
  };
  return write_application_command(csrng, &app_cmd);
20000a8a:	3fb5                	jal	20000a06 <write_application_command>
20000a8c:	40f2                	lw	ra,28(sp)
20000a8e:	6105                	addi	sp,sp,32
20000a90:	8082                	ret

20000a92 <dif_csrng_generate_start>:
dif_csrng_generate_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:180
}

dif_csrng_result_t dif_csrng_generate_start(const dif_csrng_t *csrng,
                                            size_t len) {
20000a92:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:181
  if (len == 0) {
20000a94:	ce06                	sw	ra,28(sp)
20000a96:	c999                	beqz	a1,20000aac <dif_csrng_generate_start+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:187
    return kDifCsrngBadArg;
  }

  // Round up the number of 128bit blocks. Aligning with respect to uint32_t.
  // TODO(#6112): Consider using a canonical reference for alignment operations.
  const uint32_t num_128bit_blocks = (len + 3) / 4;
20000a98:	058d                	addi	a1,a1,3
20000a9a:	8189                	srli	a1,a1,0x2
20000a9c:	460d                	li	a2,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:189

  const csrng_app_cmd_t app_cmd = {
20000a9e:	c432                	sw	a2,8(sp)
20000aa0:	c602                	sw	zero,12(sp)
20000aa2:	c802                	sw	zero,16(sp)
20000aa4:	ca2e                	sw	a1,20(sp)
20000aa6:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:195
      .id = kCsrngAppCmdGenerate,
      .entropy_src_enable = false,
      .seed_material = NULL,
      .generate_len = num_128bit_blocks,
  };
  return write_application_command(csrng, &app_cmd);
20000aa8:	3fb9                	jal	20000a06 <write_application_command>
20000aaa:	a011                	j	20000aae <dif_csrng_generate_start+0x1c>
20000aac:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:196
}
20000aae:	40f2                	lw	ra,28(sp)
20000ab0:	6105                	addi	sp,sp,32
20000ab2:	8082                	ret

20000ab4 <dif_csrng_generate_end>:
dif_csrng_generate_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:199

dif_csrng_result_t dif_csrng_generate_end(const dif_csrng_t *csrng,
                                          uint32_t *buf, size_t len) {
20000ab4:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:200
  if (csrng == NULL || buf == NULL) {
20000ab6:	cd0d                	beqz	a0,20000af0 <dif_csrng_generate_end+0x3c>
20000ab8:	cd85                	beqz	a1,20000af0 <dif_csrng_generate_end+0x3c>
20000aba:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000abc:	52d8                	lw	a4,36(a3)
is_output_ready():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:115
  return status.valid_data;
20000abe:	8b05                	andi	a4,a4,1
dif_csrng_generate_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:205
    return kDifCsrngBadArg;
  }

  // Wait until there is data ready.
  while (!is_output_ready(csrng)) {
20000ac0:	df75                	beqz	a4,20000abc <dif_csrng_generate_end+0x8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:208
  }

  for (size_t i = 0, rd_cnt = 0; i < len; ++i, ++rd_cnt) {
20000ac2:	c615                	beqz	a2,20000aee <dif_csrng_generate_end+0x3a>
20000ac4:	4781                	li	a5,0
20000ac6:	4681                	li	a3,0
20000ac8:	4811                	li	a6,4
20000aca:	4118                	lw	a4,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:210
    // Block until there is more data available in the genbits buffer.
    if (rd_cnt == kCsrngGenBitsBufferSize) {
20000acc:	01079663          	bne	a5,a6,20000ad8 <dif_csrng_generate_end+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ad0:	535c                	lw	a5,36(a4)
is_output_ready():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:115
  return status.valid_data;
20000ad2:	8b85                	andi	a5,a5,1
dif_csrng_generate_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:211
      while (!is_output_ready(csrng)) {
20000ad4:	dff5                	beqz	a5,20000ad0 <dif_csrng_generate_end+0x1c>
20000ad6:	4781                	li	a5,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ad8:	02872883          	lw	a7,40(a4)
dif_csrng_generate_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:215
      }
      rd_cnt = 0;
    }
    buf[i] =
20000adc:	00269713          	slli	a4,a3,0x2
20000ae0:	972e                	add	a4,a4,a1
20000ae2:	01172023          	sw	a7,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:208
  for (size_t i = 0, rd_cnt = 0; i < len; ++i, ++rd_cnt) {
20000ae6:	0685                	addi	a3,a3,1
20000ae8:	0785                	addi	a5,a5,1
20000aea:	fec690e3          	bne	a3,a2,20000aca <dif_csrng_generate_end+0x16>
20000aee:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:219
        mmio_region_read32(csrng->params.base_addr, CSRNG_GENBITS_REG_OFFSET);
  }
  return kDifCsrngOk;
}
20000af0:	8536                	mv	a0,a3
20000af2:	8082                	ret

20000af4 <dif_csrng_uninstantiate>:
dif_csrng_uninstantiate():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:221

dif_csrng_result_t dif_csrng_uninstantiate(const dif_csrng_t *csrng) {
20000af4:	1101                	addi	sp,sp,-32
20000af6:	ce06                	sw	ra,28(sp)
20000af8:	00001597          	auipc	a1,0x1
20000afc:	55058593          	addi	a1,a1,1360 # 20002048 <__clz_tab+0x58c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:222
  const csrng_app_cmd_t app_cmd = {
20000b00:	45d0                	lw	a2,12(a1)
20000b02:	4594                	lw	a3,8(a1)
20000b04:	41d8                	lw	a4,4(a1)
20000b06:	418c                	lw	a1,0(a1)
20000b08:	ca32                	sw	a2,20(sp)
20000b0a:	c836                	sw	a3,16(sp)
20000b0c:	c63a                	sw	a4,12(sp)
20000b0e:	c42e                	sw	a1,8(sp)
20000b10:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:228
      .id = kCsrngAppCmdUnisntantiate,
      .entropy_src_enable = false,
      .seed_material = NULL,
      .generate_len = 0,
  };
  return write_application_command(csrng, &app_cmd);
20000b12:	3dd5                	jal	20000a06 <write_application_command>
20000b14:	40f2                	lw	ra,28(sp)
20000b16:	6105                	addi	sp,sp,32
20000b18:	8082                	ret

20000b1a <dif_csrng_get_cmd_interface_status>:
dif_csrng_get_cmd_interface_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:232
}

dif_csrng_result_t dif_csrng_get_cmd_interface_status(
    const dif_csrng_t *csrng, dif_csrng_cmd_status_t *status) {
20000b1a:	862a                	mv	a2,a0
20000b1c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:233
  if (csrng == NULL || status == NULL) {
20000b1e:	ce19                	beqz	a2,20000b3c <dif_csrng_get_cmd_interface_status+0x22>
20000b20:	cd91                	beqz	a1,20000b3c <dif_csrng_get_cmd_interface_status+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:238
    return kDifCsrngBadArg;
  }

  uint32_t reg =
      mmio_region_read32(csrng->params.base_addr, CSRNG_SW_CMD_STS_REG_OFFSET);
20000b22:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b24:	5108                	lw	a0,32(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b26:	00257613          	andi	a2,a0,2
dif_csrng_get_cmd_interface_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:244
  bool cmd_ready = bitfield_bit32_read(reg, CSRNG_SW_CMD_STS_CMD_RDY_BIT);
  bool cmd_error = bitfield_bit32_read(reg, CSRNG_SW_CMD_STS_CMD_STS_BIT);

  // The function prioritizes error detection to avoid masking errors
  // when `cmd_ready` is set to true.
  if (cmd_error) {
20000b2a:	c219                	beqz	a2,20000b30 <dif_csrng_get_cmd_interface_status+0x16>
20000b2c:	4609                	li	a2,2
20000b2e:	a029                	j	20000b38 <dif_csrng_get_cmd_interface_status+0x1e>
20000b30:	fff54513          	not	a0,a0
20000b34:	00157613          	andi	a2,a0,1
20000b38:	4501                	li	a0,0
20000b3a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:256
    return kDifCsrngOk;
  }

  *status = kDifCsrngCmdStatusBusy;
  return kDifCsrngOk;
}
20000b3c:	8082                	ret

20000b3e <dif_csrng_get_output_status>:
dif_csrng_get_output_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:259

dif_csrng_result_t dif_csrng_get_output_status(
    const dif_csrng_t *csrng, dif_csrng_output_status_t *status) {
20000b3e:	862a                	mv	a2,a0
20000b40:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:260
  if (csrng == NULL || status == NULL) {
20000b42:	ce09                	beqz	a2,20000b5c <dif_csrng_get_output_status+0x1e>
20000b44:	cd81                	beqz	a1,20000b5c <dif_csrng_get_output_status+0x1e>
get_output_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:102
      mmio_region_read32(csrng->params.base_addr, CSRNG_GENBITS_VLD_REG_OFFSET);
20000b46:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b48:	5150                	lw	a2,36(a0)
20000b4a:	4501                	li	a0,0
get_output_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:103
  status->valid_data =
20000b4c:	00167693          	andi	a3,a2,1
20000b50:	00d58023          	sb	a3,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:105
  status->fips_mode =
20000b54:	8205                	srli	a2,a2,0x1
20000b56:	8a05                	andi	a2,a2,1
20000b58:	00c580a3          	sb	a2,1(a1)
dif_csrng_get_output_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_csrng.c:265
    return kDifCsrngBadArg;
  }
  get_output_status(csrng, status);
  return kDifCsrngOk;
}
20000b5c:	8082                	ret
	...

20000b60 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000b60:	7139                	addi	sp,sp,-64
20000b62:	ce06                	sw	ra,28(sp)
20000b64:	cc22                	sw	s0,24(sp)
20000b66:	ca26                	sw	s1,20(sp)
20000b68:	c84a                	sw	s2,16(sp)
20000b6a:	892a                	mv	s2,a0
20000b6c:	de46                	sw	a7,60(sp)
20000b6e:	dc42                	sw	a6,56(sp)
20000b70:	da3e                	sw	a5,52(sp)
20000b72:	d83a                	sw	a4,48(sp)
20000b74:	d636                	sw	a3,44(sp)
20000b76:	d432                	sw	a2,40(sp)
20000b78:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000b7a:	4144                	lw	s1,4(a0)
20000b7c:	80000537          	lui	a0,0x80000
20000b80:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffdf83>
20000b84:	8526                	mv	a0,s1
20000b86:	4581                	li	a1,0
20000b88:	3685                	jal	200006e8 <memchr>
20000b8a:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20000b8e:	02f00593          	li	a1,47
20000b92:	8526                	mv	a0,s1
20000b94:	36b5                	jal	20000700 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000b96:	00092583          	lw	a1,0(s2)
20000b9a:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000b9c:	00b66b63          	bltu	a2,a1,20000bb2 <base_log_internal_core+0x52>
20000ba0:	058a                	slli	a1,a1,0x2
20000ba2:	00001617          	auipc	a2,0x1
20000ba6:	eba60613          	addi	a2,a2,-326 # 20001a5c <kTestConfig+0x4>
20000baa:	95b2                	add	a1,a1,a2
20000bac:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000bae:	e519                	bnez	a0,20000bbc <base_log_internal_core+0x5c>
20000bb0:	a801                	j	20000bc0 <base_log_internal_core+0x60>
20000bb2:	00001597          	auipc	a1,0x1
20000bb6:	4bf58593          	addi	a1,a1,1215 # 20002071 <__clz_tab+0x5b5>
20000bba:	c119                	beqz	a0,20000bc0 <base_log_internal_core+0x60>
20000bbc:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000bc0:	effff417          	auipc	s0,0xeffff
20000bc4:	44c40413          	addi	s0,s0,1100 # 1000000c <base_log_internal_core.global_log_counter>
20000bc8:	00045603          	lhu	a2,0(s0)
20000bcc:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000bd0:	00001517          	auipc	a0,0x1
20000bd4:	48850513          	addi	a0,a0,1160 # 20002058 <__clz_tab+0x59c>
20000bd8:	86a6                	mv	a3,s1
20000bda:	28d1                	jal	20000cae <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000bdc:	00041503          	lh	a0,0(s0)
20000be0:	0505                	addi	a0,a0,1
20000be2:	00a41023          	sh	a0,0(s0)
20000be6:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000be8:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000bea:	01092503          	lw	a0,16(s2)
20000bee:	28c5                	jal	20000cde <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000bf0:	00001517          	auipc	a0,0x1
20000bf4:	47650513          	addi	a0,a0,1142 # 20002066 <__clz_tab+0x5aa>
20000bf8:	285d                	jal	20000cae <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000bfa:	4942                	lw	s2,16(sp)
20000bfc:	44d2                	lw	s1,20(sp)
20000bfe:	4462                	lw	s0,24(sp)
20000c00:	40f2                	lw	ra,28(sp)
20000c02:	6121                	addi	sp,sp,64
20000c04:	8082                	ret

20000c06 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20000c06:	1101                	addi	sp,sp,-32
20000c08:	ce46                	sw	a7,28(sp)
20000c0a:	cc42                	sw	a6,24(sp)
20000c0c:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000c0e:	00001797          	auipc	a5,0x1
20000c12:	d1a78793          	addi	a5,a5,-742 # 20001928 <kDeviceLogBypassUartAddress>
20000c16:	439c                	lw	a5,0(a5)
20000c18:	c83a                	sw	a4,16(sp)
20000c1a:	c636                	sw	a3,12(sp)
20000c1c:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c1e:	c388                	sw	a0,0(a5)
20000c20:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000c22:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000c24:	c989                	beqz	a1,20000c36 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000c26:	4512                	lw	a0,4(sp)
20000c28:	00450613          	addi	a2,a0,4
20000c2c:	c232                	sw	a2,4(sp)
20000c2e:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000c30:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c32:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000c34:	f9ed                	bnez	a1,20000c26 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000c36:	6105                	addi	sp,sp,32
20000c38:	8082                	ret
	...

20000c3c <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20000c3c:	e589                	bnez	a1,20000c46 <base_set_stdout+0xa>
20000c3e:	00000597          	auipc	a1,0x0
20000c42:	01658593          	addi	a1,a1,22 # 20000c54 <base_dev_null>
20000c46:	effff617          	auipc	a2,0xeffff
20000c4a:	3ba60613          	addi	a2,a2,954 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20000c4e:	c208                	sw	a0,0(a2)
20000c50:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20000c52:	8082                	ret

20000c54 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20000c54:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20000c56:	8082                	ret

20000c58 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20000c58:	effff597          	auipc	a1,0xeffff
20000c5c:	3a858593          	addi	a1,a1,936 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20000c60:	c188                	sw	a0,0(a1)
20000c62:	00000517          	auipc	a0,0x0
20000c66:	00c50513          	addi	a0,a0,12 # 20000c6e <base_dev_uart>
20000c6a:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20000c6c:	8082                	ret

20000c6e <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20000c6e:	1101                	addi	sp,sp,-32
20000c70:	ce06                	sw	ra,28(sp)
20000c72:	cc22                	sw	s0,24(sp)
20000c74:	ca26                	sw	s1,20(sp)
20000c76:	c84a                	sw	s2,16(sp)
20000c78:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000c7a:	c20d                	beqz	a2,20000c9c <base_dev_uart+0x2e>
20000c7c:	8432                	mv	s0,a2
20000c7e:	892e                	mv	s2,a1
20000c80:	89aa                	mv	s3,a0
20000c82:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20000c84:	00990533          	add	a0,s2,s1
20000c88:	00054583          	lbu	a1,0(a0)
20000c8c:	854e                	mv	a0,s3
20000c8e:	2f11                	jal	200013a2 <dif_uart_byte_send_polled>
20000c90:	e519                	bnez	a0,20000c9e <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000c92:	0485                	addi	s1,s1,1
20000c94:	fe9418e3          	bne	s0,s1,20000c84 <base_dev_uart+0x16>
20000c98:	84a2                	mv	s1,s0
20000c9a:	a011                	j	20000c9e <base_dev_uart+0x30>
20000c9c:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000c9e:	8526                	mv	a0,s1
20000ca0:	49b2                	lw	s3,12(sp)
20000ca2:	4942                	lw	s2,16(sp)
20000ca4:	44d2                	lw	s1,20(sp)
20000ca6:	4462                	lw	s0,24(sp)
20000ca8:	40f2                	lw	ra,28(sp)
20000caa:	6105                	addi	sp,sp,32
20000cac:	8082                	ret

20000cae <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000cae:	7179                	addi	sp,sp,-48
20000cb0:	c606                	sw	ra,12(sp)
20000cb2:	d646                	sw	a7,44(sp)
20000cb4:	d442                	sw	a6,40(sp)
20000cb6:	d23e                	sw	a5,36(sp)
20000cb8:	d03a                	sw	a4,32(sp)
20000cba:	ce36                	sw	a3,28(sp)
20000cbc:	cc32                	sw	a2,24(sp)
20000cbe:	ca2e                	sw	a1,20(sp)
20000cc0:	effff597          	auipc	a1,0xeffff
20000cc4:	34058593          	addi	a1,a1,832 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000cc8:	4190                	lw	a2,0(a1)
20000cca:	41cc                	lw	a1,4(a1)
20000ccc:	872a                	mv	a4,a0
20000cce:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000cd0:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000cd2:	8532                	mv	a0,a2
20000cd4:	863a                	mv	a2,a4
20000cd6:	200d                	jal	20000cf8 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000cd8:	40b2                	lw	ra,12(sp)
20000cda:	6145                	addi	sp,sp,48
20000cdc:	8082                	ret

20000cde <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000cde:	effff697          	auipc	a3,0xeffff
20000ce2:	32268693          	addi	a3,a3,802 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000ce6:	4290                	lw	a2,0(a3)
20000ce8:	42d4                	lw	a3,4(a3)
20000cea:	872e                	mv	a4,a1
20000cec:	87aa                	mv	a5,a0
20000cee:	8532                	mv	a0,a2
20000cf0:	85b6                	mv	a1,a3
20000cf2:	863e                	mv	a2,a5
20000cf4:	86ba                	mv	a3,a4
20000cf6:	a009                	j	20000cf8 <base_vfprintf>

20000cf8 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000cf8:	7139                	addi	sp,sp,-64
20000cfa:	de06                	sw	ra,60(sp)
20000cfc:	dc22                	sw	s0,56(sp)
20000cfe:	da26                	sw	s1,52(sp)
20000d00:	d84a                	sw	s2,48(sp)
20000d02:	d64e                	sw	s3,44(sp)
20000d04:	d452                	sw	s4,40(sp)
20000d06:	d256                	sw	s5,36(sp)
20000d08:	d05a                	sw	s6,32(sp)
20000d0a:	ce5e                	sw	s7,28(sp)
20000d0c:	cc62                	sw	s8,24(sp)
20000d0e:	ca66                	sw	s9,20(sp)
20000d10:	c86a                	sw	s10,16(sp)
20000d12:	c66e                	sw	s11,12(sp)
20000d14:	8bb2                	mv	s7,a2
20000d16:	892a                	mv	s2,a0
20000d18:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000d1a:	c199                	beqz	a1,20000d20 <base_vfprintf+0x28>
20000d1c:	89ae                	mv	s3,a1
20000d1e:	a029                	j	20000d28 <base_vfprintf+0x30>
20000d20:	00000997          	auipc	s3,0x0
20000d24:	f3498993          	addi	s3,s3,-204 # 20000c54 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000d28:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000d2a:	000bc503          	lbu	a0,0(s7)
20000d2e:	28050f63          	beqz	a0,20000fcc <base_vfprintf+0x2d4>
20000d32:	4b01                	li	s6,0
20000d34:	02500c13          	li	s8,37
20000d38:	4ca5                	li	s9,9
20000d3a:	02000d13          	li	s10,32
20000d3e:	06800d93          	li	s11,104
20000d42:	00001a17          	auipc	s4,0x1
20000d46:	331a0a13          	addi	s4,s4,817 # 20002073 <__clz_tab+0x5b7>
20000d4a:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20000d4c:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20000d4e:	0ff57413          	andi	s0,a0,255
20000d52:	01840963          	beq	s0,s8,20000d64 <base_vfprintf+0x6c>
20000d56:	c419                	beqz	s0,20000d64 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20000d58:	009b8533          	add	a0,s7,s1
20000d5c:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20000d60:	0485                	addi	s1,s1,1
20000d62:	b7f5                	j	20000d4e <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20000d64:	c491                	beqz	s1,20000d70 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20000d66:	854a                	mv	a0,s2
20000d68:	85de                	mv	a1,s7
20000d6a:	8626                	mv	a2,s1
20000d6c:	9982                	jalr	s3
20000d6e:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20000d70:	24040f63          	beqz	s0,20000fce <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000d74:	009b8633          	add	a2,s7,s1
20000d78:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000d7c:	22050f63          	beqz	a0,20000fba <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000d80:	fd050593          	addi	a1,a0,-48
20000d84:	0ff5f593          	andi	a1,a1,255
20000d88:	00bcf863          	bgeu	s9,a1,20000d98 <base_vfprintf+0xa0>
20000d8c:	4401                	li	s0,0
20000d8e:	4581                	li	a1,0
20000d90:	4605                	li	a2,1
20000d92:	028d7f63          	bgeu	s10,s0,20000dd0 <base_vfprintf+0xd8>
20000d96:	aca1                	j	20000fee <base_vfprintf+0x2f6>
20000d98:	4581                	li	a1,0
20000d9a:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000d9c:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000d9e:	00b606b3          	add	a3,a2,a1
20000da2:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000da6:	20068a63          	beqz	a3,20000fba <base_vfprintf+0x2c2>
20000daa:	0ff57513          	andi	a0,a0,255
20000dae:	03540733          	mul	a4,s0,s5
20000db2:	953a                	add	a0,a0,a4
20000db4:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000db8:	fd068513          	addi	a0,a3,-48
20000dbc:	0ff57713          	andi	a4,a0,255
20000dc0:	0585                	addi	a1,a1,1
20000dc2:	8536                	mv	a0,a3
20000dc4:	fcecfde3          	bgeu	s9,a4,20000d9e <base_vfprintf+0xa6>
20000dc8:	4601                	li	a2,0
20000dca:	8536                	mv	a0,a3
20000dcc:	228d6163          	bltu	s10,s0,20000fee <base_vfprintf+0x2f6>
20000dd0:	008036b3          	snez	a3,s0
20000dd4:	8e55                	or	a2,a2,a3
20000dd6:	20060c63          	beqz	a2,20000fee <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000dda:	95de                	add	a1,a1,s7
20000ddc:	95a6                	add	a1,a1,s1
20000dde:	00258b93          	addi	s7,a1,2
20000de2:	02adce63          	blt	s11,a0,20000e1e <base_vfprintf+0x126>
20000de6:	06100593          	li	a1,97
20000dea:	06a5d563          	bge	a1,a0,20000e54 <base_vfprintf+0x15c>
20000dee:	06300593          	li	a1,99
20000df2:	0ca5cb63          	blt	a1,a0,20000ec8 <base_vfprintf+0x1d0>
20000df6:	06200593          	li	a1,98
20000dfa:	14b50a63          	beq	a0,a1,20000f4e <base_vfprintf+0x256>
20000dfe:	06300593          	li	a1,99
20000e02:	18b51f63          	bne	a0,a1,20000fa0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20000e06:	4502                	lw	a0,0(sp)
20000e08:	00450593          	addi	a1,a0,4
20000e0c:	c02e                	sw	a1,0(sp)
20000e0e:	4108                	lw	a0,0(a0)
20000e10:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20000e14:	4605                	li	a2,1
20000e16:	854a                	mv	a0,s2
20000e18:	00b10593          	addi	a1,sp,11
20000e1c:	aa41                	j	20000fac <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000e1e:	07200593          	li	a1,114
20000e22:	04a5dd63          	bge	a1,a0,20000e7c <base_vfprintf+0x184>
20000e26:	07700593          	li	a1,119
20000e2a:	0aa5c663          	blt	a1,a0,20000ed6 <base_vfprintf+0x1de>
20000e2e:	07300593          	li	a1,115
20000e32:	12b50963          	beq	a0,a1,20000f64 <base_vfprintf+0x26c>
20000e36:	07500593          	li	a1,117
20000e3a:	16b51363          	bne	a0,a1,20000fa0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20000e3e:	4502                	lw	a0,0(sp)
20000e40:	00450593          	addi	a1,a0,4
20000e44:	c02e                	sw	a1,0(sp)
20000e46:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000e48:	00001797          	auipc	a5,0x1
20000e4c:	c4178793          	addi	a5,a5,-959 # 20001a89 <kDigitsLow>
20000e50:	4729                	li	a4,10
20000e52:	a8cd                	j	20000f44 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000e54:	13850763          	beq	a0,s8,20000f82 <base_vfprintf+0x28a>
20000e58:	04800593          	li	a1,72
20000e5c:	00b50663          	beq	a0,a1,20000e68 <base_vfprintf+0x170>
20000e60:	05800593          	li	a1,88
20000e64:	12b51e63          	bne	a0,a1,20000fa0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20000e68:	4502                	lw	a0,0(sp)
20000e6a:	00450593          	addi	a1,a0,4
20000e6e:	c02e                	sw	a1,0(sp)
20000e70:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20000e72:	00001797          	auipc	a5,0x1
20000e76:	c2778793          	addi	a5,a5,-985 # 20001a99 <kDigitsHigh>
20000e7a:	a0e1                	j	20000f42 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000e7c:	06900593          	li	a1,105
20000e80:	06b50d63          	beq	a0,a1,20000efa <base_vfprintf+0x202>
20000e84:	06f00593          	li	a1,111
20000e88:	10b50163          	beq	a0,a1,20000f8a <base_vfprintf+0x292>
20000e8c:	07000593          	li	a1,112
20000e90:	10b51863          	bne	a0,a1,20000fa0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000e94:	00001597          	auipc	a1,0x1
20000e98:	1e358593          	addi	a1,a1,483 # 20002077 <__clz_tab+0x5bb>
20000e9c:	4609                	li	a2,2
20000e9e:	854a                	mv	a0,s2
20000ea0:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20000ea2:	4582                	lw	a1,0(sp)
20000ea4:	00458613          	addi	a2,a1,4
20000ea8:	c032                	sw	a2,0(sp)
20000eaa:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000eac:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000eb0:	00001797          	auipc	a5,0x1
20000eb4:	bd978793          	addi	a5,a5,-1063 # 20001a89 <kDigitsLow>
20000eb8:	46a1                	li	a3,8
20000eba:	4741                	li	a4,16
20000ebc:	854a                	mv	a0,s2
20000ebe:	85ce                	mv	a1,s3
20000ec0:	2a5d                	jal	20001076 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20000ec2:	00a40b33          	add	s6,s0,a0
20000ec6:	a0ed                	j	20000fb0 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000ec8:	06400593          	li	a1,100
20000ecc:	02b50763          	beq	a0,a1,20000efa <base_vfprintf+0x202>
20000ed0:	07b50063          	beq	a0,s11,20000f30 <base_vfprintf+0x238>
20000ed4:	a0f1                	j	20000fa0 <base_vfprintf+0x2a8>
20000ed6:	07800593          	li	a1,120
20000eda:	04b50b63          	beq	a0,a1,20000f30 <base_vfprintf+0x238>
20000ede:	07a00593          	li	a1,122
20000ee2:	0ab51f63          	bne	a0,a1,20000fa0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20000ee6:	4502                	lw	a0,0(sp)
20000ee8:	00450593          	addi	a1,a0,4
20000eec:	c02e                	sw	a1,0(sp)
20000eee:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20000ef0:	00850593          	addi	a1,a0,8
20000ef4:	c02e                	sw	a1,0(sp)
20000ef6:	414c                	lw	a1,4(a0)
20000ef8:	a84d                	j	20000faa <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000efa:	4502                	lw	a0,0(sp)
20000efc:	00450593          	addi	a1,a0,4
20000f00:	c02e                	sw	a1,0(sp)
20000f02:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20000f04:	557d                	li	a0,-1
20000f06:	00954c63          	blt	a0,s1,20000f1e <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000f0a:	00001597          	auipc	a1,0x1
20000f0e:	16b58593          	addi	a1,a1,363 # 20002075 <__clz_tab+0x5b9>
20000f12:	4605                	li	a2,1
20000f14:	854a                	mv	a0,s2
20000f16:	9982                	jalr	s3
20000f18:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000f1a:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000f1e:	00001797          	auipc	a5,0x1
20000f22:	b6b78793          	addi	a5,a5,-1173 # 20001a89 <kDigitsLow>
20000f26:	4729                	li	a4,10
20000f28:	854a                	mv	a0,s2
20000f2a:	85ce                	mv	a1,s3
20000f2c:	8626                	mv	a2,s1
20000f2e:	a829                	j	20000f48 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000f30:	4502                	lw	a0,0(sp)
20000f32:	00450593          	addi	a1,a0,4
20000f36:	c02e                	sw	a1,0(sp)
20000f38:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20000f3a:	00001797          	auipc	a5,0x1
20000f3e:	b4f78793          	addi	a5,a5,-1201 # 20001a89 <kDigitsLow>
20000f42:	4741                	li	a4,16
20000f44:	854a                	mv	a0,s2
20000f46:	85ce                	mv	a1,s3
20000f48:	86a2                	mv	a3,s0
20000f4a:	2235                	jal	20001076 <write_digits>
20000f4c:	a08d                	j	20000fae <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20000f4e:	4502                	lw	a0,0(sp)
20000f50:	00450593          	addi	a1,a0,4
20000f54:	c02e                	sw	a1,0(sp)
20000f56:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20000f58:	00001797          	auipc	a5,0x1
20000f5c:	b3178793          	addi	a5,a5,-1231 # 20001a89 <kDigitsLow>
20000f60:	4709                	li	a4,2
20000f62:	b7cd                	j	20000f44 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20000f64:	4502                	lw	a0,0(sp)
20000f66:	00450593          	addi	a1,a0,4
20000f6a:	c02e                	sw	a1,0(sp)
20000f6c:	410c                	lw	a1,0(a0)
20000f6e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000f70:	00a58633          	add	a2,a1,a0
20000f74:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20000f78:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000f7a:	fa7d                	bnez	a2,20000f70 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20000f7c:	fff50613          	addi	a2,a0,-1
20000f80:	a02d                	j	20000faa <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20000f82:	4605                	li	a2,1
20000f84:	854a                	mv	a0,s2
20000f86:	85d2                	mv	a1,s4
20000f88:	a015                	j	20000fac <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20000f8a:	4502                	lw	a0,0(sp)
20000f8c:	00450593          	addi	a1,a0,4
20000f90:	c02e                	sw	a1,0(sp)
20000f92:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20000f94:	00001797          	auipc	a5,0x1
20000f98:	af578793          	addi	a5,a5,-1291 # 20001a89 <kDigitsLow>
20000f9c:	4721                	li	a4,8
20000f9e:	b75d                	j	20000f44 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20000fa0:	00001597          	auipc	a1,0x1
20000fa4:	b0958593          	addi	a1,a1,-1271 # 20001aa9 <kUnknownSpec>
20000fa8:	463d                	li	a2,15
20000faa:	854a                	mv	a0,s2
20000fac:	9982                	jalr	s3
20000fae:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20000fb0:	000bc503          	lbu	a0,0(s7)
20000fb4:	d8051ce3          	bnez	a0,20000d4c <base_vfprintf+0x54>
20000fb8:	a819                	j	20000fce <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20000fba:	00001597          	auipc	a1,0x1
20000fbe:	ab258593          	addi	a1,a1,-1358 # 20001a6c <kErrorNul>
20000fc2:	4645                	li	a2,17
20000fc4:	854a                	mv	a0,s2
20000fc6:	9982                	jalr	s3
20000fc8:	9b2a                	add	s6,s6,a0
20000fca:	a011                	j	20000fce <base_vfprintf+0x2d6>
20000fcc:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20000fce:	855a                	mv	a0,s6
20000fd0:	4db2                	lw	s11,12(sp)
20000fd2:	4d42                	lw	s10,16(sp)
20000fd4:	4cd2                	lw	s9,20(sp)
20000fd6:	4c62                	lw	s8,24(sp)
20000fd8:	4bf2                	lw	s7,28(sp)
20000fda:	5b02                	lw	s6,32(sp)
20000fdc:	5a92                	lw	s5,36(sp)
20000fde:	5a22                	lw	s4,40(sp)
20000fe0:	59b2                	lw	s3,44(sp)
20000fe2:	5942                	lw	s2,48(sp)
20000fe4:	54d2                	lw	s1,52(sp)
20000fe6:	5462                	lw	s0,56(sp)
20000fe8:	50f2                	lw	ra,60(sp)
20000fea:	6121                	addi	sp,sp,64
20000fec:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20000fee:	00001597          	auipc	a1,0x1
20000ff2:	a8f58593          	addi	a1,a1,-1393 # 20001a7d <kErrorTooWide>
20000ff6:	4631                	li	a2,12
20000ff8:	b7f1                	j	20000fc4 <base_vfprintf+0x2cc>

20000ffa <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20000ffa:	7179                	addi	sp,sp,-48
20000ffc:	ca06                	sw	ra,20(sp)
20000ffe:	d646                	sw	a7,44(sp)
20001000:	d442                	sw	a6,40(sp)
20001002:	d23e                	sw	a5,36(sp)
20001004:	d03a                	sw	a4,32(sp)
20001006:	ce36                	sw	a3,28(sp)
20001008:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
2000100a:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
2000100c:	c42a                	sw	a0,8(sp)
2000100e:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001010:	00000597          	auipc	a1,0x0
20001014:	01258593          	addi	a1,a1,18 # 20001022 <snprintf_sink>
20001018:	0028                	addi	a0,sp,8
2000101a:	39f9                	jal	20000cf8 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
2000101c:	40d2                	lw	ra,20(sp)
2000101e:	6145                	addi	sp,sp,48
20001020:	8082                	ret

20001022 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20001022:	1141                	addi	sp,sp,-16
20001024:	c606                	sw	ra,12(sp)
20001026:	c422                	sw	s0,8(sp)
20001028:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
2000102a:	4140                	lw	s0,4(a0)
2000102c:	c00d                	beqz	s0,2000104e <snprintf_sink+0x2c>
2000102e:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20001030:	00c46363          	bltu	s0,a2,20001036 <snprintf_sink+0x14>
20001034:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20001036:	4088                	lw	a0,0(s1)
20001038:	8622                	mv	a2,s0
2000103a:	e5eff0ef          	jal	ra,20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000103e:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001040:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001042:	9522                	add	a0,a0,s0
20001044:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001046:	40858533          	sub	a0,a1,s0
2000104a:	c0c8                	sw	a0,4(s1)
2000104c:	a011                	j	20001050 <snprintf_sink+0x2e>
2000104e:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20001050:	8522                	mv	a0,s0
20001052:	4492                	lw	s1,4(sp)
20001054:	4422                	lw	s0,8(sp)
20001056:	40b2                	lw	ra,12(sp)
20001058:	0141                	addi	sp,sp,16
2000105a:	8082                	ret

2000105c <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
2000105c:	1101                	addi	sp,sp,-32
2000105e:	c206                	sw	ra,4(sp)
20001060:	ce46                	sw	a7,28(sp)
20001062:	cc42                	sw	a6,24(sp)
20001064:	ca3e                	sw	a5,20(sp)
20001066:	c83a                	sw	a4,16(sp)
20001068:	c636                	sw	a3,12(sp)
2000106a:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
2000106c:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
2000106e:	3169                	jal	20000cf8 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001070:	4092                	lw	ra,4(sp)
20001072:	6105                	addi	sp,sp,32
20001074:	8082                	ret

20001076 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001076:	7139                	addi	sp,sp,-64
20001078:	de06                	sw	ra,60(sp)
2000107a:	dc22                	sw	s0,56(sp)
2000107c:	da26                	sw	s1,52(sp)
2000107e:	d84a                	sw	s2,48(sp)
20001080:	d64e                	sw	s3,44(sp)
20001082:	892e                	mv	s2,a1
20001084:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001086:	ca05                	beqz	a2,200010b6 <write_digits+0x40>
20001088:	4501                	li	a0,0
2000108a:	02b10813          	addi	a6,sp,43
2000108e:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001090:	02e65633          	divu	a2,a2,a4
20001094:	02e60433          	mul	s0,a2,a4
20001098:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
2000109c:	943e                	add	s0,s0,a5
2000109e:	00040403          	lb	s0,0(s0)
200010a2:	00a805b3          	add	a1,a6,a0
200010a6:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200010aa:	157d                	addi	a0,a0,-1
200010ac:	fee4f1e3          	bgeu	s1,a4,2000108e <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
200010b0:	40a00633          	neg	a2,a0
200010b4:	a011                	j	200010b8 <write_digits+0x42>
200010b6:	4601                	li	a2,0
200010b8:	4485                	li	s1,1
200010ba:	c291                	beqz	a3,200010be <write_digits+0x48>
200010bc:	84b6                	mv	s1,a3
200010be:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
200010c2:	00a4e463          	bltu	s1,a0,200010ca <write_digits+0x54>
200010c6:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200010ca:	02967063          	bgeu	a2,s1,200010ea <write_digits+0x74>
200010ce:	0068                	addi	a0,sp,12
200010d0:	8d05                	sub	a0,a0,s1
200010d2:	02050513          	addi	a0,a0,32
200010d6:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
200010da:	03000593          	li	a1,48
200010de:	8622                	mv	a2,s0
200010e0:	dceff0ef          	jal	ra,200006ae <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200010e4:	147d                	addi	s0,s0,-1
200010e6:	fc7d                	bnez	s0,200010e4 <write_digits+0x6e>
200010e8:	8626                	mv	a2,s1
200010ea:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
200010ec:	8d11                	sub	a0,a0,a2
200010ee:	02050593          	addi	a1,a0,32
200010f2:	854e                	mv	a0,s3
200010f4:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200010f6:	59b2                	lw	s3,44(sp)
200010f8:	5942                	lw	s2,48(sp)
200010fa:	54d2                	lw	s1,52(sp)
200010fc:	5462                	lw	s0,56(sp)
200010fe:	50f2                	lw	ra,60(sp)
20001100:	6121                	addi	sp,sp,64
20001102:	8082                	ret

20001104 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20001104:	c581                	beqz	a1,2000110c <dif_uart_init+0x8>
20001106:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20001108:	c188                	sw	a0,0(a1)
2000110a:	a011                	j	2000110e <dif_uart_init+0xa>
2000110c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
2000110e:	8532                	mv	a0,a2
20001110:	8082                	ret

20001112 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20001112:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001114:	c606                	sw	ra,12(sp)
20001116:	c422                	sw	s0,8(sp)
20001118:	c226                	sw	s1,4(sp)
2000111a:	c92d                	beqz	a0,2000118c <dif_uart_configure+0x7a>
2000111c:	84ae                	mv	s1,a1
2000111e:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001120:	418c                	lw	a1,0(a1)
20001122:	450d                	li	a0,3
20001124:	c5ad                	beqz	a1,2000118e <dif_uart_configure+0x7c>
20001126:	40d0                	lw	a2,4(s1)
20001128:	c23d                	beqz	a2,2000118e <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
2000112a:	01459513          	slli	a0,a1,0x14
2000112e:	81b1                	srli	a1,a1,0xc
20001130:	4681                	li	a3,0
20001132:	2e61                	jal	200014ca <__udivdi3>
20001134:	6641                	lui	a2,0x10
20001136:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20001138:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
2000113a:	8d31                	xor	a0,a0,a2
2000113c:	8dc9                	or	a1,a1,a0
2000113e:	4511                	li	a0,4
20001140:	e5b9                	bnez	a1,2000118e <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20001142:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001144:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20001148:	4008                	lw	a0,0(s0)
2000114a:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000114c:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
2000114e:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001150:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001154:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001156:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000115a:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000115c:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20001160:	4008                	lw	a0,0(s0)
20001162:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001164:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20001166:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001168:	01061513          	slli	a0,a2,0x10
2000116c:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20001170:	c291                	beqz	a3,20001174 <dif_uart_configure+0x62>
20001172:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001174:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001176:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001178:	e219                	bnez	a2,2000117e <dif_uart_configure+0x6c>
2000117a:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
2000117e:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001180:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001182:	400c                	lw	a1,0(s0)
20001184:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001186:	0005a223          	sw	zero,4(a1)
2000118a:	a011                	j	2000118e <dif_uart_configure+0x7c>
2000118c:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
2000118e:	4492                	lw	s1,4(sp)
20001190:	4422                	lw	s0,8(sp)
20001192:	40b2                	lw	ra,12(sp)
20001194:	0141                	addi	sp,sp,16
20001196:	8082                	ret

20001198 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001198:	1141                	addi	sp,sp,-16
2000119a:	c606                	sw	ra,12(sp)
2000119c:	c422                	sw	s0,8(sp)
2000119e:	c226                	sw	s1,4(sp)
200011a0:	84aa                	mv	s1,a0
200011a2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
200011a4:	c09d                	beqz	s1,200011ca <dif_uart_irq_is_pending+0x32>
200011a6:	8432                	mv	s0,a2
200011a8:	c20d                	beqz	a2,200011ca <dif_uart_irq_is_pending+0x32>
200011aa:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200011ac:	852e                	mv	a0,a1
200011ae:	85b2                	mv	a1,a2
200011b0:	2015                	jal	200011d4 <uart_irq_offset_get>
200011b2:	85aa                	mv	a1,a0
200011b4:	4505                	li	a0,1
200011b6:	c991                	beqz	a1,200011ca <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
200011b8:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011ba:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
200011bc:	4602                	lw	a2,0(sp)
200011be:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200011c0:	00c5d5b3          	srl	a1,a1,a2
200011c4:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
200011c6:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
200011ca:	4492                	lw	s1,4(sp)
200011cc:	4422                	lw	s0,8(sp)
200011ce:	40b2                	lw	ra,12(sp)
200011d0:	0141                	addi	sp,sp,16
200011d2:	8082                	ret

200011d4 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
200011d4:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
200011d6:	00a66563          	bltu	a2,a0,200011e0 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
200011da:	c188                	sw	a0,0(a1)
200011dc:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
200011de:	8082                	ret
200011e0:	4501                	li	a0,0
200011e2:	8082                	ret

200011e4 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
200011e4:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
200011e6:	c606                	sw	ra,12(sp)
200011e8:	c422                	sw	s0,8(sp)
200011ea:	c10d                	beqz	a0,2000120c <dif_uart_irq_acknowledge+0x28>
200011ec:	842a                	mv	s0,a0
200011ee:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200011f0:	852e                	mv	a0,a1
200011f2:	85b2                	mv	a1,a2
200011f4:	37c5                	jal	200011d4 <uart_irq_offset_get>
200011f6:	85aa                	mv	a1,a0
200011f8:	4505                	li	a0,1
200011fa:	c991                	beqz	a1,2000120e <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200011fc:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
200011fe:	4010                	lw	a2,0(s0)
20001200:	4501                	li	a0,0
20001202:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001204:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001208:	c20c                	sw	a1,0(a2)
2000120a:	a011                	j	2000120e <dif_uart_irq_acknowledge+0x2a>
2000120c:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
2000120e:	4422                	lw	s0,8(sp)
20001210:	40b2                	lw	ra,12(sp)
20001212:	0141                	addi	sp,sp,16
20001214:	8082                	ret

20001216 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001216:	c911                	beqz	a0,2000122a <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001218:	c581                	beqz	a1,20001220 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000121a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000121c:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
2000121e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001220:	410c                	lw	a1,0(a0)
20001222:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001224:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001228:	8082                	ret
2000122a:	4509                	li	a0,2
2000122c:	8082                	ret

2000122e <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
2000122e:	862a                	mv	a2,a0
20001230:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20001232:	c611                	beqz	a2,2000123e <dif_uart_irq_restore_all+0x10>
20001234:	c589                	beqz	a1,2000123e <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001236:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001238:	4210                	lw	a2,0(a2)
2000123a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000123c:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
2000123e:	8082                	ret

20001240 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20001240:	1141                	addi	sp,sp,-16
20001242:	c606                	sw	ra,12(sp)
20001244:	c422                	sw	s0,8(sp)
20001246:	c226                	sw	s1,4(sp)
20001248:	84aa                	mv	s1,a0
2000124a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
2000124c:	c485                	beqz	s1,20001274 <dif_uart_irq_get_enabled+0x34>
2000124e:	8432                	mv	s0,a2
20001250:	c215                	beqz	a2,20001274 <dif_uart_irq_get_enabled+0x34>
20001252:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001254:	852e                	mv	a0,a1
20001256:	85b2                	mv	a1,a2
20001258:	3fb5                	jal	200011d4 <uart_irq_offset_get>
2000125a:	85aa                	mv	a1,a0
2000125c:	4505                	li	a0,1
2000125e:	c999                	beqz	a1,20001274 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001260:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001262:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001264:	4602                	lw	a2,0(sp)
20001266:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001268:	00c5d5b3          	srl	a1,a1,a2
2000126c:	8985                	andi	a1,a1,1
2000126e:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20001272:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001274:	4492                	lw	s1,4(sp)
20001276:	4422                	lw	s0,8(sp)
20001278:	40b2                	lw	ra,12(sp)
2000127a:	0141                	addi	sp,sp,16
2000127c:	8082                	ret

2000127e <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
2000127e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20001280:	c606                	sw	ra,12(sp)
20001282:	c422                	sw	s0,8(sp)
20001284:	c226                	sw	s1,4(sp)
20001286:	c91d                	beqz	a0,200012bc <dif_uart_irq_set_enabled+0x3e>
20001288:	8432                	mv	s0,a2
2000128a:	84aa                	mv	s1,a0
2000128c:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000128e:	852e                	mv	a0,a1
20001290:	85b2                	mv	a1,a2
20001292:	3789                	jal	200011d4 <uart_irq_offset_get>
20001294:	85aa                	mv	a1,a0
20001296:	4505                	li	a0,1
20001298:	c19d                	beqz	a1,200012be <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000129a:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000129c:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
2000129e:	4682                	lw	a3,0(sp)
200012a0:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
200012a2:	00143713          	seqz	a4,s0
200012a6:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200012a8:	00d797b3          	sll	a5,a5,a3
200012ac:	fff7c793          	not	a5,a5
200012b0:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200012b2:	00d716b3          	sll	a3,a4,a3
200012b6:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200012b8:	c1d0                	sw	a2,4(a1)
200012ba:	a011                	j	200012be <dif_uart_irq_set_enabled+0x40>
200012bc:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200012be:	4492                	lw	s1,4(sp)
200012c0:	4422                	lw	s0,8(sp)
200012c2:	40b2                	lw	ra,12(sp)
200012c4:	0141                	addi	sp,sp,16
200012c6:	8082                	ret

200012c8 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200012c8:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200012ca:	c606                	sw	ra,12(sp)
200012cc:	c422                	sw	s0,8(sp)
200012ce:	c10d                	beqz	a0,200012f0 <dif_uart_irq_force+0x28>
200012d0:	842a                	mv	s0,a0
200012d2:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200012d4:	852e                	mv	a0,a1
200012d6:	85b2                	mv	a1,a2
200012d8:	3df5                	jal	200011d4 <uart_irq_offset_get>
200012da:	85aa                	mv	a1,a0
200012dc:	4505                	li	a0,1
200012de:	c991                	beqz	a1,200012f2 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200012e0:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
200012e2:	4010                	lw	a2,0(s0)
200012e4:	4501                	li	a0,0
200012e6:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200012e8:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012ec:	c60c                	sw	a1,8(a2)
200012ee:	a011                	j	200012f2 <dif_uart_irq_force+0x2a>
200012f0:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
200012f2:	4422                	lw	s0,8(sp)
200012f4:	40b2                	lw	ra,12(sp)
200012f6:	0141                	addi	sp,sp,16
200012f8:	8082                	ret

200012fa <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200012fa:	cd09                	beqz	a0,20001314 <dif_uart_watermark_rx_set+0x1a>
200012fc:	4691                	li	a3,4
200012fe:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001300:	00b6eb63          	bltu	a3,a1,20001316 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001304:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001306:	4d54                	lw	a3,28(a0)
20001308:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
2000130a:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
2000130c:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000130e:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001310:	cd4c                	sw	a1,28(a0)
20001312:	a011                	j	20001316 <dif_uart_watermark_rx_set+0x1c>
20001314:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001316:	8532                	mv	a0,a2
20001318:	8082                	ret

2000131a <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
2000131a:	cd11                	beqz	a0,20001336 <dif_uart_watermark_tx_set+0x1c>
2000131c:	468d                	li	a3,3
2000131e:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001320:	00b6ec63          	bltu	a3,a1,20001338 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001324:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001326:	4d54                	lw	a3,28(a0)
20001328:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
2000132a:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000132c:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001330:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001332:	cd4c                	sw	a1,28(a0)
20001334:	a011                	j	20001338 <dif_uart_watermark_tx_set+0x1e>
20001336:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001338:	8532                	mv	a0,a2
2000133a:	8082                	ret

2000133c <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
2000133c:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
2000133e:	c51d                	beqz	a0,2000136c <dif_uart_bytes_send+0x30>
20001340:	c595                	beqz	a1,2000136c <dif_uart_bytes_send+0x30>
20001342:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001344:	c20d                	beqz	a2,20001366 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001346:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000134a:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000134e:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001350:	eb19                	bnez	a4,20001366 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20001352:	00f58733          	add	a4,a1,a5
20001356:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
2000135a:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000135c:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001360:	fef613e3          	bne	a2,a5,20001346 <dif_uart_bytes_send+0xa>
20001364:	87b2                	mv	a5,a2
20001366:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001368:	c291                	beqz	a3,2000136c <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
2000136a:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
2000136c:	853a                	mv	a0,a4
2000136e:	8082                	ret

20001370 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001370:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20001372:	c515                	beqz	a0,2000139e <dif_uart_bytes_receive+0x2e>
20001374:	c60d                	beqz	a2,2000139e <dif_uart_bytes_receive+0x2e>
20001376:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001378:	cd99                	beqz	a1,20001396 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
2000137a:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000137c:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000137e:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001382:	eb91                	bnez	a5,20001396 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001384:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001386:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
2000138a:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000138c:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001390:	ff0595e3          	bne	a1,a6,2000137a <dif_uart_bytes_receive+0xa>
20001394:	882e                	mv	a6,a1
20001396:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001398:	c299                	beqz	a3,2000139e <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
2000139a:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
2000139e:	853a                	mv	a0,a4
200013a0:	8082                	ret

200013a2 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
200013a2:	cd19                	beqz	a0,200013c0 <dif_uart_byte_send_polled+0x1e>
200013a4:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013a6:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200013a8:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
200013aa:	fef5                	bnez	a3,200013a6 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013ac:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200013ae:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200013b0:	e299                	bnez	a3,200013b6 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013b2:	ce0c                	sw	a1,24(a2)
200013b4:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200013b6:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200013b8:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200013ba:	dd75                	beqz	a0,200013b6 <dif_uart_byte_send_polled+0x14>
200013bc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
200013be:	8082                	ret
200013c0:	4509                	li	a0,2
200013c2:	8082                	ret

200013c4 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
200013c4:	862a                	mv	a2,a0
200013c6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
200013c8:	c205                	beqz	a2,200013e8 <dif_uart_byte_receive_polled+0x24>
200013ca:	cd99                	beqz	a1,200013e8 <dif_uart_byte_receive_polled+0x24>
200013cc:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013ce:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200013d0:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200013d4:	fd6d                	bnez	a0,200013ce <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013d6:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200013d8:	02057693          	andi	a3,a0,32
200013dc:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200013de:	e689                	bnez	a3,200013e8 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013e0:	4a50                	lw	a2,20(a2)
200013e2:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200013e4:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
200013e8:	8082                	ret

200013ea <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200013ea:	862a                	mv	a2,a0
200013ec:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
200013ee:	ca09                	beqz	a2,20001400 <dif_uart_rx_bytes_available+0x16>
200013f0:	c981                	beqz	a1,20001400 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200013f2:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013f4:	5110                	lw	a2,32(a0)
200013f6:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200013f8:	8241                	srli	a2,a2,0x10
200013fa:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
200013fe:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001400:	8082                	ret

20001402 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001402:	862a                	mv	a2,a0
20001404:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001406:	ce01                	beqz	a2,2000141e <dif_uart_tx_bytes_available+0x1c>
20001408:	c999                	beqz	a1,2000141e <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000140a:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000140c:	5110                	lw	a2,32(a0)
2000140e:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001410:	03f67613          	andi	a2,a2,63
20001414:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001418:	40c68633          	sub	a2,a3,a2
2000141c:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
2000141e:	8082                	ret

20001420 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001420:	c11d                	beqz	a0,20001446 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001422:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001424:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001426:	ffd5f693          	andi	a3,a1,-3
2000142a:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
2000142e:	fff58713          	addi	a4,a1,-1
20001432:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001434:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001438:	00f77463          	bgeu	a4,a5,20001440 <dif_uart_fifo_reset+0x20>
2000143c:	0025e593          	ori	a1,a1,2
20001440:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001442:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001444:	8082                	ret
20001446:	4509                	li	a0,2
20001448:	8082                	ret

2000144a <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
2000144a:	c515                	beqz	a0,20001476 <dif_uart_loopback_set+0x2c>
2000144c:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
2000144e:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001450:	0015b593          	seqz	a1,a1
20001454:	4715                	li	a4,5
20001456:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000145a:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
2000145c:	00163613          	seqz	a2,a2
20001460:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001462:	00b797b3          	sll	a5,a5,a1
20001466:	fff7c793          	not	a5,a5
2000146a:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000146c:	00b615b3          	sll	a1,a2,a1
20001470:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001472:	c54c                	sw	a1,12(a0)
20001474:	a011                	j	20001478 <dif_uart_loopback_set+0x2e>
20001476:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001478:	8536                	mv	a0,a3
2000147a:	8082                	ret

2000147c <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
2000147c:	862a                	mv	a2,a0
2000147e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001480:	ca11                	beqz	a2,20001494 <dif_uart_enable_rx_timeout+0x18>
20001482:	0185d693          	srli	a3,a1,0x18
20001486:	e699                	bnez	a3,20001494 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001488:	4210                	lw	a2,0(a2)
2000148a:	4501                	li	a0,0
2000148c:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001490:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001492:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001494:	8082                	ret

20001496 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001496:	c511                	beqz	a0,200014a2 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001498:	410c                	lw	a1,0(a0)
2000149a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000149c:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
200014a0:	8082                	ret
200014a2:	4509                	li	a0,2
200014a4:	8082                	ret

200014a6 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
200014a6:	86aa                	mv	a3,a0
200014a8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
200014aa:	ce99                	beqz	a3,200014c8 <dif_uart_get_rx_timeout+0x22>
200014ac:	cd91                	beqz	a1,200014c8 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
200014ae:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200014b0:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
200014b2:	fff6c513          	not	a0,a3
200014b6:	817d                	srli	a0,a0,0x1f
200014b8:	c188                	sw	a0,0(a1)
200014ba:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
200014bc:	c611                	beqz	a2,200014c8 <dif_uart_get_rx_timeout+0x22>
200014be:	010005b7          	lui	a1,0x1000
200014c2:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200014c4:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
200014c6:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
200014c8:	8082                	ret

200014ca <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200014ca:	88aa                	mv	a7,a0
200014cc:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200014ce:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200014d0:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200014d2:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200014d4:	20069963          	bnez	a3,200016e6 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200014d8:	200026b7          	lui	a3,0x20002
200014dc:	abc68693          	addi	a3,a3,-1348 # 20001abc <__clz_tab>
200014e0:	0cc5f063          	bgeu	a1,a2,200015a0 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200014e4:	6741                	lui	a4,0x10
200014e6:	0ae67663          	bgeu	a2,a4,20001592 <__udivdi3+0xc8>
200014ea:	0ff00713          	li	a4,255
200014ee:	00c73733          	sltu	a4,a4,a2
200014f2:	070e                	slli	a4,a4,0x3
200014f4:	00e65533          	srl	a0,a2,a4
200014f8:	96aa                	add	a3,a3,a0
200014fa:	0006c683          	lbu	a3,0(a3)
200014fe:	02000513          	li	a0,32
20001502:	9736                	add	a4,a4,a3
20001504:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001508:	00e50c63          	beq	a0,a4,20001520 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000150c:	00d797b3          	sll	a5,a5,a3
20001510:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001514:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001518:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
2000151c:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001520:	01085893          	srli	a7,a6,0x10
20001524:	0315d7b3          	divu	a5,a1,a7
20001528:	01081613          	slli	a2,a6,0x10
2000152c:	8241                	srli	a2,a2,0x10
2000152e:	01035713          	srli	a4,t1,0x10
20001532:	0315f6b3          	remu	a3,a1,a7
20001536:	853e                	mv	a0,a5
20001538:	02f605b3          	mul	a1,a2,a5
2000153c:	06c2                	slli	a3,a3,0x10
2000153e:	8f55                	or	a4,a4,a3
20001540:	00b77c63          	bgeu	a4,a1,20001558 <__udivdi3+0x8e>
20001544:	9742                	add	a4,a4,a6
20001546:	fff78513          	addi	a0,a5,-1
2000154a:	01076763          	bltu	a4,a6,20001558 <__udivdi3+0x8e>
2000154e:	00b77563          	bgeu	a4,a1,20001558 <__udivdi3+0x8e>
20001552:	ffe78513          	addi	a0,a5,-2
20001556:	9742                	add	a4,a4,a6
20001558:	8f0d                	sub	a4,a4,a1
2000155a:	031777b3          	remu	a5,a4,a7
2000155e:	0342                	slli	t1,t1,0x10
20001560:	01035313          	srli	t1,t1,0x10
20001564:	03175733          	divu	a4,a4,a7
20001568:	07c2                	slli	a5,a5,0x10
2000156a:	0067e333          	or	t1,a5,t1
2000156e:	02e606b3          	mul	a3,a2,a4
20001572:	863a                	mv	a2,a4
20001574:	00d37b63          	bgeu	t1,a3,2000158a <__udivdi3+0xc0>
20001578:	9342                	add	t1,t1,a6
2000157a:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000157e:	01036663          	bltu	t1,a6,2000158a <__udivdi3+0xc0>
20001582:	00d37463          	bgeu	t1,a3,2000158a <__udivdi3+0xc0>
20001586:	ffe70613          	addi	a2,a4,-2
2000158a:	0542                	slli	a0,a0,0x10
2000158c:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000158e:	4581                	li	a1,0
20001590:	a85d                	j	20001646 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001592:	01000537          	lui	a0,0x1000
20001596:	4741                	li	a4,16
20001598:	f4a66ee3          	bltu	a2,a0,200014f4 <__udivdi3+0x2a>
2000159c:	4761                	li	a4,24
2000159e:	bf99                	j	200014f4 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
200015a0:	e601                	bnez	a2,200015a8 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
200015a2:	4705                	li	a4,1
200015a4:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200015a8:	6741                	lui	a4,0x10
200015aa:	08e87f63          	bgeu	a6,a4,20001648 <__udivdi3+0x17e>
200015ae:	0ff00713          	li	a4,255
200015b2:	01077363          	bgeu	a4,a6,200015b8 <__udivdi3+0xee>
200015b6:	4521                	li	a0,8
200015b8:	00a85733          	srl	a4,a6,a0
200015bc:	96ba                	add	a3,a3,a4
200015be:	0006c703          	lbu	a4,0(a3)
200015c2:	02000613          	li	a2,32
200015c6:	972a                	add	a4,a4,a0
200015c8:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
200015cc:	08e61563          	bne	a2,a4,20001656 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
200015d0:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
200015d4:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
200015d6:	01085893          	srli	a7,a6,0x10
200015da:	01081613          	slli	a2,a6,0x10
200015de:	8241                	srli	a2,a2,0x10
200015e0:	01035713          	srli	a4,t1,0x10
200015e4:	0317f6b3          	remu	a3,a5,a7
200015e8:	0317d7b3          	divu	a5,a5,a7
200015ec:	06c2                	slli	a3,a3,0x10
200015ee:	8f55                	or	a4,a4,a3
200015f0:	02f60e33          	mul	t3,a2,a5
200015f4:	853e                	mv	a0,a5
200015f6:	01c77c63          	bgeu	a4,t3,2000160e <__udivdi3+0x144>
200015fa:	9742                	add	a4,a4,a6
200015fc:	fff78513          	addi	a0,a5,-1
20001600:	01076763          	bltu	a4,a6,2000160e <__udivdi3+0x144>
20001604:	01c77563          	bgeu	a4,t3,2000160e <__udivdi3+0x144>
20001608:	ffe78513          	addi	a0,a5,-2
2000160c:	9742                	add	a4,a4,a6
2000160e:	41c70733          	sub	a4,a4,t3
20001612:	031777b3          	remu	a5,a4,a7
20001616:	0342                	slli	t1,t1,0x10
20001618:	01035313          	srli	t1,t1,0x10
2000161c:	03175733          	divu	a4,a4,a7
20001620:	07c2                	slli	a5,a5,0x10
20001622:	0067e333          	or	t1,a5,t1
20001626:	02e606b3          	mul	a3,a2,a4
2000162a:	863a                	mv	a2,a4
2000162c:	00d37b63          	bgeu	t1,a3,20001642 <__udivdi3+0x178>
20001630:	9342                	add	t1,t1,a6
20001632:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001636:	01036663          	bltu	t1,a6,20001642 <__udivdi3+0x178>
2000163a:	00d37463          	bgeu	t1,a3,20001642 <__udivdi3+0x178>
2000163e:	ffe70613          	addi	a2,a4,-2
20001642:	0542                	slli	a0,a0,0x10
20001644:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001646:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001648:	01000737          	lui	a4,0x1000
2000164c:	4541                	li	a0,16
2000164e:	f6e865e3          	bltu	a6,a4,200015b8 <__udivdi3+0xee>
20001652:	4561                	li	a0,24
20001654:	b795                	j	200015b8 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001656:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
2000165a:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
2000165e:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001662:	00d797b3          	sll	a5,a5,a3
20001666:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
2000166a:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000166e:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001672:	0315f733          	remu	a4,a1,a7
20001676:	01081793          	slli	a5,a6,0x10
2000167a:	83c1                	srli	a5,a5,0x10
2000167c:	01065513          	srli	a0,a2,0x10
20001680:	0315d5b3          	divu	a1,a1,a7
20001684:	0742                	slli	a4,a4,0x10
20001686:	8f49                	or	a4,a4,a0
20001688:	02b786b3          	mul	a3,a5,a1
2000168c:	852e                	mv	a0,a1
2000168e:	00d77c63          	bgeu	a4,a3,200016a6 <__udivdi3+0x1dc>
20001692:	9742                	add	a4,a4,a6
20001694:	fff58513          	addi	a0,a1,-1 # ffffff <test_main.kLogFields.21+0xfefe97>
20001698:	01076763          	bltu	a4,a6,200016a6 <__udivdi3+0x1dc>
2000169c:	00d77563          	bgeu	a4,a3,200016a6 <__udivdi3+0x1dc>
200016a0:	ffe58513          	addi	a0,a1,-2
200016a4:	9742                	add	a4,a4,a6
200016a6:	40d706b3          	sub	a3,a4,a3
200016aa:	0316f733          	remu	a4,a3,a7
200016ae:	0642                	slli	a2,a2,0x10
200016b0:	8241                	srli	a2,a2,0x10
200016b2:	0316d6b3          	divu	a3,a3,a7
200016b6:	0742                	slli	a4,a4,0x10
200016b8:	02d788b3          	mul	a7,a5,a3
200016bc:	00c767b3          	or	a5,a4,a2
200016c0:	8736                	mv	a4,a3
200016c2:	0117fc63          	bgeu	a5,a7,200016da <__udivdi3+0x210>
200016c6:	97c2                	add	a5,a5,a6
200016c8:	fff68713          	addi	a4,a3,-1
200016cc:	0107e763          	bltu	a5,a6,200016da <__udivdi3+0x210>
200016d0:	0117f563          	bgeu	a5,a7,200016da <__udivdi3+0x210>
200016d4:	ffe68713          	addi	a4,a3,-2
200016d8:	97c2                	add	a5,a5,a6
200016da:	01051593          	slli	a1,a0,0x10
200016de:	411787b3          	sub	a5,a5,a7
200016e2:	8dd9                	or	a1,a1,a4
200016e4:	bdcd                	j	200015d6 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
200016e6:	14d5e263          	bltu	a1,a3,2000182a <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200016ea:	6741                	lui	a4,0x10
200016ec:	02e6ff63          	bgeu	a3,a4,2000172a <__udivdi3+0x260>
200016f0:	0ff00713          	li	a4,255
200016f4:	00d735b3          	sltu	a1,a4,a3
200016f8:	058e                	slli	a1,a1,0x3
200016fa:	20002737          	lui	a4,0x20002
200016fe:	00b6d533          	srl	a0,a3,a1
20001702:	abc70713          	addi	a4,a4,-1348 # 20001abc <__clz_tab>
20001706:	972a                	add	a4,a4,a0
20001708:	00074703          	lbu	a4,0(a4)
2000170c:	02000513          	li	a0,32
20001710:	972e                	add	a4,a4,a1
20001712:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001716:	02e51163          	bne	a0,a4,20001738 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
2000171a:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
2000171c:	f2f6e5e3          	bltu	a3,a5,20001646 <__udivdi3+0x17c>
20001720:	00c8b533          	sltu	a0,a7,a2
20001724:	00154513          	xori	a0,a0,1
20001728:	bf39                	j	20001646 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
2000172a:	01000737          	lui	a4,0x1000
2000172e:	45c1                	li	a1,16
20001730:	fce6e5e3          	bltu	a3,a4,200016fa <__udivdi3+0x230>
20001734:	45e1                	li	a1,24
20001736:	b7d1                	j	200016fa <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001738:	00e65333          	srl	t1,a2,a4
2000173c:	00b696b3          	sll	a3,a3,a1
20001740:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001744:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001748:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
2000174c:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001750:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001754:	00b797b3          	sll	a5,a5,a1
20001758:	00e8d733          	srl	a4,a7,a4
2000175c:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001760:	01031793          	slli	a5,t1,0x10
20001764:	83c1                	srli	a5,a5,0x10
20001766:	01085713          	srli	a4,a6,0x10
2000176a:	02a65633          	divu	a2,a2,a0
2000176e:	06c2                	slli	a3,a3,0x10
20001770:	8f55                	or	a4,a4,a3
20001772:	02c78f33          	mul	t5,a5,a2
20001776:	8e32                	mv	t3,a2
20001778:	01e77c63          	bgeu	a4,t5,20001790 <__udivdi3+0x2c6>
2000177c:	971a                	add	a4,a4,t1
2000177e:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001782:	00676763          	bltu	a4,t1,20001790 <__udivdi3+0x2c6>
20001786:	01e77563          	bgeu	a4,t5,20001790 <__udivdi3+0x2c6>
2000178a:	ffe60e13          	addi	t3,a2,-2
2000178e:	971a                	add	a4,a4,t1
20001790:	41e70733          	sub	a4,a4,t5
20001794:	02a776b3          	remu	a3,a4,a0
20001798:	02a75733          	divu	a4,a4,a0
2000179c:	06c2                	slli	a3,a3,0x10
2000179e:	02e78633          	mul	a2,a5,a4
200017a2:	01081793          	slli	a5,a6,0x10
200017a6:	83c1                	srli	a5,a5,0x10
200017a8:	8fd5                	or	a5,a5,a3
200017aa:	86ba                	mv	a3,a4
200017ac:	00c7fc63          	bgeu	a5,a2,200017c4 <__udivdi3+0x2fa>
200017b0:	979a                	add	a5,a5,t1
200017b2:	fff70693          	addi	a3,a4,-1 # ffffff <test_main.kLogFields.21+0xfefe97>
200017b6:	0067e763          	bltu	a5,t1,200017c4 <__udivdi3+0x2fa>
200017ba:	00c7f563          	bgeu	a5,a2,200017c4 <__udivdi3+0x2fa>
200017be:	ffe70693          	addi	a3,a4,-2
200017c2:	979a                	add	a5,a5,t1
200017c4:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200017c8:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017ca:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200017cc:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
200017d0:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017d4:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200017d6:	00def6b3          	and	a3,t4,a3
200017da:	01055613          	srli	a2,a0,0x10
200017de:	010ede93          	srli	t4,t4,0x10
200017e2:	02d80333          	mul	t1,a6,a3
200017e6:	02d606b3          	mul	a3,a2,a3
200017ea:	01035713          	srli	a4,t1,0x10
200017ee:	03d80833          	mul	a6,a6,t4
200017f2:	9836                	add	a6,a6,a3
200017f4:	9742                	add	a4,a4,a6
200017f6:	03d60633          	mul	a2,a2,t4
200017fa:	00d77363          	bgeu	a4,a3,20001800 <__udivdi3+0x336>
200017fe:	9672                	add	a2,a2,t3
20001800:	01075693          	srli	a3,a4,0x10
20001804:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001806:	02c7e063          	bltu	a5,a2,20001826 <__udivdi3+0x35c>
2000180a:	d8c792e3          	bne	a5,a2,2000158e <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000180e:	67c1                	lui	a5,0x10
20001810:	17fd                	addi	a5,a5,-1
20001812:	8f7d                	and	a4,a4,a5
20001814:	0742                	slli	a4,a4,0x10
20001816:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
2000181a:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000181e:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001820:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001822:	e2e8f2e3          	bgeu	a7,a4,20001646 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001826:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001828:	b39d                	j	2000158e <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
2000182a:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
2000182c:	4501                	li	a0,0
2000182e:	bd21                	j	20001646 <__udivdi3+0x17c>
