
sw/device/tests/dif_plic_smoketest_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000e0  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001c16  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000df5  20001d98  20001d98  00002d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20002b90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000010  10000008  20002b98  00004008  2**2
                  ALLOC
  8 .logs.fields  00000294  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007bd7  00000000  00000000  000042c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000165a  00000000  00000000  0000be99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000d4f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004170  00000000  00000000  0000d58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003aae  00000000  00000000  000116fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c8  00000000  00000000  000151a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004100  00000000  00000000  00015471  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000007c0  00000000  00000000  00019574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	ff058593          	addi	a1,a1,-16 # 10000018 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2899                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2091                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00003617          	auipc	a2,0x3
20000054:	b4060613          	addi	a2,a2,-1216 # 20002b90 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2889                	jal	200000aa <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	7a6010ef          	jal	ra,20001824 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	4240106f          	j	200014a6 <abort>

20000086 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000086:	00b57e63          	bgeu	a0,a1,200000a2 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
2000008a:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008e:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000092:	00029b63          	bnez	t0,200000a8 <L_clear_error>

20000096 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000096:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
2000009a:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009c:	feb56de3          	bltu	a0,a1,20000096 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
200000a0:	8082                	ret

200000a2 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a2:	00b51363          	bne	a0,a1,200000a8 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a6:	8082                	ret

200000a8 <L_clear_error>:
	...

200000aa <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000aa:	02b57963          	bgeu	a0,a1,200000dc <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ae:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b2:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b6:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000ba:	02029463          	bnez	t0,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000be:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c2:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c6:	0062ee63          	bltu	t0,t1,200000e2 <L_copy_error>

200000ca <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000ca:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000ce:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000d0:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d4:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d6:	feb56ae3          	bltu	a0,a1,200000ca <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000da:	8082                	ret

200000dc <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000dc:	00b51363          	bne	a0,a1,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000e0:	8082                	ret

200000e2 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	4680106f          	j	20001568 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	5a00106f          	j	200016ac <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	5e80106f          	j	20001704 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	0540006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:74
 * Handles all peripheral interrupts on Ibex. PLIC asserts an external interrupt
 * line to the CPU, which results in a call to this handler. This handler
 * overrides the default implementation, and prototype for this handler must
 * include appropriate attributes.
 */
void handler_irq_external(void) {
20000180:	7159                	addi	sp,sp,-112
20000182:	d686                	sw	ra,108(sp)
20000184:	d496                	sw	t0,104(sp)
20000186:	d29a                	sw	t1,100(sp)
20000188:	d09e                	sw	t2,96(sp)
2000018a:	cea2                	sw	s0,92(sp)
2000018c:	cca6                	sw	s1,88(sp)
2000018e:	caaa                	sw	a0,84(sp)
20000190:	c8ae                	sw	a1,80(sp)
20000192:	c6b2                	sw	a2,76(sp)
20000194:	c4b6                	sw	a3,72(sp)
20000196:	c2ba                	sw	a4,68(sp)
20000198:	c0be                	sw	a5,64(sp)
2000019a:	de42                	sw	a6,60(sp)
2000019c:	dc46                	sw	a7,56(sp)
2000019e:	da4a                	sw	s2,52(sp)
200001a0:	d872                	sw	t3,48(sp)
200001a2:	d676                	sw	t4,44(sp)
200001a4:	d47a                	sw	t5,40(sp)
200001a6:	d27e                	sw	t6,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:77
  // Claim the IRQ by reading the Ibex specific CC register.
  dif_plic_irq_id_t interrupt_id;
  CHECK(dif_plic_irq_claim(&plic0, kPlicTarget, &interrupt_id) == kDifPlicOk,
200001a8:	f0000517          	auipc	a0,0xf0000
200001ac:	e6050513          	addi	a0,a0,-416 # 10000008 <_data_end>
200001b0:	0070                	addi	a2,sp,12
200001b2:	4581                	li	a1,0
200001b4:	45f000ef          	jal	ra,20000e12 <dif_plic_irq_claim>
200001b8:	00002497          	auipc	s1,0x2
200001bc:	27048493          	addi	s1,s1,624 # 20002428 <kDeviceLogBypassUartAddress>
200001c0:	cd05                	beqz	a0,200001f8 <handler_irq_external+0x78>
200001c2:	4088                	lw	a0,0(s1)
200001c4:	c909                	beqz	a0,200001d6 <handler_irq_external+0x56>
200001c6:	e0010517          	auipc	a0,0xe0010
200001ca:	e3a50513          	addi	a0,a0,-454 # 10000 <_dv_log_offset>
200001ce:	4581                	li	a1,0
200001d0:	55f000ef          	jal	ra,20000f2e <base_log_internal_dv>
200001d4:	a829                	j	200001ee <handler_irq_external+0x6e>
200001d6:	00002597          	auipc	a1,0x2
200001da:	bc258593          	addi	a1,a1,-1086 # 20001d98 <__udivdi3+0x368>
200001de:	0800                	addi	s0,sp,16
200001e0:	4651                	li	a2,20
200001e2:	8522                	mv	a0,s0
200001e4:	764010ef          	jal	ra,20001948 <memcpy>
200001e8:	8522                	mv	a0,s0
200001ea:	49b000ef          	jal	ra,20000e84 <base_log_internal_core>
200001ee:	6531                	lui	a0,0xc
200001f0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200001f4:	2b8010ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:82
        "ISR is not implemented!");

  // Check if the interrupted peripheral is UART.
  top_earlgrey_plic_peripheral_t peripheral_id =
      top_earlgrey_plic_interrupt_for_peripheral[interrupt_id];
200001f8:	4532                	lw	a0,12(sp)
200001fa:	00251593          	slli	a1,a0,0x2
200001fe:	00002617          	auipc	a2,0x2
20000202:	e9a60613          	addi	a2,a2,-358 # 20002098 <top_earlgrey_plic_interrupt_for_peripheral>
20000206:	95b2                	add	a1,a1,a2
20000208:	418c                	lw	a1,0(a1)
2000020a:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:83
  CHECK(peripheral_id == kTopEarlgreyPlicPeripheralUart0,
2000020c:	02c58e63          	beq	a1,a2,20000248 <handler_irq_external+0xc8>
20000210:	4088                	lw	a0,0(s1)
20000212:	c909                	beqz	a0,20000224 <handler_irq_external+0xa4>
20000214:	e0010517          	auipc	a0,0xe0010
20000218:	e0050513          	addi	a0,a0,-512 # 10014 <handler_irq_external.kLogFields.2>
2000021c:	4581                	li	a1,0
2000021e:	511000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000222:	a829                	j	2000023c <handler_irq_external+0xbc>
20000224:	00002597          	auipc	a1,0x2
20000228:	b8858593          	addi	a1,a1,-1144 # 20001dac <__udivdi3+0x37c>
2000022c:	0800                	addi	s0,sp,16
2000022e:	4651                	li	a2,20
20000230:	8522                	mv	a0,s0
20000232:	716010ef          	jal	ra,20001948 <memcpy>
20000236:	8522                	mv	a0,s0
20000238:	44d000ef          	jal	ra,20000e84 <base_log_internal_core>
2000023c:	6531                	lui	a0,0xc
2000023e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000242:	26a010ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:85
        "ISR interrupted peripheral is not UART!");
  handle_uart_isr(interrupt_id);
20000246:	4532                	lw	a0,12(sp)
20000248:	458d                	li	a1,3
handle_uart_isr():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:42
  switch (interrupt_id) {
2000024a:	02b50663          	beq	a0,a1,20000276 <handler_irq_external+0xf6>
2000024e:	4591                	li	a1,4
20000250:	04b51463          	bne	a0,a1,20000298 <handler_irq_external+0x118>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:44
      CHECK(!uart_rx_overflow_handled,
20000254:	f0000417          	auipc	s0,0xf0000
20000258:	dbc40413          	addi	s0,s0,-580 # 10000010 <uart_rx_overflow_handled>
2000025c:	00044503          	lbu	a0,0(s0)
20000260:	c959                	beqz	a0,200002f6 <handler_irq_external+0x176>
20000262:	4088                	lw	a0,0(s1)
20000264:	c53d                	beqz	a0,200002d2 <handler_irq_external+0x152>
20000266:	e0010517          	auipc	a0,0xe0010
2000026a:	dd650513          	addi	a0,a0,-554 # 1003c <handle_uart_isr.kLogFields>
2000026e:	4581                	li	a1,0
20000270:	4bf000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000274:	a8a5                	j	200002ec <handler_irq_external+0x16c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:51
      CHECK(!uart_tx_empty_handled,
20000276:	f0000417          	auipc	s0,0xf0000
2000027a:	d9b40413          	addi	s0,s0,-613 # 10000011 <uart_tx_empty_handled>
2000027e:	00044503          	lbu	a0,0(s0)
20000282:	c14d                	beqz	a0,20000324 <handler_irq_external+0x1a4>
20000284:	4088                	lw	a0,0(s1)
20000286:	cd2d                	beqz	a0,20000300 <handler_irq_external+0x180>
20000288:	e0010517          	auipc	a0,0xe0010
2000028c:	dc850513          	addi	a0,a0,-568 # 10050 <handle_uart_isr.kLogFields.9>
20000290:	4581                	li	a1,0
20000292:	49d000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000296:	a051                	j	2000031a <handler_irq_external+0x19a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:58
      LOG_FATAL("ISR is not implemented!");
20000298:	4088                	lw	a0,0(s1)
2000029a:	c909                	beqz	a0,200002ac <handler_irq_external+0x12c>
2000029c:	e0010517          	auipc	a0,0xe0010
200002a0:	dc850513          	addi	a0,a0,-568 # 10064 <handle_uart_isr.kLogFields.12>
200002a4:	4581                	li	a1,0
200002a6:	489000ef          	jal	ra,20000f2e <base_log_internal_dv>
200002aa:	a829                	j	200002c4 <handler_irq_external+0x144>
200002ac:	00002597          	auipc	a1,0x2
200002b0:	b5458593          	addi	a1,a1,-1196 # 20001e00 <kTestConfig+0x2c>
200002b4:	0800                	addi	s0,sp,16
200002b6:	4651                	li	a2,20
200002b8:	8522                	mv	a0,s0
200002ba:	68e010ef          	jal	ra,20001948 <memcpy>
200002be:	8522                	mv	a0,s0
200002c0:	3c5000ef          	jal	ra,20000e84 <base_log_internal_core>
200002c4:	6531                	lui	a0,0xc
200002c6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:59
      test_status_set(kTestStatusFailed);
200002ca:	1e2010ef          	jal	ra,200014ac <test_status_set>
200002ce:	4581                	li	a1,0
200002d0:	a8b1                	j	2000032c <handler_irq_external+0x1ac>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:44
      CHECK(!uart_rx_overflow_handled,
200002d2:	00002597          	auipc	a1,0x2
200002d6:	b0658593          	addi	a1,a1,-1274 # 20001dd8 <kTestConfig+0x4>
200002da:	01010913          	addi	s2,sp,16
200002de:	4651                	li	a2,20
200002e0:	854a                	mv	a0,s2
200002e2:	666010ef          	jal	ra,20001948 <memcpy>
200002e6:	854a                	mv	a0,s2
200002e8:	39d000ef          	jal	ra,20000e84 <base_log_internal_core>
200002ec:	6531                	lui	a0,0xc
200002ee:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200002f2:	1ba010ef          	jal	ra,200014ac <test_status_set>
200002f6:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:48
      uart_rx_overflow_handled = true;
200002f8:	00a40023          	sb	a0,0(s0)
200002fc:	458d                	li	a1,3
200002fe:	a03d                	j	2000032c <handler_irq_external+0x1ac>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:51
      CHECK(!uart_tx_empty_handled,
20000300:	00002597          	auipc	a1,0x2
20000304:	aec58593          	addi	a1,a1,-1300 # 20001dec <kTestConfig+0x18>
20000308:	01010913          	addi	s2,sp,16
2000030c:	4651                	li	a2,20
2000030e:	854a                	mv	a0,s2
20000310:	638010ef          	jal	ra,20001948 <memcpy>
20000314:	854a                	mv	a0,s2
20000316:	36f000ef          	jal	ra,20000e84 <base_log_internal_core>
2000031a:	6531                	lui	a0,0xc
2000031c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000320:	18c010ef          	jal	ra,200014ac <test_status_set>
20000324:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:55
      uart_tx_empty_handled = true;
20000326:	00a40023          	sb	a0,0(s0)
2000032a:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:62
  CHECK(dif_uart_irq_acknowledge(&uart0, uart_irq) == kDifUartOk,
2000032c:	f0000517          	auipc	a0,0xf0000
20000330:	ce050513          	addi	a0,a0,-800 # 1000000c <uart0>
20000334:	67e000ef          	jal	ra,200009b2 <dif_uart_irq_acknowledge>
20000338:	cd05                	beqz	a0,20000370 <handler_irq_external+0x1f0>
2000033a:	4088                	lw	a0,0(s1)
2000033c:	c909                	beqz	a0,2000034e <handler_irq_external+0x1ce>
2000033e:	e0010517          	auipc	a0,0xe0010
20000342:	d3a50513          	addi	a0,a0,-710 # 10078 <handle_uart_isr.kLogFields.15>
20000346:	4581                	li	a1,0
20000348:	3e7000ef          	jal	ra,20000f2e <base_log_internal_dv>
2000034c:	a829                	j	20000366 <handler_irq_external+0x1e6>
2000034e:	00002597          	auipc	a1,0x2
20000352:	ac658593          	addi	a1,a1,-1338 # 20001e14 <kTestConfig+0x40>
20000356:	0800                	addi	s0,sp,16
20000358:	4651                	li	a2,20
2000035a:	8522                	mv	a0,s0
2000035c:	5ec010ef          	jal	ra,20001948 <memcpy>
20000360:	8522                	mv	a0,s0
20000362:	323000ef          	jal	ra,20000e84 <base_log_internal_core>
20000366:	6531                	lui	a0,0xc
20000368:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000036c:	140010ef          	jal	ra,200014ac <test_status_set>
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:89

  // Complete the IRQ by writing the IRQ source to the Ibex specific CC
  // register.
  CHECK(dif_plic_irq_complete(&plic0, kPlicTarget, &interrupt_id) == kDifPlicOk,
20000370:	f0000517          	auipc	a0,0xf0000
20000374:	c9850513          	addi	a0,a0,-872 # 10000008 <_data_end>
20000378:	0070                	addi	a2,sp,12
2000037a:	4581                	li	a1,0
2000037c:	2ad000ef          	jal	ra,20000e28 <dif_plic_irq_complete>
20000380:	cd05                	beqz	a0,200003b8 <handler_irq_external+0x238>
20000382:	4088                	lw	a0,0(s1)
20000384:	c909                	beqz	a0,20000396 <handler_irq_external+0x216>
20000386:	e0010517          	auipc	a0,0xe0010
2000038a:	ca250513          	addi	a0,a0,-862 # 10028 <handler_irq_external.kLogFields.5>
2000038e:	4581                	li	a1,0
20000390:	39f000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000394:	a829                	j	200003ae <handler_irq_external+0x22e>
20000396:	00002597          	auipc	a1,0x2
2000039a:	a2a58593          	addi	a1,a1,-1494 # 20001dc0 <__udivdi3+0x390>
2000039e:	0800                	addi	s0,sp,16
200003a0:	4651                	li	a2,20
200003a2:	8522                	mv	a0,s0
200003a4:	5a4010ef          	jal	ra,20001948 <memcpy>
200003a8:	8522                	mv	a0,s0
200003aa:	2db000ef          	jal	ra,20000e84 <base_log_internal_core>
200003ae:	6531                	lui	a0,0xc
200003b0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200003b4:	0f8010ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:91
        "Unable to complete the IRQ request!");
}
200003b8:	5f92                	lw	t6,36(sp)
200003ba:	5f22                	lw	t5,40(sp)
200003bc:	5eb2                	lw	t4,44(sp)
200003be:	5e42                	lw	t3,48(sp)
200003c0:	5952                	lw	s2,52(sp)
200003c2:	58e2                	lw	a7,56(sp)
200003c4:	5872                	lw	a6,60(sp)
200003c6:	4786                	lw	a5,64(sp)
200003c8:	4716                	lw	a4,68(sp)
200003ca:	46a6                	lw	a3,72(sp)
200003cc:	4636                	lw	a2,76(sp)
200003ce:	45c6                	lw	a1,80(sp)
200003d0:	4556                	lw	a0,84(sp)
200003d2:	44e6                	lw	s1,88(sp)
200003d4:	4476                	lw	s0,92(sp)
200003d6:	5386                	lw	t2,96(sp)
200003d8:	5316                	lw	t1,100(sp)
200003da:	52a6                	lw	t0,104(sp)
200003dc:	50b6                	lw	ra,108(sp)
200003de:	6165                	addi	sp,sp,112
200003e0:	30200073          	mret

200003e4 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:191

const test_config_t kTestConfig = {
    .can_clobber_uart = true,
};

bool test_main(void) {
200003e4:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:193
  // Enable IRQs on Ibex
  irq_global_ctrl(true);
200003e6:	d606                	sw	ra,44(sp)
200003e8:	d422                	sw	s0,40(sp)
200003ea:	d226                	sw	s1,36(sp)
200003ec:	d04a                	sw	s2,32(sp)
200003ee:	4505                	li	a0,1
200003f0:	4405                	li	s0,1
200003f2:	5e8010ef          	jal	ra,200019da <irq_global_ctrl>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:194
  irq_external_ctrl(true);
200003f6:	4505                	li	a0,1
200003f8:	5f4010ef          	jal	ra,200019ec <irq_external_ctrl>
uart_initialise():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:94
  CHECK(dif_uart_init(
200003fc:	f0000597          	auipc	a1,0xf0000
20000400:	c1058593          	addi	a1,a1,-1008 # 1000000c <uart0>
20000404:	40000537          	lui	a0,0x40000
20000408:	21e1                	jal	200008d0 <dif_uart_init>
2000040a:	00002497          	auipc	s1,0x2
2000040e:	01e48493          	addi	s1,s1,30 # 20002428 <kDeviceLogBypassUartAddress>
20000412:	cd0d                	beqz	a0,2000044c <test_main+0x68>
20000414:	4088                	lw	a0,0(s1)
20000416:	c909                	beqz	a0,20000428 <test_main+0x44>
20000418:	e0010517          	auipc	a0,0xe0010
2000041c:	c7450513          	addi	a0,a0,-908 # 1008c <uart_initialise.kLogFields>
20000420:	4581                	li	a1,0
20000422:	30d000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000426:	a831                	j	20000442 <test_main+0x5e>
20000428:	00002597          	auipc	a1,0x2
2000042c:	a0058593          	addi	a1,a1,-1536 # 20001e28 <kTestConfig+0x54>
20000430:	00810913          	addi	s2,sp,8
20000434:	4651                	li	a2,20
20000436:	854a                	mv	a0,s2
20000438:	510010ef          	jal	ra,20001948 <memcpy>
2000043c:	854a                	mv	a0,s2
2000043e:	247000ef          	jal	ra,20000e84 <base_log_internal_core>
20000442:	6531                	lui	a0,0xc
20000444:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000448:	064010ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:99
  CHECK(dif_uart_configure(uart,
2000044c:	00002517          	auipc	a0,0x2
20000450:	fcc50513          	addi	a0,a0,-52 # 20002418 <kUartBaudrate>
20000454:	4108                	lw	a0,0(a0)
20000456:	00002597          	auipc	a1,0x2
2000045a:	fb258593          	addi	a1,a1,-78 # 20002408 <kClockFreqPeripheralHz>
2000045e:	418c                	lw	a1,0(a1)
20000460:	c42a                	sw	a0,8(sp)
20000462:	c62e                	sw	a1,12(sp)
20000464:	c822                	sw	s0,16(sp)
20000466:	ca22                	sw	s0,20(sp)
20000468:	f0000517          	auipc	a0,0xf0000
2000046c:	ba450513          	addi	a0,a0,-1116 # 1000000c <uart0>
20000470:	002c                	addi	a1,sp,8
20000472:	21b5                	jal	200008de <dif_uart_configure>
20000474:	cd05                	beqz	a0,200004ac <test_main+0xc8>
20000476:	4088                	lw	a0,0(s1)
20000478:	c909                	beqz	a0,2000048a <test_main+0xa6>
2000047a:	e0010517          	auipc	a0,0xe0010
2000047e:	c2650513          	addi	a0,a0,-986 # 100a0 <uart_initialise.kLogFields.19>
20000482:	4581                	li	a1,0
20000484:	2ab000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000488:	a829                	j	200004a2 <test_main+0xbe>
2000048a:	00002597          	auipc	a1,0x2
2000048e:	9b258593          	addi	a1,a1,-1614 # 20001e3c <kTestConfig+0x68>
20000492:	0020                	addi	s0,sp,8
20000494:	4651                	li	a2,20
20000496:	8522                	mv	a0,s0
20000498:	4b0010ef          	jal	ra,20001948 <memcpy>
2000049c:	8522                	mv	a0,s0
2000049e:	1e7000ef          	jal	ra,20000e84 <base_log_internal_core>
200004a2:	6531                	lui	a0,0xc
200004a4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004a8:	004010ef          	jal	ra,200014ac <test_status_set>
plic_initialise():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:110
  CHECK(dif_plic_init((dif_plic_params_t){.base_addr = base_addr}, plic) ==
200004ac:	f0000597          	auipc	a1,0xf0000
200004b0:	b5c58593          	addi	a1,a1,-1188 # 10000008 <_data_end>
200004b4:	41010537          	lui	a0,0x41010
200004b8:	7e0000ef          	jal	ra,20000c98 <dif_plic_init>
200004bc:	cd05                	beqz	a0,200004f4 <test_main+0x110>
200004be:	4088                	lw	a0,0(s1)
200004c0:	c909                	beqz	a0,200004d2 <test_main+0xee>
200004c2:	e0010517          	auipc	a0,0xe0010
200004c6:	bf250513          	addi	a0,a0,-1038 # 100b4 <plic_initialise.kLogFields>
200004ca:	4581                	li	a1,0
200004cc:	263000ef          	jal	ra,20000f2e <base_log_internal_dv>
200004d0:	a829                	j	200004ea <test_main+0x106>
200004d2:	00002597          	auipc	a1,0x2
200004d6:	97e58593          	addi	a1,a1,-1666 # 20001e50 <kTestConfig+0x7c>
200004da:	0020                	addi	s0,sp,8
200004dc:	4651                	li	a2,20
200004de:	8522                	mv	a0,s0
200004e0:	468010ef          	jal	ra,20001948 <memcpy>
200004e4:	8522                	mv	a0,s0
200004e6:	19f000ef          	jal	ra,20000e84 <base_log_internal_core>
200004ea:	6531                	lui	a0,0xc
200004ec:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004f0:	7bd000ef          	jal	ra,200014ac <test_status_set>
uart_configure_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:119
  CHECK(dif_uart_irq_set_enabled(&uart0, kDifUartIrqRxOverflow,
200004f4:	f0000517          	auipc	a0,0xf0000
200004f8:	b1850513          	addi	a0,a0,-1256 # 1000000c <uart0>
200004fc:	458d                	li	a1,3
200004fe:	4601                	li	a2,0
20000500:	23b1                	jal	20000a4c <dif_uart_irq_set_enabled>
20000502:	cd05                	beqz	a0,2000053a <test_main+0x156>
20000504:	4088                	lw	a0,0(s1)
20000506:	c909                	beqz	a0,20000518 <test_main+0x134>
20000508:	e0010517          	auipc	a0,0xe0010
2000050c:	bc050513          	addi	a0,a0,-1088 # 100c8 <uart_configure_irqs.kLogFields>
20000510:	4581                	li	a1,0
20000512:	21d000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000516:	a829                	j	20000530 <test_main+0x14c>
20000518:	00002597          	auipc	a1,0x2
2000051c:	94c58593          	addi	a1,a1,-1716 # 20001e64 <kTestConfig+0x90>
20000520:	0020                	addi	s0,sp,8
20000522:	4651                	li	a2,20
20000524:	8522                	mv	a0,s0
20000526:	422010ef          	jal	ra,20001948 <memcpy>
2000052a:	8522                	mv	a0,s0
2000052c:	159000ef          	jal	ra,20000e84 <base_log_internal_core>
20000530:	6531                	lui	a0,0xc
20000532:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000536:	777000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:122
  CHECK(dif_uart_irq_set_enabled(&uart0, kDifUartIrqTxEmpty,
2000053a:	f0000517          	auipc	a0,0xf0000
2000053e:	ad250513          	addi	a0,a0,-1326 # 1000000c <uart0>
20000542:	4589                	li	a1,2
20000544:	4601                	li	a2,0
20000546:	2319                	jal	20000a4c <dif_uart_irq_set_enabled>
20000548:	cd05                	beqz	a0,20000580 <test_main+0x19c>
2000054a:	4088                	lw	a0,0(s1)
2000054c:	c909                	beqz	a0,2000055e <test_main+0x17a>
2000054e:	e0010517          	auipc	a0,0xe0010
20000552:	b8e50513          	addi	a0,a0,-1138 # 100dc <uart_configure_irqs.kLogFields.24>
20000556:	4581                	li	a1,0
20000558:	1d7000ef          	jal	ra,20000f2e <base_log_internal_dv>
2000055c:	a829                	j	20000576 <test_main+0x192>
2000055e:	00002597          	auipc	a1,0x2
20000562:	91a58593          	addi	a1,a1,-1766 # 20001e78 <kTestConfig+0xa4>
20000566:	0020                	addi	s0,sp,8
20000568:	4651                	li	a2,20
2000056a:	8522                	mv	a0,s0
2000056c:	3dc010ef          	jal	ra,20001948 <memcpy>
20000570:	8522                	mv	a0,s0
20000572:	113000ef          	jal	ra,20000e84 <base_log_internal_core>
20000576:	6531                	lui	a0,0xc
20000578:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000057c:	731000ef          	jal	ra,200014ac <test_status_set>
plic_configure_irqs():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:132
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
20000580:	f0000517          	auipc	a0,0xf0000
20000584:	a8850513          	addi	a0,a0,-1400 # 10000008 <_data_end>
20000588:	4591                	li	a1,4
2000058a:	4605                	li	a2,1
2000058c:	7de000ef          	jal	ra,20000d6a <dif_plic_irq_set_trigger>
20000590:	cd05                	beqz	a0,200005c8 <test_main+0x1e4>
20000592:	4088                	lw	a0,0(s1)
20000594:	c909                	beqz	a0,200005a6 <test_main+0x1c2>
20000596:	e0010517          	auipc	a0,0xe0010
2000059a:	b5a50513          	addi	a0,a0,-1190 # 100f0 <plic_configure_irqs.kLogFields>
2000059e:	4581                	li	a1,0
200005a0:	18f000ef          	jal	ra,20000f2e <base_log_internal_dv>
200005a4:	a829                	j	200005be <test_main+0x1da>
200005a6:	00002597          	auipc	a1,0x2
200005aa:	8e658593          	addi	a1,a1,-1818 # 20001e8c <kTestConfig+0xb8>
200005ae:	0020                	addi	s0,sp,8
200005b0:	4651                	li	a2,20
200005b2:	8522                	mv	a0,s0
200005b4:	394010ef          	jal	ra,20001948 <memcpy>
200005b8:	8522                	mv	a0,s0
200005ba:	0cb000ef          	jal	ra,20000e84 <base_log_internal_core>
200005be:	6531                	lui	a0,0xc
200005c0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005c4:	6e9000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:135
  CHECK(dif_plic_irq_set_trigger(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
200005c8:	f0000517          	auipc	a0,0xf0000
200005cc:	a4050513          	addi	a0,a0,-1472 # 10000008 <_data_end>
200005d0:	458d                	li	a1,3
200005d2:	4605                	li	a2,1
200005d4:	796000ef          	jal	ra,20000d6a <dif_plic_irq_set_trigger>
200005d8:	cd05                	beqz	a0,20000610 <test_main+0x22c>
200005da:	4088                	lw	a0,0(s1)
200005dc:	c909                	beqz	a0,200005ee <test_main+0x20a>
200005de:	e0010517          	auipc	a0,0xe0010
200005e2:	b2650513          	addi	a0,a0,-1242 # 10104 <plic_configure_irqs.kLogFields.28>
200005e6:	4581                	li	a1,0
200005e8:	147000ef          	jal	ra,20000f2e <base_log_internal_dv>
200005ec:	a829                	j	20000606 <test_main+0x222>
200005ee:	00002597          	auipc	a1,0x2
200005f2:	8b258593          	addi	a1,a1,-1870 # 20001ea0 <kTestConfig+0xcc>
200005f6:	0020                	addi	s0,sp,8
200005f8:	4651                	li	a2,20
200005fa:	8522                	mv	a0,s0
200005fc:	34c010ef          	jal	ra,20001948 <memcpy>
20000600:	8522                	mv	a0,s0
20000602:	083000ef          	jal	ra,20000e84 <base_log_internal_core>
20000606:	6531                	lui	a0,0xc
20000608:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000060c:	6a1000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:140
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
20000610:	00002517          	auipc	a0,0x2
20000614:	96050513          	addi	a0,a0,-1696 # 20001f70 <kDifPlicMaxPriority>
20000618:	4100                	lw	s0,0(a0)
2000061a:	f0000517          	auipc	a0,0xf0000
2000061e:	9ee50513          	addi	a0,a0,-1554 # 10000008 <_data_end>
20000622:	4591                	li	a1,4
20000624:	8622                	mv	a2,s0
20000626:	784000ef          	jal	ra,20000daa <dif_plic_irq_set_priority>
2000062a:	cd0d                	beqz	a0,20000664 <test_main+0x280>
2000062c:	4088                	lw	a0,0(s1)
2000062e:	c909                	beqz	a0,20000640 <test_main+0x25c>
20000630:	e0010517          	auipc	a0,0xe0010
20000634:	ae850513          	addi	a0,a0,-1304 # 10118 <plic_configure_irqs.kLogFields.31>
20000638:	4581                	li	a1,0
2000063a:	0f5000ef          	jal	ra,20000f2e <base_log_internal_dv>
2000063e:	a831                	j	2000065a <test_main+0x276>
20000640:	00002597          	auipc	a1,0x2
20000644:	87458593          	addi	a1,a1,-1932 # 20001eb4 <kTestConfig+0xe0>
20000648:	00810913          	addi	s2,sp,8
2000064c:	4651                	li	a2,20
2000064e:	854a                	mv	a0,s2
20000650:	2f8010ef          	jal	ra,20001948 <memcpy>
20000654:	854a                	mv	a0,s2
20000656:	02f000ef          	jal	ra,20000e84 <base_log_internal_core>
2000065a:	6531                	lui	a0,0xc
2000065c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000660:	64d000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:144
  CHECK(dif_plic_irq_set_priority(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
20000664:	f0000517          	auipc	a0,0xf0000
20000668:	9a450513          	addi	a0,a0,-1628 # 10000008 <_data_end>
2000066c:	458d                	li	a1,3
2000066e:	8622                	mv	a2,s0
20000670:	73a000ef          	jal	ra,20000daa <dif_plic_irq_set_priority>
20000674:	cd05                	beqz	a0,200006ac <test_main+0x2c8>
20000676:	4088                	lw	a0,0(s1)
20000678:	c909                	beqz	a0,2000068a <test_main+0x2a6>
2000067a:	e0010517          	auipc	a0,0xe0010
2000067e:	ab250513          	addi	a0,a0,-1358 # 1012c <plic_configure_irqs.kLogFields.34>
20000682:	4581                	li	a1,0
20000684:	0ab000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000688:	a829                	j	200006a2 <test_main+0x2be>
2000068a:	00002597          	auipc	a1,0x2
2000068e:	83e58593          	addi	a1,a1,-1986 # 20001ec8 <kTestConfig+0xf4>
20000692:	0020                	addi	s0,sp,8
20000694:	4651                	li	a2,20
20000696:	8522                	mv	a0,s0
20000698:	2b0010ef          	jal	ra,20001948 <memcpy>
2000069c:	8522                	mv	a0,s0
2000069e:	7e6000ef          	jal	ra,20000e84 <base_log_internal_core>
200006a2:	6531                	lui	a0,0xc
200006a4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200006a8:	605000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:149
  CHECK(dif_plic_target_set_threshold(&plic0, kPlicTarget,
200006ac:	00002517          	auipc	a0,0x2
200006b0:	8c050513          	addi	a0,a0,-1856 # 20001f6c <kDifPlicMinPriority>
200006b4:	4110                	lw	a2,0(a0)
200006b6:	f0000517          	auipc	a0,0xf0000
200006ba:	95250513          	addi	a0,a0,-1710 # 10000008 <_data_end>
200006be:	4581                	li	a1,0
200006c0:	70a000ef          	jal	ra,20000dca <dif_plic_target_set_threshold>
200006c4:	cd05                	beqz	a0,200006fc <test_main+0x318>
200006c6:	4088                	lw	a0,0(s1)
200006c8:	c909                	beqz	a0,200006da <test_main+0x2f6>
200006ca:	e0010517          	auipc	a0,0xe0010
200006ce:	a7650513          	addi	a0,a0,-1418 # 10140 <plic_configure_irqs.kLogFields.37>
200006d2:	4581                	li	a1,0
200006d4:	05b000ef          	jal	ra,20000f2e <base_log_internal_dv>
200006d8:	a829                	j	200006f2 <test_main+0x30e>
200006da:	00002597          	auipc	a1,0x2
200006de:	80258593          	addi	a1,a1,-2046 # 20001edc <kTestConfig+0x108>
200006e2:	0020                	addi	s0,sp,8
200006e4:	4651                	li	a2,20
200006e6:	8522                	mv	a0,s0
200006e8:	260010ef          	jal	ra,20001948 <memcpy>
200006ec:	8522                	mv	a0,s0
200006ee:	796000ef          	jal	ra,20000e84 <base_log_internal_core>
200006f2:	6531                	lui	a0,0xc
200006f4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200006f8:	5b5000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:154
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0RxOverflow,
200006fc:	f0000517          	auipc	a0,0xf0000
20000700:	90c50513          	addi	a0,a0,-1780 # 10000008 <_data_end>
20000704:	4591                	li	a1,4
20000706:	4601                	li	a2,0
20000708:	4681                	li	a3,0
2000070a:	61a000ef          	jal	ra,20000d24 <dif_plic_irq_set_enabled>
2000070e:	cd05                	beqz	a0,20000746 <test_main+0x362>
20000710:	4088                	lw	a0,0(s1)
20000712:	c909                	beqz	a0,20000724 <test_main+0x340>
20000714:	e0010517          	auipc	a0,0xe0010
20000718:	a4050513          	addi	a0,a0,-1472 # 10154 <plic_configure_irqs.kLogFields.40>
2000071c:	4581                	li	a1,0
2000071e:	011000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000722:	a829                	j	2000073c <test_main+0x358>
20000724:	00001597          	auipc	a1,0x1
20000728:	7cc58593          	addi	a1,a1,1996 # 20001ef0 <kTestConfig+0x11c>
2000072c:	0020                	addi	s0,sp,8
2000072e:	4651                	li	a2,20
20000730:	8522                	mv	a0,s0
20000732:	216010ef          	jal	ra,20001948 <memcpy>
20000736:	8522                	mv	a0,s0
20000738:	74c000ef          	jal	ra,20000e84 <base_log_internal_core>
2000073c:	6531                	lui	a0,0xc
2000073e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000742:	56b000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:159
  CHECK(dif_plic_irq_set_enabled(plic, kTopEarlgreyPlicIrqIdUart0TxEmpty,
20000746:	f0000517          	auipc	a0,0xf0000
2000074a:	8c250513          	addi	a0,a0,-1854 # 10000008 <_data_end>
2000074e:	458d                	li	a1,3
20000750:	4601                	li	a2,0
20000752:	4681                	li	a3,0
20000754:	2bc1                	jal	20000d24 <dif_plic_irq_set_enabled>
20000756:	cd05                	beqz	a0,2000078e <test_main+0x3aa>
20000758:	4088                	lw	a0,0(s1)
2000075a:	c909                	beqz	a0,2000076c <test_main+0x388>
2000075c:	e0010517          	auipc	a0,0xe0010
20000760:	a0c50513          	addi	a0,a0,-1524 # 10168 <plic_configure_irqs.kLogFields.43>
20000764:	4581                	li	a1,0
20000766:	7c8000ef          	jal	ra,20000f2e <base_log_internal_dv>
2000076a:	a829                	j	20000784 <test_main+0x3a0>
2000076c:	00001597          	auipc	a1,0x1
20000770:	79858593          	addi	a1,a1,1944 # 20001f04 <kTestConfig+0x130>
20000774:	0020                	addi	s0,sp,8
20000776:	4651                	li	a2,20
20000778:	8522                	mv	a0,s0
2000077a:	1ce010ef          	jal	ra,20001948 <memcpy>
2000077e:	8522                	mv	a0,s0
20000780:	704000ef          	jal	ra,20000e84 <base_log_internal_core>
20000784:	6531                	lui	a0,0xc
20000786:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000078a:	523000ef          	jal	ra,200014ac <test_status_set>
execute_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:167
  uart_rx_overflow_handled = false;
2000078e:	f0000417          	auipc	s0,0xf0000
20000792:	88240413          	addi	s0,s0,-1918 # 10000010 <uart_rx_overflow_handled>
20000796:	00040023          	sb	zero,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:168
  CHECK(dif_uart_irq_force(uart, kDifUartIrqRxOverflow) == kDifUartOk,
2000079a:	f0000517          	auipc	a0,0xf0000
2000079e:	87250513          	addi	a0,a0,-1934 # 1000000c <uart0>
200007a2:	458d                	li	a1,3
200007a4:	2ccd                	jal	20000a96 <dif_uart_irq_force>
200007a6:	cd0d                	beqz	a0,200007e0 <test_main+0x3fc>
200007a8:	4088                	lw	a0,0(s1)
200007aa:	c909                	beqz	a0,200007bc <test_main+0x3d8>
200007ac:	e0010517          	auipc	a0,0xe0010
200007b0:	9d050513          	addi	a0,a0,-1584 # 1017c <execute_test.kLogFields>
200007b4:	4581                	li	a1,0
200007b6:	778000ef          	jal	ra,20000f2e <base_log_internal_dv>
200007ba:	a831                	j	200007d6 <test_main+0x3f2>
200007bc:	00001597          	auipc	a1,0x1
200007c0:	75c58593          	addi	a1,a1,1884 # 20001f18 <kTestConfig+0x144>
200007c4:	00810913          	addi	s2,sp,8
200007c8:	4651                	li	a2,20
200007ca:	854a                	mv	a0,s2
200007cc:	17c010ef          	jal	ra,20001948 <memcpy>
200007d0:	854a                	mv	a0,s2
200007d2:	6b2000ef          	jal	ra,20000e84 <base_log_internal_core>
200007d6:	6531                	lui	a0,0xc
200007d8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007dc:	4d1000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:171
  if (!uart_rx_overflow_handled) {
200007e0:	00044503          	lbu	a0,0(s0)
200007e4:	e501                	bnez	a0,200007ec <test_main+0x408>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:172
    usleep(10);
200007e6:	4529                	li	a0,10
200007e8:	447000ef          	jal	ra,2000142e <usleep>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:174
  CHECK(uart_rx_overflow_handled, "RX overflow IRQ has not been handled!");
200007ec:	00044503          	lbu	a0,0(s0)
200007f0:	ed05                	bnez	a0,20000828 <test_main+0x444>
200007f2:	4088                	lw	a0,0(s1)
200007f4:	c909                	beqz	a0,20000806 <test_main+0x422>
200007f6:	e0010517          	auipc	a0,0xe0010
200007fa:	99a50513          	addi	a0,a0,-1638 # 10190 <execute_test.kLogFields.47>
200007fe:	4581                	li	a1,0
20000800:	72e000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000804:	a829                	j	2000081e <test_main+0x43a>
20000806:	00001597          	auipc	a1,0x1
2000080a:	72658593          	addi	a1,a1,1830 # 20001f2c <kTestConfig+0x158>
2000080e:	0020                	addi	s0,sp,8
20000810:	4651                	li	a2,20
20000812:	8522                	mv	a0,s0
20000814:	134010ef          	jal	ra,20001948 <memcpy>
20000818:	8522                	mv	a0,s0
2000081a:	66a000ef          	jal	ra,20000e84 <base_log_internal_core>
2000081e:	6531                	lui	a0,0xc
20000820:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000824:	489000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:177
  uart_tx_empty_handled = false;
20000828:	effff417          	auipc	s0,0xeffff
2000082c:	7e940413          	addi	s0,s0,2025 # 10000011 <uart_tx_empty_handled>
20000830:	00040023          	sb	zero,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:178
  CHECK(dif_uart_irq_force(uart, kDifUartIrqTxEmpty) == kDifUartOk,
20000834:	effff517          	auipc	a0,0xeffff
20000838:	7d850513          	addi	a0,a0,2008 # 1000000c <uart0>
2000083c:	4589                	li	a1,2
2000083e:	2ca1                	jal	20000a96 <dif_uart_irq_force>
20000840:	cd0d                	beqz	a0,2000087a <test_main+0x496>
20000842:	4088                	lw	a0,0(s1)
20000844:	c909                	beqz	a0,20000856 <test_main+0x472>
20000846:	e0010517          	auipc	a0,0xe0010
2000084a:	95e50513          	addi	a0,a0,-1698 # 101a4 <execute_test.kLogFields.50>
2000084e:	4581                	li	a1,0
20000850:	6de000ef          	jal	ra,20000f2e <base_log_internal_dv>
20000854:	a831                	j	20000870 <test_main+0x48c>
20000856:	00001597          	auipc	a1,0x1
2000085a:	6ea58593          	addi	a1,a1,1770 # 20001f40 <kTestConfig+0x16c>
2000085e:	00810913          	addi	s2,sp,8
20000862:	4651                	li	a2,20
20000864:	854a                	mv	a0,s2
20000866:	0e2010ef          	jal	ra,20001948 <memcpy>
2000086a:	854a                	mv	a0,s2
2000086c:	618000ef          	jal	ra,20000e84 <base_log_internal_core>
20000870:	6531                	lui	a0,0xc
20000872:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000876:	437000ef          	jal	ra,200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:181
  if (!uart_tx_empty_handled) {
2000087a:	00044503          	lbu	a0,0(s0)
2000087e:	e501                	bnez	a0,20000886 <test_main+0x4a2>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:182
    usleep(10);
20000880:	4529                	li	a0,10
20000882:	3ad000ef          	jal	ra,2000142e <usleep>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:184
  CHECK(uart_tx_empty_handled, "TX empty IRQ has not been handled!");
20000886:	00044503          	lbu	a0,0(s0)
2000088a:	e91d                	bnez	a0,200008c0 <test_main+0x4dc>
2000088c:	4088                	lw	a0,0(s1)
2000088e:	c909                	beqz	a0,200008a0 <test_main+0x4bc>
20000890:	e0010517          	auipc	a0,0xe0010
20000894:	92850513          	addi	a0,a0,-1752 # 101b8 <execute_test.kLogFields.53>
20000898:	4581                	li	a1,0
2000089a:	694000ef          	jal	ra,20000f2e <base_log_internal_dv>
2000089e:	a821                	j	200008b6 <test_main+0x4d2>
200008a0:	00001597          	auipc	a1,0x1
200008a4:	6b458593          	addi	a1,a1,1716 # 20001f54 <kTestConfig+0x180>
200008a8:	0020                	addi	s0,sp,8
200008aa:	4651                	li	a2,20
200008ac:	8522                	mv	a0,s0
200008ae:	09a010ef          	jal	ra,20001948 <memcpy>
200008b2:	8522                	mv	a0,s0
200008b4:	2bc1                	jal	20000e84 <base_log_internal_core>
200008b6:	6531                	lui	a0,0xc
200008b8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008bc:	3f1000ef          	jal	ra,200014ac <test_status_set>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_plic_smoketest.c:209

  uart_configure_irqs(&uart0);
  plic_configure_irqs(&plic0);
  execute_test(&uart0);

  return true;
200008c0:	4505                	li	a0,1
200008c2:	5902                	lw	s2,32(sp)
200008c4:	5492                	lw	s1,36(sp)
200008c6:	5422                	lw	s0,40(sp)
200008c8:	50b2                	lw	ra,44(sp)
200008ca:	6145                	addi	sp,sp,48
200008cc:	8082                	ret
	...

200008d0 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
200008d0:	c581                	beqz	a1,200008d8 <dif_uart_init+0x8>
200008d2:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200008d4:	c188                	sw	a0,0(a1)
200008d6:	a011                	j	200008da <dif_uart_init+0xa>
200008d8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200008da:	8532                	mv	a0,a2
200008dc:	8082                	ret

200008de <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200008de:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
200008e0:	c606                	sw	ra,12(sp)
200008e2:	c422                	sw	s0,8(sp)
200008e4:	c226                	sw	s1,4(sp)
200008e6:	c935                	beqz	a0,2000095a <dif_uart_configure+0x7c>
200008e8:	84ae                	mv	s1,a1
200008ea:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
200008ec:	418c                	lw	a1,0(a1)
200008ee:	450d                	li	a0,3
200008f0:	c5b5                	beqz	a1,2000095c <dif_uart_configure+0x7e>
200008f2:	40d0                	lw	a2,4(s1)
200008f4:	c625                	beqz	a2,2000095c <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200008f6:	01459513          	slli	a0,a1,0x14
200008fa:	81b1                	srli	a1,a1,0xc
200008fc:	4681                	li	a3,0
200008fe:	132010ef          	jal	ra,20001a30 <__udivdi3>
20000902:	6641                	lui	a2,0x10
20000904:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20000906:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20000908:	8d31                	xor	a0,a0,a2
2000090a:	8dc9                	or	a1,a1,a0
2000090c:	4511                	li	a0,4
2000090e:	e5b9                	bnez	a1,2000095c <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20000910:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000912:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20000916:	4008                	lw	a0,0(s0)
20000918:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000091a:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
2000091c:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000091e:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20000922:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000924:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000928:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000092a:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
2000092e:	4008                	lw	a0,0(s0)
20000930:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000932:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20000934:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
20000936:	01061513          	slli	a0,a2,0x10
2000093a:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
2000093e:	c291                	beqz	a3,20000942 <dif_uart_configure+0x64>
20000940:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20000942:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20000944:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20000946:	e219                	bnez	a2,2000094c <dif_uart_configure+0x6e>
20000948:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
2000094c:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000094e:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000950:	400c                	lw	a1,0(s0)
20000952:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000954:	0005a223          	sw	zero,4(a1)
20000958:	a011                	j	2000095c <dif_uart_configure+0x7e>
2000095a:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
2000095c:	4492                	lw	s1,4(sp)
2000095e:	4422                	lw	s0,8(sp)
20000960:	40b2                	lw	ra,12(sp)
20000962:	0141                	addi	sp,sp,16
20000964:	8082                	ret

20000966 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20000966:	1141                	addi	sp,sp,-16
20000968:	c606                	sw	ra,12(sp)
2000096a:	c422                	sw	s0,8(sp)
2000096c:	c226                	sw	s1,4(sp)
2000096e:	84aa                	mv	s1,a0
20000970:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20000972:	c09d                	beqz	s1,20000998 <dif_uart_irq_is_pending+0x32>
20000974:	8432                	mv	s0,a2
20000976:	c20d                	beqz	a2,20000998 <dif_uart_irq_is_pending+0x32>
20000978:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000097a:	852e                	mv	a0,a1
2000097c:	85b2                	mv	a1,a2
2000097e:	2015                	jal	200009a2 <uart_irq_offset_get>
20000980:	85aa                	mv	a1,a0
20000982:	4505                	li	a0,1
20000984:	c991                	beqz	a1,20000998 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20000986:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000988:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
2000098a:	4602                	lw	a2,0(sp)
2000098c:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000098e:	00c5d5b3          	srl	a1,a1,a2
20000992:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20000994:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20000998:	4492                	lw	s1,4(sp)
2000099a:	4422                	lw	s0,8(sp)
2000099c:	40b2                	lw	ra,12(sp)
2000099e:	0141                	addi	sp,sp,16
200009a0:	8082                	ret

200009a2 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
200009a2:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
200009a4:	00a66563          	bltu	a2,a0,200009ae <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
200009a8:	c188                	sw	a0,0(a1)
200009aa:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
200009ac:	8082                	ret
200009ae:	4501                	li	a0,0
200009b0:	8082                	ret

200009b2 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
200009b2:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
200009b4:	c606                	sw	ra,12(sp)
200009b6:	c422                	sw	s0,8(sp)
200009b8:	c10d                	beqz	a0,200009da <dif_uart_irq_acknowledge+0x28>
200009ba:	842a                	mv	s0,a0
200009bc:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200009be:	852e                	mv	a0,a1
200009c0:	85b2                	mv	a1,a2
200009c2:	37c5                	jal	200009a2 <uart_irq_offset_get>
200009c4:	85aa                	mv	a1,a0
200009c6:	4505                	li	a0,1
200009c8:	c991                	beqz	a1,200009dc <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200009ca:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
200009cc:	4010                	lw	a2,0(s0)
200009ce:	4501                	li	a0,0
200009d0:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200009d2:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200009d6:	c20c                	sw	a1,0(a2)
200009d8:	a011                	j	200009dc <dif_uart_irq_acknowledge+0x2a>
200009da:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
200009dc:	4422                	lw	s0,8(sp)
200009de:	40b2                	lw	ra,12(sp)
200009e0:	0141                	addi	sp,sp,16
200009e2:	8082                	ret

200009e4 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
200009e4:	c911                	beqz	a0,200009f8 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
200009e6:	c581                	beqz	a1,200009ee <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200009e8:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200009ea:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
200009ec:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200009ee:	410c                	lw	a1,0(a0)
200009f0:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200009f2:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
200009f6:	8082                	ret
200009f8:	4509                	li	a0,2
200009fa:	8082                	ret

200009fc <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200009fc:	862a                	mv	a2,a0
200009fe:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20000a00:	c611                	beqz	a2,20000a0c <dif_uart_irq_restore_all+0x10>
20000a02:	c589                	beqz	a1,20000a0c <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000a04:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20000a06:	4210                	lw	a2,0(a2)
20000a08:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a0a:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20000a0c:	8082                	ret

20000a0e <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20000a0e:	1141                	addi	sp,sp,-16
20000a10:	c606                	sw	ra,12(sp)
20000a12:	c422                	sw	s0,8(sp)
20000a14:	c226                	sw	s1,4(sp)
20000a16:	84aa                	mv	s1,a0
20000a18:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20000a1a:	c485                	beqz	s1,20000a42 <dif_uart_irq_get_enabled+0x34>
20000a1c:	8432                	mv	s0,a2
20000a1e:	c215                	beqz	a2,20000a42 <dif_uart_irq_get_enabled+0x34>
20000a20:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000a22:	852e                	mv	a0,a1
20000a24:	85b2                	mv	a1,a2
20000a26:	3fb5                	jal	200009a2 <uart_irq_offset_get>
20000a28:	85aa                	mv	a1,a0
20000a2a:	4505                	li	a0,1
20000a2c:	c999                	beqz	a1,20000a42 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000a2e:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a30:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20000a32:	4602                	lw	a2,0(sp)
20000a34:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000a36:	00c5d5b3          	srl	a1,a1,a2
20000a3a:	8985                	andi	a1,a1,1
20000a3c:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20000a40:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20000a42:	4492                	lw	s1,4(sp)
20000a44:	4422                	lw	s0,8(sp)
20000a46:	40b2                	lw	ra,12(sp)
20000a48:	0141                	addi	sp,sp,16
20000a4a:	8082                	ret

20000a4c <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20000a4c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20000a4e:	c606                	sw	ra,12(sp)
20000a50:	c422                	sw	s0,8(sp)
20000a52:	c226                	sw	s1,4(sp)
20000a54:	c91d                	beqz	a0,20000a8a <dif_uart_irq_set_enabled+0x3e>
20000a56:	8432                	mv	s0,a2
20000a58:	84aa                	mv	s1,a0
20000a5a:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000a5c:	852e                	mv	a0,a1
20000a5e:	85b2                	mv	a1,a2
20000a60:	3789                	jal	200009a2 <uart_irq_offset_get>
20000a62:	85aa                	mv	a1,a0
20000a64:	4505                	li	a0,1
20000a66:	c19d                	beqz	a1,20000a8c <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000a68:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000a6a:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20000a6c:	4682                	lw	a3,0(sp)
20000a6e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20000a70:	00143713          	seqz	a4,s0
20000a74:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000a76:	00d797b3          	sll	a5,a5,a3
20000a7a:	fff7c793          	not	a5,a5
20000a7e:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000a80:	00d716b3          	sll	a3,a4,a3
20000a84:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a86:	c1d0                	sw	a2,4(a1)
20000a88:	a011                	j	20000a8c <dif_uart_irq_set_enabled+0x40>
20000a8a:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20000a8c:	4492                	lw	s1,4(sp)
20000a8e:	4422                	lw	s0,8(sp)
20000a90:	40b2                	lw	ra,12(sp)
20000a92:	0141                	addi	sp,sp,16
20000a94:	8082                	ret

20000a96 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20000a96:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20000a98:	c606                	sw	ra,12(sp)
20000a9a:	c422                	sw	s0,8(sp)
20000a9c:	c10d                	beqz	a0,20000abe <dif_uart_irq_force+0x28>
20000a9e:	842a                	mv	s0,a0
20000aa0:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000aa2:	852e                	mv	a0,a1
20000aa4:	85b2                	mv	a1,a2
20000aa6:	3df5                	jal	200009a2 <uart_irq_offset_get>
20000aa8:	85aa                	mv	a1,a0
20000aaa:	4505                	li	a0,1
20000aac:	c991                	beqz	a1,20000ac0 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000aae:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20000ab0:	4010                	lw	a2,0(s0)
20000ab2:	4501                	li	a0,0
20000ab4:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000ab6:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000aba:	c60c                	sw	a1,8(a2)
20000abc:	a011                	j	20000ac0 <dif_uart_irq_force+0x2a>
20000abe:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20000ac0:	4422                	lw	s0,8(sp)
20000ac2:	40b2                	lw	ra,12(sp)
20000ac4:	0141                	addi	sp,sp,16
20000ac6:	8082                	ret

20000ac8 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000ac8:	cd09                	beqz	a0,20000ae2 <dif_uart_watermark_rx_set+0x1a>
20000aca:	4691                	li	a3,4
20000acc:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000ace:	00b6eb63          	bltu	a3,a1,20000ae4 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000ad2:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ad4:	4d54                	lw	a3,28(a0)
20000ad6:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20000ad8:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000ada:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000adc:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ade:	cd4c                	sw	a1,28(a0)
20000ae0:	a011                	j	20000ae4 <dif_uart_watermark_rx_set+0x1c>
20000ae2:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000ae4:	8532                	mv	a0,a2
20000ae6:	8082                	ret

20000ae8 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000ae8:	cd11                	beqz	a0,20000b04 <dif_uart_watermark_tx_set+0x1c>
20000aea:	468d                	li	a3,3
20000aec:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000aee:	00b6ec63          	bltu	a3,a1,20000b06 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000af2:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000af4:	4d54                	lw	a3,28(a0)
20000af6:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20000af8:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000afa:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000afe:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b00:	cd4c                	sw	a1,28(a0)
20000b02:	a011                	j	20000b06 <dif_uart_watermark_tx_set+0x1e>
20000b04:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000b06:	8532                	mv	a0,a2
20000b08:	8082                	ret

20000b0a <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20000b0a:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20000b0c:	c51d                	beqz	a0,20000b3a <dif_uart_bytes_send+0x30>
20000b0e:	c595                	beqz	a1,20000b3a <dif_uart_bytes_send+0x30>
20000b10:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000b12:	c20d                	beqz	a2,20000b34 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000b14:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b18:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b1c:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000b1e:	eb19                	bnez	a4,20000b34 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20000b20:	00f58733          	add	a4,a1,a5
20000b24:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20000b28:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b2a:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000b2e:	fef613e3          	bne	a2,a5,20000b14 <dif_uart_bytes_send+0xa>
20000b32:	87b2                	mv	a5,a2
20000b34:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20000b36:	c291                	beqz	a3,20000b3a <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20000b38:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20000b3a:	853a                	mv	a0,a4
20000b3c:	8082                	ret

20000b3e <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20000b3e:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20000b40:	c515                	beqz	a0,20000b6c <dif_uart_bytes_receive+0x2e>
20000b42:	c60d                	beqz	a2,20000b6c <dif_uart_bytes_receive+0x2e>
20000b44:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000b46:	cd99                	beqz	a1,20000b64 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000b48:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b4a:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000b4c:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000b50:	eb91                	bnez	a5,20000b64 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b52:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000b54:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20000b58:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000b5a:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000b5e:	ff0595e3          	bne	a1,a6,20000b48 <dif_uart_bytes_receive+0xa>
20000b62:	882e                	mv	a6,a1
20000b64:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20000b66:	c299                	beqz	a3,20000b6c <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20000b68:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20000b6c:	853a                	mv	a0,a4
20000b6e:	8082                	ret

20000b70 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20000b70:	cd19                	beqz	a0,20000b8e <dif_uart_byte_send_polled+0x1e>
20000b72:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b74:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000b76:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20000b78:	fef5                	bnez	a3,20000b74 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b7a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000b7c:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000b7e:	e299                	bnez	a3,20000b84 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b80:	ce0c                	sw	a1,24(a2)
20000b82:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b84:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000b86:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20000b88:	dd75                	beqz	a0,20000b84 <dif_uart_byte_send_polled+0x14>
20000b8a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20000b8c:	8082                	ret
20000b8e:	4509                	li	a0,2
20000b90:	8082                	ret

20000b92 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20000b92:	862a                	mv	a2,a0
20000b94:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20000b96:	c205                	beqz	a2,20000bb6 <dif_uart_byte_receive_polled+0x24>
20000b98:	cd99                	beqz	a1,20000bb6 <dif_uart_byte_receive_polled+0x24>
20000b9a:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b9c:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000b9e:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20000ba2:	fd6d                	bnez	a0,20000b9c <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ba4:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000ba6:	02057693          	andi	a3,a0,32
20000baa:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000bac:	e689                	bnez	a3,20000bb6 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bae:	4a50                	lw	a2,20(a2)
20000bb0:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000bb2:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20000bb6:	8082                	ret

20000bb8 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000bb8:	862a                	mv	a2,a0
20000bba:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20000bbc:	ca09                	beqz	a2,20000bce <dif_uart_rx_bytes_available+0x16>
20000bbe:	c981                	beqz	a1,20000bce <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000bc0:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bc2:	5110                	lw	a2,32(a0)
20000bc4:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000bc6:	8241                	srli	a2,a2,0x10
20000bc8:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20000bcc:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20000bce:	8082                	ret

20000bd0 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000bd0:	862a                	mv	a2,a0
20000bd2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20000bd4:	ce01                	beqz	a2,20000bec <dif_uart_tx_bytes_available+0x1c>
20000bd6:	c999                	beqz	a1,20000bec <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000bd8:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bda:	5110                	lw	a2,32(a0)
20000bdc:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20000bde:	03f67613          	andi	a2,a2,63
20000be2:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20000be6:	40c68633          	sub	a2,a3,a2
20000bea:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20000bec:	8082                	ret

20000bee <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20000bee:	c11d                	beqz	a0,20000c14 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000bf0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bf2:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000bf4:	ffd5f693          	andi	a3,a1,-3
20000bf8:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000bfc:	fff58713          	addi	a4,a1,-1
20000c00:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000c02:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000c06:	00f77463          	bgeu	a4,a5,20000c0e <dif_uart_fifo_reset+0x20>
20000c0a:	0025e593          	ori	a1,a1,2
20000c0e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c10:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c12:	8082                	ret
20000c14:	4509                	li	a0,2
20000c16:	8082                	ret

20000c18 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20000c18:	c515                	beqz	a0,20000c44 <dif_uart_loopback_set+0x2c>
20000c1a:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20000c1c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20000c1e:	0015b593          	seqz	a1,a1
20000c22:	4715                	li	a4,5
20000c24:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c28:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20000c2a:	00163613          	seqz	a2,a2
20000c2e:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c30:	00b797b3          	sll	a5,a5,a1
20000c34:	fff7c793          	not	a5,a5
20000c38:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c3a:	00b615b3          	sll	a1,a2,a1
20000c3e:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c40:	c54c                	sw	a1,12(a0)
20000c42:	a011                	j	20000c46 <dif_uart_loopback_set+0x2e>
20000c44:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c46:	8536                	mv	a0,a3
20000c48:	8082                	ret

20000c4a <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20000c4a:	862a                	mv	a2,a0
20000c4c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20000c4e:	ca11                	beqz	a2,20000c62 <dif_uart_enable_rx_timeout+0x18>
20000c50:	0185d693          	srli	a3,a1,0x18
20000c54:	e699                	bnez	a3,20000c62 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000c56:	4210                	lw	a2,0(a2)
20000c58:	4501                	li	a0,0
20000c5a:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000c5e:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c60:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20000c62:	8082                	ret

20000c64 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20000c64:	c511                	beqz	a0,20000c70 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000c66:	410c                	lw	a1,0(a0)
20000c68:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c6a:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20000c6e:	8082                	ret
20000c70:	4509                	li	a0,2
20000c72:	8082                	ret

20000c74 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20000c74:	86aa                	mv	a3,a0
20000c76:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20000c78:	ce99                	beqz	a3,20000c96 <dif_uart_get_rx_timeout+0x22>
20000c7a:	cd91                	beqz	a1,20000c96 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20000c7c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c7e:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20000c80:	fff6c513          	not	a0,a3
20000c84:	817d                	srli	a0,a0,0x1f
20000c86:	c188                	sw	a0,0(a1)
20000c88:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20000c8a:	c611                	beqz	a2,20000c96 <dif_uart_get_rx_timeout+0x22>
20000c8c:	010005b7          	lui	a1,0x1000
20000c90:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000c92:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20000c94:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20000c96:	8082                	ret

20000c98 <dif_plic_init>:
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:170
    mmio_region_write32(plic->params.base_addr, offset, 0);
  }
}

dif_plic_result_t dif_plic_init(dif_plic_params_t params, dif_plic_t *plic) {
  if (plic == NULL) {
20000c98:	cda1                	beqz	a1,20000cf0 <dif_plic_init+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:174
    return kDifPlicBadArg;
  }

  plic->params = params;
20000c9a:	c188                	sw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c9c:	00052c23          	sw	zero,24(a0)
20000ca0:	4571                	li	a0,28
20000ca2:	03000613          	li	a2,48
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:140
    mmio_region_write32(plic->params.base_addr, offset, 0);
20000ca6:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ca8:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
  for (int i = 0; i < RV_PLIC_LE_MULTIREG_COUNT; ++i) {
20000caa:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cac:	0006a023          	sw	zero,0(a3) # 80000000 <_data_init_start+0x5fffd470>
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:138
20000cb0:	fec51be3          	bne	a0,a2,20000ca6 <dif_plic_init+0xe>
20000cb4:	03000513          	li	a0,48
20000cb8:	30000613          	li	a2,768
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:146
    mmio_region_write32(plic->params.base_addr, offset, 0);
20000cbc:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cbe:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
  for (int i = 0; i < RV_PLIC_PARAM_NUM_SRC; ++i) {
20000cc0:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cc2:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:144
20000cc6:	fec51be3          	bne	a0,a2,20000cbc <dif_plic_init+0x24>
20000cca:	30000513          	li	a0,768
20000cce:	31800613          	li	a2,792
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:156
      mmio_region_write32(plic->params.base_addr, multireg_offset, 0);
20000cd2:	4194                	lw	a3,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cd4:	96aa                	add	a3,a3,a0
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
    for (int i = 0; i < RV_PLIC_IE0_MULTIREG_COUNT; ++i) {
20000cd6:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cd8:	0006a023          	sw	zero,0(a3)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:154
20000cdc:	fec51be3          	bne	a0,a2,20000cd2 <dif_plic_init+0x3a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:161
    mmio_region_write32(plic->params.base_addr, offset, 0);
20000ce0:	4188                	lw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ce2:	30052c23          	sw	zero,792(a0)
plic_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:165
    mmio_region_write32(plic->params.base_addr, offset, 0);
20000ce6:	418c                	lw	a1,0(a1)
20000ce8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cea:	3205a023          	sw	zero,800(a1) # 1000320 <init_uart.kLogFields.2+0xff00a0>
dif_plic_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:180

  // TODO: Move this out into its own function.
  plic_reset(plic);

  return kDifPlicOk;
}
20000cee:	8082                	ret
20000cf0:	4509                	li	a0,2
20000cf2:	8082                	ret

20000cf4 <dif_plic_irq_get_enabled>:
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:185

dif_plic_result_t dif_plic_irq_get_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t *state) {
20000cf4:	872a                	mv	a4,a0
20000cf6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:186
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20000cf8:	c70d                	beqz	a4,20000d22 <dif_plic_irq_get_enabled+0x2e>
20000cfa:	0b300793          	li	a5,179
20000cfe:	02b7e263          	bltu	a5,a1,20000d22 <dif_plic_irq_get_enabled+0x2e>
20000d02:	e205                	bnez	a2,20000d22 <dif_plic_irq_get_enabled+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:193
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20000d04:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20000d06:	0035d613          	srli	a2,a1,0x3
20000d0a:	3fc67613          	andi	a2,a2,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
20000d0e:	9532                	add	a0,a0,a2
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d10:	30052603          	lw	a2,768(a0)
20000d14:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000d16:	00b655b3          	srl	a1,a2,a1
20000d1a:	8985                	andi	a1,a1,1
20000d1c:	0015b593          	seqz	a1,a1
dif_plic_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:195
  bool is_enabled = bitfield_bit32_read(reg, reg_info.bit_index);
  *state = is_enabled ? kDifPlicToggleEnabled : kDifPlicToggleDisabled;
20000d20:	c28c                	sw	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:198

  return kDifPlicOk;
}
20000d22:	8082                	ret

20000d24 <dif_plic_irq_set_enabled>:
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:203

dif_plic_result_t dif_plic_irq_set_enabled(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_target_t target,
                                           dif_plic_toggle_t state) {
20000d24:	872a                	mv	a4,a0
20000d26:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:204
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20000d28:	c321                	beqz	a4,20000d68 <dif_plic_irq_set_enabled+0x44>
20000d2a:	0b300793          	li	a5,179
20000d2e:	02b7ed63          	bltu	a5,a1,20000d68 <dif_plic_irq_set_enabled+0x44>
20000d32:	ea1d                	bnez	a2,20000d68 <dif_plic_irq_set_enabled+0x44>
20000d34:	4605                	li	a2,1
20000d36:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:210
      target >= RV_PLIC_PARAM_NUM_TARGET) {
    return kDifPlicBadArg;
  }

  bool flag;
  switch (state) {
20000d38:	c689                	beqz	a3,20000d42 <dif_plic_irq_set_enabled+0x1e>
20000d3a:	4785                	li	a5,1
20000d3c:	02f69663          	bne	a3,a5,20000d68 <dif_plic_irq_set_enabled+0x44>
20000d40:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:223
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20000d42:	4308                	lw	a0,0(a4)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20000d44:	0035d693          	srli	a3,a1,0x3
20000d48:	3fc6f693          	andi	a3,a3,1020
plic_irq_enable_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:90
      .offset = plic_irq_enable_base_for_target(target) + offset,
20000d4c:	96aa                	add	a3,a3,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d4e:	3006a703          	lw	a4,768(a3)
20000d52:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000d54:	00b61633          	sll	a2,a2,a1
20000d58:	fff64613          	not	a2,a2
20000d5c:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000d5e:	00b795b3          	sll	a1,a5,a1
20000d62:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d64:	30b6a023          	sw	a1,768(a3)
dif_plic_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:228
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
20000d68:	8082                	ret

20000d6a <dif_plic_irq_set_trigger>:
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:232

dif_plic_result_t dif_plic_irq_set_trigger(const dif_plic_t *plic,
                                           dif_plic_irq_id_t irq,
                                           dif_plic_irq_trigger_t trigger) {
20000d6a:	86aa                	mv	a3,a0
20000d6c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:233
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC) {
20000d6e:	ce8d                	beqz	a3,20000da8 <dif_plic_irq_set_trigger+0x3e>
20000d70:	0b300713          	li	a4,179
20000d74:	02b76a63          	bltu	a4,a1,20000da8 <dif_plic_irq_set_trigger+0x3e>
20000d78:	4705                	li	a4,1
20000d7a:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:238
    return kDifPlicBadArg;
  }

  bool flag;
  switch (trigger) {
20000d7c:	c609                	beqz	a2,20000d86 <dif_plic_irq_set_trigger+0x1c>
20000d7e:	4785                	li	a5,1
20000d80:	02f61463          	bne	a2,a5,20000da8 <dif_plic_irq_set_trigger+0x3e>
20000d84:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:251
      return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_trigger_type_reg_info(irq);

  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20000d86:	4288                	lw	a0,0(a3)
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20000d88:	0035d613          	srli	a2,a1,0x3
20000d8c:	3fc67613          	andi	a2,a2,1020
plic_irq_trigger_type_reg_info():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:101
      .offset = RV_PLIC_LE_0_REG_OFFSET + offset,
20000d90:	962a                	add	a2,a2,a0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d92:	4e14                	lw	a3,24(a2)
20000d94:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000d96:	00b71733          	sll	a4,a4,a1
20000d9a:	fff74713          	not	a4,a4
20000d9e:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000da0:	00b795b3          	sll	a1,a5,a1
20000da4:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000da6:	ce0c                	sw	a1,24(a2)
dif_plic_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:256
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->params.base_addr, reg_info.offset, reg);

  return kDifPlicOk;
}
20000da8:	8082                	ret

20000daa <dif_plic_irq_set_priority>:
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:260

dif_plic_result_t dif_plic_irq_set_priority(const dif_plic_t *plic,
                                            dif_plic_irq_id_t irq,
                                            uint32_t priority) {
20000daa:	86aa                	mv	a3,a0
20000dac:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:261
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
20000dae:	ce89                	beqz	a3,20000dc8 <dif_plic_irq_set_priority+0x1e>
20000db0:	0b300713          	li	a4,179
20000db4:	00b76a63          	bltu	a4,a1,20000dc8 <dif_plic_irq_set_priority+0x1e>
20000db8:	470d                	li	a4,3
20000dba:	00c76763          	bltu	a4,a2,20000dc8 <dif_plic_irq_set_priority+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:267
      priority > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t offset = plic_priority_reg_offset(irq);
  mmio_region_write32(plic->params.base_addr, offset, priority);
20000dbe:	4294                	lw	a3,0(a3)
20000dc0:	4501                	li	a0,0
plic_priority_reg_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:124
  ptrdiff_t offset = irq * sizeof(uint32_t);
20000dc2:	058a                	slli	a1,a1,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:125
  return RV_PLIC_PRIO0_REG_OFFSET + offset;
20000dc4:	95b6                	add	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dc6:	d990                	sw	a2,48(a1)
dif_plic_irq_set_priority():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:270

  return kDifPlicOk;
}
20000dc8:	8082                	ret

20000dca <dif_plic_target_set_threshold>:
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:274

dif_plic_result_t dif_plic_target_set_threshold(const dif_plic_t *plic,
                                                dif_plic_target_t target,
                                                uint32_t threshold) {
20000dca:	86aa                	mv	a3,a0
20000dcc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:275
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20000dce:	ca89                	beqz	a3,20000de0 <dif_plic_target_set_threshold+0x16>
20000dd0:	e981                	bnez	a1,20000de0 <dif_plic_target_set_threshold+0x16>
20000dd2:	458d                	li	a1,3
20000dd4:	00c5e663          	bltu	a1,a2,20000de0 <dif_plic_target_set_threshold+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:281
      threshold > kDifPlicMaxPriority) {
    return kDifPlicBadArg;
  }

  ptrdiff_t threshold_offset = plic_threshold_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, threshold_offset, threshold);
20000dd8:	428c                	lw	a1,0(a3)
20000dda:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ddc:	30c5ac23          	sw	a2,792(a1)
dif_plic_target_set_threshold():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:284

  return kDifPlicOk;
}
20000de0:	8082                	ret

20000de2 <dif_plic_irq_is_pending>:
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:288

dif_plic_result_t dif_plic_irq_is_pending(const dif_plic_t *plic,
                                          dif_plic_irq_id_t irq,
                                          bool *is_pending) {
20000de2:	86aa                	mv	a3,a0
20000de4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:289
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC || is_pending == NULL) {
20000de6:	c68d                	beqz	a3,20000e10 <dif_plic_irq_is_pending+0x2e>
20000de8:	0b300713          	li	a4,179
20000dec:	02b76263          	bltu	a4,a1,20000e10 <dif_plic_irq_is_pending+0x2e>
20000df0:	c205                	beqz	a2,20000e10 <dif_plic_irq_is_pending+0x2e>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000df2:	0035d513          	srli	a0,a1,0x3
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:294
    return kDifPlicBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_pending_reg_info(irq);
  uint32_t reg = mmio_region_read32(plic->params.base_addr, reg_info.offset);
20000df6:	4294                	lw	a3,0(a3)
20000df8:	20000737          	lui	a4,0x20000
20000dfc:	1771                	addi	a4,a4,-4
plic_offset_from_reg0():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:39
  return register_index * sizeof(uint32_t);
20000dfe:	8d79                	and	a0,a0,a4
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e00:	9536                	add	a0,a0,a3
20000e02:	4114                	lw	a3,0(a0)
20000e04:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000e06:	00b6d5b3          	srl	a1,a3,a1
20000e0a:	8985                	andi	a1,a1,1
dif_plic_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:295
  *is_pending = bitfield_bit32_read(reg, reg_info.bit_index);
20000e0c:	00b60023          	sb	a1,0(a2) # 10000 <_dv_log_offset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:298

  return kDifPlicOk;
}
20000e10:	8082                	ret

20000e12 <dif_plic_irq_claim>:
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:302

dif_plic_result_t dif_plic_irq_claim(const dif_plic_t *plic,
                                     dif_plic_target_t target,
                                     dif_plic_irq_id_t *claim_data) {
20000e12:	86aa                	mv	a3,a0
20000e14:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:303
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20000e16:	ca81                	beqz	a3,20000e26 <dif_plic_irq_claim+0x14>
20000e18:	e599                	bnez	a1,20000e26 <dif_plic_irq_claim+0x14>
20000e1a:	c611                	beqz	a2,20000e26 <dif_plic_irq_claim+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
      claim_data == NULL) {
    return kDifPlicBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->params.base_addr, claim_complete_reg);
20000e1c:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e1e:	31c52583          	lw	a1,796(a0)
20000e22:	4501                	li	a0,0
dif_plic_irq_claim():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:309
20000e24:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:312

  return kDifPlicOk;
}
20000e26:	8082                	ret

20000e28 <dif_plic_irq_complete>:
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:316

dif_plic_result_t dif_plic_irq_complete(
    const dif_plic_t *plic, dif_plic_target_t target,
    const dif_plic_irq_id_t *complete_data) {
20000e28:	86aa                	mv	a3,a0
20000e2a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:317
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20000e2c:	ca81                	beqz	a3,20000e3c <dif_plic_irq_complete+0x14>
20000e2e:	e599                	bnez	a1,20000e3c <dif_plic_irq_complete+0x14>
20000e30:	c611                	beqz	a2,20000e3c <dif_plic_irq_complete+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:326

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
                      *complete_data);
20000e32:	420c                	lw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:325
  mmio_region_write32(plic->params.base_addr, claim_complete_reg,
20000e34:	4290                	lw	a2,0(a3)
20000e36:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e38:	30b62e23          	sw	a1,796(a2)
dif_plic_irq_complete():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:329

  return kDifPlicOk;
}
20000e3c:	8082                	ret

20000e3e <dif_plic_software_irq_force>:
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:332

dif_plic_result_t dif_plic_software_irq_force(const dif_plic_t *plic,
                                              dif_plic_target_t target) {
20000e3e:	862a                	mv	a2,a0
20000e40:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:333
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
20000e42:	c619                	beqz	a2,20000e50 <dif_plic_software_irq_force+0x12>
20000e44:	e591                	bnez	a1,20000e50 <dif_plic_software_irq_force+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:338
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 1);
20000e46:	420c                	lw	a1,0(a2)
20000e48:	4501                	li	a0,0
20000e4a:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e4c:	32c5a023          	sw	a2,800(a1)
dif_plic_software_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:341

  return kDifPlicOk;
}
20000e50:	8082                	ret

20000e52 <dif_plic_software_irq_acknowledge>:
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:344

dif_plic_result_t dif_plic_software_irq_acknowledge(const dif_plic_t *plic,
                                                    dif_plic_target_t target) {
20000e52:	862a                	mv	a2,a0
20000e54:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:345
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
20000e56:	c611                	beqz	a2,20000e62 <dif_plic_software_irq_acknowledge+0x10>
20000e58:	e589                	bnez	a1,20000e62 <dif_plic_software_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:350
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  mmio_region_write32(plic->params.base_addr, msip_offset, 0);
20000e5a:	420c                	lw	a1,0(a2)
20000e5c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e5e:	3205a023          	sw	zero,800(a1)
dif_plic_software_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:353

  return kDifPlicOk;
}
20000e62:	8082                	ret

20000e64 <dif_plic_software_irq_is_pending>:
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:357

dif_plic_result_t dif_plic_software_irq_is_pending(const dif_plic_t *plic,
                                                   dif_plic_target_t target,
                                                   bool *is_pending) {
20000e64:	86aa                	mv	a3,a0
20000e66:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:358
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
20000e68:	ce81                	beqz	a3,20000e80 <dif_plic_software_irq_is_pending+0x1c>
20000e6a:	e999                	bnez	a1,20000e80 <dif_plic_software_irq_is_pending+0x1c>
20000e6c:	ca11                	beqz	a2,20000e80 <dif_plic_software_irq_is_pending+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:365
    return kDifPlicBadArg;
  }

  ptrdiff_t msip_offset = plic_software_irq_base_for_target(target);
  uint32_t register_value =
      mmio_region_read32(plic->params.base_addr, msip_offset);
20000e6e:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e70:	32052583          	lw	a1,800(a0)
20000e74:	4501                	li	a0,0
dif_plic_software_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:367

  *is_pending = (register_value == 1) ? true : false;
20000e76:	15fd                	addi	a1,a1,-1
20000e78:	0015b593          	seqz	a1,a1
20000e7c:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_plic.c:370

  return kDifPlicOk;
}
20000e80:	8082                	ret
	...

20000e84 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000e84:	7139                	addi	sp,sp,-64
20000e86:	ce06                	sw	ra,28(sp)
20000e88:	cc22                	sw	s0,24(sp)
20000e8a:	ca26                	sw	s1,20(sp)
20000e8c:	c84a                	sw	s2,16(sp)
20000e8e:	892a                	mv	s2,a0
20000e90:	de46                	sw	a7,60(sp)
20000e92:	dc42                	sw	a6,56(sp)
20000e94:	da3e                	sw	a5,52(sp)
20000e96:	d83a                	sw	a4,48(sp)
20000e98:	d636                	sw	a3,44(sp)
20000e9a:	d432                	sw	a2,40(sp)
20000e9c:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000e9e:	4144                	lw	s1,4(a0)
20000ea0:	80000537          	lui	a0,0x80000
20000ea4:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd46f>
20000ea8:	8526                	mv	a0,s1
20000eaa:	4581                	li	a1,0
20000eac:	2ed000ef          	jal	ra,20001998 <memchr>
20000eb0:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20000eb4:	02f00593          	li	a1,47
20000eb8:	8526                	mv	a0,s1
20000eba:	2f7000ef          	jal	ra,200019b0 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000ebe:	00092583          	lw	a1,0(s2)
20000ec2:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000ec4:	00b66b63          	bltu	a2,a1,20000eda <base_log_internal_core+0x56>
20000ec8:	058a                	slli	a1,a1,0x2
20000eca:	00001617          	auipc	a2,0x1
20000ece:	0aa60613          	addi	a2,a2,170 # 20001f74 <kDifPlicMaxPriority+0x4>
20000ed2:	95b2                	add	a1,a1,a2
20000ed4:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000ed6:	e519                	bnez	a0,20000ee4 <base_log_internal_core+0x60>
20000ed8:	a801                	j	20000ee8 <base_log_internal_core+0x64>
20000eda:	00002597          	auipc	a1,0x2
20000ede:	aa258593          	addi	a1,a1,-1374 # 2000297c <__clz_tab+0x550>
20000ee2:	c119                	beqz	a0,20000ee8 <base_log_internal_core+0x64>
20000ee4:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000ee8:	effff417          	auipc	s0,0xeffff
20000eec:	12a40413          	addi	s0,s0,298 # 10000012 <base_log_internal_core.global_log_counter>
20000ef0:	00045603          	lhu	a2,0(s0)
20000ef4:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000ef8:	00002517          	auipc	a0,0x2
20000efc:	a6b50513          	addi	a0,a0,-1429 # 20002963 <__clz_tab+0x537>
20000f00:	86a6                	mv	a3,s1
20000f02:	28d1                	jal	20000fd6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000f04:	00041503          	lh	a0,0(s0)
20000f08:	0505                	addi	a0,a0,1
20000f0a:	00a41023          	sh	a0,0(s0)
20000f0e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000f10:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000f12:	01092503          	lw	a0,16(s2)
20000f16:	28c5                	jal	20001006 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000f18:	00002517          	auipc	a0,0x2
20000f1c:	a5950513          	addi	a0,a0,-1447 # 20002971 <__clz_tab+0x545>
20000f20:	285d                	jal	20000fd6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000f22:	4942                	lw	s2,16(sp)
20000f24:	44d2                	lw	s1,20(sp)
20000f26:	4462                	lw	s0,24(sp)
20000f28:	40f2                	lw	ra,28(sp)
20000f2a:	6121                	addi	sp,sp,64
20000f2c:	8082                	ret

20000f2e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20000f2e:	1101                	addi	sp,sp,-32
20000f30:	ce46                	sw	a7,28(sp)
20000f32:	cc42                	sw	a6,24(sp)
20000f34:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000f36:	00001797          	auipc	a5,0x1
20000f3a:	4f278793          	addi	a5,a5,1266 # 20002428 <kDeviceLogBypassUartAddress>
20000f3e:	439c                	lw	a5,0(a5)
20000f40:	c83a                	sw	a4,16(sp)
20000f42:	c636                	sw	a3,12(sp)
20000f44:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f46:	c388                	sw	a0,0(a5)
20000f48:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000f4a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000f4c:	c989                	beqz	a1,20000f5e <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000f4e:	4512                	lw	a0,4(sp)
20000f50:	00450613          	addi	a2,a0,4
20000f54:	c232                	sw	a2,4(sp)
20000f56:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000f58:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f5a:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000f5c:	f9ed                	bnez	a1,20000f4e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000f5e:	6105                	addi	sp,sp,32
20000f60:	8082                	ret
	...

20000f64 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20000f64:	e589                	bnez	a1,20000f6e <base_set_stdout+0xa>
20000f66:	00000597          	auipc	a1,0x0
20000f6a:	01658593          	addi	a1,a1,22 # 20000f7c <base_dev_null>
20000f6e:	effff617          	auipc	a2,0xeffff
20000f72:	09260613          	addi	a2,a2,146 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20000f76:	c208                	sw	a0,0(a2)
20000f78:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20000f7a:	8082                	ret

20000f7c <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20000f7c:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20000f7e:	8082                	ret

20000f80 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20000f80:	effff597          	auipc	a1,0xeffff
20000f84:	08058593          	addi	a1,a1,128 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20000f88:	c188                	sw	a0,0(a1)
20000f8a:	00000517          	auipc	a0,0x0
20000f8e:	00c50513          	addi	a0,a0,12 # 20000f96 <base_dev_uart>
20000f92:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20000f94:	8082                	ret

20000f96 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20000f96:	1101                	addi	sp,sp,-32
20000f98:	ce06                	sw	ra,28(sp)
20000f9a:	cc22                	sw	s0,24(sp)
20000f9c:	ca26                	sw	s1,20(sp)
20000f9e:	c84a                	sw	s2,16(sp)
20000fa0:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000fa2:	c20d                	beqz	a2,20000fc4 <base_dev_uart+0x2e>
20000fa4:	8432                	mv	s0,a2
20000fa6:	892e                	mv	s2,a1
20000fa8:	89aa                	mv	s3,a0
20000faa:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20000fac:	00990533          	add	a0,s2,s1
20000fb0:	00054583          	lbu	a1,0(a0)
20000fb4:	854e                	mv	a0,s3
20000fb6:	3e6d                	jal	20000b70 <dif_uart_byte_send_polled>
20000fb8:	e519                	bnez	a0,20000fc6 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000fba:	0485                	addi	s1,s1,1
20000fbc:	fe9418e3          	bne	s0,s1,20000fac <base_dev_uart+0x16>
20000fc0:	84a2                	mv	s1,s0
20000fc2:	a011                	j	20000fc6 <base_dev_uart+0x30>
20000fc4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000fc6:	8526                	mv	a0,s1
20000fc8:	49b2                	lw	s3,12(sp)
20000fca:	4942                	lw	s2,16(sp)
20000fcc:	44d2                	lw	s1,20(sp)
20000fce:	4462                	lw	s0,24(sp)
20000fd0:	40f2                	lw	ra,28(sp)
20000fd2:	6105                	addi	sp,sp,32
20000fd4:	8082                	ret

20000fd6 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000fd6:	7179                	addi	sp,sp,-48
20000fd8:	c606                	sw	ra,12(sp)
20000fda:	d646                	sw	a7,44(sp)
20000fdc:	d442                	sw	a6,40(sp)
20000fde:	d23e                	sw	a5,36(sp)
20000fe0:	d03a                	sw	a4,32(sp)
20000fe2:	ce36                	sw	a3,28(sp)
20000fe4:	cc32                	sw	a2,24(sp)
20000fe6:	ca2e                	sw	a1,20(sp)
20000fe8:	effff597          	auipc	a1,0xeffff
20000fec:	01858593          	addi	a1,a1,24 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000ff0:	4190                	lw	a2,0(a1)
20000ff2:	41cc                	lw	a1,4(a1)
20000ff4:	872a                	mv	a4,a0
20000ff6:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000ff8:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000ffa:	8532                	mv	a0,a2
20000ffc:	863a                	mv	a2,a4
20000ffe:	200d                	jal	20001020 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20001000:	40b2                	lw	ra,12(sp)
20001002:	6145                	addi	sp,sp,48
20001004:	8082                	ret

20001006 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20001006:	effff697          	auipc	a3,0xeffff
2000100a:	ffa68693          	addi	a3,a3,-6 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000100e:	4290                	lw	a2,0(a3)
20001010:	42d4                	lw	a3,4(a3)
20001012:	872e                	mv	a4,a1
20001014:	87aa                	mv	a5,a0
20001016:	8532                	mv	a0,a2
20001018:	85b6                	mv	a1,a3
2000101a:	863e                	mv	a2,a5
2000101c:	86ba                	mv	a3,a4
2000101e:	a009                	j	20001020 <base_vfprintf>

20001020 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20001020:	7139                	addi	sp,sp,-64
20001022:	de06                	sw	ra,60(sp)
20001024:	dc22                	sw	s0,56(sp)
20001026:	da26                	sw	s1,52(sp)
20001028:	d84a                	sw	s2,48(sp)
2000102a:	d64e                	sw	s3,44(sp)
2000102c:	d452                	sw	s4,40(sp)
2000102e:	d256                	sw	s5,36(sp)
20001030:	d05a                	sw	s6,32(sp)
20001032:	ce5e                	sw	s7,28(sp)
20001034:	cc62                	sw	s8,24(sp)
20001036:	ca66                	sw	s9,20(sp)
20001038:	c86a                	sw	s10,16(sp)
2000103a:	c66e                	sw	s11,12(sp)
2000103c:	8bb2                	mv	s7,a2
2000103e:	892a                	mv	s2,a0
20001040:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20001042:	c199                	beqz	a1,20001048 <base_vfprintf+0x28>
20001044:	89ae                	mv	s3,a1
20001046:	a029                	j	20001050 <base_vfprintf+0x30>
20001048:	00000997          	auipc	s3,0x0
2000104c:	f3498993          	addi	s3,s3,-204 # 20000f7c <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001050:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20001052:	000bc503          	lbu	a0,0(s7)
20001056:	28050f63          	beqz	a0,200012f4 <base_vfprintf+0x2d4>
2000105a:	4b01                	li	s6,0
2000105c:	02500c13          	li	s8,37
20001060:	4ca5                	li	s9,9
20001062:	02000d13          	li	s10,32
20001066:	06800d93          	li	s11,104
2000106a:	00002a17          	auipc	s4,0x2
2000106e:	914a0a13          	addi	s4,s4,-1772 # 2000297e <__clz_tab+0x552>
20001072:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20001074:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20001076:	0ff57413          	andi	s0,a0,255
2000107a:	01840963          	beq	s0,s8,2000108c <base_vfprintf+0x6c>
2000107e:	c419                	beqz	s0,2000108c <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001080:	009b8533          	add	a0,s7,s1
20001084:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20001088:	0485                	addi	s1,s1,1
2000108a:	b7f5                	j	20001076 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
2000108c:	c491                	beqz	s1,20001098 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
2000108e:	854a                	mv	a0,s2
20001090:	85de                	mv	a1,s7
20001092:	8626                	mv	a2,s1
20001094:	9982                	jalr	s3
20001096:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20001098:	24040f63          	beqz	s0,200012f6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000109c:	009b8633          	add	a2,s7,s1
200010a0:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200010a4:	22050f63          	beqz	a0,200012e2 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200010a8:	fd050593          	addi	a1,a0,-48
200010ac:	0ff5f593          	andi	a1,a1,255
200010b0:	00bcf863          	bgeu	s9,a1,200010c0 <base_vfprintf+0xa0>
200010b4:	4401                	li	s0,0
200010b6:	4581                	li	a1,0
200010b8:	4605                	li	a2,1
200010ba:	028d7f63          	bgeu	s10,s0,200010f8 <base_vfprintf+0xd8>
200010be:	aca1                	j	20001316 <base_vfprintf+0x2f6>
200010c0:	4581                	li	a1,0
200010c2:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200010c4:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200010c6:	00b606b3          	add	a3,a2,a1
200010ca:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200010ce:	20068a63          	beqz	a3,200012e2 <base_vfprintf+0x2c2>
200010d2:	0ff57513          	andi	a0,a0,255
200010d6:	03540733          	mul	a4,s0,s5
200010da:	953a                	add	a0,a0,a4
200010dc:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200010e0:	fd068513          	addi	a0,a3,-48
200010e4:	0ff57713          	andi	a4,a0,255
200010e8:	0585                	addi	a1,a1,1
200010ea:	8536                	mv	a0,a3
200010ec:	fcecfde3          	bgeu	s9,a4,200010c6 <base_vfprintf+0xa6>
200010f0:	4601                	li	a2,0
200010f2:	8536                	mv	a0,a3
200010f4:	228d6163          	bltu	s10,s0,20001316 <base_vfprintf+0x2f6>
200010f8:	008036b3          	snez	a3,s0
200010fc:	8e55                	or	a2,a2,a3
200010fe:	20060c63          	beqz	a2,20001316 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001102:	95de                	add	a1,a1,s7
20001104:	95a6                	add	a1,a1,s1
20001106:	00258b93          	addi	s7,a1,2
2000110a:	02adce63          	blt	s11,a0,20001146 <base_vfprintf+0x126>
2000110e:	06100593          	li	a1,97
20001112:	06a5d563          	bge	a1,a0,2000117c <base_vfprintf+0x15c>
20001116:	06300593          	li	a1,99
2000111a:	0ca5cb63          	blt	a1,a0,200011f0 <base_vfprintf+0x1d0>
2000111e:	06200593          	li	a1,98
20001122:	14b50a63          	beq	a0,a1,20001276 <base_vfprintf+0x256>
20001126:	06300593          	li	a1,99
2000112a:	18b51f63          	bne	a0,a1,200012c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
2000112e:	4502                	lw	a0,0(sp)
20001130:	00450593          	addi	a1,a0,4
20001134:	c02e                	sw	a1,0(sp)
20001136:	4108                	lw	a0,0(a0)
20001138:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
2000113c:	4605                	li	a2,1
2000113e:	854a                	mv	a0,s2
20001140:	00b10593          	addi	a1,sp,11
20001144:	aa41                	j	200012d4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001146:	07200593          	li	a1,114
2000114a:	04a5dd63          	bge	a1,a0,200011a4 <base_vfprintf+0x184>
2000114e:	07700593          	li	a1,119
20001152:	0aa5c663          	blt	a1,a0,200011fe <base_vfprintf+0x1de>
20001156:	07300593          	li	a1,115
2000115a:	12b50963          	beq	a0,a1,2000128c <base_vfprintf+0x26c>
2000115e:	07500593          	li	a1,117
20001162:	16b51363          	bne	a0,a1,200012c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20001166:	4502                	lw	a0,0(sp)
20001168:	00450593          	addi	a1,a0,4
2000116c:	c02e                	sw	a1,0(sp)
2000116e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001170:	00001797          	auipc	a5,0x1
20001174:	e3178793          	addi	a5,a5,-463 # 20001fa1 <kDigitsLow>
20001178:	4729                	li	a4,10
2000117a:	a8cd                	j	2000126c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000117c:	13850763          	beq	a0,s8,200012aa <base_vfprintf+0x28a>
20001180:	04800593          	li	a1,72
20001184:	00b50663          	beq	a0,a1,20001190 <base_vfprintf+0x170>
20001188:	05800593          	li	a1,88
2000118c:	12b51e63          	bne	a0,a1,200012c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001190:	4502                	lw	a0,0(sp)
20001192:	00450593          	addi	a1,a0,4
20001196:	c02e                	sw	a1,0(sp)
20001198:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
2000119a:	00001797          	auipc	a5,0x1
2000119e:	e1778793          	addi	a5,a5,-489 # 20001fb1 <kDigitsHigh>
200011a2:	a0e1                	j	2000126a <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200011a4:	06900593          	li	a1,105
200011a8:	06b50d63          	beq	a0,a1,20001222 <base_vfprintf+0x202>
200011ac:	06f00593          	li	a1,111
200011b0:	10b50163          	beq	a0,a1,200012b2 <base_vfprintf+0x292>
200011b4:	07000593          	li	a1,112
200011b8:	10b51863          	bne	a0,a1,200012c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200011bc:	00001597          	auipc	a1,0x1
200011c0:	7c658593          	addi	a1,a1,1990 # 20002982 <__clz_tab+0x556>
200011c4:	4609                	li	a2,2
200011c6:	854a                	mv	a0,s2
200011c8:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
200011ca:	4582                	lw	a1,0(sp)
200011cc:	00458613          	addi	a2,a1,4
200011d0:	c032                	sw	a2,0(sp)
200011d2:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200011d4:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
200011d8:	00001797          	auipc	a5,0x1
200011dc:	dc978793          	addi	a5,a5,-567 # 20001fa1 <kDigitsLow>
200011e0:	46a1                	li	a3,8
200011e2:	4741                	li	a4,16
200011e4:	854a                	mv	a0,s2
200011e6:	85ce                	mv	a1,s3
200011e8:	2a55                	jal	2000139c <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
200011ea:	00a40b33          	add	s6,s0,a0
200011ee:	a0ed                	j	200012d8 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200011f0:	06400593          	li	a1,100
200011f4:	02b50763          	beq	a0,a1,20001222 <base_vfprintf+0x202>
200011f8:	07b50063          	beq	a0,s11,20001258 <base_vfprintf+0x238>
200011fc:	a0f1                	j	200012c8 <base_vfprintf+0x2a8>
200011fe:	07800593          	li	a1,120
20001202:	04b50b63          	beq	a0,a1,20001258 <base_vfprintf+0x238>
20001206:	07a00593          	li	a1,122
2000120a:	0ab51f63          	bne	a0,a1,200012c8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
2000120e:	4502                	lw	a0,0(sp)
20001210:	00450593          	addi	a1,a0,4
20001214:	c02e                	sw	a1,0(sp)
20001216:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001218:	00850593          	addi	a1,a0,8
2000121c:	c02e                	sw	a1,0(sp)
2000121e:	414c                	lw	a1,4(a0)
20001220:	a84d                	j	200012d2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20001222:	4502                	lw	a0,0(sp)
20001224:	00450593          	addi	a1,a0,4
20001228:	c02e                	sw	a1,0(sp)
2000122a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
2000122c:	557d                	li	a0,-1
2000122e:	00954c63          	blt	a0,s1,20001246 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20001232:	00001597          	auipc	a1,0x1
20001236:	74e58593          	addi	a1,a1,1870 # 20002980 <__clz_tab+0x554>
2000123a:	4605                	li	a2,1
2000123c:	854a                	mv	a0,s2
2000123e:	9982                	jalr	s3
20001240:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20001242:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001246:	00001797          	auipc	a5,0x1
2000124a:	d5b78793          	addi	a5,a5,-677 # 20001fa1 <kDigitsLow>
2000124e:	4729                	li	a4,10
20001250:	854a                	mv	a0,s2
20001252:	85ce                	mv	a1,s3
20001254:	8626                	mv	a2,s1
20001256:	a829                	j	20001270 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20001258:	4502                	lw	a0,0(sp)
2000125a:	00450593          	addi	a1,a0,4
2000125e:	c02e                	sw	a1,0(sp)
20001260:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20001262:	00001797          	auipc	a5,0x1
20001266:	d3f78793          	addi	a5,a5,-705 # 20001fa1 <kDigitsLow>
2000126a:	4741                	li	a4,16
2000126c:	854a                	mv	a0,s2
2000126e:	85ce                	mv	a1,s3
20001270:	86a2                	mv	a3,s0
20001272:	222d                	jal	2000139c <write_digits>
20001274:	a08d                	j	200012d6 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20001276:	4502                	lw	a0,0(sp)
20001278:	00450593          	addi	a1,a0,4
2000127c:	c02e                	sw	a1,0(sp)
2000127e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20001280:	00001797          	auipc	a5,0x1
20001284:	d2178793          	addi	a5,a5,-735 # 20001fa1 <kDigitsLow>
20001288:	4709                	li	a4,2
2000128a:	b7cd                	j	2000126c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
2000128c:	4502                	lw	a0,0(sp)
2000128e:	00450593          	addi	a1,a0,4
20001292:	c02e                	sw	a1,0(sp)
20001294:	410c                	lw	a1,0(a0)
20001296:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001298:	00a58633          	add	a2,a1,a0
2000129c:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200012a0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200012a2:	fa7d                	bnez	a2,20001298 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200012a4:	fff50613          	addi	a2,a0,-1
200012a8:	a02d                	j	200012d2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200012aa:	4605                	li	a2,1
200012ac:	854a                	mv	a0,s2
200012ae:	85d2                	mv	a1,s4
200012b0:	a015                	j	200012d4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200012b2:	4502                	lw	a0,0(sp)
200012b4:	00450593          	addi	a1,a0,4
200012b8:	c02e                	sw	a1,0(sp)
200012ba:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
200012bc:	00001797          	auipc	a5,0x1
200012c0:	ce578793          	addi	a5,a5,-795 # 20001fa1 <kDigitsLow>
200012c4:	4721                	li	a4,8
200012c6:	b75d                	j	2000126c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
200012c8:	00001597          	auipc	a1,0x1
200012cc:	cf958593          	addi	a1,a1,-775 # 20001fc1 <kUnknownSpec>
200012d0:	463d                	li	a2,15
200012d2:	854a                	mv	a0,s2
200012d4:	9982                	jalr	s3
200012d6:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
200012d8:	000bc503          	lbu	a0,0(s7)
200012dc:	d8051ce3          	bnez	a0,20001074 <base_vfprintf+0x54>
200012e0:	a819                	j	200012f6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
200012e2:	00001597          	auipc	a1,0x1
200012e6:	ca258593          	addi	a1,a1,-862 # 20001f84 <kErrorNul>
200012ea:	4645                	li	a2,17
200012ec:	854a                	mv	a0,s2
200012ee:	9982                	jalr	s3
200012f0:	9b2a                	add	s6,s6,a0
200012f2:	a011                	j	200012f6 <base_vfprintf+0x2d6>
200012f4:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
200012f6:	855a                	mv	a0,s6
200012f8:	4db2                	lw	s11,12(sp)
200012fa:	4d42                	lw	s10,16(sp)
200012fc:	4cd2                	lw	s9,20(sp)
200012fe:	4c62                	lw	s8,24(sp)
20001300:	4bf2                	lw	s7,28(sp)
20001302:	5b02                	lw	s6,32(sp)
20001304:	5a92                	lw	s5,36(sp)
20001306:	5a22                	lw	s4,40(sp)
20001308:	59b2                	lw	s3,44(sp)
2000130a:	5942                	lw	s2,48(sp)
2000130c:	54d2                	lw	s1,52(sp)
2000130e:	5462                	lw	s0,56(sp)
20001310:	50f2                	lw	ra,60(sp)
20001312:	6121                	addi	sp,sp,64
20001314:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001316:	00001597          	auipc	a1,0x1
2000131a:	c7f58593          	addi	a1,a1,-897 # 20001f95 <kErrorTooWide>
2000131e:	4631                	li	a2,12
20001320:	b7f1                	j	200012ec <base_vfprintf+0x2cc>

20001322 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20001322:	7179                	addi	sp,sp,-48
20001324:	ca06                	sw	ra,20(sp)
20001326:	d646                	sw	a7,44(sp)
20001328:	d442                	sw	a6,40(sp)
2000132a:	d23e                	sw	a5,36(sp)
2000132c:	d03a                	sw	a4,32(sp)
2000132e:	ce36                	sw	a3,28(sp)
20001330:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20001332:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001334:	c42a                	sw	a0,8(sp)
20001336:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001338:	00000597          	auipc	a1,0x0
2000133c:	01258593          	addi	a1,a1,18 # 2000134a <snprintf_sink>
20001340:	0028                	addi	a0,sp,8
20001342:	39f9                	jal	20001020 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001344:	40d2                	lw	ra,20(sp)
20001346:	6145                	addi	sp,sp,48
20001348:	8082                	ret

2000134a <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000134a:	1141                	addi	sp,sp,-16
2000134c:	c606                	sw	ra,12(sp)
2000134e:	c422                	sw	s0,8(sp)
20001350:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20001352:	4140                	lw	s0,4(a0)
20001354:	c005                	beqz	s0,20001374 <snprintf_sink+0x2a>
20001356:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20001358:	00c46363          	bltu	s0,a2,2000135e <snprintf_sink+0x14>
2000135c:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
2000135e:	4088                	lw	a0,0(s1)
20001360:	8622                	mv	a2,s0
20001362:	23dd                	jal	20001948 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001364:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001366:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001368:	9522                	add	a0,a0,s0
2000136a:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
2000136c:	40858533          	sub	a0,a1,s0
20001370:	c0c8                	sw	a0,4(s1)
20001372:	a011                	j	20001376 <snprintf_sink+0x2c>
20001374:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20001376:	8522                	mv	a0,s0
20001378:	4492                	lw	s1,4(sp)
2000137a:	4422                	lw	s0,8(sp)
2000137c:	40b2                	lw	ra,12(sp)
2000137e:	0141                	addi	sp,sp,16
20001380:	8082                	ret

20001382 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001382:	1101                	addi	sp,sp,-32
20001384:	c206                	sw	ra,4(sp)
20001386:	ce46                	sw	a7,28(sp)
20001388:	cc42                	sw	a6,24(sp)
2000138a:	ca3e                	sw	a5,20(sp)
2000138c:	c83a                	sw	a4,16(sp)
2000138e:	c636                	sw	a3,12(sp)
20001390:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001392:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20001394:	3171                	jal	20001020 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001396:	4092                	lw	ra,4(sp)
20001398:	6105                	addi	sp,sp,32
2000139a:	8082                	ret

2000139c <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
2000139c:	7139                	addi	sp,sp,-64
2000139e:	de06                	sw	ra,60(sp)
200013a0:	dc22                	sw	s0,56(sp)
200013a2:	da26                	sw	s1,52(sp)
200013a4:	d84a                	sw	s2,48(sp)
200013a6:	d64e                	sw	s3,44(sp)
200013a8:	892e                	mv	s2,a1
200013aa:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200013ac:	ca05                	beqz	a2,200013dc <write_digits+0x40>
200013ae:	4501                	li	a0,0
200013b0:	02b10813          	addi	a6,sp,43
200013b4:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
200013b6:	02e65633          	divu	a2,a2,a4
200013ba:	02e60433          	mul	s0,a2,a4
200013be:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
200013c2:	943e                	add	s0,s0,a5
200013c4:	00040403          	lb	s0,0(s0)
200013c8:	00a805b3          	add	a1,a6,a0
200013cc:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200013d0:	157d                	addi	a0,a0,-1
200013d2:	fee4f1e3          	bgeu	s1,a4,200013b4 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
200013d6:	40a00633          	neg	a2,a0
200013da:	a011                	j	200013de <write_digits+0x42>
200013dc:	4601                	li	a2,0
200013de:	4485                	li	s1,1
200013e0:	c291                	beqz	a3,200013e4 <write_digits+0x48>
200013e2:	84b6                	mv	s1,a3
200013e4:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
200013e8:	00a4e463          	bltu	s1,a0,200013f0 <write_digits+0x54>
200013ec:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200013f0:	00967f63          	bgeu	a2,s1,2000140e <write_digits+0x72>
200013f4:	0068                	addi	a0,sp,12
200013f6:	8d05                	sub	a0,a0,s1
200013f8:	02050513          	addi	a0,a0,32
200013fc:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001400:	03000593          	li	a1,48
20001404:	8622                	mv	a2,s0
20001406:	2ba1                	jal	2000195e <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001408:	147d                	addi	s0,s0,-1
2000140a:	fc7d                	bnez	s0,20001408 <write_digits+0x6c>
2000140c:	8626                	mv	a2,s1
2000140e:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001410:	8d11                	sub	a0,a0,a2
20001412:	02050593          	addi	a1,a0,32
20001416:	854e                	mv	a0,s3
20001418:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
2000141a:	59b2                	lw	s3,44(sp)
2000141c:	5942                	lw	s2,48(sp)
2000141e:	54d2                	lw	s1,52(sp)
20001420:	5462                	lw	s0,56(sp)
20001422:	50f2                	lw	ra,60(sp)
20001424:	6121                	addi	sp,sp,64
20001426:	8082                	ret

20001428 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20001428:	10500073          	wfi
2000142c:	8082                	ret

2000142e <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
2000142e:	1141                	addi	sp,sp,-16
20001430:	c606                	sw	ra,12(sp)
20001432:	00001597          	auipc	a1,0x1
20001436:	fce58593          	addi	a1,a1,-50 # 20002400 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
2000143a:	41d0                	lw	a2,4(a1)
2000143c:	4194                	lw	a3,0(a1)
2000143e:	02a605b3          	mul	a1,a2,a0
20001442:	02a6b633          	mulhu	a2,a3,a0
20001446:	95b2                	add	a1,a1,a2
20001448:	02a68533          	mul	a0,a3,a0
2000144c:	000f4637          	lui	a2,0xf4
20001450:	24060613          	addi	a2,a2,576 # f4240 <init_uart.kLogFields.2+0xe3fc0>
20001454:	4681                	li	a3,0
20001456:	2be9                	jal	20001a30 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20001458:	4801                	li	a6,0
2000145a:	4701                	li	a4,0

2000145c <read0>:
2000145c:	b8002873          	csrr	a6,mcycleh
20001460:	b00026f3          	csrr	a3,mcycle
20001464:	b8002773          	csrr	a4,mcycleh
20001468:	fee81ae3          	bne	a6,a4,2000145c <read0>
2000146c:	4781                	li	a5,0
2000146e:	4601                	li	a2,0

20001470 <read1>:
20001470:	b80027f3          	csrr	a5,mcycleh
20001474:	b0002773          	csrr	a4,mcycle
20001478:	b8002673          	csrr	a2,mcycleh
2000147c:	fec79ae3          	bne	a5,a2,20001470 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20001480:	00d73633          	sltu	a2,a4,a3
20001484:	410787b3          	sub	a5,a5,a6
20001488:	8f91                	sub	a5,a5,a2
2000148a:	00b78663          	beq	a5,a1,20001496 <read1+0x26>
2000148e:	00b7b733          	sltu	a4,a5,a1
20001492:	ff69                	bnez	a4,2000146c <read0+0x10>
20001494:	a031                	j	200014a0 <read1+0x30>
20001496:	40d70633          	sub	a2,a4,a3
2000149a:	00a63733          	sltu	a4,a2,a0
2000149e:	f779                	bnez	a4,2000146c <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200014a0:	40b2                	lw	ra,12(sp)
200014a2:	0141                	addi	sp,sp,16
200014a4:	8082                	ret

200014a6 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
200014a6:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
200014aa:	bff5                	j	200014a6 <abort>

200014ac <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
200014ac:	1101                	addi	sp,sp,-32
200014ae:	ce06                	sw	ra,28(sp)
200014b0:	cc22                	sw	s0,24(sp)
200014b2:	65b1                	lui	a1,0xc
200014b4:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
200014b8:	02b50163          	beq	a0,a1,200014da <test_status_set+0x2e>
200014bc:	65a5                	lui	a1,0x9
200014be:	05b5                	addi	a1,a1,13
200014c0:	02b50f63          	beq	a0,a1,200014fe <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200014c4:	00001597          	auipc	a1,0x1
200014c8:	f6058593          	addi	a1,a1,-160 # 20002424 <kDeviceTestStatusAddress>
200014cc:	418c                	lw	a1,0(a1)
200014ce:	c191                	beqz	a1,200014d2 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200014d0:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
200014d2:	4462                	lw	s0,24(sp)
200014d4:	40f2                	lw	ra,28(sp)
200014d6:	6105                	addi	sp,sp,32
200014d8:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200014da:	00001517          	auipc	a0,0x1
200014de:	f4e50513          	addi	a0,a0,-178 # 20002428 <kDeviceLogBypassUartAddress>
200014e2:	4108                	lw	a0,0(a0)
200014e4:	ed1d                	bnez	a0,20001522 <test_status_set+0x76>
200014e6:	00001597          	auipc	a1,0x1
200014ea:	afe58593          	addi	a1,a1,-1282 # 20001fe4 <kUnknownSpec+0x23>
200014ee:	840a                	mv	s0,sp
200014f0:	4651                	li	a2,20
200014f2:	8522                	mv	a0,s0
200014f4:	2991                	jal	20001948 <memcpy>
200014f6:	8522                	mv	a0,s0
200014f8:	98dff0ef          	jal	ra,20000e84 <base_log_internal_core>
200014fc:	a815                	j	20001530 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200014fe:	00001517          	auipc	a0,0x1
20001502:	f2a50513          	addi	a0,a0,-214 # 20002428 <kDeviceLogBypassUartAddress>
20001506:	4108                	lw	a0,0(a0)
20001508:	ed15                	bnez	a0,20001544 <test_status_set+0x98>
2000150a:	00001597          	auipc	a1,0x1
2000150e:	ac658593          	addi	a1,a1,-1338 # 20001fd0 <kUnknownSpec+0xf>
20001512:	840a                	mv	s0,sp
20001514:	4651                	li	a2,20
20001516:	8522                	mv	a0,s0
20001518:	2905                	jal	20001948 <memcpy>
2000151a:	8522                	mv	a0,s0
2000151c:	969ff0ef          	jal	ra,20000e84 <base_log_internal_core>
20001520:	a80d                	j	20001552 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20001522:	e000f517          	auipc	a0,0xe000f
20001526:	cbe50513          	addi	a0,a0,-834 # 101e0 <test_status_set.kLogFields.2>
2000152a:	4581                	li	a1,0
2000152c:	a03ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001530:	00001517          	auipc	a0,0x1
20001534:	ef450513          	addi	a0,a0,-268 # 20002424 <kDeviceTestStatusAddress>
20001538:	4108                	lw	a0,0(a0)
2000153a:	c50d                	beqz	a0,20001564 <test_status_set+0xb8>
2000153c:	65b1                	lui	a1,0xc
2000153e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20001542:	a005                	j	20001562 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20001544:	e000f517          	auipc	a0,0xe000f
20001548:	c8850513          	addi	a0,a0,-888 # 101cc <test_status_set.kLogFields>
2000154c:	4581                	li	a1,0
2000154e:	9e1ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001552:	00001517          	auipc	a0,0x1
20001556:	ed250513          	addi	a0,a0,-302 # 20002424 <kDeviceTestStatusAddress>
2000155a:	4108                	lw	a0,0(a0)
2000155c:	c501                	beqz	a0,20001564 <test_status_set+0xb8>
2000155e:	65a5                	lui	a1,0x9
20001560:	05b5                	addi	a1,a1,13
20001562:	c10c                	sw	a1,0(a0)
20001564:	3789                	jal	200014a6 <abort>
	...

20001568 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20001568:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000156a:	de06                	sw	ra,60(sp)
2000156c:	dc16                	sw	t0,56(sp)
2000156e:	da1a                	sw	t1,52(sp)
20001570:	d81e                	sw	t2,48(sp)
20001572:	d62a                	sw	a0,44(sp)
20001574:	d42e                	sw	a1,40(sp)
20001576:	d232                	sw	a2,36(sp)
20001578:	d036                	sw	a3,32(sp)
2000157a:	ce3a                	sw	a4,28(sp)
2000157c:	cc3e                	sw	a5,24(sp)
2000157e:	ca42                	sw	a6,20(sp)
20001580:	c846                	sw	a7,16(sp)
20001582:	c672                	sw	t3,12(sp)
20001584:	c476                	sw	t4,8(sp)
20001586:	c27a                	sw	t5,4(sp)
20001588:	c07e                	sw	t6,0(sp)
2000158a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000158e:	897d                	andi	a0,a0,31
20001590:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20001592:	00a5dc63          	bge	a1,a0,200015aa <handler_exception+0x42>
20001596:	4599                	li	a1,6
20001598:	02a5c263          	blt	a1,a0,200015bc <handler_exception+0x54>
2000159c:	458d                	li	a1,3
2000159e:	02b50c63          	beq	a0,a1,200015d6 <handler_exception+0x6e>
200015a2:	4595                	li	a1,5
200015a4:	02b50763          	beq	a0,a1,200015d2 <handler_exception+0x6a>
200015a8:	a015                	j	200015cc <handler_exception+0x64>
200015aa:	c115                	beqz	a0,200015ce <handler_exception+0x66>
200015ac:	4585                	li	a1,1
200015ae:	02b50063          	beq	a0,a1,200015ce <handler_exception+0x66>
200015b2:	4589                	li	a1,2
200015b4:	00b51c63          	bne	a0,a1,200015cc <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200015b8:	208d                	jal	2000161a <handler_instr_ill_fault>
200015ba:	a839                	j	200015d8 <handler_exception+0x70>
200015bc:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200015be:	00b50a63          	beq	a0,a1,200015d2 <handler_exception+0x6a>
200015c2:	45ad                	li	a1,11
200015c4:	00b51463          	bne	a0,a1,200015cc <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200015c8:	2065                	jal	20001670 <handler_ecall>
200015ca:	a039                	j	200015d8 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200015cc:	a001                	j	200015cc <handler_exception+0x64>
200015ce:	2805                	jal	200015fe <handler_instr_acc_fault>
200015d0:	a021                	j	200015d8 <handler_exception+0x70>
200015d2:	2049                	jal	20001654 <handler_lsu_fault>
200015d4:	a011                	j	200015d8 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200015d6:	208d                	jal	20001638 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200015d8:	4f82                	lw	t6,0(sp)
200015da:	4f12                	lw	t5,4(sp)
200015dc:	4ea2                	lw	t4,8(sp)
200015de:	4e32                	lw	t3,12(sp)
200015e0:	48c2                	lw	a7,16(sp)
200015e2:	4852                	lw	a6,20(sp)
200015e4:	47e2                	lw	a5,24(sp)
200015e6:	4772                	lw	a4,28(sp)
200015e8:	5682                	lw	a3,32(sp)
200015ea:	5612                	lw	a2,36(sp)
200015ec:	55a2                	lw	a1,40(sp)
200015ee:	5532                	lw	a0,44(sp)
200015f0:	53c2                	lw	t2,48(sp)
200015f2:	5352                	lw	t1,52(sp)
200015f4:	52e2                	lw	t0,56(sp)
200015f6:	50f2                	lw	ra,60(sp)
200015f8:	6121                	addi	sp,sp,64
200015fa:	30200073          	mret

200015fe <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
200015fe:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20001600:	de06                	sw	ra,60(sp)
20001602:	dc22                	sw	s0,56(sp)
20001604:	00001597          	auipc	a1,0x1
20001608:	41458593          	addi	a1,a1,1044 # 20002a18 <__clz_tab+0x5ec>
2000160c:	0040                	addi	s0,sp,4
2000160e:	03400613          	li	a2,52
20001612:	8522                	mv	a0,s0
20001614:	2e15                	jal	20001948 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
20001616:	8522                	mv	a0,s0
20001618:	2a71                	jal	200017b4 <print_exc_msg>

2000161a <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
2000161a:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
2000161c:	c686                	sw	ra,76(sp)
2000161e:	c4a2                	sw	s0,72(sp)
20001620:	00001597          	auipc	a1,0x1
20001624:	42c58593          	addi	a1,a1,1068 # 20002a4c <__clz_tab+0x620>
20001628:	00d10413          	addi	s0,sp,13
2000162c:	03b00613          	li	a2,59
20001630:	8522                	mv	a0,s0
20001632:	2e19                	jal	20001948 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20001634:	8522                	mv	a0,s0
20001636:	2abd                	jal	200017b4 <print_exc_msg>

20001638 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20001638:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
2000163a:	de06                	sw	ra,60(sp)
2000163c:	dc22                	sw	s0,56(sp)
2000163e:	00001597          	auipc	a1,0x1
20001642:	44958593          	addi	a1,a1,1097 # 20002a87 <__clz_tab+0x65b>
20001646:	840a                	mv	s0,sp
20001648:	03800613          	li	a2,56
2000164c:	8522                	mv	a0,s0
2000164e:	2ced                	jal	20001948 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20001650:	8522                	mv	a0,s0
20001652:	228d                	jal	200017b4 <print_exc_msg>

20001654 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20001654:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20001656:	de06                	sw	ra,60(sp)
20001658:	dc22                	sw	s0,56(sp)
2000165a:	00001597          	auipc	a1,0x1
2000165e:	46558593          	addi	a1,a1,1125 # 20002abf <__clz_tab+0x693>
20001662:	0020                	addi	s0,sp,8
20001664:	03000613          	li	a2,48
20001668:	8522                	mv	a0,s0
2000166a:	2cf9                	jal	20001948 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000166c:	8522                	mv	a0,s0
2000166e:	2299                	jal	200017b4 <print_exc_msg>

20001670 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20001670:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20001672:	ce06                	sw	ra,28(sp)
20001674:	cc22                	sw	s0,24(sp)
20001676:	00001517          	auipc	a0,0x1
2000167a:	db250513          	addi	a0,a0,-590 # 20002428 <kDeviceLogBypassUartAddress>
2000167e:	4108                	lw	a0,0(a0)
20001680:	c909                	beqz	a0,20001692 <handler_ecall+0x22>
20001682:	e000f517          	auipc	a0,0xe000f
20001686:	bae50513          	addi	a0,a0,-1106 # 10230 <handler_ecall.kLogFields>
2000168a:	4581                	li	a1,0
2000168c:	8a3ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
20001690:	a821                	j	200016a8 <handler_ecall+0x38>
20001692:	00001597          	auipc	a1,0x1
20001696:	9a258593          	addi	a1,a1,-1630 # 20002034 <kUnknownSpec+0x73>
2000169a:	840a                	mv	s0,sp
2000169c:	4651                	li	a2,20
2000169e:	8522                	mv	a0,s0
200016a0:	2465                	jal	20001948 <memcpy>
200016a2:	8522                	mv	a0,s0
200016a4:	fe0ff0ef          	jal	ra,20000e84 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200016a8:	a001                	j	200016a8 <handler_ecall+0x38>
200016aa:	0001                	nop

200016ac <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200016ac:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200016ae:	ce86                	sw	ra,92(sp)
200016b0:	cc96                	sw	t0,88(sp)
200016b2:	ca9a                	sw	t1,84(sp)
200016b4:	c89e                	sw	t2,80(sp)
200016b6:	c6a2                	sw	s0,76(sp)
200016b8:	c4aa                	sw	a0,72(sp)
200016ba:	c2ae                	sw	a1,68(sp)
200016bc:	c0b2                	sw	a2,64(sp)
200016be:	de36                	sw	a3,60(sp)
200016c0:	dc3a                	sw	a4,56(sp)
200016c2:	da3e                	sw	a5,52(sp)
200016c4:	d842                	sw	a6,48(sp)
200016c6:	d646                	sw	a7,44(sp)
200016c8:	d472                	sw	t3,40(sp)
200016ca:	d276                	sw	t4,36(sp)
200016cc:	d07a                	sw	t5,32(sp)
200016ce:	ce7e                	sw	t6,28(sp)
200016d0:	00001517          	auipc	a0,0x1
200016d4:	d5850513          	addi	a0,a0,-680 # 20002428 <kDeviceLogBypassUartAddress>
200016d8:	4108                	lw	a0,0(a0)
200016da:	c909                	beqz	a0,200016ec <handler_irq_software+0x40>
200016dc:	e000f517          	auipc	a0,0xe000f
200016e0:	b1850513          	addi	a0,a0,-1256 # 101f4 <handler_irq_software.kLogFields>
200016e4:	4581                	li	a1,0
200016e6:	849ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
200016ea:	a821                	j	20001702 <handler_irq_software+0x56>
200016ec:	00001597          	auipc	a1,0x1
200016f0:	90c58593          	addi	a1,a1,-1780 # 20001ff8 <kUnknownSpec+0x37>
200016f4:	0020                	addi	s0,sp,8
200016f6:	4651                	li	a2,20
200016f8:	8522                	mv	a0,s0
200016fa:	24b9                	jal	20001948 <memcpy>
200016fc:	8522                	mv	a0,s0
200016fe:	f86ff0ef          	jal	ra,20000e84 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
20001702:	a001                	j	20001702 <handler_irq_software+0x56>

20001704 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
20001704:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
20001706:	ce86                	sw	ra,92(sp)
20001708:	cc96                	sw	t0,88(sp)
2000170a:	ca9a                	sw	t1,84(sp)
2000170c:	c89e                	sw	t2,80(sp)
2000170e:	c6a2                	sw	s0,76(sp)
20001710:	c4aa                	sw	a0,72(sp)
20001712:	c2ae                	sw	a1,68(sp)
20001714:	c0b2                	sw	a2,64(sp)
20001716:	de36                	sw	a3,60(sp)
20001718:	dc3a                	sw	a4,56(sp)
2000171a:	da3e                	sw	a5,52(sp)
2000171c:	d842                	sw	a6,48(sp)
2000171e:	d646                	sw	a7,44(sp)
20001720:	d472                	sw	t3,40(sp)
20001722:	d276                	sw	t4,36(sp)
20001724:	d07a                	sw	t5,32(sp)
20001726:	ce7e                	sw	t6,28(sp)
20001728:	00001517          	auipc	a0,0x1
2000172c:	d0050513          	addi	a0,a0,-768 # 20002428 <kDeviceLogBypassUartAddress>
20001730:	4108                	lw	a0,0(a0)
20001732:	c909                	beqz	a0,20001744 <handler_irq_timer+0x40>
20001734:	e000f517          	auipc	a0,0xe000f
20001738:	ad450513          	addi	a0,a0,-1324 # 10208 <handler_irq_timer.kLogFields>
2000173c:	4581                	li	a1,0
2000173e:	ff0ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
20001742:	a821                	j	2000175a <handler_irq_timer+0x56>
20001744:	00001597          	auipc	a1,0x1
20001748:	8c858593          	addi	a1,a1,-1848 # 2000200c <kUnknownSpec+0x4b>
2000174c:	0020                	addi	s0,sp,8
2000174e:	4651                	li	a2,20
20001750:	8522                	mv	a0,s0
20001752:	2add                	jal	20001948 <memcpy>
20001754:	8522                	mv	a0,s0
20001756:	f2eff0ef          	jal	ra,20000e84 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
2000175a:	a001                	j	2000175a <handler_irq_timer+0x56>
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
2000175c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
2000175e:	ce86                	sw	ra,92(sp)
20001760:	cc96                	sw	t0,88(sp)
20001762:	ca9a                	sw	t1,84(sp)
20001764:	c89e                	sw	t2,80(sp)
20001766:	c6a2                	sw	s0,76(sp)
20001768:	c4aa                	sw	a0,72(sp)
2000176a:	c2ae                	sw	a1,68(sp)
2000176c:	c0b2                	sw	a2,64(sp)
2000176e:	de36                	sw	a3,60(sp)
20001770:	dc3a                	sw	a4,56(sp)
20001772:	da3e                	sw	a5,52(sp)
20001774:	d842                	sw	a6,48(sp)
20001776:	d646                	sw	a7,44(sp)
20001778:	d472                	sw	t3,40(sp)
2000177a:	d276                	sw	t4,36(sp)
2000177c:	d07a                	sw	t5,32(sp)
2000177e:	ce7e                	sw	t6,28(sp)
20001780:	00001517          	auipc	a0,0x1
20001784:	ca850513          	addi	a0,a0,-856 # 20002428 <kDeviceLogBypassUartAddress>
20001788:	4108                	lw	a0,0(a0)
2000178a:	c909                	beqz	a0,2000179c <handler_irq_timer+0x98>
2000178c:	e000f517          	auipc	a0,0xe000f
20001790:	a9050513          	addi	a0,a0,-1392 # 1021c <handler_irq_external.kLogFields>
20001794:	4581                	li	a1,0
20001796:	f98ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
2000179a:	a821                	j	200017b2 <handler_irq_timer+0xae>
2000179c:	00001597          	auipc	a1,0x1
200017a0:	88458593          	addi	a1,a1,-1916 # 20002020 <kUnknownSpec+0x5f>
200017a4:	0020                	addi	s0,sp,8
200017a6:	4651                	li	a2,20
200017a8:	8522                	mv	a0,s0
200017aa:	2a79                	jal	20001948 <memcpy>
200017ac:	8522                	mv	a0,s0
200017ae:	ed6ff0ef          	jal	ra,20000e84 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200017b2:	a001                	j	200017b2 <handler_irq_timer+0xae>

200017b4 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200017b4:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200017b6:	ce06                	sw	ra,28(sp)
200017b8:	cc22                	sw	s0,24(sp)
200017ba:	ca26                	sw	s1,20(sp)
200017bc:	00001597          	auipc	a1,0x1
200017c0:	c6c58593          	addi	a1,a1,-916 # 20002428 <kDeviceLogBypassUartAddress>
200017c4:	418c                	lw	a1,0(a1)
200017c6:	842a                	mv	s0,a0
200017c8:	c19d                	beqz	a1,200017ee <print_exc_msg+0x3a>
200017ca:	e000f517          	auipc	a0,0xe000f
200017ce:	a7a50513          	addi	a0,a0,-1414 # 10244 <print_exc_msg.kLogFields>
200017d2:	4585                	li	a1,1
200017d4:	8622                	mv	a2,s0
200017d6:	f58ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200017da:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200017de:	e000f517          	auipc	a0,0xe000f
200017e2:	a7a50513          	addi	a0,a0,-1414 # 10258 <print_exc_msg.kLogFields.6>
200017e6:	4585                	li	a1,1
200017e8:	f46ff0ef          	jal	ra,20000f2e <base_log_internal_dv>
200017ec:	a81d                	j	20001822 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200017ee:	00001597          	auipc	a1,0x1
200017f2:	85a58593          	addi	a1,a1,-1958 # 20002048 <kUnknownSpec+0x87>
200017f6:	848a                	mv	s1,sp
200017f8:	4651                	li	a2,20
200017fa:	8526                	mv	a0,s1
200017fc:	22b1                	jal	20001948 <memcpy>
200017fe:	8526                	mv	a0,s1
20001800:	85a2                	mv	a1,s0
20001802:	e82ff0ef          	jal	ra,20000e84 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20001806:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000180a:	00001597          	auipc	a1,0x1
2000180e:	85258593          	addi	a1,a1,-1966 # 2000205c <kUnknownSpec+0x9b>
20001812:	848a                	mv	s1,sp
20001814:	4651                	li	a2,20
20001816:	8526                	mv	a0,s1
20001818:	2a05                	jal	20001948 <memcpy>
2000181a:	8526                	mv	a0,s1
2000181c:	85a2                	mv	a1,s0
2000181e:	e66ff0ef          	jal	ra,20000e84 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20001822:	a001                	j	20001822 <print_exc_msg+0x6e>

20001824 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20001824:	1141                	addi	sp,sp,-16
20001826:	c606                	sw	ra,12(sp)
20001828:	c422                	sw	s0,8(sp)
2000182a:	6511                	lui	a0,0x4
2000182c:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20001830:	39b5                	jal	200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20001832:	00001517          	auipc	a0,0x1
20001836:	bc650513          	addi	a0,a0,-1082 # 200023f8 <kDeviceType>
2000183a:	4108                	lw	a0,0(a0)
2000183c:	c111                	beqz	a0,20001840 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
2000183e:	2815                	jal	20001872 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20001840:	ba5fe0ef          	jal	ra,200003e4 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20001844:	00000597          	auipc	a1,0x0
20001848:	59058593          	addi	a1,a1,1424 # 20001dd4 <kTestConfig>
2000184c:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20001850:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20001852:	c191                	beqz	a1,20001856 <main+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20001854:	2839                	jal	20001872 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20001856:	20dd                	jal	2000193c <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20001858:	e409                	bnez	s0,20001862 <main+0x3e>
2000185a:	6531                	lui	a0,0xc
2000185c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001860:	a019                	j	20001866 <main+0x42>
20001862:	6525                	lui	a0,0x9
20001864:	0535                	addi	a0,a0,13
20001866:	3199                	jal	200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20001868:	4505                	li	a0,1
2000186a:	4422                	lw	s0,8(sp)
2000186c:	40b2                	lw	ra,12(sp)
2000186e:	0141                	addi	sp,sp,16
20001870:	8082                	ret

20001872 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20001872:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20001874:	ce06                	sw	ra,28(sp)
20001876:	cc22                	sw	s0,24(sp)
20001878:	ca26                	sw	s1,20(sp)
2000187a:	efffe597          	auipc	a1,0xefffe
2000187e:	79a58593          	addi	a1,a1,1946 # 10000014 <uart0>
20001882:	40000537          	lui	a0,0x40000
20001886:	84aff0ef          	jal	ra,200008d0 <dif_uart_init>
2000188a:	00001497          	auipc	s1,0x1
2000188e:	b9e48493          	addi	s1,s1,-1122 # 20002428 <kDeviceLogBypassUartAddress>
20001892:	c915                	beqz	a0,200018c6 <init_uart+0x54>
20001894:	4088                	lw	a0,0(s1)
20001896:	c909                	beqz	a0,200018a8 <init_uart+0x36>
20001898:	e000f517          	auipc	a0,0xe000f
2000189c:	9d450513          	addi	a0,a0,-1580 # 1026c <init_uart.kLogFields>
200018a0:	4581                	li	a1,0
200018a2:	e8cff0ef          	jal	ra,20000f2e <base_log_internal_dv>
200018a6:	a821                	j	200018be <init_uart+0x4c>
200018a8:	00000597          	auipc	a1,0x0
200018ac:	7c858593          	addi	a1,a1,1992 # 20002070 <kUnknownSpec+0xaf>
200018b0:	840a                	mv	s0,sp
200018b2:	4651                	li	a2,20
200018b4:	8522                	mv	a0,s0
200018b6:	2849                	jal	20001948 <memcpy>
200018b8:	8522                	mv	a0,s0
200018ba:	dcaff0ef          	jal	ra,20000e84 <base_log_internal_core>
200018be:	6531                	lui	a0,0xc
200018c0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200018c4:	36e5                	jal	200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200018c6:	00001517          	auipc	a0,0x1
200018ca:	b5250513          	addi	a0,a0,-1198 # 20002418 <kUartBaudrate>
200018ce:	4108                	lw	a0,0(a0)
200018d0:	00001597          	auipc	a1,0x1
200018d4:	b3858593          	addi	a1,a1,-1224 # 20002408 <kClockFreqPeripheralHz>
200018d8:	418c                	lw	a1,0(a1)
200018da:	c02a                	sw	a0,0(sp)
200018dc:	c22e                	sw	a1,4(sp)
200018de:	4505                	li	a0,1
200018e0:	c42a                	sw	a0,8(sp)
200018e2:	c62a                	sw	a0,12(sp)
200018e4:	efffe517          	auipc	a0,0xefffe
200018e8:	73050513          	addi	a0,a0,1840 # 10000014 <uart0>
200018ec:	858a                	mv	a1,sp
200018ee:	ff1fe0ef          	jal	ra,200008de <dif_uart_configure>
200018f2:	c915                	beqz	a0,20001926 <init_uart+0xb4>
200018f4:	4088                	lw	a0,0(s1)
200018f6:	c909                	beqz	a0,20001908 <init_uart+0x96>
200018f8:	e000f517          	auipc	a0,0xe000f
200018fc:	98850513          	addi	a0,a0,-1656 # 10280 <init_uart.kLogFields.2>
20001900:	4581                	li	a1,0
20001902:	e2cff0ef          	jal	ra,20000f2e <base_log_internal_dv>
20001906:	a821                	j	2000191e <init_uart+0xac>
20001908:	00000597          	auipc	a1,0x0
2000190c:	77c58593          	addi	a1,a1,1916 # 20002084 <kUnknownSpec+0xc3>
20001910:	840a                	mv	s0,sp
20001912:	4651                	li	a2,20
20001914:	8522                	mv	a0,s0
20001916:	280d                	jal	20001948 <memcpy>
20001918:	8522                	mv	a0,s0
2000191a:	d6aff0ef          	jal	ra,20000e84 <base_log_internal_core>
2000191e:	6531                	lui	a0,0xc
20001920:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001924:	3661                	jal	200014ac <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
20001926:	efffe517          	auipc	a0,0xefffe
2000192a:	6ee50513          	addi	a0,a0,1774 # 10000014 <uart0>
2000192e:	e52ff0ef          	jal	ra,20000f80 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20001932:	44d2                	lw	s1,20(sp)
20001934:	4462                	lw	s0,24(sp)
20001936:	40f2                	lw	ra,28(sp)
20001938:	6105                	addi	sp,sp,32
2000193a:	8082                	ret

2000193c <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
2000193c:	8082                	ret
	...

20001940 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20001940:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20001942:	8082                	ret

20001944 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20001944:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20001946:	8082                	ret

20001948 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20001948:	ca11                	beqz	a2,2000195c <memcpy+0x14>
2000194a:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
2000194c:	00058703          	lb	a4,0(a1)
20001950:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20001954:	167d                	addi	a2,a2,-1
20001956:	0685                	addi	a3,a3,1
20001958:	0585                	addi	a1,a1,1
2000195a:	fa6d                	bnez	a2,2000194c <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
2000195c:	8082                	ret

2000195e <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000195e:	c619                	beqz	a2,2000196c <memset+0xe>
20001960:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20001962:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20001966:	167d                	addi	a2,a2,-1
20001968:	0685                	addi	a3,a3,1
2000196a:	fe65                	bnez	a2,20001962 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
2000196c:	8082                	ret

2000196e <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
2000196e:	ce09                	beqz	a2,20001988 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20001970:	00054683          	lbu	a3,0(a0)
20001974:	0005c703          	lbu	a4,0(a1)
20001978:	00e6ea63          	bltu	a3,a4,2000198c <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
2000197c:	00d76b63          	bltu	a4,a3,20001992 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20001980:	167d                	addi	a2,a2,-1
20001982:	0585                	addi	a1,a1,1
20001984:	0505                	addi	a0,a0,1
20001986:	f66d                	bnez	a2,20001970 <memcmp+0x2>
20001988:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
2000198a:	8082                	ret
2000198c:	fd600513          	li	a0,-42
20001990:	8082                	ret
20001992:	02a00513          	li	a0,42
20001996:	8082                	ret

20001998 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001998:	ca11                	beqz	a2,200019ac <memchr+0x14>
2000199a:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
2000199e:	00054683          	lbu	a3,0(a0)
200019a2:	00b68663          	beq	a3,a1,200019ae <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
200019a6:	167d                	addi	a2,a2,-1
200019a8:	0505                	addi	a0,a0,1
200019aa:	fa75                	bnez	a2,2000199e <memchr+0x6>
200019ac:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
200019ae:	8082                	ret

200019b0 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200019b0:	ce09                	beqz	a2,200019ca <memrchr+0x1a>
200019b2:	fff50693          	addi	a3,a0,-1
200019b6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
200019ba:	00c68733          	add	a4,a3,a2
200019be:	00074703          	lbu	a4,0(a4) # 20000000 <_stack_end+0xffe0000>
200019c2:	00b70663          	beq	a4,a1,200019ce <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
200019c6:	167d                	addi	a2,a2,-1
200019c8:	fa6d                	bnez	a2,200019ba <memrchr+0xa>
200019ca:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
200019cc:	8082                	ret
200019ce:	9532                	add	a0,a0,a2
200019d0:	157d                	addi	a0,a0,-1
200019d2:	8082                	ret

200019d4 <irq_set_vector_offset>:
irq_set_vector_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:14
static const uint32_t IRQ_EXT_ENABLE_OFFSET = 11;
static const uint32_t IRQ_TIMER_ENABLE_OFFSET = 7;
static const uint32_t IRQ_SW_ENABLE_OFFSET = 3;

void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
200019d4:	30551073          	csrw	mtvec,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:15
}
200019d8:	8082                	ret

200019da <irq_global_ctrl>:
irq_global_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:18

void irq_global_ctrl(bool en) {
  if (en) {
200019da:	c509                	beqz	a0,200019e4 <irq_global_ctrl+0xa>
200019dc:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
200019de:	30052073          	csrs	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
200019e2:	8082                	ret
200019e4:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
200019e6:	30053073          	csrc	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
}
200019ea:	8082                	ret

200019ec <irq_external_ctrl>:
irq_external_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
200019ec:	c519                	beqz	a0,200019fa <irq_external_ctrl+0xe>
200019ee:	6505                	lui	a0,0x1
200019f0:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
200019f4:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
200019f8:	8082                	ret
200019fa:	6505                	lui	a0,0x1
200019fc:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20001a00:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
}
20001a04:	8082                	ret

20001a06 <irq_timer_ctrl>:
irq_timer_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
20001a06:	c511                	beqz	a0,20001a12 <irq_timer_ctrl+0xc>
20001a08:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001a0c:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20001a10:	8082                	ret
20001a12:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20001a16:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
}
20001a1a:	8082                	ret

20001a1c <irq_software_ctrl>:
irq_software_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
20001a1c:	c509                	beqz	a0,20001a26 <irq_software_ctrl+0xa>
20001a1e:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001a20:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20001a24:	8082                	ret
20001a26:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20001a28:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
}
20001a2c:	8082                	ret
	...

20001a30 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001a30:	88aa                	mv	a7,a0
20001a32:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001a34:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001a36:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001a38:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001a3a:	20069963          	bnez	a3,20001c4c <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001a3e:	200026b7          	lui	a3,0x20002
20001a42:	42c68693          	addi	a3,a3,1068 # 2000242c <__clz_tab>
20001a46:	0cc5f063          	bgeu	a1,a2,20001b06 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001a4a:	6741                	lui	a4,0x10
20001a4c:	0ae67663          	bgeu	a2,a4,20001af8 <__udivdi3+0xc8>
20001a50:	0ff00713          	li	a4,255
20001a54:	00c73733          	sltu	a4,a4,a2
20001a58:	070e                	slli	a4,a4,0x3
20001a5a:	00e65533          	srl	a0,a2,a4
20001a5e:	96aa                	add	a3,a3,a0
20001a60:	0006c683          	lbu	a3,0(a3)
20001a64:	02000513          	li	a0,32
20001a68:	9736                	add	a4,a4,a3
20001a6a:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001a6e:	00e50c63          	beq	a0,a4,20001a86 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001a72:	00d797b3          	sll	a5,a5,a3
20001a76:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001a7a:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001a7e:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001a82:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001a86:	01085893          	srli	a7,a6,0x10
20001a8a:	0315d7b3          	divu	a5,a1,a7
20001a8e:	01081613          	slli	a2,a6,0x10
20001a92:	8241                	srli	a2,a2,0x10
20001a94:	01035713          	srli	a4,t1,0x10
20001a98:	0315f6b3          	remu	a3,a1,a7
20001a9c:	853e                	mv	a0,a5
20001a9e:	02f605b3          	mul	a1,a2,a5
20001aa2:	06c2                	slli	a3,a3,0x10
20001aa4:	8f55                	or	a4,a4,a3
20001aa6:	00b77c63          	bgeu	a4,a1,20001abe <__udivdi3+0x8e>
20001aaa:	9742                	add	a4,a4,a6
20001aac:	fff78513          	addi	a0,a5,-1
20001ab0:	01076763          	bltu	a4,a6,20001abe <__udivdi3+0x8e>
20001ab4:	00b77563          	bgeu	a4,a1,20001abe <__udivdi3+0x8e>
20001ab8:	ffe78513          	addi	a0,a5,-2
20001abc:	9742                	add	a4,a4,a6
20001abe:	8f0d                	sub	a4,a4,a1
20001ac0:	031777b3          	remu	a5,a4,a7
20001ac4:	0342                	slli	t1,t1,0x10
20001ac6:	01035313          	srli	t1,t1,0x10
20001aca:	03175733          	divu	a4,a4,a7
20001ace:	07c2                	slli	a5,a5,0x10
20001ad0:	0067e333          	or	t1,a5,t1
20001ad4:	02e606b3          	mul	a3,a2,a4
20001ad8:	863a                	mv	a2,a4
20001ada:	00d37b63          	bgeu	t1,a3,20001af0 <__udivdi3+0xc0>
20001ade:	9342                	add	t1,t1,a6
20001ae0:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001ae4:	01036663          	bltu	t1,a6,20001af0 <__udivdi3+0xc0>
20001ae8:	00d37463          	bgeu	t1,a3,20001af0 <__udivdi3+0xc0>
20001aec:	ffe70613          	addi	a2,a4,-2
20001af0:	0542                	slli	a0,a0,0x10
20001af2:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001af4:	4581                	li	a1,0
20001af6:	a85d                	j	20001bac <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001af8:	01000537          	lui	a0,0x1000
20001afc:	4741                	li	a4,16
20001afe:	f4a66ee3          	bltu	a2,a0,20001a5a <__udivdi3+0x2a>
20001b02:	4761                	li	a4,24
20001b04:	bf99                	j	20001a5a <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001b06:	e601                	bnez	a2,20001b0e <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001b08:	4705                	li	a4,1
20001b0a:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001b0e:	6741                	lui	a4,0x10
20001b10:	08e87f63          	bgeu	a6,a4,20001bae <__udivdi3+0x17e>
20001b14:	0ff00713          	li	a4,255
20001b18:	01077363          	bgeu	a4,a6,20001b1e <__udivdi3+0xee>
20001b1c:	4521                	li	a0,8
20001b1e:	00a85733          	srl	a4,a6,a0
20001b22:	96ba                	add	a3,a3,a4
20001b24:	0006c703          	lbu	a4,0(a3)
20001b28:	02000613          	li	a2,32
20001b2c:	972a                	add	a4,a4,a0
20001b2e:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001b32:	08e61563          	bne	a2,a4,20001bbc <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001b36:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001b3a:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001b3c:	01085893          	srli	a7,a6,0x10
20001b40:	01081613          	slli	a2,a6,0x10
20001b44:	8241                	srli	a2,a2,0x10
20001b46:	01035713          	srli	a4,t1,0x10
20001b4a:	0317f6b3          	remu	a3,a5,a7
20001b4e:	0317d7b3          	divu	a5,a5,a7
20001b52:	06c2                	slli	a3,a3,0x10
20001b54:	8f55                	or	a4,a4,a3
20001b56:	02f60e33          	mul	t3,a2,a5
20001b5a:	853e                	mv	a0,a5
20001b5c:	01c77c63          	bgeu	a4,t3,20001b74 <__udivdi3+0x144>
20001b60:	9742                	add	a4,a4,a6
20001b62:	fff78513          	addi	a0,a5,-1
20001b66:	01076763          	bltu	a4,a6,20001b74 <__udivdi3+0x144>
20001b6a:	01c77563          	bgeu	a4,t3,20001b74 <__udivdi3+0x144>
20001b6e:	ffe78513          	addi	a0,a5,-2
20001b72:	9742                	add	a4,a4,a6
20001b74:	41c70733          	sub	a4,a4,t3
20001b78:	031777b3          	remu	a5,a4,a7
20001b7c:	0342                	slli	t1,t1,0x10
20001b7e:	01035313          	srli	t1,t1,0x10
20001b82:	03175733          	divu	a4,a4,a7
20001b86:	07c2                	slli	a5,a5,0x10
20001b88:	0067e333          	or	t1,a5,t1
20001b8c:	02e606b3          	mul	a3,a2,a4
20001b90:	863a                	mv	a2,a4
20001b92:	00d37b63          	bgeu	t1,a3,20001ba8 <__udivdi3+0x178>
20001b96:	9342                	add	t1,t1,a6
20001b98:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001b9c:	01036663          	bltu	t1,a6,20001ba8 <__udivdi3+0x178>
20001ba0:	00d37463          	bgeu	t1,a3,20001ba8 <__udivdi3+0x178>
20001ba4:	ffe70613          	addi	a2,a4,-2
20001ba8:	0542                	slli	a0,a0,0x10
20001baa:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001bac:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001bae:	01000737          	lui	a4,0x1000
20001bb2:	4541                	li	a0,16
20001bb4:	f6e865e3          	bltu	a6,a4,20001b1e <__udivdi3+0xee>
20001bb8:	4561                	li	a0,24
20001bba:	b795                	j	20001b1e <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001bbc:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001bc0:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001bc4:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001bc8:	00d797b3          	sll	a5,a5,a3
20001bcc:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001bd0:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001bd4:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001bd8:	0315f733          	remu	a4,a1,a7
20001bdc:	01081793          	slli	a5,a6,0x10
20001be0:	83c1                	srli	a5,a5,0x10
20001be2:	01065513          	srli	a0,a2,0x10
20001be6:	0315d5b3          	divu	a1,a1,a7
20001bea:	0742                	slli	a4,a4,0x10
20001bec:	8f49                	or	a4,a4,a0
20001bee:	02b786b3          	mul	a3,a5,a1
20001bf2:	852e                	mv	a0,a1
20001bf4:	00d77c63          	bgeu	a4,a3,20001c0c <__udivdi3+0x1dc>
20001bf8:	9742                	add	a4,a4,a6
20001bfa:	fff58513          	addi	a0,a1,-1
20001bfe:	01076763          	bltu	a4,a6,20001c0c <__udivdi3+0x1dc>
20001c02:	00d77563          	bgeu	a4,a3,20001c0c <__udivdi3+0x1dc>
20001c06:	ffe58513          	addi	a0,a1,-2
20001c0a:	9742                	add	a4,a4,a6
20001c0c:	40d706b3          	sub	a3,a4,a3
20001c10:	0316f733          	remu	a4,a3,a7
20001c14:	0642                	slli	a2,a2,0x10
20001c16:	8241                	srli	a2,a2,0x10
20001c18:	0316d6b3          	divu	a3,a3,a7
20001c1c:	0742                	slli	a4,a4,0x10
20001c1e:	02d788b3          	mul	a7,a5,a3
20001c22:	00c767b3          	or	a5,a4,a2
20001c26:	8736                	mv	a4,a3
20001c28:	0117fc63          	bgeu	a5,a7,20001c40 <__udivdi3+0x210>
20001c2c:	97c2                	add	a5,a5,a6
20001c2e:	fff68713          	addi	a4,a3,-1
20001c32:	0107e763          	bltu	a5,a6,20001c40 <__udivdi3+0x210>
20001c36:	0117f563          	bgeu	a5,a7,20001c40 <__udivdi3+0x210>
20001c3a:	ffe68713          	addi	a4,a3,-2
20001c3e:	97c2                	add	a5,a5,a6
20001c40:	01051593          	slli	a1,a0,0x10
20001c44:	411787b3          	sub	a5,a5,a7
20001c48:	8dd9                	or	a1,a1,a4
20001c4a:	bdcd                	j	20001b3c <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001c4c:	14d5e263          	bltu	a1,a3,20001d90 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001c50:	6741                	lui	a4,0x10
20001c52:	02e6ff63          	bgeu	a3,a4,20001c90 <__udivdi3+0x260>
20001c56:	0ff00713          	li	a4,255
20001c5a:	00d735b3          	sltu	a1,a4,a3
20001c5e:	058e                	slli	a1,a1,0x3
20001c60:	20002737          	lui	a4,0x20002
20001c64:	00b6d533          	srl	a0,a3,a1
20001c68:	42c70713          	addi	a4,a4,1068 # 2000242c <__clz_tab>
20001c6c:	972a                	add	a4,a4,a0
20001c6e:	00074703          	lbu	a4,0(a4)
20001c72:	02000513          	li	a0,32
20001c76:	972e                	add	a4,a4,a1
20001c78:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001c7c:	02e51163          	bne	a0,a4,20001c9e <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001c80:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001c82:	f2f6e5e3          	bltu	a3,a5,20001bac <__udivdi3+0x17c>
20001c86:	00c8b533          	sltu	a0,a7,a2
20001c8a:	00154513          	xori	a0,a0,1
20001c8e:	bf39                	j	20001bac <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001c90:	01000737          	lui	a4,0x1000
20001c94:	45c1                	li	a1,16
20001c96:	fce6e5e3          	bltu	a3,a4,20001c60 <__udivdi3+0x230>
20001c9a:	45e1                	li	a1,24
20001c9c:	b7d1                	j	20001c60 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001c9e:	00e65333          	srl	t1,a2,a4
20001ca2:	00b696b3          	sll	a3,a3,a1
20001ca6:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001caa:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001cae:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001cb2:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cb6:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001cba:	00b797b3          	sll	a5,a5,a1
20001cbe:	00e8d733          	srl	a4,a7,a4
20001cc2:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cc6:	01031793          	slli	a5,t1,0x10
20001cca:	83c1                	srli	a5,a5,0x10
20001ccc:	01085713          	srli	a4,a6,0x10
20001cd0:	02a65633          	divu	a2,a2,a0
20001cd4:	06c2                	slli	a3,a3,0x10
20001cd6:	8f55                	or	a4,a4,a3
20001cd8:	02c78f33          	mul	t5,a5,a2
20001cdc:	8e32                	mv	t3,a2
20001cde:	01e77c63          	bgeu	a4,t5,20001cf6 <__udivdi3+0x2c6>
20001ce2:	971a                	add	a4,a4,t1
20001ce4:	fff60e13          	addi	t3,a2,-1
20001ce8:	00676763          	bltu	a4,t1,20001cf6 <__udivdi3+0x2c6>
20001cec:	01e77563          	bgeu	a4,t5,20001cf6 <__udivdi3+0x2c6>
20001cf0:	ffe60e13          	addi	t3,a2,-2
20001cf4:	971a                	add	a4,a4,t1
20001cf6:	41e70733          	sub	a4,a4,t5
20001cfa:	02a776b3          	remu	a3,a4,a0
20001cfe:	02a75733          	divu	a4,a4,a0
20001d02:	06c2                	slli	a3,a3,0x10
20001d04:	02e78633          	mul	a2,a5,a4
20001d08:	01081793          	slli	a5,a6,0x10
20001d0c:	83c1                	srli	a5,a5,0x10
20001d0e:	8fd5                	or	a5,a5,a3
20001d10:	86ba                	mv	a3,a4
20001d12:	00c7fc63          	bgeu	a5,a2,20001d2a <__udivdi3+0x2fa>
20001d16:	979a                	add	a5,a5,t1
20001d18:	fff70693          	addi	a3,a4,-1 # ffffff <init_uart.kLogFields.2+0xfefd7f>
20001d1c:	0067e763          	bltu	a5,t1,20001d2a <__udivdi3+0x2fa>
20001d20:	00c7f563          	bgeu	a5,a2,20001d2a <__udivdi3+0x2fa>
20001d24:	ffe70693          	addi	a3,a4,-2
20001d28:	979a                	add	a5,a5,t1
20001d2a:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d2e:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d30:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d32:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001d36:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d3a:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d3c:	00def6b3          	and	a3,t4,a3
20001d40:	01055613          	srli	a2,a0,0x10
20001d44:	010ede93          	srli	t4,t4,0x10
20001d48:	02d80333          	mul	t1,a6,a3
20001d4c:	02d606b3          	mul	a3,a2,a3
20001d50:	01035713          	srli	a4,t1,0x10
20001d54:	03d80833          	mul	a6,a6,t4
20001d58:	9836                	add	a6,a6,a3
20001d5a:	9742                	add	a4,a4,a6
20001d5c:	03d60633          	mul	a2,a2,t4
20001d60:	00d77363          	bgeu	a4,a3,20001d66 <__udivdi3+0x336>
20001d64:	9672                	add	a2,a2,t3
20001d66:	01075693          	srli	a3,a4,0x10
20001d6a:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001d6c:	02c7e063          	bltu	a5,a2,20001d8c <__udivdi3+0x35c>
20001d70:	d8c792e3          	bne	a5,a2,20001af4 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d74:	67c1                	lui	a5,0x10
20001d76:	17fd                	addi	a5,a5,-1
20001d78:	8f7d                	and	a4,a4,a5
20001d7a:	0742                	slli	a4,a4,0x10
20001d7c:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001d80:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d84:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001d86:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001d88:	e2e8f2e3          	bgeu	a7,a4,20001bac <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001d8c:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001d8e:	b39d                	j	20001af4 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001d90:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001d92:	4501                	li	a0,0
20001d94:	bd21                	j	20001bac <__udivdi3+0x17c>
