
sw/device/tests/dif_aes_smoketest_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001b36  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000981  20001cb8  20001cb8  00002cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  2000263c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20002644  00004008  2**2
                  ALLOC
  8 .logs.fields  000001f4  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007b6d  00000000  00000000  00004222  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015b1  00000000  00000000  0000bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000d340  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004235  00000000  00000000  0000d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000381e  00000000  00000000  0001160d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e0  00000000  00000000  00014e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000223e  00000000  00000000  0001520b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000788  00000000  00000000  0001744c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	5ec60613          	addi	a2,a2,1516 # 2000263c <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	446000ef          	jal	ra,200004c4 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	aabd                	j	20000200 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	1080006f          	j	20000208 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	2400006f          	j	2000034c <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2880006f          	j	200003a4 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2d00006f          	j	200003fc <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000180:	10500073          	wfi
20000184:	8082                	ret

20000186 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000186:	1141                	addi	sp,sp,-16
20000188:	c606                	sw	ra,12(sp)
2000018a:	00002597          	auipc	a1,0x2
2000018e:	bd658593          	addi	a1,a1,-1066 # 20001d60 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000192:	41d0                	lw	a2,4(a1)
20000194:	4194                	lw	a3,0(a1)
20000196:	02a605b3          	mul	a1,a2,a0
2000019a:	02a6b633          	mulhu	a2,a3,a0
2000019e:	95b2                	add	a1,a1,a2
200001a0:	02a68533          	mul	a0,a3,a0
200001a4:	000f4637          	lui	a2,0xf4
200001a8:	24060613          	addi	a2,a2,576 # f4240 <test_status_set.kLogFields.2+0xe4060>
200001ac:	4681                	li	a3,0
200001ae:	7a2010ef          	jal	ra,20001950 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200001b2:	4801                	li	a6,0
200001b4:	4701                	li	a4,0

200001b6 <read0>:
200001b6:	b8002873          	csrr	a6,mcycleh
200001ba:	b00026f3          	csrr	a3,mcycle
200001be:	b8002773          	csrr	a4,mcycleh
200001c2:	fee81ae3          	bne	a6,a4,200001b6 <read0>
200001c6:	4781                	li	a5,0
200001c8:	4601                	li	a2,0

200001ca <read1>:
200001ca:	b80027f3          	csrr	a5,mcycleh
200001ce:	b0002773          	csrr	a4,mcycle
200001d2:	b8002673          	csrr	a2,mcycleh
200001d6:	fec79ae3          	bne	a5,a2,200001ca <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200001da:	00d73633          	sltu	a2,a4,a3
200001de:	410787b3          	sub	a5,a5,a6
200001e2:	8f91                	sub	a5,a5,a2
200001e4:	00b78663          	beq	a5,a1,200001f0 <read1+0x26>
200001e8:	00b7b733          	sltu	a4,a5,a1
200001ec:	ff69                	bnez	a4,200001c6 <read0+0x10>
200001ee:	a031                	j	200001fa <read1+0x30>
200001f0:	40d70633          	sub	a2,a4,a3
200001f4:	00a63733          	sltu	a4,a2,a0
200001f8:	f779                	bnez	a4,200001c6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200001fa:	40b2                	lw	ra,12(sp)
200001fc:	0141                	addi	sp,sp,16
200001fe:	8082                	ret

20000200 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000200:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000204:	bff5                	j	20000200 <abort>
	...

20000208 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000208:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000020a:	de06                	sw	ra,60(sp)
2000020c:	dc16                	sw	t0,56(sp)
2000020e:	da1a                	sw	t1,52(sp)
20000210:	d81e                	sw	t2,48(sp)
20000212:	d62a                	sw	a0,44(sp)
20000214:	d42e                	sw	a1,40(sp)
20000216:	d232                	sw	a2,36(sp)
20000218:	d036                	sw	a3,32(sp)
2000021a:	ce3a                	sw	a4,28(sp)
2000021c:	cc3e                	sw	a5,24(sp)
2000021e:	ca42                	sw	a6,20(sp)
20000220:	c846                	sw	a7,16(sp)
20000222:	c672                	sw	t3,12(sp)
20000224:	c476                	sw	t4,8(sp)
20000226:	c27a                	sw	t5,4(sp)
20000228:	c07e                	sw	t6,0(sp)
2000022a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000022e:	897d                	andi	a0,a0,31
20000230:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20000232:	00a5dc63          	bge	a1,a0,2000024a <handler_exception+0x42>
20000236:	4599                	li	a1,6
20000238:	02a5c263          	blt	a1,a0,2000025c <handler_exception+0x54>
2000023c:	458d                	li	a1,3
2000023e:	02b50c63          	beq	a0,a1,20000276 <handler_exception+0x6e>
20000242:	4595                	li	a1,5
20000244:	02b50763          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000248:	a015                	j	2000026c <handler_exception+0x64>
2000024a:	c115                	beqz	a0,2000026e <handler_exception+0x66>
2000024c:	4585                	li	a1,1
2000024e:	02b50063          	beq	a0,a1,2000026e <handler_exception+0x66>
20000252:	4589                	li	a1,2
20000254:	00b51c63          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000258:	208d                	jal	200002ba <handler_instr_ill_fault>
2000025a:	a839                	j	20000278 <handler_exception+0x70>
2000025c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000025e:	00b50a63          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000262:	45ad                	li	a1,11
20000264:	00b51463          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000268:	2065                	jal	20000310 <handler_ecall>
2000026a:	a039                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000026c:	a001                	j	2000026c <handler_exception+0x64>
2000026e:	2805                	jal	2000029e <handler_instr_acc_fault>
20000270:	a021                	j	20000278 <handler_exception+0x70>
20000272:	2049                	jal	200002f4 <handler_lsu_fault>
20000274:	a011                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20000276:	208d                	jal	200002d8 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20000278:	4f82                	lw	t6,0(sp)
2000027a:	4f12                	lw	t5,4(sp)
2000027c:	4ea2                	lw	t4,8(sp)
2000027e:	4e32                	lw	t3,12(sp)
20000280:	48c2                	lw	a7,16(sp)
20000282:	4852                	lw	a6,20(sp)
20000284:	47e2                	lw	a5,24(sp)
20000286:	4772                	lw	a4,28(sp)
20000288:	5682                	lw	a3,32(sp)
2000028a:	5612                	lw	a2,36(sp)
2000028c:	55a2                	lw	a1,40(sp)
2000028e:	5532                	lw	a0,44(sp)
20000290:	53c2                	lw	t2,48(sp)
20000292:	5352                	lw	t1,52(sp)
20000294:	52e2                	lw	t0,56(sp)
20000296:	50f2                	lw	ra,60(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	30200073          	mret

2000029e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
2000029e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200002a0:	de06                	sw	ra,60(sp)
200002a2:	dc22                	sw	s0,56(sp)
200002a4:	00002597          	auipc	a1,0x2
200002a8:	e0c58593          	addi	a1,a1,-500 # 200020b0 <__clz_tab+0x160>
200002ac:	0040                	addi	s0,sp,4
200002ae:	03400613          	li	a2,52
200002b2:	8522                	mv	a0,s0
200002b4:	2e35                	jal	200005f0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200002b6:	8522                	mv	a0,s0
200002b8:	2a71                	jal	20000454 <print_exc_msg>

200002ba <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200002ba:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200002bc:	c686                	sw	ra,76(sp)
200002be:	c4a2                	sw	s0,72(sp)
200002c0:	00002597          	auipc	a1,0x2
200002c4:	e2458593          	addi	a1,a1,-476 # 200020e4 <__clz_tab+0x194>
200002c8:	00d10413          	addi	s0,sp,13
200002cc:	03b00613          	li	a2,59
200002d0:	8522                	mv	a0,s0
200002d2:	2e39                	jal	200005f0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200002d4:	8522                	mv	a0,s0
200002d6:	2abd                	jal	20000454 <print_exc_msg>

200002d8 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200002d8:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200002da:	de06                	sw	ra,60(sp)
200002dc:	dc22                	sw	s0,56(sp)
200002de:	00002597          	auipc	a1,0x2
200002e2:	e4158593          	addi	a1,a1,-447 # 2000211f <__clz_tab+0x1cf>
200002e6:	840a                	mv	s0,sp
200002e8:	03800613          	li	a2,56
200002ec:	8522                	mv	a0,s0
200002ee:	2609                	jal	200005f0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200002f0:	8522                	mv	a0,s0
200002f2:	228d                	jal	20000454 <print_exc_msg>

200002f4 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200002f4:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
200002f6:	de06                	sw	ra,60(sp)
200002f8:	dc22                	sw	s0,56(sp)
200002fa:	00002597          	auipc	a1,0x2
200002fe:	e5d58593          	addi	a1,a1,-419 # 20002157 <__clz_tab+0x207>
20000302:	0020                	addi	s0,sp,8
20000304:	03000613          	li	a2,48
20000308:	8522                	mv	a0,s0
2000030a:	24dd                	jal	200005f0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000030c:	8522                	mv	a0,s0
2000030e:	2299                	jal	20000454 <print_exc_msg>

20000310 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000310:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20000312:	ce06                	sw	ra,28(sp)
20000314:	cc22                	sw	s0,24(sp)
20000316:	00002517          	auipc	a0,0x2
2000031a:	a7250513          	addi	a0,a0,-1422 # 20001d88 <kDeviceLogBypassUartAddress>
2000031e:	4108                	lw	a0,0(a0)
20000320:	c909                	beqz	a0,20000332 <handler_ecall+0x22>
20000322:	e0010517          	auipc	a0,0xe0010
20000326:	d1a50513          	addi	a0,a0,-742 # 1003c <handler_ecall.kLogFields>
2000032a:	4581                	li	a1,0
2000032c:	49f000ef          	jal	ra,20000fca <base_log_internal_dv>
20000330:	a821                	j	20000348 <handler_ecall+0x38>
20000332:	00002597          	auipc	a1,0x2
20000336:	9c258593          	addi	a1,a1,-1598 # 20001cf4 <__udivdi3+0x3a4>
2000033a:	840a                	mv	s0,sp
2000033c:	4651                	li	a2,20
2000033e:	8522                	mv	a0,s0
20000340:	2c45                	jal	200005f0 <memcpy>
20000342:	8522                	mv	a0,s0
20000344:	3dd000ef          	jal	ra,20000f20 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20000348:	a001                	j	20000348 <handler_ecall+0x38>
2000034a:	0001                	nop

2000034c <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
2000034c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
2000034e:	ce86                	sw	ra,92(sp)
20000350:	cc96                	sw	t0,88(sp)
20000352:	ca9a                	sw	t1,84(sp)
20000354:	c89e                	sw	t2,80(sp)
20000356:	c6a2                	sw	s0,76(sp)
20000358:	c4aa                	sw	a0,72(sp)
2000035a:	c2ae                	sw	a1,68(sp)
2000035c:	c0b2                	sw	a2,64(sp)
2000035e:	de36                	sw	a3,60(sp)
20000360:	dc3a                	sw	a4,56(sp)
20000362:	da3e                	sw	a5,52(sp)
20000364:	d842                	sw	a6,48(sp)
20000366:	d646                	sw	a7,44(sp)
20000368:	d472                	sw	t3,40(sp)
2000036a:	d276                	sw	t4,36(sp)
2000036c:	d07a                	sw	t5,32(sp)
2000036e:	ce7e                	sw	t6,28(sp)
20000370:	00002517          	auipc	a0,0x2
20000374:	a1850513          	addi	a0,a0,-1512 # 20001d88 <kDeviceLogBypassUartAddress>
20000378:	4108                	lw	a0,0(a0)
2000037a:	c909                	beqz	a0,2000038c <handler_irq_software+0x40>
2000037c:	e0010517          	auipc	a0,0xe0010
20000380:	c8450513          	addi	a0,a0,-892 # 10000 <_dv_log_offset>
20000384:	4581                	li	a1,0
20000386:	445000ef          	jal	ra,20000fca <base_log_internal_dv>
2000038a:	a821                	j	200003a2 <handler_irq_software+0x56>
2000038c:	00002597          	auipc	a1,0x2
20000390:	92c58593          	addi	a1,a1,-1748 # 20001cb8 <__udivdi3+0x368>
20000394:	0020                	addi	s0,sp,8
20000396:	4651                	li	a2,20
20000398:	8522                	mv	a0,s0
2000039a:	2c99                	jal	200005f0 <memcpy>
2000039c:	8522                	mv	a0,s0
2000039e:	383000ef          	jal	ra,20000f20 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200003a2:	a001                	j	200003a2 <handler_irq_software+0x56>

200003a4 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200003a4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200003a6:	ce86                	sw	ra,92(sp)
200003a8:	cc96                	sw	t0,88(sp)
200003aa:	ca9a                	sw	t1,84(sp)
200003ac:	c89e                	sw	t2,80(sp)
200003ae:	c6a2                	sw	s0,76(sp)
200003b0:	c4aa                	sw	a0,72(sp)
200003b2:	c2ae                	sw	a1,68(sp)
200003b4:	c0b2                	sw	a2,64(sp)
200003b6:	de36                	sw	a3,60(sp)
200003b8:	dc3a                	sw	a4,56(sp)
200003ba:	da3e                	sw	a5,52(sp)
200003bc:	d842                	sw	a6,48(sp)
200003be:	d646                	sw	a7,44(sp)
200003c0:	d472                	sw	t3,40(sp)
200003c2:	d276                	sw	t4,36(sp)
200003c4:	d07a                	sw	t5,32(sp)
200003c6:	ce7e                	sw	t6,28(sp)
200003c8:	00002517          	auipc	a0,0x2
200003cc:	9c050513          	addi	a0,a0,-1600 # 20001d88 <kDeviceLogBypassUartAddress>
200003d0:	4108                	lw	a0,0(a0)
200003d2:	c909                	beqz	a0,200003e4 <handler_irq_timer+0x40>
200003d4:	e0010517          	auipc	a0,0xe0010
200003d8:	c4050513          	addi	a0,a0,-960 # 10014 <handler_irq_timer.kLogFields>
200003dc:	4581                	li	a1,0
200003de:	3ed000ef          	jal	ra,20000fca <base_log_internal_dv>
200003e2:	a821                	j	200003fa <handler_irq_timer+0x56>
200003e4:	00002597          	auipc	a1,0x2
200003e8:	8e858593          	addi	a1,a1,-1816 # 20001ccc <__udivdi3+0x37c>
200003ec:	0020                	addi	s0,sp,8
200003ee:	4651                	li	a2,20
200003f0:	8522                	mv	a0,s0
200003f2:	2afd                	jal	200005f0 <memcpy>
200003f4:	8522                	mv	a0,s0
200003f6:	32b000ef          	jal	ra,20000f20 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
200003fa:	a001                	j	200003fa <handler_irq_timer+0x56>

200003fc <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
200003fc:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
200003fe:	ce86                	sw	ra,92(sp)
20000400:	cc96                	sw	t0,88(sp)
20000402:	ca9a                	sw	t1,84(sp)
20000404:	c89e                	sw	t2,80(sp)
20000406:	c6a2                	sw	s0,76(sp)
20000408:	c4aa                	sw	a0,72(sp)
2000040a:	c2ae                	sw	a1,68(sp)
2000040c:	c0b2                	sw	a2,64(sp)
2000040e:	de36                	sw	a3,60(sp)
20000410:	dc3a                	sw	a4,56(sp)
20000412:	da3e                	sw	a5,52(sp)
20000414:	d842                	sw	a6,48(sp)
20000416:	d646                	sw	a7,44(sp)
20000418:	d472                	sw	t3,40(sp)
2000041a:	d276                	sw	t4,36(sp)
2000041c:	d07a                	sw	t5,32(sp)
2000041e:	ce7e                	sw	t6,28(sp)
20000420:	00002517          	auipc	a0,0x2
20000424:	96850513          	addi	a0,a0,-1688 # 20001d88 <kDeviceLogBypassUartAddress>
20000428:	4108                	lw	a0,0(a0)
2000042a:	c909                	beqz	a0,2000043c <handler_irq_external+0x40>
2000042c:	e0010517          	auipc	a0,0xe0010
20000430:	bfc50513          	addi	a0,a0,-1028 # 10028 <handler_irq_external.kLogFields>
20000434:	4581                	li	a1,0
20000436:	395000ef          	jal	ra,20000fca <base_log_internal_dv>
2000043a:	a821                	j	20000452 <handler_irq_external+0x56>
2000043c:	00002597          	auipc	a1,0x2
20000440:	8a458593          	addi	a1,a1,-1884 # 20001ce0 <__udivdi3+0x390>
20000444:	0020                	addi	s0,sp,8
20000446:	4651                	li	a2,20
20000448:	8522                	mv	a0,s0
2000044a:	225d                	jal	200005f0 <memcpy>
2000044c:	8522                	mv	a0,s0
2000044e:	2d3000ef          	jal	ra,20000f20 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000452:	a001                	j	20000452 <handler_irq_external+0x56>

20000454 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000454:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000456:	ce06                	sw	ra,28(sp)
20000458:	cc22                	sw	s0,24(sp)
2000045a:	ca26                	sw	s1,20(sp)
2000045c:	00002597          	auipc	a1,0x2
20000460:	92c58593          	addi	a1,a1,-1748 # 20001d88 <kDeviceLogBypassUartAddress>
20000464:	418c                	lw	a1,0(a1)
20000466:	842a                	mv	s0,a0
20000468:	c19d                	beqz	a1,2000048e <print_exc_msg+0x3a>
2000046a:	e0010517          	auipc	a0,0xe0010
2000046e:	be650513          	addi	a0,a0,-1050 # 10050 <print_exc_msg.kLogFields>
20000472:	4585                	li	a1,1
20000474:	8622                	mv	a2,s0
20000476:	355000ef          	jal	ra,20000fca <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000047a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000047e:	e0010517          	auipc	a0,0xe0010
20000482:	be650513          	addi	a0,a0,-1050 # 10064 <print_exc_msg.kLogFields.6>
20000486:	4585                	li	a1,1
20000488:	343000ef          	jal	ra,20000fca <base_log_internal_dv>
2000048c:	a81d                	j	200004c2 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000048e:	00002597          	auipc	a1,0x2
20000492:	87a58593          	addi	a1,a1,-1926 # 20001d08 <__udivdi3+0x3b8>
20000496:	848a                	mv	s1,sp
20000498:	4651                	li	a2,20
2000049a:	8526                	mv	a0,s1
2000049c:	2a91                	jal	200005f0 <memcpy>
2000049e:	8526                	mv	a0,s1
200004a0:	85a2                	mv	a1,s0
200004a2:	27f000ef          	jal	ra,20000f20 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200004a6:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200004aa:	00002597          	auipc	a1,0x2
200004ae:	87258593          	addi	a1,a1,-1934 # 20001d1c <__udivdi3+0x3cc>
200004b2:	848a                	mv	s1,sp
200004b4:	4651                	li	a2,20
200004b6:	8526                	mv	a0,s1
200004b8:	2a25                	jal	200005f0 <memcpy>
200004ba:	8526                	mv	a0,s1
200004bc:	85a2                	mv	a1,s0
200004be:	263000ef          	jal	ra,20000f20 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200004c2:	a001                	j	200004c2 <print_exc_msg+0x6e>

200004c4 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
200004c4:	1141                	addi	sp,sp,-16
200004c6:	c606                	sw	ra,12(sp)
200004c8:	c422                	sw	s0,8(sp)
200004ca:	6511                	lui	a0,0x4
200004cc:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
200004d0:	3c0010ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
200004d4:	00002517          	auipc	a0,0x2
200004d8:	88450513          	addi	a0,a0,-1916 # 20001d58 <kDeviceType>
200004dc:	4108                	lw	a0,0(a0)
200004de:	c111                	beqz	a0,200004e2 <main+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
200004e0:	2815                	jal	20000514 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
200004e2:	2a69                	jal	2000067c <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
200004e4:	00002597          	auipc	a1,0x2
200004e8:	9ac58593          	addi	a1,a1,-1620 # 20001e90 <kTestConfig>
200004ec:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
200004f0:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
200004f2:	c191                	beqz	a1,200004f6 <main+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
200004f4:	2005                	jal	20000514 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
200004f6:	20fd                	jal	200005e4 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
200004f8:	e409                	bnez	s0,20000502 <main+0x3e>
200004fa:	6531                	lui	a0,0xc
200004fc:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000500:	a019                	j	20000506 <main+0x42>
20000502:	6525                	lui	a0,0x9
20000504:	0535                	addi	a0,a0,13
20000506:	38a010ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000050a:	4505                	li	a0,1
2000050c:	4422                	lw	s0,8(sp)
2000050e:	40b2                	lw	ra,12(sp)
20000510:	0141                	addi	sp,sp,16
20000512:	8082                	ret

20000514 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000514:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000516:	ce06                	sw	ra,28(sp)
20000518:	cc22                	sw	s0,24(sp)
2000051a:	ca26                	sw	s1,20(sp)
2000051c:	f0000597          	auipc	a1,0xf0000
20000520:	aec58593          	addi	a1,a1,-1300 # 10000008 <_data_end>
20000524:	40000537          	lui	a0,0x40000
20000528:	7a1000ef          	jal	ra,200014c8 <dif_uart_init>
2000052c:	00002497          	auipc	s1,0x2
20000530:	85c48493          	addi	s1,s1,-1956 # 20001d88 <kDeviceLogBypassUartAddress>
20000534:	c91d                	beqz	a0,2000056a <init_uart+0x56>
20000536:	4088                	lw	a0,0(s1)
20000538:	c909                	beqz	a0,2000054a <init_uart+0x36>
2000053a:	e0010517          	auipc	a0,0xe0010
2000053e:	b3e50513          	addi	a0,a0,-1218 # 10078 <init_uart.kLogFields>
20000542:	4581                	li	a1,0
20000544:	287000ef          	jal	ra,20000fca <base_log_internal_dv>
20000548:	a821                	j	20000560 <init_uart+0x4c>
2000054a:	00001597          	auipc	a1,0x1
2000054e:	7e658593          	addi	a1,a1,2022 # 20001d30 <__udivdi3+0x3e0>
20000552:	840a                	mv	s0,sp
20000554:	4651                	li	a2,20
20000556:	8522                	mv	a0,s0
20000558:	2861                	jal	200005f0 <memcpy>
2000055a:	8522                	mv	a0,s0
2000055c:	1c5000ef          	jal	ra,20000f20 <base_log_internal_core>
20000560:	6531                	lui	a0,0xc
20000562:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000566:	32a010ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
2000056a:	00002517          	auipc	a0,0x2
2000056e:	80e50513          	addi	a0,a0,-2034 # 20001d78 <kUartBaudrate>
20000572:	4108                	lw	a0,0(a0)
20000574:	00001597          	auipc	a1,0x1
20000578:	7f458593          	addi	a1,a1,2036 # 20001d68 <kClockFreqPeripheralHz>
2000057c:	418c                	lw	a1,0(a1)
2000057e:	c02a                	sw	a0,0(sp)
20000580:	c22e                	sw	a1,4(sp)
20000582:	4505                	li	a0,1
20000584:	c42a                	sw	a0,8(sp)
20000586:	c62a                	sw	a0,12(sp)
20000588:	f0000517          	auipc	a0,0xf0000
2000058c:	a8050513          	addi	a0,a0,-1408 # 10000008 <_data_end>
20000590:	858a                	mv	a1,sp
20000592:	745000ef          	jal	ra,200014d6 <dif_uart_configure>
20000596:	c91d                	beqz	a0,200005cc <init_uart+0xb8>
20000598:	4088                	lw	a0,0(s1)
2000059a:	c909                	beqz	a0,200005ac <init_uart+0x98>
2000059c:	e0010517          	auipc	a0,0xe0010
200005a0:	af050513          	addi	a0,a0,-1296 # 1008c <init_uart.kLogFields.2>
200005a4:	4581                	li	a1,0
200005a6:	225000ef          	jal	ra,20000fca <base_log_internal_dv>
200005aa:	a821                	j	200005c2 <init_uart+0xae>
200005ac:	00001597          	auipc	a1,0x1
200005b0:	79858593          	addi	a1,a1,1944 # 20001d44 <__udivdi3+0x3f4>
200005b4:	840a                	mv	s0,sp
200005b6:	4651                	li	a2,20
200005b8:	8522                	mv	a0,s0
200005ba:	281d                	jal	200005f0 <memcpy>
200005bc:	8522                	mv	a0,s0
200005be:	163000ef          	jal	ra,20000f20 <base_log_internal_core>
200005c2:	6531                	lui	a0,0xc
200005c4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005c8:	2c8010ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
200005cc:	f0000517          	auipc	a0,0xf0000
200005d0:	a3c50513          	addi	a0,a0,-1476 # 10000008 <_data_end>
200005d4:	249000ef          	jal	ra,2000101c <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
200005d8:	44d2                	lw	s1,20(sp)
200005da:	4462                	lw	s0,24(sp)
200005dc:	40f2                	lw	ra,28(sp)
200005de:	6105                	addi	sp,sp,32
200005e0:	8082                	ret
	...

200005e4 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
200005e4:	8082                	ret
	...

200005e8 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200005e8:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
200005ea:	8082                	ret

200005ec <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200005ec:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200005ee:	8082                	ret

200005f0 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200005f0:	ca11                	beqz	a2,20000604 <memcpy+0x14>
200005f2:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200005f4:	00058703          	lb	a4,0(a1)
200005f8:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200005fc:	167d                	addi	a2,a2,-1
200005fe:	0685                	addi	a3,a3,1
20000600:	0585                	addi	a1,a1,1
20000602:	fa6d                	bnez	a2,200005f4 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20000604:	8082                	ret

20000606 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000606:	c619                	beqz	a2,20000614 <memset+0xe>
20000608:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
2000060a:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
2000060e:	167d                	addi	a2,a2,-1
20000610:	0685                	addi	a3,a3,1
20000612:	fe65                	bnez	a2,2000060a <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20000614:	8082                	ret

20000616 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20000616:	ce09                	beqz	a2,20000630 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20000618:	00054683          	lbu	a3,0(a0)
2000061c:	0005c703          	lbu	a4,0(a1)
20000620:	00e6ea63          	bltu	a3,a4,20000634 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20000624:	00d76b63          	bltu	a4,a3,2000063a <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20000628:	167d                	addi	a2,a2,-1
2000062a:	0585                	addi	a1,a1,1
2000062c:	0505                	addi	a0,a0,1
2000062e:	f66d                	bnez	a2,20000618 <memcmp+0x2>
20000630:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
20000632:	8082                	ret
20000634:	fd600513          	li	a0,-42
20000638:	8082                	ret
2000063a:	02a00513          	li	a0,42
2000063e:	8082                	ret

20000640 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000640:	ca11                	beqz	a2,20000654 <memchr+0x14>
20000642:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20000646:	00054683          	lbu	a3,0(a0)
2000064a:	00b68663          	beq	a3,a1,20000656 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
2000064e:	167d                	addi	a2,a2,-1
20000650:	0505                	addi	a0,a0,1
20000652:	fa75                	bnez	a2,20000646 <memchr+0x6>
20000654:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20000656:	8082                	ret

20000658 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000658:	ce09                	beqz	a2,20000672 <memrchr+0x1a>
2000065a:	fff50693          	addi	a3,a0,-1
2000065e:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000662:	00c68733          	add	a4,a3,a2
20000666:	00074703          	lbu	a4,0(a4)
2000066a:	00b70663          	beq	a4,a1,20000676 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
2000066e:	167d                	addi	a2,a2,-1
20000670:	fa6d                	bnez	a2,20000662 <memrchr+0xa>
20000672:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000674:	8082                	ret
20000676:	9532                	add	a0,a0,a2
20000678:	157d                	addi	a0,a0,-1
2000067a:	8082                	ret

2000067c <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:68
        kDifAesOk);

  return status;
}

bool test_main(void) {
2000067c:	716d                	addi	sp,sp,-272
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:71
  dif_aes_t aes;

  LOG_INFO("Running AES test");
2000067e:	10112623          	sw	ra,268(sp)
20000682:	10812423          	sw	s0,264(sp)
20000686:	10912223          	sw	s1,260(sp)
2000068a:	11212023          	sw	s2,256(sp)
2000068e:	dfce                	sw	s3,252(sp)
20000690:	ddd2                	sw	s4,248(sp)
20000692:	dbd6                	sw	s5,244(sp)
20000694:	d9da                	sw	s6,240(sp)
20000696:	d7de                	sw	s7,236(sp)
20000698:	d5e2                	sw	s8,232(sp)
2000069a:	d3e6                	sw	s9,228(sp)
2000069c:	d1ea                	sw	s10,224(sp)
2000069e:	00001517          	auipc	a0,0x1
200006a2:	6ea50513          	addi	a0,a0,1770 # 20001d88 <kDeviceLogBypassUartAddress>
200006a6:	00052b83          	lw	s7,0(a0)
200006aa:	000b8a63          	beqz	s7,200006be <test_main+0x42>
200006ae:	e0010517          	auipc	a0,0xe0010
200006b2:	9f250513          	addi	a0,a0,-1550 # 100a0 <test_main.kLogFields>
200006b6:	4581                	li	a1,0
200006b8:	113000ef          	jal	ra,20000fca <base_log_internal_dv>
200006bc:	a821                	j	200006d4 <test_main+0x58>
200006be:	00001597          	auipc	a1,0x1
200006c2:	6ce58593          	addi	a1,a1,1742 # 20001d8c <kDeviceLogBypassUartAddress+0x4>
200006c6:	18a0                	addi	s0,sp,120
200006c8:	4651                	li	a2,20
200006ca:	8522                	mv	a0,s0
200006cc:	3715                	jal	200005f0 <memcpy>
200006ce:	8522                	mv	a0,s0
200006d0:	051000ef          	jal	ra,20000f20 <base_log_internal_core>
200006d4:	41160537          	lui	a0,0x41160
200006d8:	4589                	li	a1,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200006da:	cd0c                	sw	a1,24(a0)
200006dc:	41150537          	lui	a0,0x41150
200006e0:	4585                	li	a1,1
200006e2:	c94c                	sw	a1,20(a0)
200006e4:	41170537          	lui	a0,0x41170
200006e8:	45a5                	li	a1,9
200006ea:	c94c                	sw	a1,20(a0)
200006ec:	09ac                	addi	a1,sp,216
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:85

  // Initialise AES.
  dif_aes_params_t params = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_AES_BASE_ADDR),
  };
  CHECK(dif_aes_init(params, &aes) == kDifAesOk);
200006ee:	41100537          	lui	a0,0x41100
200006f2:	21c9                	jal	20000bb4 <dif_aes_init>
200006f4:	c91d                	beqz	a0,2000072a <test_main+0xae>
200006f6:	000b8a63          	beqz	s7,2000070a <test_main+0x8e>
200006fa:	e0010517          	auipc	a0,0xe0010
200006fe:	9ba50513          	addi	a0,a0,-1606 # 100b4 <test_main.kLogFields.2>
20000702:	4581                	li	a1,0
20000704:	0c7000ef          	jal	ra,20000fca <base_log_internal_dv>
20000708:	a821                	j	20000720 <test_main+0xa4>
2000070a:	00001597          	auipc	a1,0x1
2000070e:	69658593          	addi	a1,a1,1686 # 20001da0 <kDeviceLogBypassUartAddress+0x18>
20000712:	18a0                	addi	s0,sp,120
20000714:	4651                	li	a2,20
20000716:	8522                	mv	a0,s0
20000718:	3de1                	jal	200005f0 <memcpy>
2000071a:	8522                	mv	a0,s0
2000071c:	005000ef          	jal	ra,20000f20 <base_log_internal_core>
20000720:	6531                	lui	a0,0xc
20000722:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000726:	16a010ef          	jal	ra,20001890 <test_status_set>
2000072a:	09a8                	addi	a0,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:86
  CHECK(dif_aes_reset(&aes) == kDifAesOk);
2000072c:	2959                	jal	20000bc2 <dif_aes_reset>
2000072e:	c91d                	beqz	a0,20000764 <test_main+0xe8>
20000730:	000b8a63          	beqz	s7,20000744 <test_main+0xc8>
20000734:	e0010517          	auipc	a0,0xe0010
20000738:	99450513          	addi	a0,a0,-1644 # 100c8 <test_main.kLogFields.5>
2000073c:	4581                	li	a1,0
2000073e:	08d000ef          	jal	ra,20000fca <base_log_internal_dv>
20000742:	a821                	j	2000075a <test_main+0xde>
20000744:	00001597          	auipc	a1,0x1
20000748:	67058593          	addi	a1,a1,1648 # 20001db4 <kDeviceLogBypassUartAddress+0x2c>
2000074c:	18a0                	addi	s0,sp,120
2000074e:	4651                	li	a2,20
20000750:	8522                	mv	a0,s0
20000752:	3d79                	jal	200005f0 <memcpy>
20000754:	8522                	mv	a0,s0
20000756:	7ca000ef          	jal	ra,20000f20 <base_log_internal_core>
2000075a:	6531                	lui	a0,0xc
2000075c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000760:	130010ef          	jal	ra,20001890 <test_status_set>
20000764:	4501                	li	a0,0
20000766:	00002597          	auipc	a1,0x2
2000076a:	dfe58593          	addi	a1,a1,-514 # 20002564 <kKey>
2000076e:	00002617          	auipc	a2,0x2
20000772:	e1660613          	addi	a2,a2,-490 # 20002584 <kKeyShare1>
20000776:	1934                	addi	a3,sp,184
20000778:	02000713          	li	a4,32
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:92

  // Mask the key. Note that this should not be done manually. Software is
  // expected to get the key in two shares right from the beginning.
  uint8_t key_share0[KEY_LENGTH_IN_BYTES];
  for (int i = 0; i < KEY_LENGTH_IN_BYTES; ++i) {
    key_share0[i] = kKey[i] ^ kKeyShare1[i];
2000077c:	00b507b3          	add	a5,a0,a1
20000780:	00078783          	lb	a5,0(a5)
20000784:	00c504b3          	add	s1,a0,a2
20000788:	00048483          	lb	s1,0(s1)
2000078c:	8fa5                	xor	a5,a5,s1
2000078e:	00a684b3          	add	s1,a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:91
  for (int i = 0; i < KEY_LENGTH_IN_BYTES; ++i) {
20000792:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:92
    key_share0[i] = kKey[i] ^ kKeyShare1[i];
20000794:	00f48023          	sb	a5,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:91
  for (int i = 0; i < KEY_LENGTH_IN_BYTES; ++i) {
20000798:	fee512e3          	bne	a0,a4,2000077c <test_main+0x100>
2000079c:	18a0                	addi	s0,sp,120
2000079e:	192c                	addi	a1,sp,184
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:97
  }

  // "Convert" key share byte arrays to `dif_aes_key_share_t`.
  dif_aes_key_share_t key;
  memcpy(&key.share0[0], &key_share0[0], KEY_LENGTH_IN_BYTES);
200007a0:	02000613          	li	a2,32
200007a4:	8522                	mv	a0,s0
200007a6:	35a9                	jal	200005f0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:98
  memcpy(&key.share1[0], &kKeyShare1[0], KEY_LENGTH_IN_BYTES);
200007a8:	0928                	addi	a0,sp,152
200007aa:	00002597          	auipc	a1,0x2
200007ae:	dda58593          	addi	a1,a1,-550 # 20002584 <kKeyShare1>
200007b2:	02000613          	li	a2,32
200007b6:	3d2d                	jal	200005f0 <memcpy>
200007b8:	00002517          	auipc	a0,0x2
200007bc:	dec50513          	addi	a0,a0,-532 # 200025a4 <kKeyShare1+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:101

  // Setup ECB encryption transaction.
  dif_aes_transaction_t transaction = {
200007c0:	454c                	lw	a1,12(a0)
200007c2:	4510                	lw	a2,8(a0)
200007c4:	4154                	lw	a3,4(a0)
200007c6:	4108                	lw	a0,0(a0)
200007c8:	daae                	sw	a1,116(sp)
200007ca:	d8b2                	sw	a2,112(sp)
200007cc:	d6b6                	sw	a3,108(sp)
200007ce:	d4aa                	sw	a0,104(sp)
200007d0:	1024                	addi	s1,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:106
      .key_len = kDifAesKey256,
      .mode = kDifAesModeEncrypt,
      .operation = kDifAesOperationAuto,
  };
  CHECK(dif_aes_start_ecb(&aes, &transaction, key) == kDifAesOk);
200007d2:	04000613          	li	a2,64
200007d6:	8526                	mv	a0,s1
200007d8:	85a2                	mv	a1,s0
200007da:	3d19                	jal	200005f0 <memcpy>
200007dc:	09a8                	addi	a0,sp,216
200007de:	10ac                	addi	a1,sp,104
200007e0:	8626                	mv	a2,s1
200007e2:	2901                	jal	20000bf2 <dif_aes_start_ecb>
200007e4:	c91d                	beqz	a0,2000081a <test_main+0x19e>
200007e6:	000b8a63          	beqz	s7,200007fa <test_main+0x17e>
200007ea:	e0010517          	auipc	a0,0xe0010
200007ee:	8f250513          	addi	a0,a0,-1806 # 100dc <test_main.kLogFields.8>
200007f2:	4581                	li	a1,0
200007f4:	7d6000ef          	jal	ra,20000fca <base_log_internal_dv>
200007f8:	a821                	j	20000810 <test_main+0x194>
200007fa:	00001597          	auipc	a1,0x1
200007fe:	5ce58593          	addi	a1,a1,1486 # 20001dc8 <kDeviceLogBypassUartAddress+0x40>
20000802:	1020                	addi	s0,sp,40
20000804:	4651                	li	a2,20
20000806:	8522                	mv	a0,s0
20000808:	33e5                	jal	200005f0 <memcpy>
2000080a:	8522                	mv	a0,s0
2000080c:	714000ef          	jal	ra,20000f20 <base_log_internal_core>
20000810:	6531                	lui	a0,0xc
20000812:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000816:	07a010ef          	jal	ra,20001890 <test_status_set>
2000081a:	09a0                	addi	s0,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:113
  // "Convert" plain data byte arrays to `dif_aes_data_t`.
  dif_aes_data_t in_data_plain;
  memcpy(&in_data_plain.data[0], &kPlainText[0], TEXT_LENGTH_IN_BYTES);

  // Load the plain text to trigger the encryption operation.
  while (!aes_input_ready(&aes)) {
2000081c:	8522                	mv	a0,s0
2000081e:	24fd                	jal	20000b0c <aes_input_ready>
20000820:	dd75                	beqz	a0,2000081c <test_main+0x1a0>
20000822:	ffeee537          	lui	a0,0xffeee
20000826:	dcc50513          	addi	a0,a0,-564 # ffeeddcc <_data_init_start+0xdfeeb790>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:115
  }
  CHECK(dif_aes_load_data(&aes, in_data_plain) == kDifAesOk);
2000082a:	da2a                	sw	a0,52(sp)
2000082c:	bbaaa537          	lui	a0,0xbbaaa
20000830:	98850513          	addi	a0,a0,-1656 # bbaa9988 <_data_init_start+0x9baa734c>
20000834:	d82a                	sw	a0,48(sp)
20000836:	77665537          	lui	a0,0x77665
2000083a:	54450513          	addi	a0,a0,1348 # 77665544 <_data_init_start+0x57662f08>
2000083e:	d62a                	sw	a0,44(sp)
20000840:	33221537          	lui	a0,0x33221
20000844:	10050513          	addi	a0,a0,256 # 33221100 <_data_init_start+0x1321eac4>
20000848:	d42a                	sw	a0,40(sp)
2000084a:	09a8                	addi	a0,sp,216
2000084c:	102c                	addi	a1,sp,40
2000084e:	2b69                	jal	20000de8 <dif_aes_load_data>
20000850:	c91d                	beqz	a0,20000886 <test_main+0x20a>
20000852:	000b8a63          	beqz	s7,20000866 <test_main+0x1ea>
20000856:	e0010517          	auipc	a0,0xe0010
2000085a:	89a50513          	addi	a0,a0,-1894 # 100f0 <test_main.kLogFields.11>
2000085e:	4581                	li	a1,0
20000860:	76a000ef          	jal	ra,20000fca <base_log_internal_dv>
20000864:	a821                	j	2000087c <test_main+0x200>
20000866:	00001597          	auipc	a1,0x1
2000086a:	57658593          	addi	a1,a1,1398 # 20001ddc <kDeviceLogBypassUartAddress+0x54>
2000086e:	1020                	addi	s0,sp,40
20000870:	4651                	li	a2,20
20000872:	8522                	mv	a0,s0
20000874:	3bb5                	jal	200005f0 <memcpy>
20000876:	8522                	mv	a0,s0
20000878:	6a8000ef          	jal	ra,20000f20 <base_log_internal_core>
2000087c:	6531                	lui	a0,0xc
2000087e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000882:	00e010ef          	jal	ra,20001890 <test_status_set>
20000886:	09a0                	addi	s0,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:119

  // Read out the produced cipher text.
  dif_aes_data_t out_data_cipher;
  while (!aes_output_valid(&aes)) {
20000888:	8522                	mv	a0,s0
2000088a:	2cd9                	jal	20000b60 <aes_output_valid>
2000088c:	dd75                	beqz	a0,20000888 <test_main+0x20c>
2000088e:	09a8                	addi	a0,sp,216
20000890:	01810a13          	addi	s4,sp,24
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:121
  }
  CHECK(dif_aes_read_output(&aes, &out_data_cipher) == kDifAesOk);
20000894:	85d2                	mv	a1,s4
20000896:	2359                	jal	20000e1c <dif_aes_read_output>
20000898:	c91d                	beqz	a0,200008ce <test_main+0x252>
2000089a:	000b8a63          	beqz	s7,200008ae <test_main+0x232>
2000089e:	e0010517          	auipc	a0,0xe0010
200008a2:	86650513          	addi	a0,a0,-1946 # 10104 <test_main.kLogFields.14>
200008a6:	4581                	li	a1,0
200008a8:	722000ef          	jal	ra,20000fca <base_log_internal_dv>
200008ac:	a821                	j	200008c4 <test_main+0x248>
200008ae:	00001597          	auipc	a1,0x1
200008b2:	54258593          	addi	a1,a1,1346 # 20001df0 <kDeviceLogBypassUartAddress+0x68>
200008b6:	1020                	addi	s0,sp,40
200008b8:	4651                	li	a2,20
200008ba:	8522                	mv	a0,s0
200008bc:	3b15                	jal	200005f0 <memcpy>
200008be:	8522                	mv	a0,s0
200008c0:	660000ef          	jal	ra,20000f20 <base_log_internal_core>
200008c4:	6531                	lui	a0,0xc
200008c6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008ca:	7c7000ef          	jal	ra,20001890 <test_status_set>
200008ce:	09a8                	addi	a0,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:124

  // Finish the ECB encryption transaction.
  CHECK(dif_aes_end(&aes) == kDifAesOk);
200008d0:	21d5                	jal	20000db4 <dif_aes_end>
200008d2:	c915                	beqz	a0,20000906 <test_main+0x28a>
200008d4:	000b8a63          	beqz	s7,200008e8 <test_main+0x26c>
200008d8:	e0010517          	auipc	a0,0xe0010
200008dc:	84050513          	addi	a0,a0,-1984 # 10118 <test_main.kLogFields.17>
200008e0:	4581                	li	a1,0
200008e2:	6e8000ef          	jal	ra,20000fca <base_log_internal_dv>
200008e6:	a819                	j	200008fc <test_main+0x280>
200008e8:	00001597          	auipc	a1,0x1
200008ec:	51c58593          	addi	a1,a1,1308 # 20001e04 <kDeviceLogBypassUartAddress+0x7c>
200008f0:	1020                	addi	s0,sp,40
200008f2:	4651                	li	a2,20
200008f4:	8522                	mv	a0,s0
200008f6:	39ed                	jal	200005f0 <memcpy>
200008f8:	8522                	mv	a0,s0
200008fa:	251d                	jal	20000f20 <base_log_internal_core>
200008fc:	6531                	lui	a0,0xc
200008fe:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000902:	78f000ef          	jal	ra,20001890 <test_status_set>
20000906:	4401                	li	s0,0
20000908:	00002c97          	auipc	s9,0x2
2000090c:	cbcc8c93          	addi	s9,s9,-836 # 200025c4 <kCipherTextGold>
20000910:	4d41                	li	s10,16
20000912:	00001997          	auipc	s3,0x1
20000916:	50698993          	addi	s3,s3,1286 # 20001e18 <kDeviceLogBypassUartAddress+0x90>
2000091a:	02810913          	addi	s2,sp,40
2000091e:	6531                	lui	a0,0xc
20000920:	aad50b13          	addi	s6,a0,-1363 # baad <_stack_size+0x9aad>
20000924:	e0010a97          	auipc	s5,0xe0010
20000928:	808a8a93          	addi	s5,s5,-2040 # 1012c <test_main.kLogFields.20>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:130

  // Check the produced cipher text against the reference.
  uint32_t cipher_text_gold_words[TEXT_LENGTH_IN_WORDS];
  memcpy(&cipher_text_gold_words[0], &kCipherTextGold[0], TEXT_LENGTH_IN_BYTES);
  for (int i = 0; i < TEXT_LENGTH_IN_WORDS; ++i) {
    CHECK(cipher_text_gold_words[i] == out_data_cipher.data[i],
2000092c:	01940533          	add	a0,s0,s9
20000930:	00052c03          	lw	s8,0(a0)
20000934:	008a0533          	add	a0,s4,s0
20000938:	4104                	lw	s1,0(a0)
2000093a:	029c0663          	beq	s8,s1,20000966 <test_main+0x2ea>
2000093e:	000b8963          	beqz	s7,20000950 <test_main+0x2d4>
20000942:	4589                	li	a1,2
20000944:	8556                	mv	a0,s5
20000946:	8662                	mv	a2,s8
20000948:	86a6                	mv	a3,s1
2000094a:	680000ef          	jal	ra,20000fca <base_log_internal_dv>
2000094e:	a809                	j	20000960 <test_main+0x2e4>
20000950:	4651                	li	a2,20
20000952:	854a                	mv	a0,s2
20000954:	85ce                	mv	a1,s3
20000956:	3969                	jal	200005f0 <memcpy>
20000958:	854a                	mv	a0,s2
2000095a:	85e2                	mv	a1,s8
2000095c:	8626                	mv	a2,s1
2000095e:	23c9                	jal	20000f20 <base_log_internal_core>
20000960:	855a                	mv	a0,s6
20000962:	72f000ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:129
  for (int i = 0; i < TEXT_LENGTH_IN_WORDS; ++i) {
20000966:	0411                	addi	s0,s0,4
20000968:	fda412e3          	bne	s0,s10,2000092c <test_main+0x2b0>
2000096c:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:136
          "Encrypted cipher text mismatched: exp = %x, actual = %x",
          cipher_text_gold_words[i], out_data_cipher.data[i]);
  }

  // Setup ECB decryption transaction.
  transaction.mode = kDifAesModeDecrypt;
2000096e:	d6aa                	sw	a0,108(sp)
20000970:	1020                	addi	s0,sp,40
20000972:	18ac                	addi	a1,sp,120
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:137
  CHECK(dif_aes_start_ecb(&aes, &transaction, key) == kDifAesOk);
20000974:	04000613          	li	a2,64
20000978:	8522                	mv	a0,s0
2000097a:	399d                	jal	200005f0 <memcpy>
2000097c:	09a8                	addi	a0,sp,216
2000097e:	10ac                	addi	a1,sp,104
20000980:	8622                	mv	a2,s0
20000982:	2c85                	jal	20000bf2 <dif_aes_start_ecb>
20000984:	c915                	beqz	a0,200009b8 <test_main+0x33c>
20000986:	000b8a63          	beqz	s7,2000099a <test_main+0x31e>
2000098a:	e000f517          	auipc	a0,0xe000f
2000098e:	7b650513          	addi	a0,a0,1974 # 10140 <test_main.kLogFields.23>
20000992:	4581                	li	a1,0
20000994:	636000ef          	jal	ra,20000fca <base_log_internal_dv>
20000998:	a819                	j	200009ae <test_main+0x332>
2000099a:	00001597          	auipc	a1,0x1
2000099e:	49258593          	addi	a1,a1,1170 # 20001e2c <kDeviceLogBypassUartAddress+0xa4>
200009a2:	1020                	addi	s0,sp,40
200009a4:	4651                	li	a2,20
200009a6:	8522                	mv	a0,s0
200009a8:	31a1                	jal	200005f0 <memcpy>
200009aa:	8522                	mv	a0,s0
200009ac:	2b95                	jal	20000f20 <base_log_internal_core>
200009ae:	6531                	lui	a0,0xc
200009b0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200009b4:	6dd000ef          	jal	ra,20001890 <test_status_set>
200009b8:	09a0                	addi	s0,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:140

  // Load the previously produced cipher text to start the decryption operation.
  while (!aes_input_ready(&aes)) {
200009ba:	8522                	mv	a0,s0
200009bc:	2a81                	jal	20000b0c <aes_input_ready>
200009be:	dd75                	beqz	a0,200009ba <test_main+0x33e>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:142
  }
  CHECK(dif_aes_load_data(&aes, out_data_cipher) == kDifAesOk);
200009c0:	5512                	lw	a0,36(sp)
200009c2:	5582                	lw	a1,32(sp)
200009c4:	4672                	lw	a2,28(sp)
200009c6:	46e2                	lw	a3,24(sp)
200009c8:	da2a                	sw	a0,52(sp)
200009ca:	d82e                	sw	a1,48(sp)
200009cc:	d632                	sw	a2,44(sp)
200009ce:	d436                	sw	a3,40(sp)
200009d0:	09a8                	addi	a0,sp,216
200009d2:	102c                	addi	a1,sp,40
200009d4:	2911                	jal	20000de8 <dif_aes_load_data>
200009d6:	c90d                	beqz	a0,20000a08 <test_main+0x38c>
200009d8:	000b8963          	beqz	s7,200009ea <test_main+0x36e>
200009dc:	e000f517          	auipc	a0,0xe000f
200009e0:	77850513          	addi	a0,a0,1912 # 10154 <test_main.kLogFields.25>
200009e4:	4581                	li	a1,0
200009e6:	23d5                	jal	20000fca <base_log_internal_dv>
200009e8:	a819                	j	200009fe <test_main+0x382>
200009ea:	00001597          	auipc	a1,0x1
200009ee:	45658593          	addi	a1,a1,1110 # 20001e40 <kDeviceLogBypassUartAddress+0xb8>
200009f2:	1020                	addi	s0,sp,40
200009f4:	4651                	li	a2,20
200009f6:	8522                	mv	a0,s0
200009f8:	3ee5                	jal	200005f0 <memcpy>
200009fa:	8522                	mv	a0,s0
200009fc:	2315                	jal	20000f20 <base_log_internal_core>
200009fe:	6531                	lui	a0,0xc
20000a00:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a04:	68d000ef          	jal	ra,20001890 <test_status_set>
20000a08:	09a0                	addi	s0,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:147

  // Read out the produced plain text.

  dif_aes_data_t out_data_plain;
  while (!aes_output_valid(&aes)) {
20000a0a:	8522                	mv	a0,s0
20000a0c:	2a91                	jal	20000b60 <aes_output_valid>
20000a0e:	dd75                	beqz	a0,20000a0a <test_main+0x38e>
20000a10:	09a8                	addi	a0,sp,216
20000a12:	00810a13          	addi	s4,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:149
  }
  CHECK(dif_aes_read_output(&aes, &out_data_plain) == kDifAesOk);
20000a16:	85d2                	mv	a1,s4
20000a18:	2111                	jal	20000e1c <dif_aes_read_output>
20000a1a:	c90d                	beqz	a0,20000a4c <test_main+0x3d0>
20000a1c:	000b8963          	beqz	s7,20000a2e <test_main+0x3b2>
20000a20:	e000f517          	auipc	a0,0xe000f
20000a24:	74850513          	addi	a0,a0,1864 # 10168 <test_main.kLogFields.28>
20000a28:	4581                	li	a1,0
20000a2a:	2345                	jal	20000fca <base_log_internal_dv>
20000a2c:	a819                	j	20000a42 <test_main+0x3c6>
20000a2e:	00001597          	auipc	a1,0x1
20000a32:	42658593          	addi	a1,a1,1062 # 20001e54 <kDeviceLogBypassUartAddress+0xcc>
20000a36:	1020                	addi	s0,sp,40
20000a38:	4651                	li	a2,20
20000a3a:	8522                	mv	a0,s0
20000a3c:	3e55                	jal	200005f0 <memcpy>
20000a3e:	8522                	mv	a0,s0
20000a40:	21c5                	jal	20000f20 <base_log_internal_core>
20000a42:	6531                	lui	a0,0xc
20000a44:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a48:	649000ef          	jal	ra,20001890 <test_status_set>
20000a4c:	09a8                	addi	a0,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:152

  // Finish the ECB encryption transaction.
  CHECK(dif_aes_end(&aes) == kDifAesOk);
20000a4e:	269d                	jal	20000db4 <dif_aes_end>
20000a50:	c90d                	beqz	a0,20000a82 <test_main+0x406>
20000a52:	000b8963          	beqz	s7,20000a64 <test_main+0x3e8>
20000a56:	e000f517          	auipc	a0,0xe000f
20000a5a:	72650513          	addi	a0,a0,1830 # 1017c <test_main.kLogFields.31>
20000a5e:	4581                	li	a1,0
20000a60:	23ad                	jal	20000fca <base_log_internal_dv>
20000a62:	a819                	j	20000a78 <test_main+0x3fc>
20000a64:	00001597          	auipc	a1,0x1
20000a68:	40458593          	addi	a1,a1,1028 # 20001e68 <kDeviceLogBypassUartAddress+0xe0>
20000a6c:	1020                	addi	s0,sp,40
20000a6e:	4651                	li	a2,20
20000a70:	8522                	mv	a0,s0
20000a72:	3ebd                	jal	200005f0 <memcpy>
20000a74:	8522                	mv	a0,s0
20000a76:	216d                	jal	20000f20 <base_log_internal_core>
20000a78:	6531                	lui	a0,0xc
20000a7a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a7e:	613000ef          	jal	ra,20001890 <test_status_set>
20000a82:	4401                	li	s0,0
20000a84:	00002c97          	auipc	s9,0x2
20000a88:	b30c8c93          	addi	s9,s9,-1232 # 200025b4 <kPlainText>
20000a8c:	4d41                	li	s10,16
20000a8e:	00001997          	auipc	s3,0x1
20000a92:	3ee98993          	addi	s3,s3,1006 # 20001e7c <kDeviceLogBypassUartAddress+0xf4>
20000a96:	02810913          	addi	s2,sp,40
20000a9a:	6531                	lui	a0,0xc
20000a9c:	aad50b13          	addi	s6,a0,-1363 # baad <_stack_size+0x9aad>
20000aa0:	e000fa97          	auipc	s5,0xe000f
20000aa4:	6f0a8a93          	addi	s5,s5,1776 # 10190 <test_main.kLogFields.33>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:158

  // Check the produced plain text against the reference.
  uint32_t plain_text_gold_words[TEXT_LENGTH_IN_WORDS];
  memcpy(&plain_text_gold_words[0], &kPlainText[0], TEXT_LENGTH_IN_BYTES);
  for (int i = 0; i < TEXT_LENGTH_IN_WORDS; ++i) {
    CHECK(plain_text_gold_words[i] == out_data_plain.data[i],
20000aa8:	01940533          	add	a0,s0,s9
20000aac:	00052c03          	lw	s8,0(a0)
20000ab0:	008a0533          	add	a0,s4,s0
20000ab4:	4104                	lw	s1,0(a0)
20000ab6:	029c0563          	beq	s8,s1,20000ae0 <test_main+0x464>
20000aba:	000b8863          	beqz	s7,20000aca <test_main+0x44e>
20000abe:	4589                	li	a1,2
20000ac0:	8556                	mv	a0,s5
20000ac2:	8662                	mv	a2,s8
20000ac4:	86a6                	mv	a3,s1
20000ac6:	2311                	jal	20000fca <base_log_internal_dv>
20000ac8:	a809                	j	20000ada <test_main+0x45e>
20000aca:	4651                	li	a2,20
20000acc:	854a                	mv	a0,s2
20000ace:	85ce                	mv	a1,s3
20000ad0:	3605                	jal	200005f0 <memcpy>
20000ad2:	854a                	mv	a0,s2
20000ad4:	85e2                	mv	a1,s8
20000ad6:	8626                	mv	a2,s1
20000ad8:	21a1                	jal	20000f20 <base_log_internal_core>
20000ada:	855a                	mv	a0,s6
20000adc:	5b5000ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:157
  for (int i = 0; i < TEXT_LENGTH_IN_WORDS; ++i) {
20000ae0:	0411                	addi	s0,s0,4
20000ae2:	fda413e3          	bne	s0,s10,20000aa8 <test_main+0x42c>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:163
          "Decrypted text mismatched: exp = %x, actual = %x",
          plain_text_gold_words[i], out_data_plain.data[i]);
  }

  return true;
20000ae6:	4505                	li	a0,1
20000ae8:	5d0e                	lw	s10,224(sp)
20000aea:	5c9e                	lw	s9,228(sp)
20000aec:	5c2e                	lw	s8,232(sp)
20000aee:	5bbe                	lw	s7,236(sp)
20000af0:	5b4e                	lw	s6,240(sp)
20000af2:	5ade                	lw	s5,244(sp)
20000af4:	5a6e                	lw	s4,248(sp)
20000af6:	59fe                	lw	s3,252(sp)
20000af8:	10012903          	lw	s2,256(sp)
20000afc:	10412483          	lw	s1,260(sp)
20000b00:	10812403          	lw	s0,264(sp)
20000b04:	10c12083          	lw	ra,268(sp)
20000b08:	6151                	addi	sp,sp,272
20000b0a:	8082                	ret

20000b0c <aes_input_ready>:
aes_input_ready():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:53
static bool aes_input_ready(const dif_aes_t *aes) {
20000b0c:	1101                	addi	sp,sp,-32
20000b0e:	ce06                	sw	ra,28(sp)
20000b10:	cc22                	sw	s0,24(sp)
20000b12:	01710613          	addi	a2,sp,23
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:55
  CHECK(dif_aes_get_status(aes, kDifAesStatusInputReady, &status) == kDifAesOk);
20000b16:	4591                	li	a1,4
20000b18:	2eb9                	jal	20000e76 <dif_aes_get_status>
20000b1a:	cd0d                	beqz	a0,20000b54 <aes_input_ready+0x48>
20000b1c:	00001517          	auipc	a0,0x1
20000b20:	26c50513          	addi	a0,a0,620 # 20001d88 <kDeviceLogBypassUartAddress>
20000b24:	4108                	lw	a0,0(a0)
20000b26:	c901                	beqz	a0,20000b36 <aes_input_ready+0x2a>
20000b28:	e000f517          	auipc	a0,0xe000f
20000b2c:	67c50513          	addi	a0,a0,1660 # 101a4 <aes_input_ready.kLogFields>
20000b30:	4581                	li	a1,0
20000b32:	2961                	jal	20000fca <base_log_internal_dv>
20000b34:	a819                	j	20000b4a <aes_input_ready+0x3e>
20000b36:	00001597          	auipc	a1,0x1
20000b3a:	35e58593          	addi	a1,a1,862 # 20001e94 <kTestConfig+0x4>
20000b3e:	840a                	mv	s0,sp
20000b40:	4651                	li	a2,20
20000b42:	8522                	mv	a0,s0
20000b44:	3475                	jal	200005f0 <memcpy>
20000b46:	8522                	mv	a0,s0
20000b48:	2ee1                	jal	20000f20 <base_log_internal_core>
20000b4a:	6531                	lui	a0,0xc
20000b4c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b50:	541000ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:57
  return status;
20000b54:	01714503          	lbu	a0,23(sp)
20000b58:	4462                	lw	s0,24(sp)
20000b5a:	40f2                	lw	ra,28(sp)
20000b5c:	6105                	addi	sp,sp,32
20000b5e:	8082                	ret

20000b60 <aes_output_valid>:
aes_output_valid():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:60
static bool aes_output_valid(const dif_aes_t *aes) {
20000b60:	1101                	addi	sp,sp,-32
20000b62:	ce06                	sw	ra,28(sp)
20000b64:	cc22                	sw	s0,24(sp)
20000b66:	01710613          	addi	a2,sp,23
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:62
  CHECK(dif_aes_get_status(aes, kDifAesStatusOutputValid, &status) ==
20000b6a:	458d                	li	a1,3
20000b6c:	2629                	jal	20000e76 <dif_aes_get_status>
20000b6e:	cd0d                	beqz	a0,20000ba8 <aes_output_valid+0x48>
20000b70:	00001517          	auipc	a0,0x1
20000b74:	21850513          	addi	a0,a0,536 # 20001d88 <kDeviceLogBypassUartAddress>
20000b78:	4108                	lw	a0,0(a0)
20000b7a:	c901                	beqz	a0,20000b8a <aes_output_valid+0x2a>
20000b7c:	e000f517          	auipc	a0,0xe000f
20000b80:	63c50513          	addi	a0,a0,1596 # 101b8 <aes_output_valid.kLogFields>
20000b84:	4581                	li	a1,0
20000b86:	2191                	jal	20000fca <base_log_internal_dv>
20000b88:	a819                	j	20000b9e <aes_output_valid+0x3e>
20000b8a:	00001597          	auipc	a1,0x1
20000b8e:	31e58593          	addi	a1,a1,798 # 20001ea8 <kTestConfig+0x18>
20000b92:	840a                	mv	s0,sp
20000b94:	4651                	li	a2,20
20000b96:	8522                	mv	a0,s0
20000b98:	3ca1                	jal	200005f0 <memcpy>
20000b9a:	8522                	mv	a0,s0
20000b9c:	2651                	jal	20000f20 <base_log_internal_core>
20000b9e:	6531                	lui	a0,0xc
20000ba0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ba4:	4ed000ef          	jal	ra,20001890 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_aes_smoketest.c:65
  return status;
20000ba8:	01714503          	lbu	a0,23(sp)
20000bac:	4462                	lw	s0,24(sp)
20000bae:	40f2                	lw	ra,28(sp)
20000bb0:	6105                	addi	sp,sp,32
20000bb2:	8082                	ret

20000bb4 <dif_aes_init>:
dif_aes_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:196
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
  }
}

dif_aes_result_t dif_aes_init(dif_aes_params_t params, dif_aes_t *aes) {
  if (aes == NULL) {
20000bb4:	c581                	beqz	a1,20000bbc <dif_aes_init+0x8>
20000bb6:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:200
    return kDifAesBadArg;
  }

  aes->params = params;
20000bb8:	c188                	sw	a0,0(a1)
20000bba:	a011                	j	20000bbe <dif_aes_init+0xa>
20000bbc:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:203

  return kDifAesOk;
}
20000bbe:	8532                	mv	a0,a2
20000bc0:	8082                	ret

20000bc2 <dif_aes_reset>:
dif_aes_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:206

dif_aes_result_t dif_aes_reset(const dif_aes_t *aes) {
  if (aes == NULL) {
20000bc2:	c515                	beqz	a0,20000bee <dif_aes_reset+0x2c>
20000bc4:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bc6:	5df0                	lw	a2,124(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000bc8:	8a05                	andi	a2,a2,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:91
  while (!aes_idle(aes)) {
20000bca:	de75                	beqz	a2,20000bc6 <dif_aes_reset+0x4>
20000bcc:	40000613          	li	a2,1024
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000bd0:	d9f0                	sw	a2,116(a1)
20000bd2:	d9f0                	sw	a2,116(a1)
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:108
  mmio_region_write32(aes->params.base_addr, AES_TRIGGER_REG_OFFSET,
20000bd4:	410c                	lw	a1,0(a0)
20000bd6:	4619                	li	a2,6
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bd8:	ddb0                	sw	a2,120(a1)
20000bda:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bdc:	5de8                	lw	a0,124(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000bde:	8905                	andi	a0,a0,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:112
  while (!aes_idle(aes)) {
20000be0:	dd75                	beqz	a0,20000bdc <dif_aes_reset+0x1a>
20000be2:	4501                	li	a0,0
20000be4:	7c000613          	li	a2,1984
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000be8:	d9f0                	sw	a2,116(a1)
20000bea:	d9f0                	sw	a2,116(a1)
dif_aes_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:225
      bitfield_field32_write(reg, AES_CTRL_SHADOWED_KEY_LEN_FIELD, 0xffffffff);

  aes_shadowed_write(aes->params.base_addr, AES_CTRL_SHADOWED_REG_OFFSET, reg);

  return kDifAesOk;
}
20000bec:	8082                	ret
20000bee:	4509                	li	a0,2
20000bf0:	8082                	ret

20000bf2 <dif_aes_start_ecb>:
dif_aes_start_ecb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:229

dif_aes_result_t dif_aes_start_ecb(const dif_aes_t *aes,
                                   const dif_aes_transaction_t *transaction,
                                   dif_aes_key_share_t key) {
20000bf2:	1141                	addi	sp,sp,-16
20000bf4:	c606                	sw	ra,12(sp)
20000bf6:	c422                	sw	s0,8(sp)
20000bf8:	c226                	sw	s1,4(sp)
20000bfa:	842a                	mv	s0,a0
20000bfc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:230
  if (aes == NULL || transaction == NULL) {
20000bfe:	c821                	beqz	s0,20000c4e <dif_aes_start_ecb+0x5c>
20000c00:	c5b9                	beqz	a1,20000c4e <dif_aes_start_ecb+0x5c>
20000c02:	84b2                	mv	s1,a2
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000c04:	4008                	lw	a0,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c06:	5d68                	lw	a0,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c08:	00157613          	andi	a2,a0,1
20000c0c:	450d                	li	a0,3
dif_aes_start_ecb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:234
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
20000c0e:	c221                	beqz	a2,20000c4e <dif_aes_start_ecb+0x5c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:238
    return kDifAesBusy;
  }

  dif_aes_result_t result = configure(aes, transaction, kAesModeFieldValEcb);
20000c10:	4605                	li	a2,1
20000c12:	8522                	mv	a0,s0
20000c14:	2091                	jal	20000c58 <configure>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:239
  if (result != kDifAesOk) {
20000c16:	ed05                	bnez	a0,20000c4e <dif_aes_start_ecb+0x5c>
20000c18:	4501                	li	a0,0
20000c1a:	02000593          	li	a1,32
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000c1e:	4010                	lw	a2,0(s0)
20000c20:	00a486b3          	add	a3,s1,a0
20000c24:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c26:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000c28:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c2a:	c254                	sw	a3,4(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000c2c:	feb519e3          	bne	a0,a1,20000c1e <dif_aes_start_ecb+0x2c>
20000c30:	4501                	li	a0,0
20000c32:	02048593          	addi	a1,s1,32
20000c36:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000c3a:	4014                	lw	a3,0(s0)
20000c3c:	00a58733          	add	a4,a1,a0
20000c40:	4318                	lw	a4,0(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c42:	96aa                	add	a3,a3,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000c44:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c46:	d2d8                	sw	a4,36(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000c48:	fec519e3          	bne	a0,a2,20000c3a <dif_aes_start_ecb+0x48>
20000c4c:	4501                	li	a0,0
dif_aes_start_ecb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:250

  aes_set_multireg(aes, &key.share1[0], AES_KEY_SHARE1_MULTIREG_COUNT,
                   AES_KEY_SHARE1_0_REG_OFFSET);

  return kDifAesOk;
}
20000c4e:	4492                	lw	s1,4(sp)
20000c50:	4422                	lw	s0,8(sp)
20000c52:	40b2                	lw	ra,12(sp)
20000c54:	0141                	addi	sp,sp,16
20000c56:	8082                	ret

20000c58 <configure>:
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:140
  aes_key_field_val_t key_len_val = key_to_field(transaction->key_len);
20000c58:	4198                	lw	a4,0(a1)
20000c5a:	4789                	li	a5,2
20000c5c:	4685                	li	a3,1
key_to_field():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:117
  switch (key) {
20000c5e:	04e7e763          	bltu	a5,a4,20000cac <configure+0x54>
20000c62:	00271693          	slli	a3,a4,0x2
20000c66:	00001717          	auipc	a4,0x1
20000c6a:	25670713          	addi	a4,a4,598 # 20001ebc <kTestConfig+0x2c>
20000c6e:	96ba                	add	a3,a3,a4
20000c70:	4294                	lw	a3,0(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c72:	0606                	slli	a2,a2,0x1
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:151
  if (transaction->mode == kDifAesModeDecrypt) {
20000c74:	41d8                	lw	a4,4(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000c76:	07e67613          	andi	a2,a2,126
20000c7a:	8e55                	or	a2,a2,a3
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:157
  if (transaction->operation == kDifAesOperationManual) {
20000c7c:	4594                	lw	a3,8(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:151
  if (transaction->mode == kDifAesModeDecrypt) {
20000c7e:	177d                	addi	a4,a4,-1
20000c80:	00173713          	seqz	a4,a4
20000c84:	4785                	li	a5,1
20000c86:	8e59                	or	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:157
  if (transaction->operation == kDifAesOperationManual) {
20000c88:	00f69463          	bne	a3,a5,20000c90 <configure+0x38>
20000c8c:	40066613          	ori	a2,a2,1024
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:165
  if (transaction->masking == kDifAesMaskingForceZero) {
20000c90:	45cc                	lw	a1,12(a1)
20000c92:	4681                	li	a3,0
20000c94:	15fd                	addi	a1,a1,-1
20000c96:	0015b593          	seqz	a1,a1
20000c9a:	777d                	lui	a4,0xfffff
20000c9c:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_data_init_start+0xdfffd1c3>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:173
  aes_shadowed_write(aes->params.base_addr, AES_CTRL_SHADOWED_REG_OFFSET, reg);
20000ca0:	4108                	lw	a0,0(a0)
20000ca2:	8e79                	and	a2,a2,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:165
  if (transaction->masking == kDifAesMaskingForceZero) {
20000ca4:	05ae                	slli	a1,a1,0xb
20000ca6:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ca8:	d96c                	sw	a1,116(a0)
20000caa:	d96c                	sw	a1,116(a0)
configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:176
}
20000cac:	8536                	mv	a0,a3
20000cae:	8082                	ret

20000cb0 <dif_aes_start_cbc>:
dif_aes_start_cbc():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:254

dif_aes_result_t dif_aes_start_cbc(const dif_aes_t *aes,
                                   const dif_aes_transaction_t *transaction,
                                   dif_aes_key_share_t key, dif_aes_iv_t iv) {
20000cb0:	1141                	addi	sp,sp,-16
20000cb2:	c606                	sw	ra,12(sp)
20000cb4:	c422                	sw	s0,8(sp)
20000cb6:	c226                	sw	s1,4(sp)
20000cb8:	c04a                	sw	s2,0(sp)
20000cba:	84aa                	mv	s1,a0
20000cbc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:255
  if (aes == NULL || transaction == NULL) {
20000cbe:	c4a5                	beqz	s1,20000d26 <dif_aes_start_cbc+0x76>
20000cc0:	c1bd                	beqz	a1,20000d26 <dif_aes_start_cbc+0x76>
20000cc2:	8432                	mv	s0,a2
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000cc4:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cc6:	5d68                	lw	a0,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000cc8:	00157613          	andi	a2,a0,1
20000ccc:	450d                	li	a0,3
dif_aes_start_cbc():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:259
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
20000cce:	ce21                	beqz	a2,20000d26 <dif_aes_start_cbc+0x76>
20000cd0:	8936                	mv	s2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:263
    return kDifAesBusy;
  }

  dif_aes_result_t result = configure(aes, transaction, kAesModeFieldValCbc);
20000cd2:	4609                	li	a2,2
20000cd4:	8526                	mv	a0,s1
20000cd6:	3749                	jal	20000c58 <configure>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:264
  if (result != kDifAesOk) {
20000cd8:	e539                	bnez	a0,20000d26 <dif_aes_start_cbc+0x76>
20000cda:	4501                	li	a0,0
20000cdc:	02000593          	li	a1,32
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000ce0:	4090                	lw	a2,0(s1)
20000ce2:	00a406b3          	add	a3,s0,a0
20000ce6:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ce8:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000cea:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cec:	c254                	sw	a3,4(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000cee:	feb519e3          	bne	a0,a1,20000ce0 <dif_aes_start_cbc+0x30>
20000cf2:	4501                	li	a0,0
20000cf4:	02040593          	addi	a1,s0,32
20000cf8:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000cfc:	4094                	lw	a3,0(s1)
20000cfe:	00a58733          	add	a4,a1,a0
20000d02:	4318                	lw	a4,0(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d04:	96aa                	add	a3,a3,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000d06:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d08:	d2d8                	sw	a4,36(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000d0a:	fec519e3          	bne	a0,a2,20000cfc <dif_aes_start_cbc+0x4c>
20000d0e:	4501                	li	a0,0
20000d10:	45c1                	li	a1,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000d12:	4090                	lw	a2,0(s1)
20000d14:	00a906b3          	add	a3,s2,a0
20000d18:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d1a:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000d1c:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d1e:	c274                	sw	a3,68(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000d20:	feb519e3          	bne	a0,a1,20000d12 <dif_aes_start_cbc+0x62>
20000d24:	4501                	li	a0,0
dif_aes_start_cbc():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:277
                   AES_KEY_SHARE1_0_REG_OFFSET);

  aes_set_multireg(aes, &iv.iv[0], AES_IV_MULTIREG_COUNT, AES_IV_0_REG_OFFSET);

  return kDifAesOk;
}
20000d26:	4902                	lw	s2,0(sp)
20000d28:	4492                	lw	s1,4(sp)
20000d2a:	4422                	lw	s0,8(sp)
20000d2c:	40b2                	lw	ra,12(sp)
20000d2e:	0141                	addi	sp,sp,16
20000d30:	8082                	ret

20000d32 <dif_aes_start_ctr>:
dif_aes_start_ctr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:281

dif_aes_result_t dif_aes_start_ctr(const dif_aes_t *aes,
                                   const dif_aes_transaction_t *transaction,
                                   dif_aes_key_share_t key, dif_aes_iv_t iv) {
20000d32:	1141                	addi	sp,sp,-16
20000d34:	c606                	sw	ra,12(sp)
20000d36:	c422                	sw	s0,8(sp)
20000d38:	c226                	sw	s1,4(sp)
20000d3a:	c04a                	sw	s2,0(sp)
20000d3c:	84aa                	mv	s1,a0
20000d3e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:282
  if (aes == NULL || transaction == NULL) {
20000d40:	c4a5                	beqz	s1,20000da8 <dif_aes_start_ctr+0x76>
20000d42:	c1bd                	beqz	a1,20000da8 <dif_aes_start_ctr+0x76>
20000d44:	8432                	mv	s0,a2
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000d46:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d48:	5d68                	lw	a0,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d4a:	00157613          	andi	a2,a0,1
20000d4e:	450d                	li	a0,3
dif_aes_start_ctr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:286
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
20000d50:	ce21                	beqz	a2,20000da8 <dif_aes_start_ctr+0x76>
20000d52:	8936                	mv	s2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:290
    return kDifAesBusy;
  }

  dif_aes_result_t result = configure(aes, transaction, kAesModeFieldValCtr);
20000d54:	4641                	li	a2,16
20000d56:	8526                	mv	a0,s1
20000d58:	3701                	jal	20000c58 <configure>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:291
  if (result != kDifAesOk) {
20000d5a:	e539                	bnez	a0,20000da8 <dif_aes_start_ctr+0x76>
20000d5c:	4501                	li	a0,0
20000d5e:	02000593          	li	a1,32
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000d62:	4090                	lw	a2,0(s1)
20000d64:	00a406b3          	add	a3,s0,a0
20000d68:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d6a:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000d6c:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d6e:	c254                	sw	a3,4(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000d70:	feb519e3          	bne	a0,a1,20000d62 <dif_aes_start_ctr+0x30>
20000d74:	4501                	li	a0,0
20000d76:	02040593          	addi	a1,s0,32
20000d7a:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000d7e:	4094                	lw	a3,0(s1)
20000d80:	00a58733          	add	a4,a1,a0
20000d84:	4318                	lw	a4,0(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d86:	96aa                	add	a3,a3,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000d88:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d8a:	d2d8                	sw	a4,36(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000d8c:	fec519e3          	bne	a0,a2,20000d7e <dif_aes_start_ctr+0x4c>
20000d90:	4501                	li	a0,0
20000d92:	45c1                	li	a1,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000d94:	4090                	lw	a2,0(s1)
20000d96:	00a906b3          	add	a3,s2,a0
20000d9a:	4294                	lw	a3,0(a3)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d9c:	962a                	add	a2,a2,a0
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000d9e:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000da0:	c274                	sw	a3,68(a2)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000da2:	feb519e3          	bne	a0,a1,20000d94 <dif_aes_start_ctr+0x62>
20000da6:	4501                	li	a0,0
dif_aes_start_ctr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:304
                   AES_KEY_SHARE1_0_REG_OFFSET);

  aes_set_multireg(aes, &iv.iv[0], AES_IV_MULTIREG_COUNT, AES_IV_0_REG_OFFSET);

  return kDifAesOk;
}
20000da8:	4902                	lw	s2,0(sp)
20000daa:	4492                	lw	s1,4(sp)
20000dac:	4422                	lw	s0,8(sp)
20000dae:	40b2                	lw	ra,12(sp)
20000db0:	0141                	addi	sp,sp,16
20000db2:	8082                	ret

20000db4 <dif_aes_end>:
dif_aes_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:307

dif_aes_result_t dif_aes_end(const dif_aes_t *aes) {
  if (aes == NULL) {
20000db4:	c51d                	beqz	a0,20000de2 <dif_aes_end+0x2e>
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000db6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000db8:	5e6c                	lw	a1,124(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000dba:	0015f693          	andi	a3,a1,1
20000dbe:	458d                	li	a1,3
dif_aes_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:311
    return kDifAesBadArg;
  }

  if (!aes_idle(aes)) {
20000dc0:	c295                	beqz	a3,20000de4 <dif_aes_end+0x30>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000dc2:	5e6c                	lw	a1,124(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000dc4:	8985                	andi	a1,a1,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:91
  while (!aes_idle(aes)) {
20000dc6:	ddf5                	beqz	a1,20000dc2 <dif_aes_end+0xe>
20000dc8:	40000593          	li	a1,1024
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dcc:	da6c                	sw	a1,116(a2)
20000dce:	da6c                	sw	a1,116(a2)
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:108
  mmio_region_write32(aes->params.base_addr, AES_TRIGGER_REG_OFFSET,
20000dd0:	410c                	lw	a1,0(a0)
20000dd2:	4619                	li	a2,6
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dd4:	ddb0                	sw	a2,120(a1)
20000dd6:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dd8:	5d6c                	lw	a1,124(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000dda:	8985                	andi	a1,a1,1
aes_clear_internal_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:112
  while (!aes_idle(aes)) {
20000ddc:	ddf5                	beqz	a1,20000dd8 <dif_aes_end+0x24>
20000dde:	4581                	li	a1,0
20000de0:	a011                	j	20000de4 <dif_aes_end+0x30>
20000de2:	4589                	li	a1,2
dif_aes_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:318
  }

  aes_clear_internal_state(aes);

  return kDifAesOk;
}
20000de4:	852e                	mv	a0,a1
20000de6:	8082                	ret

20000de8 <dif_aes_load_data>:
dif_aes_load_data():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:322

dif_aes_result_t dif_aes_load_data(const dif_aes_t *aes,
                                   const dif_aes_data_t data) {
  if (aes == NULL) {
20000de8:	c51d                	beqz	a0,20000e16 <dif_aes_load_data+0x2e>
aes_input_ready():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:69
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000dea:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000dec:	5ef0                	lw	a2,124(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000dee:	01067713          	andi	a4,a2,16
20000df2:	460d                	li	a2,3
dif_aes_load_data():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:326
    return kDifAesBadArg;
  }

  if (!aes_input_ready(aes)) {
20000df4:	c315                	beqz	a4,20000e18 <dif_aes_load_data+0x30>
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000df6:	4198                	lw	a4,0(a1)
20000df8:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dfa:	caf8                	sw	a4,84(a3)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000dfc:	0591                	addi	a1,a1,4
20000dfe:	46b1                	li	a3,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:191
    mmio_region_write32(aes->params.base_addr, offset, data[i]);
20000e00:	4118                	lw	a4,0(a0)
20000e02:	00c587b3          	add	a5,a1,a2
20000e06:	439c                	lw	a5,0(a5)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e08:	9732                	add	a4,a4,a2
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
  for (int i = 0; i < regs_num; ++i) {
20000e0a:	0611                	addi	a2,a2,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e0c:	cf3c                	sw	a5,88(a4)
aes_set_multireg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:188
20000e0e:	fed619e3          	bne	a2,a3,20000e00 <dif_aes_load_data+0x18>
20000e12:	4601                	li	a2,0
20000e14:	a011                	j	20000e18 <dif_aes_load_data+0x30>
20000e16:	4609                	li	a2,2
dif_aes_load_data():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:334

  aes_set_multireg(aes, &data.data[0], AES_DATA_IN_MULTIREG_COUNT,
                   AES_DATA_IN_0_REG_OFFSET);

  return kDifAesOk;
}
20000e18:	8532                	mv	a0,a2
20000e1a:	8082                	ret

20000e1c <dif_aes_read_output>:
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:337

dif_aes_result_t dif_aes_read_output(const dif_aes_t *aes,
                                     dif_aes_data_t *data) {
20000e1c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:338
  if (aes == NULL || data == NULL) {
20000e1e:	c51d                	beqz	a0,20000e4c <dif_aes_read_output+0x30>
20000e20:	c595                	beqz	a1,20000e4c <dif_aes_read_output+0x30>
aes_output_valid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:64
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000e22:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e24:	5ef0                	lw	a2,124(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000e26:	00867713          	andi	a4,a2,8
20000e2a:	4611                	li	a2,4
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:342
    return kDifAesBadArg;
  }

  if (!aes_output_valid(aes)) {
20000e2c:	c305                	beqz	a4,20000e4c <dif_aes_read_output+0x30>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e2e:	52f4                	lw	a3,100(a3)
20000e30:	4601                	li	a2,0
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
  }

  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
    ptrdiff_t offset = AES_DATA_OUT_0_REG_OFFSET + (i * sizeof(uint32_t));

    data->data[i] = mmio_region_read32(aes->params.base_addr, offset);
20000e32:	c194                	sw	a3,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:346
  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
20000e34:	0591                	addi	a1,a1,4
20000e36:	46b1                	li	a3,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
    data->data[i] = mmio_region_read32(aes->params.base_addr, offset);
20000e38:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e3a:	9732                	add	a4,a4,a2
20000e3c:	5738                	lw	a4,104(a4)
dif_aes_read_output():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
20000e3e:	00c587b3          	add	a5,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:346
  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
20000e42:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:349
    data->data[i] = mmio_region_read32(aes->params.base_addr, offset);
20000e44:	c398                	sw	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:346
  for (int i = 0; i < AES_DATA_OUT_MULTIREG_COUNT; ++i) {
20000e46:	fed619e3          	bne	a2,a3,20000e38 <dif_aes_read_output+0x1c>
20000e4a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:353
  }

  return kDifAesOk;
}
20000e4c:	8532                	mv	a0,a2
20000e4e:	8082                	ret

20000e50 <dif_aes_trigger>:
dif_aes_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:357

dif_aes_result_t dif_aes_trigger(const dif_aes_t *aes,
                                 dif_aes_trigger_t trigger) {
  if (aes == NULL) {
20000e50:	c105                	beqz	a0,20000e70 <dif_aes_trigger+0x20>
20000e52:	468d                	li	a3,3
20000e54:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:362
    return kDifAesBadArg;
  }

  uint32_t reg;
  switch (trigger) {
20000e56:	00b6ee63          	bltu	a3,a1,20000e72 <dif_aes_trigger+0x22>
20000e5a:	058a                	slli	a1,a1,0x2
20000e5c:	00001617          	auipc	a2,0x1
20000e60:	77860613          	addi	a2,a2,1912 # 200025d4 <kCipherTextGold+0x10>
20000e64:	95b2                	add	a1,a1,a2
20000e66:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:379
      break;
    default:
      return kDifAesError;
  }

  mmio_region_write32(aes->params.base_addr, AES_TRIGGER_REG_OFFSET, reg);
20000e68:	4108                	lw	a0,0(a0)
20000e6a:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e6c:	dd2c                	sw	a1,120(a0)
20000e6e:	a011                	j	20000e72 <dif_aes_trigger+0x22>
20000e70:	4609                	li	a2,2
dif_aes_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:382

  return kDifAesOk;
}
20000e72:	8532                	mv	a0,a2
20000e74:	8082                	ret

20000e76 <dif_aes_get_status>:
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:385

dif_aes_result_t dif_aes_get_status(const dif_aes_t *aes, dif_aes_status_t flag,
                                    bool *set) {
20000e76:	86aa                	mv	a3,a0
20000e78:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:386
  if (aes == NULL || set == NULL) {
20000e7a:	c2c1                	beqz	a3,20000efa <dif_aes_get_status+0x84>
20000e7c:	ce3d                	beqz	a2,20000efa <dif_aes_get_status+0x84>
20000e7e:	4709                	li	a4,2
20000e80:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:390
    return kDifAesBadArg;
  }

  switch (flag) {
20000e82:	02b75063          	bge	a4,a1,20000ea2 <dif_aes_get_status+0x2c>
20000e86:	4711                	li	a4,4
20000e88:	02b74963          	blt	a4,a1,20000eba <dif_aes_get_status+0x44>
20000e8c:	470d                	li	a4,3
20000e8e:	04e58163          	beq	a1,a4,20000ed0 <dif_aes_get_status+0x5a>
20000e92:	4711                	li	a4,4
20000e94:	06e59363          	bne	a1,a4,20000efa <dif_aes_get_status+0x84>
aes_input_ready():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:69
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000e98:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e9a:	5d6c                	lw	a1,124(a0)
20000e9c:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:404
      break;
    case kDifAesStatusOutputValid:
      *set = aes_output_valid(aes);
      break;
    case kDifAesStatusInputReady:
      *set = aes_input_ready(aes);
20000e9e:	8191                	srli	a1,a1,0x4
20000ea0:	a891                	j	20000ef4 <dif_aes_get_status+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:390
  switch (flag) {
20000ea2:	cd85                	beqz	a1,20000eda <dif_aes_get_status+0x64>
20000ea4:	4705                	li	a4,1
20000ea6:	02e58e63          	beq	a1,a4,20000ee2 <dif_aes_get_status+0x6c>
20000eaa:	4709                	li	a4,2
20000eac:	04e59763          	bne	a1,a4,20000efa <dif_aes_get_status+0x84>
aes_output_lost():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:59
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000eb0:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000eb2:	5d6c                	lw	a1,124(a0)
20000eb4:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:398
      *set = aes_output_lost(aes);
20000eb6:	8189                	srli	a1,a1,0x2
20000eb8:	a835                	j	20000ef4 <dif_aes_get_status+0x7e>
20000eba:	4715                	li	a4,5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:390
  switch (flag) {
20000ebc:	02e58863          	beq	a1,a4,20000eec <dif_aes_get_status+0x76>
20000ec0:	4719                	li	a4,6
20000ec2:	02e59c63          	bne	a1,a4,20000efa <dif_aes_get_status+0x84>
aes_alert_recoverable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:79
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000ec6:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ec8:	5d6c                	lw	a1,124(a0)
20000eca:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:410
      break;
    case kDifAesStatusAlertFatalFault:
      *set = aes_alert_fatal(aes);
      break;
    case kDifAesStatusAlertRecovCtrlUpdateErr:
      *set = aes_alert_recoverable(aes);
20000ecc:	8195                	srli	a1,a1,0x5
20000ece:	a01d                	j	20000ef4 <dif_aes_get_status+0x7e>
aes_output_valid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:64
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000ed0:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ed2:	5d6c                	lw	a1,124(a0)
20000ed4:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:401
      *set = aes_output_valid(aes);
20000ed6:	818d                	srli	a1,a1,0x3
20000ed8:	a831                	j	20000ef4 <dif_aes_get_status+0x7e>
aes_idle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:49
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000eda:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000edc:	5d6c                	lw	a1,124(a0)
20000ede:	4501                	li	a0,0
20000ee0:	a811                	j	20000ef4 <dif_aes_get_status+0x7e>
aes_stalled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:54
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000ee2:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ee4:	5d6c                	lw	a1,124(a0)
20000ee6:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:395
      *set = aes_stalled(aes);
20000ee8:	8185                	srli	a1,a1,0x1
20000eea:	a029                	j	20000ef4 <dif_aes_get_status+0x7e>
aes_alert_fatal():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:74
  return mmio_region_get_bit32(aes->params.base_addr, AES_STATUS_REG_OFFSET,
20000eec:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000eee:	5d6c                	lw	a1,124(a0)
20000ef0:	4501                	li	a0,0
dif_aes_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:407
      *set = aes_alert_fatal(aes);
20000ef2:	8199                	srli	a1,a1,0x6
20000ef4:	8985                	andi	a1,a1,1
20000ef6:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:417
    default:
      return kDifAesError;
  }

  return kDifAesOk;
}
20000efa:	8082                	ret

20000efc <dif_aes_alert_force>:
dif_aes_alert_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:422

DIF_WARN_UNUSED_RESULT
dif_aes_result_t dif_aes_alert_force(const dif_aes_t *aes,
                                     dif_aes_alert_t alert) {
  if (aes == NULL) {
20000efc:	cd19                	beqz	a0,20000f1a <dif_aes_alert_force+0x1e>
20000efe:	862a                	mv	a2,a0
20000f00:	4505                	li	a0,1
20000f02:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:427
    return kDifAesBadArg;
  }

  bitfield_bit32_index_t index;
  switch (alert) {
20000f04:	c589                	beqz	a1,20000f0e <dif_aes_alert_force+0x12>
20000f06:	4685                	li	a3,1
20000f08:	00d59863          	bne	a1,a3,20000f18 <dif_aes_alert_force+0x1c>
20000f0c:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:439
    default:
      return kDifAesError;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(aes->params.base_addr, AES_ALERT_TEST_REG_OFFSET, reg);
20000f0e:	420c                	lw	a1,0(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000f10:	00d51533          	sll	a0,a0,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f14:	c188                	sw	a0,0(a1)
20000f16:	4501                	li	a0,0
dif_aes_alert_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_aes.c:442

  return kDifAesOk;
}
20000f18:	8082                	ret
20000f1a:	4509                	li	a0,2
20000f1c:	8082                	ret
	...

20000f20 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000f20:	7139                	addi	sp,sp,-64
20000f22:	ce06                	sw	ra,28(sp)
20000f24:	cc22                	sw	s0,24(sp)
20000f26:	ca26                	sw	s1,20(sp)
20000f28:	c84a                	sw	s2,16(sp)
20000f2a:	892a                	mv	s2,a0
20000f2c:	de46                	sw	a7,60(sp)
20000f2e:	dc42                	sw	a6,56(sp)
20000f30:	da3e                	sw	a5,52(sp)
20000f32:	d83a                	sw	a4,48(sp)
20000f34:	d636                	sw	a3,44(sp)
20000f36:	d432                	sw	a2,40(sp)
20000f38:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000f3a:	4144                	lw	s1,4(a0)
20000f3c:	80000537          	lui	a0,0x80000
20000f40:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd9c3>
20000f44:	8526                	mv	a0,s1
20000f46:	4581                	li	a1,0
20000f48:	ef8ff0ef          	jal	ra,20000640 <memchr>
20000f4c:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20000f50:	02f00593          	li	a1,47
20000f54:	8526                	mv	a0,s1
20000f56:	f02ff0ef          	jal	ra,20000658 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000f5a:	00092583          	lw	a1,0(s2)
20000f5e:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000f60:	00b66b63          	bltu	a2,a1,20000f76 <base_log_internal_core+0x56>
20000f64:	058a                	slli	a1,a1,0x2
20000f66:	00001617          	auipc	a2,0x1
20000f6a:	f6260613          	addi	a2,a2,-158 # 20001ec8 <kTestConfig+0x38>
20000f6e:	95b2                	add	a1,a1,a2
20000f70:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000f72:	e519                	bnez	a0,20000f80 <base_log_internal_core+0x60>
20000f74:	a801                	j	20000f84 <base_log_internal_core+0x64>
20000f76:	00001597          	auipc	a1,0x1
20000f7a:	68758593          	addi	a1,a1,1671 # 200025fd <kCipherTextGold+0x39>
20000f7e:	c119                	beqz	a0,20000f84 <base_log_internal_core+0x64>
20000f80:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000f84:	effff417          	auipc	s0,0xeffff
20000f88:	08840413          	addi	s0,s0,136 # 1000000c <base_log_internal_core.global_log_counter>
20000f8c:	00045603          	lhu	a2,0(s0)
20000f90:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000f94:	00001517          	auipc	a0,0x1
20000f98:	65050513          	addi	a0,a0,1616 # 200025e4 <kCipherTextGold+0x20>
20000f9c:	86a6                	mv	a3,s1
20000f9e:	28d1                	jal	20001072 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000fa0:	00041503          	lh	a0,0(s0)
20000fa4:	0505                	addi	a0,a0,1
20000fa6:	00a41023          	sh	a0,0(s0)
20000faa:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000fac:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000fae:	01092503          	lw	a0,16(s2)
20000fb2:	28c5                	jal	200010a2 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000fb4:	00001517          	auipc	a0,0x1
20000fb8:	63e50513          	addi	a0,a0,1598 # 200025f2 <kCipherTextGold+0x2e>
20000fbc:	285d                	jal	20001072 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000fbe:	4942                	lw	s2,16(sp)
20000fc0:	44d2                	lw	s1,20(sp)
20000fc2:	4462                	lw	s0,24(sp)
20000fc4:	40f2                	lw	ra,28(sp)
20000fc6:	6121                	addi	sp,sp,64
20000fc8:	8082                	ret

20000fca <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20000fca:	1101                	addi	sp,sp,-32
20000fcc:	ce46                	sw	a7,28(sp)
20000fce:	cc42                	sw	a6,24(sp)
20000fd0:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000fd2:	00001797          	auipc	a5,0x1
20000fd6:	db678793          	addi	a5,a5,-586 # 20001d88 <kDeviceLogBypassUartAddress>
20000fda:	439c                	lw	a5,0(a5)
20000fdc:	c83a                	sw	a4,16(sp)
20000fde:	c636                	sw	a3,12(sp)
20000fe0:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fe2:	c388                	sw	a0,0(a5)
20000fe4:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000fe6:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000fe8:	c989                	beqz	a1,20000ffa <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000fea:	4512                	lw	a0,4(sp)
20000fec:	00450613          	addi	a2,a0,4
20000ff0:	c232                	sw	a2,4(sp)
20000ff2:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000ff4:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ff6:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000ff8:	f9ed                	bnez	a1,20000fea <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000ffa:	6105                	addi	sp,sp,32
20000ffc:	8082                	ret
	...

20001000 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20001000:	e589                	bnez	a1,2000100a <base_set_stdout+0xa>
20001002:	00000597          	auipc	a1,0x0
20001006:	01658593          	addi	a1,a1,22 # 20001018 <base_dev_null>
2000100a:	effff617          	auipc	a2,0xeffff
2000100e:	ff660613          	addi	a2,a2,-10 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20001012:	c208                	sw	a0,0(a2)
20001014:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20001016:	8082                	ret

20001018 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001018:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
2000101a:	8082                	ret

2000101c <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
2000101c:	effff597          	auipc	a1,0xeffff
20001020:	fe458593          	addi	a1,a1,-28 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20001024:	c188                	sw	a0,0(a1)
20001026:	00000517          	auipc	a0,0x0
2000102a:	00c50513          	addi	a0,a0,12 # 20001032 <base_dev_uart>
2000102e:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001030:	8082                	ret

20001032 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20001032:	1101                	addi	sp,sp,-32
20001034:	ce06                	sw	ra,28(sp)
20001036:	cc22                	sw	s0,24(sp)
20001038:	ca26                	sw	s1,20(sp)
2000103a:	c84a                	sw	s2,16(sp)
2000103c:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
2000103e:	c20d                	beqz	a2,20001060 <base_dev_uart+0x2e>
20001040:	8432                	mv	s0,a2
20001042:	892e                	mv	s2,a1
20001044:	89aa                	mv	s3,a0
20001046:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001048:	00990533          	add	a0,s2,s1
2000104c:	00054583          	lbu	a1,0(a0)
20001050:	854e                	mv	a0,s3
20001052:	2f11                	jal	20001766 <dif_uart_byte_send_polled>
20001054:	e519                	bnez	a0,20001062 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001056:	0485                	addi	s1,s1,1
20001058:	fe9418e3          	bne	s0,s1,20001048 <base_dev_uart+0x16>
2000105c:	84a2                	mv	s1,s0
2000105e:	a011                	j	20001062 <base_dev_uart+0x30>
20001060:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20001062:	8526                	mv	a0,s1
20001064:	49b2                	lw	s3,12(sp)
20001066:	4942                	lw	s2,16(sp)
20001068:	44d2                	lw	s1,20(sp)
2000106a:	4462                	lw	s0,24(sp)
2000106c:	40f2                	lw	ra,28(sp)
2000106e:	6105                	addi	sp,sp,32
20001070:	8082                	ret

20001072 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20001072:	7179                	addi	sp,sp,-48
20001074:	c606                	sw	ra,12(sp)
20001076:	d646                	sw	a7,44(sp)
20001078:	d442                	sw	a6,40(sp)
2000107a:	d23e                	sw	a5,36(sp)
2000107c:	d03a                	sw	a4,32(sp)
2000107e:	ce36                	sw	a3,28(sp)
20001080:	cc32                	sw	a2,24(sp)
20001082:	ca2e                	sw	a1,20(sp)
20001084:	effff597          	auipc	a1,0xeffff
20001088:	f7c58593          	addi	a1,a1,-132 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
2000108c:	4190                	lw	a2,0(a1)
2000108e:	41cc                	lw	a1,4(a1)
20001090:	872a                	mv	a4,a0
20001092:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20001094:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001096:	8532                	mv	a0,a2
20001098:	863a                	mv	a2,a4
2000109a:	200d                	jal	200010bc <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
2000109c:	40b2                	lw	ra,12(sp)
2000109e:	6145                	addi	sp,sp,48
200010a0:	8082                	ret

200010a2 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
200010a2:	effff697          	auipc	a3,0xeffff
200010a6:	f5e68693          	addi	a3,a3,-162 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200010aa:	4290                	lw	a2,0(a3)
200010ac:	42d4                	lw	a3,4(a3)
200010ae:	872e                	mv	a4,a1
200010b0:	87aa                	mv	a5,a0
200010b2:	8532                	mv	a0,a2
200010b4:	85b6                	mv	a1,a3
200010b6:	863e                	mv	a2,a5
200010b8:	86ba                	mv	a3,a4
200010ba:	a009                	j	200010bc <base_vfprintf>

200010bc <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
200010bc:	7139                	addi	sp,sp,-64
200010be:	de06                	sw	ra,60(sp)
200010c0:	dc22                	sw	s0,56(sp)
200010c2:	da26                	sw	s1,52(sp)
200010c4:	d84a                	sw	s2,48(sp)
200010c6:	d64e                	sw	s3,44(sp)
200010c8:	d452                	sw	s4,40(sp)
200010ca:	d256                	sw	s5,36(sp)
200010cc:	d05a                	sw	s6,32(sp)
200010ce:	ce5e                	sw	s7,28(sp)
200010d0:	cc62                	sw	s8,24(sp)
200010d2:	ca66                	sw	s9,20(sp)
200010d4:	c86a                	sw	s10,16(sp)
200010d6:	c66e                	sw	s11,12(sp)
200010d8:	8bb2                	mv	s7,a2
200010da:	892a                	mv	s2,a0
200010dc:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
200010de:	c199                	beqz	a1,200010e4 <base_vfprintf+0x28>
200010e0:	89ae                	mv	s3,a1
200010e2:	a029                	j	200010ec <base_vfprintf+0x30>
200010e4:	00000997          	auipc	s3,0x0
200010e8:	f3498993          	addi	s3,s3,-204 # 20001018 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
200010ec:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
200010ee:	000bc503          	lbu	a0,0(s7)
200010f2:	28050f63          	beqz	a0,20001390 <base_vfprintf+0x2d4>
200010f6:	4b01                	li	s6,0
200010f8:	02500c13          	li	s8,37
200010fc:	4ca5                	li	s9,9
200010fe:	02000d13          	li	s10,32
20001102:	06800d93          	li	s11,104
20001106:	00001a17          	auipc	s4,0x1
2000110a:	4f9a0a13          	addi	s4,s4,1273 # 200025ff <kCipherTextGold+0x3b>
2000110e:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20001110:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20001112:	0ff57413          	andi	s0,a0,255
20001116:	01840963          	beq	s0,s8,20001128 <base_vfprintf+0x6c>
2000111a:	c419                	beqz	s0,20001128 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
2000111c:	009b8533          	add	a0,s7,s1
20001120:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20001124:	0485                	addi	s1,s1,1
20001126:	b7f5                	j	20001112 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20001128:	c491                	beqz	s1,20001134 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
2000112a:	854a                	mv	a0,s2
2000112c:	85de                	mv	a1,s7
2000112e:	8626                	mv	a2,s1
20001130:	9982                	jalr	s3
20001132:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20001134:	24040f63          	beqz	s0,20001392 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001138:	009b8633          	add	a2,s7,s1
2000113c:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001140:	22050f63          	beqz	a0,2000137e <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001144:	fd050593          	addi	a1,a0,-48
20001148:	0ff5f593          	andi	a1,a1,255
2000114c:	00bcf863          	bgeu	s9,a1,2000115c <base_vfprintf+0xa0>
20001150:	4401                	li	s0,0
20001152:	4581                	li	a1,0
20001154:	4605                	li	a2,1
20001156:	028d7f63          	bgeu	s10,s0,20001194 <base_vfprintf+0xd8>
2000115a:	aca1                	j	200013b2 <base_vfprintf+0x2f6>
2000115c:	4581                	li	a1,0
2000115e:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001160:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001162:	00b606b3          	add	a3,a2,a1
20001166:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000116a:	20068a63          	beqz	a3,2000137e <base_vfprintf+0x2c2>
2000116e:	0ff57513          	andi	a0,a0,255
20001172:	03540733          	mul	a4,s0,s5
20001176:	953a                	add	a0,a0,a4
20001178:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
2000117c:	fd068513          	addi	a0,a3,-48
20001180:	0ff57713          	andi	a4,a0,255
20001184:	0585                	addi	a1,a1,1
20001186:	8536                	mv	a0,a3
20001188:	fcecfde3          	bgeu	s9,a4,20001162 <base_vfprintf+0xa6>
2000118c:	4601                	li	a2,0
2000118e:	8536                	mv	a0,a3
20001190:	228d6163          	bltu	s10,s0,200013b2 <base_vfprintf+0x2f6>
20001194:	008036b3          	snez	a3,s0
20001198:	8e55                	or	a2,a2,a3
2000119a:	20060c63          	beqz	a2,200013b2 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000119e:	95de                	add	a1,a1,s7
200011a0:	95a6                	add	a1,a1,s1
200011a2:	00258b93          	addi	s7,a1,2
200011a6:	02adce63          	blt	s11,a0,200011e2 <base_vfprintf+0x126>
200011aa:	06100593          	li	a1,97
200011ae:	06a5d563          	bge	a1,a0,20001218 <base_vfprintf+0x15c>
200011b2:	06300593          	li	a1,99
200011b6:	0ca5cb63          	blt	a1,a0,2000128c <base_vfprintf+0x1d0>
200011ba:	06200593          	li	a1,98
200011be:	14b50a63          	beq	a0,a1,20001312 <base_vfprintf+0x256>
200011c2:	06300593          	li	a1,99
200011c6:	18b51f63          	bne	a0,a1,20001364 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
200011ca:	4502                	lw	a0,0(sp)
200011cc:	00450593          	addi	a1,a0,4
200011d0:	c02e                	sw	a1,0(sp)
200011d2:	4108                	lw	a0,0(a0)
200011d4:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
200011d8:	4605                	li	a2,1
200011da:	854a                	mv	a0,s2
200011dc:	00b10593          	addi	a1,sp,11
200011e0:	aa41                	j	20001370 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200011e2:	07200593          	li	a1,114
200011e6:	04a5dd63          	bge	a1,a0,20001240 <base_vfprintf+0x184>
200011ea:	07700593          	li	a1,119
200011ee:	0aa5c663          	blt	a1,a0,2000129a <base_vfprintf+0x1de>
200011f2:	07300593          	li	a1,115
200011f6:	12b50963          	beq	a0,a1,20001328 <base_vfprintf+0x26c>
200011fa:	07500593          	li	a1,117
200011fe:	16b51363          	bne	a0,a1,20001364 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20001202:	4502                	lw	a0,0(sp)
20001204:	00450593          	addi	a1,a0,4
20001208:	c02e                	sw	a1,0(sp)
2000120a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
2000120c:	00001797          	auipc	a5,0x1
20001210:	ce978793          	addi	a5,a5,-791 # 20001ef5 <kDigitsLow>
20001214:	4729                	li	a4,10
20001216:	a8cd                	j	20001308 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001218:	13850763          	beq	a0,s8,20001346 <base_vfprintf+0x28a>
2000121c:	04800593          	li	a1,72
20001220:	00b50663          	beq	a0,a1,2000122c <base_vfprintf+0x170>
20001224:	05800593          	li	a1,88
20001228:	12b51e63          	bne	a0,a1,20001364 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
2000122c:	4502                	lw	a0,0(sp)
2000122e:	00450593          	addi	a1,a0,4
20001232:	c02e                	sw	a1,0(sp)
20001234:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20001236:	00001797          	auipc	a5,0x1
2000123a:	ccf78793          	addi	a5,a5,-817 # 20001f05 <kDigitsHigh>
2000123e:	a0e1                	j	20001306 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001240:	06900593          	li	a1,105
20001244:	06b50d63          	beq	a0,a1,200012be <base_vfprintf+0x202>
20001248:	06f00593          	li	a1,111
2000124c:	10b50163          	beq	a0,a1,2000134e <base_vfprintf+0x292>
20001250:	07000593          	li	a1,112
20001254:	10b51863          	bne	a0,a1,20001364 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001258:	00001597          	auipc	a1,0x1
2000125c:	3ab58593          	addi	a1,a1,939 # 20002603 <kCipherTextGold+0x3f>
20001260:	4609                	li	a2,2
20001262:	854a                	mv	a0,s2
20001264:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20001266:	4582                	lw	a1,0(sp)
20001268:	00458613          	addi	a2,a1,4
2000126c:	c032                	sw	a2,0(sp)
2000126e:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001270:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001274:	00001797          	auipc	a5,0x1
20001278:	c8178793          	addi	a5,a5,-895 # 20001ef5 <kDigitsLow>
2000127c:	46a1                	li	a3,8
2000127e:	4741                	li	a4,16
20001280:	854a                	mv	a0,s2
20001282:	85ce                	mv	a1,s3
20001284:	2a5d                	jal	2000143a <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20001286:	00a40b33          	add	s6,s0,a0
2000128a:	a0ed                	j	20001374 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000128c:	06400593          	li	a1,100
20001290:	02b50763          	beq	a0,a1,200012be <base_vfprintf+0x202>
20001294:	07b50063          	beq	a0,s11,200012f4 <base_vfprintf+0x238>
20001298:	a0f1                	j	20001364 <base_vfprintf+0x2a8>
2000129a:	07800593          	li	a1,120
2000129e:	04b50b63          	beq	a0,a1,200012f4 <base_vfprintf+0x238>
200012a2:	07a00593          	li	a1,122
200012a6:	0ab51f63          	bne	a0,a1,20001364 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
200012aa:	4502                	lw	a0,0(sp)
200012ac:	00450593          	addi	a1,a0,4
200012b0:	c02e                	sw	a1,0(sp)
200012b2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
200012b4:	00850593          	addi	a1,a0,8
200012b8:	c02e                	sw	a1,0(sp)
200012ba:	414c                	lw	a1,4(a0)
200012bc:	a84d                	j	2000136e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
200012be:	4502                	lw	a0,0(sp)
200012c0:	00450593          	addi	a1,a0,4
200012c4:	c02e                	sw	a1,0(sp)
200012c6:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
200012c8:	557d                	li	a0,-1
200012ca:	00954c63          	blt	a0,s1,200012e2 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
200012ce:	00001597          	auipc	a1,0x1
200012d2:	33358593          	addi	a1,a1,819 # 20002601 <kCipherTextGold+0x3d>
200012d6:	4605                	li	a2,1
200012d8:	854a                	mv	a0,s2
200012da:	9982                	jalr	s3
200012dc:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
200012de:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200012e2:	00001797          	auipc	a5,0x1
200012e6:	c1378793          	addi	a5,a5,-1005 # 20001ef5 <kDigitsLow>
200012ea:	4729                	li	a4,10
200012ec:	854a                	mv	a0,s2
200012ee:	85ce                	mv	a1,s3
200012f0:	8626                	mv	a2,s1
200012f2:	a829                	j	2000130c <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
200012f4:	4502                	lw	a0,0(sp)
200012f6:	00450593          	addi	a1,a0,4
200012fa:	c02e                	sw	a1,0(sp)
200012fc:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200012fe:	00001797          	auipc	a5,0x1
20001302:	bf778793          	addi	a5,a5,-1033 # 20001ef5 <kDigitsLow>
20001306:	4741                	li	a4,16
20001308:	854a                	mv	a0,s2
2000130a:	85ce                	mv	a1,s3
2000130c:	86a2                	mv	a3,s0
2000130e:	2235                	jal	2000143a <write_digits>
20001310:	a08d                	j	20001372 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20001312:	4502                	lw	a0,0(sp)
20001314:	00450593          	addi	a1,a0,4
20001318:	c02e                	sw	a1,0(sp)
2000131a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
2000131c:	00001797          	auipc	a5,0x1
20001320:	bd978793          	addi	a5,a5,-1063 # 20001ef5 <kDigitsLow>
20001324:	4709                	li	a4,2
20001326:	b7cd                	j	20001308 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20001328:	4502                	lw	a0,0(sp)
2000132a:	00450593          	addi	a1,a0,4
2000132e:	c02e                	sw	a1,0(sp)
20001330:	410c                	lw	a1,0(a0)
20001332:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001334:	00a58633          	add	a2,a1,a0
20001338:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
2000133c:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
2000133e:	fa7d                	bnez	a2,20001334 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001340:	fff50613          	addi	a2,a0,-1
20001344:	a02d                	j	2000136e <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20001346:	4605                	li	a2,1
20001348:	854a                	mv	a0,s2
2000134a:	85d2                	mv	a1,s4
2000134c:	a015                	j	20001370 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
2000134e:	4502                	lw	a0,0(sp)
20001350:	00450593          	addi	a1,a0,4
20001354:	c02e                	sw	a1,0(sp)
20001356:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001358:	00001797          	auipc	a5,0x1
2000135c:	b9d78793          	addi	a5,a5,-1123 # 20001ef5 <kDigitsLow>
20001360:	4721                	li	a4,8
20001362:	b75d                	j	20001308 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20001364:	00001597          	auipc	a1,0x1
20001368:	bb158593          	addi	a1,a1,-1103 # 20001f15 <kUnknownSpec>
2000136c:	463d                	li	a2,15
2000136e:	854a                	mv	a0,s2
20001370:	9982                	jalr	s3
20001372:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001374:	000bc503          	lbu	a0,0(s7)
20001378:	d8051ce3          	bnez	a0,20001110 <base_vfprintf+0x54>
2000137c:	a819                	j	20001392 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
2000137e:	00001597          	auipc	a1,0x1
20001382:	b5a58593          	addi	a1,a1,-1190 # 20001ed8 <kErrorNul>
20001386:	4645                	li	a2,17
20001388:	854a                	mv	a0,s2
2000138a:	9982                	jalr	s3
2000138c:	9b2a                	add	s6,s6,a0
2000138e:	a011                	j	20001392 <base_vfprintf+0x2d6>
20001390:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20001392:	855a                	mv	a0,s6
20001394:	4db2                	lw	s11,12(sp)
20001396:	4d42                	lw	s10,16(sp)
20001398:	4cd2                	lw	s9,20(sp)
2000139a:	4c62                	lw	s8,24(sp)
2000139c:	4bf2                	lw	s7,28(sp)
2000139e:	5b02                	lw	s6,32(sp)
200013a0:	5a92                	lw	s5,36(sp)
200013a2:	5a22                	lw	s4,40(sp)
200013a4:	59b2                	lw	s3,44(sp)
200013a6:	5942                	lw	s2,48(sp)
200013a8:	54d2                	lw	s1,52(sp)
200013aa:	5462                	lw	s0,56(sp)
200013ac:	50f2                	lw	ra,60(sp)
200013ae:	6121                	addi	sp,sp,64
200013b0:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
200013b2:	00001597          	auipc	a1,0x1
200013b6:	b3758593          	addi	a1,a1,-1225 # 20001ee9 <kErrorTooWide>
200013ba:	4631                	li	a2,12
200013bc:	b7f1                	j	20001388 <base_vfprintf+0x2cc>

200013be <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
200013be:	7179                	addi	sp,sp,-48
200013c0:	ca06                	sw	ra,20(sp)
200013c2:	d646                	sw	a7,44(sp)
200013c4:	d442                	sw	a6,40(sp)
200013c6:	d23e                	sw	a5,36(sp)
200013c8:	d03a                	sw	a4,32(sp)
200013ca:	ce36                	sw	a3,28(sp)
200013cc:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200013ce:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200013d0:	c42a                	sw	a0,8(sp)
200013d2:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200013d4:	00000597          	auipc	a1,0x0
200013d8:	01258593          	addi	a1,a1,18 # 200013e6 <snprintf_sink>
200013dc:	0028                	addi	a0,sp,8
200013de:	39f9                	jal	200010bc <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200013e0:	40d2                	lw	ra,20(sp)
200013e2:	6145                	addi	sp,sp,48
200013e4:	8082                	ret

200013e6 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
200013e6:	1141                	addi	sp,sp,-16
200013e8:	c606                	sw	ra,12(sp)
200013ea:	c422                	sw	s0,8(sp)
200013ec:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
200013ee:	4140                	lw	s0,4(a0)
200013f0:	c00d                	beqz	s0,20001412 <snprintf_sink+0x2c>
200013f2:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
200013f4:	00c46363          	bltu	s0,a2,200013fa <snprintf_sink+0x14>
200013f8:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200013fa:	4088                	lw	a0,0(s1)
200013fc:	8622                	mv	a2,s0
200013fe:	9f2ff0ef          	jal	ra,200005f0 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001402:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001404:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001406:	9522                	add	a0,a0,s0
20001408:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
2000140a:	40858533          	sub	a0,a1,s0
2000140e:	c0c8                	sw	a0,4(s1)
20001410:	a011                	j	20001414 <snprintf_sink+0x2e>
20001412:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20001414:	8522                	mv	a0,s0
20001416:	4492                	lw	s1,4(sp)
20001418:	4422                	lw	s0,8(sp)
2000141a:	40b2                	lw	ra,12(sp)
2000141c:	0141                	addi	sp,sp,16
2000141e:	8082                	ret

20001420 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001420:	1101                	addi	sp,sp,-32
20001422:	c206                	sw	ra,4(sp)
20001424:	ce46                	sw	a7,28(sp)
20001426:	cc42                	sw	a6,24(sp)
20001428:	ca3e                	sw	a5,20(sp)
2000142a:	c83a                	sw	a4,16(sp)
2000142c:	c636                	sw	a3,12(sp)
2000142e:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001430:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20001432:	3169                	jal	200010bc <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001434:	4092                	lw	ra,4(sp)
20001436:	6105                	addi	sp,sp,32
20001438:	8082                	ret

2000143a <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
2000143a:	7139                	addi	sp,sp,-64
2000143c:	de06                	sw	ra,60(sp)
2000143e:	dc22                	sw	s0,56(sp)
20001440:	da26                	sw	s1,52(sp)
20001442:	d84a                	sw	s2,48(sp)
20001444:	d64e                	sw	s3,44(sp)
20001446:	892e                	mv	s2,a1
20001448:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000144a:	ca05                	beqz	a2,2000147a <write_digits+0x40>
2000144c:	4501                	li	a0,0
2000144e:	02b10813          	addi	a6,sp,43
20001452:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001454:	02e65633          	divu	a2,a2,a4
20001458:	02e60433          	mul	s0,a2,a4
2000145c:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001460:	943e                	add	s0,s0,a5
20001462:	00040403          	lb	s0,0(s0)
20001466:	00a805b3          	add	a1,a6,a0
2000146a:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000146e:	157d                	addi	a0,a0,-1
20001470:	fee4f1e3          	bgeu	s1,a4,20001452 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001474:	40a00633          	neg	a2,a0
20001478:	a011                	j	2000147c <write_digits+0x42>
2000147a:	4601                	li	a2,0
2000147c:	4485                	li	s1,1
2000147e:	c291                	beqz	a3,20001482 <write_digits+0x48>
20001480:	84b6                	mv	s1,a3
20001482:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20001486:	00a4e463          	bltu	s1,a0,2000148e <write_digits+0x54>
2000148a:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000148e:	02967063          	bgeu	a2,s1,200014ae <write_digits+0x74>
20001492:	0068                	addi	a0,sp,12
20001494:	8d05                	sub	a0,a0,s1
20001496:	02050513          	addi	a0,a0,32
2000149a:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
2000149e:	03000593          	li	a1,48
200014a2:	8622                	mv	a2,s0
200014a4:	962ff0ef          	jal	ra,20000606 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200014a8:	147d                	addi	s0,s0,-1
200014aa:	fc7d                	bnez	s0,200014a8 <write_digits+0x6e>
200014ac:	8626                	mv	a2,s1
200014ae:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
200014b0:	8d11                	sub	a0,a0,a2
200014b2:	02050593          	addi	a1,a0,32
200014b6:	854e                	mv	a0,s3
200014b8:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200014ba:	59b2                	lw	s3,44(sp)
200014bc:	5942                	lw	s2,48(sp)
200014be:	54d2                	lw	s1,52(sp)
200014c0:	5462                	lw	s0,56(sp)
200014c2:	50f2                	lw	ra,60(sp)
200014c4:	6121                	addi	sp,sp,64
200014c6:	8082                	ret

200014c8 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
200014c8:	c581                	beqz	a1,200014d0 <dif_uart_init+0x8>
200014ca:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200014cc:	c188                	sw	a0,0(a1)
200014ce:	a011                	j	200014d2 <dif_uart_init+0xa>
200014d0:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200014d2:	8532                	mv	a0,a2
200014d4:	8082                	ret

200014d6 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200014d6:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
200014d8:	c606                	sw	ra,12(sp)
200014da:	c422                	sw	s0,8(sp)
200014dc:	c226                	sw	s1,4(sp)
200014de:	c92d                	beqz	a0,20001550 <dif_uart_configure+0x7a>
200014e0:	84ae                	mv	s1,a1
200014e2:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
200014e4:	418c                	lw	a1,0(a1)
200014e6:	450d                	li	a0,3
200014e8:	c5ad                	beqz	a1,20001552 <dif_uart_configure+0x7c>
200014ea:	40d0                	lw	a2,4(s1)
200014ec:	c23d                	beqz	a2,20001552 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200014ee:	01459513          	slli	a0,a1,0x14
200014f2:	81b1                	srli	a1,a1,0xc
200014f4:	4681                	li	a3,0
200014f6:	29a9                	jal	20001950 <__udivdi3>
200014f8:	6641                	lui	a2,0x10
200014fa:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200014fc:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200014fe:	8d31                	xor	a0,a0,a2
20001500:	8dc9                	or	a1,a1,a0
20001502:	4511                	li	a0,4
20001504:	e5b9                	bnez	a1,20001552 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20001506:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001508:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
2000150c:	4008                	lw	a0,0(s0)
2000150e:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001510:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20001512:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001514:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001518:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000151a:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000151e:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001520:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20001524:	4008                	lw	a0,0(s0)
20001526:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001528:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
2000152a:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000152c:	01061513          	slli	a0,a2,0x10
20001530:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20001534:	c291                	beqz	a3,20001538 <dif_uart_configure+0x62>
20001536:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001538:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
2000153a:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
2000153c:	e219                	bnez	a2,20001542 <dif_uart_configure+0x6c>
2000153e:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20001542:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001544:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001546:	400c                	lw	a1,0(s0)
20001548:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000154a:	0005a223          	sw	zero,4(a1)
2000154e:	a011                	j	20001552 <dif_uart_configure+0x7c>
20001550:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001552:	4492                	lw	s1,4(sp)
20001554:	4422                	lw	s0,8(sp)
20001556:	40b2                	lw	ra,12(sp)
20001558:	0141                	addi	sp,sp,16
2000155a:	8082                	ret

2000155c <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
2000155c:	1141                	addi	sp,sp,-16
2000155e:	c606                	sw	ra,12(sp)
20001560:	c422                	sw	s0,8(sp)
20001562:	c226                	sw	s1,4(sp)
20001564:	84aa                	mv	s1,a0
20001566:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001568:	c09d                	beqz	s1,2000158e <dif_uart_irq_is_pending+0x32>
2000156a:	8432                	mv	s0,a2
2000156c:	c20d                	beqz	a2,2000158e <dif_uart_irq_is_pending+0x32>
2000156e:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001570:	852e                	mv	a0,a1
20001572:	85b2                	mv	a1,a2
20001574:	2015                	jal	20001598 <uart_irq_offset_get>
20001576:	85aa                	mv	a1,a0
20001578:	4505                	li	a0,1
2000157a:	c991                	beqz	a1,2000158e <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
2000157c:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000157e:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001580:	4602                	lw	a2,0(sp)
20001582:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001584:	00c5d5b3          	srl	a1,a1,a2
20001588:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
2000158a:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
2000158e:	4492                	lw	s1,4(sp)
20001590:	4422                	lw	s0,8(sp)
20001592:	40b2                	lw	ra,12(sp)
20001594:	0141                	addi	sp,sp,16
20001596:	8082                	ret

20001598 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001598:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
2000159a:	00a66563          	bltu	a2,a0,200015a4 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
2000159e:	c188                	sw	a0,0(a1)
200015a0:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
200015a2:	8082                	ret
200015a4:	4501                	li	a0,0
200015a6:	8082                	ret

200015a8 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
200015a8:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
200015aa:	c606                	sw	ra,12(sp)
200015ac:	c422                	sw	s0,8(sp)
200015ae:	c10d                	beqz	a0,200015d0 <dif_uart_irq_acknowledge+0x28>
200015b0:	842a                	mv	s0,a0
200015b2:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200015b4:	852e                	mv	a0,a1
200015b6:	85b2                	mv	a1,a2
200015b8:	37c5                	jal	20001598 <uart_irq_offset_get>
200015ba:	85aa                	mv	a1,a0
200015bc:	4505                	li	a0,1
200015be:	c991                	beqz	a1,200015d2 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200015c0:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
200015c2:	4010                	lw	a2,0(s0)
200015c4:	4501                	li	a0,0
200015c6:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200015c8:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200015cc:	c20c                	sw	a1,0(a2)
200015ce:	a011                	j	200015d2 <dif_uart_irq_acknowledge+0x2a>
200015d0:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
200015d2:	4422                	lw	s0,8(sp)
200015d4:	40b2                	lw	ra,12(sp)
200015d6:	0141                	addi	sp,sp,16
200015d8:	8082                	ret

200015da <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
200015da:	c911                	beqz	a0,200015ee <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
200015dc:	c581                	beqz	a1,200015e4 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200015de:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200015e0:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
200015e2:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200015e4:	410c                	lw	a1,0(a0)
200015e6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200015e8:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
200015ec:	8082                	ret
200015ee:	4509                	li	a0,2
200015f0:	8082                	ret

200015f2 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200015f2:	862a                	mv	a2,a0
200015f4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200015f6:	c611                	beqz	a2,20001602 <dif_uart_irq_restore_all+0x10>
200015f8:	c589                	beqz	a1,20001602 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200015fa:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200015fc:	4210                	lw	a2,0(a2)
200015fe:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001600:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20001602:	8082                	ret

20001604 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20001604:	1141                	addi	sp,sp,-16
20001606:	c606                	sw	ra,12(sp)
20001608:	c422                	sw	s0,8(sp)
2000160a:	c226                	sw	s1,4(sp)
2000160c:	84aa                	mv	s1,a0
2000160e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20001610:	c485                	beqz	s1,20001638 <dif_uart_irq_get_enabled+0x34>
20001612:	8432                	mv	s0,a2
20001614:	c215                	beqz	a2,20001638 <dif_uart_irq_get_enabled+0x34>
20001616:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001618:	852e                	mv	a0,a1
2000161a:	85b2                	mv	a1,a2
2000161c:	3fb5                	jal	20001598 <uart_irq_offset_get>
2000161e:	85aa                	mv	a1,a0
20001620:	4505                	li	a0,1
20001622:	c999                	beqz	a1,20001638 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001624:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001626:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001628:	4602                	lw	a2,0(sp)
2000162a:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000162c:	00c5d5b3          	srl	a1,a1,a2
20001630:	8985                	andi	a1,a1,1
20001632:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20001636:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001638:	4492                	lw	s1,4(sp)
2000163a:	4422                	lw	s0,8(sp)
2000163c:	40b2                	lw	ra,12(sp)
2000163e:	0141                	addi	sp,sp,16
20001640:	8082                	ret

20001642 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20001642:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20001644:	c606                	sw	ra,12(sp)
20001646:	c422                	sw	s0,8(sp)
20001648:	c226                	sw	s1,4(sp)
2000164a:	c91d                	beqz	a0,20001680 <dif_uart_irq_set_enabled+0x3e>
2000164c:	8432                	mv	s0,a2
2000164e:	84aa                	mv	s1,a0
20001650:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001652:	852e                	mv	a0,a1
20001654:	85b2                	mv	a1,a2
20001656:	3789                	jal	20001598 <uart_irq_offset_get>
20001658:	85aa                	mv	a1,a0
2000165a:	4505                	li	a0,1
2000165c:	c19d                	beqz	a1,20001682 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000165e:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001660:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001662:	4682                	lw	a3,0(sp)
20001664:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001666:	00143713          	seqz	a4,s0
2000166a:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000166c:	00d797b3          	sll	a5,a5,a3
20001670:	fff7c793          	not	a5,a5
20001674:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001676:	00d716b3          	sll	a3,a4,a3
2000167a:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000167c:	c1d0                	sw	a2,4(a1)
2000167e:	a011                	j	20001682 <dif_uart_irq_set_enabled+0x40>
20001680:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001682:	4492                	lw	s1,4(sp)
20001684:	4422                	lw	s0,8(sp)
20001686:	40b2                	lw	ra,12(sp)
20001688:	0141                	addi	sp,sp,16
2000168a:	8082                	ret

2000168c <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
2000168c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
2000168e:	c606                	sw	ra,12(sp)
20001690:	c422                	sw	s0,8(sp)
20001692:	c10d                	beqz	a0,200016b4 <dif_uart_irq_force+0x28>
20001694:	842a                	mv	s0,a0
20001696:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001698:	852e                	mv	a0,a1
2000169a:	85b2                	mv	a1,a2
2000169c:	3df5                	jal	20001598 <uart_irq_offset_get>
2000169e:	85aa                	mv	a1,a0
200016a0:	4505                	li	a0,1
200016a2:	c991                	beqz	a1,200016b6 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200016a4:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
200016a6:	4010                	lw	a2,0(s0)
200016a8:	4501                	li	a0,0
200016aa:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200016ac:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016b0:	c60c                	sw	a1,8(a2)
200016b2:	a011                	j	200016b6 <dif_uart_irq_force+0x2a>
200016b4:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
200016b6:	4422                	lw	s0,8(sp)
200016b8:	40b2                	lw	ra,12(sp)
200016ba:	0141                	addi	sp,sp,16
200016bc:	8082                	ret

200016be <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200016be:	cd09                	beqz	a0,200016d8 <dif_uart_watermark_rx_set+0x1a>
200016c0:	4691                	li	a3,4
200016c2:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200016c4:	00b6eb63          	bltu	a3,a1,200016da <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200016c8:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200016ca:	4d54                	lw	a3,28(a0)
200016cc:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
200016ce:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200016d0:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200016d2:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200016d4:	cd4c                	sw	a1,28(a0)
200016d6:	a011                	j	200016da <dif_uart_watermark_rx_set+0x1c>
200016d8:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200016da:	8532                	mv	a0,a2
200016dc:	8082                	ret

200016de <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200016de:	cd11                	beqz	a0,200016fa <dif_uart_watermark_tx_set+0x1c>
200016e0:	468d                	li	a3,3
200016e2:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200016e4:	00b6ec63          	bltu	a3,a1,200016fc <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200016e8:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200016ea:	4d54                	lw	a3,28(a0)
200016ec:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
200016ee:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200016f0:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200016f4:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200016f6:	cd4c                	sw	a1,28(a0)
200016f8:	a011                	j	200016fc <dif_uart_watermark_tx_set+0x1e>
200016fa:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200016fc:	8532                	mv	a0,a2
200016fe:	8082                	ret

20001700 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001700:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20001702:	c51d                	beqz	a0,20001730 <dif_uart_bytes_send+0x30>
20001704:	c595                	beqz	a1,20001730 <dif_uart_bytes_send+0x30>
20001706:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001708:	c20d                	beqz	a2,2000172a <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
2000170a:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000170e:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001712:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001714:	eb19                	bnez	a4,2000172a <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20001716:	00f58733          	add	a4,a1,a5
2000171a:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
2000171e:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001720:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001724:	fef613e3          	bne	a2,a5,2000170a <dif_uart_bytes_send+0xa>
20001728:	87b2                	mv	a5,a2
2000172a:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
2000172c:	c291                	beqz	a3,20001730 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
2000172e:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001730:	853a                	mv	a0,a4
20001732:	8082                	ret

20001734 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001734:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20001736:	c515                	beqz	a0,20001762 <dif_uart_bytes_receive+0x2e>
20001738:	c60d                	beqz	a2,20001762 <dif_uart_bytes_receive+0x2e>
2000173a:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000173c:	cd99                	beqz	a1,2000175a <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
2000173e:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001740:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001742:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001746:	eb91                	bnez	a5,2000175a <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001748:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000174a:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
2000174e:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001750:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001754:	ff0595e3          	bne	a1,a6,2000173e <dif_uart_bytes_receive+0xa>
20001758:	882e                	mv	a6,a1
2000175a:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
2000175c:	c299                	beqz	a3,20001762 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
2000175e:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001762:	853a                	mv	a0,a4
20001764:	8082                	ret

20001766 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001766:	cd19                	beqz	a0,20001784 <dif_uart_byte_send_polled+0x1e>
20001768:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000176a:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000176c:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
2000176e:	fef5                	bnez	a3,2000176a <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001770:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001772:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001774:	e299                	bnez	a3,2000177a <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001776:	ce0c                	sw	a1,24(a2)
20001778:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000177a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000177c:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
2000177e:	dd75                	beqz	a0,2000177a <dif_uart_byte_send_polled+0x14>
20001780:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001782:	8082                	ret
20001784:	4509                	li	a0,2
20001786:	8082                	ret

20001788 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001788:	862a                	mv	a2,a0
2000178a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
2000178c:	c205                	beqz	a2,200017ac <dif_uart_byte_receive_polled+0x24>
2000178e:	cd99                	beqz	a1,200017ac <dif_uart_byte_receive_polled+0x24>
20001790:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001792:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001794:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001798:	fd6d                	bnez	a0,20001792 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000179a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000179c:	02057693          	andi	a3,a0,32
200017a0:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200017a2:	e689                	bnez	a3,200017ac <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200017a4:	4a50                	lw	a2,20(a2)
200017a6:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200017a8:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
200017ac:	8082                	ret

200017ae <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200017ae:	862a                	mv	a2,a0
200017b0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
200017b2:	ca09                	beqz	a2,200017c4 <dif_uart_rx_bytes_available+0x16>
200017b4:	c981                	beqz	a1,200017c4 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200017b6:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200017b8:	5110                	lw	a2,32(a0)
200017ba:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200017bc:	8241                	srli	a2,a2,0x10
200017be:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
200017c2:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
200017c4:	8082                	ret

200017c6 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200017c6:	862a                	mv	a2,a0
200017c8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
200017ca:	ce01                	beqz	a2,200017e2 <dif_uart_tx_bytes_available+0x1c>
200017cc:	c999                	beqz	a1,200017e2 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200017ce:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200017d0:	5110                	lw	a2,32(a0)
200017d2:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
200017d4:	03f67613          	andi	a2,a2,63
200017d8:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
200017dc:	40c68633          	sub	a2,a3,a2
200017e0:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
200017e2:	8082                	ret

200017e4 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
200017e4:	c11d                	beqz	a0,2000180a <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200017e6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200017e8:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200017ea:	ffd5f693          	andi	a3,a1,-3
200017ee:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200017f2:	fff58713          	addi	a4,a1,-1
200017f6:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200017f8:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200017fc:	00f77463          	bgeu	a4,a5,20001804 <dif_uart_fifo_reset+0x20>
20001800:	0025e593          	ori	a1,a1,2
20001804:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001806:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001808:	8082                	ret
2000180a:	4509                	li	a0,2
2000180c:	8082                	ret

2000180e <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
2000180e:	c515                	beqz	a0,2000183a <dif_uart_loopback_set+0x2c>
20001810:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20001812:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001814:	0015b593          	seqz	a1,a1
20001818:	4715                	li	a4,5
2000181a:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000181e:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001820:	00163613          	seqz	a2,a2
20001824:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001826:	00b797b3          	sll	a5,a5,a1
2000182a:	fff7c793          	not	a5,a5
2000182e:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001830:	00b615b3          	sll	a1,a2,a1
20001834:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001836:	c54c                	sw	a1,12(a0)
20001838:	a011                	j	2000183c <dif_uart_loopback_set+0x2e>
2000183a:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000183c:	8536                	mv	a0,a3
2000183e:	8082                	ret

20001840 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001840:	862a                	mv	a2,a0
20001842:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001844:	ca11                	beqz	a2,20001858 <dif_uart_enable_rx_timeout+0x18>
20001846:	0185d693          	srli	a3,a1,0x18
2000184a:	e699                	bnez	a3,20001858 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
2000184c:	4210                	lw	a2,0(a2)
2000184e:	4501                	li	a0,0
20001850:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001854:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001856:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001858:	8082                	ret

2000185a <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
2000185a:	c511                	beqz	a0,20001866 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
2000185c:	410c                	lw	a1,0(a0)
2000185e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001860:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001864:	8082                	ret
20001866:	4509                	li	a0,2
20001868:	8082                	ret

2000186a <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
2000186a:	86aa                	mv	a3,a0
2000186c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
2000186e:	ce99                	beqz	a3,2000188c <dif_uart_get_rx_timeout+0x22>
20001870:	cd91                	beqz	a1,2000188c <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001872:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001874:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001876:	fff6c513          	not	a0,a3
2000187a:	817d                	srli	a0,a0,0x1f
2000187c:	c188                	sw	a0,0(a1)
2000187e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001880:	c611                	beqz	a2,2000188c <dif_uart_get_rx_timeout+0x22>
20001882:	010005b7          	lui	a1,0x1000
20001886:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001888:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
2000188a:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
2000188c:	8082                	ret
	...

20001890 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20001890:	1101                	addi	sp,sp,-32
20001892:	ce06                	sw	ra,28(sp)
20001894:	cc22                	sw	s0,24(sp)
20001896:	65b1                	lui	a1,0xc
20001898:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
2000189c:	02b50163          	beq	a0,a1,200018be <test_status_set+0x2e>
200018a0:	65a5                	lui	a1,0x9
200018a2:	05b5                	addi	a1,a1,13
200018a4:	04b50063          	beq	a0,a1,200018e4 <test_status_set+0x54>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200018a8:	00000597          	auipc	a1,0x0
200018ac:	4dc58593          	addi	a1,a1,1244 # 20001d84 <kDeviceTestStatusAddress>
200018b0:	418c                	lw	a1,0(a1)
200018b2:	c191                	beqz	a1,200018b6 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018b4:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
200018b6:	4462                	lw	s0,24(sp)
200018b8:	40f2                	lw	ra,28(sp)
200018ba:	6105                	addi	sp,sp,32
200018bc:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200018be:	00000517          	auipc	a0,0x0
200018c2:	4ca50513          	addi	a0,a0,1226 # 20001d88 <kDeviceLogBypassUartAddress>
200018c6:	4108                	lw	a0,0(a0)
200018c8:	e129                	bnez	a0,2000190a <test_status_set+0x7a>
200018ca:	00000597          	auipc	a1,0x0
200018ce:	67258593          	addi	a1,a1,1650 # 20001f3c <kDifUartFifoSizeBytes+0x18>
200018d2:	840a                	mv	s0,sp
200018d4:	4651                	li	a2,20
200018d6:	8522                	mv	a0,s0
200018d8:	d19fe0ef          	jal	ra,200005f0 <memcpy>
200018dc:	8522                	mv	a0,s0
200018de:	e42ff0ef          	jal	ra,20000f20 <base_log_internal_core>
200018e2:	a81d                	j	20001918 <test_status_set+0x88>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200018e4:	00000517          	auipc	a0,0x0
200018e8:	4a450513          	addi	a0,a0,1188 # 20001d88 <kDeviceLogBypassUartAddress>
200018ec:	4108                	lw	a0,0(a0)
200018ee:	ed1d                	bnez	a0,2000192c <test_status_set+0x9c>
200018f0:	00000597          	auipc	a1,0x0
200018f4:	63858593          	addi	a1,a1,1592 # 20001f28 <kDifUartFifoSizeBytes+0x4>
200018f8:	840a                	mv	s0,sp
200018fa:	4651                	li	a2,20
200018fc:	8522                	mv	a0,s0
200018fe:	cf3fe0ef          	jal	ra,200005f0 <memcpy>
20001902:	8522                	mv	a0,s0
20001904:	e1cff0ef          	jal	ra,20000f20 <base_log_internal_core>
20001908:	a80d                	j	2000193a <test_status_set+0xaa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000190a:	e000f517          	auipc	a0,0xe000f
2000190e:	8d650513          	addi	a0,a0,-1834 # 101e0 <test_status_set.kLogFields.2>
20001912:	4581                	li	a1,0
20001914:	eb6ff0ef          	jal	ra,20000fca <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001918:	00000517          	auipc	a0,0x0
2000191c:	46c50513          	addi	a0,a0,1132 # 20001d84 <kDeviceTestStatusAddress>
20001920:	4108                	lw	a0,0(a0)
20001922:	c50d                	beqz	a0,2000194c <test_status_set+0xbc>
20001924:	65b1                	lui	a1,0xc
20001926:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
2000192a:	a005                	j	2000194a <test_status_set+0xba>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
2000192c:	e000f517          	auipc	a0,0xe000f
20001930:	8a050513          	addi	a0,a0,-1888 # 101cc <test_status_set.kLogFields>
20001934:	4581                	li	a1,0
20001936:	e94ff0ef          	jal	ra,20000fca <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
2000193a:	00000517          	auipc	a0,0x0
2000193e:	44a50513          	addi	a0,a0,1098 # 20001d84 <kDeviceTestStatusAddress>
20001942:	4108                	lw	a0,0(a0)
20001944:	c501                	beqz	a0,2000194c <test_status_set+0xbc>
20001946:	65a5                	lui	a1,0x9
20001948:	05b5                	addi	a1,a1,13
2000194a:	c10c                	sw	a1,0(a0)
2000194c:	8b5fe0ef          	jal	ra,20000200 <abort>

20001950 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001950:	88aa                	mv	a7,a0
20001952:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001954:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001956:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001958:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
2000195a:	20069963          	bnez	a3,20001b6c <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
2000195e:	200026b7          	lui	a3,0x20002
20001962:	f5068693          	addi	a3,a3,-176 # 20001f50 <__clz_tab>
20001966:	0cc5f063          	bgeu	a1,a2,20001a26 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
2000196a:	6741                	lui	a4,0x10
2000196c:	0ae67663          	bgeu	a2,a4,20001a18 <__udivdi3+0xc8>
20001970:	0ff00713          	li	a4,255
20001974:	00c73733          	sltu	a4,a4,a2
20001978:	070e                	slli	a4,a4,0x3
2000197a:	00e65533          	srl	a0,a2,a4
2000197e:	96aa                	add	a3,a3,a0
20001980:	0006c683          	lbu	a3,0(a3)
20001984:	02000513          	li	a0,32
20001988:	9736                	add	a4,a4,a3
2000198a:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
2000198e:	00e50c63          	beq	a0,a4,200019a6 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001992:	00d797b3          	sll	a5,a5,a3
20001996:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
2000199a:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000199e:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
200019a2:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
200019a6:	01085893          	srli	a7,a6,0x10
200019aa:	0315d7b3          	divu	a5,a1,a7
200019ae:	01081613          	slli	a2,a6,0x10
200019b2:	8241                	srli	a2,a2,0x10
200019b4:	01035713          	srli	a4,t1,0x10
200019b8:	0315f6b3          	remu	a3,a1,a7
200019bc:	853e                	mv	a0,a5
200019be:	02f605b3          	mul	a1,a2,a5
200019c2:	06c2                	slli	a3,a3,0x10
200019c4:	8f55                	or	a4,a4,a3
200019c6:	00b77c63          	bgeu	a4,a1,200019de <__udivdi3+0x8e>
200019ca:	9742                	add	a4,a4,a6
200019cc:	fff78513          	addi	a0,a5,-1
200019d0:	01076763          	bltu	a4,a6,200019de <__udivdi3+0x8e>
200019d4:	00b77563          	bgeu	a4,a1,200019de <__udivdi3+0x8e>
200019d8:	ffe78513          	addi	a0,a5,-2
200019dc:	9742                	add	a4,a4,a6
200019de:	8f0d                	sub	a4,a4,a1
200019e0:	031777b3          	remu	a5,a4,a7
200019e4:	0342                	slli	t1,t1,0x10
200019e6:	01035313          	srli	t1,t1,0x10
200019ea:	03175733          	divu	a4,a4,a7
200019ee:	07c2                	slli	a5,a5,0x10
200019f0:	0067e333          	or	t1,a5,t1
200019f4:	02e606b3          	mul	a3,a2,a4
200019f8:	863a                	mv	a2,a4
200019fa:	00d37b63          	bgeu	t1,a3,20001a10 <__udivdi3+0xc0>
200019fe:	9342                	add	t1,t1,a6
20001a00:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001a04:	01036663          	bltu	t1,a6,20001a10 <__udivdi3+0xc0>
20001a08:	00d37463          	bgeu	t1,a3,20001a10 <__udivdi3+0xc0>
20001a0c:	ffe70613          	addi	a2,a4,-2
20001a10:	0542                	slli	a0,a0,0x10
20001a12:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001a14:	4581                	li	a1,0
20001a16:	a85d                	j	20001acc <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001a18:	01000537          	lui	a0,0x1000
20001a1c:	4741                	li	a4,16
20001a1e:	f4a66ee3          	bltu	a2,a0,2000197a <__udivdi3+0x2a>
20001a22:	4761                	li	a4,24
20001a24:	bf99                	j	2000197a <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001a26:	e601                	bnez	a2,20001a2e <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001a28:	4705                	li	a4,1
20001a2a:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001a2e:	6741                	lui	a4,0x10
20001a30:	08e87f63          	bgeu	a6,a4,20001ace <__udivdi3+0x17e>
20001a34:	0ff00713          	li	a4,255
20001a38:	01077363          	bgeu	a4,a6,20001a3e <__udivdi3+0xee>
20001a3c:	4521                	li	a0,8
20001a3e:	00a85733          	srl	a4,a6,a0
20001a42:	96ba                	add	a3,a3,a4
20001a44:	0006c703          	lbu	a4,0(a3)
20001a48:	02000613          	li	a2,32
20001a4c:	972a                	add	a4,a4,a0
20001a4e:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001a52:	08e61563          	bne	a2,a4,20001adc <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001a56:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001a5a:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001a5c:	01085893          	srli	a7,a6,0x10
20001a60:	01081613          	slli	a2,a6,0x10
20001a64:	8241                	srli	a2,a2,0x10
20001a66:	01035713          	srli	a4,t1,0x10
20001a6a:	0317f6b3          	remu	a3,a5,a7
20001a6e:	0317d7b3          	divu	a5,a5,a7
20001a72:	06c2                	slli	a3,a3,0x10
20001a74:	8f55                	or	a4,a4,a3
20001a76:	02f60e33          	mul	t3,a2,a5
20001a7a:	853e                	mv	a0,a5
20001a7c:	01c77c63          	bgeu	a4,t3,20001a94 <__udivdi3+0x144>
20001a80:	9742                	add	a4,a4,a6
20001a82:	fff78513          	addi	a0,a5,-1
20001a86:	01076763          	bltu	a4,a6,20001a94 <__udivdi3+0x144>
20001a8a:	01c77563          	bgeu	a4,t3,20001a94 <__udivdi3+0x144>
20001a8e:	ffe78513          	addi	a0,a5,-2
20001a92:	9742                	add	a4,a4,a6
20001a94:	41c70733          	sub	a4,a4,t3
20001a98:	031777b3          	remu	a5,a4,a7
20001a9c:	0342                	slli	t1,t1,0x10
20001a9e:	01035313          	srli	t1,t1,0x10
20001aa2:	03175733          	divu	a4,a4,a7
20001aa6:	07c2                	slli	a5,a5,0x10
20001aa8:	0067e333          	or	t1,a5,t1
20001aac:	02e606b3          	mul	a3,a2,a4
20001ab0:	863a                	mv	a2,a4
20001ab2:	00d37b63          	bgeu	t1,a3,20001ac8 <__udivdi3+0x178>
20001ab6:	9342                	add	t1,t1,a6
20001ab8:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001abc:	01036663          	bltu	t1,a6,20001ac8 <__udivdi3+0x178>
20001ac0:	00d37463          	bgeu	t1,a3,20001ac8 <__udivdi3+0x178>
20001ac4:	ffe70613          	addi	a2,a4,-2
20001ac8:	0542                	slli	a0,a0,0x10
20001aca:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001acc:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001ace:	01000737          	lui	a4,0x1000
20001ad2:	4541                	li	a0,16
20001ad4:	f6e865e3          	bltu	a6,a4,20001a3e <__udivdi3+0xee>
20001ad8:	4561                	li	a0,24
20001ada:	b795                	j	20001a3e <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001adc:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001ae0:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001ae4:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001ae8:	00d797b3          	sll	a5,a5,a3
20001aec:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001af0:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001af4:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001af8:	0315f733          	remu	a4,a1,a7
20001afc:	01081793          	slli	a5,a6,0x10
20001b00:	83c1                	srli	a5,a5,0x10
20001b02:	01065513          	srli	a0,a2,0x10
20001b06:	0315d5b3          	divu	a1,a1,a7
20001b0a:	0742                	slli	a4,a4,0x10
20001b0c:	8f49                	or	a4,a4,a0
20001b0e:	02b786b3          	mul	a3,a5,a1
20001b12:	852e                	mv	a0,a1
20001b14:	00d77c63          	bgeu	a4,a3,20001b2c <__udivdi3+0x1dc>
20001b18:	9742                	add	a4,a4,a6
20001b1a:	fff58513          	addi	a0,a1,-1 # 8fff <_stack_size+0x6fff>
20001b1e:	01076763          	bltu	a4,a6,20001b2c <__udivdi3+0x1dc>
20001b22:	00d77563          	bgeu	a4,a3,20001b2c <__udivdi3+0x1dc>
20001b26:	ffe58513          	addi	a0,a1,-2
20001b2a:	9742                	add	a4,a4,a6
20001b2c:	40d706b3          	sub	a3,a4,a3
20001b30:	0316f733          	remu	a4,a3,a7
20001b34:	0642                	slli	a2,a2,0x10
20001b36:	8241                	srli	a2,a2,0x10
20001b38:	0316d6b3          	divu	a3,a3,a7
20001b3c:	0742                	slli	a4,a4,0x10
20001b3e:	02d788b3          	mul	a7,a5,a3
20001b42:	00c767b3          	or	a5,a4,a2
20001b46:	8736                	mv	a4,a3
20001b48:	0117fc63          	bgeu	a5,a7,20001b60 <__udivdi3+0x210>
20001b4c:	97c2                	add	a5,a5,a6
20001b4e:	fff68713          	addi	a4,a3,-1
20001b52:	0107e763          	bltu	a5,a6,20001b60 <__udivdi3+0x210>
20001b56:	0117f563          	bgeu	a5,a7,20001b60 <__udivdi3+0x210>
20001b5a:	ffe68713          	addi	a4,a3,-2
20001b5e:	97c2                	add	a5,a5,a6
20001b60:	01051593          	slli	a1,a0,0x10
20001b64:	411787b3          	sub	a5,a5,a7
20001b68:	8dd9                	or	a1,a1,a4
20001b6a:	bdcd                	j	20001a5c <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001b6c:	14d5e263          	bltu	a1,a3,20001cb0 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001b70:	6741                	lui	a4,0x10
20001b72:	02e6ff63          	bgeu	a3,a4,20001bb0 <__udivdi3+0x260>
20001b76:	0ff00713          	li	a4,255
20001b7a:	00d735b3          	sltu	a1,a4,a3
20001b7e:	058e                	slli	a1,a1,0x3
20001b80:	20002737          	lui	a4,0x20002
20001b84:	00b6d533          	srl	a0,a3,a1
20001b88:	f5070713          	addi	a4,a4,-176 # 20001f50 <__clz_tab>
20001b8c:	972a                	add	a4,a4,a0
20001b8e:	00074703          	lbu	a4,0(a4)
20001b92:	02000513          	li	a0,32
20001b96:	972e                	add	a4,a4,a1
20001b98:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001b9c:	02e51163          	bne	a0,a4,20001bbe <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001ba0:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001ba2:	f2f6e5e3          	bltu	a3,a5,20001acc <__udivdi3+0x17c>
20001ba6:	00c8b533          	sltu	a0,a7,a2
20001baa:	00154513          	xori	a0,a0,1
20001bae:	bf39                	j	20001acc <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001bb0:	01000737          	lui	a4,0x1000
20001bb4:	45c1                	li	a1,16
20001bb6:	fce6e5e3          	bltu	a3,a4,20001b80 <__udivdi3+0x230>
20001bba:	45e1                	li	a1,24
20001bbc:	b7d1                	j	20001b80 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001bbe:	00e65333          	srl	t1,a2,a4
20001bc2:	00b696b3          	sll	a3,a3,a1
20001bc6:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001bca:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001bce:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001bd2:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001bd6:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001bda:	00b797b3          	sll	a5,a5,a1
20001bde:	00e8d733          	srl	a4,a7,a4
20001be2:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001be6:	01031793          	slli	a5,t1,0x10
20001bea:	83c1                	srli	a5,a5,0x10
20001bec:	01085713          	srli	a4,a6,0x10
20001bf0:	02a65633          	divu	a2,a2,a0
20001bf4:	06c2                	slli	a3,a3,0x10
20001bf6:	8f55                	or	a4,a4,a3
20001bf8:	02c78f33          	mul	t5,a5,a2
20001bfc:	8e32                	mv	t3,a2
20001bfe:	01e77c63          	bgeu	a4,t5,20001c16 <__udivdi3+0x2c6>
20001c02:	971a                	add	a4,a4,t1
20001c04:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001c08:	00676763          	bltu	a4,t1,20001c16 <__udivdi3+0x2c6>
20001c0c:	01e77563          	bgeu	a4,t5,20001c16 <__udivdi3+0x2c6>
20001c10:	ffe60e13          	addi	t3,a2,-2
20001c14:	971a                	add	a4,a4,t1
20001c16:	41e70733          	sub	a4,a4,t5
20001c1a:	02a776b3          	remu	a3,a4,a0
20001c1e:	02a75733          	divu	a4,a4,a0
20001c22:	06c2                	slli	a3,a3,0x10
20001c24:	02e78633          	mul	a2,a5,a4
20001c28:	01081793          	slli	a5,a6,0x10
20001c2c:	83c1                	srli	a5,a5,0x10
20001c2e:	8fd5                	or	a5,a5,a3
20001c30:	86ba                	mv	a3,a4
20001c32:	00c7fc63          	bgeu	a5,a2,20001c4a <__udivdi3+0x2fa>
20001c36:	979a                	add	a5,a5,t1
20001c38:	fff70693          	addi	a3,a4,-1 # ffffff <test_status_set.kLogFields.2+0xfefe1f>
20001c3c:	0067e763          	bltu	a5,t1,20001c4a <__udivdi3+0x2fa>
20001c40:	00c7f563          	bgeu	a5,a2,20001c4a <__udivdi3+0x2fa>
20001c44:	ffe70693          	addi	a3,a4,-2
20001c48:	979a                	add	a5,a5,t1
20001c4a:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c4e:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c50:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c52:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001c56:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c5a:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c5c:	00def6b3          	and	a3,t4,a3
20001c60:	01055613          	srli	a2,a0,0x10
20001c64:	010ede93          	srli	t4,t4,0x10
20001c68:	02d80333          	mul	t1,a6,a3
20001c6c:	02d606b3          	mul	a3,a2,a3
20001c70:	01035713          	srli	a4,t1,0x10
20001c74:	03d80833          	mul	a6,a6,t4
20001c78:	9836                	add	a6,a6,a3
20001c7a:	9742                	add	a4,a4,a6
20001c7c:	03d60633          	mul	a2,a2,t4
20001c80:	00d77363          	bgeu	a4,a3,20001c86 <__udivdi3+0x336>
20001c84:	9672                	add	a2,a2,t3
20001c86:	01075693          	srli	a3,a4,0x10
20001c8a:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001c8c:	02c7e063          	bltu	a5,a2,20001cac <__udivdi3+0x35c>
20001c90:	d8c792e3          	bne	a5,a2,20001a14 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c94:	67c1                	lui	a5,0x10
20001c96:	17fd                	addi	a5,a5,-1
20001c98:	8f7d                	and	a4,a4,a5
20001c9a:	0742                	slli	a4,a4,0x10
20001c9c:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001ca0:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001ca4:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001ca6:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001ca8:	e2e8f2e3          	bgeu	a7,a4,20001acc <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001cac:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001cae:	b39d                	j	20001a14 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001cb0:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001cb2:	4501                	li	a0,0
20001cb4:	bd21                	j	20001acc <__udivdi3+0x17c>
