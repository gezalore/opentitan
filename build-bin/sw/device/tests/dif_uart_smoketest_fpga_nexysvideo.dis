
sw/device/tests/dif_uart_smoketest_fpga_nexysvideo.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         000014a0  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       0000076c  20001620  20001620  00002620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20001d8c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20001d94  00003008  2**2
                  ALLOC
  8 .logs.fields  00000154  00010000  00010000  00003008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005efe  00000000  00000000  00003182  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012bb  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000a33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000033a5  00000000  00000000  0000a3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002d6a  00000000  00000000  0000d778  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d0  00000000  00000000  000104e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001acd  00000000  00000000  000106b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000660  00000000  00000000  00012180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	d3c60613          	addi	a2,a2,-708 # 20001d8c <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	1ef000ef          	jal	ra,20000a6c <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	aabd                	j	20000200 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	1080006f          	j	20000208 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	2440006f          	j	20000350 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	28c0006f          	j	200003a8 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2d40006f          	j	20000400 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000180:	10500073          	wfi
20000184:	8082                	ret

20000186 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000186:	1141                	addi	sp,sp,-16
20000188:	c606                	sw	ra,12(sp)
2000018a:	00001597          	auipc	a1,0x1
2000018e:	5c658593          	addi	a1,a1,1478 # 20001750 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000192:	41d0                	lw	a2,4(a1)
20000194:	4194                	lw	a3,0(a1)
20000196:	02a605b3          	mul	a1,a2,a0
2000019a:	02a6b633          	mulhu	a2,a3,a0
2000019e:	95b2                	add	a1,a1,a2
200001a0:	02a68533          	mul	a0,a3,a0
200001a4:	000f4637          	lui	a2,0xf4
200001a8:	24060613          	addi	a2,a2,576 # f4240 <test_main.kLogFields.17+0xe4100>
200001ac:	4681                	li	a3,0
200001ae:	10c010ef          	jal	ra,200012ba <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200001b2:	4801                	li	a6,0
200001b4:	4701                	li	a4,0

200001b6 <read0>:
200001b6:	b8002873          	csrr	a6,mcycleh
200001ba:	b00026f3          	csrr	a3,mcycle
200001be:	b8002773          	csrr	a4,mcycleh
200001c2:	fee81ae3          	bne	a6,a4,200001b6 <read0>
200001c6:	4781                	li	a5,0
200001c8:	4601                	li	a2,0

200001ca <read1>:
200001ca:	b80027f3          	csrr	a5,mcycleh
200001ce:	b0002773          	csrr	a4,mcycle
200001d2:	b8002673          	csrr	a2,mcycleh
200001d6:	fec79ae3          	bne	a5,a2,200001ca <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200001da:	00d73633          	sltu	a2,a4,a3
200001de:	410787b3          	sub	a5,a5,a6
200001e2:	8f91                	sub	a5,a5,a2
200001e4:	00b78663          	beq	a5,a1,200001f0 <read1+0x26>
200001e8:	00b7b733          	sltu	a4,a5,a1
200001ec:	ff69                	bnez	a4,200001c6 <read0+0x10>
200001ee:	a031                	j	200001fa <read1+0x30>
200001f0:	40d70633          	sub	a2,a4,a3
200001f4:	00a63733          	sltu	a4,a2,a0
200001f8:	f779                	bnez	a4,200001c6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200001fa:	40b2                	lw	ra,12(sp)
200001fc:	0141                	addi	sp,sp,16
200001fe:	8082                	ret

20000200 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000200:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000204:	bff5                	j	20000200 <abort>
	...

20000208 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000208:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000020a:	de06                	sw	ra,60(sp)
2000020c:	dc16                	sw	t0,56(sp)
2000020e:	da1a                	sw	t1,52(sp)
20000210:	d81e                	sw	t2,48(sp)
20000212:	d62a                	sw	a0,44(sp)
20000214:	d42e                	sw	a1,40(sp)
20000216:	d232                	sw	a2,36(sp)
20000218:	d036                	sw	a3,32(sp)
2000021a:	ce3a                	sw	a4,28(sp)
2000021c:	cc3e                	sw	a5,24(sp)
2000021e:	ca42                	sw	a6,20(sp)
20000220:	c846                	sw	a7,16(sp)
20000222:	c672                	sw	t3,12(sp)
20000224:	c476                	sw	t4,8(sp)
20000226:	c27a                	sw	t5,4(sp)
20000228:	c07e                	sw	t6,0(sp)
2000022a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000022e:	897d                	andi	a0,a0,31
20000230:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20000232:	00a5dc63          	bge	a1,a0,2000024a <handler_exception+0x42>
20000236:	4599                	li	a1,6
20000238:	02a5c263          	blt	a1,a0,2000025c <handler_exception+0x54>
2000023c:	458d                	li	a1,3
2000023e:	02b50c63          	beq	a0,a1,20000276 <handler_exception+0x6e>
20000242:	4595                	li	a1,5
20000244:	02b50763          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000248:	a015                	j	2000026c <handler_exception+0x64>
2000024a:	c115                	beqz	a0,2000026e <handler_exception+0x66>
2000024c:	4585                	li	a1,1
2000024e:	02b50063          	beq	a0,a1,2000026e <handler_exception+0x66>
20000252:	4589                	li	a1,2
20000254:	00b51c63          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000258:	2095                	jal	200002bc <handler_instr_ill_fault>
2000025a:	a839                	j	20000278 <handler_exception+0x70>
2000025c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000025e:	00b50a63          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000262:	45ad                	li	a1,11
20000264:	00b51463          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000268:	2845                	jal	20000318 <handler_ecall>
2000026a:	a039                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000026c:	a001                	j	2000026c <handler_exception+0x64>
2000026e:	2805                	jal	2000029e <handler_instr_acc_fault>
20000270:	a021                	j	20000278 <handler_exception+0x70>
20000272:	2061                	jal	200002fa <handler_lsu_fault>
20000274:	a011                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20000276:	209d                	jal	200002dc <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20000278:	4f82                	lw	t6,0(sp)
2000027a:	4f12                	lw	t5,4(sp)
2000027c:	4ea2                	lw	t4,8(sp)
2000027e:	4e32                	lw	t3,12(sp)
20000280:	48c2                	lw	a7,16(sp)
20000282:	4852                	lw	a6,20(sp)
20000284:	47e2                	lw	a5,24(sp)
20000286:	4772                	lw	a4,28(sp)
20000288:	5682                	lw	a3,32(sp)
2000028a:	5612                	lw	a2,36(sp)
2000028c:	55a2                	lw	a1,40(sp)
2000028e:	5532                	lw	a0,44(sp)
20000290:	53c2                	lw	t2,48(sp)
20000292:	5352                	lw	t1,52(sp)
20000294:	52e2                	lw	t0,56(sp)
20000296:	50f2                	lw	ra,60(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	30200073          	mret

2000029e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
2000029e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200002a0:	de06                	sw	ra,60(sp)
200002a2:	dc22                	sw	s0,56(sp)
200002a4:	00001597          	auipc	a1,0x1
200002a8:	6cc58593          	addi	a1,a1,1740 # 20001970 <__clz_tab+0x160>
200002ac:	0040                	addi	s0,sp,4
200002ae:	03400613          	li	a2,52
200002b2:	8522                	mv	a0,s0
200002b4:	189000ef          	jal	ra,20000c3c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200002b8:	8522                	mv	a0,s0
200002ba:	2a71                	jal	20000456 <print_exc_msg>

200002bc <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200002bc:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200002be:	c686                	sw	ra,76(sp)
200002c0:	c4a2                	sw	s0,72(sp)
200002c2:	00001597          	auipc	a1,0x1
200002c6:	6e258593          	addi	a1,a1,1762 # 200019a4 <__clz_tab+0x194>
200002ca:	00d10413          	addi	s0,sp,13
200002ce:	03b00613          	li	a2,59
200002d2:	8522                	mv	a0,s0
200002d4:	169000ef          	jal	ra,20000c3c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200002d8:	8522                	mv	a0,s0
200002da:	2ab5                	jal	20000456 <print_exc_msg>

200002dc <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200002dc:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200002de:	de06                	sw	ra,60(sp)
200002e0:	dc22                	sw	s0,56(sp)
200002e2:	00001597          	auipc	a1,0x1
200002e6:	6fd58593          	addi	a1,a1,1789 # 200019df <__clz_tab+0x1cf>
200002ea:	840a                	mv	s0,sp
200002ec:	03800613          	li	a2,56
200002f0:	8522                	mv	a0,s0
200002f2:	14b000ef          	jal	ra,20000c3c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200002f6:	8522                	mv	a0,s0
200002f8:	2ab9                	jal	20000456 <print_exc_msg>

200002fa <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200002fa:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
200002fc:	de06                	sw	ra,60(sp)
200002fe:	dc22                	sw	s0,56(sp)
20000300:	00001597          	auipc	a1,0x1
20000304:	71758593          	addi	a1,a1,1815 # 20001a17 <__clz_tab+0x207>
20000308:	0020                	addi	s0,sp,8
2000030a:	03000613          	li	a2,48
2000030e:	8522                	mv	a0,s0
20000310:	12d000ef          	jal	ra,20000c3c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000314:	8522                	mv	a0,s0
20000316:	2281                	jal	20000456 <print_exc_msg>

20000318 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000318:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000031a:	ce06                	sw	ra,28(sp)
2000031c:	cc22                	sw	s0,24(sp)
2000031e:	00001517          	auipc	a0,0x1
20000322:	45a50513          	addi	a0,a0,1114 # 20001778 <kDeviceLogBypassUartAddress>
20000326:	4108                	lw	a0,0(a0)
20000328:	c901                	beqz	a0,20000338 <handler_ecall+0x20>
2000032a:	e0010517          	auipc	a0,0xe0010
2000032e:	d1250513          	addi	a0,a0,-750 # 1003c <handler_ecall.kLogFields>
20000332:	4581                	li	a1,0
20000334:	2c2d                	jal	2000056e <base_log_internal_dv>
20000336:	a821                	j	2000034e <handler_ecall+0x36>
20000338:	00001597          	auipc	a1,0x1
2000033c:	32458593          	addi	a1,a1,804 # 2000165c <__udivdi3+0x3a2>
20000340:	840a                	mv	s0,sp
20000342:	4651                	li	a2,20
20000344:	8522                	mv	a0,s0
20000346:	0f7000ef          	jal	ra,20000c3c <memcpy>
2000034a:	8522                	mv	a0,s0
2000034c:	2aa5                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
2000034e:	a001                	j	2000034e <handler_ecall+0x36>

20000350 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20000350:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
20000352:	ce86                	sw	ra,92(sp)
20000354:	cc96                	sw	t0,88(sp)
20000356:	ca9a                	sw	t1,84(sp)
20000358:	c89e                	sw	t2,80(sp)
2000035a:	c6a2                	sw	s0,76(sp)
2000035c:	c4aa                	sw	a0,72(sp)
2000035e:	c2ae                	sw	a1,68(sp)
20000360:	c0b2                	sw	a2,64(sp)
20000362:	de36                	sw	a3,60(sp)
20000364:	dc3a                	sw	a4,56(sp)
20000366:	da3e                	sw	a5,52(sp)
20000368:	d842                	sw	a6,48(sp)
2000036a:	d646                	sw	a7,44(sp)
2000036c:	d472                	sw	t3,40(sp)
2000036e:	d276                	sw	t4,36(sp)
20000370:	d07a                	sw	t5,32(sp)
20000372:	ce7e                	sw	t6,28(sp)
20000374:	00001517          	auipc	a0,0x1
20000378:	40450513          	addi	a0,a0,1028 # 20001778 <kDeviceLogBypassUartAddress>
2000037c:	4108                	lw	a0,0(a0)
2000037e:	c901                	beqz	a0,2000038e <handler_irq_software+0x3e>
20000380:	e0010517          	auipc	a0,0xe0010
20000384:	c8050513          	addi	a0,a0,-896 # 10000 <_dv_log_offset>
20000388:	4581                	li	a1,0
2000038a:	22d5                	jal	2000056e <base_log_internal_dv>
2000038c:	a821                	j	200003a4 <handler_irq_software+0x54>
2000038e:	00001597          	auipc	a1,0x1
20000392:	29258593          	addi	a1,a1,658 # 20001620 <__udivdi3+0x366>
20000396:	0020                	addi	s0,sp,8
20000398:	4651                	li	a2,20
2000039a:	8522                	mv	a0,s0
2000039c:	0a1000ef          	jal	ra,20000c3c <memcpy>
200003a0:	8522                	mv	a0,s0
200003a2:	220d                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200003a4:	a001                	j	200003a4 <handler_irq_software+0x54>
200003a6:	0001                	nop

200003a8 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200003a8:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200003aa:	ce86                	sw	ra,92(sp)
200003ac:	cc96                	sw	t0,88(sp)
200003ae:	ca9a                	sw	t1,84(sp)
200003b0:	c89e                	sw	t2,80(sp)
200003b2:	c6a2                	sw	s0,76(sp)
200003b4:	c4aa                	sw	a0,72(sp)
200003b6:	c2ae                	sw	a1,68(sp)
200003b8:	c0b2                	sw	a2,64(sp)
200003ba:	de36                	sw	a3,60(sp)
200003bc:	dc3a                	sw	a4,56(sp)
200003be:	da3e                	sw	a5,52(sp)
200003c0:	d842                	sw	a6,48(sp)
200003c2:	d646                	sw	a7,44(sp)
200003c4:	d472                	sw	t3,40(sp)
200003c6:	d276                	sw	t4,36(sp)
200003c8:	d07a                	sw	t5,32(sp)
200003ca:	ce7e                	sw	t6,28(sp)
200003cc:	00001517          	auipc	a0,0x1
200003d0:	3ac50513          	addi	a0,a0,940 # 20001778 <kDeviceLogBypassUartAddress>
200003d4:	4108                	lw	a0,0(a0)
200003d6:	c901                	beqz	a0,200003e6 <handler_irq_timer+0x3e>
200003d8:	e0010517          	auipc	a0,0xe0010
200003dc:	c3c50513          	addi	a0,a0,-964 # 10014 <handler_irq_timer.kLogFields>
200003e0:	4581                	li	a1,0
200003e2:	2271                	jal	2000056e <base_log_internal_dv>
200003e4:	a821                	j	200003fc <handler_irq_timer+0x54>
200003e6:	00001597          	auipc	a1,0x1
200003ea:	24e58593          	addi	a1,a1,590 # 20001634 <__udivdi3+0x37a>
200003ee:	0020                	addi	s0,sp,8
200003f0:	4651                	li	a2,20
200003f2:	8522                	mv	a0,s0
200003f4:	049000ef          	jal	ra,20000c3c <memcpy>
200003f8:	8522                	mv	a0,s0
200003fa:	20e9                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
200003fc:	a001                	j	200003fc <handler_irq_timer+0x54>
200003fe:	0001                	nop

20000400 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000400:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000402:	ce86                	sw	ra,92(sp)
20000404:	cc96                	sw	t0,88(sp)
20000406:	ca9a                	sw	t1,84(sp)
20000408:	c89e                	sw	t2,80(sp)
2000040a:	c6a2                	sw	s0,76(sp)
2000040c:	c4aa                	sw	a0,72(sp)
2000040e:	c2ae                	sw	a1,68(sp)
20000410:	c0b2                	sw	a2,64(sp)
20000412:	de36                	sw	a3,60(sp)
20000414:	dc3a                	sw	a4,56(sp)
20000416:	da3e                	sw	a5,52(sp)
20000418:	d842                	sw	a6,48(sp)
2000041a:	d646                	sw	a7,44(sp)
2000041c:	d472                	sw	t3,40(sp)
2000041e:	d276                	sw	t4,36(sp)
20000420:	d07a                	sw	t5,32(sp)
20000422:	ce7e                	sw	t6,28(sp)
20000424:	00001517          	auipc	a0,0x1
20000428:	35450513          	addi	a0,a0,852 # 20001778 <kDeviceLogBypassUartAddress>
2000042c:	4108                	lw	a0,0(a0)
2000042e:	c901                	beqz	a0,2000043e <handler_irq_external+0x3e>
20000430:	e0010517          	auipc	a0,0xe0010
20000434:	bf850513          	addi	a0,a0,-1032 # 10028 <handler_irq_external.kLogFields>
20000438:	4581                	li	a1,0
2000043a:	2a15                	jal	2000056e <base_log_internal_dv>
2000043c:	a821                	j	20000454 <handler_irq_external+0x54>
2000043e:	00001597          	auipc	a1,0x1
20000442:	20a58593          	addi	a1,a1,522 # 20001648 <__udivdi3+0x38e>
20000446:	0020                	addi	s0,sp,8
20000448:	4651                	li	a2,20
2000044a:	8522                	mv	a0,s0
2000044c:	7f0000ef          	jal	ra,20000c3c <memcpy>
20000450:	8522                	mv	a0,s0
20000452:	288d                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000454:	a001                	j	20000454 <handler_irq_external+0x54>

20000456 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000456:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000458:	ce06                	sw	ra,28(sp)
2000045a:	cc22                	sw	s0,24(sp)
2000045c:	ca26                	sw	s1,20(sp)
2000045e:	00001597          	auipc	a1,0x1
20000462:	31a58593          	addi	a1,a1,794 # 20001778 <kDeviceLogBypassUartAddress>
20000466:	418c                	lw	a1,0(a1)
20000468:	842a                	mv	s0,a0
2000046a:	c18d                	beqz	a1,2000048c <print_exc_msg+0x36>
2000046c:	e0010517          	auipc	a0,0xe0010
20000470:	be450513          	addi	a0,a0,-1052 # 10050 <print_exc_msg.kLogFields>
20000474:	4585                	li	a1,1
20000476:	8622                	mv	a2,s0
20000478:	28dd                	jal	2000056e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000047a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000047e:	e0010517          	auipc	a0,0xe0010
20000482:	be650513          	addi	a0,a0,-1050 # 10064 <print_exc_msg.kLogFields.6>
20000486:	4585                	li	a1,1
20000488:	20dd                	jal	2000056e <base_log_internal_dv>
2000048a:	a81d                	j	200004c0 <print_exc_msg+0x6a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000048c:	00001597          	auipc	a1,0x1
20000490:	1e458593          	addi	a1,a1,484 # 20001670 <__udivdi3+0x3b6>
20000494:	848a                	mv	s1,sp
20000496:	4651                	li	a2,20
20000498:	8526                	mv	a0,s1
2000049a:	7a2000ef          	jal	ra,20000c3c <memcpy>
2000049e:	8526                	mv	a0,s1
200004a0:	85a2                	mv	a1,s0
200004a2:	200d                	jal	200004c4 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200004a4:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200004a8:	00001597          	auipc	a1,0x1
200004ac:	1dc58593          	addi	a1,a1,476 # 20001684 <__udivdi3+0x3ca>
200004b0:	848a                	mv	s1,sp
200004b2:	4651                	li	a2,20
200004b4:	8526                	mv	a0,s1
200004b6:	786000ef          	jal	ra,20000c3c <memcpy>
200004ba:	8526                	mv	a0,s1
200004bc:	85a2                	mv	a1,s0
200004be:	2019                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200004c0:	a001                	j	200004c0 <print_exc_msg+0x6a>
	...

200004c4 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
200004c4:	7139                	addi	sp,sp,-64
200004c6:	ce06                	sw	ra,28(sp)
200004c8:	cc22                	sw	s0,24(sp)
200004ca:	ca26                	sw	s1,20(sp)
200004cc:	c84a                	sw	s2,16(sp)
200004ce:	892a                	mv	s2,a0
200004d0:	de46                	sw	a7,60(sp)
200004d2:	dc42                	sw	a6,56(sp)
200004d4:	da3e                	sw	a5,52(sp)
200004d6:	d83a                	sw	a4,48(sp)
200004d8:	d636                	sw	a3,44(sp)
200004da:	d432                	sw	a2,40(sp)
200004dc:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
200004de:	4144                	lw	s1,4(a0)
200004e0:	80000537          	lui	a0,0x80000
200004e4:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffe273>
200004e8:	8526                	mv	a0,s1
200004ea:	4581                	li	a1,0
200004ec:	7a0000ef          	jal	ra,20000c8c <memchr>
200004f0:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
200004f4:	02f00593          	li	a1,47
200004f8:	8526                	mv	a0,s1
200004fa:	7aa000ef          	jal	ra,20000ca4 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200004fe:	00092583          	lw	a1,0(s2)
20000502:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000504:	00b66b63          	bltu	a2,a1,2000051a <base_log_internal_core+0x56>
20000508:	058a                	slli	a1,a1,0x2
2000050a:	00001617          	auipc	a2,0x1
2000050e:	18e60613          	addi	a2,a2,398 # 20001698 <__udivdi3+0x3de>
20000512:	95b2                	add	a1,a1,a2
20000514:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000516:	e519                	bnez	a0,20000524 <base_log_internal_core+0x60>
20000518:	a801                	j	20000528 <base_log_internal_core+0x64>
2000051a:	00001597          	auipc	a1,0x1
2000051e:	57a58593          	addi	a1,a1,1402 # 20001a94 <__clz_tab+0x284>
20000522:	c119                	beqz	a0,20000528 <base_log_internal_core+0x64>
20000524:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000528:	f0000417          	auipc	s0,0xf0000
2000052c:	ae040413          	addi	s0,s0,-1312 # 10000008 <_data_end>
20000530:	00045603          	lhu	a2,0(s0)
20000534:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000538:	00001517          	auipc	a0,0x1
2000053c:	54350513          	addi	a0,a0,1347 # 20001a7b <__clz_tab+0x26b>
20000540:	86a6                	mv	a3,s1
20000542:	28d9                	jal	20000618 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000544:	00041503          	lh	a0,0(s0)
20000548:	0505                	addi	a0,a0,1
2000054a:	00a41023          	sh	a0,0(s0)
2000054e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000550:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000552:	01092503          	lw	a0,16(s2)
20000556:	28cd                	jal	20000648 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000558:	00001517          	auipc	a0,0x1
2000055c:	53150513          	addi	a0,a0,1329 # 20001a89 <__clz_tab+0x279>
20000560:	2865                	jal	20000618 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000562:	4942                	lw	s2,16(sp)
20000564:	44d2                	lw	s1,20(sp)
20000566:	4462                	lw	s0,24(sp)
20000568:	40f2                	lw	ra,28(sp)
2000056a:	6121                	addi	sp,sp,64
2000056c:	8082                	ret

2000056e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
2000056e:	1101                	addi	sp,sp,-32
20000570:	ce46                	sw	a7,28(sp)
20000572:	cc42                	sw	a6,24(sp)
20000574:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000576:	00001797          	auipc	a5,0x1
2000057a:	20278793          	addi	a5,a5,514 # 20001778 <kDeviceLogBypassUartAddress>
2000057e:	439c                	lw	a5,0(a5)
20000580:	c83a                	sw	a4,16(sp)
20000582:	c636                	sw	a3,12(sp)
20000584:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000586:	c388                	sw	a0,0(a5)
20000588:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
2000058a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
2000058c:	c989                	beqz	a1,2000059e <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
2000058e:	4512                	lw	a0,4(sp)
20000590:	00450613          	addi	a2,a0,4
20000594:	c232                	sw	a2,4(sp)
20000596:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000598:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000059a:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
2000059c:	f9ed                	bnez	a1,2000058e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
2000059e:	6105                	addi	sp,sp,32
200005a0:	8082                	ret
	...

200005a4 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
200005a4:	e589                	bnez	a1,200005ae <base_set_stdout+0xa>
200005a6:	00000597          	auipc	a1,0x0
200005aa:	01658593          	addi	a1,a1,22 # 200005bc <base_dev_null>
200005ae:	f0000617          	auipc	a2,0xf0000
200005b2:	a5260613          	addi	a2,a2,-1454 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
200005b6:	c208                	sw	a0,0(a2)
200005b8:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200005ba:	8082                	ret

200005bc <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
200005bc:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
200005be:	8082                	ret

200005c0 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
200005c0:	f0000597          	auipc	a1,0xf0000
200005c4:	a4058593          	addi	a1,a1,-1472 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
200005c8:	c188                	sw	a0,0(a1)
200005ca:	00000517          	auipc	a0,0x0
200005ce:	00c50513          	addi	a0,a0,12 # 200005d6 <base_dev_uart>
200005d2:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
200005d4:	8082                	ret

200005d6 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
200005d6:	1101                	addi	sp,sp,-32
200005d8:	ce06                	sw	ra,28(sp)
200005da:	cc22                	sw	s0,24(sp)
200005dc:	ca26                	sw	s1,20(sp)
200005de:	c84a                	sw	s2,16(sp)
200005e0:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200005e2:	c215                	beqz	a2,20000606 <base_dev_uart+0x30>
200005e4:	8432                	mv	s0,a2
200005e6:	892e                	mv	s2,a1
200005e8:	89aa                	mv	s3,a0
200005ea:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
200005ec:	00990533          	add	a0,s2,s1
200005f0:	00054583          	lbu	a1,0(a0)
200005f4:	854e                	mv	a0,s3
200005f6:	39d000ef          	jal	ra,20001192 <dif_uart_byte_send_polled>
200005fa:	e519                	bnez	a0,20000608 <base_dev_uart+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200005fc:	0485                	addi	s1,s1,1
200005fe:	fe9417e3          	bne	s0,s1,200005ec <base_dev_uart+0x16>
20000602:	84a2                	mv	s1,s0
20000604:	a011                	j	20000608 <base_dev_uart+0x32>
20000606:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000608:	8526                	mv	a0,s1
2000060a:	49b2                	lw	s3,12(sp)
2000060c:	4942                	lw	s2,16(sp)
2000060e:	44d2                	lw	s1,20(sp)
20000610:	4462                	lw	s0,24(sp)
20000612:	40f2                	lw	ra,28(sp)
20000614:	6105                	addi	sp,sp,32
20000616:	8082                	ret

20000618 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000618:	7179                	addi	sp,sp,-48
2000061a:	c606                	sw	ra,12(sp)
2000061c:	d646                	sw	a7,44(sp)
2000061e:	d442                	sw	a6,40(sp)
20000620:	d23e                	sw	a5,36(sp)
20000622:	d03a                	sw	a4,32(sp)
20000624:	ce36                	sw	a3,28(sp)
20000626:	cc32                	sw	a2,24(sp)
20000628:	ca2e                	sw	a1,20(sp)
2000062a:	f0000597          	auipc	a1,0xf0000
2000062e:	9d658593          	addi	a1,a1,-1578 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000632:	4190                	lw	a2,0(a1)
20000634:	41cc                	lw	a1,4(a1)
20000636:	872a                	mv	a4,a0
20000638:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
2000063a:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000063c:	8532                	mv	a0,a2
2000063e:	863a                	mv	a2,a4
20000640:	200d                	jal	20000662 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000642:	40b2                	lw	ra,12(sp)
20000644:	6145                	addi	sp,sp,48
20000646:	8082                	ret

20000648 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000648:	f0000697          	auipc	a3,0xf0000
2000064c:	9b868693          	addi	a3,a3,-1608 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000650:	4290                	lw	a2,0(a3)
20000652:	42d4                	lw	a3,4(a3)
20000654:	872e                	mv	a4,a1
20000656:	87aa                	mv	a5,a0
20000658:	8532                	mv	a0,a2
2000065a:	85b6                	mv	a1,a3
2000065c:	863e                	mv	a2,a5
2000065e:	86ba                	mv	a3,a4
20000660:	a009                	j	20000662 <base_vfprintf>

20000662 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000662:	7139                	addi	sp,sp,-64
20000664:	de06                	sw	ra,60(sp)
20000666:	dc22                	sw	s0,56(sp)
20000668:	da26                	sw	s1,52(sp)
2000066a:	d84a                	sw	s2,48(sp)
2000066c:	d64e                	sw	s3,44(sp)
2000066e:	d452                	sw	s4,40(sp)
20000670:	d256                	sw	s5,36(sp)
20000672:	d05a                	sw	s6,32(sp)
20000674:	ce5e                	sw	s7,28(sp)
20000676:	cc62                	sw	s8,24(sp)
20000678:	ca66                	sw	s9,20(sp)
2000067a:	c86a                	sw	s10,16(sp)
2000067c:	c66e                	sw	s11,12(sp)
2000067e:	8bb2                	mv	s7,a2
20000680:	892a                	mv	s2,a0
20000682:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000684:	c199                	beqz	a1,2000068a <base_vfprintf+0x28>
20000686:	89ae                	mv	s3,a1
20000688:	a029                	j	20000692 <base_vfprintf+0x30>
2000068a:	00000997          	auipc	s3,0x0
2000068e:	f3298993          	addi	s3,s3,-206 # 200005bc <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000692:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000694:	000bc503          	lbu	a0,0(s7)
20000698:	28050f63          	beqz	a0,20000936 <base_vfprintf+0x2d4>
2000069c:	4b01                	li	s6,0
2000069e:	02500c13          	li	s8,37
200006a2:	4ca5                	li	s9,9
200006a4:	02000d13          	li	s10,32
200006a8:	06800d93          	li	s11,104
200006ac:	00001a17          	auipc	s4,0x1
200006b0:	3eaa0a13          	addi	s4,s4,1002 # 20001a96 <__clz_tab+0x286>
200006b4:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200006b6:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200006b8:	0ff57413          	andi	s0,a0,255
200006bc:	01840963          	beq	s0,s8,200006ce <base_vfprintf+0x6c>
200006c0:	c419                	beqz	s0,200006ce <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200006c2:	009b8533          	add	a0,s7,s1
200006c6:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200006ca:	0485                	addi	s1,s1,1
200006cc:	b7f5                	j	200006b8 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200006ce:	c491                	beqz	s1,200006da <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200006d0:	854a                	mv	a0,s2
200006d2:	85de                	mv	a1,s7
200006d4:	8626                	mv	a2,s1
200006d6:	9982                	jalr	s3
200006d8:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
200006da:	24040f63          	beqz	s0,20000938 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200006de:	009b8633          	add	a2,s7,s1
200006e2:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200006e6:	22050f63          	beqz	a0,20000924 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200006ea:	fd050593          	addi	a1,a0,-48
200006ee:	0ff5f593          	andi	a1,a1,255
200006f2:	00bcf863          	bgeu	s9,a1,20000702 <base_vfprintf+0xa0>
200006f6:	4401                	li	s0,0
200006f8:	4581                	li	a1,0
200006fa:	4605                	li	a2,1
200006fc:	028d7f63          	bgeu	s10,s0,2000073a <base_vfprintf+0xd8>
20000700:	aca1                	j	20000958 <base_vfprintf+0x2f6>
20000702:	4581                	li	a1,0
20000704:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000706:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000708:	00b606b3          	add	a3,a2,a1
2000070c:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000710:	20068a63          	beqz	a3,20000924 <base_vfprintf+0x2c2>
20000714:	0ff57513          	andi	a0,a0,255
20000718:	03540733          	mul	a4,s0,s5
2000071c:	953a                	add	a0,a0,a4
2000071e:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000722:	fd068513          	addi	a0,a3,-48
20000726:	0ff57713          	andi	a4,a0,255
2000072a:	0585                	addi	a1,a1,1
2000072c:	8536                	mv	a0,a3
2000072e:	fcecfde3          	bgeu	s9,a4,20000708 <base_vfprintf+0xa6>
20000732:	4601                	li	a2,0
20000734:	8536                	mv	a0,a3
20000736:	228d6163          	bltu	s10,s0,20000958 <base_vfprintf+0x2f6>
2000073a:	008036b3          	snez	a3,s0
2000073e:	8e55                	or	a2,a2,a3
20000740:	20060c63          	beqz	a2,20000958 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000744:	95de                	add	a1,a1,s7
20000746:	95a6                	add	a1,a1,s1
20000748:	00258b93          	addi	s7,a1,2
2000074c:	02adce63          	blt	s11,a0,20000788 <base_vfprintf+0x126>
20000750:	06100593          	li	a1,97
20000754:	06a5d563          	bge	a1,a0,200007be <base_vfprintf+0x15c>
20000758:	06300593          	li	a1,99
2000075c:	0ca5cb63          	blt	a1,a0,20000832 <base_vfprintf+0x1d0>
20000760:	06200593          	li	a1,98
20000764:	14b50a63          	beq	a0,a1,200008b8 <base_vfprintf+0x256>
20000768:	06300593          	li	a1,99
2000076c:	18b51f63          	bne	a0,a1,2000090a <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20000770:	4502                	lw	a0,0(sp)
20000772:	00450593          	addi	a1,a0,4
20000776:	c02e                	sw	a1,0(sp)
20000778:	4108                	lw	a0,0(a0)
2000077a:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
2000077e:	4605                	li	a2,1
20000780:	854a                	mv	a0,s2
20000782:	00b10593          	addi	a1,sp,11
20000786:	aa41                	j	20000916 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000788:	07200593          	li	a1,114
2000078c:	04a5dd63          	bge	a1,a0,200007e6 <base_vfprintf+0x184>
20000790:	07700593          	li	a1,119
20000794:	0aa5c663          	blt	a1,a0,20000840 <base_vfprintf+0x1de>
20000798:	07300593          	li	a1,115
2000079c:	12b50963          	beq	a0,a1,200008ce <base_vfprintf+0x26c>
200007a0:	07500593          	li	a1,117
200007a4:	16b51363          	bne	a0,a1,2000090a <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200007a8:	4502                	lw	a0,0(sp)
200007aa:	00450593          	addi	a1,a0,4
200007ae:	c02e                	sw	a1,0(sp)
200007b0:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200007b2:	00001797          	auipc	a5,0x1
200007b6:	f1378793          	addi	a5,a5,-237 # 200016c5 <kDigitsLow>
200007ba:	4729                	li	a4,10
200007bc:	a8cd                	j	200008ae <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200007be:	13850763          	beq	a0,s8,200008ec <base_vfprintf+0x28a>
200007c2:	04800593          	li	a1,72
200007c6:	00b50663          	beq	a0,a1,200007d2 <base_vfprintf+0x170>
200007ca:	05800593          	li	a1,88
200007ce:	12b51e63          	bne	a0,a1,2000090a <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
200007d2:	4502                	lw	a0,0(sp)
200007d4:	00450593          	addi	a1,a0,4
200007d8:	c02e                	sw	a1,0(sp)
200007da:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
200007dc:	00001797          	auipc	a5,0x1
200007e0:	ef978793          	addi	a5,a5,-263 # 200016d5 <kDigitsHigh>
200007e4:	a0e1                	j	200008ac <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200007e6:	06900593          	li	a1,105
200007ea:	06b50d63          	beq	a0,a1,20000864 <base_vfprintf+0x202>
200007ee:	06f00593          	li	a1,111
200007f2:	10b50163          	beq	a0,a1,200008f4 <base_vfprintf+0x292>
200007f6:	07000593          	li	a1,112
200007fa:	10b51863          	bne	a0,a1,2000090a <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200007fe:	00001597          	auipc	a1,0x1
20000802:	29c58593          	addi	a1,a1,668 # 20001a9a <__clz_tab+0x28a>
20000806:	4609                	li	a2,2
20000808:	854a                	mv	a0,s2
2000080a:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000080c:	4582                	lw	a1,0(sp)
2000080e:	00458613          	addi	a2,a1,4
20000812:	c032                	sw	a2,0(sp)
20000814:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000816:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
2000081a:	00001797          	auipc	a5,0x1
2000081e:	eab78793          	addi	a5,a5,-341 # 200016c5 <kDigitsLow>
20000822:	46a1                	li	a3,8
20000824:	4741                	li	a4,16
20000826:	854a                	mv	a0,s2
20000828:	85ce                	mv	a1,s3
2000082a:	2a55                	jal	200009de <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
2000082c:	00a40b33          	add	s6,s0,a0
20000830:	a0ed                	j	2000091a <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000832:	06400593          	li	a1,100
20000836:	02b50763          	beq	a0,a1,20000864 <base_vfprintf+0x202>
2000083a:	07b50063          	beq	a0,s11,2000089a <base_vfprintf+0x238>
2000083e:	a0f1                	j	2000090a <base_vfprintf+0x2a8>
20000840:	07800593          	li	a1,120
20000844:	04b50b63          	beq	a0,a1,2000089a <base_vfprintf+0x238>
20000848:	07a00593          	li	a1,122
2000084c:	0ab51f63          	bne	a0,a1,2000090a <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20000850:	4502                	lw	a0,0(sp)
20000852:	00450593          	addi	a1,a0,4
20000856:	c02e                	sw	a1,0(sp)
20000858:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
2000085a:	00850593          	addi	a1,a0,8
2000085e:	c02e                	sw	a1,0(sp)
20000860:	414c                	lw	a1,4(a0)
20000862:	a84d                	j	20000914 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000864:	4502                	lw	a0,0(sp)
20000866:	00450593          	addi	a1,a0,4
2000086a:	c02e                	sw	a1,0(sp)
2000086c:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
2000086e:	557d                	li	a0,-1
20000870:	00954c63          	blt	a0,s1,20000888 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000874:	00001597          	auipc	a1,0x1
20000878:	22458593          	addi	a1,a1,548 # 20001a98 <__clz_tab+0x288>
2000087c:	4605                	li	a2,1
2000087e:	854a                	mv	a0,s2
20000880:	9982                	jalr	s3
20000882:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000884:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000888:	00001797          	auipc	a5,0x1
2000088c:	e3d78793          	addi	a5,a5,-451 # 200016c5 <kDigitsLow>
20000890:	4729                	li	a4,10
20000892:	854a                	mv	a0,s2
20000894:	85ce                	mv	a1,s3
20000896:	8626                	mv	a2,s1
20000898:	a829                	j	200008b2 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
2000089a:	4502                	lw	a0,0(sp)
2000089c:	00450593          	addi	a1,a0,4
200008a0:	c02e                	sw	a1,0(sp)
200008a2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200008a4:	00001797          	auipc	a5,0x1
200008a8:	e2178793          	addi	a5,a5,-479 # 200016c5 <kDigitsLow>
200008ac:	4741                	li	a4,16
200008ae:	854a                	mv	a0,s2
200008b0:	85ce                	mv	a1,s3
200008b2:	86a2                	mv	a3,s0
200008b4:	222d                	jal	200009de <write_digits>
200008b6:	a08d                	j	20000918 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200008b8:	4502                	lw	a0,0(sp)
200008ba:	00450593          	addi	a1,a0,4
200008be:	c02e                	sw	a1,0(sp)
200008c0:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200008c2:	00001797          	auipc	a5,0x1
200008c6:	e0378793          	addi	a5,a5,-509 # 200016c5 <kDigitsLow>
200008ca:	4709                	li	a4,2
200008cc:	b7cd                	j	200008ae <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200008ce:	4502                	lw	a0,0(sp)
200008d0:	00450593          	addi	a1,a0,4
200008d4:	c02e                	sw	a1,0(sp)
200008d6:	410c                	lw	a1,0(a0)
200008d8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200008da:	00a58633          	add	a2,a1,a0
200008de:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200008e2:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200008e4:	fa7d                	bnez	a2,200008da <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200008e6:	fff50613          	addi	a2,a0,-1
200008ea:	a02d                	j	20000914 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200008ec:	4605                	li	a2,1
200008ee:	854a                	mv	a0,s2
200008f0:	85d2                	mv	a1,s4
200008f2:	a015                	j	20000916 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200008f4:	4502                	lw	a0,0(sp)
200008f6:	00450593          	addi	a1,a0,4
200008fa:	c02e                	sw	a1,0(sp)
200008fc:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
200008fe:	00001797          	auipc	a5,0x1
20000902:	dc778793          	addi	a5,a5,-569 # 200016c5 <kDigitsLow>
20000906:	4721                	li	a4,8
20000908:	b75d                	j	200008ae <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
2000090a:	00001597          	auipc	a1,0x1
2000090e:	ddb58593          	addi	a1,a1,-549 # 200016e5 <kUnknownSpec>
20000912:	463d                	li	a2,15
20000914:	854a                	mv	a0,s2
20000916:	9982                	jalr	s3
20000918:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
2000091a:	000bc503          	lbu	a0,0(s7)
2000091e:	d8051ce3          	bnez	a0,200006b6 <base_vfprintf+0x54>
20000922:	a819                	j	20000938 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20000924:	00001597          	auipc	a1,0x1
20000928:	d8458593          	addi	a1,a1,-636 # 200016a8 <kErrorNul>
2000092c:	4645                	li	a2,17
2000092e:	854a                	mv	a0,s2
20000930:	9982                	jalr	s3
20000932:	9b2a                	add	s6,s6,a0
20000934:	a011                	j	20000938 <base_vfprintf+0x2d6>
20000936:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20000938:	855a                	mv	a0,s6
2000093a:	4db2                	lw	s11,12(sp)
2000093c:	4d42                	lw	s10,16(sp)
2000093e:	4cd2                	lw	s9,20(sp)
20000940:	4c62                	lw	s8,24(sp)
20000942:	4bf2                	lw	s7,28(sp)
20000944:	5b02                	lw	s6,32(sp)
20000946:	5a92                	lw	s5,36(sp)
20000948:	5a22                	lw	s4,40(sp)
2000094a:	59b2                	lw	s3,44(sp)
2000094c:	5942                	lw	s2,48(sp)
2000094e:	54d2                	lw	s1,52(sp)
20000950:	5462                	lw	s0,56(sp)
20000952:	50f2                	lw	ra,60(sp)
20000954:	6121                	addi	sp,sp,64
20000956:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20000958:	00001597          	auipc	a1,0x1
2000095c:	d6158593          	addi	a1,a1,-671 # 200016b9 <kErrorTooWide>
20000960:	4631                	li	a2,12
20000962:	b7f1                	j	2000092e <base_vfprintf+0x2cc>

20000964 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20000964:	7179                	addi	sp,sp,-48
20000966:	ca06                	sw	ra,20(sp)
20000968:	d646                	sw	a7,44(sp)
2000096a:	d442                	sw	a6,40(sp)
2000096c:	d23e                	sw	a5,36(sp)
2000096e:	d03a                	sw	a4,32(sp)
20000970:	ce36                	sw	a3,28(sp)
20000972:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20000974:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20000976:	c42a                	sw	a0,8(sp)
20000978:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
2000097a:	00000597          	auipc	a1,0x0
2000097e:	01258593          	addi	a1,a1,18 # 2000098c <snprintf_sink>
20000982:	0028                	addi	a0,sp,8
20000984:	39f9                	jal	20000662 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20000986:	40d2                	lw	ra,20(sp)
20000988:	6145                	addi	sp,sp,48
2000098a:	8082                	ret

2000098c <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000098c:	1141                	addi	sp,sp,-16
2000098e:	c606                	sw	ra,12(sp)
20000990:	c422                	sw	s0,8(sp)
20000992:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20000994:	4140                	lw	s0,4(a0)
20000996:	c005                	beqz	s0,200009b6 <snprintf_sink+0x2a>
20000998:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
2000099a:	00c46363          	bltu	s0,a2,200009a0 <snprintf_sink+0x14>
2000099e:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200009a0:	4088                	lw	a0,0(s1)
200009a2:	8622                	mv	a2,s0
200009a4:	2c61                	jal	20000c3c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200009a6:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200009a8:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200009aa:	9522                	add	a0,a0,s0
200009ac:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200009ae:	40858533          	sub	a0,a1,s0
200009b2:	c0c8                	sw	a0,4(s1)
200009b4:	a011                	j	200009b8 <snprintf_sink+0x2c>
200009b6:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200009b8:	8522                	mv	a0,s0
200009ba:	4492                	lw	s1,4(sp)
200009bc:	4422                	lw	s0,8(sp)
200009be:	40b2                	lw	ra,12(sp)
200009c0:	0141                	addi	sp,sp,16
200009c2:	8082                	ret

200009c4 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200009c4:	1101                	addi	sp,sp,-32
200009c6:	c206                	sw	ra,4(sp)
200009c8:	ce46                	sw	a7,28(sp)
200009ca:	cc42                	sw	a6,24(sp)
200009cc:	ca3e                	sw	a5,20(sp)
200009ce:	c83a                	sw	a4,16(sp)
200009d0:	c636                	sw	a3,12(sp)
200009d2:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200009d4:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200009d6:	3171                	jal	20000662 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200009d8:	4092                	lw	ra,4(sp)
200009da:	6105                	addi	sp,sp,32
200009dc:	8082                	ret

200009de <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
200009de:	7139                	addi	sp,sp,-64
200009e0:	de06                	sw	ra,60(sp)
200009e2:	dc22                	sw	s0,56(sp)
200009e4:	da26                	sw	s1,52(sp)
200009e6:	d84a                	sw	s2,48(sp)
200009e8:	d64e                	sw	s3,44(sp)
200009ea:	892e                	mv	s2,a1
200009ec:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200009ee:	ca05                	beqz	a2,20000a1e <write_digits+0x40>
200009f0:	4501                	li	a0,0
200009f2:	02b10813          	addi	a6,sp,43
200009f6:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
200009f8:	02e65633          	divu	a2,a2,a4
200009fc:	02e60433          	mul	s0,a2,a4
20000a00:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20000a04:	943e                	add	s0,s0,a5
20000a06:	00040403          	lb	s0,0(s0)
20000a0a:	00a805b3          	add	a1,a6,a0
20000a0e:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000a12:	157d                	addi	a0,a0,-1
20000a14:	fee4f1e3          	bgeu	s1,a4,200009f6 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20000a18:	40a00633          	neg	a2,a0
20000a1c:	a011                	j	20000a20 <write_digits+0x42>
20000a1e:	4601                	li	a2,0
20000a20:	4485                	li	s1,1
20000a22:	c291                	beqz	a3,20000a26 <write_digits+0x48>
20000a24:	84b6                	mv	s1,a3
20000a26:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20000a2a:	00a4e463          	bltu	s1,a0,20000a32 <write_digits+0x54>
20000a2e:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000a32:	00967f63          	bgeu	a2,s1,20000a50 <write_digits+0x72>
20000a36:	0068                	addi	a0,sp,12
20000a38:	8d05                	sub	a0,a0,s1
20000a3a:	02050513          	addi	a0,a0,32
20000a3e:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20000a42:	03000593          	li	a1,48
20000a46:	8622                	mv	a2,s0
20000a48:	2429                	jal	20000c52 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000a4a:	147d                	addi	s0,s0,-1
20000a4c:	fc7d                	bnez	s0,20000a4a <write_digits+0x6c>
20000a4e:	8626                	mv	a2,s1
20000a50:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20000a52:	8d11                	sub	a0,a0,a2
20000a54:	02050593          	addi	a1,a0,32
20000a58:	854e                	mv	a0,s3
20000a5a:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20000a5c:	59b2                	lw	s3,44(sp)
20000a5e:	5942                	lw	s2,48(sp)
20000a60:	54d2                	lw	s1,52(sp)
20000a62:	5462                	lw	s0,56(sp)
20000a64:	50f2                	lw	ra,60(sp)
20000a66:	6121                	addi	sp,sp,64
20000a68:	8082                	ret
	...

20000a6c <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20000a6c:	1141                	addi	sp,sp,-16
20000a6e:	c606                	sw	ra,12(sp)
20000a70:	c422                	sw	s0,8(sp)
20000a72:	6511                	lui	a0,0x4
20000a74:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000a78:	28f5                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20000a7a:	00001517          	auipc	a0,0x1
20000a7e:	cce50513          	addi	a0,a0,-818 # 20001748 <kDeviceType>
20000a82:	4108                	lw	a0,0(a0)
20000a84:	c111                	beqz	a0,20000a88 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000a86:	280d                	jal	20000ab8 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000a88:	2481                	jal	20000cc8 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20000a8a:	00001597          	auipc	a1,0x1
20000a8e:	cf258593          	addi	a1,a1,-782 # 2000177c <kTestConfig>
20000a92:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000a96:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000a98:	c191                	beqz	a1,20000a9c <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20000a9a:	2839                	jal	20000ab8 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20000a9c:	2a51                	jal	20000c30 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20000a9e:	e409                	bnez	s0,20000aa8 <main+0x3c>
20000aa0:	6531                	lui	a0,0xc
20000aa2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000aa6:	a019                	j	20000aac <main+0x40>
20000aa8:	6525                	lui	a0,0x9
20000aaa:	0535                	addi	a0,a0,13
20000aac:	20e1                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20000aae:	4505                	li	a0,1
20000ab0:	4422                	lw	s0,8(sp)
20000ab2:	40b2                	lw	ra,12(sp)
20000ab4:	0141                	addi	sp,sp,16
20000ab6:	8082                	ret

20000ab8 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000ab8:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000aba:	ce06                	sw	ra,28(sp)
20000abc:	cc22                	sw	s0,24(sp)
20000abe:	ca26                	sw	s1,20(sp)
20000ac0:	effff597          	auipc	a1,0xeffff
20000ac4:	54c58593          	addi	a1,a1,1356 # 1000000c <uart0>
20000ac8:	40000537          	lui	a0,0x40000
20000acc:	2125                	jal	20000ef4 <dif_uart_init>
20000ace:	00001497          	auipc	s1,0x1
20000ad2:	caa48493          	addi	s1,s1,-854 # 20001778 <kDeviceLogBypassUartAddress>
20000ad6:	c905                	beqz	a0,20000b06 <init_uart+0x4e>
20000ad8:	4088                	lw	a0,0(s1)
20000ada:	c901                	beqz	a0,20000aea <init_uart+0x32>
20000adc:	e000f517          	auipc	a0,0xe000f
20000ae0:	59c50513          	addi	a0,a0,1436 # 10078 <init_uart.kLogFields>
20000ae4:	4581                	li	a1,0
20000ae6:	3461                	jal	2000056e <base_log_internal_dv>
20000ae8:	a819                	j	20000afe <init_uart+0x46>
20000aea:	00001597          	auipc	a1,0x1
20000aee:	c0a58593          	addi	a1,a1,-1014 # 200016f4 <kUnknownSpec+0xf>
20000af2:	840a                	mv	s0,sp
20000af4:	4651                	li	a2,20
20000af6:	8522                	mv	a0,s0
20000af8:	2291                	jal	20000c3c <memcpy>
20000afa:	8522                	mv	a0,s0
20000afc:	32e1                	jal	200004c4 <base_log_internal_core>
20000afe:	6531                	lui	a0,0xc
20000b00:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b04:	2885                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20000b06:	00001517          	auipc	a0,0x1
20000b0a:	c6250513          	addi	a0,a0,-926 # 20001768 <kUartBaudrate>
20000b0e:	4108                	lw	a0,0(a0)
20000b10:	00001597          	auipc	a1,0x1
20000b14:	c4858593          	addi	a1,a1,-952 # 20001758 <kClockFreqPeripheralHz>
20000b18:	418c                	lw	a1,0(a1)
20000b1a:	c02a                	sw	a0,0(sp)
20000b1c:	c22e                	sw	a1,4(sp)
20000b1e:	4505                	li	a0,1
20000b20:	c42a                	sw	a0,8(sp)
20000b22:	c62a                	sw	a0,12(sp)
20000b24:	effff517          	auipc	a0,0xeffff
20000b28:	4e850513          	addi	a0,a0,1256 # 1000000c <uart0>
20000b2c:	858a                	mv	a1,sp
20000b2e:	2ed1                	jal	20000f02 <dif_uart_configure>
20000b30:	c905                	beqz	a0,20000b60 <init_uart+0xa8>
20000b32:	4088                	lw	a0,0(s1)
20000b34:	c901                	beqz	a0,20000b44 <init_uart+0x8c>
20000b36:	e000f517          	auipc	a0,0xe000f
20000b3a:	55650513          	addi	a0,a0,1366 # 1008c <init_uart.kLogFields.2>
20000b3e:	4581                	li	a1,0
20000b40:	343d                	jal	2000056e <base_log_internal_dv>
20000b42:	a819                	j	20000b58 <init_uart+0xa0>
20000b44:	00001597          	auipc	a1,0x1
20000b48:	bc458593          	addi	a1,a1,-1084 # 20001708 <kUnknownSpec+0x23>
20000b4c:	840a                	mv	s0,sp
20000b4e:	4651                	li	a2,20
20000b50:	8522                	mv	a0,s0
20000b52:	20ed                	jal	20000c3c <memcpy>
20000b54:	8522                	mv	a0,s0
20000b56:	32bd                	jal	200004c4 <base_log_internal_core>
20000b58:	6531                	lui	a0,0xc
20000b5a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b5e:	2819                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
20000b60:	effff517          	auipc	a0,0xeffff
20000b64:	4ac50513          	addi	a0,a0,1196 # 1000000c <uart0>
20000b68:	3ca1                	jal	200005c0 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000b6a:	44d2                	lw	s1,20(sp)
20000b6c:	4462                	lw	s0,24(sp)
20000b6e:	40f2                	lw	ra,28(sp)
20000b70:	6105                	addi	sp,sp,32
20000b72:	8082                	ret

20000b74 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000b74:	1101                	addi	sp,sp,-32
20000b76:	ce06                	sw	ra,28(sp)
20000b78:	cc22                	sw	s0,24(sp)
20000b7a:	65b1                	lui	a1,0xc
20000b7c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000b80:	02b50163          	beq	a0,a1,20000ba2 <test_status_set+0x2e>
20000b84:	65a5                	lui	a1,0x9
20000b86:	05b5                	addi	a1,a1,13
20000b88:	02b50f63          	beq	a0,a1,20000bc6 <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000b8c:	00001597          	auipc	a1,0x1
20000b90:	be858593          	addi	a1,a1,-1048 # 20001774 <kDeviceTestStatusAddress>
20000b94:	418c                	lw	a1,0(a1)
20000b96:	c191                	beqz	a1,20000b9a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b98:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000b9a:	4462                	lw	s0,24(sp)
20000b9c:	40f2                	lw	ra,28(sp)
20000b9e:	6105                	addi	sp,sp,32
20000ba0:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000ba2:	00001517          	auipc	a0,0x1
20000ba6:	bd650513          	addi	a0,a0,-1066 # 20001778 <kDeviceLogBypassUartAddress>
20000baa:	4108                	lw	a0,0(a0)
20000bac:	ed1d                	bnez	a0,20000bea <test_status_set+0x76>
20000bae:	00001597          	auipc	a1,0x1
20000bb2:	b8258593          	addi	a1,a1,-1150 # 20001730 <kUnknownSpec+0x4b>
20000bb6:	840a                	mv	s0,sp
20000bb8:	4651                	li	a2,20
20000bba:	8522                	mv	a0,s0
20000bbc:	2041                	jal	20000c3c <memcpy>
20000bbe:	8522                	mv	a0,s0
20000bc0:	905ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000bc4:	a80d                	j	20000bf6 <test_status_set+0x82>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000bc6:	00001517          	auipc	a0,0x1
20000bca:	bb250513          	addi	a0,a0,-1102 # 20001778 <kDeviceLogBypassUartAddress>
20000bce:	4108                	lw	a0,0(a0)
20000bd0:	ed0d                	bnez	a0,20000c0a <test_status_set+0x96>
20000bd2:	00001597          	auipc	a1,0x1
20000bd6:	b4a58593          	addi	a1,a1,-1206 # 2000171c <kUnknownSpec+0x37>
20000bda:	840a                	mv	s0,sp
20000bdc:	4651                	li	a2,20
20000bde:	8522                	mv	a0,s0
20000be0:	28b1                	jal	20000c3c <memcpy>
20000be2:	8522                	mv	a0,s0
20000be4:	8e1ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000be8:	a805                	j	20000c18 <test_status_set+0xa4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000bea:	e000f517          	auipc	a0,0xe000f
20000bee:	4ca50513          	addi	a0,a0,1226 # 100b4 <test_status_set.kLogFields.2>
20000bf2:	4581                	li	a1,0
20000bf4:	3aad                	jal	2000056e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000bf6:	00001517          	auipc	a0,0x1
20000bfa:	b7e50513          	addi	a0,a0,-1154 # 20001774 <kDeviceTestStatusAddress>
20000bfe:	4108                	lw	a0,0(a0)
20000c00:	c50d                	beqz	a0,20000c2a <test_status_set+0xb6>
20000c02:	65b1                	lui	a1,0xc
20000c04:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20000c08:	a005                	j	20000c28 <test_status_set+0xb4>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000c0a:	e000f517          	auipc	a0,0xe000f
20000c0e:	49650513          	addi	a0,a0,1174 # 100a0 <test_status_set.kLogFields>
20000c12:	4581                	li	a1,0
20000c14:	95bff0ef          	jal	ra,2000056e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000c18:	00001517          	auipc	a0,0x1
20000c1c:	b5c50513          	addi	a0,a0,-1188 # 20001774 <kDeviceTestStatusAddress>
20000c20:	4108                	lw	a0,0(a0)
20000c22:	c501                	beqz	a0,20000c2a <test_status_set+0xb6>
20000c24:	65a5                	lui	a1,0x9
20000c26:	05b5                	addi	a1,a1,13
20000c28:	c10c                	sw	a1,0(a0)
20000c2a:	dd6ff0ef          	jal	ra,20000200 <abort>
	...

20000c30 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000c30:	8082                	ret
	...

20000c34 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20000c34:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20000c36:	8082                	ret

20000c38 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20000c38:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20000c3a:	8082                	ret

20000c3c <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20000c3c:	ca11                	beqz	a2,20000c50 <memcpy+0x14>
20000c3e:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20000c40:	00058703          	lb	a4,0(a1) # 9000 <_stack_size+0x7000>
20000c44:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20000c48:	167d                	addi	a2,a2,-1
20000c4a:	0685                	addi	a3,a3,1
20000c4c:	0585                	addi	a1,a1,1
20000c4e:	fa6d                	bnez	a2,20000c40 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20000c50:	8082                	ret

20000c52 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000c52:	c619                	beqz	a2,20000c60 <memset+0xe>
20000c54:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20000c56:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20000c5a:	167d                	addi	a2,a2,-1
20000c5c:	0685                	addi	a3,a3,1
20000c5e:	fe65                	bnez	a2,20000c56 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20000c60:	8082                	ret

20000c62 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20000c62:	ce09                	beqz	a2,20000c7c <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20000c64:	00054683          	lbu	a3,0(a0)
20000c68:	0005c703          	lbu	a4,0(a1)
20000c6c:	00e6ea63          	bltu	a3,a4,20000c80 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20000c70:	00d76b63          	bltu	a4,a3,20000c86 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20000c74:	167d                	addi	a2,a2,-1
20000c76:	0585                	addi	a1,a1,1
20000c78:	0505                	addi	a0,a0,1
20000c7a:	f66d                	bnez	a2,20000c64 <memcmp+0x2>
20000c7c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
20000c7e:	8082                	ret
20000c80:	fd600513          	li	a0,-42
20000c84:	8082                	ret
20000c86:	02a00513          	li	a0,42
20000c8a:	8082                	ret

20000c8c <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000c8c:	ca11                	beqz	a2,20000ca0 <memchr+0x14>
20000c8e:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20000c92:	00054683          	lbu	a3,0(a0)
20000c96:	00b68663          	beq	a3,a1,20000ca2 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000c9a:	167d                	addi	a2,a2,-1
20000c9c:	0505                	addi	a0,a0,1
20000c9e:	fa75                	bnez	a2,20000c92 <memchr+0x6>
20000ca0:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20000ca2:	8082                	ret

20000ca4 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000ca4:	ce09                	beqz	a2,20000cbe <memrchr+0x1a>
20000ca6:	fff50693          	addi	a3,a0,-1
20000caa:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000cae:	00c68733          	add	a4,a3,a2
20000cb2:	00074703          	lbu	a4,0(a4)
20000cb6:	00b70663          	beq	a4,a1,20000cc2 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000cba:	167d                	addi	a2,a2,-1
20000cbc:	fa6d                	bnez	a2,20000cae <memrchr+0xa>
20000cbe:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000cc0:	8082                	ret
20000cc2:	9532                	add	a0,a0,a2
20000cc4:	157d                	addi	a0,a0,-1
20000cc6:	8082                	ret

20000cc8 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:21

const test_config_t kTestConfig = {
    .can_clobber_uart = true,
};

bool test_main(void) {
20000cc8:	711d                	addi	sp,sp,-96
20000cca:	ce86                	sw	ra,92(sp)
20000ccc:	cca2                	sw	s0,88(sp)
20000cce:	caa6                	sw	s1,84(sp)
20000cd0:	c8ca                	sw	s2,80(sp)
20000cd2:	c6ce                	sw	s3,76(sp)
20000cd4:	c4d2                	sw	s4,72(sp)
20000cd6:	c2d6                	sw	s5,68(sp)
20000cd8:	c0da                	sw	s6,64(sp)
20000cda:	de5e                	sw	s7,60(sp)
20000cdc:	dc62                	sw	s8,56(sp)
20000cde:	da66                	sw	s9,52(sp)
20000ce0:	d86a                	sw	s10,48(sp)
20000ce2:	d66e                	sw	s11,44(sp)
20000ce4:	102c                	addi	a1,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:23
  dif_uart_t uart;
  CHECK(
20000ce6:	40000537          	lui	a0,0x40000
20000cea:	2429                	jal	20000ef4 <dif_uart_init>
20000cec:	00001497          	auipc	s1,0x1
20000cf0:	a8c48493          	addi	s1,s1,-1396 # 20001778 <kDeviceLogBypassUartAddress>
20000cf4:	c915                	beqz	a0,20000d28 <test_main+0x60>
20000cf6:	4088                	lw	a0,0(s1)
20000cf8:	c909                	beqz	a0,20000d0a <test_main+0x42>
20000cfa:	e000f517          	auipc	a0,0xe000f
20000cfe:	3ce50513          	addi	a0,a0,974 # 100c8 <test_main.kLogFields>
20000d02:	4581                	li	a1,0
20000d04:	86bff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000d08:	a821                	j	20000d20 <test_main+0x58>
20000d0a:	00001597          	auipc	a1,0x1
20000d0e:	a7658593          	addi	a1,a1,-1418 # 20001780 <kTestConfig+0x4>
20000d12:	0800                	addi	s0,sp,16
20000d14:	4651                	li	a2,20
20000d16:	8522                	mv	a0,s0
20000d18:	3715                	jal	20000c3c <memcpy>
20000d1a:	8522                	mv	a0,s0
20000d1c:	fa8ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000d20:	6531                	lui	a0,0xc
20000d22:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000d26:	35b9                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:29
      dif_uart_init(
          (dif_uart_params_t){
              .base_addr = mmio_region_from_addr(TOP_EARLGREY_UART0_BASE_ADDR),
          },
          &uart) == kDifUartOk);
  CHECK(dif_uart_configure(&uart,
20000d28:	00001517          	auipc	a0,0x1
20000d2c:	a4050513          	addi	a0,a0,-1472 # 20001768 <kUartBaudrate>
20000d30:	4108                	lw	a0,0(a0)
20000d32:	00001597          	auipc	a1,0x1
20000d36:	a2658593          	addi	a1,a1,-1498 # 20001758 <kClockFreqPeripheralHz>
20000d3a:	418c                	lw	a1,0(a1)
20000d3c:	c82a                	sw	a0,16(sp)
20000d3e:	ca2e                	sw	a1,20(sp)
20000d40:	4505                	li	a0,1
20000d42:	cc2a                	sw	a0,24(sp)
20000d44:	ce2a                	sw	a0,28(sp)
20000d46:	1028                	addi	a0,sp,40
20000d48:	080c                	addi	a1,sp,16
20000d4a:	2a65                	jal	20000f02 <dif_uart_configure>
20000d4c:	c915                	beqz	a0,20000d80 <test_main+0xb8>
20000d4e:	4088                	lw	a0,0(s1)
20000d50:	c909                	beqz	a0,20000d62 <test_main+0x9a>
20000d52:	e000f517          	auipc	a0,0xe000f
20000d56:	38a50513          	addi	a0,a0,906 # 100dc <test_main.kLogFields.2>
20000d5a:	4581                	li	a1,0
20000d5c:	813ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000d60:	a821                	j	20000d78 <test_main+0xb0>
20000d62:	00001597          	auipc	a1,0x1
20000d66:	a3258593          	addi	a1,a1,-1486 # 20001794 <kTestConfig+0x18>
20000d6a:	0800                	addi	s0,sp,16
20000d6c:	4651                	li	a2,20
20000d6e:	8522                	mv	a0,s0
20000d70:	35f1                	jal	20000c3c <memcpy>
20000d72:	8522                	mv	a0,s0
20000d74:	f50ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000d78:	6531                	lui	a0,0xc
20000d7a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000d7e:	3bdd                	jal	20000b74 <test_status_set>
20000d80:	1028                	addi	a0,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:38
                               .parity_enable = kDifUartToggleDisabled,
                               .parity = kDifUartParityEven,
                           }) == kDifUartConfigOk,
        "UART config failed!");

  CHECK(dif_uart_loopback_set(&uart, kDifUartLoopbackSystem,
20000d82:	4581                	li	a1,0
20000d84:	4601                	li	a2,0
20000d86:	2955                	jal	2000123a <dif_uart_loopback_set>
20000d88:	c915                	beqz	a0,20000dbc <test_main+0xf4>
20000d8a:	4088                	lw	a0,0(s1)
20000d8c:	c909                	beqz	a0,20000d9e <test_main+0xd6>
20000d8e:	e000f517          	auipc	a0,0xe000f
20000d92:	36250513          	addi	a0,a0,866 # 100f0 <test_main.kLogFields.5>
20000d96:	4581                	li	a1,0
20000d98:	fd6ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000d9c:	a821                	j	20000db4 <test_main+0xec>
20000d9e:	00001597          	auipc	a1,0x1
20000da2:	a0a58593          	addi	a1,a1,-1526 # 200017a8 <kTestConfig+0x2c>
20000da6:	0800                	addi	s0,sp,16
20000da8:	4651                	li	a2,20
20000daa:	8522                	mv	a0,s0
20000dac:	3d41                	jal	20000c3c <memcpy>
20000dae:	8522                	mv	a0,s0
20000db0:	f14ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000db4:	6531                	lui	a0,0xc
20000db6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000dba:	3b6d                	jal	20000b74 <test_status_set>
20000dbc:	1028                	addi	a0,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:40
                              kDifUartToggleEnabled) == kDifUartOk);
  CHECK(dif_uart_fifo_reset(&uart, kDifUartFifoResetAll) == kDifUartOk);
20000dbe:	4589                	li	a1,2
20000dc0:	2981                	jal	20001210 <dif_uart_fifo_reset>
20000dc2:	0004ad83          	lw	s11,0(s1)
20000dc6:	c915                	beqz	a0,20000dfa <test_main+0x132>
20000dc8:	000d8a63          	beqz	s11,20000ddc <test_main+0x114>
20000dcc:	e000f517          	auipc	a0,0xe000f
20000dd0:	33850513          	addi	a0,a0,824 # 10104 <test_main.kLogFields.8>
20000dd4:	4581                	li	a1,0
20000dd6:	f98ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000dda:	a821                	j	20000df2 <test_main+0x12a>
20000ddc:	00001597          	auipc	a1,0x1
20000de0:	9e058593          	addi	a1,a1,-1568 # 200017bc <kTestConfig+0x40>
20000de4:	0800                	addi	s0,sp,16
20000de6:	4651                	li	a2,20
20000de8:	8522                	mv	a0,s0
20000dea:	3d89                	jal	20000c3c <memcpy>
20000dec:	8522                	mv	a0,s0
20000dee:	ed6ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000df2:	6531                	lui	a0,0xc
20000df4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000df8:	3bb5                	jal	20000b74 <test_status_set>
20000dfa:	4901                	li	s2,0
20000dfc:	00001b17          	auipc	s6,0x1
20000e00:	ec5b0b13          	addi	s6,s6,-315 # 20001cc1 <kSendData>
20000e04:	02810d13          	addi	s10,sp,40
20000e08:	00f10993          	addi	s3,sp,15
20000e0c:	4c31                	li	s8,12
20000e0e:	00001517          	auipc	a0,0x1
20000e12:	9ea50513          	addi	a0,a0,-1558 # 200017f8 <kTestConfig+0x7c>
20000e16:	c02a                	sw	a0,0(sp)
20000e18:	01010a13          	addi	s4,sp,16
20000e1c:	6531                	lui	a0,0xc
20000e1e:	aad50493          	addi	s1,a0,-1363 # baad <_stack_size+0x9aad>
20000e22:	e000fa97          	auipc	s5,0xe000f
20000e26:	31ea8a93          	addi	s5,s5,798 # 10140 <test_main.kLogFields.17>
20000e2a:	00001517          	auipc	a0,0x1
20000e2e:	9ba50513          	addi	a0,a0,-1606 # 200017e4 <kTestConfig+0x68>
20000e32:	c42a                	sw	a0,8(sp)
20000e34:	e000fb97          	auipc	s7,0xe000f
20000e38:	2f8b8b93          	addi	s7,s7,760 # 1012c <test_main.kLogFields.14>
20000e3c:	00001517          	auipc	a0,0x1
20000e40:	99450513          	addi	a0,a0,-1644 # 200017d0 <kTestConfig+0x54>
20000e44:	c22a                	sw	a0,4(sp)
20000e46:	e000fc97          	auipc	s9,0xe000f
20000e4a:	2d2c8c93          	addi	s9,s9,722 # 10118 <test_main.kLogFields.11>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:45

  // Send all bytes in `kSendData`, and check that they are received via
  // the loopback mechanism.
  for (int i = 0; i < sizeof(kSendData); ++i) {
    CHECK(dif_uart_byte_send_polled(&uart, kSendData[i]) == kDifUartOk);
20000e4e:	01690533          	add	a0,s2,s6
20000e52:	00054403          	lbu	s0,0(a0)
20000e56:	856a                	mv	a0,s10
20000e58:	85a2                	mv	a1,s0
20000e5a:	2e25                	jal	20001192 <dif_uart_byte_send_polled>
20000e5c:	c10d                	beqz	a0,20000e7e <test_main+0x1b6>
20000e5e:	000d8763          	beqz	s11,20000e6c <test_main+0x1a4>
20000e62:	8566                	mv	a0,s9
20000e64:	4581                	li	a1,0
20000e66:	f08ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000e6a:	a801                	j	20000e7a <test_main+0x1b2>
20000e6c:	4651                	li	a2,20
20000e6e:	8552                	mv	a0,s4
20000e70:	4592                	lw	a1,4(sp)
20000e72:	33e9                	jal	20000c3c <memcpy>
20000e74:	8552                	mv	a0,s4
20000e76:	e4eff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000e7a:	8526                	mv	a0,s1
20000e7c:	39e5                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:48

    uint8_t receive_byte;
    CHECK(dif_uart_byte_receive_polled(&uart, &receive_byte) == kDifUartOk);
20000e7e:	856a                	mv	a0,s10
20000e80:	85ce                	mv	a1,s3
20000e82:	2e0d                	jal	200011b4 <dif_uart_byte_receive_polled>
20000e84:	c10d                	beqz	a0,20000ea6 <test_main+0x1de>
20000e86:	000d8763          	beqz	s11,20000e94 <test_main+0x1cc>
20000e8a:	855e                	mv	a0,s7
20000e8c:	4581                	li	a1,0
20000e8e:	ee0ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000e92:	a801                	j	20000ea2 <test_main+0x1da>
20000e94:	4651                	li	a2,20
20000e96:	8552                	mv	a0,s4
20000e98:	45a2                	lw	a1,8(sp)
20000e9a:	334d                	jal	20000c3c <memcpy>
20000e9c:	8552                	mv	a0,s4
20000e9e:	e26ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000ea2:	8526                	mv	a0,s1
20000ea4:	39c1                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:49
    CHECK(receive_byte == kSendData[i]);
20000ea6:	00f14503          	lbu	a0,15(sp)
20000eaa:	02850263          	beq	a0,s0,20000ece <test_main+0x206>
20000eae:	000d8763          	beqz	s11,20000ebc <test_main+0x1f4>
20000eb2:	8556                	mv	a0,s5
20000eb4:	4581                	li	a1,0
20000eb6:	eb8ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000eba:	a801                	j	20000eca <test_main+0x202>
20000ebc:	4651                	li	a2,20
20000ebe:	8552                	mv	a0,s4
20000ec0:	4582                	lw	a1,0(sp)
20000ec2:	3bad                	jal	20000c3c <memcpy>
20000ec4:	8552                	mv	a0,s4
20000ec6:	dfeff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000eca:	8526                	mv	a0,s1
20000ecc:	3165                	jal	20000b74 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:44
  for (int i = 0; i < sizeof(kSendData); ++i) {
20000ece:	0905                	addi	s2,s2,1
20000ed0:	f7891fe3          	bne	s2,s8,20000e4e <test_main+0x186>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_uart_smoketest.c:52
  }

  return true;
20000ed4:	4505                	li	a0,1
20000ed6:	5db2                	lw	s11,44(sp)
20000ed8:	5d42                	lw	s10,48(sp)
20000eda:	5cd2                	lw	s9,52(sp)
20000edc:	5c62                	lw	s8,56(sp)
20000ede:	5bf2                	lw	s7,60(sp)
20000ee0:	4b06                	lw	s6,64(sp)
20000ee2:	4a96                	lw	s5,68(sp)
20000ee4:	4a26                	lw	s4,72(sp)
20000ee6:	49b6                	lw	s3,76(sp)
20000ee8:	4946                	lw	s2,80(sp)
20000eea:	44d6                	lw	s1,84(sp)
20000eec:	4466                	lw	s0,88(sp)
20000eee:	40f6                	lw	ra,92(sp)
20000ef0:	6125                	addi	sp,sp,96
20000ef2:	8082                	ret

20000ef4 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20000ef4:	c581                	beqz	a1,20000efc <dif_uart_init+0x8>
20000ef6:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20000ef8:	c188                	sw	a0,0(a1)
20000efa:	a011                	j	20000efe <dif_uart_init+0xa>
20000efc:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20000efe:	8532                	mv	a0,a2
20000f00:	8082                	ret

20000f02 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20000f02:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20000f04:	c606                	sw	ra,12(sp)
20000f06:	c422                	sw	s0,8(sp)
20000f08:	c226                	sw	s1,4(sp)
20000f0a:	c92d                	beqz	a0,20000f7c <dif_uart_configure+0x7a>
20000f0c:	84ae                	mv	s1,a1
20000f0e:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20000f10:	418c                	lw	a1,0(a1)
20000f12:	450d                	li	a0,3
20000f14:	c5ad                	beqz	a1,20000f7e <dif_uart_configure+0x7c>
20000f16:	40d0                	lw	a2,4(s1)
20000f18:	c23d                	beqz	a2,20000f7e <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20000f1a:	01459513          	slli	a0,a1,0x14
20000f1e:	81b1                	srli	a1,a1,0xc
20000f20:	4681                	li	a3,0
20000f22:	2e61                	jal	200012ba <__udivdi3>
20000f24:	6641                	lui	a2,0x10
20000f26:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20000f28:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20000f2a:	8d31                	xor	a0,a0,a2
20000f2c:	8dc9                	or	a1,a1,a0
20000f2e:	4511                	li	a0,4
20000f30:	e5b9                	bnez	a1,20000f7e <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20000f32:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f34:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20000f38:	4008                	lw	a0,0(s0)
20000f3a:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f3c:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20000f3e:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f40:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20000f44:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f46:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000f4a:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f4c:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20000f50:	4008                	lw	a0,0(s0)
20000f52:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f54:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20000f56:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
20000f58:	01061513          	slli	a0,a2,0x10
20000f5c:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20000f60:	c291                	beqz	a3,20000f64 <dif_uart_configure+0x62>
20000f62:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20000f64:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20000f66:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20000f68:	e219                	bnez	a2,20000f6e <dif_uart_configure+0x6c>
20000f6a:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20000f6e:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f70:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000f72:	400c                	lw	a1,0(s0)
20000f74:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f76:	0005a223          	sw	zero,4(a1)
20000f7a:	a011                	j	20000f7e <dif_uart_configure+0x7c>
20000f7c:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20000f7e:	4492                	lw	s1,4(sp)
20000f80:	4422                	lw	s0,8(sp)
20000f82:	40b2                	lw	ra,12(sp)
20000f84:	0141                	addi	sp,sp,16
20000f86:	8082                	ret

20000f88 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20000f88:	1141                	addi	sp,sp,-16
20000f8a:	c606                	sw	ra,12(sp)
20000f8c:	c422                	sw	s0,8(sp)
20000f8e:	c226                	sw	s1,4(sp)
20000f90:	84aa                	mv	s1,a0
20000f92:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20000f94:	c09d                	beqz	s1,20000fba <dif_uart_irq_is_pending+0x32>
20000f96:	8432                	mv	s0,a2
20000f98:	c20d                	beqz	a2,20000fba <dif_uart_irq_is_pending+0x32>
20000f9a:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000f9c:	852e                	mv	a0,a1
20000f9e:	85b2                	mv	a1,a2
20000fa0:	2015                	jal	20000fc4 <uart_irq_offset_get>
20000fa2:	85aa                	mv	a1,a0
20000fa4:	4505                	li	a0,1
20000fa6:	c991                	beqz	a1,20000fba <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20000fa8:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000faa:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20000fac:	4602                	lw	a2,0(sp)
20000fae:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000fb0:	00c5d5b3          	srl	a1,a1,a2
20000fb4:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20000fb6:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20000fba:	4492                	lw	s1,4(sp)
20000fbc:	4422                	lw	s0,8(sp)
20000fbe:	40b2                	lw	ra,12(sp)
20000fc0:	0141                	addi	sp,sp,16
20000fc2:	8082                	ret

20000fc4 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20000fc4:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20000fc6:	00a66563          	bltu	a2,a0,20000fd0 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20000fca:	c188                	sw	a0,0(a1)
20000fcc:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20000fce:	8082                	ret
20000fd0:	4501                	li	a0,0
20000fd2:	8082                	ret

20000fd4 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20000fd4:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20000fd6:	c606                	sw	ra,12(sp)
20000fd8:	c422                	sw	s0,8(sp)
20000fda:	c10d                	beqz	a0,20000ffc <dif_uart_irq_acknowledge+0x28>
20000fdc:	842a                	mv	s0,a0
20000fde:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000fe0:	852e                	mv	a0,a1
20000fe2:	85b2                	mv	a1,a2
20000fe4:	37c5                	jal	20000fc4 <uart_irq_offset_get>
20000fe6:	85aa                	mv	a1,a0
20000fe8:	4505                	li	a0,1
20000fea:	c991                	beqz	a1,20000ffe <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000fec:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20000fee:	4010                	lw	a2,0(s0)
20000ff0:	4501                	li	a0,0
20000ff2:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000ff4:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ff8:	c20c                	sw	a1,0(a2)
20000ffa:	a011                	j	20000ffe <dif_uart_irq_acknowledge+0x2a>
20000ffc:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20000ffe:	4422                	lw	s0,8(sp)
20001000:	40b2                	lw	ra,12(sp)
20001002:	0141                	addi	sp,sp,16
20001004:	8082                	ret

20001006 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001006:	c911                	beqz	a0,2000101a <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001008:	c581                	beqz	a1,20001010 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000100a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000100c:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
2000100e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001010:	410c                	lw	a1,0(a0)
20001012:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001014:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001018:	8082                	ret
2000101a:	4509                	li	a0,2
2000101c:	8082                	ret

2000101e <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
2000101e:	862a                	mv	a2,a0
20001020:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20001022:	c611                	beqz	a2,2000102e <dif_uart_irq_restore_all+0x10>
20001024:	c589                	beqz	a1,2000102e <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001026:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001028:	4210                	lw	a2,0(a2)
2000102a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000102c:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
2000102e:	8082                	ret

20001030 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20001030:	1141                	addi	sp,sp,-16
20001032:	c606                	sw	ra,12(sp)
20001034:	c422                	sw	s0,8(sp)
20001036:	c226                	sw	s1,4(sp)
20001038:	84aa                	mv	s1,a0
2000103a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
2000103c:	c485                	beqz	s1,20001064 <dif_uart_irq_get_enabled+0x34>
2000103e:	8432                	mv	s0,a2
20001040:	c215                	beqz	a2,20001064 <dif_uart_irq_get_enabled+0x34>
20001042:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001044:	852e                	mv	a0,a1
20001046:	85b2                	mv	a1,a2
20001048:	3fb5                	jal	20000fc4 <uart_irq_offset_get>
2000104a:	85aa                	mv	a1,a0
2000104c:	4505                	li	a0,1
2000104e:	c999                	beqz	a1,20001064 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001050:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001052:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001054:	4602                	lw	a2,0(sp)
20001056:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001058:	00c5d5b3          	srl	a1,a1,a2
2000105c:	8985                	andi	a1,a1,1
2000105e:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20001062:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001064:	4492                	lw	s1,4(sp)
20001066:	4422                	lw	s0,8(sp)
20001068:	40b2                	lw	ra,12(sp)
2000106a:	0141                	addi	sp,sp,16
2000106c:	8082                	ret

2000106e <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
2000106e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20001070:	c606                	sw	ra,12(sp)
20001072:	c422                	sw	s0,8(sp)
20001074:	c226                	sw	s1,4(sp)
20001076:	c91d                	beqz	a0,200010ac <dif_uart_irq_set_enabled+0x3e>
20001078:	8432                	mv	s0,a2
2000107a:	84aa                	mv	s1,a0
2000107c:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000107e:	852e                	mv	a0,a1
20001080:	85b2                	mv	a1,a2
20001082:	3789                	jal	20000fc4 <uart_irq_offset_get>
20001084:	85aa                	mv	a1,a0
20001086:	4505                	li	a0,1
20001088:	c19d                	beqz	a1,200010ae <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000108a:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000108c:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
2000108e:	4682                	lw	a3,0(sp)
20001090:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001092:	00143713          	seqz	a4,s0
20001096:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001098:	00d797b3          	sll	a5,a5,a3
2000109c:	fff7c793          	not	a5,a5
200010a0:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200010a2:	00d716b3          	sll	a3,a4,a3
200010a6:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200010a8:	c1d0                	sw	a2,4(a1)
200010aa:	a011                	j	200010ae <dif_uart_irq_set_enabled+0x40>
200010ac:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200010ae:	4492                	lw	s1,4(sp)
200010b0:	4422                	lw	s0,8(sp)
200010b2:	40b2                	lw	ra,12(sp)
200010b4:	0141                	addi	sp,sp,16
200010b6:	8082                	ret

200010b8 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200010b8:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200010ba:	c606                	sw	ra,12(sp)
200010bc:	c422                	sw	s0,8(sp)
200010be:	c10d                	beqz	a0,200010e0 <dif_uart_irq_force+0x28>
200010c0:	842a                	mv	s0,a0
200010c2:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200010c4:	852e                	mv	a0,a1
200010c6:	85b2                	mv	a1,a2
200010c8:	3df5                	jal	20000fc4 <uart_irq_offset_get>
200010ca:	85aa                	mv	a1,a0
200010cc:	4505                	li	a0,1
200010ce:	c991                	beqz	a1,200010e2 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200010d0:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
200010d2:	4010                	lw	a2,0(s0)
200010d4:	4501                	li	a0,0
200010d6:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200010d8:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010dc:	c60c                	sw	a1,8(a2)
200010de:	a011                	j	200010e2 <dif_uart_irq_force+0x2a>
200010e0:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
200010e2:	4422                	lw	s0,8(sp)
200010e4:	40b2                	lw	ra,12(sp)
200010e6:	0141                	addi	sp,sp,16
200010e8:	8082                	ret

200010ea <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200010ea:	cd09                	beqz	a0,20001104 <dif_uart_watermark_rx_set+0x1a>
200010ec:	4691                	li	a3,4
200010ee:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200010f0:	00b6eb63          	bltu	a3,a1,20001106 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200010f4:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010f6:	4d54                	lw	a3,28(a0)
200010f8:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
200010fa:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200010fc:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200010fe:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001100:	cd4c                	sw	a1,28(a0)
20001102:	a011                	j	20001106 <dif_uart_watermark_rx_set+0x1c>
20001104:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001106:	8532                	mv	a0,a2
20001108:	8082                	ret

2000110a <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
2000110a:	cd11                	beqz	a0,20001126 <dif_uart_watermark_tx_set+0x1c>
2000110c:	468d                	li	a3,3
2000110e:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001110:	00b6ec63          	bltu	a3,a1,20001128 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001114:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001116:	4d54                	lw	a3,28(a0)
20001118:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
2000111a:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000111c:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001120:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001122:	cd4c                	sw	a1,28(a0)
20001124:	a011                	j	20001128 <dif_uart_watermark_tx_set+0x1e>
20001126:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001128:	8532                	mv	a0,a2
2000112a:	8082                	ret

2000112c <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
2000112c:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
2000112e:	c51d                	beqz	a0,2000115c <dif_uart_bytes_send+0x30>
20001130:	c595                	beqz	a1,2000115c <dif_uart_bytes_send+0x30>
20001132:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001134:	c20d                	beqz	a2,20001156 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001136:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000113a:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000113e:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001140:	eb19                	bnez	a4,20001156 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20001142:	00f58733          	add	a4,a1,a5
20001146:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
2000114a:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000114c:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001150:	fef613e3          	bne	a2,a5,20001136 <dif_uart_bytes_send+0xa>
20001154:	87b2                	mv	a5,a2
20001156:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001158:	c291                	beqz	a3,2000115c <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
2000115a:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
2000115c:	853a                	mv	a0,a4
2000115e:	8082                	ret

20001160 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001160:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20001162:	c515                	beqz	a0,2000118e <dif_uart_bytes_receive+0x2e>
20001164:	c60d                	beqz	a2,2000118e <dif_uart_bytes_receive+0x2e>
20001166:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001168:	cd99                	beqz	a1,20001186 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
2000116a:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000116c:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000116e:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001172:	eb91                	bnez	a5,20001186 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001174:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001176:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
2000117a:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000117c:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001180:	ff0595e3          	bne	a1,a6,2000116a <dif_uart_bytes_receive+0xa>
20001184:	882e                	mv	a6,a1
20001186:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001188:	c299                	beqz	a3,2000118e <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
2000118a:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
2000118e:	853a                	mv	a0,a4
20001190:	8082                	ret

20001192 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001192:	cd19                	beqz	a0,200011b0 <dif_uart_byte_send_polled+0x1e>
20001194:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001196:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001198:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
2000119a:	fef5                	bnez	a3,20001196 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000119c:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000119e:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200011a0:	e299                	bnez	a3,200011a6 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200011a2:	ce0c                	sw	a1,24(a2)
200011a4:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011a6:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011a8:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200011aa:	dd75                	beqz	a0,200011a6 <dif_uart_byte_send_polled+0x14>
200011ac:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
200011ae:	8082                	ret
200011b0:	4509                	li	a0,2
200011b2:	8082                	ret

200011b4 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
200011b4:	862a                	mv	a2,a0
200011b6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
200011b8:	c205                	beqz	a2,200011d8 <dif_uart_byte_receive_polled+0x24>
200011ba:	cd99                	beqz	a1,200011d8 <dif_uart_byte_receive_polled+0x24>
200011bc:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011be:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011c0:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200011c4:	fd6d                	bnez	a0,200011be <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011c6:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011c8:	02057693          	andi	a3,a0,32
200011cc:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200011ce:	e689                	bnez	a3,200011d8 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011d0:	4a50                	lw	a2,20(a2)
200011d2:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200011d4:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
200011d8:	8082                	ret

200011da <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200011da:	862a                	mv	a2,a0
200011dc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
200011de:	ca09                	beqz	a2,200011f0 <dif_uart_rx_bytes_available+0x16>
200011e0:	c981                	beqz	a1,200011f0 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200011e2:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011e4:	5110                	lw	a2,32(a0)
200011e6:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200011e8:	8241                	srli	a2,a2,0x10
200011ea:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
200011ee:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
200011f0:	8082                	ret

200011f2 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200011f2:	862a                	mv	a2,a0
200011f4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
200011f6:	ce01                	beqz	a2,2000120e <dif_uart_tx_bytes_available+0x1c>
200011f8:	c999                	beqz	a1,2000120e <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200011fa:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011fc:	5110                	lw	a2,32(a0)
200011fe:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001200:	03f67613          	andi	a2,a2,63
20001204:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001208:	40c68633          	sub	a2,a3,a2
2000120c:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
2000120e:	8082                	ret

20001210 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001210:	c11d                	beqz	a0,20001236 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001212:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001214:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001216:	ffd5f693          	andi	a3,a1,-3
2000121a:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
2000121e:	fff58713          	addi	a4,a1,-1
20001222:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001224:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001228:	00f77463          	bgeu	a4,a5,20001230 <dif_uart_fifo_reset+0x20>
2000122c:	0025e593          	ori	a1,a1,2
20001230:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001232:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001234:	8082                	ret
20001236:	4509                	li	a0,2
20001238:	8082                	ret

2000123a <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
2000123a:	c515                	beqz	a0,20001266 <dif_uart_loopback_set+0x2c>
2000123c:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
2000123e:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001240:	0015b593          	seqz	a1,a1
20001244:	4715                	li	a4,5
20001246:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000124a:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
2000124c:	00163613          	seqz	a2,a2
20001250:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001252:	00b797b3          	sll	a5,a5,a1
20001256:	fff7c793          	not	a5,a5
2000125a:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000125c:	00b615b3          	sll	a1,a2,a1
20001260:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001262:	c54c                	sw	a1,12(a0)
20001264:	a011                	j	20001268 <dif_uart_loopback_set+0x2e>
20001266:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001268:	8536                	mv	a0,a3
2000126a:	8082                	ret

2000126c <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
2000126c:	862a                	mv	a2,a0
2000126e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001270:	ca11                	beqz	a2,20001284 <dif_uart_enable_rx_timeout+0x18>
20001272:	0185d693          	srli	a3,a1,0x18
20001276:	e699                	bnez	a3,20001284 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001278:	4210                	lw	a2,0(a2)
2000127a:	4501                	li	a0,0
2000127c:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001280:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001282:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001284:	8082                	ret

20001286 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001286:	c511                	beqz	a0,20001292 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001288:	410c                	lw	a1,0(a0)
2000128a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000128c:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001290:	8082                	ret
20001292:	4509                	li	a0,2
20001294:	8082                	ret

20001296 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001296:	86aa                	mv	a3,a0
20001298:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
2000129a:	ce99                	beqz	a3,200012b8 <dif_uart_get_rx_timeout+0x22>
2000129c:	cd91                	beqz	a1,200012b8 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
2000129e:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012a0:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
200012a2:	fff6c513          	not	a0,a3
200012a6:	817d                	srli	a0,a0,0x1f
200012a8:	c188                	sw	a0,0(a1)
200012aa:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
200012ac:	c611                	beqz	a2,200012b8 <dif_uart_get_rx_timeout+0x22>
200012ae:	010005b7          	lui	a1,0x1000
200012b2:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200012b4:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
200012b6:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
200012b8:	8082                	ret

200012ba <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200012ba:	88aa                	mv	a7,a0
200012bc:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200012be:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200012c0:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200012c2:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200012c4:	20069963          	bnez	a3,200014d6 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200012c8:	200026b7          	lui	a3,0x20002
200012cc:	81068693          	addi	a3,a3,-2032 # 20001810 <__clz_tab>
200012d0:	0cc5f063          	bgeu	a1,a2,20001390 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200012d4:	6741                	lui	a4,0x10
200012d6:	0ae67663          	bgeu	a2,a4,20001382 <__udivdi3+0xc8>
200012da:	0ff00713          	li	a4,255
200012de:	00c73733          	sltu	a4,a4,a2
200012e2:	070e                	slli	a4,a4,0x3
200012e4:	00e65533          	srl	a0,a2,a4
200012e8:	96aa                	add	a3,a3,a0
200012ea:	0006c683          	lbu	a3,0(a3)
200012ee:	02000513          	li	a0,32
200012f2:	9736                	add	a4,a4,a3
200012f4:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
200012f8:	00e50c63          	beq	a0,a4,20001310 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200012fc:	00d797b3          	sll	a5,a5,a3
20001300:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001304:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001308:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
2000130c:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001310:	01085893          	srli	a7,a6,0x10
20001314:	0315d7b3          	divu	a5,a1,a7
20001318:	01081613          	slli	a2,a6,0x10
2000131c:	8241                	srli	a2,a2,0x10
2000131e:	01035713          	srli	a4,t1,0x10
20001322:	0315f6b3          	remu	a3,a1,a7
20001326:	853e                	mv	a0,a5
20001328:	02f605b3          	mul	a1,a2,a5
2000132c:	06c2                	slli	a3,a3,0x10
2000132e:	8f55                	or	a4,a4,a3
20001330:	00b77c63          	bgeu	a4,a1,20001348 <__udivdi3+0x8e>
20001334:	9742                	add	a4,a4,a6
20001336:	fff78513          	addi	a0,a5,-1
2000133a:	01076763          	bltu	a4,a6,20001348 <__udivdi3+0x8e>
2000133e:	00b77563          	bgeu	a4,a1,20001348 <__udivdi3+0x8e>
20001342:	ffe78513          	addi	a0,a5,-2
20001346:	9742                	add	a4,a4,a6
20001348:	8f0d                	sub	a4,a4,a1
2000134a:	031777b3          	remu	a5,a4,a7
2000134e:	0342                	slli	t1,t1,0x10
20001350:	01035313          	srli	t1,t1,0x10
20001354:	03175733          	divu	a4,a4,a7
20001358:	07c2                	slli	a5,a5,0x10
2000135a:	0067e333          	or	t1,a5,t1
2000135e:	02e606b3          	mul	a3,a2,a4
20001362:	863a                	mv	a2,a4
20001364:	00d37b63          	bgeu	t1,a3,2000137a <__udivdi3+0xc0>
20001368:	9342                	add	t1,t1,a6
2000136a:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000136e:	01036663          	bltu	t1,a6,2000137a <__udivdi3+0xc0>
20001372:	00d37463          	bgeu	t1,a3,2000137a <__udivdi3+0xc0>
20001376:	ffe70613          	addi	a2,a4,-2
2000137a:	0542                	slli	a0,a0,0x10
2000137c:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000137e:	4581                	li	a1,0
20001380:	a85d                	j	20001436 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001382:	01000537          	lui	a0,0x1000
20001386:	4741                	li	a4,16
20001388:	f4a66ee3          	bltu	a2,a0,200012e4 <__udivdi3+0x2a>
2000138c:	4761                	li	a4,24
2000138e:	bf99                	j	200012e4 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001390:	e601                	bnez	a2,20001398 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001392:	4705                	li	a4,1
20001394:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001398:	6741                	lui	a4,0x10
2000139a:	08e87f63          	bgeu	a6,a4,20001438 <__udivdi3+0x17e>
2000139e:	0ff00713          	li	a4,255
200013a2:	01077363          	bgeu	a4,a6,200013a8 <__udivdi3+0xee>
200013a6:	4521                	li	a0,8
200013a8:	00a85733          	srl	a4,a6,a0
200013ac:	96ba                	add	a3,a3,a4
200013ae:	0006c703          	lbu	a4,0(a3)
200013b2:	02000613          	li	a2,32
200013b6:	972a                	add	a4,a4,a0
200013b8:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
200013bc:	08e61563          	bne	a2,a4,20001446 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
200013c0:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
200013c4:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
200013c6:	01085893          	srli	a7,a6,0x10
200013ca:	01081613          	slli	a2,a6,0x10
200013ce:	8241                	srli	a2,a2,0x10
200013d0:	01035713          	srli	a4,t1,0x10
200013d4:	0317f6b3          	remu	a3,a5,a7
200013d8:	0317d7b3          	divu	a5,a5,a7
200013dc:	06c2                	slli	a3,a3,0x10
200013de:	8f55                	or	a4,a4,a3
200013e0:	02f60e33          	mul	t3,a2,a5
200013e4:	853e                	mv	a0,a5
200013e6:	01c77c63          	bgeu	a4,t3,200013fe <__udivdi3+0x144>
200013ea:	9742                	add	a4,a4,a6
200013ec:	fff78513          	addi	a0,a5,-1
200013f0:	01076763          	bltu	a4,a6,200013fe <__udivdi3+0x144>
200013f4:	01c77563          	bgeu	a4,t3,200013fe <__udivdi3+0x144>
200013f8:	ffe78513          	addi	a0,a5,-2
200013fc:	9742                	add	a4,a4,a6
200013fe:	41c70733          	sub	a4,a4,t3
20001402:	031777b3          	remu	a5,a4,a7
20001406:	0342                	slli	t1,t1,0x10
20001408:	01035313          	srli	t1,t1,0x10
2000140c:	03175733          	divu	a4,a4,a7
20001410:	07c2                	slli	a5,a5,0x10
20001412:	0067e333          	or	t1,a5,t1
20001416:	02e606b3          	mul	a3,a2,a4
2000141a:	863a                	mv	a2,a4
2000141c:	00d37b63          	bgeu	t1,a3,20001432 <__udivdi3+0x178>
20001420:	9342                	add	t1,t1,a6
20001422:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001426:	01036663          	bltu	t1,a6,20001432 <__udivdi3+0x178>
2000142a:	00d37463          	bgeu	t1,a3,20001432 <__udivdi3+0x178>
2000142e:	ffe70613          	addi	a2,a4,-2
20001432:	0542                	slli	a0,a0,0x10
20001434:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001436:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001438:	01000737          	lui	a4,0x1000
2000143c:	4541                	li	a0,16
2000143e:	f6e865e3          	bltu	a6,a4,200013a8 <__udivdi3+0xee>
20001442:	4561                	li	a0,24
20001444:	b795                	j	200013a8 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001446:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
2000144a:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
2000144e:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001452:	00d797b3          	sll	a5,a5,a3
20001456:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
2000145a:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000145e:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001462:	0315f733          	remu	a4,a1,a7
20001466:	01081793          	slli	a5,a6,0x10
2000146a:	83c1                	srli	a5,a5,0x10
2000146c:	01065513          	srli	a0,a2,0x10
20001470:	0315d5b3          	divu	a1,a1,a7
20001474:	0742                	slli	a4,a4,0x10
20001476:	8f49                	or	a4,a4,a0
20001478:	02b786b3          	mul	a3,a5,a1
2000147c:	852e                	mv	a0,a1
2000147e:	00d77c63          	bgeu	a4,a3,20001496 <__udivdi3+0x1dc>
20001482:	9742                	add	a4,a4,a6
20001484:	fff58513          	addi	a0,a1,-1 # ffffff <test_main.kLogFields.17+0xfefebf>
20001488:	01076763          	bltu	a4,a6,20001496 <__udivdi3+0x1dc>
2000148c:	00d77563          	bgeu	a4,a3,20001496 <__udivdi3+0x1dc>
20001490:	ffe58513          	addi	a0,a1,-2
20001494:	9742                	add	a4,a4,a6
20001496:	40d706b3          	sub	a3,a4,a3
2000149a:	0316f733          	remu	a4,a3,a7
2000149e:	0642                	slli	a2,a2,0x10
200014a0:	8241                	srli	a2,a2,0x10
200014a2:	0316d6b3          	divu	a3,a3,a7
200014a6:	0742                	slli	a4,a4,0x10
200014a8:	02d788b3          	mul	a7,a5,a3
200014ac:	00c767b3          	or	a5,a4,a2
200014b0:	8736                	mv	a4,a3
200014b2:	0117fc63          	bgeu	a5,a7,200014ca <__udivdi3+0x210>
200014b6:	97c2                	add	a5,a5,a6
200014b8:	fff68713          	addi	a4,a3,-1
200014bc:	0107e763          	bltu	a5,a6,200014ca <__udivdi3+0x210>
200014c0:	0117f563          	bgeu	a5,a7,200014ca <__udivdi3+0x210>
200014c4:	ffe68713          	addi	a4,a3,-2
200014c8:	97c2                	add	a5,a5,a6
200014ca:	01051593          	slli	a1,a0,0x10
200014ce:	411787b3          	sub	a5,a5,a7
200014d2:	8dd9                	or	a1,a1,a4
200014d4:	bdcd                	j	200013c6 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
200014d6:	14d5e263          	bltu	a1,a3,2000161a <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200014da:	6741                	lui	a4,0x10
200014dc:	02e6ff63          	bgeu	a3,a4,2000151a <__udivdi3+0x260>
200014e0:	0ff00713          	li	a4,255
200014e4:	00d735b3          	sltu	a1,a4,a3
200014e8:	058e                	slli	a1,a1,0x3
200014ea:	20002737          	lui	a4,0x20002
200014ee:	00b6d533          	srl	a0,a3,a1
200014f2:	81070713          	addi	a4,a4,-2032 # 20001810 <__clz_tab>
200014f6:	972a                	add	a4,a4,a0
200014f8:	00074703          	lbu	a4,0(a4)
200014fc:	02000513          	li	a0,32
20001500:	972e                	add	a4,a4,a1
20001502:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001506:	02e51163          	bne	a0,a4,20001528 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
2000150a:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
2000150c:	f2f6e5e3          	bltu	a3,a5,20001436 <__udivdi3+0x17c>
20001510:	00c8b533          	sltu	a0,a7,a2
20001514:	00154513          	xori	a0,a0,1
20001518:	bf39                	j	20001436 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
2000151a:	01000737          	lui	a4,0x1000
2000151e:	45c1                	li	a1,16
20001520:	fce6e5e3          	bltu	a3,a4,200014ea <__udivdi3+0x230>
20001524:	45e1                	li	a1,24
20001526:	b7d1                	j	200014ea <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001528:	00e65333          	srl	t1,a2,a4
2000152c:	00b696b3          	sll	a3,a3,a1
20001530:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001534:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001538:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
2000153c:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001540:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001544:	00b797b3          	sll	a5,a5,a1
20001548:	00e8d733          	srl	a4,a7,a4
2000154c:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001550:	01031793          	slli	a5,t1,0x10
20001554:	83c1                	srli	a5,a5,0x10
20001556:	01085713          	srli	a4,a6,0x10
2000155a:	02a65633          	divu	a2,a2,a0
2000155e:	06c2                	slli	a3,a3,0x10
20001560:	8f55                	or	a4,a4,a3
20001562:	02c78f33          	mul	t5,a5,a2
20001566:	8e32                	mv	t3,a2
20001568:	01e77c63          	bgeu	a4,t5,20001580 <__udivdi3+0x2c6>
2000156c:	971a                	add	a4,a4,t1
2000156e:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001572:	00676763          	bltu	a4,t1,20001580 <__udivdi3+0x2c6>
20001576:	01e77563          	bgeu	a4,t5,20001580 <__udivdi3+0x2c6>
2000157a:	ffe60e13          	addi	t3,a2,-2
2000157e:	971a                	add	a4,a4,t1
20001580:	41e70733          	sub	a4,a4,t5
20001584:	02a776b3          	remu	a3,a4,a0
20001588:	02a75733          	divu	a4,a4,a0
2000158c:	06c2                	slli	a3,a3,0x10
2000158e:	02e78633          	mul	a2,a5,a4
20001592:	01081793          	slli	a5,a6,0x10
20001596:	83c1                	srli	a5,a5,0x10
20001598:	8fd5                	or	a5,a5,a3
2000159a:	86ba                	mv	a3,a4
2000159c:	00c7fc63          	bgeu	a5,a2,200015b4 <__udivdi3+0x2fa>
200015a0:	979a                	add	a5,a5,t1
200015a2:	fff70693          	addi	a3,a4,-1 # ffffff <test_main.kLogFields.17+0xfefebf>
200015a6:	0067e763          	bltu	a5,t1,200015b4 <__udivdi3+0x2fa>
200015aa:	00c7f563          	bgeu	a5,a2,200015b4 <__udivdi3+0x2fa>
200015ae:	ffe70693          	addi	a3,a4,-2
200015b2:	979a                	add	a5,a5,t1
200015b4:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200015b8:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200015ba:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200015bc:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
200015c0:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200015c4:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200015c6:	00def6b3          	and	a3,t4,a3
200015ca:	01055613          	srli	a2,a0,0x10
200015ce:	010ede93          	srli	t4,t4,0x10
200015d2:	02d80333          	mul	t1,a6,a3
200015d6:	02d606b3          	mul	a3,a2,a3
200015da:	01035713          	srli	a4,t1,0x10
200015de:	03d80833          	mul	a6,a6,t4
200015e2:	9836                	add	a6,a6,a3
200015e4:	9742                	add	a4,a4,a6
200015e6:	03d60633          	mul	a2,a2,t4
200015ea:	00d77363          	bgeu	a4,a3,200015f0 <__udivdi3+0x336>
200015ee:	9672                	add	a2,a2,t3
200015f0:	01075693          	srli	a3,a4,0x10
200015f4:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200015f6:	02c7e063          	bltu	a5,a2,20001616 <__udivdi3+0x35c>
200015fa:	d8c792e3          	bne	a5,a2,2000137e <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200015fe:	67c1                	lui	a5,0x10
20001600:	17fd                	addi	a5,a5,-1
20001602:	8f7d                	and	a4,a4,a5
20001604:	0742                	slli	a4,a4,0x10
20001606:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
2000160a:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000160e:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001610:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001612:	e2e8f2e3          	bgeu	a7,a4,20001436 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001616:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001618:	b39d                	j	2000137e <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
2000161a:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
2000161c:	4501                	li	a0,0
2000161e:	bd21                	j	20001436 <__udivdi3+0x17c>
