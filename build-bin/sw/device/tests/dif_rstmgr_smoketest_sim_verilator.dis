
sw/device/tests/dif_rstmgr_smoketest_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         000014bc  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       000005ab  20001640  20001640  00002640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20001bec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000000c  10000008  20001bf4  00003008  2**2
                  ALLOC
  8 .logs.fields  00000104  00010000  00010000  00003008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000067be  00000000  00000000  00003132  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014a2  00000000  00000000  000098f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000ad92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000385f  00000000  00000000  0000ae2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003253  00000000  00000000  0000e689  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000218  00000000  00000000  000118dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001f68  00000000  00000000  00011af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000710  00000000  00000000  00013a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fec58593          	addi	a1,a1,-20 # 10000014 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	b9c60613          	addi	a2,a2,-1124 # 20001bec <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	5b3000ef          	jal	ra,20000e30 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	aabd                	j	20000200 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	1080006f          	j	20000208 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	2440006f          	j	20000350 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	28c0006f          	j	200003a8 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2d40006f          	j	20000400 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000180:	10500073          	wfi
20000184:	8082                	ret

20000186 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000186:	1141                	addi	sp,sp,-16
20000188:	c606                	sw	ra,12(sp)
2000018a:	00001597          	auipc	a1,0x1
2000018e:	5e658593          	addi	a1,a1,1510 # 20001770 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000192:	41d0                	lw	a2,4(a1)
20000194:	4194                	lw	a3,0(a1)
20000196:	02a605b3          	mul	a1,a2,a0
2000019a:	02a6b633          	mulhu	a2,a3,a0
2000019e:	95b2                	add	a1,a1,a2
200001a0:	02a68533          	mul	a0,a3,a0
200001a4:	000f4637          	lui	a2,0xf4
200001a8:	24060613          	addi	a2,a2,576 # f4240 <test_main.kLogFields.5+0xe4150>
200001ac:	4681                	li	a3,0
200001ae:	128010ef          	jal	ra,200012d6 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200001b2:	4801                	li	a6,0
200001b4:	4701                	li	a4,0

200001b6 <read0>:
200001b6:	b8002873          	csrr	a6,mcycleh
200001ba:	b00026f3          	csrr	a3,mcycle
200001be:	b8002773          	csrr	a4,mcycleh
200001c2:	fee81ae3          	bne	a6,a4,200001b6 <read0>
200001c6:	4781                	li	a5,0
200001c8:	4601                	li	a2,0

200001ca <read1>:
200001ca:	b80027f3          	csrr	a5,mcycleh
200001ce:	b0002773          	csrr	a4,mcycle
200001d2:	b8002673          	csrr	a2,mcycleh
200001d6:	fec79ae3          	bne	a5,a2,200001ca <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200001da:	00d73633          	sltu	a2,a4,a3
200001de:	410787b3          	sub	a5,a5,a6
200001e2:	8f91                	sub	a5,a5,a2
200001e4:	00b78663          	beq	a5,a1,200001f0 <read1+0x26>
200001e8:	00b7b733          	sltu	a4,a5,a1
200001ec:	ff69                	bnez	a4,200001c6 <read0+0x10>
200001ee:	a031                	j	200001fa <read1+0x30>
200001f0:	40d70633          	sub	a2,a4,a3
200001f4:	00a63733          	sltu	a4,a2,a0
200001f8:	f779                	bnez	a4,200001c6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200001fa:	40b2                	lw	ra,12(sp)
200001fc:	0141                	addi	sp,sp,16
200001fe:	8082                	ret

20000200 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000200:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000204:	bff5                	j	20000200 <abort>
	...

20000208 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000208:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000020a:	de06                	sw	ra,60(sp)
2000020c:	dc16                	sw	t0,56(sp)
2000020e:	da1a                	sw	t1,52(sp)
20000210:	d81e                	sw	t2,48(sp)
20000212:	d62a                	sw	a0,44(sp)
20000214:	d42e                	sw	a1,40(sp)
20000216:	d232                	sw	a2,36(sp)
20000218:	d036                	sw	a3,32(sp)
2000021a:	ce3a                	sw	a4,28(sp)
2000021c:	cc3e                	sw	a5,24(sp)
2000021e:	ca42                	sw	a6,20(sp)
20000220:	c846                	sw	a7,16(sp)
20000222:	c672                	sw	t3,12(sp)
20000224:	c476                	sw	t4,8(sp)
20000226:	c27a                	sw	t5,4(sp)
20000228:	c07e                	sw	t6,0(sp)
2000022a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000022e:	897d                	andi	a0,a0,31
20000230:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20000232:	00a5dc63          	bge	a1,a0,2000024a <handler_exception+0x42>
20000236:	4599                	li	a1,6
20000238:	02a5c263          	blt	a1,a0,2000025c <handler_exception+0x54>
2000023c:	458d                	li	a1,3
2000023e:	02b50c63          	beq	a0,a1,20000276 <handler_exception+0x6e>
20000242:	4595                	li	a1,5
20000244:	02b50763          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000248:	a015                	j	2000026c <handler_exception+0x64>
2000024a:	c115                	beqz	a0,2000026e <handler_exception+0x66>
2000024c:	4585                	li	a1,1
2000024e:	02b50063          	beq	a0,a1,2000026e <handler_exception+0x66>
20000252:	4589                	li	a1,2
20000254:	00b51c63          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000258:	2095                	jal	200002bc <handler_instr_ill_fault>
2000025a:	a839                	j	20000278 <handler_exception+0x70>
2000025c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000025e:	00b50a63          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000262:	45ad                	li	a1,11
20000264:	00b51463          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000268:	2845                	jal	20000318 <handler_ecall>
2000026a:	a039                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000026c:	a001                	j	2000026c <handler_exception+0x64>
2000026e:	2805                	jal	2000029e <handler_instr_acc_fault>
20000270:	a021                	j	20000278 <handler_exception+0x70>
20000272:	2061                	jal	200002fa <handler_lsu_fault>
20000274:	a011                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20000276:	209d                	jal	200002dc <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20000278:	4f82                	lw	t6,0(sp)
2000027a:	4f12                	lw	t5,4(sp)
2000027c:	4ea2                	lw	t4,8(sp)
2000027e:	4e32                	lw	t3,12(sp)
20000280:	48c2                	lw	a7,16(sp)
20000282:	4852                	lw	a6,20(sp)
20000284:	47e2                	lw	a5,24(sp)
20000286:	4772                	lw	a4,28(sp)
20000288:	5682                	lw	a3,32(sp)
2000028a:	5612                	lw	a2,36(sp)
2000028c:	55a2                	lw	a1,40(sp)
2000028e:	5532                	lw	a0,44(sp)
20000290:	53c2                	lw	t2,48(sp)
20000292:	5352                	lw	t1,52(sp)
20000294:	52e2                	lw	t0,56(sp)
20000296:	50f2                	lw	ra,60(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	30200073          	mret

2000029e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
2000029e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200002a0:	de06                	sw	ra,60(sp)
200002a2:	dc22                	sw	s0,56(sp)
200002a4:	00001597          	auipc	a1,0x1
200002a8:	69858593          	addi	a1,a1,1688 # 2000193c <__clz_tab+0x160>
200002ac:	0040                	addi	s0,sp,4
200002ae:	03400613          	li	a2,52
200002b2:	8522                	mv	a0,s0
200002b4:	559000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200002b8:	8522                	mv	a0,s0
200002ba:	2a71                	jal	20000456 <print_exc_msg>

200002bc <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200002bc:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200002be:	c686                	sw	ra,76(sp)
200002c0:	c4a2                	sw	s0,72(sp)
200002c2:	00001597          	auipc	a1,0x1
200002c6:	6ae58593          	addi	a1,a1,1710 # 20001970 <__clz_tab+0x194>
200002ca:	00d10413          	addi	s0,sp,13
200002ce:	03b00613          	li	a2,59
200002d2:	8522                	mv	a0,s0
200002d4:	539000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200002d8:	8522                	mv	a0,s0
200002da:	2ab5                	jal	20000456 <print_exc_msg>

200002dc <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200002dc:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200002de:	de06                	sw	ra,60(sp)
200002e0:	dc22                	sw	s0,56(sp)
200002e2:	00001597          	auipc	a1,0x1
200002e6:	6c958593          	addi	a1,a1,1737 # 200019ab <__clz_tab+0x1cf>
200002ea:	840a                	mv	s0,sp
200002ec:	03800613          	li	a2,56
200002f0:	8522                	mv	a0,s0
200002f2:	51b000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200002f6:	8522                	mv	a0,s0
200002f8:	2ab9                	jal	20000456 <print_exc_msg>

200002fa <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200002fa:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
200002fc:	de06                	sw	ra,60(sp)
200002fe:	dc22                	sw	s0,56(sp)
20000300:	00001597          	auipc	a1,0x1
20000304:	6e358593          	addi	a1,a1,1763 # 200019e3 <__clz_tab+0x207>
20000308:	0020                	addi	s0,sp,8
2000030a:	03000613          	li	a2,48
2000030e:	8522                	mv	a0,s0
20000310:	4fd000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000314:	8522                	mv	a0,s0
20000316:	2281                	jal	20000456 <print_exc_msg>

20000318 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000318:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000031a:	ce06                	sw	ra,28(sp)
2000031c:	cc22                	sw	s0,24(sp)
2000031e:	00001517          	auipc	a0,0x1
20000322:	47a50513          	addi	a0,a0,1146 # 20001798 <kDeviceLogBypassUartAddress>
20000326:	4108                	lw	a0,0(a0)
20000328:	c901                	beqz	a0,20000338 <handler_ecall+0x20>
2000032a:	e0010517          	auipc	a0,0xe0010
2000032e:	d1250513          	addi	a0,a0,-750 # 1003c <handler_ecall.kLogFields>
20000332:	4581                	li	a1,0
20000334:	2c2d                	jal	2000056e <base_log_internal_dv>
20000336:	a821                	j	2000034e <handler_ecall+0x36>
20000338:	00001597          	auipc	a1,0x1
2000033c:	34458593          	addi	a1,a1,836 # 2000167c <__udivdi3+0x3a6>
20000340:	840a                	mv	s0,sp
20000342:	4651                	li	a2,20
20000344:	8522                	mv	a0,s0
20000346:	4c7000ef          	jal	ra,2000100c <memcpy>
2000034a:	8522                	mv	a0,s0
2000034c:	2aa5                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
2000034e:	a001                	j	2000034e <handler_ecall+0x36>

20000350 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20000350:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
20000352:	ce86                	sw	ra,92(sp)
20000354:	cc96                	sw	t0,88(sp)
20000356:	ca9a                	sw	t1,84(sp)
20000358:	c89e                	sw	t2,80(sp)
2000035a:	c6a2                	sw	s0,76(sp)
2000035c:	c4aa                	sw	a0,72(sp)
2000035e:	c2ae                	sw	a1,68(sp)
20000360:	c0b2                	sw	a2,64(sp)
20000362:	de36                	sw	a3,60(sp)
20000364:	dc3a                	sw	a4,56(sp)
20000366:	da3e                	sw	a5,52(sp)
20000368:	d842                	sw	a6,48(sp)
2000036a:	d646                	sw	a7,44(sp)
2000036c:	d472                	sw	t3,40(sp)
2000036e:	d276                	sw	t4,36(sp)
20000370:	d07a                	sw	t5,32(sp)
20000372:	ce7e                	sw	t6,28(sp)
20000374:	00001517          	auipc	a0,0x1
20000378:	42450513          	addi	a0,a0,1060 # 20001798 <kDeviceLogBypassUartAddress>
2000037c:	4108                	lw	a0,0(a0)
2000037e:	c901                	beqz	a0,2000038e <handler_irq_software+0x3e>
20000380:	e0010517          	auipc	a0,0xe0010
20000384:	c8050513          	addi	a0,a0,-896 # 10000 <_dv_log_offset>
20000388:	4581                	li	a1,0
2000038a:	22d5                	jal	2000056e <base_log_internal_dv>
2000038c:	a821                	j	200003a4 <handler_irq_software+0x54>
2000038e:	00001597          	auipc	a1,0x1
20000392:	2b258593          	addi	a1,a1,690 # 20001640 <__udivdi3+0x36a>
20000396:	0020                	addi	s0,sp,8
20000398:	4651                	li	a2,20
2000039a:	8522                	mv	a0,s0
2000039c:	471000ef          	jal	ra,2000100c <memcpy>
200003a0:	8522                	mv	a0,s0
200003a2:	220d                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200003a4:	a001                	j	200003a4 <handler_irq_software+0x54>
200003a6:	0001                	nop

200003a8 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200003a8:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200003aa:	ce86                	sw	ra,92(sp)
200003ac:	cc96                	sw	t0,88(sp)
200003ae:	ca9a                	sw	t1,84(sp)
200003b0:	c89e                	sw	t2,80(sp)
200003b2:	c6a2                	sw	s0,76(sp)
200003b4:	c4aa                	sw	a0,72(sp)
200003b6:	c2ae                	sw	a1,68(sp)
200003b8:	c0b2                	sw	a2,64(sp)
200003ba:	de36                	sw	a3,60(sp)
200003bc:	dc3a                	sw	a4,56(sp)
200003be:	da3e                	sw	a5,52(sp)
200003c0:	d842                	sw	a6,48(sp)
200003c2:	d646                	sw	a7,44(sp)
200003c4:	d472                	sw	t3,40(sp)
200003c6:	d276                	sw	t4,36(sp)
200003c8:	d07a                	sw	t5,32(sp)
200003ca:	ce7e                	sw	t6,28(sp)
200003cc:	00001517          	auipc	a0,0x1
200003d0:	3cc50513          	addi	a0,a0,972 # 20001798 <kDeviceLogBypassUartAddress>
200003d4:	4108                	lw	a0,0(a0)
200003d6:	c901                	beqz	a0,200003e6 <handler_irq_timer+0x3e>
200003d8:	e0010517          	auipc	a0,0xe0010
200003dc:	c3c50513          	addi	a0,a0,-964 # 10014 <handler_irq_timer.kLogFields>
200003e0:	4581                	li	a1,0
200003e2:	2271                	jal	2000056e <base_log_internal_dv>
200003e4:	a821                	j	200003fc <handler_irq_timer+0x54>
200003e6:	00001597          	auipc	a1,0x1
200003ea:	26e58593          	addi	a1,a1,622 # 20001654 <__udivdi3+0x37e>
200003ee:	0020                	addi	s0,sp,8
200003f0:	4651                	li	a2,20
200003f2:	8522                	mv	a0,s0
200003f4:	419000ef          	jal	ra,2000100c <memcpy>
200003f8:	8522                	mv	a0,s0
200003fa:	20e9                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
200003fc:	a001                	j	200003fc <handler_irq_timer+0x54>
200003fe:	0001                	nop

20000400 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000400:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000402:	ce86                	sw	ra,92(sp)
20000404:	cc96                	sw	t0,88(sp)
20000406:	ca9a                	sw	t1,84(sp)
20000408:	c89e                	sw	t2,80(sp)
2000040a:	c6a2                	sw	s0,76(sp)
2000040c:	c4aa                	sw	a0,72(sp)
2000040e:	c2ae                	sw	a1,68(sp)
20000410:	c0b2                	sw	a2,64(sp)
20000412:	de36                	sw	a3,60(sp)
20000414:	dc3a                	sw	a4,56(sp)
20000416:	da3e                	sw	a5,52(sp)
20000418:	d842                	sw	a6,48(sp)
2000041a:	d646                	sw	a7,44(sp)
2000041c:	d472                	sw	t3,40(sp)
2000041e:	d276                	sw	t4,36(sp)
20000420:	d07a                	sw	t5,32(sp)
20000422:	ce7e                	sw	t6,28(sp)
20000424:	00001517          	auipc	a0,0x1
20000428:	37450513          	addi	a0,a0,884 # 20001798 <kDeviceLogBypassUartAddress>
2000042c:	4108                	lw	a0,0(a0)
2000042e:	c901                	beqz	a0,2000043e <handler_irq_external+0x3e>
20000430:	e0010517          	auipc	a0,0xe0010
20000434:	bf850513          	addi	a0,a0,-1032 # 10028 <handler_irq_external.kLogFields>
20000438:	4581                	li	a1,0
2000043a:	2a15                	jal	2000056e <base_log_internal_dv>
2000043c:	a821                	j	20000454 <handler_irq_external+0x54>
2000043e:	00001597          	auipc	a1,0x1
20000442:	22a58593          	addi	a1,a1,554 # 20001668 <__udivdi3+0x392>
20000446:	0020                	addi	s0,sp,8
20000448:	4651                	li	a2,20
2000044a:	8522                	mv	a0,s0
2000044c:	3c1000ef          	jal	ra,2000100c <memcpy>
20000450:	8522                	mv	a0,s0
20000452:	288d                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000454:	a001                	j	20000454 <handler_irq_external+0x54>

20000456 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000456:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000458:	ce06                	sw	ra,28(sp)
2000045a:	cc22                	sw	s0,24(sp)
2000045c:	ca26                	sw	s1,20(sp)
2000045e:	00001597          	auipc	a1,0x1
20000462:	33a58593          	addi	a1,a1,826 # 20001798 <kDeviceLogBypassUartAddress>
20000466:	418c                	lw	a1,0(a1)
20000468:	842a                	mv	s0,a0
2000046a:	c18d                	beqz	a1,2000048c <print_exc_msg+0x36>
2000046c:	e0010517          	auipc	a0,0xe0010
20000470:	be450513          	addi	a0,a0,-1052 # 10050 <print_exc_msg.kLogFields>
20000474:	4585                	li	a1,1
20000476:	8622                	mv	a2,s0
20000478:	28dd                	jal	2000056e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000047a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000047e:	e0010517          	auipc	a0,0xe0010
20000482:	be650513          	addi	a0,a0,-1050 # 10064 <print_exc_msg.kLogFields.6>
20000486:	4585                	li	a1,1
20000488:	20dd                	jal	2000056e <base_log_internal_dv>
2000048a:	a81d                	j	200004c0 <print_exc_msg+0x6a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000048c:	00001597          	auipc	a1,0x1
20000490:	20458593          	addi	a1,a1,516 # 20001690 <__udivdi3+0x3ba>
20000494:	848a                	mv	s1,sp
20000496:	4651                	li	a2,20
20000498:	8526                	mv	a0,s1
2000049a:	373000ef          	jal	ra,2000100c <memcpy>
2000049e:	8526                	mv	a0,s1
200004a0:	85a2                	mv	a1,s0
200004a2:	200d                	jal	200004c4 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200004a4:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200004a8:	00001597          	auipc	a1,0x1
200004ac:	1fc58593          	addi	a1,a1,508 # 200016a4 <__udivdi3+0x3ce>
200004b0:	848a                	mv	s1,sp
200004b2:	4651                	li	a2,20
200004b4:	8526                	mv	a0,s1
200004b6:	357000ef          	jal	ra,2000100c <memcpy>
200004ba:	8526                	mv	a0,s1
200004bc:	85a2                	mv	a1,s0
200004be:	2019                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200004c0:	a001                	j	200004c0 <print_exc_msg+0x6a>
	...

200004c4 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
200004c4:	7139                	addi	sp,sp,-64
200004c6:	ce06                	sw	ra,28(sp)
200004c8:	cc22                	sw	s0,24(sp)
200004ca:	ca26                	sw	s1,20(sp)
200004cc:	c84a                	sw	s2,16(sp)
200004ce:	892a                	mv	s2,a0
200004d0:	de46                	sw	a7,60(sp)
200004d2:	dc42                	sw	a6,56(sp)
200004d4:	da3e                	sw	a5,52(sp)
200004d6:	d83a                	sw	a4,48(sp)
200004d8:	d636                	sw	a3,44(sp)
200004da:	d432                	sw	a2,40(sp)
200004dc:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
200004de:	4144                	lw	s1,4(a0)
200004e0:	80000537          	lui	a0,0x80000
200004e4:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffe413>
200004e8:	8526                	mv	a0,s1
200004ea:	4581                	li	a1,0
200004ec:	371000ef          	jal	ra,2000105c <memchr>
200004f0:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
200004f4:	02f00593          	li	a1,47
200004f8:	8526                	mv	a0,s1
200004fa:	37b000ef          	jal	ra,20001074 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200004fe:	00092583          	lw	a1,0(s2)
20000502:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000504:	00b66b63          	bltu	a2,a1,2000051a <base_log_internal_core+0x56>
20000508:	058a                	slli	a1,a1,0x2
2000050a:	00001617          	auipc	a2,0x1
2000050e:	1ae60613          	addi	a2,a2,430 # 200016b8 <__udivdi3+0x3e2>
20000512:	95b2                	add	a1,a1,a2
20000514:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000516:	e519                	bnez	a0,20000524 <base_log_internal_core+0x60>
20000518:	a801                	j	20000528 <base_log_internal_core+0x64>
2000051a:	00001597          	auipc	a1,0x1
2000051e:	54658593          	addi	a1,a1,1350 # 20001a60 <__clz_tab+0x284>
20000522:	c119                	beqz	a0,20000528 <base_log_internal_core+0x64>
20000524:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000528:	f0000417          	auipc	s0,0xf0000
2000052c:	ae040413          	addi	s0,s0,-1312 # 10000008 <_data_end>
20000530:	00045603          	lhu	a2,0(s0)
20000534:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000538:	00001517          	auipc	a0,0x1
2000053c:	50f50513          	addi	a0,a0,1295 # 20001a47 <__clz_tab+0x26b>
20000540:	86a6                	mv	a3,s1
20000542:	28d1                	jal	20000616 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000544:	00041503          	lh	a0,0(s0)
20000548:	0505                	addi	a0,a0,1
2000054a:	00a41023          	sh	a0,0(s0)
2000054e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000550:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000552:	01092503          	lw	a0,16(s2)
20000556:	28c5                	jal	20000646 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000558:	00001517          	auipc	a0,0x1
2000055c:	4fd50513          	addi	a0,a0,1277 # 20001a55 <__clz_tab+0x279>
20000560:	285d                	jal	20000616 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000562:	4942                	lw	s2,16(sp)
20000564:	44d2                	lw	s1,20(sp)
20000566:	4462                	lw	s0,24(sp)
20000568:	40f2                	lw	ra,28(sp)
2000056a:	6121                	addi	sp,sp,64
2000056c:	8082                	ret

2000056e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
2000056e:	1101                	addi	sp,sp,-32
20000570:	ce46                	sw	a7,28(sp)
20000572:	cc42                	sw	a6,24(sp)
20000574:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000576:	00001797          	auipc	a5,0x1
2000057a:	22278793          	addi	a5,a5,546 # 20001798 <kDeviceLogBypassUartAddress>
2000057e:	439c                	lw	a5,0(a5)
20000580:	c83a                	sw	a4,16(sp)
20000582:	c636                	sw	a3,12(sp)
20000584:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000586:	c388                	sw	a0,0(a5)
20000588:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
2000058a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
2000058c:	c989                	beqz	a1,2000059e <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
2000058e:	4512                	lw	a0,4(sp)
20000590:	00450613          	addi	a2,a0,4
20000594:	c232                	sw	a2,4(sp)
20000596:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000598:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000059a:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
2000059c:	f9ed                	bnez	a1,2000058e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
2000059e:	6105                	addi	sp,sp,32
200005a0:	8082                	ret
	...

200005a4 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
200005a4:	e589                	bnez	a1,200005ae <base_set_stdout+0xa>
200005a6:	00000597          	auipc	a1,0x0
200005aa:	01658593          	addi	a1,a1,22 # 200005bc <base_dev_null>
200005ae:	f0000617          	auipc	a2,0xf0000
200005b2:	a5260613          	addi	a2,a2,-1454 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
200005b6:	c208                	sw	a0,0(a2)
200005b8:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200005ba:	8082                	ret

200005bc <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
200005bc:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
200005be:	8082                	ret

200005c0 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
200005c0:	f0000597          	auipc	a1,0xf0000
200005c4:	a4058593          	addi	a1,a1,-1472 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
200005c8:	c188                	sw	a0,0(a1)
200005ca:	00000517          	auipc	a0,0x0
200005ce:	00c50513          	addi	a0,a0,12 # 200005d6 <base_dev_uart>
200005d2:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
200005d4:	8082                	ret

200005d6 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
200005d6:	1101                	addi	sp,sp,-32
200005d8:	ce06                	sw	ra,28(sp)
200005da:	cc22                	sw	s0,24(sp)
200005dc:	ca26                	sw	s1,20(sp)
200005de:	c84a                	sw	s2,16(sp)
200005e0:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200005e2:	c20d                	beqz	a2,20000604 <base_dev_uart+0x2e>
200005e4:	8432                	mv	s0,a2
200005e6:	892e                	mv	s2,a1
200005e8:	89aa                	mv	s3,a0
200005ea:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
200005ec:	00990533          	add	a0,s2,s1
200005f0:	00054583          	lbu	a1,0(a0)
200005f4:	854e                	mv	a0,s3
200005f6:	2f09                	jal	20000d08 <dif_uart_byte_send_polled>
200005f8:	e519                	bnez	a0,20000606 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200005fa:	0485                	addi	s1,s1,1
200005fc:	fe9418e3          	bne	s0,s1,200005ec <base_dev_uart+0x16>
20000600:	84a2                	mv	s1,s0
20000602:	a011                	j	20000606 <base_dev_uart+0x30>
20000604:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000606:	8526                	mv	a0,s1
20000608:	49b2                	lw	s3,12(sp)
2000060a:	4942                	lw	s2,16(sp)
2000060c:	44d2                	lw	s1,20(sp)
2000060e:	4462                	lw	s0,24(sp)
20000610:	40f2                	lw	ra,28(sp)
20000612:	6105                	addi	sp,sp,32
20000614:	8082                	ret

20000616 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000616:	7179                	addi	sp,sp,-48
20000618:	c606                	sw	ra,12(sp)
2000061a:	d646                	sw	a7,44(sp)
2000061c:	d442                	sw	a6,40(sp)
2000061e:	d23e                	sw	a5,36(sp)
20000620:	d03a                	sw	a4,32(sp)
20000622:	ce36                	sw	a3,28(sp)
20000624:	cc32                	sw	a2,24(sp)
20000626:	ca2e                	sw	a1,20(sp)
20000628:	f0000597          	auipc	a1,0xf0000
2000062c:	9d858593          	addi	a1,a1,-1576 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000630:	4190                	lw	a2,0(a1)
20000632:	41cc                	lw	a1,4(a1)
20000634:	872a                	mv	a4,a0
20000636:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000638:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000063a:	8532                	mv	a0,a2
2000063c:	863a                	mv	a2,a4
2000063e:	200d                	jal	20000660 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000640:	40b2                	lw	ra,12(sp)
20000642:	6145                	addi	sp,sp,48
20000644:	8082                	ret

20000646 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000646:	f0000697          	auipc	a3,0xf0000
2000064a:	9ba68693          	addi	a3,a3,-1606 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000064e:	4290                	lw	a2,0(a3)
20000650:	42d4                	lw	a3,4(a3)
20000652:	872e                	mv	a4,a1
20000654:	87aa                	mv	a5,a0
20000656:	8532                	mv	a0,a2
20000658:	85b6                	mv	a1,a3
2000065a:	863e                	mv	a2,a5
2000065c:	86ba                	mv	a3,a4
2000065e:	a009                	j	20000660 <base_vfprintf>

20000660 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000660:	7139                	addi	sp,sp,-64
20000662:	de06                	sw	ra,60(sp)
20000664:	dc22                	sw	s0,56(sp)
20000666:	da26                	sw	s1,52(sp)
20000668:	d84a                	sw	s2,48(sp)
2000066a:	d64e                	sw	s3,44(sp)
2000066c:	d452                	sw	s4,40(sp)
2000066e:	d256                	sw	s5,36(sp)
20000670:	d05a                	sw	s6,32(sp)
20000672:	ce5e                	sw	s7,28(sp)
20000674:	cc62                	sw	s8,24(sp)
20000676:	ca66                	sw	s9,20(sp)
20000678:	c86a                	sw	s10,16(sp)
2000067a:	c66e                	sw	s11,12(sp)
2000067c:	8bb2                	mv	s7,a2
2000067e:	892a                	mv	s2,a0
20000680:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000682:	c199                	beqz	a1,20000688 <base_vfprintf+0x28>
20000684:	89ae                	mv	s3,a1
20000686:	a029                	j	20000690 <base_vfprintf+0x30>
20000688:	00000997          	auipc	s3,0x0
2000068c:	f3498993          	addi	s3,s3,-204 # 200005bc <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000690:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000692:	000bc503          	lbu	a0,0(s7)
20000696:	28050f63          	beqz	a0,20000934 <base_vfprintf+0x2d4>
2000069a:	4b01                	li	s6,0
2000069c:	02500c13          	li	s8,37
200006a0:	4ca5                	li	s9,9
200006a2:	02000d13          	li	s10,32
200006a6:	06800d93          	li	s11,104
200006aa:	00001a17          	auipc	s4,0x1
200006ae:	3b8a0a13          	addi	s4,s4,952 # 20001a62 <__clz_tab+0x286>
200006b2:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200006b4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200006b6:	0ff57413          	andi	s0,a0,255
200006ba:	01840963          	beq	s0,s8,200006cc <base_vfprintf+0x6c>
200006be:	c419                	beqz	s0,200006cc <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200006c0:	009b8533          	add	a0,s7,s1
200006c4:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200006c8:	0485                	addi	s1,s1,1
200006ca:	b7f5                	j	200006b6 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200006cc:	c491                	beqz	s1,200006d8 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200006ce:	854a                	mv	a0,s2
200006d0:	85de                	mv	a1,s7
200006d2:	8626                	mv	a2,s1
200006d4:	9982                	jalr	s3
200006d6:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
200006d8:	24040f63          	beqz	s0,20000936 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200006dc:	009b8633          	add	a2,s7,s1
200006e0:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200006e4:	22050f63          	beqz	a0,20000922 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200006e8:	fd050593          	addi	a1,a0,-48
200006ec:	0ff5f593          	andi	a1,a1,255
200006f0:	00bcf863          	bgeu	s9,a1,20000700 <base_vfprintf+0xa0>
200006f4:	4401                	li	s0,0
200006f6:	4581                	li	a1,0
200006f8:	4605                	li	a2,1
200006fa:	028d7f63          	bgeu	s10,s0,20000738 <base_vfprintf+0xd8>
200006fe:	aca1                	j	20000956 <base_vfprintf+0x2f6>
20000700:	4581                	li	a1,0
20000702:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000704:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000706:	00b606b3          	add	a3,a2,a1
2000070a:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000070e:	20068a63          	beqz	a3,20000922 <base_vfprintf+0x2c2>
20000712:	0ff57513          	andi	a0,a0,255
20000716:	03540733          	mul	a4,s0,s5
2000071a:	953a                	add	a0,a0,a4
2000071c:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000720:	fd068513          	addi	a0,a3,-48
20000724:	0ff57713          	andi	a4,a0,255
20000728:	0585                	addi	a1,a1,1
2000072a:	8536                	mv	a0,a3
2000072c:	fcecfde3          	bgeu	s9,a4,20000706 <base_vfprintf+0xa6>
20000730:	4601                	li	a2,0
20000732:	8536                	mv	a0,a3
20000734:	228d6163          	bltu	s10,s0,20000956 <base_vfprintf+0x2f6>
20000738:	008036b3          	snez	a3,s0
2000073c:	8e55                	or	a2,a2,a3
2000073e:	20060c63          	beqz	a2,20000956 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000742:	95de                	add	a1,a1,s7
20000744:	95a6                	add	a1,a1,s1
20000746:	00258b93          	addi	s7,a1,2
2000074a:	02adce63          	blt	s11,a0,20000786 <base_vfprintf+0x126>
2000074e:	06100593          	li	a1,97
20000752:	06a5d563          	bge	a1,a0,200007bc <base_vfprintf+0x15c>
20000756:	06300593          	li	a1,99
2000075a:	0ca5cb63          	blt	a1,a0,20000830 <base_vfprintf+0x1d0>
2000075e:	06200593          	li	a1,98
20000762:	14b50a63          	beq	a0,a1,200008b6 <base_vfprintf+0x256>
20000766:	06300593          	li	a1,99
2000076a:	18b51f63          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
2000076e:	4502                	lw	a0,0(sp)
20000770:	00450593          	addi	a1,a0,4
20000774:	c02e                	sw	a1,0(sp)
20000776:	4108                	lw	a0,0(a0)
20000778:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
2000077c:	4605                	li	a2,1
2000077e:	854a                	mv	a0,s2
20000780:	00b10593          	addi	a1,sp,11
20000784:	aa41                	j	20000914 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000786:	07200593          	li	a1,114
2000078a:	04a5dd63          	bge	a1,a0,200007e4 <base_vfprintf+0x184>
2000078e:	07700593          	li	a1,119
20000792:	0aa5c663          	blt	a1,a0,2000083e <base_vfprintf+0x1de>
20000796:	07300593          	li	a1,115
2000079a:	12b50963          	beq	a0,a1,200008cc <base_vfprintf+0x26c>
2000079e:	07500593          	li	a1,117
200007a2:	16b51363          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200007a6:	4502                	lw	a0,0(sp)
200007a8:	00450593          	addi	a1,a0,4
200007ac:	c02e                	sw	a1,0(sp)
200007ae:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200007b0:	00001797          	auipc	a5,0x1
200007b4:	f3578793          	addi	a5,a5,-203 # 200016e5 <kDigitsLow>
200007b8:	4729                	li	a4,10
200007ba:	a8cd                	j	200008ac <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200007bc:	13850763          	beq	a0,s8,200008ea <base_vfprintf+0x28a>
200007c0:	04800593          	li	a1,72
200007c4:	00b50663          	beq	a0,a1,200007d0 <base_vfprintf+0x170>
200007c8:	05800593          	li	a1,88
200007cc:	12b51e63          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
200007d0:	4502                	lw	a0,0(sp)
200007d2:	00450593          	addi	a1,a0,4
200007d6:	c02e                	sw	a1,0(sp)
200007d8:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
200007da:	00001797          	auipc	a5,0x1
200007de:	f1b78793          	addi	a5,a5,-229 # 200016f5 <kDigitsHigh>
200007e2:	a0e1                	j	200008aa <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200007e4:	06900593          	li	a1,105
200007e8:	06b50d63          	beq	a0,a1,20000862 <base_vfprintf+0x202>
200007ec:	06f00593          	li	a1,111
200007f0:	10b50163          	beq	a0,a1,200008f2 <base_vfprintf+0x292>
200007f4:	07000593          	li	a1,112
200007f8:	10b51863          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200007fc:	00001597          	auipc	a1,0x1
20000800:	26a58593          	addi	a1,a1,618 # 20001a66 <__clz_tab+0x28a>
20000804:	4609                	li	a2,2
20000806:	854a                	mv	a0,s2
20000808:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000080a:	4582                	lw	a1,0(sp)
2000080c:	00458613          	addi	a2,a1,4
20000810:	c032                	sw	a2,0(sp)
20000812:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000814:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000818:	00001797          	auipc	a5,0x1
2000081c:	ecd78793          	addi	a5,a5,-307 # 200016e5 <kDigitsLow>
20000820:	46a1                	li	a3,8
20000822:	4741                	li	a4,16
20000824:	854a                	mv	a0,s2
20000826:	85ce                	mv	a1,s3
20000828:	2a55                	jal	200009dc <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
2000082a:	00a40b33          	add	s6,s0,a0
2000082e:	a0ed                	j	20000918 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000830:	06400593          	li	a1,100
20000834:	02b50763          	beq	a0,a1,20000862 <base_vfprintf+0x202>
20000838:	07b50063          	beq	a0,s11,20000898 <base_vfprintf+0x238>
2000083c:	a0f1                	j	20000908 <base_vfprintf+0x2a8>
2000083e:	07800593          	li	a1,120
20000842:	04b50b63          	beq	a0,a1,20000898 <base_vfprintf+0x238>
20000846:	07a00593          	li	a1,122
2000084a:	0ab51f63          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
2000084e:	4502                	lw	a0,0(sp)
20000850:	00450593          	addi	a1,a0,4
20000854:	c02e                	sw	a1,0(sp)
20000856:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20000858:	00850593          	addi	a1,a0,8
2000085c:	c02e                	sw	a1,0(sp)
2000085e:	414c                	lw	a1,4(a0)
20000860:	a84d                	j	20000912 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000862:	4502                	lw	a0,0(sp)
20000864:	00450593          	addi	a1,a0,4
20000868:	c02e                	sw	a1,0(sp)
2000086a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
2000086c:	557d                	li	a0,-1
2000086e:	00954c63          	blt	a0,s1,20000886 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000872:	00001597          	auipc	a1,0x1
20000876:	1f258593          	addi	a1,a1,498 # 20001a64 <__clz_tab+0x288>
2000087a:	4605                	li	a2,1
2000087c:	854a                	mv	a0,s2
2000087e:	9982                	jalr	s3
20000880:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000882:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000886:	00001797          	auipc	a5,0x1
2000088a:	e5f78793          	addi	a5,a5,-417 # 200016e5 <kDigitsLow>
2000088e:	4729                	li	a4,10
20000890:	854a                	mv	a0,s2
20000892:	85ce                	mv	a1,s3
20000894:	8626                	mv	a2,s1
20000896:	a829                	j	200008b0 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000898:	4502                	lw	a0,0(sp)
2000089a:	00450593          	addi	a1,a0,4
2000089e:	c02e                	sw	a1,0(sp)
200008a0:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200008a2:	00001797          	auipc	a5,0x1
200008a6:	e4378793          	addi	a5,a5,-445 # 200016e5 <kDigitsLow>
200008aa:	4741                	li	a4,16
200008ac:	854a                	mv	a0,s2
200008ae:	85ce                	mv	a1,s3
200008b0:	86a2                	mv	a3,s0
200008b2:	222d                	jal	200009dc <write_digits>
200008b4:	a08d                	j	20000916 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200008b6:	4502                	lw	a0,0(sp)
200008b8:	00450593          	addi	a1,a0,4
200008bc:	c02e                	sw	a1,0(sp)
200008be:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200008c0:	00001797          	auipc	a5,0x1
200008c4:	e2578793          	addi	a5,a5,-475 # 200016e5 <kDigitsLow>
200008c8:	4709                	li	a4,2
200008ca:	b7cd                	j	200008ac <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200008cc:	4502                	lw	a0,0(sp)
200008ce:	00450593          	addi	a1,a0,4
200008d2:	c02e                	sw	a1,0(sp)
200008d4:	410c                	lw	a1,0(a0)
200008d6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200008d8:	00a58633          	add	a2,a1,a0
200008dc:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200008e0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200008e2:	fa7d                	bnez	a2,200008d8 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200008e4:	fff50613          	addi	a2,a0,-1
200008e8:	a02d                	j	20000912 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200008ea:	4605                	li	a2,1
200008ec:	854a                	mv	a0,s2
200008ee:	85d2                	mv	a1,s4
200008f0:	a015                	j	20000914 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200008f2:	4502                	lw	a0,0(sp)
200008f4:	00450593          	addi	a1,a0,4
200008f8:	c02e                	sw	a1,0(sp)
200008fa:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
200008fc:	00001797          	auipc	a5,0x1
20000900:	de978793          	addi	a5,a5,-535 # 200016e5 <kDigitsLow>
20000904:	4721                	li	a4,8
20000906:	b75d                	j	200008ac <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20000908:	00001597          	auipc	a1,0x1
2000090c:	dfd58593          	addi	a1,a1,-515 # 20001705 <kUnknownSpec>
20000910:	463d                	li	a2,15
20000912:	854a                	mv	a0,s2
20000914:	9982                	jalr	s3
20000916:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20000918:	000bc503          	lbu	a0,0(s7)
2000091c:	d8051ce3          	bnez	a0,200006b4 <base_vfprintf+0x54>
20000920:	a819                	j	20000936 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20000922:	00001597          	auipc	a1,0x1
20000926:	da658593          	addi	a1,a1,-602 # 200016c8 <kErrorNul>
2000092a:	4645                	li	a2,17
2000092c:	854a                	mv	a0,s2
2000092e:	9982                	jalr	s3
20000930:	9b2a                	add	s6,s6,a0
20000932:	a011                	j	20000936 <base_vfprintf+0x2d6>
20000934:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20000936:	855a                	mv	a0,s6
20000938:	4db2                	lw	s11,12(sp)
2000093a:	4d42                	lw	s10,16(sp)
2000093c:	4cd2                	lw	s9,20(sp)
2000093e:	4c62                	lw	s8,24(sp)
20000940:	4bf2                	lw	s7,28(sp)
20000942:	5b02                	lw	s6,32(sp)
20000944:	5a92                	lw	s5,36(sp)
20000946:	5a22                	lw	s4,40(sp)
20000948:	59b2                	lw	s3,44(sp)
2000094a:	5942                	lw	s2,48(sp)
2000094c:	54d2                	lw	s1,52(sp)
2000094e:	5462                	lw	s0,56(sp)
20000950:	50f2                	lw	ra,60(sp)
20000952:	6121                	addi	sp,sp,64
20000954:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20000956:	00001597          	auipc	a1,0x1
2000095a:	d8358593          	addi	a1,a1,-637 # 200016d9 <kErrorTooWide>
2000095e:	4631                	li	a2,12
20000960:	b7f1                	j	2000092c <base_vfprintf+0x2cc>

20000962 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20000962:	7179                	addi	sp,sp,-48
20000964:	ca06                	sw	ra,20(sp)
20000966:	d646                	sw	a7,44(sp)
20000968:	d442                	sw	a6,40(sp)
2000096a:	d23e                	sw	a5,36(sp)
2000096c:	d03a                	sw	a4,32(sp)
2000096e:	ce36                	sw	a3,28(sp)
20000970:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20000972:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20000974:	c42a                	sw	a0,8(sp)
20000976:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20000978:	00000597          	auipc	a1,0x0
2000097c:	01258593          	addi	a1,a1,18 # 2000098a <snprintf_sink>
20000980:	0028                	addi	a0,sp,8
20000982:	39f9                	jal	20000660 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20000984:	40d2                	lw	ra,20(sp)
20000986:	6145                	addi	sp,sp,48
20000988:	8082                	ret

2000098a <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000098a:	1141                	addi	sp,sp,-16
2000098c:	c606                	sw	ra,12(sp)
2000098e:	c422                	sw	s0,8(sp)
20000990:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20000992:	4140                	lw	s0,4(a0)
20000994:	c005                	beqz	s0,200009b4 <snprintf_sink+0x2a>
20000996:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20000998:	00c46363          	bltu	s0,a2,2000099e <snprintf_sink+0x14>
2000099c:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
2000099e:	4088                	lw	a0,0(s1)
200009a0:	8622                	mv	a2,s0
200009a2:	25ad                	jal	2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200009a4:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200009a6:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200009a8:	9522                	add	a0,a0,s0
200009aa:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200009ac:	40858533          	sub	a0,a1,s0
200009b0:	c0c8                	sw	a0,4(s1)
200009b2:	a011                	j	200009b6 <snprintf_sink+0x2c>
200009b4:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200009b6:	8522                	mv	a0,s0
200009b8:	4492                	lw	s1,4(sp)
200009ba:	4422                	lw	s0,8(sp)
200009bc:	40b2                	lw	ra,12(sp)
200009be:	0141                	addi	sp,sp,16
200009c0:	8082                	ret

200009c2 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200009c2:	1101                	addi	sp,sp,-32
200009c4:	c206                	sw	ra,4(sp)
200009c6:	ce46                	sw	a7,28(sp)
200009c8:	cc42                	sw	a6,24(sp)
200009ca:	ca3e                	sw	a5,20(sp)
200009cc:	c83a                	sw	a4,16(sp)
200009ce:	c636                	sw	a3,12(sp)
200009d0:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200009d2:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200009d4:	3171                	jal	20000660 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200009d6:	4092                	lw	ra,4(sp)
200009d8:	6105                	addi	sp,sp,32
200009da:	8082                	ret

200009dc <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
200009dc:	7139                	addi	sp,sp,-64
200009de:	de06                	sw	ra,60(sp)
200009e0:	dc22                	sw	s0,56(sp)
200009e2:	da26                	sw	s1,52(sp)
200009e4:	d84a                	sw	s2,48(sp)
200009e6:	d64e                	sw	s3,44(sp)
200009e8:	892e                	mv	s2,a1
200009ea:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200009ec:	ca05                	beqz	a2,20000a1c <write_digits+0x40>
200009ee:	4501                	li	a0,0
200009f0:	02b10813          	addi	a6,sp,43
200009f4:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
200009f6:	02e65633          	divu	a2,a2,a4
200009fa:	02e60433          	mul	s0,a2,a4
200009fe:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20000a02:	943e                	add	s0,s0,a5
20000a04:	00040403          	lb	s0,0(s0)
20000a08:	00a805b3          	add	a1,a6,a0
20000a0c:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000a10:	157d                	addi	a0,a0,-1
20000a12:	fee4f1e3          	bgeu	s1,a4,200009f4 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20000a16:	40a00633          	neg	a2,a0
20000a1a:	a011                	j	20000a1e <write_digits+0x42>
20000a1c:	4601                	li	a2,0
20000a1e:	4485                	li	s1,1
20000a20:	c291                	beqz	a3,20000a24 <write_digits+0x48>
20000a22:	84b6                	mv	s1,a3
20000a24:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20000a28:	00a4e463          	bltu	s1,a0,20000a30 <write_digits+0x54>
20000a2c:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000a30:	00967f63          	bgeu	a2,s1,20000a4e <write_digits+0x72>
20000a34:	0068                	addi	a0,sp,12
20000a36:	8d05                	sub	a0,a0,s1
20000a38:	02050513          	addi	a0,a0,32
20000a3c:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20000a40:	03000593          	li	a1,48
20000a44:	8622                	mv	a2,s0
20000a46:	2bf1                	jal	20001022 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000a48:	147d                	addi	s0,s0,-1
20000a4a:	fc7d                	bnez	s0,20000a48 <write_digits+0x6c>
20000a4c:	8626                	mv	a2,s1
20000a4e:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20000a50:	8d11                	sub	a0,a0,a2
20000a52:	02050593          	addi	a1,a0,32
20000a56:	854e                	mv	a0,s3
20000a58:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20000a5a:	59b2                	lw	s3,44(sp)
20000a5c:	5942                	lw	s2,48(sp)
20000a5e:	54d2                	lw	s1,52(sp)
20000a60:	5462                	lw	s0,56(sp)
20000a62:	50f2                	lw	ra,60(sp)
20000a64:	6121                	addi	sp,sp,64
20000a66:	8082                	ret

20000a68 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20000a68:	c581                	beqz	a1,20000a70 <dif_uart_init+0x8>
20000a6a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20000a6c:	c188                	sw	a0,0(a1)
20000a6e:	a011                	j	20000a72 <dif_uart_init+0xa>
20000a70:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20000a72:	8532                	mv	a0,a2
20000a74:	8082                	ret

20000a76 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20000a76:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20000a78:	c606                	sw	ra,12(sp)
20000a7a:	c422                	sw	s0,8(sp)
20000a7c:	c226                	sw	s1,4(sp)
20000a7e:	c935                	beqz	a0,20000af2 <dif_uart_configure+0x7c>
20000a80:	84ae                	mv	s1,a1
20000a82:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20000a84:	418c                	lw	a1,0(a1)
20000a86:	450d                	li	a0,3
20000a88:	c5b5                	beqz	a1,20000af4 <dif_uart_configure+0x7e>
20000a8a:	40d0                	lw	a2,4(s1)
20000a8c:	c625                	beqz	a2,20000af4 <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20000a8e:	01459513          	slli	a0,a1,0x14
20000a92:	81b1                	srli	a1,a1,0xc
20000a94:	4681                	li	a3,0
20000a96:	041000ef          	jal	ra,200012d6 <__udivdi3>
20000a9a:	6641                	lui	a2,0x10
20000a9c:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20000a9e:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20000aa0:	8d31                	xor	a0,a0,a2
20000aa2:	8dc9                	or	a1,a1,a0
20000aa4:	4511                	li	a0,4
20000aa6:	e5b9                	bnez	a1,20000af4 <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20000aa8:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000aaa:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20000aae:	4008                	lw	a0,0(s0)
20000ab0:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ab2:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20000ab4:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ab6:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20000aba:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000abc:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000ac0:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ac2:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20000ac6:	4008                	lw	a0,0(s0)
20000ac8:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000aca:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20000acc:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
20000ace:	01061513          	slli	a0,a2,0x10
20000ad2:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20000ad6:	c291                	beqz	a3,20000ada <dif_uart_configure+0x64>
20000ad8:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20000ada:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20000adc:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20000ade:	e219                	bnez	a2,20000ae4 <dif_uart_configure+0x6e>
20000ae0:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20000ae4:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ae6:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000ae8:	400c                	lw	a1,0(s0)
20000aea:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000aec:	0005a223          	sw	zero,4(a1)
20000af0:	a011                	j	20000af4 <dif_uart_configure+0x7e>
20000af2:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20000af4:	4492                	lw	s1,4(sp)
20000af6:	4422                	lw	s0,8(sp)
20000af8:	40b2                	lw	ra,12(sp)
20000afa:	0141                	addi	sp,sp,16
20000afc:	8082                	ret

20000afe <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20000afe:	1141                	addi	sp,sp,-16
20000b00:	c606                	sw	ra,12(sp)
20000b02:	c422                	sw	s0,8(sp)
20000b04:	c226                	sw	s1,4(sp)
20000b06:	84aa                	mv	s1,a0
20000b08:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20000b0a:	c09d                	beqz	s1,20000b30 <dif_uart_irq_is_pending+0x32>
20000b0c:	8432                	mv	s0,a2
20000b0e:	c20d                	beqz	a2,20000b30 <dif_uart_irq_is_pending+0x32>
20000b10:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000b12:	852e                	mv	a0,a1
20000b14:	85b2                	mv	a1,a2
20000b16:	2015                	jal	20000b3a <uart_irq_offset_get>
20000b18:	85aa                	mv	a1,a0
20000b1a:	4505                	li	a0,1
20000b1c:	c991                	beqz	a1,20000b30 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20000b1e:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b20:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20000b22:	4602                	lw	a2,0(sp)
20000b24:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b26:	00c5d5b3          	srl	a1,a1,a2
20000b2a:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20000b2c:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20000b30:	4492                	lw	s1,4(sp)
20000b32:	4422                	lw	s0,8(sp)
20000b34:	40b2                	lw	ra,12(sp)
20000b36:	0141                	addi	sp,sp,16
20000b38:	8082                	ret

20000b3a <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20000b3a:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20000b3c:	00a66563          	bltu	a2,a0,20000b46 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20000b40:	c188                	sw	a0,0(a1)
20000b42:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20000b44:	8082                	ret
20000b46:	4501                	li	a0,0
20000b48:	8082                	ret

20000b4a <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20000b4a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20000b4c:	c606                	sw	ra,12(sp)
20000b4e:	c422                	sw	s0,8(sp)
20000b50:	c10d                	beqz	a0,20000b72 <dif_uart_irq_acknowledge+0x28>
20000b52:	842a                	mv	s0,a0
20000b54:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000b56:	852e                	mv	a0,a1
20000b58:	85b2                	mv	a1,a2
20000b5a:	37c5                	jal	20000b3a <uart_irq_offset_get>
20000b5c:	85aa                	mv	a1,a0
20000b5e:	4505                	li	a0,1
20000b60:	c991                	beqz	a1,20000b74 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000b62:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20000b64:	4010                	lw	a2,0(s0)
20000b66:	4501                	li	a0,0
20000b68:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b6a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b6e:	c20c                	sw	a1,0(a2)
20000b70:	a011                	j	20000b74 <dif_uart_irq_acknowledge+0x2a>
20000b72:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20000b74:	4422                	lw	s0,8(sp)
20000b76:	40b2                	lw	ra,12(sp)
20000b78:	0141                	addi	sp,sp,16
20000b7a:	8082                	ret

20000b7c <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20000b7c:	c911                	beqz	a0,20000b90 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20000b7e:	c581                	beqz	a1,20000b86 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000b80:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b82:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20000b84:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000b86:	410c                	lw	a1,0(a0)
20000b88:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b8a:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20000b8e:	8082                	ret
20000b90:	4509                	li	a0,2
20000b92:	8082                	ret

20000b94 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20000b94:	862a                	mv	a2,a0
20000b96:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20000b98:	c611                	beqz	a2,20000ba4 <dif_uart_irq_restore_all+0x10>
20000b9a:	c589                	beqz	a1,20000ba4 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000b9c:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20000b9e:	4210                	lw	a2,0(a2)
20000ba0:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ba2:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20000ba4:	8082                	ret

20000ba6 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20000ba6:	1141                	addi	sp,sp,-16
20000ba8:	c606                	sw	ra,12(sp)
20000baa:	c422                	sw	s0,8(sp)
20000bac:	c226                	sw	s1,4(sp)
20000bae:	84aa                	mv	s1,a0
20000bb0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20000bb2:	c485                	beqz	s1,20000bda <dif_uart_irq_get_enabled+0x34>
20000bb4:	8432                	mv	s0,a2
20000bb6:	c215                	beqz	a2,20000bda <dif_uart_irq_get_enabled+0x34>
20000bb8:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000bba:	852e                	mv	a0,a1
20000bbc:	85b2                	mv	a1,a2
20000bbe:	3fb5                	jal	20000b3a <uart_irq_offset_get>
20000bc0:	85aa                	mv	a1,a0
20000bc2:	4505                	li	a0,1
20000bc4:	c999                	beqz	a1,20000bda <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000bc6:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bc8:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20000bca:	4602                	lw	a2,0(sp)
20000bcc:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000bce:	00c5d5b3          	srl	a1,a1,a2
20000bd2:	8985                	andi	a1,a1,1
20000bd4:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20000bd8:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20000bda:	4492                	lw	s1,4(sp)
20000bdc:	4422                	lw	s0,8(sp)
20000bde:	40b2                	lw	ra,12(sp)
20000be0:	0141                	addi	sp,sp,16
20000be2:	8082                	ret

20000be4 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20000be4:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20000be6:	c606                	sw	ra,12(sp)
20000be8:	c422                	sw	s0,8(sp)
20000bea:	c226                	sw	s1,4(sp)
20000bec:	c91d                	beqz	a0,20000c22 <dif_uart_irq_set_enabled+0x3e>
20000bee:	8432                	mv	s0,a2
20000bf0:	84aa                	mv	s1,a0
20000bf2:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000bf4:	852e                	mv	a0,a1
20000bf6:	85b2                	mv	a1,a2
20000bf8:	3789                	jal	20000b3a <uart_irq_offset_get>
20000bfa:	85aa                	mv	a1,a0
20000bfc:	4505                	li	a0,1
20000bfe:	c19d                	beqz	a1,20000c24 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000c00:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c02:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20000c04:	4682                	lw	a3,0(sp)
20000c06:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20000c08:	00143713          	seqz	a4,s0
20000c0c:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c0e:	00d797b3          	sll	a5,a5,a3
20000c12:	fff7c793          	not	a5,a5
20000c16:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c18:	00d716b3          	sll	a3,a4,a3
20000c1c:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c1e:	c1d0                	sw	a2,4(a1)
20000c20:	a011                	j	20000c24 <dif_uart_irq_set_enabled+0x40>
20000c22:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c24:	4492                	lw	s1,4(sp)
20000c26:	4422                	lw	s0,8(sp)
20000c28:	40b2                	lw	ra,12(sp)
20000c2a:	0141                	addi	sp,sp,16
20000c2c:	8082                	ret

20000c2e <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20000c2e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20000c30:	c606                	sw	ra,12(sp)
20000c32:	c422                	sw	s0,8(sp)
20000c34:	c10d                	beqz	a0,20000c56 <dif_uart_irq_force+0x28>
20000c36:	842a                	mv	s0,a0
20000c38:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000c3a:	852e                	mv	a0,a1
20000c3c:	85b2                	mv	a1,a2
20000c3e:	3df5                	jal	20000b3a <uart_irq_offset_get>
20000c40:	85aa                	mv	a1,a0
20000c42:	4505                	li	a0,1
20000c44:	c991                	beqz	a1,20000c58 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000c46:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20000c48:	4010                	lw	a2,0(s0)
20000c4a:	4501                	li	a0,0
20000c4c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c4e:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c52:	c60c                	sw	a1,8(a2)
20000c54:	a011                	j	20000c58 <dif_uart_irq_force+0x2a>
20000c56:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20000c58:	4422                	lw	s0,8(sp)
20000c5a:	40b2                	lw	ra,12(sp)
20000c5c:	0141                	addi	sp,sp,16
20000c5e:	8082                	ret

20000c60 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000c60:	cd09                	beqz	a0,20000c7a <dif_uart_watermark_rx_set+0x1a>
20000c62:	4691                	li	a3,4
20000c64:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000c66:	00b6eb63          	bltu	a3,a1,20000c7c <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000c6a:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c6c:	4d54                	lw	a3,28(a0)
20000c6e:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20000c70:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000c72:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c74:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c76:	cd4c                	sw	a1,28(a0)
20000c78:	a011                	j	20000c7c <dif_uart_watermark_rx_set+0x1c>
20000c7a:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c7c:	8532                	mv	a0,a2
20000c7e:	8082                	ret

20000c80 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000c80:	cd11                	beqz	a0,20000c9c <dif_uart_watermark_tx_set+0x1c>
20000c82:	468d                	li	a3,3
20000c84:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000c86:	00b6ec63          	bltu	a3,a1,20000c9e <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000c8a:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c8c:	4d54                	lw	a3,28(a0)
20000c8e:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20000c90:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c92:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c96:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c98:	cd4c                	sw	a1,28(a0)
20000c9a:	a011                	j	20000c9e <dif_uart_watermark_tx_set+0x1e>
20000c9c:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c9e:	8532                	mv	a0,a2
20000ca0:	8082                	ret

20000ca2 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20000ca2:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20000ca4:	c51d                	beqz	a0,20000cd2 <dif_uart_bytes_send+0x30>
20000ca6:	c595                	beqz	a1,20000cd2 <dif_uart_bytes_send+0x30>
20000ca8:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000caa:	c20d                	beqz	a2,20000ccc <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000cac:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cb0:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000cb4:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000cb6:	eb19                	bnez	a4,20000ccc <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20000cb8:	00f58733          	add	a4,a1,a5
20000cbc:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20000cc0:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cc2:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000cc6:	fef613e3          	bne	a2,a5,20000cac <dif_uart_bytes_send+0xa>
20000cca:	87b2                	mv	a5,a2
20000ccc:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20000cce:	c291                	beqz	a3,20000cd2 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20000cd0:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20000cd2:	853a                	mv	a0,a4
20000cd4:	8082                	ret

20000cd6 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20000cd6:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20000cd8:	c515                	beqz	a0,20000d04 <dif_uart_bytes_receive+0x2e>
20000cda:	c60d                	beqz	a2,20000d04 <dif_uart_bytes_receive+0x2e>
20000cdc:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000cde:	cd99                	beqz	a1,20000cfc <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000ce0:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ce2:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000ce4:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000ce8:	eb91                	bnez	a5,20000cfc <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cea:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000cec:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20000cf0:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000cf2:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000cf6:	ff0595e3          	bne	a1,a6,20000ce0 <dif_uart_bytes_receive+0xa>
20000cfa:	882e                	mv	a6,a1
20000cfc:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20000cfe:	c299                	beqz	a3,20000d04 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20000d00:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20000d04:	853a                	mv	a0,a4
20000d06:	8082                	ret

20000d08 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20000d08:	cd19                	beqz	a0,20000d26 <dif_uart_byte_send_polled+0x1e>
20000d0a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d0c:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d0e:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20000d10:	fef5                	bnez	a3,20000d0c <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d12:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d14:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000d16:	e299                	bnez	a3,20000d1c <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d18:	ce0c                	sw	a1,24(a2)
20000d1a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d1c:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d1e:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20000d20:	dd75                	beqz	a0,20000d1c <dif_uart_byte_send_polled+0x14>
20000d22:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20000d24:	8082                	ret
20000d26:	4509                	li	a0,2
20000d28:	8082                	ret

20000d2a <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20000d2a:	862a                	mv	a2,a0
20000d2c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20000d2e:	c205                	beqz	a2,20000d4e <dif_uart_byte_receive_polled+0x24>
20000d30:	cd99                	beqz	a1,20000d4e <dif_uart_byte_receive_polled+0x24>
20000d32:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d34:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d36:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20000d3a:	fd6d                	bnez	a0,20000d34 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d3c:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d3e:	02057693          	andi	a3,a0,32
20000d42:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000d44:	e689                	bnez	a3,20000d4e <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d46:	4a50                	lw	a2,20(a2)
20000d48:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000d4a:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20000d4e:	8082                	ret

20000d50 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000d50:	862a                	mv	a2,a0
20000d52:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20000d54:	ca09                	beqz	a2,20000d66 <dif_uart_rx_bytes_available+0x16>
20000d56:	c981                	beqz	a1,20000d66 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000d58:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d5a:	5110                	lw	a2,32(a0)
20000d5c:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000d5e:	8241                	srli	a2,a2,0x10
20000d60:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20000d64:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20000d66:	8082                	ret

20000d68 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000d68:	862a                	mv	a2,a0
20000d6a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20000d6c:	ce01                	beqz	a2,20000d84 <dif_uart_tx_bytes_available+0x1c>
20000d6e:	c999                	beqz	a1,20000d84 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000d70:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d72:	5110                	lw	a2,32(a0)
20000d74:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20000d76:	03f67613          	andi	a2,a2,63
20000d7a:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20000d7e:	40c68633          	sub	a2,a3,a2
20000d82:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20000d84:	8082                	ret

20000d86 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20000d86:	c11d                	beqz	a0,20000dac <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000d88:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d8a:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000d8c:	ffd5f693          	andi	a3,a1,-3
20000d90:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000d94:	fff58713          	addi	a4,a1,-1
20000d98:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000d9a:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000d9e:	00f77463          	bgeu	a4,a5,20000da6 <dif_uart_fifo_reset+0x20>
20000da2:	0025e593          	ori	a1,a1,2
20000da6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000da8:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000daa:	8082                	ret
20000dac:	4509                	li	a0,2
20000dae:	8082                	ret

20000db0 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20000db0:	c515                	beqz	a0,20000ddc <dif_uart_loopback_set+0x2c>
20000db2:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20000db4:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20000db6:	0015b593          	seqz	a1,a1
20000dba:	4715                	li	a4,5
20000dbc:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dc0:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20000dc2:	00163613          	seqz	a2,a2
20000dc6:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000dc8:	00b797b3          	sll	a5,a5,a1
20000dcc:	fff7c793          	not	a5,a5
20000dd0:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000dd2:	00b615b3          	sll	a1,a2,a1
20000dd6:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dd8:	c54c                	sw	a1,12(a0)
20000dda:	a011                	j	20000dde <dif_uart_loopback_set+0x2e>
20000ddc:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000dde:	8536                	mv	a0,a3
20000de0:	8082                	ret

20000de2 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20000de2:	862a                	mv	a2,a0
20000de4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20000de6:	ca11                	beqz	a2,20000dfa <dif_uart_enable_rx_timeout+0x18>
20000de8:	0185d693          	srli	a3,a1,0x18
20000dec:	e699                	bnez	a3,20000dfa <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000dee:	4210                	lw	a2,0(a2)
20000df0:	4501                	li	a0,0
20000df2:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000df6:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000df8:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20000dfa:	8082                	ret

20000dfc <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20000dfc:	c511                	beqz	a0,20000e08 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000dfe:	410c                	lw	a1,0(a0)
20000e00:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e02:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20000e06:	8082                	ret
20000e08:	4509                	li	a0,2
20000e0a:	8082                	ret

20000e0c <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20000e0c:	86aa                	mv	a3,a0
20000e0e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20000e10:	ce99                	beqz	a3,20000e2e <dif_uart_get_rx_timeout+0x22>
20000e12:	cd91                	beqz	a1,20000e2e <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20000e14:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e16:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20000e18:	fff6c513          	not	a0,a3
20000e1c:	817d                	srli	a0,a0,0x1f
20000e1e:	c188                	sw	a0,0(a1)
20000e20:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20000e22:	c611                	beqz	a2,20000e2e <dif_uart_get_rx_timeout+0x22>
20000e24:	010005b7          	lui	a1,0x1000
20000e28:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000e2a:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20000e2c:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20000e2e:	8082                	ret

20000e30 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20000e30:	1141                	addi	sp,sp,-16
20000e32:	c606                	sw	ra,12(sp)
20000e34:	c422                	sw	s0,8(sp)
20000e36:	6511                	lui	a0,0x4
20000e38:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000e3c:	2221                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20000e3e:	00001517          	auipc	a0,0x1
20000e42:	92a50513          	addi	a0,a0,-1750 # 20001768 <kDeviceType>
20000e46:	4108                	lw	a0,0(a0)
20000e48:	c111                	beqz	a0,20000e4c <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000e4a:	280d                	jal	20000e7c <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000e4c:	24b1                	jal	20001098 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20000e4e:	00001597          	auipc	a1,0x1
20000e52:	98a58593          	addi	a1,a1,-1654 # 200017d8 <kTestConfig>
20000e56:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000e5a:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000e5c:	c191                	beqz	a1,20000e60 <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20000e5e:	2839                	jal	20000e7c <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20000e60:	2245                	jal	20001000 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20000e62:	e409                	bnez	s0,20000e6c <main+0x3c>
20000e64:	6531                	lui	a0,0xc
20000e66:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000e6a:	a019                	j	20000e70 <main+0x40>
20000e6c:	6525                	lui	a0,0x9
20000e6e:	0535                	addi	a0,a0,13
20000e70:	28d1                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20000e72:	4505                	li	a0,1
20000e74:	4422                	lw	s0,8(sp)
20000e76:	40b2                	lw	ra,12(sp)
20000e78:	0141                	addi	sp,sp,16
20000e7a:	8082                	ret

20000e7c <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000e7c:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000e7e:	ce06                	sw	ra,28(sp)
20000e80:	cc22                	sw	s0,24(sp)
20000e82:	ca26                	sw	s1,20(sp)
20000e84:	effff597          	auipc	a1,0xeffff
20000e88:	18858593          	addi	a1,a1,392 # 1000000c <uart0>
20000e8c:	40000537          	lui	a0,0x40000
20000e90:	3ee1                	jal	20000a68 <dif_uart_init>
20000e92:	00001497          	auipc	s1,0x1
20000e96:	90648493          	addi	s1,s1,-1786 # 20001798 <kDeviceLogBypassUartAddress>
20000e9a:	c915                	beqz	a0,20000ece <init_uart+0x52>
20000e9c:	4088                	lw	a0,0(s1)
20000e9e:	c909                	beqz	a0,20000eb0 <init_uart+0x34>
20000ea0:	e000f517          	auipc	a0,0xe000f
20000ea4:	1d850513          	addi	a0,a0,472 # 10078 <init_uart.kLogFields>
20000ea8:	4581                	li	a1,0
20000eaa:	ec4ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000eae:	a821                	j	20000ec6 <init_uart+0x4a>
20000eb0:	00001597          	auipc	a1,0x1
20000eb4:	86858593          	addi	a1,a1,-1944 # 20001718 <kDifUartFifoSizeBytes+0x4>
20000eb8:	840a                	mv	s0,sp
20000eba:	4651                	li	a2,20
20000ebc:	8522                	mv	a0,s0
20000ebe:	22b9                	jal	2000100c <memcpy>
20000ec0:	8522                	mv	a0,s0
20000ec2:	e02ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000ec6:	6531                	lui	a0,0xc
20000ec8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ecc:	28a5                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20000ece:	00001517          	auipc	a0,0x1
20000ed2:	8ba50513          	addi	a0,a0,-1862 # 20001788 <kUartBaudrate>
20000ed6:	4108                	lw	a0,0(a0)
20000ed8:	00001597          	auipc	a1,0x1
20000edc:	8a058593          	addi	a1,a1,-1888 # 20001778 <kClockFreqPeripheralHz>
20000ee0:	418c                	lw	a1,0(a1)
20000ee2:	c02a                	sw	a0,0(sp)
20000ee4:	c22e                	sw	a1,4(sp)
20000ee6:	4505                	li	a0,1
20000ee8:	c42a                	sw	a0,8(sp)
20000eea:	c62a                	sw	a0,12(sp)
20000eec:	effff517          	auipc	a0,0xeffff
20000ef0:	12050513          	addi	a0,a0,288 # 1000000c <uart0>
20000ef4:	858a                	mv	a1,sp
20000ef6:	3641                	jal	20000a76 <dif_uart_configure>
20000ef8:	c915                	beqz	a0,20000f2c <init_uart+0xb0>
20000efa:	4088                	lw	a0,0(s1)
20000efc:	c909                	beqz	a0,20000f0e <init_uart+0x92>
20000efe:	e000f517          	auipc	a0,0xe000f
20000f02:	18e50513          	addi	a0,a0,398 # 1008c <init_uart.kLogFields.2>
20000f06:	4581                	li	a1,0
20000f08:	e66ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000f0c:	a821                	j	20000f24 <init_uart+0xa8>
20000f0e:	00001597          	auipc	a1,0x1
20000f12:	81e58593          	addi	a1,a1,-2018 # 2000172c <kDifUartFifoSizeBytes+0x18>
20000f16:	840a                	mv	s0,sp
20000f18:	4651                	li	a2,20
20000f1a:	8522                	mv	a0,s0
20000f1c:	28c5                	jal	2000100c <memcpy>
20000f1e:	8522                	mv	a0,s0
20000f20:	da4ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000f24:	6531                	lui	a0,0xc
20000f26:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000f2a:	2829                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
20000f2c:	effff517          	auipc	a0,0xeffff
20000f30:	0e050513          	addi	a0,a0,224 # 1000000c <uart0>
20000f34:	e8cff0ef          	jal	ra,200005c0 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000f38:	44d2                	lw	s1,20(sp)
20000f3a:	4462                	lw	s0,24(sp)
20000f3c:	40f2                	lw	ra,28(sp)
20000f3e:	6105                	addi	sp,sp,32
20000f40:	8082                	ret
	...

20000f44 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000f44:	1101                	addi	sp,sp,-32
20000f46:	ce06                	sw	ra,28(sp)
20000f48:	cc22                	sw	s0,24(sp)
20000f4a:	65b1                	lui	a1,0xc
20000f4c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000f50:	02b50163          	beq	a0,a1,20000f72 <test_status_set+0x2e>
20000f54:	65a5                	lui	a1,0x9
20000f56:	05b5                	addi	a1,a1,13
20000f58:	02b50f63          	beq	a0,a1,20000f96 <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000f5c:	00001597          	auipc	a1,0x1
20000f60:	83858593          	addi	a1,a1,-1992 # 20001794 <kDeviceTestStatusAddress>
20000f64:	418c                	lw	a1,0(a1)
20000f66:	c191                	beqz	a1,20000f6a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f68:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000f6a:	4462                	lw	s0,24(sp)
20000f6c:	40f2                	lw	ra,28(sp)
20000f6e:	6105                	addi	sp,sp,32
20000f70:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000f72:	00001517          	auipc	a0,0x1
20000f76:	82650513          	addi	a0,a0,-2010 # 20001798 <kDeviceLogBypassUartAddress>
20000f7a:	4108                	lw	a0,0(a0)
20000f7c:	ed1d                	bnez	a0,20000fba <test_status_set+0x76>
20000f7e:	00000597          	auipc	a1,0x0
20000f82:	7d658593          	addi	a1,a1,2006 # 20001754 <kDifUartFifoSizeBytes+0x40>
20000f86:	840a                	mv	s0,sp
20000f88:	4651                	li	a2,20
20000f8a:	8522                	mv	a0,s0
20000f8c:	2041                	jal	2000100c <memcpy>
20000f8e:	8522                	mv	a0,s0
20000f90:	d34ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000f94:	a815                	j	20000fc8 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000f96:	00001517          	auipc	a0,0x1
20000f9a:	80250513          	addi	a0,a0,-2046 # 20001798 <kDeviceLogBypassUartAddress>
20000f9e:	4108                	lw	a0,0(a0)
20000fa0:	ed15                	bnez	a0,20000fdc <test_status_set+0x98>
20000fa2:	00000597          	auipc	a1,0x0
20000fa6:	79e58593          	addi	a1,a1,1950 # 20001740 <kDifUartFifoSizeBytes+0x2c>
20000faa:	840a                	mv	s0,sp
20000fac:	4651                	li	a2,20
20000fae:	8522                	mv	a0,s0
20000fb0:	28b1                	jal	2000100c <memcpy>
20000fb2:	8522                	mv	a0,s0
20000fb4:	d10ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000fb8:	a80d                	j	20000fea <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000fba:	e000f517          	auipc	a0,0xe000f
20000fbe:	0fa50513          	addi	a0,a0,250 # 100b4 <test_status_set.kLogFields.2>
20000fc2:	4581                	li	a1,0
20000fc4:	daaff0ef          	jal	ra,2000056e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000fc8:	00000517          	auipc	a0,0x0
20000fcc:	7cc50513          	addi	a0,a0,1996 # 20001794 <kDeviceTestStatusAddress>
20000fd0:	4108                	lw	a0,0(a0)
20000fd2:	c50d                	beqz	a0,20000ffc <test_status_set+0xb8>
20000fd4:	65b1                	lui	a1,0xc
20000fd6:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20000fda:	a005                	j	20000ffa <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000fdc:	e000f517          	auipc	a0,0xe000f
20000fe0:	0c450513          	addi	a0,a0,196 # 100a0 <test_status_set.kLogFields>
20000fe4:	4581                	li	a1,0
20000fe6:	d88ff0ef          	jal	ra,2000056e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000fea:	00000517          	auipc	a0,0x0
20000fee:	7aa50513          	addi	a0,a0,1962 # 20001794 <kDeviceTestStatusAddress>
20000ff2:	4108                	lw	a0,0(a0)
20000ff4:	c501                	beqz	a0,20000ffc <test_status_set+0xb8>
20000ff6:	65a5                	lui	a1,0x9
20000ff8:	05b5                	addi	a1,a1,13
20000ffa:	c10c                	sw	a1,0(a0)
20000ffc:	a04ff0ef          	jal	ra,20000200 <abort>

20001000 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20001000:	8082                	ret
	...

20001004 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20001004:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20001006:	8082                	ret

20001008 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20001008:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
2000100a:	8082                	ret

2000100c <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
2000100c:	ca11                	beqz	a2,20001020 <memcpy+0x14>
2000100e:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20001010:	00058703          	lb	a4,0(a1) # 9000 <_stack_size+0x7000>
20001014:	00e68023          	sb	a4,0(a3) # 80000000 <_data_init_start+0x5fffe414>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20001018:	167d                	addi	a2,a2,-1
2000101a:	0685                	addi	a3,a3,1
2000101c:	0585                	addi	a1,a1,1
2000101e:	fa6d                	bnez	a2,20001010 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20001020:	8082                	ret

20001022 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001022:	c619                	beqz	a2,20001030 <memset+0xe>
20001024:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20001026:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
2000102a:	167d                	addi	a2,a2,-1
2000102c:	0685                	addi	a3,a3,1
2000102e:	fe65                	bnez	a2,20001026 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20001030:	8082                	ret

20001032 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20001032:	ce09                	beqz	a2,2000104c <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20001034:	00054683          	lbu	a3,0(a0)
20001038:	0005c703          	lbu	a4,0(a1)
2000103c:	00e6ea63          	bltu	a3,a4,20001050 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20001040:	00d76b63          	bltu	a4,a3,20001056 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20001044:	167d                	addi	a2,a2,-1
20001046:	0585                	addi	a1,a1,1
20001048:	0505                	addi	a0,a0,1
2000104a:	f66d                	bnez	a2,20001034 <memcmp+0x2>
2000104c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
2000104e:	8082                	ret
20001050:	fd600513          	li	a0,-42
20001054:	8082                	ret
20001056:	02a00513          	li	a0,42
2000105a:	8082                	ret

2000105c <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000105c:	ca11                	beqz	a2,20001070 <memchr+0x14>
2000105e:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20001062:	00054683          	lbu	a3,0(a0)
20001066:	00b68663          	beq	a3,a1,20001072 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
2000106a:	167d                	addi	a2,a2,-1
2000106c:	0505                	addi	a0,a0,1
2000106e:	fa75                	bnez	a2,20001062 <memchr+0x6>
20001070:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20001072:	8082                	ret

20001074 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001074:	ce09                	beqz	a2,2000108e <memrchr+0x1a>
20001076:	fff50693          	addi	a3,a0,-1
2000107a:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
2000107e:	00c68733          	add	a4,a3,a2
20001082:	00074703          	lbu	a4,0(a4)
20001086:	00b70663          	beq	a4,a1,20001092 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
2000108a:	167d                	addi	a2,a2,-1
2000108c:	fa6d                	bnez	a2,2000107e <memrchr+0xa>
2000108e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20001090:	8082                	ret
20001092:	9532                	add	a0,a0,a2
20001094:	157d                	addi	a0,a0,-1
20001096:	8082                	ret

20001098 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rstmgr_smoketest.c:16

static dif_rstmgr_t rstmgr;

const test_config_t kTestConfig;

bool test_main(void) {
20001098:	7179                	addi	sp,sp,-48
2000109a:	d606                	sw	ra,44(sp)
2000109c:	d422                	sw	s0,40(sp)
2000109e:	d226                	sw	s1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rstmgr_smoketest.c:20
  dif_rstmgr_params_t params = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_RSTMGR_AON_BASE_ADDR),
  };
  CHECK(dif_rstmgr_init(params, &rstmgr) == kDifRstmgrOk);
200010a0:	effff597          	auipc	a1,0xeffff
200010a4:	f7058593          	addi	a1,a1,-144 # 10000010 <rstmgr>
200010a8:	40410537          	lui	a0,0x40410
200010ac:	20d1                	jal	20001170 <dif_rstmgr_init>
200010ae:	00000497          	auipc	s1,0x0
200010b2:	6ea48493          	addi	s1,s1,1770 # 20001798 <kDeviceLogBypassUartAddress>
200010b6:	c915                	beqz	a0,200010ea <test_main+0x52>
200010b8:	4088                	lw	a0,0(s1)
200010ba:	c909                	beqz	a0,200010cc <test_main+0x34>
200010bc:	e000f517          	auipc	a0,0xe000f
200010c0:	00c50513          	addi	a0,a0,12 # 100c8 <test_main.kLogFields>
200010c4:	4581                	li	a1,0
200010c6:	ca8ff0ef          	jal	ra,2000056e <base_log_internal_dv>
200010ca:	a821                	j	200010e2 <test_main+0x4a>
200010cc:	00000597          	auipc	a1,0x0
200010d0:	6d058593          	addi	a1,a1,1744 # 2000179c <kDeviceLogBypassUartAddress+0x4>
200010d4:	0800                	addi	s0,sp,16
200010d6:	4651                	li	a2,20
200010d8:	8522                	mv	a0,s0
200010da:	3f0d                	jal	2000100c <memcpy>
200010dc:	8522                	mv	a0,s0
200010de:	be6ff0ef          	jal	ra,200004c4 <base_log_internal_core>
200010e2:	6531                	lui	a0,0xc
200010e4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200010e8:	3db1                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rstmgr_smoketest.c:23

  dif_rstmgr_reset_info_bitfield_t info;
  CHECK(dif_rstmgr_reset_info_get(&rstmgr, &info) == kDifRstmgrOk);
200010ea:	effff517          	auipc	a0,0xeffff
200010ee:	f2650513          	addi	a0,a0,-218 # 10000010 <rstmgr>
200010f2:	006c                	addi	a1,sp,12
200010f4:	28f9                	jal	200011d2 <dif_rstmgr_reset_info_get>
200010f6:	c915                	beqz	a0,2000112a <test_main+0x92>
200010f8:	4088                	lw	a0,0(s1)
200010fa:	c909                	beqz	a0,2000110c <test_main+0x74>
200010fc:	e000f517          	auipc	a0,0xe000f
20001100:	fe050513          	addi	a0,a0,-32 # 100dc <test_main.kLogFields.2>
20001104:	4581                	li	a1,0
20001106:	c68ff0ef          	jal	ra,2000056e <base_log_internal_dv>
2000110a:	a821                	j	20001122 <test_main+0x8a>
2000110c:	00000597          	auipc	a1,0x0
20001110:	6a458593          	addi	a1,a1,1700 # 200017b0 <kDeviceLogBypassUartAddress+0x18>
20001114:	0800                	addi	s0,sp,16
20001116:	4651                	li	a2,20
20001118:	8522                	mv	a0,s0
2000111a:	3dcd                	jal	2000100c <memcpy>
2000111c:	8522                	mv	a0,s0
2000111e:	ba6ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001122:	6531                	lui	a0,0xc
20001124:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001128:	3d31                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rstmgr_smoketest.c:26

  // Only POR reset cause should be set (assuming normal power-up).
  CHECK((info & kDifRstmgrResetInfoPor) == info);
2000112a:	4532                	lw	a0,12(sp)
2000112c:	4589                	li	a1,2
2000112e:	02b56b63          	bltu	a0,a1,20001164 <test_main+0xcc>
20001132:	4088                	lw	a0,0(s1)
20001134:	c909                	beqz	a0,20001146 <test_main+0xae>
20001136:	e000f517          	auipc	a0,0xe000f
2000113a:	fba50513          	addi	a0,a0,-70 # 100f0 <test_main.kLogFields.5>
2000113e:	4581                	li	a1,0
20001140:	c2eff0ef          	jal	ra,2000056e <base_log_internal_dv>
20001144:	a821                	j	2000115c <test_main+0xc4>
20001146:	00000597          	auipc	a1,0x0
2000114a:	67e58593          	addi	a1,a1,1662 # 200017c4 <kDeviceLogBypassUartAddress+0x2c>
2000114e:	0800                	addi	s0,sp,16
20001150:	4651                	li	a2,20
20001152:	8522                	mv	a0,s0
20001154:	3d65                	jal	2000100c <memcpy>
20001156:	8522                	mv	a0,s0
20001158:	b6cff0ef          	jal	ra,200004c4 <base_log_internal_core>
2000115c:	6531                	lui	a0,0xc
2000115e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001162:	33cd                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rstmgr_smoketest.c:28

  return true;
20001164:	4505                	li	a0,1
20001166:	5492                	lw	s1,36(sp)
20001168:	5422                	lw	s0,40(sp)
2000116a:	50b2                	lw	ra,44(sp)
2000116c:	6145                	addi	sp,sp,48
2000116e:	8082                	ret

20001170 <dif_rstmgr_init>:
dif_rstmgr_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:92
  mmio_region_write32(base_addr, RSTMGR_RESET_INFO_REG_OFFSET, UINT32_MAX);
}

dif_rstmgr_result_t dif_rstmgr_init(dif_rstmgr_params_t params,
                                    dif_rstmgr_t *handle) {
  if (handle == NULL) {
20001170:	c581                	beqz	a1,20001178 <dif_rstmgr_init+0x8>
20001172:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:96
    return kDifRstmgrBadArg;
  }

  handle->params = params;
20001174:	c188                	sw	a0,0(a1)
20001176:	a011                	j	2000117a <dif_rstmgr_init+0xa>
20001178:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:99

  return kDifRstmgrOk;
}
2000117a:	8532                	mv	a0,a2
2000117c:	8082                	ret

2000117e <dif_rstmgr_reset>:
dif_rstmgr_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:102

dif_rstmgr_result_t dif_rstmgr_reset(const dif_rstmgr_t *handle) {
  if (handle == NULL) {
2000117e:	c519                	beqz	a0,2000118c <dif_rstmgr_reset+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:106
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
20001180:	410c                	lw	a1,0(a0)
20001182:	4501                	li	a0,0
20001184:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001186:	c190                	sw	a2,0(a1)
20001188:	d590                	sw	a2,40(a1)
dif_rstmgr_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:114

  // Set bits to stop holding all peripherals in the reset state.
  mmio_region_write32(base_addr, RSTMGR_SW_RST_CTRL_N_REG_OFFSET, UINT32_MAX);

  return kDifRstmgrOk;
}
2000118a:	8082                	ret
2000118c:	4509                	li	a0,2
2000118e:	8082                	ret

20001190 <dif_rstmgr_reset_lock>:
dif_rstmgr_reset_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:117

dif_rstmgr_result_t dif_rstmgr_reset_lock(const dif_rstmgr_t *handle,
                                          dif_rstmgr_peripheral_t peripheral) {
20001190:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:118
  if (handle == NULL || peripheral >= RSTMGR_PARAM_NUM_SW_RESETS) {
20001192:	cd01                	beqz	a0,200011aa <dif_rstmgr_reset_lock+0x1a>
20001194:	4699                	li	a3,6
20001196:	00b6ea63          	bltu	a3,a1,200011aa <dif_rstmgr_reset_lock+0x1a>
2000119a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:122
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
2000119c:	4108                	lw	a0,0(a0)
2000119e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200011a0:	00b695b3          	sll	a1,a3,a1
200011a4:	fff5c593          	not	a1,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011a8:	d14c                	sw	a1,36(a0)
dif_rstmgr_reset_lock():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:130
  uint32_t bitfield = bitfield_bit32_write(UINT32_MAX, peripheral, false);

  mmio_region_write32(base_addr, RSTMGR_SW_RST_REGEN_REG_OFFSET, bitfield);

  return kDifRstmgrOk;
}
200011aa:	8532                	mv	a0,a2
200011ac:	8082                	ret

200011ae <dif_rstmgr_reset_is_locked>:
dif_rstmgr_reset_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:134

dif_rstmgr_result_t dif_rstmgr_reset_is_locked(
    const dif_rstmgr_t *handle, dif_rstmgr_peripheral_t peripheral,
    bool *is_locked) {
200011ae:	86aa                	mv	a3,a0
200011b0:	4719                	li	a4,6
200011b2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:135
  if (handle == NULL || is_locked == NULL ||
200011b4:	00b76e63          	bltu	a4,a1,200011d0 <dif_rstmgr_reset_is_locked+0x22>
200011b8:	ce81                	beqz	a3,200011d0 <dif_rstmgr_reset_is_locked+0x22>
200011ba:	ca19                	beqz	a2,200011d0 <dif_rstmgr_reset_is_locked+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:140
      peripheral >= RSTMGR_PARAM_NUM_SW_RESETS) {
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
200011bc:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011be:	5154                	lw	a3,36(a0)
200011c0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200011c2:	00b6d5b3          	srl	a1,a3,a1
200011c6:	8985                	andi	a1,a1,1
200011c8:	0015b593          	seqz	a1,a1
dif_rstmgr_reset_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:141
  *is_locked = rstmgr_software_reset_is_locked(base_addr, peripheral);
200011cc:	00b60023          	sb	a1,0(a2) # 10000 <_dv_log_offset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:144

  return kDifRstmgrOk;
}
200011d0:	8082                	ret

200011d2 <dif_rstmgr_reset_info_get>:
dif_rstmgr_reset_info_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:147

dif_rstmgr_result_t dif_rstmgr_reset_info_get(
    const dif_rstmgr_t *handle, dif_rstmgr_reset_info_bitfield_t *info) {
200011d2:	862a                	mv	a2,a0
200011d4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:148
  if (handle == NULL || info == NULL) {
200011d6:	c611                	beqz	a2,200011e2 <dif_rstmgr_reset_info_get+0x10>
200011d8:	c589                	beqz	a1,200011e2 <dif_rstmgr_reset_info_get+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:152
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
200011da:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011dc:	4110                	lw	a2,0(a0)
200011de:	4501                	li	a0,0
dif_rstmgr_reset_info_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:153
  *info = mmio_region_read32(base_addr, RSTMGR_RESET_INFO_REG_OFFSET);
200011e0:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:156

  return kDifRstmgrOk;
}
200011e2:	8082                	ret

200011e4 <dif_rstmgr_reset_info_clear>:
dif_rstmgr_reset_info_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:159

dif_rstmgr_result_t dif_rstmgr_reset_info_clear(const dif_rstmgr_t *handle) {
  if (handle == NULL) {
200011e4:	c511                	beqz	a0,200011f0 <dif_rstmgr_reset_info_clear+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:163
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
200011e6:	410c                	lw	a1,0(a0)
200011e8:	4501                	li	a0,0
200011ea:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200011ec:	c190                	sw	a2,0(a1)
dif_rstmgr_reset_info_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:168

  rstmgr_reset_info_clear(base_addr);

  return kDifRstmgrOk;
}
200011ee:	8082                	ret
200011f0:	4509                	li	a0,2
200011f2:	8082                	ret

200011f4 <dif_rstmgr_alert_info_set_enabled>:
dif_rstmgr_alert_info_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:172

dif_rstmgr_result_t dif_rstmgr_alert_info_set_enabled(
    const dif_rstmgr_t *handle, dif_rstmgr_toggle_t state) {
  if (handle == NULL) {
200011f4:	c519                	beqz	a0,20001202 <dif_rstmgr_alert_info_set_enabled+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:176
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
200011f6:	4110                	lw	a2,0(a0)
200011f8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:178

  uint32_t enabled = (state == kDifRstmgrToggleEnabled) ? 0x1 : 0x0;
200011fa:	0015b593          	seqz	a1,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011fe:	c60c                	sw	a1,8(a2)
dif_rstmgr_alert_info_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:186
  // field is only relevant during the crash dump read operation, and is
  // set by the caller and not the hardware, so it is safe to clobber it.
  mmio_region_write32(base_addr, RSTMGR_ALERT_INFO_CTRL_REG_OFFSET, enabled);

  return kDifRstmgrOk;
}
20001200:	8082                	ret
20001202:	4509                	li	a0,2
20001204:	8082                	ret

20001206 <dif_rstmgr_alert_info_get_enabled>:
dif_rstmgr_alert_info_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:189

dif_rstmgr_result_t dif_rstmgr_alert_info_get_enabled(
    const dif_rstmgr_t *handle, dif_rstmgr_toggle_t *state) {
20001206:	862a                	mv	a2,a0
20001208:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:190
  if (handle == NULL || state == NULL) {
2000120a:	ca09                	beqz	a2,2000121c <dif_rstmgr_alert_info_get_enabled+0x16>
2000120c:	c981                	beqz	a1,2000121c <dif_rstmgr_alert_info_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:194
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
2000120e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001210:	4510                	lw	a2,8(a0)
20001212:	4501                	li	a0,0
20001214:	fff64613          	not	a2,a2
dif_rstmgr_alert_info_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:200

  uint32_t reg =
      mmio_region_read32(base_addr, RSTMGR_ALERT_INFO_CTRL_REG_OFFSET);
  bool enabled = bitfield_bit32_read(reg, RSTMGR_ALERT_INFO_CTRL_EN_BIT);

  *state = enabled ? kDifRstmgrToggleEnabled : kDifRstmgrToggleDisabled;
20001218:	8a05                	andi	a2,a2,1
2000121a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:203

  return kDifRstmgrOk;
}
2000121c:	8082                	ret

2000121e <dif_rstmgr_alert_info_dump_read>:
dif_rstmgr_alert_info_dump_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:207

dif_rstmgr_result_t dif_rstmgr_alert_info_dump_read(
    const dif_rstmgr_t *handle, dif_rstmgr_alert_info_dump_segment_t *dump,
    size_t dump_size, size_t *segments_read) {
2000121e:	872a                	mv	a4,a0
20001220:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:208
  if (handle == NULL || dump == NULL || segments_read == NULL) {
20001222:	c329                	beqz	a4,20001264 <dif_rstmgr_alert_info_dump_read+0x46>
20001224:	c1a1                	beqz	a1,20001264 <dif_rstmgr_alert_info_dump_read+0x46>
20001226:	ce9d                	beqz	a3,20001264 <dif_rstmgr_alert_info_dump_read+0x46>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:212
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
20001228:	00072883          	lw	a7,0(a4)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000122c:	00c8a803          	lw	a6,12(a7)
20001230:	4505                	li	a0,1
dif_rstmgr_alert_info_dump_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:219
  // The actual crash dump size (can be smaller than `dump_size`).
  size_t dump_size_actual =
      mmio_region_read32(base_addr, RSTMGR_ALERT_INFO_ATTR_REG_OFFSET);

  // Partial crash dump read is not allowed.
  if (dump_size < dump_size_actual) {
20001232:	03066963          	bltu	a2,a6,20001264 <dif_rstmgr_alert_info_dump_read+0x46>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001236:	0088a503          	lw	a0,8(a7)
dif_rstmgr_alert_info_dump_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:227

  uint32_t control_reg =
      mmio_region_read32(base_addr, RSTMGR_ALERT_INFO_CTRL_REG_OFFSET);

  // Read the entire alert info crash dump, one 32bit data segment at the time.
  for (int i = 0; i < dump_size_actual; ++i) {
2000123a:	02080263          	beqz	a6,2000125e <dif_rstmgr_alert_info_dump_read+0x40>
2000123e:	4601                	li	a2,0
20001240:	8742                	mv	a4,a6
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001242:	f0f57513          	andi	a0,a0,-241
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001246:	0f067793          	andi	a5,a2,240
2000124a:	8d5d                	or	a0,a0,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000124c:	00a8a423          	sw	a0,8(a7)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001250:	0108a783          	lw	a5,16(a7)
dif_rstmgr_alert_info_dump_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:236
    // Set the index of the 32bit data segment to be read at `i`.
    mmio_region_write32(base_addr, RSTMGR_ALERT_INFO_CTRL_REG_OFFSET,
                        control_reg);

    // Read the alert info crash dump 32bit data segment.
    dump[i] = mmio_region_read32(base_addr, RSTMGR_ALERT_INFO_REG_OFFSET);
20001254:	c19c                	sw	a5,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:227
  for (int i = 0; i < dump_size_actual; ++i) {
20001256:	177d                	addi	a4,a4,-1
20001258:	0591                	addi	a1,a1,4
2000125a:	0641                	addi	a2,a2,16
2000125c:	f37d                	bnez	a4,20001242 <dif_rstmgr_alert_info_dump_read+0x24>
2000125e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:239
  }

  *segments_read = dump_size_actual;
20001260:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:242

  return kDifRstmgrOk;
}
20001264:	8082                	ret

20001266 <dif_rstmgr_software_reset>:
dif_rstmgr_software_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:246

dif_rstmgr_software_reset_result_t dif_rstmgr_software_reset(
    const dif_rstmgr_t *handle, dif_rstmgr_peripheral_t peripheral,
    dif_rstmgr_software_reset_t reset) {
20001266:	86aa                	mv	a3,a0
20001268:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:247
  if (handle == NULL || peripheral >= RSTMGR_PARAM_NUM_SW_RESETS) {
2000126a:	c2b9                	beqz	a3,200012b0 <dif_rstmgr_software_reset+0x4a>
2000126c:	4719                	li	a4,6
2000126e:	04b76163          	bltu	a4,a1,200012b0 <dif_rstmgr_software_reset+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:251
    return kDifRstmgrSoftwareResetBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
20001272:	4294                	lw	a3,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001274:	52d8                	lw	a4,36(a3)
20001276:	4505                	li	a0,1
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001278:	00b515b3          	sll	a1,a0,a1
2000127c:	8f6d                	and	a4,a4,a1
dif_rstmgr_software_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:252
  if (rstmgr_software_reset_is_locked(base_addr, peripheral)) {
2000127e:	c30d                	beqz	a4,200012a0 <dif_rstmgr_software_reset+0x3a>
20001280:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:256
    return kDifRstmgrSoftwareResetLocked;
  }

  switch (reset) {
20001282:	00e60b63          	beq	a2,a4,20001298 <dif_rstmgr_software_reset+0x32>
20001286:	4705                	li	a4,1
20001288:	00e60e63          	beq	a2,a4,200012a4 <dif_rstmgr_software_reset+0x3e>
2000128c:	e215                	bnez	a2,200012b0 <dif_rstmgr_software_reset+0x4a>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000128e:	5688                	lw	a0,40(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001290:	fff5c613          	not	a2,a1
20001294:	8d71                	and	a0,a0,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001296:	d688                	sw	a0,40(a3)
20001298:	5690                	lw	a2,40(a3)
2000129a:	4501                	li	a0,0
2000129c:	8dd1                	or	a1,a1,a2
2000129e:	a801                	j	200012ae <dif_rstmgr_software_reset+0x48>
200012a0:	450d                	li	a0,3
dif_rstmgr_software_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:272
    default:
      return kDifRstmgrSoftwareResetError;
  }

  return kDifRstmgrSoftwareResetOk;
}
200012a2:	8082                	ret
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012a4:	5690                	lw	a2,40(a3)
200012a6:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200012a8:	fff5c593          	not	a1,a1
200012ac:	8df1                	and	a1,a1,a2
200012ae:	d68c                	sw	a1,40(a3)
dif_rstmgr_software_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:272
200012b0:	8082                	ret

200012b2 <dif_rstmgr_software_reset_is_held>:
dif_rstmgr_software_reset_is_held():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:276

dif_rstmgr_result_t dif_rstmgr_software_reset_is_held(
    const dif_rstmgr_t *handle, dif_rstmgr_peripheral_t peripheral,
    bool *asserted) {
200012b2:	86aa                	mv	a3,a0
200012b4:	4719                	li	a4,6
200012b6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:277
  if (handle == NULL || asserted == NULL ||
200012b8:	00b76e63          	bltu	a4,a1,200012d4 <dif_rstmgr_software_reset_is_held+0x22>
200012bc:	ce81                	beqz	a3,200012d4 <dif_rstmgr_software_reset_is_held+0x22>
200012be:	ca19                	beqz	a2,200012d4 <dif_rstmgr_software_reset_is_held+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:282
      peripheral >= RSTMGR_PARAM_NUM_SW_RESETS) {
    return kDifRstmgrBadArg;
  }

  mmio_region_t base_addr = handle->params.base_addr;
200012c0:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200012c2:	5514                	lw	a3,40(a0)
200012c4:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200012c6:	00b6d5b3          	srl	a1,a3,a1
200012ca:	8985                	andi	a1,a1,1
200012cc:	0015b593          	seqz	a1,a1
dif_rstmgr_software_reset_is_held():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:288

  uint32_t bitfield =
      mmio_region_read32(base_addr, RSTMGR_SW_RST_CTRL_N_REG_OFFSET);

  // When the bit is cleared - peripheral is held in reset.
  *asserted = !bitfield_bit32_read(bitfield, peripheral);
200012d0:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rstmgr.c:291

  return kDifRstmgrOk;
}
200012d4:	8082                	ret

200012d6 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200012d6:	88aa                	mv	a7,a0
200012d8:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200012da:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200012dc:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200012de:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200012e0:	20069963          	bnez	a3,200014f2 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200012e4:	200016b7          	lui	a3,0x20001
200012e8:	7dc68693          	addi	a3,a3,2012 # 200017dc <__clz_tab>
200012ec:	0cc5f063          	bgeu	a1,a2,200013ac <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200012f0:	6741                	lui	a4,0x10
200012f2:	0ae67663          	bgeu	a2,a4,2000139e <__udivdi3+0xc8>
200012f6:	0ff00713          	li	a4,255
200012fa:	00c73733          	sltu	a4,a4,a2
200012fe:	070e                	slli	a4,a4,0x3
20001300:	00e65533          	srl	a0,a2,a4
20001304:	96aa                	add	a3,a3,a0
20001306:	0006c683          	lbu	a3,0(a3)
2000130a:	02000513          	li	a0,32
2000130e:	9736                	add	a4,a4,a3
20001310:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001314:	00e50c63          	beq	a0,a4,2000132c <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001318:	00d797b3          	sll	a5,a5,a3
2000131c:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001320:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001324:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001328:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
2000132c:	01085893          	srli	a7,a6,0x10
20001330:	0315d7b3          	divu	a5,a1,a7
20001334:	01081613          	slli	a2,a6,0x10
20001338:	8241                	srli	a2,a2,0x10
2000133a:	01035713          	srli	a4,t1,0x10
2000133e:	0315f6b3          	remu	a3,a1,a7
20001342:	853e                	mv	a0,a5
20001344:	02f605b3          	mul	a1,a2,a5
20001348:	06c2                	slli	a3,a3,0x10
2000134a:	8f55                	or	a4,a4,a3
2000134c:	00b77c63          	bgeu	a4,a1,20001364 <__udivdi3+0x8e>
20001350:	9742                	add	a4,a4,a6
20001352:	fff78513          	addi	a0,a5,-1
20001356:	01076763          	bltu	a4,a6,20001364 <__udivdi3+0x8e>
2000135a:	00b77563          	bgeu	a4,a1,20001364 <__udivdi3+0x8e>
2000135e:	ffe78513          	addi	a0,a5,-2
20001362:	9742                	add	a4,a4,a6
20001364:	8f0d                	sub	a4,a4,a1
20001366:	031777b3          	remu	a5,a4,a7
2000136a:	0342                	slli	t1,t1,0x10
2000136c:	01035313          	srli	t1,t1,0x10
20001370:	03175733          	divu	a4,a4,a7
20001374:	07c2                	slli	a5,a5,0x10
20001376:	0067e333          	or	t1,a5,t1
2000137a:	02e606b3          	mul	a3,a2,a4
2000137e:	863a                	mv	a2,a4
20001380:	00d37b63          	bgeu	t1,a3,20001396 <__udivdi3+0xc0>
20001384:	9342                	add	t1,t1,a6
20001386:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000138a:	01036663          	bltu	t1,a6,20001396 <__udivdi3+0xc0>
2000138e:	00d37463          	bgeu	t1,a3,20001396 <__udivdi3+0xc0>
20001392:	ffe70613          	addi	a2,a4,-2
20001396:	0542                	slli	a0,a0,0x10
20001398:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000139a:	4581                	li	a1,0
2000139c:	a85d                	j	20001452 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
2000139e:	01000537          	lui	a0,0x1000
200013a2:	4741                	li	a4,16
200013a4:	f4a66ee3          	bltu	a2,a0,20001300 <__udivdi3+0x2a>
200013a8:	4761                	li	a4,24
200013aa:	bf99                	j	20001300 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
200013ac:	e601                	bnez	a2,200013b4 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
200013ae:	4705                	li	a4,1
200013b0:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200013b4:	6741                	lui	a4,0x10
200013b6:	08e87f63          	bgeu	a6,a4,20001454 <__udivdi3+0x17e>
200013ba:	0ff00713          	li	a4,255
200013be:	01077363          	bgeu	a4,a6,200013c4 <__udivdi3+0xee>
200013c2:	4521                	li	a0,8
200013c4:	00a85733          	srl	a4,a6,a0
200013c8:	96ba                	add	a3,a3,a4
200013ca:	0006c703          	lbu	a4,0(a3)
200013ce:	02000613          	li	a2,32
200013d2:	972a                	add	a4,a4,a0
200013d4:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
200013d8:	08e61563          	bne	a2,a4,20001462 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
200013dc:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
200013e0:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
200013e2:	01085893          	srli	a7,a6,0x10
200013e6:	01081613          	slli	a2,a6,0x10
200013ea:	8241                	srli	a2,a2,0x10
200013ec:	01035713          	srli	a4,t1,0x10
200013f0:	0317f6b3          	remu	a3,a5,a7
200013f4:	0317d7b3          	divu	a5,a5,a7
200013f8:	06c2                	slli	a3,a3,0x10
200013fa:	8f55                	or	a4,a4,a3
200013fc:	02f60e33          	mul	t3,a2,a5
20001400:	853e                	mv	a0,a5
20001402:	01c77c63          	bgeu	a4,t3,2000141a <__udivdi3+0x144>
20001406:	9742                	add	a4,a4,a6
20001408:	fff78513          	addi	a0,a5,-1
2000140c:	01076763          	bltu	a4,a6,2000141a <__udivdi3+0x144>
20001410:	01c77563          	bgeu	a4,t3,2000141a <__udivdi3+0x144>
20001414:	ffe78513          	addi	a0,a5,-2
20001418:	9742                	add	a4,a4,a6
2000141a:	41c70733          	sub	a4,a4,t3
2000141e:	031777b3          	remu	a5,a4,a7
20001422:	0342                	slli	t1,t1,0x10
20001424:	01035313          	srli	t1,t1,0x10
20001428:	03175733          	divu	a4,a4,a7
2000142c:	07c2                	slli	a5,a5,0x10
2000142e:	0067e333          	or	t1,a5,t1
20001432:	02e606b3          	mul	a3,a2,a4
20001436:	863a                	mv	a2,a4
20001438:	00d37b63          	bgeu	t1,a3,2000144e <__udivdi3+0x178>
2000143c:	9342                	add	t1,t1,a6
2000143e:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001442:	01036663          	bltu	t1,a6,2000144e <__udivdi3+0x178>
20001446:	00d37463          	bgeu	t1,a3,2000144e <__udivdi3+0x178>
2000144a:	ffe70613          	addi	a2,a4,-2
2000144e:	0542                	slli	a0,a0,0x10
20001450:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001452:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001454:	01000737          	lui	a4,0x1000
20001458:	4541                	li	a0,16
2000145a:	f6e865e3          	bltu	a6,a4,200013c4 <__udivdi3+0xee>
2000145e:	4561                	li	a0,24
20001460:	b795                	j	200013c4 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001462:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001466:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
2000146a:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000146e:	00d797b3          	sll	a5,a5,a3
20001472:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001476:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000147a:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
2000147e:	0315f733          	remu	a4,a1,a7
20001482:	01081793          	slli	a5,a6,0x10
20001486:	83c1                	srli	a5,a5,0x10
20001488:	01065513          	srli	a0,a2,0x10
2000148c:	0315d5b3          	divu	a1,a1,a7
20001490:	0742                	slli	a4,a4,0x10
20001492:	8f49                	or	a4,a4,a0
20001494:	02b786b3          	mul	a3,a5,a1
20001498:	852e                	mv	a0,a1
2000149a:	00d77c63          	bgeu	a4,a3,200014b2 <__udivdi3+0x1dc>
2000149e:	9742                	add	a4,a4,a6
200014a0:	fff58513          	addi	a0,a1,-1
200014a4:	01076763          	bltu	a4,a6,200014b2 <__udivdi3+0x1dc>
200014a8:	00d77563          	bgeu	a4,a3,200014b2 <__udivdi3+0x1dc>
200014ac:	ffe58513          	addi	a0,a1,-2
200014b0:	9742                	add	a4,a4,a6
200014b2:	40d706b3          	sub	a3,a4,a3
200014b6:	0316f733          	remu	a4,a3,a7
200014ba:	0642                	slli	a2,a2,0x10
200014bc:	8241                	srli	a2,a2,0x10
200014be:	0316d6b3          	divu	a3,a3,a7
200014c2:	0742                	slli	a4,a4,0x10
200014c4:	02d788b3          	mul	a7,a5,a3
200014c8:	00c767b3          	or	a5,a4,a2
200014cc:	8736                	mv	a4,a3
200014ce:	0117fc63          	bgeu	a5,a7,200014e6 <__udivdi3+0x210>
200014d2:	97c2                	add	a5,a5,a6
200014d4:	fff68713          	addi	a4,a3,-1
200014d8:	0107e763          	bltu	a5,a6,200014e6 <__udivdi3+0x210>
200014dc:	0117f563          	bgeu	a5,a7,200014e6 <__udivdi3+0x210>
200014e0:	ffe68713          	addi	a4,a3,-2
200014e4:	97c2                	add	a5,a5,a6
200014e6:	01051593          	slli	a1,a0,0x10
200014ea:	411787b3          	sub	a5,a5,a7
200014ee:	8dd9                	or	a1,a1,a4
200014f0:	bdcd                	j	200013e2 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
200014f2:	14d5e263          	bltu	a1,a3,20001636 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200014f6:	6741                	lui	a4,0x10
200014f8:	02e6ff63          	bgeu	a3,a4,20001536 <__udivdi3+0x260>
200014fc:	0ff00713          	li	a4,255
20001500:	00d735b3          	sltu	a1,a4,a3
20001504:	058e                	slli	a1,a1,0x3
20001506:	20001737          	lui	a4,0x20001
2000150a:	00b6d533          	srl	a0,a3,a1
2000150e:	7dc70713          	addi	a4,a4,2012 # 200017dc <__clz_tab>
20001512:	972a                	add	a4,a4,a0
20001514:	00074703          	lbu	a4,0(a4)
20001518:	02000513          	li	a0,32
2000151c:	972e                	add	a4,a4,a1
2000151e:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001522:	02e51163          	bne	a0,a4,20001544 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001526:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001528:	f2f6e5e3          	bltu	a3,a5,20001452 <__udivdi3+0x17c>
2000152c:	00c8b533          	sltu	a0,a7,a2
20001530:	00154513          	xori	a0,a0,1
20001534:	bf39                	j	20001452 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001536:	01000737          	lui	a4,0x1000
2000153a:	45c1                	li	a1,16
2000153c:	fce6e5e3          	bltu	a3,a4,20001506 <__udivdi3+0x230>
20001540:	45e1                	li	a1,24
20001542:	b7d1                	j	20001506 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001544:	00e65333          	srl	t1,a2,a4
20001548:	00b696b3          	sll	a3,a3,a1
2000154c:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001550:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001554:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001558:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000155c:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001560:	00b797b3          	sll	a5,a5,a1
20001564:	00e8d733          	srl	a4,a7,a4
20001568:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000156c:	01031793          	slli	a5,t1,0x10
20001570:	83c1                	srli	a5,a5,0x10
20001572:	01085713          	srli	a4,a6,0x10
20001576:	02a65633          	divu	a2,a2,a0
2000157a:	06c2                	slli	a3,a3,0x10
2000157c:	8f55                	or	a4,a4,a3
2000157e:	02c78f33          	mul	t5,a5,a2
20001582:	8e32                	mv	t3,a2
20001584:	01e77c63          	bgeu	a4,t5,2000159c <__udivdi3+0x2c6>
20001588:	971a                	add	a4,a4,t1
2000158a:	fff60e13          	addi	t3,a2,-1
2000158e:	00676763          	bltu	a4,t1,2000159c <__udivdi3+0x2c6>
20001592:	01e77563          	bgeu	a4,t5,2000159c <__udivdi3+0x2c6>
20001596:	ffe60e13          	addi	t3,a2,-2
2000159a:	971a                	add	a4,a4,t1
2000159c:	41e70733          	sub	a4,a4,t5
200015a0:	02a776b3          	remu	a3,a4,a0
200015a4:	02a75733          	divu	a4,a4,a0
200015a8:	06c2                	slli	a3,a3,0x10
200015aa:	02e78633          	mul	a2,a5,a4
200015ae:	01081793          	slli	a5,a6,0x10
200015b2:	83c1                	srli	a5,a5,0x10
200015b4:	8fd5                	or	a5,a5,a3
200015b6:	86ba                	mv	a3,a4
200015b8:	00c7fc63          	bgeu	a5,a2,200015d0 <__udivdi3+0x2fa>
200015bc:	979a                	add	a5,a5,t1
200015be:	fff70693          	addi	a3,a4,-1 # ffffff <test_main.kLogFields.5+0xfeff0f>
200015c2:	0067e763          	bltu	a5,t1,200015d0 <__udivdi3+0x2fa>
200015c6:	00c7f563          	bgeu	a5,a2,200015d0 <__udivdi3+0x2fa>
200015ca:	ffe70693          	addi	a3,a4,-2
200015ce:	979a                	add	a5,a5,t1
200015d0:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200015d4:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200015d6:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200015d8:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
200015dc:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200015e0:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200015e2:	00def6b3          	and	a3,t4,a3
200015e6:	01055613          	srli	a2,a0,0x10
200015ea:	010ede93          	srli	t4,t4,0x10
200015ee:	02d80333          	mul	t1,a6,a3
200015f2:	02d606b3          	mul	a3,a2,a3
200015f6:	01035713          	srli	a4,t1,0x10
200015fa:	03d80833          	mul	a6,a6,t4
200015fe:	9836                	add	a6,a6,a3
20001600:	9742                	add	a4,a4,a6
20001602:	03d60633          	mul	a2,a2,t4
20001606:	00d77363          	bgeu	a4,a3,2000160c <__udivdi3+0x336>
2000160a:	9672                	add	a2,a2,t3
2000160c:	01075693          	srli	a3,a4,0x10
20001610:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001612:	02c7e063          	bltu	a5,a2,20001632 <__udivdi3+0x35c>
20001616:	d8c792e3          	bne	a5,a2,2000139a <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000161a:	67c1                	lui	a5,0x10
2000161c:	17fd                	addi	a5,a5,-1
2000161e:	8f7d                	and	a4,a4,a5
20001620:	0742                	slli	a4,a4,0x10
20001622:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001626:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000162a:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000162c:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
2000162e:	e2e8f2e3          	bgeu	a7,a4,20001452 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001632:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001634:	b39d                	j	2000139a <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001636:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001638:	4501                	li	a0,0
2000163a:	bd21                	j	20001452 <__udivdi3+0x17c>
