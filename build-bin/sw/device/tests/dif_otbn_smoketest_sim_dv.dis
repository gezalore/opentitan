
sw/device/tests/dif_otbn_smoketest_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001c5a  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000c40  20001de0  20001de0  00002de0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000038  10000000  20002a20  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000038  20002a58  00004038  2**2
                  ALLOC
  8 .logs.fields  000001f4  00010000  00010000  00004038  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  0000422c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000840b  00000000  00000000  00004252  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000018a5  00000000  00000000  0000c65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000df02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000473f  00000000  00000000  0000df9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000044ca  00000000  00000000  000126d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000200  00000000  00000000  00016ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023fa  00000000  00000000  00016da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000009a8  00000000  00000000  000191a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	01850513          	addi	a0,a0,24 # 10000038 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	01858593          	addi	a1,a1,24 # 10000040 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	83818593          	addi	a1,gp,-1992 # 10000038 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00003617          	auipc	a2,0x3
20000054:	9d060613          	addi	a2,a2,-1584 # 20002a20 <_otbn_app_err_test__dmem_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	5b3000ef          	jal	ra,20000e30 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	aabd                	j	20000200 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	1080006f          	j	20000208 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	2440006f          	j	20000350 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	28c0006f          	j	200003a8 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2d40006f          	j	20000400 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000180:	10500073          	wfi
20000184:	8082                	ret

20000186 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000186:	1141                	addi	sp,sp,-16
20000188:	c606                	sw	ra,12(sp)
2000018a:	00002597          	auipc	a1,0x2
2000018e:	d8658593          	addi	a1,a1,-634 # 20001f10 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000192:	41d0                	lw	a2,4(a1)
20000194:	4194                	lw	a3,0(a1)
20000196:	02a605b3          	mul	a1,a2,a0
2000019a:	02a6b633          	mulhu	a2,a3,a0
2000019e:	95b2                	add	a1,a1,a2
200001a0:	02a68533          	mul	a0,a3,a0
200001a4:	000f4637          	lui	a2,0xf4
200001a8:	24060613          	addi	a2,a2,576 # f4240 <check_otbn_err_bits.kLogFields.35+0xe4060>
200001ac:	4681                	li	a3,0
200001ae:	0c7010ef          	jal	ra,20001a74 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200001b2:	4801                	li	a6,0
200001b4:	4701                	li	a4,0

200001b6 <read0>:
200001b6:	b8002873          	csrr	a6,mcycleh
200001ba:	b00026f3          	csrr	a3,mcycle
200001be:	b8002773          	csrr	a4,mcycleh
200001c2:	fee81ae3          	bne	a6,a4,200001b6 <read0>
200001c6:	4781                	li	a5,0
200001c8:	4601                	li	a2,0

200001ca <read1>:
200001ca:	b80027f3          	csrr	a5,mcycleh
200001ce:	b0002773          	csrr	a4,mcycle
200001d2:	b8002673          	csrr	a2,mcycleh
200001d6:	fec79ae3          	bne	a5,a2,200001ca <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200001da:	00d73633          	sltu	a2,a4,a3
200001de:	410787b3          	sub	a5,a5,a6
200001e2:	8f91                	sub	a5,a5,a2
200001e4:	00b78663          	beq	a5,a1,200001f0 <read1+0x26>
200001e8:	00b7b733          	sltu	a4,a5,a1
200001ec:	ff69                	bnez	a4,200001c6 <read0+0x10>
200001ee:	a031                	j	200001fa <read1+0x30>
200001f0:	40d70633          	sub	a2,a4,a3
200001f4:	00a63733          	sltu	a4,a2,a0
200001f8:	f779                	bnez	a4,200001c6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200001fa:	40b2                	lw	ra,12(sp)
200001fc:	0141                	addi	sp,sp,16
200001fe:	8082                	ret

20000200 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000200:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000204:	bff5                	j	20000200 <abort>
	...

20000208 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000208:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000020a:	de06                	sw	ra,60(sp)
2000020c:	dc16                	sw	t0,56(sp)
2000020e:	da1a                	sw	t1,52(sp)
20000210:	d81e                	sw	t2,48(sp)
20000212:	d62a                	sw	a0,44(sp)
20000214:	d42e                	sw	a1,40(sp)
20000216:	d232                	sw	a2,36(sp)
20000218:	d036                	sw	a3,32(sp)
2000021a:	ce3a                	sw	a4,28(sp)
2000021c:	cc3e                	sw	a5,24(sp)
2000021e:	ca42                	sw	a6,20(sp)
20000220:	c846                	sw	a7,16(sp)
20000222:	c672                	sw	t3,12(sp)
20000224:	c476                	sw	t4,8(sp)
20000226:	c27a                	sw	t5,4(sp)
20000228:	c07e                	sw	t6,0(sp)
2000022a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000022e:	897d                	andi	a0,a0,31
20000230:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20000232:	00a5dc63          	bge	a1,a0,2000024a <handler_exception+0x42>
20000236:	4599                	li	a1,6
20000238:	02a5c263          	blt	a1,a0,2000025c <handler_exception+0x54>
2000023c:	458d                	li	a1,3
2000023e:	02b50c63          	beq	a0,a1,20000276 <handler_exception+0x6e>
20000242:	4595                	li	a1,5
20000244:	02b50763          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000248:	a015                	j	2000026c <handler_exception+0x64>
2000024a:	c115                	beqz	a0,2000026e <handler_exception+0x66>
2000024c:	4585                	li	a1,1
2000024e:	02b50063          	beq	a0,a1,2000026e <handler_exception+0x66>
20000252:	4589                	li	a1,2
20000254:	00b51c63          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000258:	2095                	jal	200002bc <handler_instr_ill_fault>
2000025a:	a839                	j	20000278 <handler_exception+0x70>
2000025c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000025e:	00b50a63          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000262:	45ad                	li	a1,11
20000264:	00b51463          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000268:	2845                	jal	20000318 <handler_ecall>
2000026a:	a039                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000026c:	a001                	j	2000026c <handler_exception+0x64>
2000026e:	2805                	jal	2000029e <handler_instr_acc_fault>
20000270:	a021                	j	20000278 <handler_exception+0x70>
20000272:	2061                	jal	200002fa <handler_lsu_fault>
20000274:	a011                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20000276:	209d                	jal	200002dc <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20000278:	4f82                	lw	t6,0(sp)
2000027a:	4f12                	lw	t5,4(sp)
2000027c:	4ea2                	lw	t4,8(sp)
2000027e:	4e32                	lw	t3,12(sp)
20000280:	48c2                	lw	a7,16(sp)
20000282:	4852                	lw	a6,20(sp)
20000284:	47e2                	lw	a5,24(sp)
20000286:	4772                	lw	a4,28(sp)
20000288:	5682                	lw	a3,32(sp)
2000028a:	5612                	lw	a2,36(sp)
2000028c:	55a2                	lw	a1,40(sp)
2000028e:	5532                	lw	a0,44(sp)
20000290:	53c2                	lw	t2,48(sp)
20000292:	5352                	lw	t1,52(sp)
20000294:	52e2                	lw	t0,56(sp)
20000296:	50f2                	lw	ra,60(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	30200073          	mret

2000029e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
2000029e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200002a0:	de06                	sw	ra,60(sp)
200002a2:	dc22                	sw	s0,56(sp)
200002a4:	00002597          	auipc	a1,0x2
200002a8:	00c58593          	addi	a1,a1,12 # 200022b0 <__clz_tab+0x160>
200002ac:	0040                	addi	s0,sp,4
200002ae:	03400613          	li	a2,52
200002b2:	8522                	mv	a0,s0
200002b4:	559000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200002b8:	8522                	mv	a0,s0
200002ba:	2a71                	jal	20000456 <print_exc_msg>

200002bc <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200002bc:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200002be:	c686                	sw	ra,76(sp)
200002c0:	c4a2                	sw	s0,72(sp)
200002c2:	00002597          	auipc	a1,0x2
200002c6:	02258593          	addi	a1,a1,34 # 200022e4 <__clz_tab+0x194>
200002ca:	00d10413          	addi	s0,sp,13
200002ce:	03b00613          	li	a2,59
200002d2:	8522                	mv	a0,s0
200002d4:	539000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200002d8:	8522                	mv	a0,s0
200002da:	2ab5                	jal	20000456 <print_exc_msg>

200002dc <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200002dc:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200002de:	de06                	sw	ra,60(sp)
200002e0:	dc22                	sw	s0,56(sp)
200002e2:	00002597          	auipc	a1,0x2
200002e6:	03d58593          	addi	a1,a1,61 # 2000231f <__clz_tab+0x1cf>
200002ea:	840a                	mv	s0,sp
200002ec:	03800613          	li	a2,56
200002f0:	8522                	mv	a0,s0
200002f2:	51b000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200002f6:	8522                	mv	a0,s0
200002f8:	2ab9                	jal	20000456 <print_exc_msg>

200002fa <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200002fa:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
200002fc:	de06                	sw	ra,60(sp)
200002fe:	dc22                	sw	s0,56(sp)
20000300:	00002597          	auipc	a1,0x2
20000304:	05758593          	addi	a1,a1,87 # 20002357 <__clz_tab+0x207>
20000308:	0020                	addi	s0,sp,8
2000030a:	03000613          	li	a2,48
2000030e:	8522                	mv	a0,s0
20000310:	4fd000ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000314:	8522                	mv	a0,s0
20000316:	2281                	jal	20000456 <print_exc_msg>

20000318 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000318:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000031a:	ce06                	sw	ra,28(sp)
2000031c:	cc22                	sw	s0,24(sp)
2000031e:	00002517          	auipc	a0,0x2
20000322:	c1a50513          	addi	a0,a0,-998 # 20001f38 <kDeviceLogBypassUartAddress>
20000326:	4108                	lw	a0,0(a0)
20000328:	c901                	beqz	a0,20000338 <handler_ecall+0x20>
2000032a:	e0010517          	auipc	a0,0xe0010
2000032e:	d1250513          	addi	a0,a0,-750 # 1003c <handler_ecall.kLogFields>
20000332:	4581                	li	a1,0
20000334:	2c2d                	jal	2000056e <base_log_internal_dv>
20000336:	a821                	j	2000034e <handler_ecall+0x36>
20000338:	00002597          	auipc	a1,0x2
2000033c:	ae458593          	addi	a1,a1,-1308 # 20001e1c <__udivdi3+0x3a8>
20000340:	840a                	mv	s0,sp
20000342:	4651                	li	a2,20
20000344:	8522                	mv	a0,s0
20000346:	4c7000ef          	jal	ra,2000100c <memcpy>
2000034a:	8522                	mv	a0,s0
2000034c:	2aa5                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
2000034e:	a001                	j	2000034e <handler_ecall+0x36>

20000350 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20000350:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
20000352:	ce86                	sw	ra,92(sp)
20000354:	cc96                	sw	t0,88(sp)
20000356:	ca9a                	sw	t1,84(sp)
20000358:	c89e                	sw	t2,80(sp)
2000035a:	c6a2                	sw	s0,76(sp)
2000035c:	c4aa                	sw	a0,72(sp)
2000035e:	c2ae                	sw	a1,68(sp)
20000360:	c0b2                	sw	a2,64(sp)
20000362:	de36                	sw	a3,60(sp)
20000364:	dc3a                	sw	a4,56(sp)
20000366:	da3e                	sw	a5,52(sp)
20000368:	d842                	sw	a6,48(sp)
2000036a:	d646                	sw	a7,44(sp)
2000036c:	d472                	sw	t3,40(sp)
2000036e:	d276                	sw	t4,36(sp)
20000370:	d07a                	sw	t5,32(sp)
20000372:	ce7e                	sw	t6,28(sp)
20000374:	00002517          	auipc	a0,0x2
20000378:	bc450513          	addi	a0,a0,-1084 # 20001f38 <kDeviceLogBypassUartAddress>
2000037c:	4108                	lw	a0,0(a0)
2000037e:	c901                	beqz	a0,2000038e <handler_irq_software+0x3e>
20000380:	e0010517          	auipc	a0,0xe0010
20000384:	c8050513          	addi	a0,a0,-896 # 10000 <_dv_log_offset>
20000388:	4581                	li	a1,0
2000038a:	22d5                	jal	2000056e <base_log_internal_dv>
2000038c:	a821                	j	200003a4 <handler_irq_software+0x54>
2000038e:	00002597          	auipc	a1,0x2
20000392:	a5258593          	addi	a1,a1,-1454 # 20001de0 <__udivdi3+0x36c>
20000396:	0020                	addi	s0,sp,8
20000398:	4651                	li	a2,20
2000039a:	8522                	mv	a0,s0
2000039c:	471000ef          	jal	ra,2000100c <memcpy>
200003a0:	8522                	mv	a0,s0
200003a2:	220d                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200003a4:	a001                	j	200003a4 <handler_irq_software+0x54>
200003a6:	0001                	nop

200003a8 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200003a8:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200003aa:	ce86                	sw	ra,92(sp)
200003ac:	cc96                	sw	t0,88(sp)
200003ae:	ca9a                	sw	t1,84(sp)
200003b0:	c89e                	sw	t2,80(sp)
200003b2:	c6a2                	sw	s0,76(sp)
200003b4:	c4aa                	sw	a0,72(sp)
200003b6:	c2ae                	sw	a1,68(sp)
200003b8:	c0b2                	sw	a2,64(sp)
200003ba:	de36                	sw	a3,60(sp)
200003bc:	dc3a                	sw	a4,56(sp)
200003be:	da3e                	sw	a5,52(sp)
200003c0:	d842                	sw	a6,48(sp)
200003c2:	d646                	sw	a7,44(sp)
200003c4:	d472                	sw	t3,40(sp)
200003c6:	d276                	sw	t4,36(sp)
200003c8:	d07a                	sw	t5,32(sp)
200003ca:	ce7e                	sw	t6,28(sp)
200003cc:	00002517          	auipc	a0,0x2
200003d0:	b6c50513          	addi	a0,a0,-1172 # 20001f38 <kDeviceLogBypassUartAddress>
200003d4:	4108                	lw	a0,0(a0)
200003d6:	c901                	beqz	a0,200003e6 <handler_irq_timer+0x3e>
200003d8:	e0010517          	auipc	a0,0xe0010
200003dc:	c3c50513          	addi	a0,a0,-964 # 10014 <handler_irq_timer.kLogFields>
200003e0:	4581                	li	a1,0
200003e2:	2271                	jal	2000056e <base_log_internal_dv>
200003e4:	a821                	j	200003fc <handler_irq_timer+0x54>
200003e6:	00002597          	auipc	a1,0x2
200003ea:	a0e58593          	addi	a1,a1,-1522 # 20001df4 <__udivdi3+0x380>
200003ee:	0020                	addi	s0,sp,8
200003f0:	4651                	li	a2,20
200003f2:	8522                	mv	a0,s0
200003f4:	419000ef          	jal	ra,2000100c <memcpy>
200003f8:	8522                	mv	a0,s0
200003fa:	20e9                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
200003fc:	a001                	j	200003fc <handler_irq_timer+0x54>
200003fe:	0001                	nop

20000400 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000400:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000402:	ce86                	sw	ra,92(sp)
20000404:	cc96                	sw	t0,88(sp)
20000406:	ca9a                	sw	t1,84(sp)
20000408:	c89e                	sw	t2,80(sp)
2000040a:	c6a2                	sw	s0,76(sp)
2000040c:	c4aa                	sw	a0,72(sp)
2000040e:	c2ae                	sw	a1,68(sp)
20000410:	c0b2                	sw	a2,64(sp)
20000412:	de36                	sw	a3,60(sp)
20000414:	dc3a                	sw	a4,56(sp)
20000416:	da3e                	sw	a5,52(sp)
20000418:	d842                	sw	a6,48(sp)
2000041a:	d646                	sw	a7,44(sp)
2000041c:	d472                	sw	t3,40(sp)
2000041e:	d276                	sw	t4,36(sp)
20000420:	d07a                	sw	t5,32(sp)
20000422:	ce7e                	sw	t6,28(sp)
20000424:	00002517          	auipc	a0,0x2
20000428:	b1450513          	addi	a0,a0,-1260 # 20001f38 <kDeviceLogBypassUartAddress>
2000042c:	4108                	lw	a0,0(a0)
2000042e:	c901                	beqz	a0,2000043e <handler_irq_external+0x3e>
20000430:	e0010517          	auipc	a0,0xe0010
20000434:	bf850513          	addi	a0,a0,-1032 # 10028 <handler_irq_external.kLogFields>
20000438:	4581                	li	a1,0
2000043a:	2a15                	jal	2000056e <base_log_internal_dv>
2000043c:	a821                	j	20000454 <handler_irq_external+0x54>
2000043e:	00002597          	auipc	a1,0x2
20000442:	9ca58593          	addi	a1,a1,-1590 # 20001e08 <__udivdi3+0x394>
20000446:	0020                	addi	s0,sp,8
20000448:	4651                	li	a2,20
2000044a:	8522                	mv	a0,s0
2000044c:	3c1000ef          	jal	ra,2000100c <memcpy>
20000450:	8522                	mv	a0,s0
20000452:	288d                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000454:	a001                	j	20000454 <handler_irq_external+0x54>

20000456 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000456:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000458:	ce06                	sw	ra,28(sp)
2000045a:	cc22                	sw	s0,24(sp)
2000045c:	ca26                	sw	s1,20(sp)
2000045e:	00002597          	auipc	a1,0x2
20000462:	ada58593          	addi	a1,a1,-1318 # 20001f38 <kDeviceLogBypassUartAddress>
20000466:	418c                	lw	a1,0(a1)
20000468:	842a                	mv	s0,a0
2000046a:	c18d                	beqz	a1,2000048c <print_exc_msg+0x36>
2000046c:	e0010517          	auipc	a0,0xe0010
20000470:	be450513          	addi	a0,a0,-1052 # 10050 <print_exc_msg.kLogFields>
20000474:	4585                	li	a1,1
20000476:	8622                	mv	a2,s0
20000478:	28dd                	jal	2000056e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000047a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000047e:	e0010517          	auipc	a0,0xe0010
20000482:	be650513          	addi	a0,a0,-1050 # 10064 <print_exc_msg.kLogFields.6>
20000486:	4585                	li	a1,1
20000488:	20dd                	jal	2000056e <base_log_internal_dv>
2000048a:	a81d                	j	200004c0 <print_exc_msg+0x6a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000048c:	00002597          	auipc	a1,0x2
20000490:	9a458593          	addi	a1,a1,-1628 # 20001e30 <__udivdi3+0x3bc>
20000494:	848a                	mv	s1,sp
20000496:	4651                	li	a2,20
20000498:	8526                	mv	a0,s1
2000049a:	373000ef          	jal	ra,2000100c <memcpy>
2000049e:	8526                	mv	a0,s1
200004a0:	85a2                	mv	a1,s0
200004a2:	200d                	jal	200004c4 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200004a4:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200004a8:	00002597          	auipc	a1,0x2
200004ac:	99c58593          	addi	a1,a1,-1636 # 20001e44 <__udivdi3+0x3d0>
200004b0:	848a                	mv	s1,sp
200004b2:	4651                	li	a2,20
200004b4:	8526                	mv	a0,s1
200004b6:	357000ef          	jal	ra,2000100c <memcpy>
200004ba:	8526                	mv	a0,s1
200004bc:	85a2                	mv	a1,s0
200004be:	2019                	jal	200004c4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200004c0:	a001                	j	200004c0 <print_exc_msg+0x6a>
	...

200004c4 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
200004c4:	7139                	addi	sp,sp,-64
200004c6:	ce06                	sw	ra,28(sp)
200004c8:	cc22                	sw	s0,24(sp)
200004ca:	ca26                	sw	s1,20(sp)
200004cc:	c84a                	sw	s2,16(sp)
200004ce:	892a                	mv	s2,a0
200004d0:	de46                	sw	a7,60(sp)
200004d2:	dc42                	sw	a6,56(sp)
200004d4:	da3e                	sw	a5,52(sp)
200004d6:	d83a                	sw	a4,48(sp)
200004d8:	d636                	sw	a3,44(sp)
200004da:	d432                	sw	a2,40(sp)
200004dc:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
200004de:	4144                	lw	s1,4(a0)
200004e0:	80000537          	lui	a0,0x80000
200004e4:	fff50613          	addi	a2,a0,-1 # 7fffffff <_otbn_app_err_test__dmem_end+0x5fffd5df>
200004e8:	8526                	mv	a0,s1
200004ea:	4581                	li	a1,0
200004ec:	371000ef          	jal	ra,2000105c <memchr>
200004f0:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
200004f4:	02f00593          	li	a1,47
200004f8:	8526                	mv	a0,s1
200004fa:	37b000ef          	jal	ra,20001074 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200004fe:	00092583          	lw	a1,0(s2)
20000502:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000504:	00b66b63          	bltu	a2,a1,2000051a <base_log_internal_core+0x56>
20000508:	058a                	slli	a1,a1,0x2
2000050a:	00002617          	auipc	a2,0x2
2000050e:	94e60613          	addi	a2,a2,-1714 # 20001e58 <__udivdi3+0x3e4>
20000512:	95b2                	add	a1,a1,a2
20000514:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000516:	e519                	bnez	a0,20000524 <base_log_internal_core+0x60>
20000518:	a801                	j	20000528 <base_log_internal_core+0x64>
2000051a:	00002597          	auipc	a1,0x2
2000051e:	eba58593          	addi	a1,a1,-326 # 200023d4 <__clz_tab+0x284>
20000522:	c119                	beqz	a0,20000528 <base_log_internal_core+0x64>
20000524:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000528:	f0000417          	auipc	s0,0xf0000
2000052c:	b1040413          	addi	s0,s0,-1264 # 10000038 <_data_end>
20000530:	00045603          	lhu	a2,0(s0)
20000534:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000538:	00002517          	auipc	a0,0x2
2000053c:	e8350513          	addi	a0,a0,-381 # 200023bb <__clz_tab+0x26b>
20000540:	86a6                	mv	a3,s1
20000542:	28d1                	jal	20000616 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000544:	00041503          	lh	a0,0(s0)
20000548:	0505                	addi	a0,a0,1
2000054a:	00a41023          	sh	a0,0(s0)
2000054e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000550:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000552:	01092503          	lw	a0,16(s2)
20000556:	28c5                	jal	20000646 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000558:	00002517          	auipc	a0,0x2
2000055c:	e7150513          	addi	a0,a0,-399 # 200023c9 <__clz_tab+0x279>
20000560:	285d                	jal	20000616 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000562:	4942                	lw	s2,16(sp)
20000564:	44d2                	lw	s1,20(sp)
20000566:	4462                	lw	s0,24(sp)
20000568:	40f2                	lw	ra,28(sp)
2000056a:	6121                	addi	sp,sp,64
2000056c:	8082                	ret

2000056e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
2000056e:	1101                	addi	sp,sp,-32
20000570:	ce46                	sw	a7,28(sp)
20000572:	cc42                	sw	a6,24(sp)
20000574:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000576:	00002797          	auipc	a5,0x2
2000057a:	9c278793          	addi	a5,a5,-1598 # 20001f38 <kDeviceLogBypassUartAddress>
2000057e:	439c                	lw	a5,0(a5)
20000580:	c83a                	sw	a4,16(sp)
20000582:	c636                	sw	a3,12(sp)
20000584:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000586:	c388                	sw	a0,0(a5)
20000588:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
2000058a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
2000058c:	c989                	beqz	a1,2000059e <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
2000058e:	4512                	lw	a0,4(sp)
20000590:	00450613          	addi	a2,a0,4
20000594:	c232                	sw	a2,4(sp)
20000596:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000598:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000059a:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
2000059c:	f9ed                	bnez	a1,2000058e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
2000059e:	6105                	addi	sp,sp,32
200005a0:	8082                	ret
	...

200005a4 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
200005a4:	e589                	bnez	a1,200005ae <base_set_stdout+0xa>
200005a6:	00000597          	auipc	a1,0x0
200005aa:	01658593          	addi	a1,a1,22 # 200005bc <base_dev_null>
200005ae:	f0000617          	auipc	a2,0xf0000
200005b2:	a5260613          	addi	a2,a2,-1454 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
200005b6:	c208                	sw	a0,0(a2)
200005b8:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200005ba:	8082                	ret

200005bc <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
200005bc:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
200005be:	8082                	ret

200005c0 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
200005c0:	f0000597          	auipc	a1,0xf0000
200005c4:	a4058593          	addi	a1,a1,-1472 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
200005c8:	c188                	sw	a0,0(a1)
200005ca:	00000517          	auipc	a0,0x0
200005ce:	00c50513          	addi	a0,a0,12 # 200005d6 <base_dev_uart>
200005d2:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
200005d4:	8082                	ret

200005d6 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
200005d6:	1101                	addi	sp,sp,-32
200005d8:	ce06                	sw	ra,28(sp)
200005da:	cc22                	sw	s0,24(sp)
200005dc:	ca26                	sw	s1,20(sp)
200005de:	c84a                	sw	s2,16(sp)
200005e0:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200005e2:	c20d                	beqz	a2,20000604 <base_dev_uart+0x2e>
200005e4:	8432                	mv	s0,a2
200005e6:	892e                	mv	s2,a1
200005e8:	89aa                	mv	s3,a0
200005ea:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
200005ec:	00990533          	add	a0,s2,s1
200005f0:	00054583          	lbu	a1,0(a0)
200005f4:	854e                	mv	a0,s3
200005f6:	2f09                	jal	20000d08 <dif_uart_byte_send_polled>
200005f8:	e519                	bnez	a0,20000606 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200005fa:	0485                	addi	s1,s1,1
200005fc:	fe9418e3          	bne	s0,s1,200005ec <base_dev_uart+0x16>
20000600:	84a2                	mv	s1,s0
20000602:	a011                	j	20000606 <base_dev_uart+0x30>
20000604:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000606:	8526                	mv	a0,s1
20000608:	49b2                	lw	s3,12(sp)
2000060a:	4942                	lw	s2,16(sp)
2000060c:	44d2                	lw	s1,20(sp)
2000060e:	4462                	lw	s0,24(sp)
20000610:	40f2                	lw	ra,28(sp)
20000612:	6105                	addi	sp,sp,32
20000614:	8082                	ret

20000616 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000616:	7179                	addi	sp,sp,-48
20000618:	c606                	sw	ra,12(sp)
2000061a:	d646                	sw	a7,44(sp)
2000061c:	d442                	sw	a6,40(sp)
2000061e:	d23e                	sw	a5,36(sp)
20000620:	d03a                	sw	a4,32(sp)
20000622:	ce36                	sw	a3,28(sp)
20000624:	cc32                	sw	a2,24(sp)
20000626:	ca2e                	sw	a1,20(sp)
20000628:	f0000597          	auipc	a1,0xf0000
2000062c:	9d858593          	addi	a1,a1,-1576 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000630:	4190                	lw	a2,0(a1)
20000632:	41cc                	lw	a1,4(a1)
20000634:	872a                	mv	a4,a0
20000636:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000638:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000063a:	8532                	mv	a0,a2
2000063c:	863a                	mv	a2,a4
2000063e:	200d                	jal	20000660 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000640:	40b2                	lw	ra,12(sp)
20000642:	6145                	addi	sp,sp,48
20000644:	8082                	ret

20000646 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000646:	f0000697          	auipc	a3,0xf0000
2000064a:	9ba68693          	addi	a3,a3,-1606 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000064e:	4290                	lw	a2,0(a3)
20000650:	42d4                	lw	a3,4(a3)
20000652:	872e                	mv	a4,a1
20000654:	87aa                	mv	a5,a0
20000656:	8532                	mv	a0,a2
20000658:	85b6                	mv	a1,a3
2000065a:	863e                	mv	a2,a5
2000065c:	86ba                	mv	a3,a4
2000065e:	a009                	j	20000660 <base_vfprintf>

20000660 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000660:	7139                	addi	sp,sp,-64
20000662:	de06                	sw	ra,60(sp)
20000664:	dc22                	sw	s0,56(sp)
20000666:	da26                	sw	s1,52(sp)
20000668:	d84a                	sw	s2,48(sp)
2000066a:	d64e                	sw	s3,44(sp)
2000066c:	d452                	sw	s4,40(sp)
2000066e:	d256                	sw	s5,36(sp)
20000670:	d05a                	sw	s6,32(sp)
20000672:	ce5e                	sw	s7,28(sp)
20000674:	cc62                	sw	s8,24(sp)
20000676:	ca66                	sw	s9,20(sp)
20000678:	c86a                	sw	s10,16(sp)
2000067a:	c66e                	sw	s11,12(sp)
2000067c:	8bb2                	mv	s7,a2
2000067e:	892a                	mv	s2,a0
20000680:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000682:	c199                	beqz	a1,20000688 <base_vfprintf+0x28>
20000684:	89ae                	mv	s3,a1
20000686:	a029                	j	20000690 <base_vfprintf+0x30>
20000688:	00000997          	auipc	s3,0x0
2000068c:	f3498993          	addi	s3,s3,-204 # 200005bc <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000690:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000692:	000bc503          	lbu	a0,0(s7)
20000696:	28050f63          	beqz	a0,20000934 <base_vfprintf+0x2d4>
2000069a:	4b01                	li	s6,0
2000069c:	02500c13          	li	s8,37
200006a0:	4ca5                	li	s9,9
200006a2:	02000d13          	li	s10,32
200006a6:	06800d93          	li	s11,104
200006aa:	00002a17          	auipc	s4,0x2
200006ae:	d2ca0a13          	addi	s4,s4,-724 # 200023d6 <__clz_tab+0x286>
200006b2:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200006b4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200006b6:	0ff57413          	andi	s0,a0,255
200006ba:	01840963          	beq	s0,s8,200006cc <base_vfprintf+0x6c>
200006be:	c419                	beqz	s0,200006cc <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200006c0:	009b8533          	add	a0,s7,s1
200006c4:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200006c8:	0485                	addi	s1,s1,1
200006ca:	b7f5                	j	200006b6 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200006cc:	c491                	beqz	s1,200006d8 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200006ce:	854a                	mv	a0,s2
200006d0:	85de                	mv	a1,s7
200006d2:	8626                	mv	a2,s1
200006d4:	9982                	jalr	s3
200006d6:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
200006d8:	24040f63          	beqz	s0,20000936 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200006dc:	009b8633          	add	a2,s7,s1
200006e0:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200006e4:	22050f63          	beqz	a0,20000922 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200006e8:	fd050593          	addi	a1,a0,-48
200006ec:	0ff5f593          	andi	a1,a1,255
200006f0:	00bcf863          	bgeu	s9,a1,20000700 <base_vfprintf+0xa0>
200006f4:	4401                	li	s0,0
200006f6:	4581                	li	a1,0
200006f8:	4605                	li	a2,1
200006fa:	028d7f63          	bgeu	s10,s0,20000738 <base_vfprintf+0xd8>
200006fe:	aca1                	j	20000956 <base_vfprintf+0x2f6>
20000700:	4581                	li	a1,0
20000702:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000704:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000706:	00b606b3          	add	a3,a2,a1
2000070a:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000070e:	20068a63          	beqz	a3,20000922 <base_vfprintf+0x2c2>
20000712:	0ff57513          	andi	a0,a0,255
20000716:	03540733          	mul	a4,s0,s5
2000071a:	953a                	add	a0,a0,a4
2000071c:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000720:	fd068513          	addi	a0,a3,-48
20000724:	0ff57713          	andi	a4,a0,255
20000728:	0585                	addi	a1,a1,1
2000072a:	8536                	mv	a0,a3
2000072c:	fcecfde3          	bgeu	s9,a4,20000706 <base_vfprintf+0xa6>
20000730:	4601                	li	a2,0
20000732:	8536                	mv	a0,a3
20000734:	228d6163          	bltu	s10,s0,20000956 <base_vfprintf+0x2f6>
20000738:	008036b3          	snez	a3,s0
2000073c:	8e55                	or	a2,a2,a3
2000073e:	20060c63          	beqz	a2,20000956 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000742:	95de                	add	a1,a1,s7
20000744:	95a6                	add	a1,a1,s1
20000746:	00258b93          	addi	s7,a1,2
2000074a:	02adce63          	blt	s11,a0,20000786 <base_vfprintf+0x126>
2000074e:	06100593          	li	a1,97
20000752:	06a5d563          	bge	a1,a0,200007bc <base_vfprintf+0x15c>
20000756:	06300593          	li	a1,99
2000075a:	0ca5cb63          	blt	a1,a0,20000830 <base_vfprintf+0x1d0>
2000075e:	06200593          	li	a1,98
20000762:	14b50a63          	beq	a0,a1,200008b6 <base_vfprintf+0x256>
20000766:	06300593          	li	a1,99
2000076a:	18b51f63          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
2000076e:	4502                	lw	a0,0(sp)
20000770:	00450593          	addi	a1,a0,4
20000774:	c02e                	sw	a1,0(sp)
20000776:	4108                	lw	a0,0(a0)
20000778:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
2000077c:	4605                	li	a2,1
2000077e:	854a                	mv	a0,s2
20000780:	00b10593          	addi	a1,sp,11
20000784:	aa41                	j	20000914 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000786:	07200593          	li	a1,114
2000078a:	04a5dd63          	bge	a1,a0,200007e4 <base_vfprintf+0x184>
2000078e:	07700593          	li	a1,119
20000792:	0aa5c663          	blt	a1,a0,2000083e <base_vfprintf+0x1de>
20000796:	07300593          	li	a1,115
2000079a:	12b50963          	beq	a0,a1,200008cc <base_vfprintf+0x26c>
2000079e:	07500593          	li	a1,117
200007a2:	16b51363          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200007a6:	4502                	lw	a0,0(sp)
200007a8:	00450593          	addi	a1,a0,4
200007ac:	c02e                	sw	a1,0(sp)
200007ae:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200007b0:	00001797          	auipc	a5,0x1
200007b4:	6d578793          	addi	a5,a5,1749 # 20001e85 <kDigitsLow>
200007b8:	4729                	li	a4,10
200007ba:	a8cd                	j	200008ac <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200007bc:	13850763          	beq	a0,s8,200008ea <base_vfprintf+0x28a>
200007c0:	04800593          	li	a1,72
200007c4:	00b50663          	beq	a0,a1,200007d0 <base_vfprintf+0x170>
200007c8:	05800593          	li	a1,88
200007cc:	12b51e63          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
200007d0:	4502                	lw	a0,0(sp)
200007d2:	00450593          	addi	a1,a0,4
200007d6:	c02e                	sw	a1,0(sp)
200007d8:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
200007da:	00001797          	auipc	a5,0x1
200007de:	6bb78793          	addi	a5,a5,1723 # 20001e95 <kDigitsHigh>
200007e2:	a0e1                	j	200008aa <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200007e4:	06900593          	li	a1,105
200007e8:	06b50d63          	beq	a0,a1,20000862 <base_vfprintf+0x202>
200007ec:	06f00593          	li	a1,111
200007f0:	10b50163          	beq	a0,a1,200008f2 <base_vfprintf+0x292>
200007f4:	07000593          	li	a1,112
200007f8:	10b51863          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200007fc:	00002597          	auipc	a1,0x2
20000800:	bde58593          	addi	a1,a1,-1058 # 200023da <__clz_tab+0x28a>
20000804:	4609                	li	a2,2
20000806:	854a                	mv	a0,s2
20000808:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000080a:	4582                	lw	a1,0(sp)
2000080c:	00458613          	addi	a2,a1,4
20000810:	c032                	sw	a2,0(sp)
20000812:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000814:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000818:	00001797          	auipc	a5,0x1
2000081c:	66d78793          	addi	a5,a5,1645 # 20001e85 <kDigitsLow>
20000820:	46a1                	li	a3,8
20000822:	4741                	li	a4,16
20000824:	854a                	mv	a0,s2
20000826:	85ce                	mv	a1,s3
20000828:	2a55                	jal	200009dc <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
2000082a:	00a40b33          	add	s6,s0,a0
2000082e:	a0ed                	j	20000918 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000830:	06400593          	li	a1,100
20000834:	02b50763          	beq	a0,a1,20000862 <base_vfprintf+0x202>
20000838:	07b50063          	beq	a0,s11,20000898 <base_vfprintf+0x238>
2000083c:	a0f1                	j	20000908 <base_vfprintf+0x2a8>
2000083e:	07800593          	li	a1,120
20000842:	04b50b63          	beq	a0,a1,20000898 <base_vfprintf+0x238>
20000846:	07a00593          	li	a1,122
2000084a:	0ab51f63          	bne	a0,a1,20000908 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
2000084e:	4502                	lw	a0,0(sp)
20000850:	00450593          	addi	a1,a0,4
20000854:	c02e                	sw	a1,0(sp)
20000856:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20000858:	00850593          	addi	a1,a0,8
2000085c:	c02e                	sw	a1,0(sp)
2000085e:	414c                	lw	a1,4(a0)
20000860:	a84d                	j	20000912 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000862:	4502                	lw	a0,0(sp)
20000864:	00450593          	addi	a1,a0,4
20000868:	c02e                	sw	a1,0(sp)
2000086a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
2000086c:	557d                	li	a0,-1
2000086e:	00954c63          	blt	a0,s1,20000886 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000872:	00002597          	auipc	a1,0x2
20000876:	b6658593          	addi	a1,a1,-1178 # 200023d8 <__clz_tab+0x288>
2000087a:	4605                	li	a2,1
2000087c:	854a                	mv	a0,s2
2000087e:	9982                	jalr	s3
20000880:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000882:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000886:	00001797          	auipc	a5,0x1
2000088a:	5ff78793          	addi	a5,a5,1535 # 20001e85 <kDigitsLow>
2000088e:	4729                	li	a4,10
20000890:	854a                	mv	a0,s2
20000892:	85ce                	mv	a1,s3
20000894:	8626                	mv	a2,s1
20000896:	a829                	j	200008b0 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000898:	4502                	lw	a0,0(sp)
2000089a:	00450593          	addi	a1,a0,4
2000089e:	c02e                	sw	a1,0(sp)
200008a0:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200008a2:	00001797          	auipc	a5,0x1
200008a6:	5e378793          	addi	a5,a5,1507 # 20001e85 <kDigitsLow>
200008aa:	4741                	li	a4,16
200008ac:	854a                	mv	a0,s2
200008ae:	85ce                	mv	a1,s3
200008b0:	86a2                	mv	a3,s0
200008b2:	222d                	jal	200009dc <write_digits>
200008b4:	a08d                	j	20000916 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200008b6:	4502                	lw	a0,0(sp)
200008b8:	00450593          	addi	a1,a0,4
200008bc:	c02e                	sw	a1,0(sp)
200008be:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200008c0:	00001797          	auipc	a5,0x1
200008c4:	5c578793          	addi	a5,a5,1477 # 20001e85 <kDigitsLow>
200008c8:	4709                	li	a4,2
200008ca:	b7cd                	j	200008ac <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200008cc:	4502                	lw	a0,0(sp)
200008ce:	00450593          	addi	a1,a0,4
200008d2:	c02e                	sw	a1,0(sp)
200008d4:	410c                	lw	a1,0(a0)
200008d6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200008d8:	00a58633          	add	a2,a1,a0
200008dc:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200008e0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200008e2:	fa7d                	bnez	a2,200008d8 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200008e4:	fff50613          	addi	a2,a0,-1
200008e8:	a02d                	j	20000912 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200008ea:	4605                	li	a2,1
200008ec:	854a                	mv	a0,s2
200008ee:	85d2                	mv	a1,s4
200008f0:	a015                	j	20000914 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200008f2:	4502                	lw	a0,0(sp)
200008f4:	00450593          	addi	a1,a0,4
200008f8:	c02e                	sw	a1,0(sp)
200008fa:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
200008fc:	00001797          	auipc	a5,0x1
20000900:	58978793          	addi	a5,a5,1417 # 20001e85 <kDigitsLow>
20000904:	4721                	li	a4,8
20000906:	b75d                	j	200008ac <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20000908:	00001597          	auipc	a1,0x1
2000090c:	59d58593          	addi	a1,a1,1437 # 20001ea5 <kUnknownSpec>
20000910:	463d                	li	a2,15
20000912:	854a                	mv	a0,s2
20000914:	9982                	jalr	s3
20000916:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20000918:	000bc503          	lbu	a0,0(s7)
2000091c:	d8051ce3          	bnez	a0,200006b4 <base_vfprintf+0x54>
20000920:	a819                	j	20000936 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20000922:	00001597          	auipc	a1,0x1
20000926:	54658593          	addi	a1,a1,1350 # 20001e68 <kErrorNul>
2000092a:	4645                	li	a2,17
2000092c:	854a                	mv	a0,s2
2000092e:	9982                	jalr	s3
20000930:	9b2a                	add	s6,s6,a0
20000932:	a011                	j	20000936 <base_vfprintf+0x2d6>
20000934:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20000936:	855a                	mv	a0,s6
20000938:	4db2                	lw	s11,12(sp)
2000093a:	4d42                	lw	s10,16(sp)
2000093c:	4cd2                	lw	s9,20(sp)
2000093e:	4c62                	lw	s8,24(sp)
20000940:	4bf2                	lw	s7,28(sp)
20000942:	5b02                	lw	s6,32(sp)
20000944:	5a92                	lw	s5,36(sp)
20000946:	5a22                	lw	s4,40(sp)
20000948:	59b2                	lw	s3,44(sp)
2000094a:	5942                	lw	s2,48(sp)
2000094c:	54d2                	lw	s1,52(sp)
2000094e:	5462                	lw	s0,56(sp)
20000950:	50f2                	lw	ra,60(sp)
20000952:	6121                	addi	sp,sp,64
20000954:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20000956:	00001597          	auipc	a1,0x1
2000095a:	52358593          	addi	a1,a1,1315 # 20001e79 <kErrorTooWide>
2000095e:	4631                	li	a2,12
20000960:	b7f1                	j	2000092c <base_vfprintf+0x2cc>

20000962 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20000962:	7179                	addi	sp,sp,-48
20000964:	ca06                	sw	ra,20(sp)
20000966:	d646                	sw	a7,44(sp)
20000968:	d442                	sw	a6,40(sp)
2000096a:	d23e                	sw	a5,36(sp)
2000096c:	d03a                	sw	a4,32(sp)
2000096e:	ce36                	sw	a3,28(sp)
20000970:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20000972:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20000974:	c42a                	sw	a0,8(sp)
20000976:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20000978:	00000597          	auipc	a1,0x0
2000097c:	01258593          	addi	a1,a1,18 # 2000098a <snprintf_sink>
20000980:	0028                	addi	a0,sp,8
20000982:	39f9                	jal	20000660 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20000984:	40d2                	lw	ra,20(sp)
20000986:	6145                	addi	sp,sp,48
20000988:	8082                	ret

2000098a <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000098a:	1141                	addi	sp,sp,-16
2000098c:	c606                	sw	ra,12(sp)
2000098e:	c422                	sw	s0,8(sp)
20000990:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20000992:	4140                	lw	s0,4(a0)
20000994:	c005                	beqz	s0,200009b4 <snprintf_sink+0x2a>
20000996:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20000998:	00c46363          	bltu	s0,a2,2000099e <snprintf_sink+0x14>
2000099c:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
2000099e:	4088                	lw	a0,0(s1)
200009a0:	8622                	mv	a2,s0
200009a2:	25ad                	jal	2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200009a4:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200009a6:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200009a8:	9522                	add	a0,a0,s0
200009aa:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200009ac:	40858533          	sub	a0,a1,s0
200009b0:	c0c8                	sw	a0,4(s1)
200009b2:	a011                	j	200009b6 <snprintf_sink+0x2c>
200009b4:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200009b6:	8522                	mv	a0,s0
200009b8:	4492                	lw	s1,4(sp)
200009ba:	4422                	lw	s0,8(sp)
200009bc:	40b2                	lw	ra,12(sp)
200009be:	0141                	addi	sp,sp,16
200009c0:	8082                	ret

200009c2 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200009c2:	1101                	addi	sp,sp,-32
200009c4:	c206                	sw	ra,4(sp)
200009c6:	ce46                	sw	a7,28(sp)
200009c8:	cc42                	sw	a6,24(sp)
200009ca:	ca3e                	sw	a5,20(sp)
200009cc:	c83a                	sw	a4,16(sp)
200009ce:	c636                	sw	a3,12(sp)
200009d0:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200009d2:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200009d4:	3171                	jal	20000660 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200009d6:	4092                	lw	ra,4(sp)
200009d8:	6105                	addi	sp,sp,32
200009da:	8082                	ret

200009dc <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
200009dc:	7139                	addi	sp,sp,-64
200009de:	de06                	sw	ra,60(sp)
200009e0:	dc22                	sw	s0,56(sp)
200009e2:	da26                	sw	s1,52(sp)
200009e4:	d84a                	sw	s2,48(sp)
200009e6:	d64e                	sw	s3,44(sp)
200009e8:	892e                	mv	s2,a1
200009ea:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
200009ec:	ca05                	beqz	a2,20000a1c <write_digits+0x40>
200009ee:	4501                	li	a0,0
200009f0:	02b10813          	addi	a6,sp,43
200009f4:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
200009f6:	02e65633          	divu	a2,a2,a4
200009fa:	02e60433          	mul	s0,a2,a4
200009fe:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20000a02:	943e                	add	s0,s0,a5
20000a04:	00040403          	lb	s0,0(s0)
20000a08:	00a805b3          	add	a1,a6,a0
20000a0c:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000a10:	157d                	addi	a0,a0,-1
20000a12:	fee4f1e3          	bgeu	s1,a4,200009f4 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20000a16:	40a00633          	neg	a2,a0
20000a1a:	a011                	j	20000a1e <write_digits+0x42>
20000a1c:	4601                	li	a2,0
20000a1e:	4485                	li	s1,1
20000a20:	c291                	beqz	a3,20000a24 <write_digits+0x48>
20000a22:	84b6                	mv	s1,a3
20000a24:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20000a28:	00a4e463          	bltu	s1,a0,20000a30 <write_digits+0x54>
20000a2c:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000a30:	00967f63          	bgeu	a2,s1,20000a4e <write_digits+0x72>
20000a34:	0068                	addi	a0,sp,12
20000a36:	8d05                	sub	a0,a0,s1
20000a38:	02050513          	addi	a0,a0,32
20000a3c:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20000a40:	03000593          	li	a1,48
20000a44:	8622                	mv	a2,s0
20000a46:	2bf1                	jal	20001022 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000a48:	147d                	addi	s0,s0,-1
20000a4a:	fc7d                	bnez	s0,20000a48 <write_digits+0x6c>
20000a4c:	8626                	mv	a2,s1
20000a4e:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20000a50:	8d11                	sub	a0,a0,a2
20000a52:	02050593          	addi	a1,a0,32
20000a56:	854e                	mv	a0,s3
20000a58:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20000a5a:	59b2                	lw	s3,44(sp)
20000a5c:	5942                	lw	s2,48(sp)
20000a5e:	54d2                	lw	s1,52(sp)
20000a60:	5462                	lw	s0,56(sp)
20000a62:	50f2                	lw	ra,60(sp)
20000a64:	6121                	addi	sp,sp,64
20000a66:	8082                	ret

20000a68 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20000a68:	c581                	beqz	a1,20000a70 <dif_uart_init+0x8>
20000a6a:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20000a6c:	c188                	sw	a0,0(a1)
20000a6e:	a011                	j	20000a72 <dif_uart_init+0xa>
20000a70:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20000a72:	8532                	mv	a0,a2
20000a74:	8082                	ret

20000a76 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20000a76:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20000a78:	c606                	sw	ra,12(sp)
20000a7a:	c422                	sw	s0,8(sp)
20000a7c:	c226                	sw	s1,4(sp)
20000a7e:	c935                	beqz	a0,20000af2 <dif_uart_configure+0x7c>
20000a80:	84ae                	mv	s1,a1
20000a82:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20000a84:	418c                	lw	a1,0(a1)
20000a86:	450d                	li	a0,3
20000a88:	c5b5                	beqz	a1,20000af4 <dif_uart_configure+0x7e>
20000a8a:	40d0                	lw	a2,4(s1)
20000a8c:	c625                	beqz	a2,20000af4 <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20000a8e:	01459513          	slli	a0,a1,0x14
20000a92:	81b1                	srli	a1,a1,0xc
20000a94:	4681                	li	a3,0
20000a96:	7df000ef          	jal	ra,20001a74 <__udivdi3>
20000a9a:	6641                	lui	a2,0x10
20000a9c:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20000a9e:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20000aa0:	8d31                	xor	a0,a0,a2
20000aa2:	8dc9                	or	a1,a1,a0
20000aa4:	4511                	li	a0,4
20000aa6:	e5b9                	bnez	a1,20000af4 <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20000aa8:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000aaa:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20000aae:	4008                	lw	a0,0(s0)
20000ab0:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ab2:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20000ab4:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ab6:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20000aba:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000abc:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000ac0:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ac2:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20000ac6:	4008                	lw	a0,0(s0)
20000ac8:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000aca:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20000acc:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
20000ace:	01061513          	slli	a0,a2,0x10
20000ad2:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20000ad6:	c291                	beqz	a3,20000ada <dif_uart_configure+0x64>
20000ad8:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20000ada:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20000adc:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20000ade:	e219                	bnez	a2,20000ae4 <dif_uart_configure+0x6e>
20000ae0:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20000ae4:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ae6:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000ae8:	400c                	lw	a1,0(s0)
20000aea:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000aec:	0005a223          	sw	zero,4(a1)
20000af0:	a011                	j	20000af4 <dif_uart_configure+0x7e>
20000af2:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20000af4:	4492                	lw	s1,4(sp)
20000af6:	4422                	lw	s0,8(sp)
20000af8:	40b2                	lw	ra,12(sp)
20000afa:	0141                	addi	sp,sp,16
20000afc:	8082                	ret

20000afe <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20000afe:	1141                	addi	sp,sp,-16
20000b00:	c606                	sw	ra,12(sp)
20000b02:	c422                	sw	s0,8(sp)
20000b04:	c226                	sw	s1,4(sp)
20000b06:	84aa                	mv	s1,a0
20000b08:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20000b0a:	c09d                	beqz	s1,20000b30 <dif_uart_irq_is_pending+0x32>
20000b0c:	8432                	mv	s0,a2
20000b0e:	c20d                	beqz	a2,20000b30 <dif_uart_irq_is_pending+0x32>
20000b10:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000b12:	852e                	mv	a0,a1
20000b14:	85b2                	mv	a1,a2
20000b16:	2015                	jal	20000b3a <uart_irq_offset_get>
20000b18:	85aa                	mv	a1,a0
20000b1a:	4505                	li	a0,1
20000b1c:	c991                	beqz	a1,20000b30 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20000b1e:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b20:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20000b22:	4602                	lw	a2,0(sp)
20000b24:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b26:	00c5d5b3          	srl	a1,a1,a2
20000b2a:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20000b2c:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20000b30:	4492                	lw	s1,4(sp)
20000b32:	4422                	lw	s0,8(sp)
20000b34:	40b2                	lw	ra,12(sp)
20000b36:	0141                	addi	sp,sp,16
20000b38:	8082                	ret

20000b3a <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20000b3a:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20000b3c:	00a66563          	bltu	a2,a0,20000b46 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20000b40:	c188                	sw	a0,0(a1)
20000b42:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20000b44:	8082                	ret
20000b46:	4501                	li	a0,0
20000b48:	8082                	ret

20000b4a <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20000b4a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20000b4c:	c606                	sw	ra,12(sp)
20000b4e:	c422                	sw	s0,8(sp)
20000b50:	c10d                	beqz	a0,20000b72 <dif_uart_irq_acknowledge+0x28>
20000b52:	842a                	mv	s0,a0
20000b54:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000b56:	852e                	mv	a0,a1
20000b58:	85b2                	mv	a1,a2
20000b5a:	37c5                	jal	20000b3a <uart_irq_offset_get>
20000b5c:	85aa                	mv	a1,a0
20000b5e:	4505                	li	a0,1
20000b60:	c991                	beqz	a1,20000b74 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000b62:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20000b64:	4010                	lw	a2,0(s0)
20000b66:	4501                	li	a0,0
20000b68:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b6a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b6e:	c20c                	sw	a1,0(a2)
20000b70:	a011                	j	20000b74 <dif_uart_irq_acknowledge+0x2a>
20000b72:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20000b74:	4422                	lw	s0,8(sp)
20000b76:	40b2                	lw	ra,12(sp)
20000b78:	0141                	addi	sp,sp,16
20000b7a:	8082                	ret

20000b7c <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20000b7c:	c911                	beqz	a0,20000b90 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20000b7e:	c581                	beqz	a1,20000b86 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000b80:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b82:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20000b84:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000b86:	410c                	lw	a1,0(a0)
20000b88:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b8a:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20000b8e:	8082                	ret
20000b90:	4509                	li	a0,2
20000b92:	8082                	ret

20000b94 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20000b94:	862a                	mv	a2,a0
20000b96:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20000b98:	c611                	beqz	a2,20000ba4 <dif_uart_irq_restore_all+0x10>
20000b9a:	c589                	beqz	a1,20000ba4 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000b9c:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20000b9e:	4210                	lw	a2,0(a2)
20000ba0:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ba2:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20000ba4:	8082                	ret

20000ba6 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20000ba6:	1141                	addi	sp,sp,-16
20000ba8:	c606                	sw	ra,12(sp)
20000baa:	c422                	sw	s0,8(sp)
20000bac:	c226                	sw	s1,4(sp)
20000bae:	84aa                	mv	s1,a0
20000bb0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20000bb2:	c485                	beqz	s1,20000bda <dif_uart_irq_get_enabled+0x34>
20000bb4:	8432                	mv	s0,a2
20000bb6:	c215                	beqz	a2,20000bda <dif_uart_irq_get_enabled+0x34>
20000bb8:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000bba:	852e                	mv	a0,a1
20000bbc:	85b2                	mv	a1,a2
20000bbe:	3fb5                	jal	20000b3a <uart_irq_offset_get>
20000bc0:	85aa                	mv	a1,a0
20000bc2:	4505                	li	a0,1
20000bc4:	c999                	beqz	a1,20000bda <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000bc6:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bc8:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20000bca:	4602                	lw	a2,0(sp)
20000bcc:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000bce:	00c5d5b3          	srl	a1,a1,a2
20000bd2:	8985                	andi	a1,a1,1
20000bd4:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20000bd8:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20000bda:	4492                	lw	s1,4(sp)
20000bdc:	4422                	lw	s0,8(sp)
20000bde:	40b2                	lw	ra,12(sp)
20000be0:	0141                	addi	sp,sp,16
20000be2:	8082                	ret

20000be4 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20000be4:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20000be6:	c606                	sw	ra,12(sp)
20000be8:	c422                	sw	s0,8(sp)
20000bea:	c226                	sw	s1,4(sp)
20000bec:	c91d                	beqz	a0,20000c22 <dif_uart_irq_set_enabled+0x3e>
20000bee:	8432                	mv	s0,a2
20000bf0:	84aa                	mv	s1,a0
20000bf2:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000bf4:	852e                	mv	a0,a1
20000bf6:	85b2                	mv	a1,a2
20000bf8:	3789                	jal	20000b3a <uart_irq_offset_get>
20000bfa:	85aa                	mv	a1,a0
20000bfc:	4505                	li	a0,1
20000bfe:	c19d                	beqz	a1,20000c24 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20000c00:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c02:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20000c04:	4682                	lw	a3,0(sp)
20000c06:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20000c08:	00143713          	seqz	a4,s0
20000c0c:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c0e:	00d797b3          	sll	a5,a5,a3
20000c12:	fff7c793          	not	a5,a5
20000c16:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c18:	00d716b3          	sll	a3,a4,a3
20000c1c:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c1e:	c1d0                	sw	a2,4(a1)
20000c20:	a011                	j	20000c24 <dif_uart_irq_set_enabled+0x40>
20000c22:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c24:	4492                	lw	s1,4(sp)
20000c26:	4422                	lw	s0,8(sp)
20000c28:	40b2                	lw	ra,12(sp)
20000c2a:	0141                	addi	sp,sp,16
20000c2c:	8082                	ret

20000c2e <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20000c2e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20000c30:	c606                	sw	ra,12(sp)
20000c32:	c422                	sw	s0,8(sp)
20000c34:	c10d                	beqz	a0,20000c56 <dif_uart_irq_force+0x28>
20000c36:	842a                	mv	s0,a0
20000c38:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000c3a:	852e                	mv	a0,a1
20000c3c:	85b2                	mv	a1,a2
20000c3e:	3df5                	jal	20000b3a <uart_irq_offset_get>
20000c40:	85aa                	mv	a1,a0
20000c42:	4505                	li	a0,1
20000c44:	c991                	beqz	a1,20000c58 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20000c46:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20000c48:	4010                	lw	a2,0(s0)
20000c4a:	4501                	li	a0,0
20000c4c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c4e:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c52:	c60c                	sw	a1,8(a2)
20000c54:	a011                	j	20000c58 <dif_uart_irq_force+0x2a>
20000c56:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20000c58:	4422                	lw	s0,8(sp)
20000c5a:	40b2                	lw	ra,12(sp)
20000c5c:	0141                	addi	sp,sp,16
20000c5e:	8082                	ret

20000c60 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000c60:	cd09                	beqz	a0,20000c7a <dif_uart_watermark_rx_set+0x1a>
20000c62:	4691                	li	a3,4
20000c64:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000c66:	00b6eb63          	bltu	a3,a1,20000c7c <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000c6a:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c6c:	4d54                	lw	a3,28(a0)
20000c6e:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20000c70:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000c72:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c74:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c76:	cd4c                	sw	a1,28(a0)
20000c78:	a011                	j	20000c7c <dif_uart_watermark_rx_set+0x1c>
20000c7a:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c7c:	8532                	mv	a0,a2
20000c7e:	8082                	ret

20000c80 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20000c80:	cd11                	beqz	a0,20000c9c <dif_uart_watermark_tx_set+0x1c>
20000c82:	468d                	li	a3,3
20000c84:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20000c86:	00b6ec63          	bltu	a3,a1,20000c9e <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000c8a:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c8c:	4d54                	lw	a3,28(a0)
20000c8e:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20000c90:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c92:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c96:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c98:	cd4c                	sw	a1,28(a0)
20000c9a:	a011                	j	20000c9e <dif_uart_watermark_tx_set+0x1e>
20000c9c:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000c9e:	8532                	mv	a0,a2
20000ca0:	8082                	ret

20000ca2 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20000ca2:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20000ca4:	c51d                	beqz	a0,20000cd2 <dif_uart_bytes_send+0x30>
20000ca6:	c595                	beqz	a1,20000cd2 <dif_uart_bytes_send+0x30>
20000ca8:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000caa:	c20d                	beqz	a2,20000ccc <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000cac:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cb0:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000cb4:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000cb6:	eb19                	bnez	a4,20000ccc <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20000cb8:	00f58733          	add	a4,a1,a5
20000cbc:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20000cc0:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cc2:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000cc6:	fef613e3          	bne	a2,a5,20000cac <dif_uart_bytes_send+0xa>
20000cca:	87b2                	mv	a5,a2
20000ccc:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20000cce:	c291                	beqz	a3,20000cd2 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20000cd0:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20000cd2:	853a                	mv	a0,a4
20000cd4:	8082                	ret

20000cd6 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20000cd6:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20000cd8:	c515                	beqz	a0,20000d04 <dif_uart_bytes_receive+0x2e>
20000cda:	c60d                	beqz	a2,20000d04 <dif_uart_bytes_receive+0x2e>
20000cdc:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000cde:	cd99                	beqz	a1,20000cfc <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20000ce0:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ce2:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000ce4:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000ce8:	eb91                	bnez	a5,20000cfc <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cea:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000cec:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20000cf0:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000cf2:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000cf6:	ff0595e3          	bne	a1,a6,20000ce0 <dif_uart_bytes_receive+0xa>
20000cfa:	882e                	mv	a6,a1
20000cfc:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20000cfe:	c299                	beqz	a3,20000d04 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20000d00:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20000d04:	853a                	mv	a0,a4
20000d06:	8082                	ret

20000d08 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20000d08:	cd19                	beqz	a0,20000d26 <dif_uart_byte_send_polled+0x1e>
20000d0a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d0c:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d0e:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20000d10:	fef5                	bnez	a3,20000d0c <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d12:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d14:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20000d16:	e299                	bnez	a3,20000d1c <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d18:	ce0c                	sw	a1,24(a2)
20000d1a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d1c:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d1e:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20000d20:	dd75                	beqz	a0,20000d1c <dif_uart_byte_send_polled+0x14>
20000d22:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20000d24:	8082                	ret
20000d26:	4509                	li	a0,2
20000d28:	8082                	ret

20000d2a <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20000d2a:	862a                	mv	a2,a0
20000d2c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20000d2e:	c205                	beqz	a2,20000d4e <dif_uart_byte_receive_polled+0x24>
20000d30:	cd99                	beqz	a1,20000d4e <dif_uart_byte_receive_polled+0x24>
20000d32:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d34:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d36:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20000d3a:	fd6d                	bnez	a0,20000d34 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d3c:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d3e:	02057693          	andi	a3,a0,32
20000d42:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20000d44:	e689                	bnez	a3,20000d4e <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d46:	4a50                	lw	a2,20(a2)
20000d48:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20000d4a:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20000d4e:	8082                	ret

20000d50 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000d50:	862a                	mv	a2,a0
20000d52:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20000d54:	ca09                	beqz	a2,20000d66 <dif_uart_rx_bytes_available+0x16>
20000d56:	c981                	beqz	a1,20000d66 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000d58:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d5a:	5110                	lw	a2,32(a0)
20000d5c:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000d5e:	8241                	srli	a2,a2,0x10
20000d60:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20000d64:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20000d66:	8082                	ret

20000d68 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20000d68:	862a                	mv	a2,a0
20000d6a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20000d6c:	ce01                	beqz	a2,20000d84 <dif_uart_tx_bytes_available+0x1c>
20000d6e:	c999                	beqz	a1,20000d84 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20000d70:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d72:	5110                	lw	a2,32(a0)
20000d74:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20000d76:	03f67613          	andi	a2,a2,63
20000d7a:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20000d7e:	40c68633          	sub	a2,a3,a2
20000d82:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20000d84:	8082                	ret

20000d86 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20000d86:	c11d                	beqz	a0,20000dac <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20000d88:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d8a:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000d8c:	ffd5f693          	andi	a3,a1,-3
20000d90:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000d94:	fff58713          	addi	a4,a1,-1
20000d98:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20000d9a:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20000d9e:	00f77463          	bgeu	a4,a5,20000da6 <dif_uart_fifo_reset+0x20>
20000da2:	0025e593          	ori	a1,a1,2
20000da6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000da8:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000daa:	8082                	ret
20000dac:	4509                	li	a0,2
20000dae:	8082                	ret

20000db0 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20000db0:	c515                	beqz	a0,20000ddc <dif_uart_loopback_set+0x2c>
20000db2:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20000db4:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20000db6:	0015b593          	seqz	a1,a1
20000dba:	4715                	li	a4,5
20000dbc:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dc0:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20000dc2:	00163613          	seqz	a2,a2
20000dc6:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000dc8:	00b797b3          	sll	a5,a5,a1
20000dcc:	fff7c793          	not	a5,a5
20000dd0:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000dd2:	00b615b3          	sll	a1,a2,a1
20000dd6:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000dd8:	c54c                	sw	a1,12(a0)
20000dda:	a011                	j	20000dde <dif_uart_loopback_set+0x2e>
20000ddc:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20000dde:	8536                	mv	a0,a3
20000de0:	8082                	ret

20000de2 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20000de2:	862a                	mv	a2,a0
20000de4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20000de6:	ca11                	beqz	a2,20000dfa <dif_uart_enable_rx_timeout+0x18>
20000de8:	0185d693          	srli	a3,a1,0x18
20000dec:	e699                	bnez	a3,20000dfa <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000dee:	4210                	lw	a2,0(a2)
20000df0:	4501                	li	a0,0
20000df2:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000df6:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000df8:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20000dfa:	8082                	ret

20000dfc <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20000dfc:	c511                	beqz	a0,20000e08 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20000dfe:	410c                	lw	a1,0(a0)
20000e00:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e02:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20000e06:	8082                	ret
20000e08:	4509                	li	a0,2
20000e0a:	8082                	ret

20000e0c <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20000e0c:	86aa                	mv	a3,a0
20000e0e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20000e10:	ce99                	beqz	a3,20000e2e <dif_uart_get_rx_timeout+0x22>
20000e12:	cd91                	beqz	a1,20000e2e <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20000e14:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e16:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20000e18:	fff6c513          	not	a0,a3
20000e1c:	817d                	srli	a0,a0,0x1f
20000e1e:	c188                	sw	a0,0(a1)
20000e20:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20000e22:	c611                	beqz	a2,20000e2e <dif_uart_get_rx_timeout+0x22>
20000e24:	010005b7          	lui	a1,0x1000
20000e28:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000e2a:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20000e2c:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20000e2e:	8082                	ret

20000e30 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20000e30:	1141                	addi	sp,sp,-16
20000e32:	c606                	sw	ra,12(sp)
20000e34:	c422                	sw	s0,8(sp)
20000e36:	6511                	lui	a0,0x4
20000e38:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000e3c:	2221                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20000e3e:	00001517          	auipc	a0,0x1
20000e42:	0ca50513          	addi	a0,a0,202 # 20001f08 <kDeviceType>
20000e46:	4108                	lw	a0,0(a0)
20000e48:	c111                	beqz	a0,20000e4c <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000e4a:	280d                	jal	20000e7c <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000e4c:	24b1                	jal	20001098 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20000e4e:	00001597          	auipc	a1,0x1
20000e52:	10258593          	addi	a1,a1,258 # 20001f50 <kTestConfig>
20000e56:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000e5a:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000e5c:	c191                	beqz	a1,20000e60 <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20000e5e:	2839                	jal	20000e7c <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20000e60:	2245                	jal	20001000 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20000e62:	e409                	bnez	s0,20000e6c <main+0x3c>
20000e64:	6531                	lui	a0,0xc
20000e66:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000e6a:	a019                	j	20000e70 <main+0x40>
20000e6c:	6525                	lui	a0,0x9
20000e6e:	0535                	addi	a0,a0,13
20000e70:	28d1                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20000e72:	4505                	li	a0,1
20000e74:	4422                	lw	s0,8(sp)
20000e76:	40b2                	lw	ra,12(sp)
20000e78:	0141                	addi	sp,sp,16
20000e7a:	8082                	ret

20000e7c <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000e7c:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000e7e:	ce06                	sw	ra,28(sp)
20000e80:	cc22                	sw	s0,24(sp)
20000e82:	ca26                	sw	s1,20(sp)
20000e84:	effff597          	auipc	a1,0xeffff
20000e88:	1b858593          	addi	a1,a1,440 # 1000003c <uart0>
20000e8c:	40000537          	lui	a0,0x40000
20000e90:	3ee1                	jal	20000a68 <dif_uart_init>
20000e92:	00001497          	auipc	s1,0x1
20000e96:	0a648493          	addi	s1,s1,166 # 20001f38 <kDeviceLogBypassUartAddress>
20000e9a:	c915                	beqz	a0,20000ece <init_uart+0x52>
20000e9c:	4088                	lw	a0,0(s1)
20000e9e:	c909                	beqz	a0,20000eb0 <init_uart+0x34>
20000ea0:	e000f517          	auipc	a0,0xe000f
20000ea4:	1d850513          	addi	a0,a0,472 # 10078 <init_uart.kLogFields>
20000ea8:	4581                	li	a1,0
20000eaa:	ec4ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000eae:	a821                	j	20000ec6 <init_uart+0x4a>
20000eb0:	00001597          	auipc	a1,0x1
20000eb4:	00858593          	addi	a1,a1,8 # 20001eb8 <kDifUartFifoSizeBytes+0x4>
20000eb8:	840a                	mv	s0,sp
20000eba:	4651                	li	a2,20
20000ebc:	8522                	mv	a0,s0
20000ebe:	22b9                	jal	2000100c <memcpy>
20000ec0:	8522                	mv	a0,s0
20000ec2:	e02ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000ec6:	6531                	lui	a0,0xc
20000ec8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000ecc:	28a5                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20000ece:	00001517          	auipc	a0,0x1
20000ed2:	05a50513          	addi	a0,a0,90 # 20001f28 <kUartBaudrate>
20000ed6:	4108                	lw	a0,0(a0)
20000ed8:	00001597          	auipc	a1,0x1
20000edc:	04058593          	addi	a1,a1,64 # 20001f18 <kClockFreqPeripheralHz>
20000ee0:	418c                	lw	a1,0(a1)
20000ee2:	c02a                	sw	a0,0(sp)
20000ee4:	c22e                	sw	a1,4(sp)
20000ee6:	4505                	li	a0,1
20000ee8:	c42a                	sw	a0,8(sp)
20000eea:	c62a                	sw	a0,12(sp)
20000eec:	effff517          	auipc	a0,0xeffff
20000ef0:	15050513          	addi	a0,a0,336 # 1000003c <uart0>
20000ef4:	858a                	mv	a1,sp
20000ef6:	3641                	jal	20000a76 <dif_uart_configure>
20000ef8:	c915                	beqz	a0,20000f2c <init_uart+0xb0>
20000efa:	4088                	lw	a0,0(s1)
20000efc:	c909                	beqz	a0,20000f0e <init_uart+0x92>
20000efe:	e000f517          	auipc	a0,0xe000f
20000f02:	18e50513          	addi	a0,a0,398 # 1008c <init_uart.kLogFields.2>
20000f06:	4581                	li	a1,0
20000f08:	e66ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20000f0c:	a821                	j	20000f24 <init_uart+0xa8>
20000f0e:	00001597          	auipc	a1,0x1
20000f12:	fbe58593          	addi	a1,a1,-66 # 20001ecc <kDifUartFifoSizeBytes+0x18>
20000f16:	840a                	mv	s0,sp
20000f18:	4651                	li	a2,20
20000f1a:	8522                	mv	a0,s0
20000f1c:	28c5                	jal	2000100c <memcpy>
20000f1e:	8522                	mv	a0,s0
20000f20:	da4ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000f24:	6531                	lui	a0,0xc
20000f26:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000f2a:	2829                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
20000f2c:	effff517          	auipc	a0,0xeffff
20000f30:	11050513          	addi	a0,a0,272 # 1000003c <uart0>
20000f34:	e8cff0ef          	jal	ra,200005c0 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000f38:	44d2                	lw	s1,20(sp)
20000f3a:	4462                	lw	s0,24(sp)
20000f3c:	40f2                	lw	ra,28(sp)
20000f3e:	6105                	addi	sp,sp,32
20000f40:	8082                	ret
	...

20000f44 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000f44:	1101                	addi	sp,sp,-32
20000f46:	ce06                	sw	ra,28(sp)
20000f48:	cc22                	sw	s0,24(sp)
20000f4a:	65b1                	lui	a1,0xc
20000f4c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20000f50:	02b50163          	beq	a0,a1,20000f72 <test_status_set+0x2e>
20000f54:	65a5                	lui	a1,0x9
20000f56:	05b5                	addi	a1,a1,13
20000f58:	02b50f63          	beq	a0,a1,20000f96 <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000f5c:	00001597          	auipc	a1,0x1
20000f60:	fd858593          	addi	a1,a1,-40 # 20001f34 <kDeviceTestStatusAddress>
20000f64:	418c                	lw	a1,0(a1)
20000f66:	c191                	beqz	a1,20000f6a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f68:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000f6a:	4462                	lw	s0,24(sp)
20000f6c:	40f2                	lw	ra,28(sp)
20000f6e:	6105                	addi	sp,sp,32
20000f70:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000f72:	00001517          	auipc	a0,0x1
20000f76:	fc650513          	addi	a0,a0,-58 # 20001f38 <kDeviceLogBypassUartAddress>
20000f7a:	4108                	lw	a0,0(a0)
20000f7c:	ed1d                	bnez	a0,20000fba <test_status_set+0x76>
20000f7e:	00001597          	auipc	a1,0x1
20000f82:	f7658593          	addi	a1,a1,-138 # 20001ef4 <kDifUartFifoSizeBytes+0x40>
20000f86:	840a                	mv	s0,sp
20000f88:	4651                	li	a2,20
20000f8a:	8522                	mv	a0,s0
20000f8c:	2041                	jal	2000100c <memcpy>
20000f8e:	8522                	mv	a0,s0
20000f90:	d34ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000f94:	a815                	j	20000fc8 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000f96:	00001517          	auipc	a0,0x1
20000f9a:	fa250513          	addi	a0,a0,-94 # 20001f38 <kDeviceLogBypassUartAddress>
20000f9e:	4108                	lw	a0,0(a0)
20000fa0:	ed15                	bnez	a0,20000fdc <test_status_set+0x98>
20000fa2:	00001597          	auipc	a1,0x1
20000fa6:	f3e58593          	addi	a1,a1,-194 # 20001ee0 <kDifUartFifoSizeBytes+0x2c>
20000faa:	840a                	mv	s0,sp
20000fac:	4651                	li	a2,20
20000fae:	8522                	mv	a0,s0
20000fb0:	28b1                	jal	2000100c <memcpy>
20000fb2:	8522                	mv	a0,s0
20000fb4:	d10ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20000fb8:	a80d                	j	20000fea <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000fba:	e000f517          	auipc	a0,0xe000f
20000fbe:	0fa50513          	addi	a0,a0,250 # 100b4 <test_status_set.kLogFields.2>
20000fc2:	4581                	li	a1,0
20000fc4:	daaff0ef          	jal	ra,2000056e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000fc8:	00001517          	auipc	a0,0x1
20000fcc:	f6c50513          	addi	a0,a0,-148 # 20001f34 <kDeviceTestStatusAddress>
20000fd0:	4108                	lw	a0,0(a0)
20000fd2:	c50d                	beqz	a0,20000ffc <test_status_set+0xb8>
20000fd4:	65b1                	lui	a1,0xc
20000fd6:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20000fda:	a005                	j	20000ffa <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000fdc:	e000f517          	auipc	a0,0xe000f
20000fe0:	0c450513          	addi	a0,a0,196 # 100a0 <test_status_set.kLogFields>
20000fe4:	4581                	li	a1,0
20000fe6:	d88ff0ef          	jal	ra,2000056e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000fea:	00001517          	auipc	a0,0x1
20000fee:	f4a50513          	addi	a0,a0,-182 # 20001f34 <kDeviceTestStatusAddress>
20000ff2:	4108                	lw	a0,0(a0)
20000ff4:	c501                	beqz	a0,20000ffc <test_status_set+0xb8>
20000ff6:	65a5                	lui	a1,0x9
20000ff8:	05b5                	addi	a1,a1,13
20000ffa:	c10c                	sw	a1,0(a0)
20000ffc:	a04ff0ef          	jal	ra,20000200 <abort>

20001000 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20001000:	8082                	ret
	...

20001004 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20001004:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20001006:	8082                	ret

20001008 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20001008:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
2000100a:	8082                	ret

2000100c <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
2000100c:	ca11                	beqz	a2,20001020 <memcpy+0x14>
2000100e:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20001010:	00058703          	lb	a4,0(a1) # 9000 <_stack_size+0x7000>
20001014:	00e68023          	sb	a4,0(a3) # 80000000 <_otbn_app_err_test__dmem_end+0x5fffd5e0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20001018:	167d                	addi	a2,a2,-1
2000101a:	0685                	addi	a3,a3,1
2000101c:	0585                	addi	a1,a1,1
2000101e:	fa6d                	bnez	a2,20001010 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20001020:	8082                	ret

20001022 <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001022:	c619                	beqz	a2,20001030 <memset+0xe>
20001024:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20001026:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
2000102a:	167d                	addi	a2,a2,-1
2000102c:	0685                	addi	a3,a3,1
2000102e:	fe65                	bnez	a2,20001026 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20001030:	8082                	ret

20001032 <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20001032:	ce09                	beqz	a2,2000104c <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20001034:	00054683          	lbu	a3,0(a0)
20001038:	0005c703          	lbu	a4,0(a1)
2000103c:	00e6ea63          	bltu	a3,a4,20001050 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20001040:	00d76b63          	bltu	a4,a3,20001056 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20001044:	167d                	addi	a2,a2,-1
20001046:	0585                	addi	a1,a1,1
20001048:	0505                	addi	a0,a0,1
2000104a:	f66d                	bnez	a2,20001034 <memcmp+0x2>
2000104c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
2000104e:	8082                	ret
20001050:	fd600513          	li	a0,-42
20001054:	8082                	ret
20001056:	02a00513          	li	a0,42
2000105a:	8082                	ret

2000105c <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000105c:	ca11                	beqz	a2,20001070 <memchr+0x14>
2000105e:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20001062:	00054683          	lbu	a3,0(a0)
20001066:	00b68663          	beq	a3,a1,20001072 <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
2000106a:	167d                	addi	a2,a2,-1
2000106c:	0505                	addi	a0,a0,1
2000106e:	fa75                	bnez	a2,20001062 <memchr+0x6>
20001070:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20001072:	8082                	ret

20001074 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001074:	ce09                	beqz	a2,2000108e <memrchr+0x1a>
20001076:	fff50693          	addi	a3,a0,-1
2000107a:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
2000107e:	00c68733          	add	a4,a3,a2
20001082:	00074703          	lbu	a4,0(a4)
20001086:	00b70663          	beq	a4,a1,20001092 <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
2000108a:	167d                	addi	a2,a2,-1
2000108c:	fa6d                	bnez	a2,2000107e <memrchr+0xa>
2000108e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20001090:	8082                	ret
20001092:	9532                	add	a0,a0,a2
20001094:	157d                	addi	a0,a0,-1
20001096:	8082                	ret

20001098 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:148
  CHECK(otbn_busy_wait_for_done(otbn_ctx) == kOtbnExecutionFailed);

  check_otbn_err_bits(otbn_ctx, kDifOtbnErrBitsBadDataAddr);
}

bool test_main() {
20001098:	7175                	addi	sp,sp,-144
2000109a:	c706                	sw	ra,140(sp)
2000109c:	c522                	sw	s0,136(sp)
2000109e:	c326                	sw	s1,132(sp)
200010a0:	c14a                	sw	s2,128(sp)
200010a2:	dece                	sw	s3,124(sp)
200010a4:	dcd2                	sw	s4,120(sp)
200010a6:	dad6                	sw	s5,116(sp)
200010a8:	d8da                	sw	s6,112(sp)
200010aa:	d6de                	sw	s7,108(sp)
200010ac:	d4e2                	sw	s8,104(sp)
200010ae:	d2e6                	sw	s9,100(sp)
200010b0:	d0ea                	sw	s10,96(sp)
200010b2:	41160537          	lui	a0,0x41160
200010b6:	4589                	li	a1,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010b8:	cd0c                	sw	a1,24(a0)
200010ba:	41150537          	lui	a0,0x41150
200010be:	4585                	li	a1,1
200010c0:	c94c                	sw	a1,20(a0)
200010c2:	41170537          	lui	a0,0x41170
200010c6:	45a5                	li	a1,9
200010c8:	c94c                	sw	a1,20(a0)
200010ca:	41180537          	lui	a0,0x41180
200010ce:	c94c                	sw	a1,20(a0)
200010d0:	850a                	mv	a0,sp
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:156
  dif_otbn_config_t otbn_config = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_OTBN_BASE_ADDR),
  };

  otbn_t otbn_ctx;
  CHECK(otbn_init(&otbn_ctx, otbn_config) == kOtbnOk);
200010d2:	411d05b7          	lui	a1,0x411d0
200010d6:	023000ef          	jal	ra,200018f8 <otbn_init>
200010da:	00001497          	auipc	s1,0x1
200010de:	e5e48493          	addi	s1,s1,-418 # 20001f38 <kDeviceLogBypassUartAddress>
200010e2:	c915                	beqz	a0,20001116 <test_main+0x7e>
200010e4:	4088                	lw	a0,0(s1)
200010e6:	c909                	beqz	a0,200010f8 <test_main+0x60>
200010e8:	e000f517          	auipc	a0,0xe000f
200010ec:	fe050513          	addi	a0,a0,-32 # 100c8 <test_main.kLogFields>
200010f0:	4581                	li	a1,0
200010f2:	c7cff0ef          	jal	ra,2000056e <base_log_internal_dv>
200010f6:	a821                	j	2000110e <test_main+0x76>
200010f8:	00001597          	auipc	a1,0x1
200010fc:	e4458593          	addi	a1,a1,-444 # 20001f3c <kDeviceLogBypassUartAddress+0x4>
20001100:	1800                	addi	s0,sp,48
20001102:	4651                	li	a2,20
20001104:	8522                	mv	a0,s0
20001106:	3719                	jal	2000100c <memcpy>
20001108:	8522                	mv	a0,s0
2000110a:	bbaff0ef          	jal	ra,200004c4 <base_log_internal_core>
2000110e:	6531                	lui	a0,0xc
20001110:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001114:	3d05                	jal	20000f44 <test_status_set>
20001116:	850a                	mv	a0,sp
test_barrett384():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:73
  CHECK(otbn_zero_data_memory(otbn_ctx) == kOtbnOk);
20001118:	103000ef          	jal	ra,20001a1a <otbn_zero_data_memory>
2000111c:	c915                	beqz	a0,20001150 <test_main+0xb8>
2000111e:	4088                	lw	a0,0(s1)
20001120:	c909                	beqz	a0,20001132 <test_main+0x9a>
20001122:	e000f517          	auipc	a0,0xe000f
20001126:	fba50513          	addi	a0,a0,-70 # 100dc <test_barrett384.kLogFields>
2000112a:	4581                	li	a1,0
2000112c:	c42ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20001130:	a821                	j	20001148 <test_main+0xb0>
20001132:	00001597          	auipc	a1,0x1
20001136:	e2258593          	addi	a1,a1,-478 # 20001f54 <kTestConfig+0x4>
2000113a:	1800                	addi	s0,sp,48
2000113c:	4651                	li	a2,20
2000113e:	8522                	mv	a0,s0
20001140:	35f1                	jal	2000100c <memcpy>
20001142:	8522                	mv	a0,s0
20001144:	b80ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001148:	6531                	lui	a0,0xc
2000114a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000114e:	3bdd                	jal	20000f44 <test_status_set>
20001150:	00001517          	auipc	a0,0x1
20001154:	e1850513          	addi	a0,a0,-488 # 20001f68 <kAppBarrett>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:74
  CHECK(otbn_load_app(otbn_ctx, kAppBarrett) == kOtbnOk);
20001158:	454c                	lw	a1,12(a0)
2000115a:	4510                	lw	a2,8(a0)
2000115c:	4154                	lw	a3,4(a0)
2000115e:	4108                	lw	a0,0(a0)
20001160:	de2e                	sw	a1,60(sp)
20001162:	dc32                	sw	a2,56(sp)
20001164:	da36                	sw	a3,52(sp)
20001166:	d82a                	sw	a0,48(sp)
20001168:	850a                	mv	a0,sp
2000116a:	180c                	addi	a1,sp,48
2000116c:	7ae000ef          	jal	ra,2000191a <otbn_load_app>
20001170:	c915                	beqz	a0,200011a4 <test_main+0x10c>
20001172:	4088                	lw	a0,0(s1)
20001174:	c909                	beqz	a0,20001186 <test_main+0xee>
20001176:	e000f517          	auipc	a0,0xe000f
2000117a:	f7a50513          	addi	a0,a0,-134 # 100f0 <test_barrett384.kLogFields.3>
2000117e:	4581                	li	a1,0
20001180:	beeff0ef          	jal	ra,2000056e <base_log_internal_dv>
20001184:	a821                	j	2000119c <test_main+0x104>
20001186:	00001597          	auipc	a1,0x1
2000118a:	df258593          	addi	a1,a1,-526 # 20001f78 <kAppBarrett+0x10>
2000118e:	1800                	addi	s0,sp,48
20001190:	4651                	li	a2,20
20001192:	8522                	mv	a0,s0
20001194:	3da5                	jal	2000100c <memcpy>
20001196:	8522                	mv	a0,s0
20001198:	b2cff0ef          	jal	ra,200004c4 <base_log_internal_core>
2000119c:	6531                	lui	a0,0xc
2000119e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200011a2:	334d                	jal	20000f44 <test_status_set>
200011a4:	03010913          	addi	s2,sp,48
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:100
  uint8_t c[kDataSizeBytes] = {0};
200011a8:	03000613          	li	a2,48
200011ac:	854a                	mv	a0,s2
200011ae:	4581                	li	a1,0
200011b0:	3d8d                	jal	20001022 <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:107
  CHECK(dif_otbn_dmem_write(&otbn_ctx->dif, /*offset_bytes=*/0, &a,
200011b2:	00001617          	auipc	a2,0x1
200011b6:	dda60613          	addi	a2,a2,-550 # 20001f8c <test_barrett384.a>
200011ba:	850a                	mv	a0,sp
200011bc:	03000693          	li	a3,48
200011c0:	4581                	li	a1,0
200011c2:	21cd                	jal	200016a4 <dif_otbn_dmem_write>
200011c4:	c915                	beqz	a0,200011f8 <test_main+0x160>
200011c6:	4088                	lw	a0,0(s1)
200011c8:	c909                	beqz	a0,200011da <test_main+0x142>
200011ca:	e000f517          	auipc	a0,0xe000f
200011ce:	f3a50513          	addi	a0,a0,-198 # 10104 <test_barrett384.kLogFields.6>
200011d2:	4581                	li	a1,0
200011d4:	b9aff0ef          	jal	ra,2000056e <base_log_internal_dv>
200011d8:	a821                	j	200011f0 <test_main+0x158>
200011da:	00001597          	auipc	a1,0x1
200011de:	e7258593          	addi	a1,a1,-398 # 2000204c <test_barrett384.c_expected+0x30>
200011e2:	0820                	addi	s0,sp,24
200011e4:	4651                	li	a2,20
200011e6:	8522                	mv	a0,s0
200011e8:	3515                	jal	2000100c <memcpy>
200011ea:	8522                	mv	a0,s0
200011ec:	ad8ff0ef          	jal	ra,200004c4 <base_log_internal_core>
200011f0:	6531                	lui	a0,0xc
200011f2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200011f6:	33b9                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:109
  CHECK(dif_otbn_dmem_write(&otbn_ctx->dif, /*offset_bytes=*/64, &b,
200011f8:	effff617          	auipc	a2,0xeffff
200011fc:	e1060613          	addi	a2,a2,-496 # 10000008 <test_barrett384.b>
20001200:	850a                	mv	a0,sp
20001202:	04000593          	li	a1,64
20001206:	03000693          	li	a3,48
2000120a:	2969                	jal	200016a4 <dif_otbn_dmem_write>
2000120c:	c915                	beqz	a0,20001240 <test_main+0x1a8>
2000120e:	4088                	lw	a0,0(s1)
20001210:	c909                	beqz	a0,20001222 <test_main+0x18a>
20001212:	e000f517          	auipc	a0,0xe000f
20001216:	f0650513          	addi	a0,a0,-250 # 10118 <test_barrett384.kLogFields.9>
2000121a:	4581                	li	a1,0
2000121c:	b52ff0ef          	jal	ra,2000056e <base_log_internal_dv>
20001220:	a821                	j	20001238 <test_main+0x1a0>
20001222:	00001597          	auipc	a1,0x1
20001226:	e3e58593          	addi	a1,a1,-450 # 20002060 <test_barrett384.c_expected+0x44>
2000122a:	0820                	addi	s0,sp,24
2000122c:	4651                	li	a2,20
2000122e:	8522                	mv	a0,s0
20001230:	3bf1                	jal	2000100c <memcpy>
20001232:	8522                	mv	a0,s0
20001234:	a90ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001238:	6531                	lui	a0,0xc
2000123a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000123e:	3319                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:111
  CHECK(dif_otbn_dmem_write(&otbn_ctx->dif, /*offset_bytes=*/256, &m,
20001240:	00001617          	auipc	a2,0x1
20001244:	d7c60613          	addi	a2,a2,-644 # 20001fbc <test_barrett384.m>
20001248:	850a                	mv	a0,sp
2000124a:	10000593          	li	a1,256
2000124e:	03000693          	li	a3,48
20001252:	2989                	jal	200016a4 <dif_otbn_dmem_write>
20001254:	c915                	beqz	a0,20001288 <test_main+0x1f0>
20001256:	4088                	lw	a0,0(s1)
20001258:	c909                	beqz	a0,2000126a <test_main+0x1d2>
2000125a:	e000f517          	auipc	a0,0xe000f
2000125e:	ed250513          	addi	a0,a0,-302 # 1012c <test_barrett384.kLogFields.12>
20001262:	4581                	li	a1,0
20001264:	b0aff0ef          	jal	ra,2000056e <base_log_internal_dv>
20001268:	a821                	j	20001280 <test_main+0x1e8>
2000126a:	00001597          	auipc	a1,0x1
2000126e:	e0a58593          	addi	a1,a1,-502 # 20002074 <test_barrett384.c_expected+0x58>
20001272:	0820                	addi	s0,sp,24
20001274:	4651                	li	a2,20
20001276:	8522                	mv	a0,s0
20001278:	3b51                	jal	2000100c <memcpy>
2000127a:	8522                	mv	a0,s0
2000127c:	a48ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001280:	6531                	lui	a0,0xc
20001282:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001286:	397d                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:113
  CHECK(dif_otbn_dmem_write(&otbn_ctx->dif, /*offset_bytes=*/320, &u,
20001288:	00001617          	auipc	a2,0x1
2000128c:	d6460613          	addi	a2,a2,-668 # 20001fec <test_barrett384.u>
20001290:	850a                	mv	a0,sp
20001292:	14000593          	li	a1,320
20001296:	03000693          	li	a3,48
2000129a:	2129                	jal	200016a4 <dif_otbn_dmem_write>
2000129c:	c915                	beqz	a0,200012d0 <test_main+0x238>
2000129e:	4088                	lw	a0,0(s1)
200012a0:	c909                	beqz	a0,200012b2 <test_main+0x21a>
200012a2:	e000f517          	auipc	a0,0xe000f
200012a6:	e9e50513          	addi	a0,a0,-354 # 10140 <test_barrett384.kLogFields.15>
200012aa:	4581                	li	a1,0
200012ac:	ac2ff0ef          	jal	ra,2000056e <base_log_internal_dv>
200012b0:	a821                	j	200012c8 <test_main+0x230>
200012b2:	00001597          	auipc	a1,0x1
200012b6:	dd658593          	addi	a1,a1,-554 # 20002088 <test_barrett384.c_expected+0x6c>
200012ba:	0820                	addi	s0,sp,24
200012bc:	4651                	li	a2,20
200012be:	8522                	mv	a0,s0
200012c0:	33b1                	jal	2000100c <memcpy>
200012c2:	8522                	mv	a0,s0
200012c4:	a00ff0ef          	jal	ra,200004c4 <base_log_internal_core>
200012c8:	6531                	lui	a0,0xc
200012ca:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200012ce:	399d                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:116
  CHECK(otbn_call_function(otbn_ctx, kFuncWrapBarrett384) == kOtbnOk);
200012d0:	00001597          	auipc	a1,0x1
200012d4:	6ec58593          	addi	a1,a1,1772 # 200029bc <_otbn_app_barrett384_wrap_barrett384>
200012d8:	850a                	mv	a0,sp
200012da:	6b2000ef          	jal	ra,2000198c <otbn_call_function>
200012de:	0004ac03          	lw	s8,0(s1)
200012e2:	c915                	beqz	a0,20001316 <test_main+0x27e>
200012e4:	000c0a63          	beqz	s8,200012f8 <test_main+0x260>
200012e8:	e000f517          	auipc	a0,0xe000f
200012ec:	e6c50513          	addi	a0,a0,-404 # 10154 <test_barrett384.kLogFields.18>
200012f0:	4581                	li	a1,0
200012f2:	a7cff0ef          	jal	ra,2000056e <base_log_internal_dv>
200012f6:	a821                	j	2000130e <test_main+0x276>
200012f8:	00001597          	auipc	a1,0x1
200012fc:	da458593          	addi	a1,a1,-604 # 2000209c <test_barrett384.c_expected+0x80>
20001300:	0820                	addi	s0,sp,24
20001302:	4651                	li	a2,20
20001304:	8522                	mv	a0,s0
20001306:	3319                	jal	2000100c <memcpy>
20001308:	8522                	mv	a0,s0
2000130a:	9baff0ef          	jal	ra,200004c4 <base_log_internal_core>
2000130e:	6531                	lui	a0,0xc
20001310:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001314:	3905                	jal	20000f44 <test_status_set>
20001316:	850a                	mv	a0,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:117
  CHECK(otbn_busy_wait_for_done(otbn_ctx) == kOtbnOk);
20001318:	2b71                	jal	200018b4 <otbn_busy_wait_for_done>
2000131a:	c915                	beqz	a0,2000134e <test_main+0x2b6>
2000131c:	000c0a63          	beqz	s8,20001330 <test_main+0x298>
20001320:	e000f517          	auipc	a0,0xe000f
20001324:	e4850513          	addi	a0,a0,-440 # 10168 <test_barrett384.kLogFields.21>
20001328:	4581                	li	a1,0
2000132a:	a44ff0ef          	jal	ra,2000056e <base_log_internal_dv>
2000132e:	a821                	j	20001346 <test_main+0x2ae>
20001330:	00001597          	auipc	a1,0x1
20001334:	d8058593          	addi	a1,a1,-640 # 200020b0 <test_barrett384.c_expected+0x94>
20001338:	0820                	addi	s0,sp,24
2000133a:	4651                	li	a2,20
2000133c:	8522                	mv	a0,s0
2000133e:	31f9                	jal	2000100c <memcpy>
20001340:	8522                	mv	a0,s0
20001342:	982ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001346:	6531                	lui	a0,0xc
20001348:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000134c:	3ee5                	jal	20000f44 <test_status_set>
2000134e:	850a                	mv	a0,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:120
  dif_otbn_dmem_read(&otbn_ctx->dif, 512, &c, sizeof(c));
20001350:	20000593          	li	a1,512
20001354:	03000693          	li	a3,48
20001358:	03000c93          	li	s9,48
2000135c:	864a                	mv	a2,s2
2000135e:	2ea5                	jal	200016d6 <dif_otbn_dmem_read>
20001360:	4481                	li	s1,0
20001362:	00001d17          	auipc	s10,0x1
20001366:	cbad0d13          	addi	s10,s10,-838 # 2000201c <test_barrett384.c_expected>
2000136a:	00001a17          	auipc	s4,0x1
2000136e:	d5aa0a13          	addi	s4,s4,-678 # 200020c4 <test_barrett384.c_expected+0xa8>
20001372:	01810993          	addi	s3,sp,24
20001376:	6531                	lui	a0,0xc
20001378:	aad50b13          	addi	s6,a0,-1363 # baad <_stack_size+0x9aad>
2000137c:	e000fa97          	auipc	s5,0xe000f
20001380:	e00a8a93          	addi	s5,s5,-512 # 1017c <test_barrett384.kLogFields.24>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:123
    CHECK(c[i] == c_expected[i],
20001384:	00990533          	add	a0,s2,s1
20001388:	00054403          	lbu	s0,0(a0)
2000138c:	01a48533          	add	a0,s1,s10
20001390:	00054b83          	lbu	s7,0(a0)
20001394:	03740863          	beq	s0,s7,200013c4 <test_main+0x32c>
20001398:	000c0a63          	beqz	s8,200013ac <test_main+0x314>
2000139c:	458d                	li	a1,3
2000139e:	8556                	mv	a0,s5
200013a0:	8626                	mv	a2,s1
200013a2:	86a2                	mv	a3,s0
200013a4:	875e                	mv	a4,s7
200013a6:	9c8ff0ef          	jal	ra,2000056e <base_log_internal_dv>
200013aa:	a819                	j	200013c0 <test_main+0x328>
200013ac:	4651                	li	a2,20
200013ae:	854e                	mv	a0,s3
200013b0:	85d2                	mv	a1,s4
200013b2:	39a9                	jal	2000100c <memcpy>
200013b4:	854e                	mv	a0,s3
200013b6:	85a6                	mv	a1,s1
200013b8:	8622                	mv	a2,s0
200013ba:	86de                	mv	a3,s7
200013bc:	908ff0ef          	jal	ra,200004c4 <base_log_internal_core>
200013c0:	855a                	mv	a0,s6
200013c2:	3649                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:122
  for (int i = 0; i < sizeof(c); ++i) {
200013c4:	0485                	addi	s1,s1,1
200013c6:	fb949fe3          	bne	s1,s9,20001384 <test_main+0x2ec>
200013ca:	00001517          	auipc	a0,0x1
200013ce:	d0e50513          	addi	a0,a0,-754 # 200020d8 <kAppErrTest>
test_err_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:140
  CHECK(otbn_load_app(otbn_ctx, kAppErrTest) == kOtbnOk);
200013d2:	454c                	lw	a1,12(a0)
200013d4:	4510                	lw	a2,8(a0)
200013d6:	4154                	lw	a3,4(a0)
200013d8:	4108                	lw	a0,0(a0)
200013da:	de2e                	sw	a1,60(sp)
200013dc:	dc32                	sw	a2,56(sp)
200013de:	da36                	sw	a3,52(sp)
200013e0:	d82a                	sw	a0,48(sp)
200013e2:	850a                	mv	a0,sp
200013e4:	180c                	addi	a1,sp,48
200013e6:	2b15                	jal	2000191a <otbn_load_app>
200013e8:	c915                	beqz	a0,2000141c <test_main+0x384>
200013ea:	000c0a63          	beqz	s8,200013fe <test_main+0x366>
200013ee:	e000f517          	auipc	a0,0xe000f
200013f2:	da250513          	addi	a0,a0,-606 # 10190 <test_err_test.kLogFields>
200013f6:	4581                	li	a1,0
200013f8:	976ff0ef          	jal	ra,2000056e <base_log_internal_dv>
200013fc:	a821                	j	20001414 <test_main+0x37c>
200013fe:	00001597          	auipc	a1,0x1
20001402:	cea58593          	addi	a1,a1,-790 # 200020e8 <kAppErrTest+0x10>
20001406:	1800                	addi	s0,sp,48
20001408:	4651                	li	a2,20
2000140a:	8522                	mv	a0,s0
2000140c:	3101                	jal	2000100c <memcpy>
2000140e:	8522                	mv	a0,s0
20001410:	8b4ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001414:	6531                	lui	a0,0xc
20001416:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000141a:	362d                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:142
  CHECK(otbn_call_function(otbn_ctx, kFuncWrapErrTest) == kOtbnOk);
2000141c:	00001597          	auipc	a1,0x1
20001420:	5e458593          	addi	a1,a1,1508 # 20002a00 <_otbn_app_barrett384__dmem_end>
20001424:	850a                	mv	a0,sp
20001426:	239d                	jal	2000198c <otbn_call_function>
20001428:	c915                	beqz	a0,2000145c <test_main+0x3c4>
2000142a:	000c0a63          	beqz	s8,2000143e <test_main+0x3a6>
2000142e:	e000f517          	auipc	a0,0xe000f
20001432:	d7650513          	addi	a0,a0,-650 # 101a4 <test_err_test.kLogFields.28>
20001436:	4581                	li	a1,0
20001438:	936ff0ef          	jal	ra,2000056e <base_log_internal_dv>
2000143c:	a821                	j	20001454 <test_main+0x3bc>
2000143e:	00001597          	auipc	a1,0x1
20001442:	cbe58593          	addi	a1,a1,-834 # 200020fc <kAppErrTest+0x24>
20001446:	1800                	addi	s0,sp,48
20001448:	4651                	li	a2,20
2000144a:	8522                	mv	a0,s0
2000144c:	36c1                	jal	2000100c <memcpy>
2000144e:	8522                	mv	a0,s0
20001450:	874ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001454:	6531                	lui	a0,0xc
20001456:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000145a:	34ed                	jal	20000f44 <test_status_set>
2000145c:	850a                	mv	a0,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:143
  CHECK(otbn_busy_wait_for_done(otbn_ctx) == kOtbnExecutionFailed);
2000145e:	2999                	jal	200018b4 <otbn_busy_wait_for_done>
20001460:	458d                	li	a1,3
20001462:	02b50b63          	beq	a0,a1,20001498 <test_main+0x400>
20001466:	000c0a63          	beqz	s8,2000147a <test_main+0x3e2>
2000146a:	e000f517          	auipc	a0,0xe000f
2000146e:	d4e50513          	addi	a0,a0,-690 # 101b8 <test_err_test.kLogFields.31>
20001472:	4581                	li	a1,0
20001474:	8faff0ef          	jal	ra,2000056e <base_log_internal_dv>
20001478:	a821                	j	20001490 <test_main+0x3f8>
2000147a:	00001597          	auipc	a1,0x1
2000147e:	c9658593          	addi	a1,a1,-874 # 20002110 <kAppErrTest+0x38>
20001482:	1800                	addi	s0,sp,48
20001484:	4651                	li	a2,20
20001486:	8522                	mv	a0,s0
20001488:	3651                	jal	2000100c <memcpy>
2000148a:	8522                	mv	a0,s0
2000148c:	838ff0ef          	jal	ra,200004c4 <base_log_internal_core>
20001490:	6531                	lui	a0,0xc
20001492:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001496:	347d                	jal	20000f44 <test_status_set>
20001498:	850a                	mv	a0,sp
2000149a:	082c                	addi	a1,sp,24
check_otbn_err_bits():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:52
  dif_otbn_result_t rv = dif_otbn_get_err_bits(&otbn_ctx->dif, &otbn_err_bits);
2000149c:	2a49                	jal	2000162e <dif_otbn_get_err_bits>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:53
  CHECK(rv == kDifOtbnOk, "dif_otbn_get_err_bits() failed: %d", rv);
2000149e:	cd0d                	beqz	a0,200014d8 <test_main+0x440>
200014a0:	842a                	mv	s0,a0
200014a2:	000c0b63          	beqz	s8,200014b8 <test_main+0x420>
200014a6:	e000f517          	auipc	a0,0xe000f
200014aa:	d2650513          	addi	a0,a0,-730 # 101cc <check_otbn_err_bits.kLogFields>
200014ae:	4585                	li	a1,1
200014b0:	8622                	mv	a2,s0
200014b2:	8bcff0ef          	jal	ra,2000056e <base_log_internal_dv>
200014b6:	a829                	j	200014d0 <test_main+0x438>
200014b8:	00001597          	auipc	a1,0x1
200014bc:	c6c58593          	addi	a1,a1,-916 # 20002124 <kAppErrTest+0x4c>
200014c0:	1804                	addi	s1,sp,48
200014c2:	4651                	li	a2,20
200014c4:	8526                	mv	a0,s1
200014c6:	3699                	jal	2000100c <memcpy>
200014c8:	8526                	mv	a0,s1
200014ca:	85a2                	mv	a1,s0
200014cc:	ff9fe0ef          	jal	ra,200004c4 <base_log_internal_core>
200014d0:	6531                	lui	a0,0xc
200014d2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200014d6:	34bd                	jal	20000f44 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:54
  CHECK(otbn_err_bits == expected_err_bits,
200014d8:	4462                	lw	s0,24(sp)
200014da:	4505                	li	a0,1
200014dc:	02a40d63          	beq	s0,a0,20001516 <test_main+0x47e>
200014e0:	000c0b63          	beqz	s8,200014f6 <test_main+0x45e>
200014e4:	e000f517          	auipc	a0,0xe000f
200014e8:	cfc50513          	addi	a0,a0,-772 # 101e0 <check_otbn_err_bits.kLogFields.35>
200014ec:	4585                	li	a1,1
200014ee:	8622                	mv	a2,s0
200014f0:	87eff0ef          	jal	ra,2000056e <base_log_internal_dv>
200014f4:	a829                	j	2000150e <test_main+0x476>
200014f6:	00001597          	auipc	a1,0x1
200014fa:	c4258593          	addi	a1,a1,-958 # 20002138 <kAppErrTest+0x60>
200014fe:	1804                	addi	s1,sp,48
20001500:	4651                	li	a2,20
20001502:	8526                	mv	a0,s1
20001504:	3621                	jal	2000100c <memcpy>
20001506:	8526                	mv	a0,s1
20001508:	85a2                	mv	a1,s0
2000150a:	fbbfe0ef          	jal	ra,200004c4 <base_log_internal_core>
2000150e:	6531                	lui	a0,0xc
20001510:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001514:	3c05                	jal	20000f44 <test_status_set>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otbn_smoketest.c:161

  test_barrett384(&otbn_ctx);
  test_err_test(&otbn_ctx);

  return true;
20001516:	4505                	li	a0,1
20001518:	5d06                	lw	s10,96(sp)
2000151a:	5c96                	lw	s9,100(sp)
2000151c:	5c26                	lw	s8,104(sp)
2000151e:	5bb6                	lw	s7,108(sp)
20001520:	5b46                	lw	s6,112(sp)
20001522:	5ad6                	lw	s5,116(sp)
20001524:	5a66                	lw	s4,120(sp)
20001526:	59f6                	lw	s3,124(sp)
20001528:	490a                	lw	s2,128(sp)
2000152a:	449a                	lw	s1,132(sp)
2000152c:	442a                	lw	s0,136(sp)
2000152e:	40ba                	lw	ra,140(sp)
20001530:	6149                	addi	sp,sp,144
20001532:	8082                	ret

20001534 <dif_otbn_init>:
dif_otbn_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:75
          offset_bytes + len_bytes >= len_bytes &&
          offset_bytes + len_bytes <= mem_size);
}

dif_otbn_result_t dif_otbn_init(const dif_otbn_config_t *config,
                                dif_otbn_t *otbn) {
20001534:	862a                	mv	a2,a0
20001536:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:76
  if (config == NULL || otbn == NULL) {
20001538:	ca11                	beqz	a2,2000154c <dif_otbn_init+0x18>
2000153a:	c989                	beqz	a1,2000154c <dif_otbn_init+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:80
    return kDifOtbnBadArg;
  }

  otbn->base_addr = config->base_addr;
2000153c:	4208                	lw	a0,0(a2)
2000153e:	c188                	sw	a0,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001540:	00052223          	sw	zero,4(a0)
dif_otbn_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:94
  }

  mmio_region_write32(otbn->base_addr, OTBN_INTR_ENABLE_REG_OFFSET, 0);

  // Clear all pending interrupts.
  mmio_region_write32(otbn->base_addr, OTBN_INTR_STATE_REG_OFFSET, 0xFFFFFFFF);
20001544:	418c                	lw	a1,0(a1)
20001546:	4501                	li	a0,0
20001548:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000154a:	c190                	sw	a2,0(a1)
dif_otbn_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:84
}
2000154c:	8082                	ret

2000154e <dif_otbn_reset>:
dif_otbn_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:87
  if (otbn == NULL) {
2000154e:	c909                	beqz	a0,20001560 <dif_otbn_reset+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:91
  mmio_region_write32(otbn->base_addr, OTBN_INTR_ENABLE_REG_OFFSET, 0);
20001550:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001552:	0005a223          	sw	zero,4(a1)
dif_otbn_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:94
  mmio_region_write32(otbn->base_addr, OTBN_INTR_STATE_REG_OFFSET, 0xFFFFFFFF);
20001556:	410c                	lw	a1,0(a0)
20001558:	4501                	li	a0,0
2000155a:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000155c:	c190                	sw	a2,0(a1)
dif_otbn_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:97

  return kDifOtbnOk;
}
2000155e:	8082                	ret
20001560:	4509                	li	a0,2
20001562:	8082                	ret

20001564 <dif_otbn_irq_state_get>:
dif_otbn_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:101

dif_otbn_result_t dif_otbn_irq_state_get(const dif_otbn_t *otbn,
                                         dif_otbn_interrupt_t irq_type,
                                         dif_otbn_enable_t *state) {
20001564:	86aa                	mv	a3,a0
20001566:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:102
  if (otbn == NULL || state == NULL) {
20001568:	c681                	beqz	a3,20001570 <dif_otbn_irq_state_get+0xc>
2000156a:	c219                	beqz	a2,20001570 <dif_otbn_irq_state_get+0xc>
2000156c:	4505                	li	a0,1
irq_bit_index_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:46
  switch (irq_type) {
2000156e:	c191                	beqz	a1,20001572 <dif_otbn_irq_state_get+0xe>
dif_otbn_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:117
      mmio_region_read32(otbn->base_addr, OTBN_INTR_STATE_REG_OFFSET),
      bit_index);
  *state = (enabled ? kDifOtbnEnable : kDifOtbnDisable);

  return kDifOtbnOk;
}
20001570:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:112
      mmio_region_read32(otbn->base_addr, OTBN_INTR_STATE_REG_OFFSET),
20001572:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001574:	410c                	lw	a1,0(a0)
20001576:	4501                	li	a0,0
20001578:	fff5c593          	not	a1,a1
dif_otbn_irq_state_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:114
  *state = (enabled ? kDifOtbnEnable : kDifOtbnDisable);
2000157c:	8985                	andi	a1,a1,1
2000157e:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:117
}
20001580:	8082                	ret

20001582 <dif_otbn_irq_state_clear>:
dif_otbn_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:121

dif_otbn_result_t dif_otbn_irq_state_clear(const dif_otbn_t *otbn,
                                           dif_otbn_interrupt_t irq_type) {
  if (otbn == NULL) {
20001582:	c509                	beqz	a0,2000158c <dif_otbn_irq_state_clear+0xa>
20001584:	862a                	mv	a2,a0
20001586:	4505                	li	a0,1
irq_bit_index_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:46
  switch (irq_type) {
20001588:	c581                	beqz	a1,20001590 <dif_otbn_irq_state_clear+0xe>
dif_otbn_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:136
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(otbn->base_addr, OTBN_INTR_STATE_REG_OFFSET,
                      register_value);

  return kDifOtbnOk;
}
2000158a:	8082                	ret
2000158c:	4509                	li	a0,2
2000158e:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:132
  mmio_region_write32(otbn->base_addr, OTBN_INTR_STATE_REG_OFFSET,
20001590:	420c                	lw	a1,0(a2)
20001592:	4501                	li	a0,0
20001594:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001596:	c190                	sw	a2,0(a1)
dif_otbn_irq_state_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:136
}
20001598:	8082                	ret

2000159a <dif_otbn_irqs_disable>:
dif_otbn_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:140

dif_otbn_result_t dif_otbn_irqs_disable(const dif_otbn_t *otbn,
                                        uint32_t *state) {
  if (otbn == NULL) {
2000159a:	c911                	beqz	a0,200015ae <dif_otbn_irqs_disable+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:145
    return kDifOtbnBadArg;
  }

  // Pass the interrupt state back to the caller.
  if (state != NULL) {
2000159c:	c581                	beqz	a1,200015a4 <dif_otbn_irqs_disable+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:146
    *state = mmio_region_read32(otbn->base_addr, OTBN_INTR_ENABLE_REG_OFFSET);
2000159e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200015a0:	4250                	lw	a2,4(a2)
dif_otbn_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:146
200015a2:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:150
  }

  // Disable all interrupts.
  mmio_region_write32(otbn->base_addr, OTBN_INTR_ENABLE_REG_OFFSET, 0u);
200015a4:	410c                	lw	a1,0(a0)
200015a6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200015a8:	0005a223          	sw	zero,4(a1)
dif_otbn_irqs_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:153

  return kDifOtbnOk;
}
200015ac:	8082                	ret
200015ae:	4509                	li	a0,2
200015b0:	8082                	ret

200015b2 <dif_otbn_irqs_restore>:
dif_otbn_irqs_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:157

dif_otbn_result_t dif_otbn_irqs_restore(const dif_otbn_t *otbn,
                                        uint32_t state) {
  if (otbn == NULL) {
200015b2:	c509                	beqz	a0,200015bc <dif_otbn_irqs_restore+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:162
    return kDifOtbnBadArg;
  }

  // Restore interrupt state.
  mmio_region_write32(otbn->base_addr, OTBN_INTR_ENABLE_REG_OFFSET, state);
200015b4:	4110                	lw	a2,0(a0)
200015b6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200015b8:	c24c                	sw	a1,4(a2)
dif_otbn_irqs_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:165

  return kDifOtbnOk;
}
200015ba:	8082                	ret
200015bc:	4509                	li	a0,2
200015be:	8082                	ret

200015c0 <dif_otbn_irq_control>:
dif_otbn_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:170

dif_otbn_result_t dif_otbn_irq_control(const dif_otbn_t *otbn,
                                       dif_otbn_interrupt_t irq_type,
                                       dif_otbn_enable_t enable) {
  if (otbn == NULL) {
200015c0:	c509                	beqz	a0,200015ca <dif_otbn_irq_control+0xa>
200015c2:	86aa                	mv	a3,a0
200015c4:	4505                	li	a0,1
irq_bit_index_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:46
  switch (irq_type) {
200015c6:	c581                	beqz	a1,200015ce <dif_otbn_irq_control+0xe>
dif_otbn_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:188
                                        (enable == kDifOtbnEnable));
  mmio_region_write32(otbn->base_addr, OTBN_INTR_ENABLE_REG_OFFSET,
                      register_value);

  return kDifOtbnOk;
}
200015c8:	8082                	ret
200015ca:	4509                	li	a0,2
200015cc:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:181
      mmio_region_read32(otbn->base_addr, OTBN_INTR_ENABLE_REG_OFFSET);
200015ce:	428c                	lw	a1,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200015d0:	41d4                	lw	a3,4(a1)
200015d2:	4501                	li	a0,0
dif_otbn_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:183
                                        (enable == kDifOtbnEnable));
200015d4:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200015d8:	9af9                	andi	a3,a3,-2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200015da:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200015dc:	c1d0                	sw	a2,4(a1)
dif_otbn_irq_control():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:188
}
200015de:	8082                	ret

200015e0 <dif_otbn_irq_force>:
dif_otbn_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:192

dif_otbn_result_t dif_otbn_irq_force(const dif_otbn_t *otbn,
                                     dif_otbn_interrupt_t irq_type) {
  if (otbn == NULL) {
200015e0:	c509                	beqz	a0,200015ea <dif_otbn_irq_force+0xa>
200015e2:	862a                	mv	a2,a0
200015e4:	4505                	li	a0,1
irq_bit_index_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:46
  switch (irq_type) {
200015e6:	c581                	beqz	a1,200015ee <dif_otbn_irq_force+0xe>
dif_otbn_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:209
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(otbn->base_addr, OTBN_INTR_TEST_REG_OFFSET,
                      register_value);

  return kDifOtbnOk;
}
200015e8:	8082                	ret
200015ea:	4509                	li	a0,2
200015ec:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:203
      mmio_region_read32(otbn->base_addr, OTBN_INTR_TEST_REG_OFFSET);
200015ee:	420c                	lw	a1,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200015f0:	4590                	lw	a2,8(a1)
200015f2:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200015f4:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200015f8:	c590                	sw	a2,8(a1)
dif_otbn_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:209
}
200015fa:	8082                	ret

200015fc <dif_otbn_start>:
dif_otbn_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:212

dif_otbn_result_t dif_otbn_start(const dif_otbn_t *otbn,
                                 unsigned int start_addr) {
200015fc:	862a                	mv	a2,a0
200015fe:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:213
  if (otbn == NULL || start_addr % sizeof(uint32_t) != 0 ||
20001600:	ca19                	beqz	a2,20001616 <dif_otbn_start+0x1a>
20001602:	76fd                	lui	a3,0xfffff
20001604:	068d                	addi	a3,a3,3
20001606:	8eed                	and	a3,a3,a1
20001608:	e699                	bnez	a3,20001616 <dif_otbn_start+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:218
      start_addr >= OTBN_IMEM_SIZE_BYTES) {
    return kDifOtbnBadArg;
  }

  mmio_region_write32(otbn->base_addr, OTBN_START_ADDR_REG_OFFSET, start_addr);
2000160a:	4208                	lw	a0,0(a2)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000160c:	cd4c                	sw	a1,28(a0)
dif_otbn_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:222

  uint32_t cmd_reg_val = 0x0u;
  cmd_reg_val = bitfield_bit32_write(cmd_reg_val, OTBN_CMD_START_BIT, true);
  mmio_region_write32(otbn->base_addr, OTBN_CMD_REG_OFFSET, cmd_reg_val);
2000160e:	420c                	lw	a1,0(a2)
20001610:	4501                	li	a0,0
20001612:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001614:	c990                	sw	a2,16(a1)
dif_otbn_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:225

  return kDifOtbnOk;
}
20001616:	8082                	ret

20001618 <dif_otbn_is_busy>:
dif_otbn_is_busy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:227

dif_otbn_result_t dif_otbn_is_busy(const dif_otbn_t *otbn, bool *busy) {
20001618:	862a                	mv	a2,a0
2000161a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:228
  if (otbn == NULL || busy == NULL) {
2000161c:	ca01                	beqz	a2,2000162c <dif_otbn_is_busy+0x14>
2000161e:	c599                	beqz	a1,2000162c <dif_otbn_is_busy+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:232
    return kDifOtbnBadArg;
  }

  uint32_t status = mmio_region_read32(otbn->base_addr, OTBN_STATUS_REG_OFFSET);
20001620:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001622:	4950                	lw	a2,20(a0)
20001624:	4501                	li	a0,0
dif_otbn_is_busy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:233
  *busy = bitfield_bit32_read(status, OTBN_STATUS_BUSY_BIT);
20001626:	8a05                	andi	a2,a2,1
20001628:	00c58023          	sb	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:236

  return kDifOtbnOk;
}
2000162c:	8082                	ret

2000162e <dif_otbn_get_err_bits>:
dif_otbn_get_err_bits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:239

dif_otbn_result_t dif_otbn_get_err_bits(const dif_otbn_t *otbn,
                                        dif_otbn_err_bits_t *err_bits) {
2000162e:	862a                	mv	a2,a0
20001630:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:240
  if (otbn == NULL || err_bits == NULL) {
20001632:	c611                	beqz	a2,2000163e <dif_otbn_get_err_bits+0x10>
20001634:	c589                	beqz	a1,2000163e <dif_otbn_get_err_bits+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:245
    return kDifOtbnBadArg;
  }

  uint32_t err_bits_raw =
      mmio_region_read32(otbn->base_addr, OTBN_ERR_BITS_REG_OFFSET);
20001636:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001638:	4d10                	lw	a2,24(a0)
2000163a:	4501                	li	a0,0
dif_otbn_get_err_bits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:247

  *err_bits = err_bits_raw;
2000163c:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:249
  return kDifOtbnOk;
}
2000163e:	8082                	ret

20001640 <dif_otbn_imem_write>:
dif_otbn_imem_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:253

dif_otbn_result_t dif_otbn_imem_write(const dif_otbn_t *otbn,
                                      uint32_t offset_bytes, const void *src,
                                      size_t len_bytes) {
20001640:	1141                	addi	sp,sp,-16
20001642:	c606                	sw	ra,12(sp)
20001644:	872a                	mv	a4,a0
20001646:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:254
  if (otbn == NULL || src == NULL ||
20001648:	c315                	beqz	a4,2000166c <dif_otbn_imem_write+0x2c>
2000164a:	c20d                	beqz	a2,2000166c <dif_otbn_imem_write+0x2c>
check_offset_len():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:68
  return (len_bytes % sizeof(uint32_t) == 0 &&
2000164c:	00b6e7b3          	or	a5,a3,a1
20001650:	8b8d                	andi	a5,a5,3
20001652:	ef89                	bnez	a5,2000166c <dif_otbn_imem_write+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:70
          offset_bytes + len_bytes >= len_bytes &&
20001654:	00b68833          	add	a6,a3,a1
dif_otbn_imem_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:254
  if (otbn == NULL || src == NULL ||
20001658:	00d86a63          	bltu	a6,a3,2000166c <dif_otbn_imem_write+0x2c>
2000165c:	6785                	lui	a5,0x1
2000165e:	0107e763          	bltu	a5,a6,2000166c <dif_otbn_imem_write+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:259
      !check_offset_len(offset_bytes, len_bytes, OTBN_IMEM_SIZE_BYTES)) {
    return kDifOtbnBadArg;
  }

  mmio_region_memcpy_to_mmio32(
20001662:	4308                	lw	a0,0(a4)
20001664:	6711                	lui	a4,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:260
      otbn->base_addr, OTBN_IMEM_REG_OFFSET + offset_bytes, src, len_bytes);
20001666:	95ba                	add	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:259
  mmio_region_memcpy_to_mmio32(
20001668:	2aad                	jal	200017e2 <mmio_region_memcpy_to_mmio32>
2000166a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:263

  return kDifOtbnOk;
}
2000166c:	40b2                	lw	ra,12(sp)
2000166e:	0141                	addi	sp,sp,16
20001670:	8082                	ret

20001672 <dif_otbn_imem_read>:
dif_otbn_imem_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:267

dif_otbn_result_t dif_otbn_imem_read(const dif_otbn_t *otbn,
                                     uint32_t offset_bytes, void *dest,
                                     size_t len_bytes) {
20001672:	1141                	addi	sp,sp,-16
20001674:	c606                	sw	ra,12(sp)
20001676:	872a                	mv	a4,a0
20001678:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:268
  if (otbn == NULL || dest == NULL ||
2000167a:	c315                	beqz	a4,2000169e <dif_otbn_imem_read+0x2c>
2000167c:	c20d                	beqz	a2,2000169e <dif_otbn_imem_read+0x2c>
check_offset_len():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:68
  return (len_bytes % sizeof(uint32_t) == 0 &&
2000167e:	00b6e7b3          	or	a5,a3,a1
20001682:	8b8d                	andi	a5,a5,3
20001684:	ef89                	bnez	a5,2000169e <dif_otbn_imem_read+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:70
          offset_bytes + len_bytes >= len_bytes &&
20001686:	00b68833          	add	a6,a3,a1
dif_otbn_imem_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:268
  if (otbn == NULL || dest == NULL ||
2000168a:	00d86a63          	bltu	a6,a3,2000169e <dif_otbn_imem_read+0x2c>
2000168e:	6785                	lui	a5,0x1
20001690:	0107e763          	bltu	a5,a6,2000169e <dif_otbn_imem_read+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:273
      !check_offset_len(offset_bytes, len_bytes, OTBN_IMEM_SIZE_BYTES)) {
    return kDifOtbnBadArg;
  }

  mmio_region_memcpy_from_mmio32(
20001694:	4308                	lw	a0,0(a4)
20001696:	6711                	lui	a4,0x4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:274
      otbn->base_addr, OTBN_IMEM_REG_OFFSET + offset_bytes, dest, len_bytes);
20001698:	95ba                	add	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:273
  mmio_region_memcpy_from_mmio32(
2000169a:	289d                	jal	20001710 <mmio_region_memcpy_from_mmio32>
2000169c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:277

  return kDifOtbnOk;
}
2000169e:	40b2                	lw	ra,12(sp)
200016a0:	0141                	addi	sp,sp,16
200016a2:	8082                	ret

200016a4 <dif_otbn_dmem_write>:
dif_otbn_dmem_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:281

dif_otbn_result_t dif_otbn_dmem_write(const dif_otbn_t *otbn,
                                      uint32_t offset_bytes, const void *src,
                                      size_t len_bytes) {
200016a4:	1141                	addi	sp,sp,-16
200016a6:	c606                	sw	ra,12(sp)
200016a8:	872a                	mv	a4,a0
200016aa:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:282
  if (otbn == NULL || src == NULL ||
200016ac:	c315                	beqz	a4,200016d0 <dif_otbn_dmem_write+0x2c>
200016ae:	c20d                	beqz	a2,200016d0 <dif_otbn_dmem_write+0x2c>
check_offset_len():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:68
  return (len_bytes % sizeof(uint32_t) == 0 &&
200016b0:	00b6e7b3          	or	a5,a3,a1
200016b4:	8b8d                	andi	a5,a5,3
200016b6:	ef89                	bnez	a5,200016d0 <dif_otbn_dmem_write+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:70
          offset_bytes + len_bytes >= len_bytes &&
200016b8:	00b68833          	add	a6,a3,a1
dif_otbn_dmem_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:282
  if (otbn == NULL || src == NULL ||
200016bc:	00d86a63          	bltu	a6,a3,200016d0 <dif_otbn_dmem_write+0x2c>
200016c0:	6785                	lui	a5,0x1
200016c2:	0107e763          	bltu	a5,a6,200016d0 <dif_otbn_dmem_write+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:287
      !check_offset_len(offset_bytes, len_bytes, OTBN_DMEM_SIZE_BYTES)) {
    return kDifOtbnBadArg;
  }

  mmio_region_memcpy_to_mmio32(
200016c6:	4308                	lw	a0,0(a4)
200016c8:	6721                	lui	a4,0x8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:288
      otbn->base_addr, OTBN_DMEM_REG_OFFSET + offset_bytes, src, len_bytes);
200016ca:	95ba                	add	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:287
  mmio_region_memcpy_to_mmio32(
200016cc:	2a19                	jal	200017e2 <mmio_region_memcpy_to_mmio32>
200016ce:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:291

  return kDifOtbnOk;
}
200016d0:	40b2                	lw	ra,12(sp)
200016d2:	0141                	addi	sp,sp,16
200016d4:	8082                	ret

200016d6 <dif_otbn_dmem_read>:
dif_otbn_dmem_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:295

dif_otbn_result_t dif_otbn_dmem_read(const dif_otbn_t *otbn,
                                     uint32_t offset_bytes, void *dest,
                                     size_t len_bytes) {
200016d6:	1141                	addi	sp,sp,-16
200016d8:	c606                	sw	ra,12(sp)
200016da:	872a                	mv	a4,a0
200016dc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:296
  if (otbn == NULL || dest == NULL ||
200016de:	c315                	beqz	a4,20001702 <dif_otbn_dmem_read+0x2c>
200016e0:	c20d                	beqz	a2,20001702 <dif_otbn_dmem_read+0x2c>
check_offset_len():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:68
  return (len_bytes % sizeof(uint32_t) == 0 &&
200016e2:	00b6e7b3          	or	a5,a3,a1
200016e6:	8b8d                	andi	a5,a5,3
200016e8:	ef89                	bnez	a5,20001702 <dif_otbn_dmem_read+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:70
          offset_bytes + len_bytes >= len_bytes &&
200016ea:	00b68833          	add	a6,a3,a1
dif_otbn_dmem_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:296
  if (otbn == NULL || dest == NULL ||
200016ee:	00d86a63          	bltu	a6,a3,20001702 <dif_otbn_dmem_read+0x2c>
200016f2:	6785                	lui	a5,0x1
200016f4:	0107e763          	bltu	a5,a6,20001702 <dif_otbn_dmem_read+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:301
      !check_offset_len(offset_bytes, len_bytes, OTBN_IMEM_SIZE_BYTES)) {
    return kDifOtbnBadArg;
  }

  mmio_region_memcpy_from_mmio32(
200016f8:	4308                	lw	a0,0(a4)
200016fa:	6721                	lui	a4,0x8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:302
      otbn->base_addr, OTBN_DMEM_REG_OFFSET + offset_bytes, dest, len_bytes);
200016fc:	95ba                	add	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:301
  mmio_region_memcpy_from_mmio32(
200016fe:	2809                	jal	20001710 <mmio_region_memcpy_from_mmio32>
20001700:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:305

  return kDifOtbnOk;
}
20001702:	40b2                	lw	ra,12(sp)
20001704:	0141                	addi	sp,sp,16
20001706:	8082                	ret

20001708 <dif_otbn_get_dmem_size_bytes>:
dif_otbn_get_dmem_size_bytes():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:308

size_t dif_otbn_get_dmem_size_bytes(const dif_otbn_t *otbn) {
  return OTBN_DMEM_SIZE_BYTES;
20001708:	6505                	lui	a0,0x1
2000170a:	8082                	ret

2000170c <dif_otbn_get_imem_size_bytes>:
dif_otbn_get_imem_size_bytes():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otbn.c:312
}

size_t dif_otbn_get_imem_size_bytes(const dif_otbn_t *otbn) {
  return OTBN_IMEM_SIZE_BYTES;
2000170c:	6505                	lui	a0,0x1
2000170e:	8082                	ret

20001710 <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:112
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
20001710:	4705                	li	a4,1
20001712:	a009                	j	20001714 <mmio_region_memcpy32>

20001714 <mmio_region_memcpy32>:
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:35
                                 size_t len, bool from_mmio) {
20001714:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:36
  if (len == 0) {
20001716:	d606                	sw	ra,44(sp)
20001718:	d422                	sw	s0,40(sp)
2000171a:	d226                	sw	s1,36(sp)
2000171c:	d04a                	sw	s2,32(sp)
2000171e:	ce4e                	sw	s3,28(sp)
20001720:	cc52                	sw	s4,24(sp)
20001722:	ca56                	sw	s5,20(sp)
20001724:	c85a                	sw	s6,16(sp)
20001726:	c6c5                	beqz	a3,200017ce <mmio_region_memcpy32+0xba>
20001728:	893a                	mv	s2,a4
2000172a:	8436                	mv	s0,a3
2000172c:	89b2                	mv	s3,a2
2000172e:	8b2e                	mv	s6,a1
20001730:	8a2a                	mv	s4,a0
misalignment32_of():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:16
  return addr % alignof(uint32_t);
20001732:	0035f513          	andi	a0,a1,3
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:43
  if (misalignment != 0) {
20001736:	c139                	beqz	a0,2000177c <mmio_region_memcpy32+0x68>
20001738:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:46
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
2000173a:	8d89                	sub	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:50
    if (realignment > len) {
2000173c:	84a2                	mv	s1,s0
2000173e:	00b46363          	bltu	s0,a1,20001744 <mmio_region_memcpy32+0x30>
20001742:	84ae                	mv	s1,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001744:	ffcb7593          	andi	a1,s6,-4
20001748:	00ba0ab3          	add	s5,s4,a1
2000174c:	000aa583          	lw	a1,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:57
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
20001750:	c62e                	sw	a1,12(sp)
20001752:	006c                	addi	a1,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:61
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
20001754:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:62
    if (from_mmio) {
20001756:	00090763          	beqz	s2,20001764 <mmio_region_memcpy32+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:63
      memcpy(buf, current_byte, realignment);
2000175a:	854e                	mv	a0,s3
2000175c:	8626                	mv	a2,s1
2000175e:	8afff0ef          	jal	ra,2000100c <memcpy>
20001762:	a809                	j	20001774 <mmio_region_memcpy32+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:66
      memcpy(current_byte, buf, realignment);
20001764:	852e                	mv	a0,a1
20001766:	85ce                	mv	a1,s3
20001768:	8626                	mv	a2,s1
2000176a:	8a3ff0ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:67
      mmio_region_write32(base, current_word_offset, current_word);
2000176e:	4532                	lw	a0,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001770:	00aaa023          	sw	a0,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:72
    len -= realignment;
20001774:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20001776:	cc21                	beqz	s0,200017ce <mmio_region_memcpy32+0xba>
20001778:	9b26                	add	s6,s6,s1
2000177a:	99a6                	add	s3,s3,s1
2000177c:	00810a93          	addi	s5,sp,8
20001780:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:81
    if (bytes_to_copy > len) {
20001782:	84a2                	mv	s1,s0
20001784:	00a46363          	bltu	s0,a0,2000178a <mmio_region_memcpy32+0x76>
20001788:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:86
    uint32_t current_word = 0;
2000178a:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:87
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
2000178c:	00a46c63          	bltu	s0,a0,200017a4 <mmio_region_memcpy32+0x90>
20001790:	00091a63          	bnez	s2,200017a4 <mmio_region_memcpy32+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20001794:	00090f63          	beqz	s2,200017b2 <mmio_region_memcpy32+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:97
      memcpy(buf, &current_word, bytes_to_copy);
20001798:	854e                	mv	a0,s3
2000179a:	85d6                	mv	a1,s5
2000179c:	8626                	mv	a2,s1
2000179e:	86fff0ef          	jal	ra,2000100c <memcpy>
200017a2:	a015                	j	200017c6 <mmio_region_memcpy32+0xb2>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017a4:	ffcb7513          	andi	a0,s6,-4
200017a8:	9552                	add	a0,a0,s4
200017aa:	4108                	lw	a0,0(a0)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:92
      current_word = mmio_region_read32(base, offset);
200017ac:	c42a                	sw	a0,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
200017ae:	fe0915e3          	bnez	s2,20001798 <mmio_region_memcpy32+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:100
      memcpy(&current_word, buf, bytes_to_copy);
200017b2:	8556                	mv	a0,s5
200017b4:	85ce                	mv	a1,s3
200017b6:	8626                	mv	a2,s1
200017b8:	855ff0ef          	jal	ra,2000100c <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:101
      mmio_region_write32(base, offset, current_word);
200017bc:	4522                	lw	a0,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017be:	ffcb7593          	andi	a1,s6,-4
200017c2:	95d2                	add	a1,a1,s4
200017c4:	c188                	sw	a0,0(a1)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:104
    offset += bytes_to_copy;
200017c6:	9b26                	add	s6,s6,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:106
    len -= bytes_to_copy;
200017c8:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:105
    buf += bytes_to_copy;
200017ca:	99a6                	add	s3,s3,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
200017cc:	f855                	bnez	s0,20001780 <mmio_region_memcpy32+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:108
}
200017ce:	4b42                	lw	s6,16(sp)
200017d0:	4ad2                	lw	s5,20(sp)
200017d2:	4a62                	lw	s4,24(sp)
200017d4:	49f2                	lw	s3,28(sp)
200017d6:	5902                	lw	s2,32(sp)
200017d8:	5492                	lw	s1,36(sp)
200017da:	5422                	lw	s0,40(sp)
200017dc:	50b2                	lw	ra,44(sp)
200017de:	6145                	addi	sp,sp,48
200017e0:	8082                	ret

200017e2 <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:120
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
200017e2:	4701                	li	a4,0
200017e4:	bf05                	j	20001714 <mmio_region_memcpy32>

200017e6 <mmio_region_read8>:
mmio_region_read8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:85
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
200017e6:	952e                	add	a0,a0,a1
200017e8:	00054503          	lbu	a0,0(a0) # 1000 <__DYNAMIC+0x1000>
200017ec:	8082                	ret

200017ee <mmio_region_read32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017ee:	99f1                	andi	a1,a1,-4
200017f0:	952e                	add	a0,a0,a1
200017f2:	4108                	lw	a0,0(a0)
200017f4:	8082                	ret

200017f6 <mmio_region_write8>:
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
200017f6:	952e                	add	a0,a0,a1
200017f8:	00c50023          	sb	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:118
}
200017fc:	8082                	ret

200017fe <mmio_region_write32>:
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017fe:	99f1                	andi	a1,a1,-4
20001800:	952e                	add	a0,a0,a1
20001802:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:134
}
20001804:	8082                	ret

20001806 <mmio_region_read_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001806:	99f1                	andi	a1,a1,-4
20001808:	952e                	add	a0,a0,a1
2000180a:	4108                	lw	a0,0(a0)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
2000180c:	00d55533          	srl	a0,a0,a3
20001810:	8d71                	and	a0,a0,a2
mmio_region_read_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:176
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
20001812:	8082                	ret

20001814 <mmio_region_get_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001814:	99f1                	andi	a1,a1,-4
20001816:	952e                	add	a0,a0,a1
20001818:	4108                	lw	a0,0(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000181a:	00c55533          	srl	a0,a0,a2
2000181e:	8905                	andi	a0,a0,1
mmio_region_get_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:197
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
20001820:	8082                	ret

20001822 <mmio_region_nonatomic_clear_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001822:	99f1                	andi	a1,a1,-4
20001824:	952e                	add	a0,a0,a1
20001826:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001828:	00d61633          	sll	a2,a2,a3
2000182c:	fff64613          	not	a2,a2
20001830:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001832:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:220
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
20001834:	8082                	ret

20001836 <mmio_region_nonatomic_set_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001836:	99f1                	andi	a1,a1,-4
20001838:	952e                	add	a0,a0,a1
2000183a:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
2000183c:	00d61633          	sll	a2,a2,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001840:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001842:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:242
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20001844:	8082                	ret

20001846 <mmio_region_write_only_set_mask32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001846:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000184a:	99f1                	andi	a1,a1,-4
2000184c:	952e                	add	a0,a0,a1
2000184e:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:264
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20001850:	8082                	ret

20001852 <mmio_region_nonatomic_set_field32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001852:	99f1                	andi	a1,a1,-4
20001854:	952e                	add	a0,a0,a1
20001856:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001858:	00d617b3          	sll	a5,a2,a3
2000185c:	fff7c793          	not	a5,a5
20001860:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001862:	8e79                	and	a2,a2,a4
20001864:	00d61633          	sll	a2,a2,a3
20001868:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000186a:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:288
                                              bitfield_field32_t field,
                                              uint32_t value) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
2000186c:	8082                	ret

2000186e <mmio_region_write_only_set_field32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000186e:	8e79                	and	a2,a2,a4
20001870:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001874:	99f1                	andi	a1,a1,-4
20001876:	952e                	add	a0,a0,a1
20001878:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:309
                                               bitfield_field32_t field,
                                               uint32_t value) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
2000187a:	8082                	ret

2000187c <mmio_region_nonatomic_clear_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000187c:	99f1                	andi	a1,a1,-4
2000187e:	952e                	add	a0,a0,a1
20001880:	410c                	lw	a1,0(a0)
20001882:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001884:	00c69633          	sll	a2,a3,a2
20001888:	fff64613          	not	a2,a2
2000188c:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000188e:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:328
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
20001890:	8082                	ret

20001892 <mmio_region_nonatomic_set_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001892:	99f1                	andi	a1,a1,-4
20001894:	952e                	add	a0,a0,a1
20001896:	410c                	lw	a1,0(a0)
20001898:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
2000189a:	00c69633          	sll	a2,a3,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000189e:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018a0:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:346
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
200018a2:	8082                	ret

200018a4 <mmio_region_write_only_set_bit32>:
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:363
 * @param bit_index the bit to set.
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_bit32(mmio_region_t base,
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
200018a4:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200018a6:	00c69633          	sll	a2,a3,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018aa:	99f1                	andi	a1,a1,-4
200018ac:	952e                	add	a0,a0,a1
200018ae:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:367
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
200018b0:	8082                	ret
	...

200018b4 <otbn_busy_wait_for_done>:
otbn_busy_wait_for_done():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:58
  }
  *dmem_addr_otbn = ptr_addr - app_dmem_start_addr;
  return kOtbnOk;
}

otbn_result_t otbn_busy_wait_for_done(otbn_t *ctx) {
200018b4:	1101                	addi	sp,sp,-32
200018b6:	ce06                	sw	ra,28(sp)
200018b8:	cc22                	sw	s0,24(sp)
200018ba:	ca26                	sw	s1,20(sp)
200018bc:	c84a                	sw	s2,16(sp)
200018be:	84aa                	mv	s1,a0
200018c0:	4905                	li	s2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:59
  bool busy = true;
200018c2:	012107a3          	sb	s2,15(sp)
200018c6:	00f10413          	addi	s0,sp,15
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:61
  while (busy) {
    if (dif_otbn_is_busy(&ctx->dif, &busy) != kDifOtbnOk) {
200018ca:	8526                	mv	a0,s1
200018cc:	85a2                	mv	a1,s0
200018ce:	33a9                	jal	20001618 <dif_otbn_is_busy>
200018d0:	ed09                	bnez	a0,200018ea <otbn_busy_wait_for_done+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:60
  while (busy) {
200018d2:	00f14503          	lbu	a0,15(sp)
200018d6:	f975                	bnez	a0,200018ca <otbn_busy_wait_for_done+0x16>
200018d8:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:67
      return kOtbnError;
    }
  }

  dif_otbn_err_bits_t err_bits;
  if (dif_otbn_get_err_bits(&ctx->dif, &err_bits) != kDifOtbnOk) {
200018da:	8526                	mv	a0,s1
200018dc:	3b89                	jal	2000162e <dif_otbn_get_err_bits>
200018de:	45a2                	lw	a1,8(sp)
200018e0:	4901                	li	s2,0
200018e2:	c191                	beqz	a1,200018e6 <otbn_busy_wait_for_done+0x32>
200018e4:	490d                	li	s2,3
200018e6:	c111                	beqz	a0,200018ea <otbn_busy_wait_for_done+0x36>
200018e8:	4905                	li	s2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:74
  }
  if (err_bits != kDifOtbnErrBitsNoError) {
    return kOtbnExecutionFailed;
  }
  return kOtbnOk;
}
200018ea:	854a                	mv	a0,s2
200018ec:	4942                	lw	s2,16(sp)
200018ee:	44d2                	lw	s1,20(sp)
200018f0:	4462                	lw	s0,24(sp)
200018f2:	40f2                	lw	ra,28(sp)
200018f4:	6105                	addi	sp,sp,32
200018f6:	8082                	ret

200018f8 <otbn_init>:
otbn_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:76

otbn_result_t otbn_init(otbn_t *ctx, const dif_otbn_config_t dif_config) {
200018f8:	1141                	addi	sp,sp,-16
200018fa:	c606                	sw	ra,12(sp)
200018fc:	c42e                	sw	a1,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:77
  if (ctx == NULL) {
200018fe:	c911                	beqz	a0,20001912 <otbn_init+0x1a>
20001900:	862a                	mv	a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:81
    return kOtbnBadArg;
  }

  ctx->app_is_loaded = false;
20001902:	00050a23          	sb	zero,20(a0)
20001906:	0028                	addi	a0,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:83

  if (dif_otbn_init(&dif_config, &ctx->dif) != kDifOtbnOk) {
20001908:	85b2                	mv	a1,a2
2000190a:	312d                	jal	20001534 <dif_otbn_init>
2000190c:	00a03533          	snez	a0,a0
20001910:	a011                	j	20001914 <otbn_init+0x1c>
20001912:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:88
    return kOtbnError;
  }

  return kOtbnOk;
}
20001914:	40b2                	lw	ra,12(sp)
20001916:	0141                	addi	sp,sp,16
20001918:	8082                	ret

2000191a <otbn_load_app>:
otbn_load_app():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:90

otbn_result_t otbn_load_app(otbn_t *ctx, const otbn_app_t app) {
2000191a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:91
  if (app.imem_end <= app.imem_start || app.dmem_end < app.dmem_start) {
2000191c:	c606                	sw	ra,12(sp)
2000191e:	c422                	sw	s0,8(sp)
20001920:	c226                	sw	s1,4(sp)
20001922:	c04a                	sw	s2,0(sp)
20001924:	41d0                	lw	a2,4(a1)
20001926:	4194                	lw	a3,0(a1)
20001928:	4489                	li	s1,2
2000192a:	04c6fa63          	bgeu	a3,a2,2000197e <otbn_load_app+0x64>
2000192e:	842a                	mv	s0,a0
20001930:	45c8                	lw	a0,12(a1)
20001932:	4598                	lw	a4,8(a1)
20001934:	04e56563          	bltu	a0,a4,2000197e <otbn_load_app+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:95
    return kOtbnBadArg;
  }

  const size_t imem_size = app.imem_end - app.imem_start;
20001938:	40d606b3          	sub	a3,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:96
  const size_t dmem_size = app.dmem_end - app.dmem_start;
2000193c:	40e50933          	sub	s2,a0,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:99

  // Instruction and data memory images must be multiples of 32b words.
  if (imem_size % sizeof(uint32_t) != 0 || dmem_size % sizeof(uint32_t) != 0) {
20001940:	00d96533          	or	a0,s2,a3
20001944:	890d                	andi	a0,a0,3
20001946:	ed05                	bnez	a0,2000197e <otbn_load_app+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:103
    return kOtbnBadArg;
  }

  ctx->app_is_loaded = false;
20001948:	00040a23          	sb	zero,20(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:104
  ctx->app = app;
2000194c:	4190                	lw	a2,0(a1)
2000194e:	c050                	sw	a2,4(s0)
20001950:	41c8                	lw	a0,4(a1)
20001952:	c408                	sw	a0,8(s0)
20001954:	4588                	lw	a0,8(a1)
20001956:	c448                	sw	a0,12(s0)
20001958:	45c8                	lw	a0,12(a1)
2000195a:	c808                	sw	a0,16(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:106

  if (dif_otbn_imem_write(&ctx->dif, 0, ctx->app.imem_start, imem_size) !=
2000195c:	8522                	mv	a0,s0
2000195e:	4581                	li	a1,0
20001960:	31c5                	jal	20001640 <dif_otbn_imem_write>
20001962:	4485                	li	s1,1
20001964:	ed09                	bnez	a0,2000197e <otbn_load_app+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:111
      kDifOtbnOk) {
    return kOtbnError;
  }

  if (dmem_size > 0) {
20001966:	00090863          	beqz	s2,20001976 <otbn_load_app+0x5c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:112
    if (dif_otbn_dmem_write(&ctx->dif, 0, ctx->app.dmem_start, dmem_size) !=
2000196a:	4450                	lw	a2,12(s0)
2000196c:	8522                	mv	a0,s0
2000196e:	4581                	li	a1,0
20001970:	86ca                	mv	a3,s2
20001972:	3b0d                	jal	200016a4 <dif_otbn_dmem_write>
20001974:	e509                	bnez	a0,2000197e <otbn_load_app+0x64>
20001976:	4481                	li	s1,0
20001978:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:118
        kDifOtbnOk) {
      return kOtbnError;
    }
  }

  ctx->app_is_loaded = true;
2000197a:	00a40a23          	sb	a0,20(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:120
  return kOtbnOk;
}
2000197e:	8526                	mv	a0,s1
20001980:	4902                	lw	s2,0(sp)
20001982:	4492                	lw	s1,4(sp)
20001984:	4422                	lw	s0,8(sp)
20001986:	40b2                	lw	ra,12(sp)
20001988:	0141                	addi	sp,sp,16
2000198a:	8082                	ret

2000198c <otbn_call_function>:
otbn_call_function():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:122

otbn_result_t otbn_call_function(otbn_t *ctx, otbn_ptr_t func) {
2000198c:	1141                	addi	sp,sp,-16
2000198e:	c606                	sw	ra,12(sp)
20001990:	862a                	mv	a2,a0
20001992:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:123
  if (ctx == NULL || !ctx->app_is_loaded) {
20001994:	c205                	beqz	a2,200019b4 <otbn_call_function+0x28>
20001996:	01464683          	lbu	a3,20(a2)
2000199a:	ce89                	beqz	a3,200019b4 <otbn_call_function+0x28>
func_ptr_to_otbn_imem_addr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:26
  if (imem_addr_otbn == NULL || ptr == NULL || ctx == NULL ||
2000199c:	cd81                	beqz	a1,200019b4 <otbn_call_function+0x28>
2000199e:	4254                	lw	a3,4(a2)
200019a0:	00d5ea63          	bltu	a1,a3,200019b4 <otbn_call_function+0x28>
200019a4:	4618                	lw	a4,8(a2)
200019a6:	00b76763          	bltu	a4,a1,200019b4 <otbn_call_function+0x28>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:30
  *imem_addr_otbn = ptr_addr - app_imem_start_addr;
200019aa:	8d95                	sub	a1,a1,a3
otbn_call_function():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:133
  otbn_result_t result = func_ptr_to_otbn_imem_addr(ctx, func, &func_imem_addr);
  if (result != kOtbnOk) {
    return result;
  }

  if (dif_otbn_start(&ctx->dif, func_imem_addr) != kDifOtbnOk) {
200019ac:	8532                	mv	a0,a2
200019ae:	31b9                	jal	200015fc <dif_otbn_start>
200019b0:	00a03533          	snez	a0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:138
    return kOtbnError;
  }

  return kOtbnOk;
}
200019b4:	40b2                	lw	ra,12(sp)
200019b6:	0141                	addi	sp,sp,16
200019b8:	8082                	ret

200019ba <otbn_copy_data_to_otbn>:
otbn_copy_data_to_otbn():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:141

otbn_result_t otbn_copy_data_to_otbn(otbn_t *ctx, size_t len_bytes,
                                     const void *src, otbn_ptr_t dest) {
200019ba:	1141                	addi	sp,sp,-16
200019bc:	c606                	sw	ra,12(sp)
200019be:	87aa                	mv	a5,a0
200019c0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:142
  if (ctx == NULL || dest == NULL) {
200019c2:	c385                	beqz	a5,200019e2 <otbn_copy_data_to_otbn+0x28>
200019c4:	ce99                	beqz	a3,200019e2 <otbn_copy_data_to_otbn+0x28>
200019c6:	882e                	mv	a6,a1
data_ptr_to_otbn_dmem_addr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:47
  uintptr_t app_dmem_start_addr = (uintptr_t)ctx->app.dmem_start;
200019c8:	47cc                	lw	a1,12(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:50
  if (dmem_addr_otbn == NULL || ptr == NULL || ctx == NULL ||
200019ca:	00b6ec63          	bltu	a3,a1,200019e2 <otbn_copy_data_to_otbn+0x28>
200019ce:	4b98                	lw	a4,16(a5)
200019d0:	00d76963          	bltu	a4,a3,200019e2 <otbn_copy_data_to_otbn+0x28>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:54
  *dmem_addr_otbn = ptr_addr - app_dmem_start_addr;
200019d4:	40b685b3          	sub	a1,a3,a1
otbn_copy_data_to_otbn():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:152
  otbn_result_t result = data_ptr_to_otbn_dmem_addr(ctx, dest, &dest_dmem_addr);
  if (result != kOtbnOk) {
    return result;
  }

  if (dif_otbn_dmem_write(&ctx->dif, dest_dmem_addr, src, len_bytes) !=
200019d8:	853e                	mv	a0,a5
200019da:	86c2                	mv	a3,a6
200019dc:	31e1                	jal	200016a4 <dif_otbn_dmem_write>
200019de:	00a03533          	snez	a0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:157
      kDifOtbnOk) {
    return kOtbnError;
  }
  return kOtbnOk;
}
200019e2:	40b2                	lw	ra,12(sp)
200019e4:	0141                	addi	sp,sp,16
200019e6:	8082                	ret

200019e8 <otbn_copy_data_from_otbn>:
otbn_copy_data_from_otbn():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:160

otbn_result_t otbn_copy_data_from_otbn(otbn_t *ctx, size_t len_bytes,
                                       otbn_ptr_t src, void *dest) {
200019e8:	1141                	addi	sp,sp,-16
200019ea:	c606                	sw	ra,12(sp)
200019ec:	87aa                	mv	a5,a0
200019ee:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:161
  if (ctx == NULL || dest == NULL) {
200019f0:	c395                	beqz	a5,20001a14 <otbn_copy_data_from_otbn+0x2c>
200019f2:	c28d                	beqz	a3,20001a14 <otbn_copy_data_from_otbn+0x2c>
data_ptr_to_otbn_dmem_addr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:50
  if (dmem_addr_otbn == NULL || ptr == NULL || ctx == NULL ||
200019f4:	c205                	beqz	a2,20001a14 <otbn_copy_data_from_otbn+0x2c>
200019f6:	882e                	mv	a6,a1
200019f8:	47cc                	lw	a1,12(a5)
200019fa:	00b66d63          	bltu	a2,a1,20001a14 <otbn_copy_data_from_otbn+0x2c>
200019fe:	4b98                	lw	a4,16(a5)
20001a00:	00c76a63          	bltu	a4,a2,20001a14 <otbn_copy_data_from_otbn+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:54
  *dmem_addr_otbn = ptr_addr - app_dmem_start_addr;
20001a04:	40b605b3          	sub	a1,a2,a1
otbn_copy_data_from_otbn():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:171
  otbn_result_t result = data_ptr_to_otbn_dmem_addr(ctx, src, &src_dmem_addr);
  if (result != kOtbnOk) {
    return result;
  }

  if (dif_otbn_dmem_read(&ctx->dif, src_dmem_addr, dest, len_bytes) !=
20001a08:	853e                	mv	a0,a5
20001a0a:	8636                	mv	a2,a3
20001a0c:	86c2                	mv	a3,a6
20001a0e:	31e1                	jal	200016d6 <dif_otbn_dmem_read>
20001a10:	00a03533          	snez	a0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:176
      kDifOtbnOk) {
    return kOtbnError;
  }
  return kOtbnOk;
}
20001a14:	40b2                	lw	ra,12(sp)
20001a16:	0141                	addi	sp,sp,16
20001a18:	8082                	ret

20001a1a <otbn_zero_data_memory>:
otbn_zero_data_memory():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:178

otbn_result_t otbn_zero_data_memory(otbn_t *ctx) {
20001a1a:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:179
  if (ctx == NULL) {
20001a1c:	ce06                	sw	ra,28(sp)
20001a1e:	cc22                	sw	s0,24(sp)
20001a20:	ca26                	sw	s1,20(sp)
20001a22:	c84a                	sw	s2,16(sp)
20001a24:	c64e                	sw	s3,12(sp)
20001a26:	c452                	sw	s4,8(sp)
20001a28:	c91d                	beqz	a0,20001a5e <otbn_zero_data_memory+0x44>
20001a2a:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:184
    return kOtbnBadArg;
  }

  size_t dmem_size_words =
      dif_otbn_get_dmem_size_bytes(&ctx->dif) / sizeof(uint32_t);
20001a2c:	39f1                	jal	20001708 <dif_otbn_get_dmem_size_bytes>
20001a2e:	00255a13          	srli	s4,a0,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:186
  bool retval = kOtbnOk;
  for (size_t i = 0; i < dmem_size_words; ++i) {
20001a32:	020a0863          	beqz	s4,20001a62 <otbn_zero_data_memory+0x48>
20001a36:	4481                	li	s1,0
20001a38:	4401                	li	s0,0
20001a3a:	00410913          	addi	s2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:187
    const uint32_t zero = 0;
20001a3e:	c202                	sw	zero,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:191

    // Continue the process even if a single write fails to try to clear as much
    // memory as possible.
    if (dif_otbn_dmem_write(&ctx->dif, i * sizeof(uint32_t), &zero,
20001a40:	4691                	li	a3,4
20001a42:	854e                	mv	a0,s3
20001a44:	85a6                	mv	a1,s1
20001a46:	864a                	mv	a2,s2
20001a48:	39b1                	jal	200016a4 <dif_otbn_dmem_write>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:192
                            sizeof(zero)) != kDifOtbnOk) {
20001a4a:	00a03533          	snez	a0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:191
    if (dif_otbn_dmem_write(&ctx->dif, i * sizeof(uint32_t), &zero,
20001a4e:	8c49                	or	s0,s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:186
  for (size_t i = 0; i < dmem_size_words; ++i) {
20001a50:	1a7d                	addi	s4,s4,-1
20001a52:	0491                	addi	s1,s1,4
20001a54:	fe0a15e3          	bnez	s4,20001a3e <otbn_zero_data_memory+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:196
      retval = kOtbnError;
    }
  }
  return retval;
20001a58:	00147513          	andi	a0,s0,1
20001a5c:	a021                	j	20001a64 <otbn_zero_data_memory+0x4a>
20001a5e:	4509                	li	a0,2
20001a60:	a011                	j	20001a64 <otbn_zero_data_memory+0x4a>
20001a62:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/otbn.c:197
}
20001a64:	4a22                	lw	s4,8(sp)
20001a66:	49b2                	lw	s3,12(sp)
20001a68:	4942                	lw	s2,16(sp)
20001a6a:	44d2                	lw	s1,20(sp)
20001a6c:	4462                	lw	s0,24(sp)
20001a6e:	40f2                	lw	ra,28(sp)
20001a70:	6105                	addi	sp,sp,32
20001a72:	8082                	ret

20001a74 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001a74:	88aa                	mv	a7,a0
20001a76:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001a78:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001a7a:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001a7c:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001a7e:	20069963          	bnez	a3,20001c90 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001a82:	200026b7          	lui	a3,0x20002
20001a86:	15068693          	addi	a3,a3,336 # 20002150 <__clz_tab>
20001a8a:	0cc5f063          	bgeu	a1,a2,20001b4a <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001a8e:	6741                	lui	a4,0x10
20001a90:	0ae67663          	bgeu	a2,a4,20001b3c <__udivdi3+0xc8>
20001a94:	0ff00713          	li	a4,255
20001a98:	00c73733          	sltu	a4,a4,a2
20001a9c:	070e                	slli	a4,a4,0x3
20001a9e:	00e65533          	srl	a0,a2,a4
20001aa2:	96aa                	add	a3,a3,a0
20001aa4:	0006c683          	lbu	a3,0(a3)
20001aa8:	02000513          	li	a0,32
20001aac:	9736                	add	a4,a4,a3
20001aae:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001ab2:	00e50c63          	beq	a0,a4,20001aca <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001ab6:	00d797b3          	sll	a5,a5,a3
20001aba:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001abe:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001ac2:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001ac6:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001aca:	01085893          	srli	a7,a6,0x10
20001ace:	0315d7b3          	divu	a5,a1,a7
20001ad2:	01081613          	slli	a2,a6,0x10
20001ad6:	8241                	srli	a2,a2,0x10
20001ad8:	01035713          	srli	a4,t1,0x10
20001adc:	0315f6b3          	remu	a3,a1,a7
20001ae0:	853e                	mv	a0,a5
20001ae2:	02f605b3          	mul	a1,a2,a5
20001ae6:	06c2                	slli	a3,a3,0x10
20001ae8:	8f55                	or	a4,a4,a3
20001aea:	00b77c63          	bgeu	a4,a1,20001b02 <__udivdi3+0x8e>
20001aee:	9742                	add	a4,a4,a6
20001af0:	fff78513          	addi	a0,a5,-1 # fff <__DYNAMIC+0xfff>
20001af4:	01076763          	bltu	a4,a6,20001b02 <__udivdi3+0x8e>
20001af8:	00b77563          	bgeu	a4,a1,20001b02 <__udivdi3+0x8e>
20001afc:	ffe78513          	addi	a0,a5,-2
20001b00:	9742                	add	a4,a4,a6
20001b02:	8f0d                	sub	a4,a4,a1
20001b04:	031777b3          	remu	a5,a4,a7
20001b08:	0342                	slli	t1,t1,0x10
20001b0a:	01035313          	srli	t1,t1,0x10
20001b0e:	03175733          	divu	a4,a4,a7
20001b12:	07c2                	slli	a5,a5,0x10
20001b14:	0067e333          	or	t1,a5,t1
20001b18:	02e606b3          	mul	a3,a2,a4
20001b1c:	863a                	mv	a2,a4
20001b1e:	00d37b63          	bgeu	t1,a3,20001b34 <__udivdi3+0xc0>
20001b22:	9342                	add	t1,t1,a6
20001b24:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001b28:	01036663          	bltu	t1,a6,20001b34 <__udivdi3+0xc0>
20001b2c:	00d37463          	bgeu	t1,a3,20001b34 <__udivdi3+0xc0>
20001b30:	ffe70613          	addi	a2,a4,-2
20001b34:	0542                	slli	a0,a0,0x10
20001b36:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001b38:	4581                	li	a1,0
20001b3a:	a85d                	j	20001bf0 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001b3c:	01000537          	lui	a0,0x1000
20001b40:	4741                	li	a4,16
20001b42:	f4a66ee3          	bltu	a2,a0,20001a9e <__udivdi3+0x2a>
20001b46:	4761                	li	a4,24
20001b48:	bf99                	j	20001a9e <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001b4a:	e601                	bnez	a2,20001b52 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001b4c:	4705                	li	a4,1
20001b4e:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001b52:	6741                	lui	a4,0x10
20001b54:	08e87f63          	bgeu	a6,a4,20001bf2 <__udivdi3+0x17e>
20001b58:	0ff00713          	li	a4,255
20001b5c:	01077363          	bgeu	a4,a6,20001b62 <__udivdi3+0xee>
20001b60:	4521                	li	a0,8
20001b62:	00a85733          	srl	a4,a6,a0
20001b66:	96ba                	add	a3,a3,a4
20001b68:	0006c703          	lbu	a4,0(a3)
20001b6c:	02000613          	li	a2,32
20001b70:	972a                	add	a4,a4,a0
20001b72:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001b76:	08e61563          	bne	a2,a4,20001c00 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001b7a:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001b7e:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001b80:	01085893          	srli	a7,a6,0x10
20001b84:	01081613          	slli	a2,a6,0x10
20001b88:	8241                	srli	a2,a2,0x10
20001b8a:	01035713          	srli	a4,t1,0x10
20001b8e:	0317f6b3          	remu	a3,a5,a7
20001b92:	0317d7b3          	divu	a5,a5,a7
20001b96:	06c2                	slli	a3,a3,0x10
20001b98:	8f55                	or	a4,a4,a3
20001b9a:	02f60e33          	mul	t3,a2,a5
20001b9e:	853e                	mv	a0,a5
20001ba0:	01c77c63          	bgeu	a4,t3,20001bb8 <__udivdi3+0x144>
20001ba4:	9742                	add	a4,a4,a6
20001ba6:	fff78513          	addi	a0,a5,-1
20001baa:	01076763          	bltu	a4,a6,20001bb8 <__udivdi3+0x144>
20001bae:	01c77563          	bgeu	a4,t3,20001bb8 <__udivdi3+0x144>
20001bb2:	ffe78513          	addi	a0,a5,-2
20001bb6:	9742                	add	a4,a4,a6
20001bb8:	41c70733          	sub	a4,a4,t3
20001bbc:	031777b3          	remu	a5,a4,a7
20001bc0:	0342                	slli	t1,t1,0x10
20001bc2:	01035313          	srli	t1,t1,0x10
20001bc6:	03175733          	divu	a4,a4,a7
20001bca:	07c2                	slli	a5,a5,0x10
20001bcc:	0067e333          	or	t1,a5,t1
20001bd0:	02e606b3          	mul	a3,a2,a4
20001bd4:	863a                	mv	a2,a4
20001bd6:	00d37b63          	bgeu	t1,a3,20001bec <__udivdi3+0x178>
20001bda:	9342                	add	t1,t1,a6
20001bdc:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001be0:	01036663          	bltu	t1,a6,20001bec <__udivdi3+0x178>
20001be4:	00d37463          	bgeu	t1,a3,20001bec <__udivdi3+0x178>
20001be8:	ffe70613          	addi	a2,a4,-2
20001bec:	0542                	slli	a0,a0,0x10
20001bee:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001bf0:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001bf2:	01000737          	lui	a4,0x1000
20001bf6:	4541                	li	a0,16
20001bf8:	f6e865e3          	bltu	a6,a4,20001b62 <__udivdi3+0xee>
20001bfc:	4561                	li	a0,24
20001bfe:	b795                	j	20001b62 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001c00:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001c04:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001c08:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001c0c:	00d797b3          	sll	a5,a5,a3
20001c10:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001c14:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001c18:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001c1c:	0315f733          	remu	a4,a1,a7
20001c20:	01081793          	slli	a5,a6,0x10
20001c24:	83c1                	srli	a5,a5,0x10
20001c26:	01065513          	srli	a0,a2,0x10
20001c2a:	0315d5b3          	divu	a1,a1,a7
20001c2e:	0742                	slli	a4,a4,0x10
20001c30:	8f49                	or	a4,a4,a0
20001c32:	02b786b3          	mul	a3,a5,a1
20001c36:	852e                	mv	a0,a1
20001c38:	00d77c63          	bgeu	a4,a3,20001c50 <__udivdi3+0x1dc>
20001c3c:	9742                	add	a4,a4,a6
20001c3e:	fff58513          	addi	a0,a1,-1
20001c42:	01076763          	bltu	a4,a6,20001c50 <__udivdi3+0x1dc>
20001c46:	00d77563          	bgeu	a4,a3,20001c50 <__udivdi3+0x1dc>
20001c4a:	ffe58513          	addi	a0,a1,-2
20001c4e:	9742                	add	a4,a4,a6
20001c50:	40d706b3          	sub	a3,a4,a3
20001c54:	0316f733          	remu	a4,a3,a7
20001c58:	0642                	slli	a2,a2,0x10
20001c5a:	8241                	srli	a2,a2,0x10
20001c5c:	0316d6b3          	divu	a3,a3,a7
20001c60:	0742                	slli	a4,a4,0x10
20001c62:	02d788b3          	mul	a7,a5,a3
20001c66:	00c767b3          	or	a5,a4,a2
20001c6a:	8736                	mv	a4,a3
20001c6c:	0117fc63          	bgeu	a5,a7,20001c84 <__udivdi3+0x210>
20001c70:	97c2                	add	a5,a5,a6
20001c72:	fff68713          	addi	a4,a3,-1
20001c76:	0107e763          	bltu	a5,a6,20001c84 <__udivdi3+0x210>
20001c7a:	0117f563          	bgeu	a5,a7,20001c84 <__udivdi3+0x210>
20001c7e:	ffe68713          	addi	a4,a3,-2
20001c82:	97c2                	add	a5,a5,a6
20001c84:	01051593          	slli	a1,a0,0x10
20001c88:	411787b3          	sub	a5,a5,a7
20001c8c:	8dd9                	or	a1,a1,a4
20001c8e:	bdcd                	j	20001b80 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001c90:	14d5e263          	bltu	a1,a3,20001dd4 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001c94:	6741                	lui	a4,0x10
20001c96:	02e6ff63          	bgeu	a3,a4,20001cd4 <__udivdi3+0x260>
20001c9a:	0ff00713          	li	a4,255
20001c9e:	00d735b3          	sltu	a1,a4,a3
20001ca2:	058e                	slli	a1,a1,0x3
20001ca4:	20002737          	lui	a4,0x20002
20001ca8:	00b6d533          	srl	a0,a3,a1
20001cac:	15070713          	addi	a4,a4,336 # 20002150 <__clz_tab>
20001cb0:	972a                	add	a4,a4,a0
20001cb2:	00074703          	lbu	a4,0(a4)
20001cb6:	02000513          	li	a0,32
20001cba:	972e                	add	a4,a4,a1
20001cbc:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001cc0:	02e51163          	bne	a0,a4,20001ce2 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001cc4:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001cc6:	f2f6e5e3          	bltu	a3,a5,20001bf0 <__udivdi3+0x17c>
20001cca:	00c8b533          	sltu	a0,a7,a2
20001cce:	00154513          	xori	a0,a0,1
20001cd2:	bf39                	j	20001bf0 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001cd4:	01000737          	lui	a4,0x1000
20001cd8:	45c1                	li	a1,16
20001cda:	fce6e5e3          	bltu	a3,a4,20001ca4 <__udivdi3+0x230>
20001cde:	45e1                	li	a1,24
20001ce0:	b7d1                	j	20001ca4 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001ce2:	00e65333          	srl	t1,a2,a4
20001ce6:	00b696b3          	sll	a3,a3,a1
20001cea:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cee:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001cf2:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001cf6:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cfa:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001cfe:	00b797b3          	sll	a5,a5,a1
20001d02:	00e8d733          	srl	a4,a7,a4
20001d06:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d0a:	01031793          	slli	a5,t1,0x10
20001d0e:	83c1                	srli	a5,a5,0x10
20001d10:	01085713          	srli	a4,a6,0x10
20001d14:	02a65633          	divu	a2,a2,a0
20001d18:	06c2                	slli	a3,a3,0x10
20001d1a:	8f55                	or	a4,a4,a3
20001d1c:	02c78f33          	mul	t5,a5,a2
20001d20:	8e32                	mv	t3,a2
20001d22:	01e77c63          	bgeu	a4,t5,20001d3a <__udivdi3+0x2c6>
20001d26:	971a                	add	a4,a4,t1
20001d28:	fff60e13          	addi	t3,a2,-1
20001d2c:	00676763          	bltu	a4,t1,20001d3a <__udivdi3+0x2c6>
20001d30:	01e77563          	bgeu	a4,t5,20001d3a <__udivdi3+0x2c6>
20001d34:	ffe60e13          	addi	t3,a2,-2
20001d38:	971a                	add	a4,a4,t1
20001d3a:	41e70733          	sub	a4,a4,t5
20001d3e:	02a776b3          	remu	a3,a4,a0
20001d42:	02a75733          	divu	a4,a4,a0
20001d46:	06c2                	slli	a3,a3,0x10
20001d48:	02e78633          	mul	a2,a5,a4
20001d4c:	01081793          	slli	a5,a6,0x10
20001d50:	83c1                	srli	a5,a5,0x10
20001d52:	8fd5                	or	a5,a5,a3
20001d54:	86ba                	mv	a3,a4
20001d56:	00c7fc63          	bgeu	a5,a2,20001d6e <__udivdi3+0x2fa>
20001d5a:	979a                	add	a5,a5,t1
20001d5c:	fff70693          	addi	a3,a4,-1 # ffffff <check_otbn_err_bits.kLogFields.35+0xfefe1f>
20001d60:	0067e763          	bltu	a5,t1,20001d6e <__udivdi3+0x2fa>
20001d64:	00c7f563          	bgeu	a5,a2,20001d6e <__udivdi3+0x2fa>
20001d68:	ffe70693          	addi	a3,a4,-2
20001d6c:	979a                	add	a5,a5,t1
20001d6e:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d72:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d74:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d76:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001d7a:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d7e:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d80:	00def6b3          	and	a3,t4,a3
20001d84:	01055613          	srli	a2,a0,0x10
20001d88:	010ede93          	srli	t4,t4,0x10
20001d8c:	02d80333          	mul	t1,a6,a3
20001d90:	02d606b3          	mul	a3,a2,a3
20001d94:	01035713          	srli	a4,t1,0x10
20001d98:	03d80833          	mul	a6,a6,t4
20001d9c:	9836                	add	a6,a6,a3
20001d9e:	9742                	add	a4,a4,a6
20001da0:	03d60633          	mul	a2,a2,t4
20001da4:	00d77363          	bgeu	a4,a3,20001daa <__udivdi3+0x336>
20001da8:	9672                	add	a2,a2,t3
20001daa:	01075693          	srli	a3,a4,0x10
20001dae:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001db0:	02c7e063          	bltu	a5,a2,20001dd0 <__udivdi3+0x35c>
20001db4:	d8c792e3          	bne	a5,a2,20001b38 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001db8:	67c1                	lui	a5,0x10
20001dba:	17fd                	addi	a5,a5,-1
20001dbc:	8f7d                	and	a4,a4,a5
20001dbe:	0742                	slli	a4,a4,0x10
20001dc0:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001dc4:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001dc8:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001dca:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001dcc:	e2e8f2e3          	bgeu	a7,a4,20001bf0 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001dd0:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001dd2:	b39d                	j	20001b38 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001dd4:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001dd6:	4501                	li	a0,0
20001dd8:	bd21                	j	20001bf0 <__udivdi3+0x17c>
