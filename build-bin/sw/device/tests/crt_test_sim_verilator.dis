
sw/device/tests/crt_test_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         0000176e  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000825  200018f0  200018f0  000028f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000000c  10000000  20002118  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000000c  1000000c  20002124  0000400c  2**2
                  ALLOC
  8 .logs.fields  0000017c  00010000  00010000  0000400c  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005e3f  00000000  00000000  000041ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000011c4  00000000  00000000  00009fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003442  00000000  00000000  0000b249  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000319c  00000000  00000000  0000e68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000260  00000000  00000000  00011827  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001b0d  00000000  00000000  00011a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000654  00000000  00000000  00013594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fec50513          	addi	a0,a0,-20 # 1000000c <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	ff058593          	addi	a1,a1,-16 # 10000018 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <ensure_data_exists>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80c18593          	addi	a1,gp,-2036 # 1000000c <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	0c860613          	addi	a2,a2,200 # 20002118 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2209                	jal	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	5020106f          	j	20001582 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	7340006f          	j	20000834 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	0690006f          	j	20000974 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	0ad0006f          	j	200009c8 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	0f10006f          	j	20000a1c <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:168
            __func__, t, i, dst[i], expect);
    }
  }
}

int main(int argc, char **argv) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:183
  // Test core assumptions above the five addresses above. The test code
  // must be able to assume these all hold.
  //
  // Note that performing these comparisons on their addresses is UB, and will
  // cause this entire function to get deleted by the compiler.
  if (&_bss_start > &_bss_end || &_data_start > &_data_end) {
20000182:	de06                	sw	ra,60(sp)
20000184:	dc22                	sw	s0,56(sp)
20000186:	da26                	sw	s1,52(sp)
20000188:	d84a                	sw	s2,48(sp)
2000018a:	d64e                	sw	s3,44(sp)
2000018c:	d452                	sw	s4,40(sp)
2000018e:	d256                	sw	s5,36(sp)
20000190:	d05a                	sw	s6,32(sp)
20000192:	ce5e                	sw	s7,28(sp)
20000194:	cc62                	sw	s8,24(sp)
20000196:	f0000b17          	auipc	s6,0xf0000
2000019a:	e6ab0b13          	addi	s6,s6,-406 # 10000000 <ensure_data_exists>
2000019e:	80c18993          	addi	s3,gp,-2036 # 1000000c <_data_end>
200001a2:	0169b533          	sltu	a0,s3,s6
200001a6:	f0000497          	auipc	s1,0xf0000
200001aa:	e6648493          	addi	s1,s1,-410 # 1000000c <_data_end>
200001ae:	f0000c17          	auipc	s8,0xf0000
200001b2:	e6ac0c13          	addi	s8,s8,-406 # 10000018 <_bss_end>
200001b6:	009c35b3          	sltu	a1,s8,s1
200001ba:	8d4d                	or	a0,a0,a1
200001bc:	34051163          	bnez	a0,200004fe <main+0x37e>
200001c0:	5a7d                	li	s4,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:197
  // Ensure that .bss was *actually* zeroed at the start of execution. If it
  // wasn't, we note the offset from _bss_start at which it wasn't.
  char *bss = &_bss_start;
  ptrdiff_t bss_len = &_bss_end - &_bss_start;
  int bad_bss_index = -1;
  for (int i = 0; i < bss_len; ++i) {
200001c2:	409c05b3          	sub	a1,s8,s1
200001c6:	4505                	li	a0,1
200001c8:	547d                	li	s0,-1
200001ca:	00a5cc63          	blt	a1,a0,200001e2 <main+0x62>
200001ce:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:198
    if (bss[i] != 0) {
200001d0:	00940633          	add	a2,s0,s1
200001d4:	00064603          	lbu	a2,0(a2)
200001d8:	e609                	bnez	a2,200001e2 <main+0x62>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:197
  for (int i = 0; i < bss_len; ++i) {
200001da:	0405                	addi	s0,s0,1
200001dc:	feb44ae3          	blt	s0,a1,200001d0 <main+0x50>
200001e0:	547d                	li	s0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:209
  // Similarly, ensure that .data has the values in the init section.
  char *data = &_data_start;
  char *data_init = &_data_init_start;
  ptrdiff_t data_len = &_data_end - &_data_start;
  int bad_data_index = -1;
  for (int i = 0; i < data_len; ++i) {
200001e2:	416985b3          	sub	a1,s3,s6
200001e6:	00002a97          	auipc	s5,0x2
200001ea:	f32a8a93          	addi	s5,s5,-206 # 20002118 <_data_init_start>
200001ee:	02a5c263          	blt	a1,a0,20000212 <main+0x92>
200001f2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:210
    if (data[i] != data_init[i]) {
200001f4:	01650633          	add	a2,a0,s6
200001f8:	00064603          	lbu	a2,0(a2)
200001fc:	015506b3          	add	a3,a0,s5
20000200:	0006c683          	lbu	a3,0(a3)
20000204:	00d61663          	bne	a2,a3,20000210 <main+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:209
  for (int i = 0; i < data_len; ++i) {
20000208:	0505                	addi	a0,a0,1
2000020a:	feb545e3          	blt	a0,a1,200001f4 <main+0x74>
2000020e:	a011                	j	20000212 <main+0x92>
20000210:	8a2a                	mv	s4,a0
20000212:	6511                	lui	a0,0x4
20000214:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:217
      break;
    }
  }

  // End of post-CRT checks; begin actual assertions..
  test_status_set(kTestStatusInTest);
20000218:	22c010ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:219
  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
2000021c:	00002517          	auipc	a0,0x2
20000220:	88c50513          	addi	a0,a0,-1908 # 20001aa8 <kDeviceType>
20000224:	4108                	lw	a0,0(a0)
20000226:	00002b97          	auipc	s7,0x2
2000022a:	8b2b8b93          	addi	s7,s7,-1870 # 20001ad8 <kDeviceLogBypassUartAddress>
2000022e:	cd4d                	beqz	a0,200002e8 <main+0x168>
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:41
  CHECK(
20000230:	f0000597          	auipc	a1,0xf0000
20000234:	de058593          	addi	a1,a1,-544 # 10000010 <uart0>
20000238:	40000537          	lui	a0,0x40000
2000023c:	641000ef          	jal	ra,2000107c <dif_uart_init>
20000240:	cd05                	beqz	a0,20000278 <main+0xf8>
20000242:	000ba503          	lw	a0,0(s7)
20000246:	c909                	beqz	a0,20000258 <main+0xd8>
20000248:	e0010517          	auipc	a0,0xe0010
2000024c:	e4450513          	addi	a0,a0,-444 # 1008c <init_uart.kLogFields>
20000250:	4581                	li	a1,0
20000252:	12d000ef          	jal	ra,20000b7e <base_log_internal_dv>
20000256:	a821                	j	2000026e <main+0xee>
20000258:	00001597          	auipc	a1,0x1
2000025c:	72458593          	addi	a1,a1,1828 # 2000197c <__udivdi3+0x3f4>
20000260:	890a                	mv	s2,sp
20000262:	4651                	li	a2,20
20000264:	854a                	mv	a0,s2
20000266:	2389                	jal	200007a8 <memcpy>
20000268:	854a                	mv	a0,s2
2000026a:	06f000ef          	jal	ra,20000ad8 <base_log_internal_core>
2000026e:	6531                	lui	a0,0xc
20000270:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000274:	1d0010ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:48
  CHECK(dif_uart_configure(&uart0,
20000278:	00002517          	auipc	a0,0x2
2000027c:	85050513          	addi	a0,a0,-1968 # 20001ac8 <kUartBaudrate>
20000280:	4108                	lw	a0,0(a0)
20000282:	00002597          	auipc	a1,0x2
20000286:	83658593          	addi	a1,a1,-1994 # 20001ab8 <kClockFreqPeripheralHz>
2000028a:	418c                	lw	a1,0(a1)
2000028c:	c02a                	sw	a0,0(sp)
2000028e:	c22e                	sw	a1,4(sp)
20000290:	4505                	li	a0,1
20000292:	c42a                	sw	a0,8(sp)
20000294:	c62a                	sw	a0,12(sp)
20000296:	f0000517          	auipc	a0,0xf0000
2000029a:	d7a50513          	addi	a0,a0,-646 # 10000010 <uart0>
2000029e:	858a                	mv	a1,sp
200002a0:	5eb000ef          	jal	ra,2000108a <dif_uart_configure>
200002a4:	cd05                	beqz	a0,200002dc <main+0x15c>
200002a6:	000ba503          	lw	a0,0(s7)
200002aa:	c909                	beqz	a0,200002bc <main+0x13c>
200002ac:	e0010517          	auipc	a0,0xe0010
200002b0:	df450513          	addi	a0,a0,-524 # 100a0 <init_uart.kLogFields.21>
200002b4:	4581                	li	a1,0
200002b6:	0c9000ef          	jal	ra,20000b7e <base_log_internal_dv>
200002ba:	a821                	j	200002d2 <main+0x152>
200002bc:	00001597          	auipc	a1,0x1
200002c0:	6d458593          	addi	a1,a1,1748 # 20001990 <__udivdi3+0x408>
200002c4:	890a                	mv	s2,sp
200002c6:	4651                	li	a2,20
200002c8:	854a                	mv	a0,s2
200002ca:	29f9                	jal	200007a8 <memcpy>
200002cc:	854a                	mv	a0,s2
200002ce:	00b000ef          	jal	ra,20000ad8 <base_log_internal_core>
200002d2:	6531                	lui	a0,0xc
200002d4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200002d8:	16c010ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:56
  base_uart_stdout(&uart0);
200002dc:	f0000517          	auipc	a0,0xf0000
200002e0:	d3450513          	addi	a0,a0,-716 # 10000010 <uart0>
200002e4:	0ed000ef          	jal	ra,20000bd0 <base_uart_stdout>
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:223
    init_uart();
  }

  CHECK(bss_start_addr % sizeof(uint32_t) == 0,
200002e8:	0034f513          	andi	a0,s1,3
200002ec:	c521                	beqz	a0,20000334 <main+0x1b4>
200002ee:	000ba503          	lw	a0,0(s7)
200002f2:	cd09                	beqz	a0,2000030c <main+0x18c>
200002f4:	e0010517          	auipc	a0,0xe0010
200002f8:	d0c50513          	addi	a0,a0,-756 # 10000 <_dv_log_offset>
200002fc:	f0000617          	auipc	a2,0xf0000
20000300:	d1060613          	addi	a2,a2,-752 # 1000000c <_data_end>
20000304:	4585                	li	a1,1
20000306:	079000ef          	jal	ra,20000b7e <base_log_internal_dv>
2000030a:	a005                	j	2000032a <main+0x1aa>
2000030c:	00001597          	auipc	a1,0x1
20000310:	5e458593          	addi	a1,a1,1508 # 200018f0 <__udivdi3+0x368>
20000314:	890a                	mv	s2,sp
20000316:	4651                	li	a2,20
20000318:	854a                	mv	a0,s2
2000031a:	2179                	jal	200007a8 <memcpy>
2000031c:	f0000597          	auipc	a1,0xf0000
20000320:	cf058593          	addi	a1,a1,-784 # 1000000c <_data_end>
20000324:	854a                	mv	a0,s2
20000326:	7b2000ef          	jal	ra,20000ad8 <base_log_internal_core>
2000032a:	6531                	lui	a0,0xc
2000032c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000330:	114010ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:225
        "_bss_start not word-aligned: 0x%08x", bss_start_addr);
  CHECK(bss_end_addr % sizeof(uint32_t) == 0,
20000334:	003c7513          	andi	a0,s8,3
20000338:	c521                	beqz	a0,20000380 <main+0x200>
2000033a:	000ba503          	lw	a0,0(s7)
2000033e:	cd09                	beqz	a0,20000358 <main+0x1d8>
20000340:	e0010517          	auipc	a0,0xe0010
20000344:	cd450513          	addi	a0,a0,-812 # 10014 <main.kLogFields.2>
20000348:	f0000617          	auipc	a2,0xf0000
2000034c:	cd060613          	addi	a2,a2,-816 # 10000018 <_bss_end>
20000350:	4585                	li	a1,1
20000352:	02d000ef          	jal	ra,20000b7e <base_log_internal_dv>
20000356:	a005                	j	20000376 <main+0x1f6>
20000358:	00001597          	auipc	a1,0x1
2000035c:	5ac58593          	addi	a1,a1,1452 # 20001904 <__udivdi3+0x37c>
20000360:	890a                	mv	s2,sp
20000362:	4651                	li	a2,20
20000364:	854a                	mv	a0,s2
20000366:	2189                	jal	200007a8 <memcpy>
20000368:	f0000597          	auipc	a1,0xf0000
2000036c:	cb058593          	addi	a1,a1,-848 # 10000018 <_bss_end>
20000370:	854a                	mv	a0,s2
20000372:	766000ef          	jal	ra,20000ad8 <base_log_internal_core>
20000376:	6531                	lui	a0,0xc
20000378:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000037c:	0c8010ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:227
        "_bss_end not word-aligned: 0x%08x", bss_end_addr);
  CHECK(data_start_addr % sizeof(uint32_t) == 0,
20000380:	003b7513          	andi	a0,s6,3
20000384:	c521                	beqz	a0,200003cc <main+0x24c>
20000386:	000ba503          	lw	a0,0(s7)
2000038a:	cd09                	beqz	a0,200003a4 <main+0x224>
2000038c:	e0010517          	auipc	a0,0xe0010
20000390:	c9c50513          	addi	a0,a0,-868 # 10028 <main.kLogFields.5>
20000394:	f0000617          	auipc	a2,0xf0000
20000398:	c6c60613          	addi	a2,a2,-916 # 10000000 <ensure_data_exists>
2000039c:	4585                	li	a1,1
2000039e:	7e0000ef          	jal	ra,20000b7e <base_log_internal_dv>
200003a2:	a005                	j	200003c2 <main+0x242>
200003a4:	00001597          	auipc	a1,0x1
200003a8:	57458593          	addi	a1,a1,1396 # 20001918 <__udivdi3+0x390>
200003ac:	890a                	mv	s2,sp
200003ae:	4651                	li	a2,20
200003b0:	854a                	mv	a0,s2
200003b2:	2edd                	jal	200007a8 <memcpy>
200003b4:	f0000597          	auipc	a1,0xf0000
200003b8:	c4c58593          	addi	a1,a1,-948 # 10000000 <ensure_data_exists>
200003bc:	854a                	mv	a0,s2
200003be:	71a000ef          	jal	ra,20000ad8 <base_log_internal_core>
200003c2:	6531                	lui	a0,0xc
200003c4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200003c8:	07c010ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:229
        "_data_start not word-aligned: 0x%08x", data_start_addr);
  CHECK(data_end_addr % sizeof(uint32_t) == 0,
200003cc:	0039f513          	andi	a0,s3,3
200003d0:	c121                	beqz	a0,20000410 <main+0x290>
200003d2:	000ba503          	lw	a0,0(s7)
200003d6:	c919                	beqz	a0,200003ec <main+0x26c>
200003d8:	e0010517          	auipc	a0,0xe0010
200003dc:	c6450513          	addi	a0,a0,-924 # 1003c <main.kLogFields.8>
200003e0:	80c18613          	addi	a2,gp,-2036 # 1000000c <_data_end>
200003e4:	4585                	li	a1,1
200003e6:	798000ef          	jal	ra,20000b7e <base_log_internal_dv>
200003ea:	a831                	j	20000406 <main+0x286>
200003ec:	00001597          	auipc	a1,0x1
200003f0:	54058593          	addi	a1,a1,1344 # 2000192c <__udivdi3+0x3a4>
200003f4:	890a                	mv	s2,sp
200003f6:	4651                	li	a2,20
200003f8:	854a                	mv	a0,s2
200003fa:	267d                	jal	200007a8 <memcpy>
200003fc:	80c18593          	addi	a1,gp,-2036 # 1000000c <_data_end>
20000400:	854a                	mv	a0,s2
20000402:	6d6000ef          	jal	ra,20000ad8 <base_log_internal_core>
20000406:	6531                	lui	a0,0xc
20000408:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000040c:	038010ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:231
        "_data_end not word-aligned: 0x%08x", data_end_addr);
  CHECK(data_init_start_addr % sizeof(uint32_t) == 0,
20000410:	003af513          	andi	a0,s5,3
20000414:	c521                	beqz	a0,2000045c <main+0x2dc>
20000416:	000ba503          	lw	a0,0(s7)
2000041a:	cd09                	beqz	a0,20000434 <main+0x2b4>
2000041c:	e0010517          	auipc	a0,0xe0010
20000420:	c3450513          	addi	a0,a0,-972 # 10050 <main.kLogFields.11>
20000424:	00002617          	auipc	a2,0x2
20000428:	cf460613          	addi	a2,a2,-780 # 20002118 <_data_init_start>
2000042c:	4585                	li	a1,1
2000042e:	750000ef          	jal	ra,20000b7e <base_log_internal_dv>
20000432:	a005                	j	20000452 <main+0x2d2>
20000434:	00001597          	auipc	a1,0x1
20000438:	50c58593          	addi	a1,a1,1292 # 20001940 <__udivdi3+0x3b8>
2000043c:	890a                	mv	s2,sp
2000043e:	4651                	li	a2,20
20000440:	854a                	mv	a0,s2
20000442:	269d                	jal	200007a8 <memcpy>
20000444:	00002597          	auipc	a1,0x2
20000448:	cd458593          	addi	a1,a1,-812 # 20002118 <_data_init_start>
2000044c:	854a                	mv	a0,s2
2000044e:	68a000ef          	jal	ra,20000ad8 <base_log_internal_core>
20000452:	6531                	lui	a0,0xc
20000454:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000458:	7ed000ef          	jal	ra,20001444 <test_status_set>
2000045c:	5c7d                	li	s8,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:234
        "_data_init_start not word-aligned: 0x%08x", data_init_start_addr);

  CHECK(bad_bss_index == -1, "found non-zero .bss byte at *0x%08x == 0x%02x",
2000045e:	05840463          	beq	s0,s8,200004a6 <main+0x326>
20000462:	000ba503          	lw	a0,0(s7)
20000466:	94a2                	add	s1,s1,s0
20000468:	0004c983          	lbu	s3,0(s1)
2000046c:	c919                	beqz	a0,20000482 <main+0x302>
2000046e:	e0010517          	auipc	a0,0xe0010
20000472:	bf650513          	addi	a0,a0,-1034 # 10064 <main.kLogFields.14>
20000476:	4589                	li	a1,2
20000478:	8626                	mv	a2,s1
2000047a:	86ce                	mv	a3,s3
2000047c:	702000ef          	jal	ra,20000b7e <base_log_internal_dv>
20000480:	a831                	j	2000049c <main+0x31c>
20000482:	00001597          	auipc	a1,0x1
20000486:	4d258593          	addi	a1,a1,1234 # 20001954 <__udivdi3+0x3cc>
2000048a:	890a                	mv	s2,sp
2000048c:	4651                	li	a2,20
2000048e:	854a                	mv	a0,s2
20000490:	2e21                	jal	200007a8 <memcpy>
20000492:	854a                	mv	a0,s2
20000494:	85a6                	mv	a1,s1
20000496:	864e                	mv	a2,s3
20000498:	640000ef          	jal	ra,20000ad8 <base_log_internal_core>
2000049c:	6531                	lui	a0,0xc
2000049e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004a2:	7a3000ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:236
        bss_start_addr + bad_bss_index, (uint32_t)bss[bad_bss_index]);
  CHECK(bad_data_index == -1,
200004a6:	058a0663          	beq	s4,s8,200004f2 <main+0x372>
200004aa:	000ba503          	lw	a0,0(s7)
200004ae:	015a05b3          	add	a1,s4,s5
200004b2:	0005c983          	lbu	s3,0(a1)
200004b6:	016a04b3          	add	s1,s4,s6
200004ba:	c919                	beqz	a0,200004d0 <main+0x350>
200004bc:	e0010517          	auipc	a0,0xe0010
200004c0:	bbc50513          	addi	a0,a0,-1092 # 10078 <main.kLogFields.17>
200004c4:	4589                	li	a1,2
200004c6:	8626                	mv	a2,s1
200004c8:	86ce                	mv	a3,s3
200004ca:	6b4000ef          	jal	ra,20000b7e <base_log_internal_dv>
200004ce:	a829                	j	200004e8 <main+0x368>
200004d0:	00001597          	auipc	a1,0x1
200004d4:	49858593          	addi	a1,a1,1176 # 20001968 <__udivdi3+0x3e0>
200004d8:	890a                	mv	s2,sp
200004da:	4651                	li	a2,20
200004dc:	854a                	mv	a0,s2
200004de:	24e9                	jal	200007a8 <memcpy>
200004e0:	854a                	mv	a0,s2
200004e2:	85a6                	mv	a1,s1
200004e4:	864e                	mv	a2,s3
200004e6:	2bcd                	jal	20000ad8 <base_log_internal_core>
200004e8:	6531                	lui	a0,0xc
200004ea:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004ee:	757000ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:241
        "found bad .data byte at *0x%08x == 0x%02x, expected 0x%02x",
        data_start_addr + bad_data_index, (uint32_t)data_init[bad_data_index]);

  // Unit test CRT utility functions.
  test_crt_section_clear();
200004f2:	201d                	jal	20000518 <test_crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:242
  test_crt_section_copy();
200004f4:	2a81                	jal	20000644 <test_crt_section_copy>
200004f6:	6525                	lui	a0,0x9
200004f8:	0535                	addi	a0,a0,13
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:244

  test_status_set(kTestStatusPassed);
200004fa:	74b000ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:248

  // Unreachable code.
  return 1;
}
200004fe:	4505                	li	a0,1
20000500:	4c62                	lw	s8,24(sp)
20000502:	4bf2                	lw	s7,28(sp)
20000504:	5b02                	lw	s6,32(sp)
20000506:	5a92                	lw	s5,36(sp)
20000508:	5a22                	lw	s4,40(sp)
2000050a:	59b2                	lw	s3,44(sp)
2000050c:	5942                	lw	s2,48(sp)
2000050e:	54d2                	lw	s1,52(sp)
20000510:	5462                	lw	s0,56(sp)
20000512:	50f2                	lw	ra,60(sp)
20000514:	6121                	addi	sp,sp,64
20000516:	8082                	ret

20000518 <test_crt_section_clear>:
test_crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:67
static void test_crt_section_clear(void) {
20000518:	711d                	addi	sp,sp,-96
2000051a:	ce86                	sw	ra,92(sp)
2000051c:	cca2                	sw	s0,88(sp)
2000051e:	caa6                	sw	s1,84(sp)
20000520:	c8ca                	sw	s2,80(sp)
20000522:	c6ce                	sw	s3,76(sp)
20000524:	c4d2                	sw	s4,72(sp)
20000526:	c2d6                	sw	s5,68(sp)
20000528:	c0da                	sw	s6,64(sp)
2000052a:	de5e                	sw	s7,60(sp)
2000052c:	dc62                	sw	s8,56(sp)
2000052e:	da66                	sw	s9,52(sp)
20000530:	d86a                	sw	s10,48(sp)
20000532:	d66e                	sw	s11,44(sp)
20000534:	1080                	addi	s0,sp,96
20000536:	4b81                	li	s7,0
20000538:	00001517          	auipc	a0,0x1
2000053c:	5a050513          	addi	a0,a0,1440 # 20001ad8 <kDeviceLogBypassUartAddress>
20000540:	00052d83          	lw	s11,0(a0)
20000544:	00001517          	auipc	a0,0x1
20000548:	46050513          	addi	a0,a0,1120 # 200019a4 <__udivdi3+0x41c>
2000054c:	faa42423          	sw	a0,-88(s0)
20000550:	02000913          	li	s2,32
20000554:	00001517          	auipc	a0,0x1
20000558:	48050513          	addi	a0,a0,1152 # 200019d4 <__udivdi3+0x44c>
2000055c:	faa42823          	sw	a0,-80(s0)
20000560:	00002a17          	auipc	s4,0x2
20000564:	990a0a13          	addi	s4,s4,-1648 # 20001ef0 <__clz_tab+0x314>
20000568:	6531                	lui	a0,0xc
2000056a:	aad50a93          	addi	s5,a0,-1363 # baad <_stack_size+0x9aad>
2000056e:	e0010517          	auipc	a0,0xe0010
20000572:	b4650513          	addi	a0,a0,-1210 # 100b4 <test_crt_section_clear.kLogFields>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:82
  for (size_t t = 0; t < ARRAYSIZE(kTests); ++t) {
20000576:	faa42a23          	sw	a0,-76(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:84
    uint32_t section[kLen];
2000057a:	fa242623          	sw	sp,-84(s0)
2000057e:	f8010c13          	addi	s8,sp,-128
20000582:	8162                	mv	sp,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:87
      section[i] = kVal;
20000584:	0ff00593          	li	a1,255
20000588:	08000613          	li	a2,128
2000058c:	8562                	mv	a0,s8
2000058e:	2c05                	jal	200007be <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:91
    const size_t start = kTests[t].start;
20000590:	003b9513          	slli	a0,s7,0x3
20000594:	fa842583          	lw	a1,-88(s0)
20000598:	952e                	add	a0,a0,a1
2000059a:	00052983          	lw	s3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:92
    const size_t end = kTests[t].end;
2000059e:	00452b03          	lw	s6,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:93
    crt_section_clear(&section[start], &section[end]);
200005a2:	00299513          	slli	a0,s3,0x2
200005a6:	9562                	add	a0,a0,s8
200005a8:	002b1593          	slli	a1,s6,0x2
200005ac:	95e2                	add	a1,a1,s8
200005ae:	3cd9                	jal	20000084 <crt_section_clear>
200005b0:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:97
      const uint32_t expect = i >= start && i < end ? 0 : kVal;
200005b2:	0134b533          	sltu	a0,s1,s3
200005b6:	0164b5b3          	sltu	a1,s1,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:98
      CHECK(section[i] == expect,
200005ba:	000c2d03          	lw	s10,0(s8)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:97
      const uint32_t expect = i >= start && i < end ? 0 : kVal;
200005be:	0015c593          	xori	a1,a1,1
200005c2:	8d4d                	or	a0,a0,a1
200005c4:	40a00cb3          	neg	s9,a0
200005c8:	059d0363          	beq	s10,s9,2000060e <test_crt_section_clear+0xf6>
200005cc:	000d8c63          	beqz	s11,200005e4 <test_crt_section_clear+0xcc>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:98
      CHECK(section[i] == expect,
200005d0:	4595                	li	a1,5
200005d2:	fb442503          	lw	a0,-76(s0)
200005d6:	8652                	mv	a2,s4
200005d8:	86de                	mv	a3,s7
200005da:	8726                	mv	a4,s1
200005dc:	87ea                	mv	a5,s10
200005de:	8866                	mv	a6,s9
200005e0:	2b79                	jal	20000b7e <base_log_internal_dv>
200005e2:	a01d                	j	20000608 <test_crt_section_clear+0xf0>
200005e4:	4651                	li	a2,20
200005e6:	896e                	mv	s2,s11
200005e8:	fb840d93          	addi	s11,s0,-72
200005ec:	856e                	mv	a0,s11
200005ee:	fb042583          	lw	a1,-80(s0)
200005f2:	2a5d                	jal	200007a8 <memcpy>
200005f4:	856e                	mv	a0,s11
200005f6:	8dca                	mv	s11,s2
200005f8:	02000913          	li	s2,32
200005fc:	85d2                	mv	a1,s4
200005fe:	865e                	mv	a2,s7
20000600:	86a6                	mv	a3,s1
20000602:	876a                	mv	a4,s10
20000604:	87e6                	mv	a5,s9
20000606:	29c9                	jal	20000ad8 <base_log_internal_core>
20000608:	8556                	mv	a0,s5
2000060a:	63b000ef          	jal	ra,20001444 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:96
    for (size_t i = 0; i < kLen; ++i) {
2000060e:	0485                	addi	s1,s1,1
20000610:	0c11                	addi	s8,s8,4
20000612:	fb2490e3          	bne	s1,s2,200005b2 <test_crt_section_clear+0x9a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:102
  }
20000616:	fac42103          	lw	sp,-84(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:82
  for (size_t t = 0; t < ARRAYSIZE(kTests); ++t) {
2000061a:	0b85                	addi	s7,s7,1
2000061c:	4519                	li	a0,6
2000061e:	f4ab9ee3          	bne	s7,a0,2000057a <test_crt_section_clear+0x62>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:103
}
20000622:	fa040113          	addi	sp,s0,-96
20000626:	5db2                	lw	s11,44(sp)
20000628:	5d42                	lw	s10,48(sp)
2000062a:	5cd2                	lw	s9,52(sp)
2000062c:	5c62                	lw	s8,56(sp)
2000062e:	5bf2                	lw	s7,60(sp)
20000630:	4b06                	lw	s6,64(sp)
20000632:	4a96                	lw	s5,68(sp)
20000634:	4a26                	lw	s4,72(sp)
20000636:	49b6                	lw	s3,76(sp)
20000638:	4946                	lw	s2,80(sp)
2000063a:	44d6                	lw	s1,84(sp)
2000063c:	4466                	lw	s0,88(sp)
2000063e:	40f6                	lw	ra,92(sp)
20000640:	6125                	addi	sp,sp,96
20000642:	8082                	ret

20000644 <test_crt_section_copy>:
test_crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:114
static void test_crt_section_copy(void) {
20000644:	711d                	addi	sp,sp,-96
20000646:	ce86                	sw	ra,92(sp)
20000648:	cca2                	sw	s0,88(sp)
2000064a:	caa6                	sw	s1,84(sp)
2000064c:	c8ca                	sw	s2,80(sp)
2000064e:	c6ce                	sw	s3,76(sp)
20000650:	c4d2                	sw	s4,72(sp)
20000652:	c2d6                	sw	s5,68(sp)
20000654:	c0da                	sw	s6,64(sp)
20000656:	de5e                	sw	s7,60(sp)
20000658:	dc62                	sw	s8,56(sp)
2000065a:	da66                	sw	s9,52(sp)
2000065c:	d86a                	sw	s10,48(sp)
2000065e:	d66e                	sw	s11,44(sp)
20000660:	1080                	addi	s0,sp,96
20000662:	4a81                	li	s5,0
20000664:	00001517          	auipc	a0,0x1
20000668:	47450513          	addi	a0,a0,1140 # 20001ad8 <kDeviceLogBypassUartAddress>
2000066c:	4108                	lw	a0,0(a0)
2000066e:	faa42a23          	sw	a0,-76(s0)
20000672:	02100493          	li	s1,33
20000676:	00001517          	auipc	a0,0x1
2000067a:	37250513          	addi	a0,a0,882 # 200019e8 <__udivdi3+0x460>
2000067e:	faa42423          	sw	a0,-88(s0)
20000682:	02000d93          	li	s11,32
20000686:	00001517          	auipc	a0,0x1
2000068a:	40a50513          	addi	a0,a0,1034 # 20001a90 <__udivdi3+0x508>
2000068e:	faa42823          	sw	a0,-80(s0)
20000692:	6531                	lui	a0,0xc
20000694:	aad50a13          	addi	s4,a0,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:144
    uint32_t dst[kLen], src[kLen];
20000698:	fa242623          	sw	sp,-84(s0)
2000069c:	f8010b13          	addi	s6,sp,-128
200006a0:	815a                	mv	sp,s6
200006a2:	f8010c13          	addi	s8,sp,-128
200006a6:	8162                	mv	sp,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:147
      dst[i] = 0;
200006a8:	08000613          	li	a2,128
200006ac:	855a                	mv	a0,s6
200006ae:	4581                	li	a1,0
200006b0:	2239                	jal	200007be <memset>
200006b2:	4505                	li	a0,1
200006b4:	85e2                	mv	a1,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:146
      src[i] = (uint32_t)(i) + 1;
200006b6:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:145
    for (size_t i = 0; i < kLen; ++i) {
200006b8:	0505                	addi	a0,a0,1
200006ba:	0591                	addi	a1,a1,4
200006bc:	fe951de3          	bne	a0,s1,200006b6 <test_crt_section_copy+0x72>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:151
    const size_t start = kTests[t].start;
200006c0:	4531                	li	a0,12
200006c2:	02aa8533          	mul	a0,s5,a0
200006c6:	fa842583          	lw	a1,-88(s0)
200006ca:	952e                	add	a0,a0,a1
200006cc:	00052903          	lw	s2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:152
    const size_t end = kTests[t].end;
200006d0:	00452983          	lw	s3,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:153
    const size_t source = kTests[t].source;
200006d4:	00852b83          	lw	s7,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:154
    crt_section_copy(&dst[start], &dst[end], &src[source]);
200006d8:	00291513          	slli	a0,s2,0x2
200006dc:	955a                	add	a0,a0,s6
200006de:	00299593          	slli	a1,s3,0x2
200006e2:	95da                	add	a1,a1,s6
200006e4:	002b9613          	slli	a2,s7,0x2
200006e8:	9662                	add	a2,a2,s8
200006ea:	9bfff0ef          	jal	ra,200000a8 <crt_section_copy>
200006ee:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:157
    uint32_t val = (uint32_t)(source) + 1;
200006f0:	0b85                	addi	s7,s7,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:161
      const uint32_t expect = i >= start && i < end ? val++ : 0;
200006f2:	0124b533          	sltu	a0,s1,s2
200006f6:	00154513          	xori	a0,a0,1
200006fa:	0134b5b3          	sltu	a1,s1,s3
200006fe:	00b57d33          	and	s10,a0,a1
20000702:	8cde                	mv	s9,s7
20000704:	000d1363          	bnez	s10,2000070a <test_crt_section_copy+0xc6>
20000708:	4c81                	li	s9,0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:162
      CHECK(dst[i] == expect, "%s case %u: dst[%u] got 0x%08x, want 0x%08x",
2000070a:	000b2c03          	lw	s8,0(s6)
2000070e:	059c0a63          	beq	s8,s9,20000762 <test_crt_section_copy+0x11e>
20000712:	fb442503          	lw	a0,-76(s0)
20000716:	c105                	beqz	a0,20000736 <test_crt_section_copy+0xf2>
20000718:	e0010517          	auipc	a0,0xe0010
2000071c:	9b050513          	addi	a0,a0,-1616 # 100c8 <test_crt_section_copy.kLogFields>
20000720:	00002617          	auipc	a2,0x2
20000724:	81f60613          	addi	a2,a2,-2017 # 20001f3f <__clz_tab+0x363>
20000728:	4595                	li	a1,5
2000072a:	86d6                	mv	a3,s5
2000072c:	8726                	mv	a4,s1
2000072e:	87e2                	mv	a5,s8
20000730:	8866                	mv	a6,s9
20000732:	21b1                	jal	20000b7e <base_log_internal_dv>
20000734:	a025                	j	2000075c <test_crt_section_copy+0x118>
20000736:	4651                	li	a2,20
20000738:	fb840d93          	addi	s11,s0,-72
2000073c:	856e                	mv	a0,s11
2000073e:	fb042583          	lw	a1,-80(s0)
20000742:	209d                	jal	200007a8 <memcpy>
20000744:	00001597          	auipc	a1,0x1
20000748:	7fb58593          	addi	a1,a1,2043 # 20001f3f <__clz_tab+0x363>
2000074c:	856e                	mv	a0,s11
2000074e:	02000d93          	li	s11,32
20000752:	8656                	mv	a2,s5
20000754:	86a6                	mv	a3,s1
20000756:	8762                	mv	a4,s8
20000758:	87e6                	mv	a5,s9
2000075a:	2ebd                	jal	20000ad8 <base_log_internal_core>
2000075c:	8552                	mv	a0,s4
2000075e:	4e7000ef          	jal	ra,20001444 <test_status_set>
20000762:	9bea                	add	s7,s7,s10
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:160
    for (size_t i = 0; i < kLen; ++i) {
20000764:	0485                	addi	s1,s1,1
20000766:	0b11                	addi	s6,s6,4
20000768:	f9b495e3          	bne	s1,s11,200006f2 <test_crt_section_copy+0xae>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:165
  }
2000076c:	fac42103          	lw	sp,-84(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:142
  for (size_t t = 0; t < ARRAYSIZE(kTests); ++t) {
20000770:	0a85                	addi	s5,s5,1
20000772:	02100493          	li	s1,33
20000776:	4539                	li	a0,14
20000778:	f2aa90e3          	bne	s5,a0,20000698 <test_crt_section_copy+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/crt_test.c:166
}
2000077c:	fa040113          	addi	sp,s0,-96
20000780:	5db2                	lw	s11,44(sp)
20000782:	5d42                	lw	s10,48(sp)
20000784:	5cd2                	lw	s9,52(sp)
20000786:	5c62                	lw	s8,56(sp)
20000788:	5bf2                	lw	s7,60(sp)
2000078a:	4b06                	lw	s6,64(sp)
2000078c:	4a96                	lw	s5,68(sp)
2000078e:	4a26                	lw	s4,72(sp)
20000790:	49b6                	lw	s3,76(sp)
20000792:	4946                	lw	s2,80(sp)
20000794:	44d6                	lw	s1,84(sp)
20000796:	4466                	lw	s0,88(sp)
20000798:	40f6                	lw	ra,92(sp)
2000079a:	6125                	addi	sp,sp,96
2000079c:	8082                	ret
	...

200007a0 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200007a0:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
200007a2:	8082                	ret

200007a4 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200007a4:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200007a6:	8082                	ret

200007a8 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200007a8:	ca11                	beqz	a2,200007bc <memcpy+0x14>
200007aa:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200007ac:	00058703          	lb	a4,0(a1)
200007b0:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200007b4:	167d                	addi	a2,a2,-1
200007b6:	0685                	addi	a3,a3,1
200007b8:	0585                	addi	a1,a1,1
200007ba:	fa6d                	bnez	a2,200007ac <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200007bc:	8082                	ret

200007be <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200007be:	c619                	beqz	a2,200007cc <memset+0xe>
200007c0:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200007c2:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200007c6:	167d                	addi	a2,a2,-1
200007c8:	0685                	addi	a3,a3,1
200007ca:	fe65                	bnez	a2,200007c2 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200007cc:	8082                	ret

200007ce <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200007ce:	ce09                	beqz	a2,200007e8 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200007d0:	00054683          	lbu	a3,0(a0)
200007d4:	0005c703          	lbu	a4,0(a1)
200007d8:	00e6ea63          	bltu	a3,a4,200007ec <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200007dc:	00d76b63          	bltu	a4,a3,200007f2 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200007e0:	167d                	addi	a2,a2,-1
200007e2:	0585                	addi	a1,a1,1
200007e4:	0505                	addi	a0,a0,1
200007e6:	f66d                	bnez	a2,200007d0 <memcmp+0x2>
200007e8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200007ea:	8082                	ret
200007ec:	fd600513          	li	a0,-42
200007f0:	8082                	ret
200007f2:	02a00513          	li	a0,42
200007f6:	8082                	ret

200007f8 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200007f8:	ca11                	beqz	a2,2000080c <memchr+0x14>
200007fa:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200007fe:	00054683          	lbu	a3,0(a0)
20000802:	00b68663          	beq	a3,a1,2000080e <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000806:	167d                	addi	a2,a2,-1
20000808:	0505                	addi	a0,a0,1
2000080a:	fa75                	bnez	a2,200007fe <memchr+0x6>
2000080c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000080e:	8082                	ret

20000810 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000810:	ce09                	beqz	a2,2000082a <memrchr+0x1a>
20000812:	fff50693          	addi	a3,a0,-1
20000816:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
2000081a:	00c68733          	add	a4,a3,a2
2000081e:	00074703          	lbu	a4,0(a4)
20000822:	00b70663          	beq	a4,a1,2000082e <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000826:	167d                	addi	a2,a2,-1
20000828:	fa6d                	bnez	a2,2000081a <memrchr+0xa>
2000082a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
2000082c:	8082                	ret
2000082e:	9532                	add	a0,a0,a2
20000830:	157d                	addi	a0,a0,-1
20000832:	8082                	ret

20000834 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000834:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000836:	de06                	sw	ra,60(sp)
20000838:	dc16                	sw	t0,56(sp)
2000083a:	da1a                	sw	t1,52(sp)
2000083c:	d81e                	sw	t2,48(sp)
2000083e:	d62a                	sw	a0,44(sp)
20000840:	d42e                	sw	a1,40(sp)
20000842:	d232                	sw	a2,36(sp)
20000844:	d036                	sw	a3,32(sp)
20000846:	ce3a                	sw	a4,28(sp)
20000848:	cc3e                	sw	a5,24(sp)
2000084a:	ca42                	sw	a6,20(sp)
2000084c:	c846                	sw	a7,16(sp)
2000084e:	c672                	sw	t3,12(sp)
20000850:	c476                	sw	t4,8(sp)
20000852:	c27a                	sw	t5,4(sp)
20000854:	c07e                	sw	t6,0(sp)
20000856:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000085a:	897d                	andi	a0,a0,31
2000085c:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
2000085e:	00a5dc63          	bge	a1,a0,20000876 <handler_exception+0x42>
20000862:	4599                	li	a1,6
20000864:	02a5c263          	blt	a1,a0,20000888 <handler_exception+0x54>
20000868:	458d                	li	a1,3
2000086a:	02b50c63          	beq	a0,a1,200008a2 <handler_exception+0x6e>
2000086e:	4595                	li	a1,5
20000870:	02b50763          	beq	a0,a1,2000089e <handler_exception+0x6a>
20000874:	a015                	j	20000898 <handler_exception+0x64>
20000876:	c115                	beqz	a0,2000089a <handler_exception+0x66>
20000878:	4585                	li	a1,1
2000087a:	02b50063          	beq	a0,a1,2000089a <handler_exception+0x66>
2000087e:	4589                	li	a1,2
20000880:	00b51c63          	bne	a0,a1,20000898 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000884:	208d                	jal	200008e6 <handler_instr_ill_fault>
20000886:	a839                	j	200008a4 <handler_exception+0x70>
20000888:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000088a:	00b50a63          	beq	a0,a1,2000089e <handler_exception+0x6a>
2000088e:	45ad                	li	a1,11
20000890:	00b51463          	bne	a0,a1,20000898 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000894:	2065                	jal	2000093c <handler_ecall>
20000896:	a039                	j	200008a4 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
20000898:	a001                	j	20000898 <handler_exception+0x64>
2000089a:	2805                	jal	200008ca <handler_instr_acc_fault>
2000089c:	a021                	j	200008a4 <handler_exception+0x70>
2000089e:	2049                	jal	20000920 <handler_lsu_fault>
200008a0:	a011                	j	200008a4 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200008a2:	208d                	jal	20000904 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200008a4:	4f82                	lw	t6,0(sp)
200008a6:	4f12                	lw	t5,4(sp)
200008a8:	4ea2                	lw	t4,8(sp)
200008aa:	4e32                	lw	t3,12(sp)
200008ac:	48c2                	lw	a7,16(sp)
200008ae:	4852                	lw	a6,20(sp)
200008b0:	47e2                	lw	a5,24(sp)
200008b2:	4772                	lw	a4,28(sp)
200008b4:	5682                	lw	a3,32(sp)
200008b6:	5612                	lw	a2,36(sp)
200008b8:	55a2                	lw	a1,40(sp)
200008ba:	5532                	lw	a0,44(sp)
200008bc:	53c2                	lw	t2,48(sp)
200008be:	5352                	lw	t1,52(sp)
200008c0:	52e2                	lw	t0,56(sp)
200008c2:	50f2                	lw	ra,60(sp)
200008c4:	6121                	addi	sp,sp,64
200008c6:	30200073          	mret

200008ca <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
200008ca:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200008cc:	de06                	sw	ra,60(sp)
200008ce:	dc22                	sw	s0,56(sp)
200008d0:	00001597          	auipc	a1,0x1
200008d4:	6e558593          	addi	a1,a1,1765 # 20001fb5 <__clz_tab+0x3d9>
200008d8:	0040                	addi	s0,sp,4
200008da:	03400613          	li	a2,52
200008de:	8522                	mv	a0,s0
200008e0:	35e1                	jal	200007a8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200008e2:	8522                	mv	a0,s0
200008e4:	2271                	jal	20000a70 <print_exc_msg>

200008e6 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200008e6:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200008e8:	c686                	sw	ra,76(sp)
200008ea:	c4a2                	sw	s0,72(sp)
200008ec:	00001597          	auipc	a1,0x1
200008f0:	6fd58593          	addi	a1,a1,1789 # 20001fe9 <__clz_tab+0x40d>
200008f4:	00d10413          	addi	s0,sp,13
200008f8:	03b00613          	li	a2,59
200008fc:	8522                	mv	a0,s0
200008fe:	356d                	jal	200007a8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20000900:	8522                	mv	a0,s0
20000902:	22bd                	jal	20000a70 <print_exc_msg>

20000904 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000904:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000906:	de06                	sw	ra,60(sp)
20000908:	dc22                	sw	s0,56(sp)
2000090a:	00001597          	auipc	a1,0x1
2000090e:	71a58593          	addi	a1,a1,1818 # 20002024 <__clz_tab+0x448>
20000912:	840a                	mv	s0,sp
20000914:	03800613          	li	a2,56
20000918:	8522                	mv	a0,s0
2000091a:	3579                	jal	200007a8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
2000091c:	8522                	mv	a0,s0
2000091e:	2a89                	jal	20000a70 <print_exc_msg>

20000920 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20000920:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20000922:	de06                	sw	ra,60(sp)
20000924:	dc22                	sw	s0,56(sp)
20000926:	00001597          	auipc	a1,0x1
2000092a:	73658593          	addi	a1,a1,1846 # 2000205c <__clz_tab+0x480>
2000092e:	0020                	addi	s0,sp,8
20000930:	03000613          	li	a2,48
20000934:	8522                	mv	a0,s0
20000936:	3d8d                	jal	200007a8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000938:	8522                	mv	a0,s0
2000093a:	2a1d                	jal	20000a70 <print_exc_msg>

2000093c <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
2000093c:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000093e:	ce06                	sw	ra,28(sp)
20000940:	cc22                	sw	s0,24(sp)
20000942:	00001517          	auipc	a0,0x1
20000946:	19650513          	addi	a0,a0,406 # 20001ad8 <kDeviceLogBypassUartAddress>
2000094a:	4108                	lw	a0,0(a0)
2000094c:	c901                	beqz	a0,2000095c <handler_ecall+0x20>
2000094e:	e000f517          	auipc	a0,0xe000f
20000952:	7ca50513          	addi	a0,a0,1994 # 10118 <handler_ecall.kLogFields>
20000956:	4581                	li	a1,0
20000958:	241d                	jal	20000b7e <base_log_internal_dv>
2000095a:	a819                	j	20000970 <handler_ecall+0x34>
2000095c:	00001597          	auipc	a1,0x1
20000960:	1bc58593          	addi	a1,a1,444 # 20001b18 <kDeviceLogBypassUartAddress+0x40>
20000964:	840a                	mv	s0,sp
20000966:	4651                	li	a2,20
20000968:	8522                	mv	a0,s0
2000096a:	3d3d                	jal	200007a8 <memcpy>
2000096c:	8522                	mv	a0,s0
2000096e:	22ad                	jal	20000ad8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20000970:	a001                	j	20000970 <handler_ecall+0x34>
20000972:	0001                	nop

20000974 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20000974:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
20000976:	ce86                	sw	ra,92(sp)
20000978:	cc96                	sw	t0,88(sp)
2000097a:	ca9a                	sw	t1,84(sp)
2000097c:	c89e                	sw	t2,80(sp)
2000097e:	c6a2                	sw	s0,76(sp)
20000980:	c4aa                	sw	a0,72(sp)
20000982:	c2ae                	sw	a1,68(sp)
20000984:	c0b2                	sw	a2,64(sp)
20000986:	de36                	sw	a3,60(sp)
20000988:	dc3a                	sw	a4,56(sp)
2000098a:	da3e                	sw	a5,52(sp)
2000098c:	d842                	sw	a6,48(sp)
2000098e:	d646                	sw	a7,44(sp)
20000990:	d472                	sw	t3,40(sp)
20000992:	d276                	sw	t4,36(sp)
20000994:	d07a                	sw	t5,32(sp)
20000996:	ce7e                	sw	t6,28(sp)
20000998:	00001517          	auipc	a0,0x1
2000099c:	14050513          	addi	a0,a0,320 # 20001ad8 <kDeviceLogBypassUartAddress>
200009a0:	4108                	lw	a0,0(a0)
200009a2:	c901                	beqz	a0,200009b2 <handler_irq_software+0x3e>
200009a4:	e000f517          	auipc	a0,0xe000f
200009a8:	73850513          	addi	a0,a0,1848 # 100dc <handler_irq_software.kLogFields>
200009ac:	4581                	li	a1,0
200009ae:	2ac1                	jal	20000b7e <base_log_internal_dv>
200009b0:	a819                	j	200009c6 <handler_irq_software+0x52>
200009b2:	00001597          	auipc	a1,0x1
200009b6:	12a58593          	addi	a1,a1,298 # 20001adc <kDeviceLogBypassUartAddress+0x4>
200009ba:	0020                	addi	s0,sp,8
200009bc:	4651                	li	a2,20
200009be:	8522                	mv	a0,s0
200009c0:	33e5                	jal	200007a8 <memcpy>
200009c2:	8522                	mv	a0,s0
200009c4:	2a11                	jal	20000ad8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200009c6:	a001                	j	200009c6 <handler_irq_software+0x52>

200009c8 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200009c8:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200009ca:	ce86                	sw	ra,92(sp)
200009cc:	cc96                	sw	t0,88(sp)
200009ce:	ca9a                	sw	t1,84(sp)
200009d0:	c89e                	sw	t2,80(sp)
200009d2:	c6a2                	sw	s0,76(sp)
200009d4:	c4aa                	sw	a0,72(sp)
200009d6:	c2ae                	sw	a1,68(sp)
200009d8:	c0b2                	sw	a2,64(sp)
200009da:	de36                	sw	a3,60(sp)
200009dc:	dc3a                	sw	a4,56(sp)
200009de:	da3e                	sw	a5,52(sp)
200009e0:	d842                	sw	a6,48(sp)
200009e2:	d646                	sw	a7,44(sp)
200009e4:	d472                	sw	t3,40(sp)
200009e6:	d276                	sw	t4,36(sp)
200009e8:	d07a                	sw	t5,32(sp)
200009ea:	ce7e                	sw	t6,28(sp)
200009ec:	00001517          	auipc	a0,0x1
200009f0:	0ec50513          	addi	a0,a0,236 # 20001ad8 <kDeviceLogBypassUartAddress>
200009f4:	4108                	lw	a0,0(a0)
200009f6:	c901                	beqz	a0,20000a06 <handler_irq_timer+0x3e>
200009f8:	e000f517          	auipc	a0,0xe000f
200009fc:	6f850513          	addi	a0,a0,1784 # 100f0 <handler_irq_timer.kLogFields>
20000a00:	4581                	li	a1,0
20000a02:	2ab5                	jal	20000b7e <base_log_internal_dv>
20000a04:	a819                	j	20000a1a <handler_irq_timer+0x52>
20000a06:	00001597          	auipc	a1,0x1
20000a0a:	0ea58593          	addi	a1,a1,234 # 20001af0 <kDeviceLogBypassUartAddress+0x18>
20000a0e:	0020                	addi	s0,sp,8
20000a10:	4651                	li	a2,20
20000a12:	8522                	mv	a0,s0
20000a14:	3b51                	jal	200007a8 <memcpy>
20000a16:	8522                	mv	a0,s0
20000a18:	20c1                	jal	20000ad8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000a1a:	a001                	j	20000a1a <handler_irq_timer+0x52>

20000a1c <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000a1c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000a1e:	ce86                	sw	ra,92(sp)
20000a20:	cc96                	sw	t0,88(sp)
20000a22:	ca9a                	sw	t1,84(sp)
20000a24:	c89e                	sw	t2,80(sp)
20000a26:	c6a2                	sw	s0,76(sp)
20000a28:	c4aa                	sw	a0,72(sp)
20000a2a:	c2ae                	sw	a1,68(sp)
20000a2c:	c0b2                	sw	a2,64(sp)
20000a2e:	de36                	sw	a3,60(sp)
20000a30:	dc3a                	sw	a4,56(sp)
20000a32:	da3e                	sw	a5,52(sp)
20000a34:	d842                	sw	a6,48(sp)
20000a36:	d646                	sw	a7,44(sp)
20000a38:	d472                	sw	t3,40(sp)
20000a3a:	d276                	sw	t4,36(sp)
20000a3c:	d07a                	sw	t5,32(sp)
20000a3e:	ce7e                	sw	t6,28(sp)
20000a40:	00001517          	auipc	a0,0x1
20000a44:	09850513          	addi	a0,a0,152 # 20001ad8 <kDeviceLogBypassUartAddress>
20000a48:	4108                	lw	a0,0(a0)
20000a4a:	c901                	beqz	a0,20000a5a <handler_irq_external+0x3e>
20000a4c:	e000f517          	auipc	a0,0xe000f
20000a50:	6b850513          	addi	a0,a0,1720 # 10104 <handler_irq_external.kLogFields>
20000a54:	4581                	li	a1,0
20000a56:	2225                	jal	20000b7e <base_log_internal_dv>
20000a58:	a819                	j	20000a6e <handler_irq_external+0x52>
20000a5a:	00001597          	auipc	a1,0x1
20000a5e:	0aa58593          	addi	a1,a1,170 # 20001b04 <kDeviceLogBypassUartAddress+0x2c>
20000a62:	0020                	addi	s0,sp,8
20000a64:	4651                	li	a2,20
20000a66:	8522                	mv	a0,s0
20000a68:	3381                	jal	200007a8 <memcpy>
20000a6a:	8522                	mv	a0,s0
20000a6c:	20b5                	jal	20000ad8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000a6e:	a001                	j	20000a6e <handler_irq_external+0x52>

20000a70 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000a70:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000a72:	ce06                	sw	ra,28(sp)
20000a74:	cc22                	sw	s0,24(sp)
20000a76:	ca26                	sw	s1,20(sp)
20000a78:	00001597          	auipc	a1,0x1
20000a7c:	06058593          	addi	a1,a1,96 # 20001ad8 <kDeviceLogBypassUartAddress>
20000a80:	418c                	lw	a1,0(a1)
20000a82:	842a                	mv	s0,a0
20000a84:	c18d                	beqz	a1,20000aa6 <print_exc_msg+0x36>
20000a86:	e000f517          	auipc	a0,0xe000f
20000a8a:	6a650513          	addi	a0,a0,1702 # 1012c <print_exc_msg.kLogFields>
20000a8e:	4585                	li	a1,1
20000a90:	8622                	mv	a2,s0
20000a92:	20f5                	jal	20000b7e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20000a94:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000a98:	e000f517          	auipc	a0,0xe000f
20000a9c:	6a850513          	addi	a0,a0,1704 # 10140 <print_exc_msg.kLogFields.6>
20000aa0:	4585                	li	a1,1
20000aa2:	28f1                	jal	20000b7e <base_log_internal_dv>
20000aa4:	a80d                	j	20000ad6 <print_exc_msg+0x66>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000aa6:	00001597          	auipc	a1,0x1
20000aaa:	08658593          	addi	a1,a1,134 # 20001b2c <kDeviceLogBypassUartAddress+0x54>
20000aae:	848a                	mv	s1,sp
20000ab0:	4651                	li	a2,20
20000ab2:	8526                	mv	a0,s1
20000ab4:	39d5                	jal	200007a8 <memcpy>
20000ab6:	8526                	mv	a0,s1
20000ab8:	85a2                	mv	a1,s0
20000aba:	2839                	jal	20000ad8 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20000abc:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000ac0:	00001597          	auipc	a1,0x1
20000ac4:	08058593          	addi	a1,a1,128 # 20001b40 <kDeviceLogBypassUartAddress+0x68>
20000ac8:	848a                	mv	s1,sp
20000aca:	4651                	li	a2,20
20000acc:	8526                	mv	a0,s1
20000ace:	39e9                	jal	200007a8 <memcpy>
20000ad0:	8526                	mv	a0,s1
20000ad2:	85a2                	mv	a1,s0
20000ad4:	2011                	jal	20000ad8 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20000ad6:	a001                	j	20000ad6 <print_exc_msg+0x66>

20000ad8 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000ad8:	7139                	addi	sp,sp,-64
20000ada:	ce06                	sw	ra,28(sp)
20000adc:	cc22                	sw	s0,24(sp)
20000ade:	ca26                	sw	s1,20(sp)
20000ae0:	c84a                	sw	s2,16(sp)
20000ae2:	892a                	mv	s2,a0
20000ae4:	de46                	sw	a7,60(sp)
20000ae6:	dc42                	sw	a6,56(sp)
20000ae8:	da3e                	sw	a5,52(sp)
20000aea:	d83a                	sw	a4,48(sp)
20000aec:	d636                	sw	a3,44(sp)
20000aee:	d432                	sw	a2,40(sp)
20000af0:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000af2:	4144                	lw	s1,4(a0)
20000af4:	80000537          	lui	a0,0x80000
20000af8:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffdee7>
20000afc:	8526                	mv	a0,s1
20000afe:	4581                	li	a1,0
20000b00:	39e5                	jal	200007f8 <memchr>
20000b02:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20000b06:	02f00593          	li	a1,47
20000b0a:	8526                	mv	a0,s1
20000b0c:	3311                	jal	20000810 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000b0e:	00092583          	lw	a1,0(s2)
20000b12:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000b14:	00b66b63          	bltu	a2,a1,20000b2a <base_log_internal_core+0x52>
20000b18:	058a                	slli	a1,a1,0x2
20000b1a:	00001617          	auipc	a2,0x1
20000b1e:	03a60613          	addi	a2,a2,58 # 20001b54 <kDeviceLogBypassUartAddress+0x7c>
20000b22:	95b2                	add	a1,a1,a2
20000b24:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000b26:	e519                	bnez	a0,20000b34 <base_log_internal_core+0x5c>
20000b28:	a801                	j	20000b38 <base_log_internal_core+0x60>
20000b2a:	00001597          	auipc	a1,0x1
20000b2e:	5af58593          	addi	a1,a1,1455 # 200020d9 <__clz_tab+0x4fd>
20000b32:	c119                	beqz	a0,20000b38 <base_log_internal_core+0x60>
20000b34:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000b38:	effff417          	auipc	s0,0xeffff
20000b3c:	4dc40413          	addi	s0,s0,1244 # 10000014 <base_log_internal_core.global_log_counter>
20000b40:	00045603          	lhu	a2,0(s0)
20000b44:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000b48:	00001517          	auipc	a0,0x1
20000b4c:	57850513          	addi	a0,a0,1400 # 200020c0 <__clz_tab+0x4e4>
20000b50:	86a6                	mv	a3,s1
20000b52:	28d1                	jal	20000c26 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000b54:	00041503          	lh	a0,0(s0)
20000b58:	0505                	addi	a0,a0,1
20000b5a:	00a41023          	sh	a0,0(s0)
20000b5e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000b60:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000b62:	01092503          	lw	a0,16(s2)
20000b66:	28c5                	jal	20000c56 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000b68:	00001517          	auipc	a0,0x1
20000b6c:	56650513          	addi	a0,a0,1382 # 200020ce <__clz_tab+0x4f2>
20000b70:	285d                	jal	20000c26 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000b72:	4942                	lw	s2,16(sp)
20000b74:	44d2                	lw	s1,20(sp)
20000b76:	4462                	lw	s0,24(sp)
20000b78:	40f2                	lw	ra,28(sp)
20000b7a:	6121                	addi	sp,sp,64
20000b7c:	8082                	ret

20000b7e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20000b7e:	1101                	addi	sp,sp,-32
20000b80:	ce46                	sw	a7,28(sp)
20000b82:	cc42                	sw	a6,24(sp)
20000b84:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000b86:	00001797          	auipc	a5,0x1
20000b8a:	f5278793          	addi	a5,a5,-174 # 20001ad8 <kDeviceLogBypassUartAddress>
20000b8e:	439c                	lw	a5,0(a5)
20000b90:	c83a                	sw	a4,16(sp)
20000b92:	c636                	sw	a3,12(sp)
20000b94:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b96:	c388                	sw	a0,0(a5)
20000b98:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000b9a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000b9c:	c989                	beqz	a1,20000bae <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000b9e:	4512                	lw	a0,4(sp)
20000ba0:	00450613          	addi	a2,a0,4
20000ba4:	c232                	sw	a2,4(sp)
20000ba6:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000ba8:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000baa:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000bac:	f9ed                	bnez	a1,20000b9e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000bae:	6105                	addi	sp,sp,32
20000bb0:	8082                	ret
	...

20000bb4 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20000bb4:	e589                	bnez	a1,20000bbe <base_set_stdout+0xa>
20000bb6:	00000597          	auipc	a1,0x0
20000bba:	01658593          	addi	a1,a1,22 # 20000bcc <base_dev_null>
20000bbe:	effff617          	auipc	a2,0xeffff
20000bc2:	44660613          	addi	a2,a2,1094 # 10000004 <base_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20000bc6:	c208                	sw	a0,0(a2)
20000bc8:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20000bca:	8082                	ret

20000bcc <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20000bcc:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20000bce:	8082                	ret

20000bd0 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20000bd0:	effff597          	auipc	a1,0xeffff
20000bd4:	43458593          	addi	a1,a1,1076 # 10000004 <base_stdout>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20000bd8:	c188                	sw	a0,0(a1)
20000bda:	00000517          	auipc	a0,0x0
20000bde:	00c50513          	addi	a0,a0,12 # 20000be6 <base_dev_uart>
20000be2:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20000be4:	8082                	ret

20000be6 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20000be6:	1101                	addi	sp,sp,-32
20000be8:	ce06                	sw	ra,28(sp)
20000bea:	cc22                	sw	s0,24(sp)
20000bec:	ca26                	sw	s1,20(sp)
20000bee:	c84a                	sw	s2,16(sp)
20000bf0:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000bf2:	c20d                	beqz	a2,20000c14 <base_dev_uart+0x2e>
20000bf4:	8432                	mv	s0,a2
20000bf6:	892e                	mv	s2,a1
20000bf8:	89aa                	mv	s3,a0
20000bfa:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20000bfc:	00990533          	add	a0,s2,s1
20000c00:	00054583          	lbu	a1,0(a0)
20000c04:	854e                	mv	a0,s3
20000c06:	2f11                	jal	2000131a <dif_uart_byte_send_polled>
20000c08:	e519                	bnez	a0,20000c16 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000c0a:	0485                	addi	s1,s1,1
20000c0c:	fe9418e3          	bne	s0,s1,20000bfc <base_dev_uart+0x16>
20000c10:	84a2                	mv	s1,s0
20000c12:	a011                	j	20000c16 <base_dev_uart+0x30>
20000c14:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000c16:	8526                	mv	a0,s1
20000c18:	49b2                	lw	s3,12(sp)
20000c1a:	4942                	lw	s2,16(sp)
20000c1c:	44d2                	lw	s1,20(sp)
20000c1e:	4462                	lw	s0,24(sp)
20000c20:	40f2                	lw	ra,28(sp)
20000c22:	6105                	addi	sp,sp,32
20000c24:	8082                	ret

20000c26 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000c26:	7179                	addi	sp,sp,-48
20000c28:	c606                	sw	ra,12(sp)
20000c2a:	d646                	sw	a7,44(sp)
20000c2c:	d442                	sw	a6,40(sp)
20000c2e:	d23e                	sw	a5,36(sp)
20000c30:	d03a                	sw	a4,32(sp)
20000c32:	ce36                	sw	a3,28(sp)
20000c34:	cc32                	sw	a2,24(sp)
20000c36:	ca2e                	sw	a1,20(sp)
20000c38:	effff597          	auipc	a1,0xeffff
20000c3c:	3cc58593          	addi	a1,a1,972 # 10000004 <base_stdout>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000c40:	4190                	lw	a2,0(a1)
20000c42:	41cc                	lw	a1,4(a1)
20000c44:	872a                	mv	a4,a0
20000c46:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000c48:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000c4a:	8532                	mv	a0,a2
20000c4c:	863a                	mv	a2,a4
20000c4e:	200d                	jal	20000c70 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000c50:	40b2                	lw	ra,12(sp)
20000c52:	6145                	addi	sp,sp,48
20000c54:	8082                	ret

20000c56 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000c56:	effff697          	auipc	a3,0xeffff
20000c5a:	3ae68693          	addi	a3,a3,942 # 10000004 <base_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000c5e:	4290                	lw	a2,0(a3)
20000c60:	42d4                	lw	a3,4(a3)
20000c62:	872e                	mv	a4,a1
20000c64:	87aa                	mv	a5,a0
20000c66:	8532                	mv	a0,a2
20000c68:	85b6                	mv	a1,a3
20000c6a:	863e                	mv	a2,a5
20000c6c:	86ba                	mv	a3,a4
20000c6e:	a009                	j	20000c70 <base_vfprintf>

20000c70 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000c70:	7139                	addi	sp,sp,-64
20000c72:	de06                	sw	ra,60(sp)
20000c74:	dc22                	sw	s0,56(sp)
20000c76:	da26                	sw	s1,52(sp)
20000c78:	d84a                	sw	s2,48(sp)
20000c7a:	d64e                	sw	s3,44(sp)
20000c7c:	d452                	sw	s4,40(sp)
20000c7e:	d256                	sw	s5,36(sp)
20000c80:	d05a                	sw	s6,32(sp)
20000c82:	ce5e                	sw	s7,28(sp)
20000c84:	cc62                	sw	s8,24(sp)
20000c86:	ca66                	sw	s9,20(sp)
20000c88:	c86a                	sw	s10,16(sp)
20000c8a:	c66e                	sw	s11,12(sp)
20000c8c:	8bb2                	mv	s7,a2
20000c8e:	892a                	mv	s2,a0
20000c90:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000c92:	c199                	beqz	a1,20000c98 <base_vfprintf+0x28>
20000c94:	89ae                	mv	s3,a1
20000c96:	a029                	j	20000ca0 <base_vfprintf+0x30>
20000c98:	00000997          	auipc	s3,0x0
20000c9c:	f3498993          	addi	s3,s3,-204 # 20000bcc <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000ca0:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000ca2:	000bc503          	lbu	a0,0(s7)
20000ca6:	28050f63          	beqz	a0,20000f44 <base_vfprintf+0x2d4>
20000caa:	4b01                	li	s6,0
20000cac:	02500c13          	li	s8,37
20000cb0:	4ca5                	li	s9,9
20000cb2:	02000d13          	li	s10,32
20000cb6:	06800d93          	li	s11,104
20000cba:	00001a17          	auipc	s4,0x1
20000cbe:	421a0a13          	addi	s4,s4,1057 # 200020db <__clz_tab+0x4ff>
20000cc2:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20000cc4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20000cc6:	0ff57413          	andi	s0,a0,255
20000cca:	01840963          	beq	s0,s8,20000cdc <base_vfprintf+0x6c>
20000cce:	c419                	beqz	s0,20000cdc <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20000cd0:	009b8533          	add	a0,s7,s1
20000cd4:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20000cd8:	0485                	addi	s1,s1,1
20000cda:	b7f5                	j	20000cc6 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20000cdc:	c491                	beqz	s1,20000ce8 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20000cde:	854a                	mv	a0,s2
20000ce0:	85de                	mv	a1,s7
20000ce2:	8626                	mv	a2,s1
20000ce4:	9982                	jalr	s3
20000ce6:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20000ce8:	24040f63          	beqz	s0,20000f46 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000cec:	009b8633          	add	a2,s7,s1
20000cf0:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000cf4:	22050f63          	beqz	a0,20000f32 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000cf8:	fd050593          	addi	a1,a0,-48
20000cfc:	0ff5f593          	andi	a1,a1,255
20000d00:	00bcf863          	bgeu	s9,a1,20000d10 <base_vfprintf+0xa0>
20000d04:	4401                	li	s0,0
20000d06:	4581                	li	a1,0
20000d08:	4605                	li	a2,1
20000d0a:	028d7f63          	bgeu	s10,s0,20000d48 <base_vfprintf+0xd8>
20000d0e:	aca1                	j	20000f66 <base_vfprintf+0x2f6>
20000d10:	4581                	li	a1,0
20000d12:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000d14:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000d16:	00b606b3          	add	a3,a2,a1
20000d1a:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000d1e:	20068a63          	beqz	a3,20000f32 <base_vfprintf+0x2c2>
20000d22:	0ff57513          	andi	a0,a0,255
20000d26:	03540733          	mul	a4,s0,s5
20000d2a:	953a                	add	a0,a0,a4
20000d2c:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000d30:	fd068513          	addi	a0,a3,-48
20000d34:	0ff57713          	andi	a4,a0,255
20000d38:	0585                	addi	a1,a1,1
20000d3a:	8536                	mv	a0,a3
20000d3c:	fcecfde3          	bgeu	s9,a4,20000d16 <base_vfprintf+0xa6>
20000d40:	4601                	li	a2,0
20000d42:	8536                	mv	a0,a3
20000d44:	228d6163          	bltu	s10,s0,20000f66 <base_vfprintf+0x2f6>
20000d48:	008036b3          	snez	a3,s0
20000d4c:	8e55                	or	a2,a2,a3
20000d4e:	20060c63          	beqz	a2,20000f66 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000d52:	95de                	add	a1,a1,s7
20000d54:	95a6                	add	a1,a1,s1
20000d56:	00258b93          	addi	s7,a1,2
20000d5a:	02adce63          	blt	s11,a0,20000d96 <base_vfprintf+0x126>
20000d5e:	06100593          	li	a1,97
20000d62:	06a5d563          	bge	a1,a0,20000dcc <base_vfprintf+0x15c>
20000d66:	06300593          	li	a1,99
20000d6a:	0ca5cb63          	blt	a1,a0,20000e40 <base_vfprintf+0x1d0>
20000d6e:	06200593          	li	a1,98
20000d72:	14b50a63          	beq	a0,a1,20000ec6 <base_vfprintf+0x256>
20000d76:	06300593          	li	a1,99
20000d7a:	18b51f63          	bne	a0,a1,20000f18 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20000d7e:	4502                	lw	a0,0(sp)
20000d80:	00450593          	addi	a1,a0,4
20000d84:	c02e                	sw	a1,0(sp)
20000d86:	4108                	lw	a0,0(a0)
20000d88:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20000d8c:	4605                	li	a2,1
20000d8e:	854a                	mv	a0,s2
20000d90:	00b10593          	addi	a1,sp,11
20000d94:	aa41                	j	20000f24 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000d96:	07200593          	li	a1,114
20000d9a:	04a5dd63          	bge	a1,a0,20000df4 <base_vfprintf+0x184>
20000d9e:	07700593          	li	a1,119
20000da2:	0aa5c663          	blt	a1,a0,20000e4e <base_vfprintf+0x1de>
20000da6:	07300593          	li	a1,115
20000daa:	12b50963          	beq	a0,a1,20000edc <base_vfprintf+0x26c>
20000dae:	07500593          	li	a1,117
20000db2:	16b51363          	bne	a0,a1,20000f18 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20000db6:	4502                	lw	a0,0(sp)
20000db8:	00450593          	addi	a1,a0,4
20000dbc:	c02e                	sw	a1,0(sp)
20000dbe:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000dc0:	00001797          	auipc	a5,0x1
20000dc4:	dc178793          	addi	a5,a5,-575 # 20001b81 <kDigitsLow>
20000dc8:	4729                	li	a4,10
20000dca:	a8cd                	j	20000ebc <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000dcc:	13850763          	beq	a0,s8,20000efa <base_vfprintf+0x28a>
20000dd0:	04800593          	li	a1,72
20000dd4:	00b50663          	beq	a0,a1,20000de0 <base_vfprintf+0x170>
20000dd8:	05800593          	li	a1,88
20000ddc:	12b51e63          	bne	a0,a1,20000f18 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20000de0:	4502                	lw	a0,0(sp)
20000de2:	00450593          	addi	a1,a0,4
20000de6:	c02e                	sw	a1,0(sp)
20000de8:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20000dea:	00001797          	auipc	a5,0x1
20000dee:	da778793          	addi	a5,a5,-601 # 20001b91 <kDigitsHigh>
20000df2:	a0e1                	j	20000eba <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000df4:	06900593          	li	a1,105
20000df8:	06b50d63          	beq	a0,a1,20000e72 <base_vfprintf+0x202>
20000dfc:	06f00593          	li	a1,111
20000e00:	10b50163          	beq	a0,a1,20000f02 <base_vfprintf+0x292>
20000e04:	07000593          	li	a1,112
20000e08:	10b51863          	bne	a0,a1,20000f18 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000e0c:	00001597          	auipc	a1,0x1
20000e10:	2d358593          	addi	a1,a1,723 # 200020df <__clz_tab+0x503>
20000e14:	4609                	li	a2,2
20000e16:	854a                	mv	a0,s2
20000e18:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20000e1a:	4582                	lw	a1,0(sp)
20000e1c:	00458613          	addi	a2,a1,4
20000e20:	c032                	sw	a2,0(sp)
20000e22:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000e24:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000e28:	00001797          	auipc	a5,0x1
20000e2c:	d5978793          	addi	a5,a5,-679 # 20001b81 <kDigitsLow>
20000e30:	46a1                	li	a3,8
20000e32:	4741                	li	a4,16
20000e34:	854a                	mv	a0,s2
20000e36:	85ce                	mv	a1,s3
20000e38:	2a5d                	jal	20000fee <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20000e3a:	00a40b33          	add	s6,s0,a0
20000e3e:	a0ed                	j	20000f28 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000e40:	06400593          	li	a1,100
20000e44:	02b50763          	beq	a0,a1,20000e72 <base_vfprintf+0x202>
20000e48:	07b50063          	beq	a0,s11,20000ea8 <base_vfprintf+0x238>
20000e4c:	a0f1                	j	20000f18 <base_vfprintf+0x2a8>
20000e4e:	07800593          	li	a1,120
20000e52:	04b50b63          	beq	a0,a1,20000ea8 <base_vfprintf+0x238>
20000e56:	07a00593          	li	a1,122
20000e5a:	0ab51f63          	bne	a0,a1,20000f18 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20000e5e:	4502                	lw	a0,0(sp)
20000e60:	00450593          	addi	a1,a0,4
20000e64:	c02e                	sw	a1,0(sp)
20000e66:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20000e68:	00850593          	addi	a1,a0,8
20000e6c:	c02e                	sw	a1,0(sp)
20000e6e:	414c                	lw	a1,4(a0)
20000e70:	a84d                	j	20000f22 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000e72:	4502                	lw	a0,0(sp)
20000e74:	00450593          	addi	a1,a0,4
20000e78:	c02e                	sw	a1,0(sp)
20000e7a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20000e7c:	557d                	li	a0,-1
20000e7e:	00954c63          	blt	a0,s1,20000e96 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000e82:	00001597          	auipc	a1,0x1
20000e86:	25b58593          	addi	a1,a1,603 # 200020dd <__clz_tab+0x501>
20000e8a:	4605                	li	a2,1
20000e8c:	854a                	mv	a0,s2
20000e8e:	9982                	jalr	s3
20000e90:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000e92:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000e96:	00001797          	auipc	a5,0x1
20000e9a:	ceb78793          	addi	a5,a5,-789 # 20001b81 <kDigitsLow>
20000e9e:	4729                	li	a4,10
20000ea0:	854a                	mv	a0,s2
20000ea2:	85ce                	mv	a1,s3
20000ea4:	8626                	mv	a2,s1
20000ea6:	a829                	j	20000ec0 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000ea8:	4502                	lw	a0,0(sp)
20000eaa:	00450593          	addi	a1,a0,4
20000eae:	c02e                	sw	a1,0(sp)
20000eb0:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20000eb2:	00001797          	auipc	a5,0x1
20000eb6:	ccf78793          	addi	a5,a5,-817 # 20001b81 <kDigitsLow>
20000eba:	4741                	li	a4,16
20000ebc:	854a                	mv	a0,s2
20000ebe:	85ce                	mv	a1,s3
20000ec0:	86a2                	mv	a3,s0
20000ec2:	2235                	jal	20000fee <write_digits>
20000ec4:	a08d                	j	20000f26 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20000ec6:	4502                	lw	a0,0(sp)
20000ec8:	00450593          	addi	a1,a0,4
20000ecc:	c02e                	sw	a1,0(sp)
20000ece:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20000ed0:	00001797          	auipc	a5,0x1
20000ed4:	cb178793          	addi	a5,a5,-847 # 20001b81 <kDigitsLow>
20000ed8:	4709                	li	a4,2
20000eda:	b7cd                	j	20000ebc <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20000edc:	4502                	lw	a0,0(sp)
20000ede:	00450593          	addi	a1,a0,4
20000ee2:	c02e                	sw	a1,0(sp)
20000ee4:	410c                	lw	a1,0(a0)
20000ee6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000ee8:	00a58633          	add	a2,a1,a0
20000eec:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20000ef0:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000ef2:	fa7d                	bnez	a2,20000ee8 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20000ef4:	fff50613          	addi	a2,a0,-1
20000ef8:	a02d                	j	20000f22 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20000efa:	4605                	li	a2,1
20000efc:	854a                	mv	a0,s2
20000efe:	85d2                	mv	a1,s4
20000f00:	a015                	j	20000f24 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20000f02:	4502                	lw	a0,0(sp)
20000f04:	00450593          	addi	a1,a0,4
20000f08:	c02e                	sw	a1,0(sp)
20000f0a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20000f0c:	00001797          	auipc	a5,0x1
20000f10:	c7578793          	addi	a5,a5,-907 # 20001b81 <kDigitsLow>
20000f14:	4721                	li	a4,8
20000f16:	b75d                	j	20000ebc <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20000f18:	00001597          	auipc	a1,0x1
20000f1c:	c8958593          	addi	a1,a1,-887 # 20001ba1 <kUnknownSpec>
20000f20:	463d                	li	a2,15
20000f22:	854a                	mv	a0,s2
20000f24:	9982                	jalr	s3
20000f26:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20000f28:	000bc503          	lbu	a0,0(s7)
20000f2c:	d8051ce3          	bnez	a0,20000cc4 <base_vfprintf+0x54>
20000f30:	a819                	j	20000f46 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20000f32:	00001597          	auipc	a1,0x1
20000f36:	c3258593          	addi	a1,a1,-974 # 20001b64 <kErrorNul>
20000f3a:	4645                	li	a2,17
20000f3c:	854a                	mv	a0,s2
20000f3e:	9982                	jalr	s3
20000f40:	9b2a                	add	s6,s6,a0
20000f42:	a011                	j	20000f46 <base_vfprintf+0x2d6>
20000f44:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20000f46:	855a                	mv	a0,s6
20000f48:	4db2                	lw	s11,12(sp)
20000f4a:	4d42                	lw	s10,16(sp)
20000f4c:	4cd2                	lw	s9,20(sp)
20000f4e:	4c62                	lw	s8,24(sp)
20000f50:	4bf2                	lw	s7,28(sp)
20000f52:	5b02                	lw	s6,32(sp)
20000f54:	5a92                	lw	s5,36(sp)
20000f56:	5a22                	lw	s4,40(sp)
20000f58:	59b2                	lw	s3,44(sp)
20000f5a:	5942                	lw	s2,48(sp)
20000f5c:	54d2                	lw	s1,52(sp)
20000f5e:	5462                	lw	s0,56(sp)
20000f60:	50f2                	lw	ra,60(sp)
20000f62:	6121                	addi	sp,sp,64
20000f64:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20000f66:	00001597          	auipc	a1,0x1
20000f6a:	c0f58593          	addi	a1,a1,-1009 # 20001b75 <kErrorTooWide>
20000f6e:	4631                	li	a2,12
20000f70:	b7f1                	j	20000f3c <base_vfprintf+0x2cc>

20000f72 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20000f72:	7179                	addi	sp,sp,-48
20000f74:	ca06                	sw	ra,20(sp)
20000f76:	d646                	sw	a7,44(sp)
20000f78:	d442                	sw	a6,40(sp)
20000f7a:	d23e                	sw	a5,36(sp)
20000f7c:	d03a                	sw	a4,32(sp)
20000f7e:	ce36                	sw	a3,28(sp)
20000f80:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20000f82:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20000f84:	c42a                	sw	a0,8(sp)
20000f86:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20000f88:	00000597          	auipc	a1,0x0
20000f8c:	01258593          	addi	a1,a1,18 # 20000f9a <snprintf_sink>
20000f90:	0028                	addi	a0,sp,8
20000f92:	39f9                	jal	20000c70 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20000f94:	40d2                	lw	ra,20(sp)
20000f96:	6145                	addi	sp,sp,48
20000f98:	8082                	ret

20000f9a <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20000f9a:	1141                	addi	sp,sp,-16
20000f9c:	c606                	sw	ra,12(sp)
20000f9e:	c422                	sw	s0,8(sp)
20000fa0:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20000fa2:	4140                	lw	s0,4(a0)
20000fa4:	c00d                	beqz	s0,20000fc6 <snprintf_sink+0x2c>
20000fa6:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20000fa8:	00c46363          	bltu	s0,a2,20000fae <snprintf_sink+0x14>
20000fac:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20000fae:	4088                	lw	a0,0(s1)
20000fb0:	8622                	mv	a2,s0
20000fb2:	ff6ff0ef          	jal	ra,200007a8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20000fb6:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20000fb8:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20000fba:	9522                	add	a0,a0,s0
20000fbc:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20000fbe:	40858533          	sub	a0,a1,s0
20000fc2:	c0c8                	sw	a0,4(s1)
20000fc4:	a011                	j	20000fc8 <snprintf_sink+0x2e>
20000fc6:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20000fc8:	8522                	mv	a0,s0
20000fca:	4492                	lw	s1,4(sp)
20000fcc:	4422                	lw	s0,8(sp)
20000fce:	40b2                	lw	ra,12(sp)
20000fd0:	0141                	addi	sp,sp,16
20000fd2:	8082                	ret

20000fd4 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20000fd4:	1101                	addi	sp,sp,-32
20000fd6:	c206                	sw	ra,4(sp)
20000fd8:	ce46                	sw	a7,28(sp)
20000fda:	cc42                	sw	a6,24(sp)
20000fdc:	ca3e                	sw	a5,20(sp)
20000fde:	c83a                	sw	a4,16(sp)
20000fe0:	c636                	sw	a3,12(sp)
20000fe2:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20000fe4:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20000fe6:	3169                	jal	20000c70 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20000fe8:	4092                	lw	ra,4(sp)
20000fea:	6105                	addi	sp,sp,32
20000fec:	8082                	ret

20000fee <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20000fee:	7139                	addi	sp,sp,-64
20000ff0:	de06                	sw	ra,60(sp)
20000ff2:	dc22                	sw	s0,56(sp)
20000ff4:	da26                	sw	s1,52(sp)
20000ff6:	d84a                	sw	s2,48(sp)
20000ff8:	d64e                	sw	s3,44(sp)
20000ffa:	892e                	mv	s2,a1
20000ffc:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000ffe:	ca05                	beqz	a2,2000102e <write_digits+0x40>
20001000:	4501                	li	a0,0
20001002:	02b10813          	addi	a6,sp,43
20001006:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001008:	02e65633          	divu	a2,a2,a4
2000100c:	02e60433          	mul	s0,a2,a4
20001010:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001014:	943e                	add	s0,s0,a5
20001016:	00040403          	lb	s0,0(s0)
2000101a:	00a805b3          	add	a1,a6,a0
2000101e:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001022:	157d                	addi	a0,a0,-1
20001024:	fee4f1e3          	bgeu	s1,a4,20001006 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001028:	40a00633          	neg	a2,a0
2000102c:	a011                	j	20001030 <write_digits+0x42>
2000102e:	4601                	li	a2,0
20001030:	4485                	li	s1,1
20001032:	c291                	beqz	a3,20001036 <write_digits+0x48>
20001034:	84b6                	mv	s1,a3
20001036:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
2000103a:	00a4e463          	bltu	s1,a0,20001042 <write_digits+0x54>
2000103e:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001042:	02967063          	bgeu	a2,s1,20001062 <write_digits+0x74>
20001046:	0068                	addi	a0,sp,12
20001048:	8d05                	sub	a0,a0,s1
2000104a:	02050513          	addi	a0,a0,32
2000104e:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001052:	03000593          	li	a1,48
20001056:	8622                	mv	a2,s0
20001058:	f66ff0ef          	jal	ra,200007be <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000105c:	147d                	addi	s0,s0,-1
2000105e:	fc7d                	bnez	s0,2000105c <write_digits+0x6e>
20001060:	8626                	mv	a2,s1
20001062:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001064:	8d11                	sub	a0,a0,a2
20001066:	02050593          	addi	a1,a0,32
2000106a:	854e                	mv	a0,s3
2000106c:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
2000106e:	59b2                	lw	s3,44(sp)
20001070:	5942                	lw	s2,48(sp)
20001072:	54d2                	lw	s1,52(sp)
20001074:	5462                	lw	s0,56(sp)
20001076:	50f2                	lw	ra,60(sp)
20001078:	6121                	addi	sp,sp,64
2000107a:	8082                	ret

2000107c <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
2000107c:	c581                	beqz	a1,20001084 <dif_uart_init+0x8>
2000107e:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20001080:	c188                	sw	a0,0(a1)
20001082:	a011                	j	20001086 <dif_uart_init+0xa>
20001084:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001086:	8532                	mv	a0,a2
20001088:	8082                	ret

2000108a <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
2000108a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
2000108c:	c606                	sw	ra,12(sp)
2000108e:	c422                	sw	s0,8(sp)
20001090:	c226                	sw	s1,4(sp)
20001092:	c92d                	beqz	a0,20001104 <dif_uart_configure+0x7a>
20001094:	84ae                	mv	s1,a1
20001096:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001098:	418c                	lw	a1,0(a1)
2000109a:	450d                	li	a0,3
2000109c:	c5ad                	beqz	a1,20001106 <dif_uart_configure+0x7c>
2000109e:	40d0                	lw	a2,4(s1)
200010a0:	c23d                	beqz	a2,20001106 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200010a2:	01459513          	slli	a0,a1,0x14
200010a6:	81b1                	srli	a1,a1,0xc
200010a8:	4681                	li	a3,0
200010aa:	29f9                	jal	20001588 <__udivdi3>
200010ac:	6641                	lui	a2,0x10
200010ae:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200010b0:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200010b2:	8d31                	xor	a0,a0,a2
200010b4:	8dc9                	or	a1,a1,a0
200010b6:	4511                	li	a0,4
200010b8:	e5b9                	bnez	a1,20001106 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200010ba:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010bc:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200010c0:	4008                	lw	a0,0(s0)
200010c2:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010c4:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200010c6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010c8:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200010cc:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010ce:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200010d2:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010d4:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200010d8:	4008                	lw	a0,0(s0)
200010da:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010dc:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200010de:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
200010e0:	01061513          	slli	a0,a2,0x10
200010e4:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
200010e8:	c291                	beqz	a3,200010ec <dif_uart_configure+0x62>
200010ea:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
200010ec:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
200010ee:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
200010f0:	e219                	bnez	a2,200010f6 <dif_uart_configure+0x6c>
200010f2:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
200010f6:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010f8:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200010fa:	400c                	lw	a1,0(s0)
200010fc:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010fe:	0005a223          	sw	zero,4(a1)
20001102:	a011                	j	20001106 <dif_uart_configure+0x7c>
20001104:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001106:	4492                	lw	s1,4(sp)
20001108:	4422                	lw	s0,8(sp)
2000110a:	40b2                	lw	ra,12(sp)
2000110c:	0141                	addi	sp,sp,16
2000110e:	8082                	ret

20001110 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001110:	1141                	addi	sp,sp,-16
20001112:	c606                	sw	ra,12(sp)
20001114:	c422                	sw	s0,8(sp)
20001116:	c226                	sw	s1,4(sp)
20001118:	84aa                	mv	s1,a0
2000111a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
2000111c:	c09d                	beqz	s1,20001142 <dif_uart_irq_is_pending+0x32>
2000111e:	8432                	mv	s0,a2
20001120:	c20d                	beqz	a2,20001142 <dif_uart_irq_is_pending+0x32>
20001122:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001124:	852e                	mv	a0,a1
20001126:	85b2                	mv	a1,a2
20001128:	2015                	jal	2000114c <uart_irq_offset_get>
2000112a:	85aa                	mv	a1,a0
2000112c:	4505                	li	a0,1
2000112e:	c991                	beqz	a1,20001142 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001130:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001132:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001134:	4602                	lw	a2,0(sp)
20001136:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001138:	00c5d5b3          	srl	a1,a1,a2
2000113c:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
2000113e:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001142:	4492                	lw	s1,4(sp)
20001144:	4422                	lw	s0,8(sp)
20001146:	40b2                	lw	ra,12(sp)
20001148:	0141                	addi	sp,sp,16
2000114a:	8082                	ret

2000114c <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
2000114c:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
2000114e:	00a66563          	bltu	a2,a0,20001158 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001152:	c188                	sw	a0,0(a1)
20001154:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001156:	8082                	ret
20001158:	4501                	li	a0,0
2000115a:	8082                	ret

2000115c <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
2000115c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
2000115e:	c606                	sw	ra,12(sp)
20001160:	c422                	sw	s0,8(sp)
20001162:	c10d                	beqz	a0,20001184 <dif_uart_irq_acknowledge+0x28>
20001164:	842a                	mv	s0,a0
20001166:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001168:	852e                	mv	a0,a1
2000116a:	85b2                	mv	a1,a2
2000116c:	37c5                	jal	2000114c <uart_irq_offset_get>
2000116e:	85aa                	mv	a1,a0
20001170:	4505                	li	a0,1
20001172:	c991                	beqz	a1,20001186 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001174:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001176:	4010                	lw	a2,0(s0)
20001178:	4501                	li	a0,0
2000117a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000117c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001180:	c20c                	sw	a1,0(a2)
20001182:	a011                	j	20001186 <dif_uart_irq_acknowledge+0x2a>
20001184:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001186:	4422                	lw	s0,8(sp)
20001188:	40b2                	lw	ra,12(sp)
2000118a:	0141                	addi	sp,sp,16
2000118c:	8082                	ret

2000118e <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
2000118e:	c911                	beqz	a0,200011a2 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001190:	c581                	beqz	a1,20001198 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001192:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001194:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001196:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001198:	410c                	lw	a1,0(a0)
2000119a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000119c:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
200011a0:	8082                	ret
200011a2:	4509                	li	a0,2
200011a4:	8082                	ret

200011a6 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200011a6:	862a                	mv	a2,a0
200011a8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200011aa:	c611                	beqz	a2,200011b6 <dif_uart_irq_restore_all+0x10>
200011ac:	c589                	beqz	a1,200011b6 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200011ae:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200011b0:	4210                	lw	a2,0(a2)
200011b2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011b4:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200011b6:	8082                	ret

200011b8 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200011b8:	1141                	addi	sp,sp,-16
200011ba:	c606                	sw	ra,12(sp)
200011bc:	c422                	sw	s0,8(sp)
200011be:	c226                	sw	s1,4(sp)
200011c0:	84aa                	mv	s1,a0
200011c2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200011c4:	c485                	beqz	s1,200011ec <dif_uart_irq_get_enabled+0x34>
200011c6:	8432                	mv	s0,a2
200011c8:	c215                	beqz	a2,200011ec <dif_uart_irq_get_enabled+0x34>
200011ca:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200011cc:	852e                	mv	a0,a1
200011ce:	85b2                	mv	a1,a2
200011d0:	3fb5                	jal	2000114c <uart_irq_offset_get>
200011d2:	85aa                	mv	a1,a0
200011d4:	4505                	li	a0,1
200011d6:	c999                	beqz	a1,200011ec <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200011d8:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011da:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
200011dc:	4602                	lw	a2,0(sp)
200011de:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200011e0:	00c5d5b3          	srl	a1,a1,a2
200011e4:	8985                	andi	a1,a1,1
200011e6:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
200011ea:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
200011ec:	4492                	lw	s1,4(sp)
200011ee:	4422                	lw	s0,8(sp)
200011f0:	40b2                	lw	ra,12(sp)
200011f2:	0141                	addi	sp,sp,16
200011f4:	8082                	ret

200011f6 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
200011f6:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
200011f8:	c606                	sw	ra,12(sp)
200011fa:	c422                	sw	s0,8(sp)
200011fc:	c226                	sw	s1,4(sp)
200011fe:	c91d                	beqz	a0,20001234 <dif_uart_irq_set_enabled+0x3e>
20001200:	8432                	mv	s0,a2
20001202:	84aa                	mv	s1,a0
20001204:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001206:	852e                	mv	a0,a1
20001208:	85b2                	mv	a1,a2
2000120a:	3789                	jal	2000114c <uart_irq_offset_get>
2000120c:	85aa                	mv	a1,a0
2000120e:	4505                	li	a0,1
20001210:	c19d                	beqz	a1,20001236 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001212:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001214:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001216:	4682                	lw	a3,0(sp)
20001218:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
2000121a:	00143713          	seqz	a4,s0
2000121e:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001220:	00d797b3          	sll	a5,a5,a3
20001224:	fff7c793          	not	a5,a5
20001228:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000122a:	00d716b3          	sll	a3,a4,a3
2000122e:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001230:	c1d0                	sw	a2,4(a1)
20001232:	a011                	j	20001236 <dif_uart_irq_set_enabled+0x40>
20001234:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001236:	4492                	lw	s1,4(sp)
20001238:	4422                	lw	s0,8(sp)
2000123a:	40b2                	lw	ra,12(sp)
2000123c:	0141                	addi	sp,sp,16
2000123e:	8082                	ret

20001240 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20001240:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20001242:	c606                	sw	ra,12(sp)
20001244:	c422                	sw	s0,8(sp)
20001246:	c10d                	beqz	a0,20001268 <dif_uart_irq_force+0x28>
20001248:	842a                	mv	s0,a0
2000124a:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000124c:	852e                	mv	a0,a1
2000124e:	85b2                	mv	a1,a2
20001250:	3df5                	jal	2000114c <uart_irq_offset_get>
20001252:	85aa                	mv	a1,a0
20001254:	4505                	li	a0,1
20001256:	c991                	beqz	a1,2000126a <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001258:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
2000125a:	4010                	lw	a2,0(s0)
2000125c:	4501                	li	a0,0
2000125e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001260:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001264:	c60c                	sw	a1,8(a2)
20001266:	a011                	j	2000126a <dif_uart_irq_force+0x2a>
20001268:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
2000126a:	4422                	lw	s0,8(sp)
2000126c:	40b2                	lw	ra,12(sp)
2000126e:	0141                	addi	sp,sp,16
20001270:	8082                	ret

20001272 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001272:	cd09                	beqz	a0,2000128c <dif_uart_watermark_rx_set+0x1a>
20001274:	4691                	li	a3,4
20001276:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001278:	00b6eb63          	bltu	a3,a1,2000128e <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000127c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000127e:	4d54                	lw	a3,28(a0)
20001280:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20001282:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001284:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001286:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001288:	cd4c                	sw	a1,28(a0)
2000128a:	a011                	j	2000128e <dif_uart_watermark_rx_set+0x1c>
2000128c:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000128e:	8532                	mv	a0,a2
20001290:	8082                	ret

20001292 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001292:	cd11                	beqz	a0,200012ae <dif_uart_watermark_tx_set+0x1c>
20001294:	468d                	li	a3,3
20001296:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001298:	00b6ec63          	bltu	a3,a1,200012b0 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000129c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000129e:	4d54                	lw	a3,28(a0)
200012a0:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
200012a2:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200012a4:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200012a8:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200012aa:	cd4c                	sw	a1,28(a0)
200012ac:	a011                	j	200012b0 <dif_uart_watermark_tx_set+0x1e>
200012ae:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200012b0:	8532                	mv	a0,a2
200012b2:	8082                	ret

200012b4 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200012b4:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200012b6:	c51d                	beqz	a0,200012e4 <dif_uart_bytes_send+0x30>
200012b8:	c595                	beqz	a1,200012e4 <dif_uart_bytes_send+0x30>
200012ba:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200012bc:	c20d                	beqz	a2,200012de <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200012be:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012c2:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200012c6:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200012c8:	eb19                	bnez	a4,200012de <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
200012ca:	00f58733          	add	a4,a1,a5
200012ce:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
200012d2:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200012d4:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200012d8:	fef613e3          	bne	a2,a5,200012be <dif_uart_bytes_send+0xa>
200012dc:	87b2                	mv	a5,a2
200012de:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
200012e0:	c291                	beqz	a3,200012e4 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
200012e2:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
200012e4:	853a                	mv	a0,a4
200012e6:	8082                	ret

200012e8 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
200012e8:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
200012ea:	c515                	beqz	a0,20001316 <dif_uart_bytes_receive+0x2e>
200012ec:	c60d                	beqz	a2,20001316 <dif_uart_bytes_receive+0x2e>
200012ee:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200012f0:	cd99                	beqz	a1,2000130e <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200012f2:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012f4:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200012f6:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200012fa:	eb91                	bnez	a5,2000130e <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200012fc:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200012fe:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001302:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001304:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001308:	ff0595e3          	bne	a1,a6,200012f2 <dif_uart_bytes_receive+0xa>
2000130c:	882e                	mv	a6,a1
2000130e:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001310:	c299                	beqz	a3,20001316 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001312:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001316:	853a                	mv	a0,a4
20001318:	8082                	ret

2000131a <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
2000131a:	cd19                	beqz	a0,20001338 <dif_uart_byte_send_polled+0x1e>
2000131c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000131e:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001320:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001322:	fef5                	bnez	a3,2000131e <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001324:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001326:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001328:	e299                	bnez	a3,2000132e <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000132a:	ce0c                	sw	a1,24(a2)
2000132c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000132e:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001330:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001332:	dd75                	beqz	a0,2000132e <dif_uart_byte_send_polled+0x14>
20001334:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001336:	8082                	ret
20001338:	4509                	li	a0,2
2000133a:	8082                	ret

2000133c <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
2000133c:	862a                	mv	a2,a0
2000133e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001340:	c205                	beqz	a2,20001360 <dif_uart_byte_receive_polled+0x24>
20001342:	cd99                	beqz	a1,20001360 <dif_uart_byte_receive_polled+0x24>
20001344:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001346:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001348:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
2000134c:	fd6d                	bnez	a0,20001346 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000134e:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001350:	02057693          	andi	a3,a0,32
20001354:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001356:	e689                	bnez	a3,20001360 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001358:	4a50                	lw	a2,20(a2)
2000135a:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000135c:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001360:	8082                	ret

20001362 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001362:	862a                	mv	a2,a0
20001364:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001366:	ca09                	beqz	a2,20001378 <dif_uart_rx_bytes_available+0x16>
20001368:	c981                	beqz	a1,20001378 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000136a:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000136c:	5110                	lw	a2,32(a0)
2000136e:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001370:	8241                	srli	a2,a2,0x10
20001372:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001376:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001378:	8082                	ret

2000137a <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000137a:	862a                	mv	a2,a0
2000137c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
2000137e:	ce01                	beqz	a2,20001396 <dif_uart_tx_bytes_available+0x1c>
20001380:	c999                	beqz	a1,20001396 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001382:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001384:	5110                	lw	a2,32(a0)
20001386:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001388:	03f67613          	andi	a2,a2,63
2000138c:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001390:	40c68633          	sub	a2,a3,a2
20001394:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001396:	8082                	ret

20001398 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001398:	c11d                	beqz	a0,200013be <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000139a:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000139c:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
2000139e:	ffd5f693          	andi	a3,a1,-3
200013a2:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200013a6:	fff58713          	addi	a4,a1,-1
200013aa:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200013ac:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200013b0:	00f77463          	bgeu	a4,a5,200013b8 <dif_uart_fifo_reset+0x20>
200013b4:	0025e593          	ori	a1,a1,2
200013b8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013ba:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200013bc:	8082                	ret
200013be:	4509                	li	a0,2
200013c0:	8082                	ret

200013c2 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
200013c2:	c515                	beqz	a0,200013ee <dif_uart_loopback_set+0x2c>
200013c4:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
200013c6:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
200013c8:	0015b593          	seqz	a1,a1
200013cc:	4715                	li	a4,5
200013ce:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200013d2:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
200013d4:	00163613          	seqz	a2,a2
200013d8:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200013da:	00b797b3          	sll	a5,a5,a1
200013de:	fff7c793          	not	a5,a5
200013e2:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200013e4:	00b615b3          	sll	a1,a2,a1
200013e8:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013ea:	c54c                	sw	a1,12(a0)
200013ec:	a011                	j	200013f0 <dif_uart_loopback_set+0x2e>
200013ee:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200013f0:	8536                	mv	a0,a3
200013f2:	8082                	ret

200013f4 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
200013f4:	862a                	mv	a2,a0
200013f6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
200013f8:	ca11                	beqz	a2,2000140c <dif_uart_enable_rx_timeout+0x18>
200013fa:	0185d693          	srli	a3,a1,0x18
200013fe:	e699                	bnez	a3,2000140c <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001400:	4210                	lw	a2,0(a2)
20001402:	4501                	li	a0,0
20001404:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001408:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000140a:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
2000140c:	8082                	ret

2000140e <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
2000140e:	c511                	beqz	a0,2000141a <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001410:	410c                	lw	a1,0(a0)
20001412:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001414:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001418:	8082                	ret
2000141a:	4509                	li	a0,2
2000141c:	8082                	ret

2000141e <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
2000141e:	86aa                	mv	a3,a0
20001420:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001422:	ce99                	beqz	a3,20001440 <dif_uart_get_rx_timeout+0x22>
20001424:	cd91                	beqz	a1,20001440 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001426:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001428:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
2000142a:	fff6c513          	not	a0,a3
2000142e:	817d                	srli	a0,a0,0x1f
20001430:	c188                	sw	a0,0(a1)
20001432:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001434:	c611                	beqz	a2,20001440 <dif_uart_get_rx_timeout+0x22>
20001436:	010005b7          	lui	a1,0x1000
2000143a:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
2000143c:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
2000143e:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001440:	8082                	ret
	...

20001444 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20001444:	1101                	addi	sp,sp,-32
20001446:	ce06                	sw	ra,28(sp)
20001448:	cc22                	sw	s0,24(sp)
2000144a:	65b1                	lui	a1,0xc
2000144c:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20001450:	02b50163          	beq	a0,a1,20001472 <test_status_set+0x2e>
20001454:	65a5                	lui	a1,0x9
20001456:	05b5                	addi	a1,a1,13
20001458:	04b50063          	beq	a0,a1,20001498 <test_status_set+0x54>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
2000145c:	00000597          	auipc	a1,0x0
20001460:	67858593          	addi	a1,a1,1656 # 20001ad4 <kDeviceTestStatusAddress>
20001464:	418c                	lw	a1,0(a1)
20001466:	c191                	beqz	a1,2000146a <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001468:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
2000146a:	4462                	lw	s0,24(sp)
2000146c:	40f2                	lw	ra,28(sp)
2000146e:	6105                	addi	sp,sp,32
20001470:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20001472:	00000517          	auipc	a0,0x0
20001476:	66650513          	addi	a0,a0,1638 # 20001ad8 <kDeviceLogBypassUartAddress>
2000147a:	4108                	lw	a0,0(a0)
2000147c:	e129                	bnez	a0,200014be <test_status_set+0x7a>
2000147e:	00000597          	auipc	a1,0x0
20001482:	74a58593          	addi	a1,a1,1866 # 20001bc8 <kDifUartFifoSizeBytes+0x18>
20001486:	840a                	mv	s0,sp
20001488:	4651                	li	a2,20
2000148a:	8522                	mv	a0,s0
2000148c:	b1cff0ef          	jal	ra,200007a8 <memcpy>
20001490:	8522                	mv	a0,s0
20001492:	e46ff0ef          	jal	ra,20000ad8 <base_log_internal_core>
20001496:	a81d                	j	200014cc <test_status_set+0x88>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20001498:	00000517          	auipc	a0,0x0
2000149c:	64050513          	addi	a0,a0,1600 # 20001ad8 <kDeviceLogBypassUartAddress>
200014a0:	4108                	lw	a0,0(a0)
200014a2:	ed1d                	bnez	a0,200014e0 <test_status_set+0x9c>
200014a4:	00000597          	auipc	a1,0x0
200014a8:	71058593          	addi	a1,a1,1808 # 20001bb4 <kDifUartFifoSizeBytes+0x4>
200014ac:	840a                	mv	s0,sp
200014ae:	4651                	li	a2,20
200014b0:	8522                	mv	a0,s0
200014b2:	af6ff0ef          	jal	ra,200007a8 <memcpy>
200014b6:	8522                	mv	a0,s0
200014b8:	e20ff0ef          	jal	ra,20000ad8 <base_log_internal_core>
200014bc:	a80d                	j	200014ee <test_status_set+0xaa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200014be:	e000f517          	auipc	a0,0xe000f
200014c2:	caa50513          	addi	a0,a0,-854 # 10168 <test_status_set.kLogFields.2>
200014c6:	4581                	li	a1,0
200014c8:	eb6ff0ef          	jal	ra,20000b7e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200014cc:	00000517          	auipc	a0,0x0
200014d0:	60850513          	addi	a0,a0,1544 # 20001ad4 <kDeviceTestStatusAddress>
200014d4:	4108                	lw	a0,0(a0)
200014d6:	c50d                	beqz	a0,20001500 <test_status_set+0xbc>
200014d8:	65b1                	lui	a1,0xc
200014da:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200014de:	a005                	j	200014fe <test_status_set+0xba>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200014e0:	e000f517          	auipc	a0,0xe000f
200014e4:	c7450513          	addi	a0,a0,-908 # 10154 <test_status_set.kLogFields>
200014e8:	4581                	li	a1,0
200014ea:	e94ff0ef          	jal	ra,20000b7e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200014ee:	00000517          	auipc	a0,0x0
200014f2:	5e650513          	addi	a0,a0,1510 # 20001ad4 <kDeviceTestStatusAddress>
200014f6:	4108                	lw	a0,0(a0)
200014f8:	c501                	beqz	a0,20001500 <test_status_set+0xbc>
200014fa:	65a5                	lui	a1,0x9
200014fc:	05b5                	addi	a1,a1,13
200014fe:	c10c                	sw	a1,0(a0)
20001500:	2049                	jal	20001582 <abort>
	...

20001504 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20001504:	10500073          	wfi
20001508:	8082                	ret

2000150a <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
2000150a:	1141                	addi	sp,sp,-16
2000150c:	c606                	sw	ra,12(sp)
2000150e:	00000597          	auipc	a1,0x0
20001512:	5a258593          	addi	a1,a1,1442 # 20001ab0 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20001516:	41d0                	lw	a2,4(a1)
20001518:	4194                	lw	a3,0(a1)
2000151a:	02a605b3          	mul	a1,a2,a0
2000151e:	02a6b633          	mulhu	a2,a3,a0
20001522:	95b2                	add	a1,a1,a2
20001524:	02a68533          	mul	a0,a3,a0
20001528:	000f4637          	lui	a2,0xf4
2000152c:	24060613          	addi	a2,a2,576 # f4240 <test_status_set.kLogFields.2+0xe40d8>
20001530:	4681                	li	a3,0
20001532:	2899                	jal	20001588 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20001534:	4801                	li	a6,0
20001536:	4701                	li	a4,0

20001538 <read0>:
20001538:	b8002873          	csrr	a6,mcycleh
2000153c:	b00026f3          	csrr	a3,mcycle
20001540:	b8002773          	csrr	a4,mcycleh
20001544:	fee81ae3          	bne	a6,a4,20001538 <read0>
20001548:	4781                	li	a5,0
2000154a:	4601                	li	a2,0

2000154c <read1>:
2000154c:	b80027f3          	csrr	a5,mcycleh
20001550:	b0002773          	csrr	a4,mcycle
20001554:	b8002673          	csrr	a2,mcycleh
20001558:	fec79ae3          	bne	a5,a2,2000154c <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
2000155c:	00d73633          	sltu	a2,a4,a3
20001560:	410787b3          	sub	a5,a5,a6
20001564:	8f91                	sub	a5,a5,a2
20001566:	00b78663          	beq	a5,a1,20001572 <read1+0x26>
2000156a:	00b7b733          	sltu	a4,a5,a1
2000156e:	ff69                	bnez	a4,20001548 <read0+0x10>
20001570:	a031                	j	2000157c <read1+0x30>
20001572:	40d70633          	sub	a2,a4,a3
20001576:	00a63733          	sltu	a4,a2,a0
2000157a:	f779                	bnez	a4,20001548 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
2000157c:	40b2                	lw	ra,12(sp)
2000157e:	0141                	addi	sp,sp,16
20001580:	8082                	ret

20001582 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20001582:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20001586:	bff5                	j	20001582 <abort>

20001588 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001588:	88aa                	mv	a7,a0
2000158a:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
2000158c:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
2000158e:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001590:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001592:	20069963          	bnez	a3,200017a4 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001596:	200026b7          	lui	a3,0x20002
2000159a:	bdc68693          	addi	a3,a3,-1060 # 20001bdc <__clz_tab>
2000159e:	0cc5f063          	bgeu	a1,a2,2000165e <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200015a2:	6741                	lui	a4,0x10
200015a4:	0ae67663          	bgeu	a2,a4,20001650 <__udivdi3+0xc8>
200015a8:	0ff00713          	li	a4,255
200015ac:	00c73733          	sltu	a4,a4,a2
200015b0:	070e                	slli	a4,a4,0x3
200015b2:	00e65533          	srl	a0,a2,a4
200015b6:	96aa                	add	a3,a3,a0
200015b8:	0006c683          	lbu	a3,0(a3)
200015bc:	02000513          	li	a0,32
200015c0:	9736                	add	a4,a4,a3
200015c2:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
200015c6:	00e50c63          	beq	a0,a4,200015de <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200015ca:	00d797b3          	sll	a5,a5,a3
200015ce:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
200015d2:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200015d6:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
200015da:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
200015de:	01085893          	srli	a7,a6,0x10
200015e2:	0315d7b3          	divu	a5,a1,a7
200015e6:	01081613          	slli	a2,a6,0x10
200015ea:	8241                	srli	a2,a2,0x10
200015ec:	01035713          	srli	a4,t1,0x10
200015f0:	0315f6b3          	remu	a3,a1,a7
200015f4:	853e                	mv	a0,a5
200015f6:	02f605b3          	mul	a1,a2,a5
200015fa:	06c2                	slli	a3,a3,0x10
200015fc:	8f55                	or	a4,a4,a3
200015fe:	00b77c63          	bgeu	a4,a1,20001616 <__udivdi3+0x8e>
20001602:	9742                	add	a4,a4,a6
20001604:	fff78513          	addi	a0,a5,-1
20001608:	01076763          	bltu	a4,a6,20001616 <__udivdi3+0x8e>
2000160c:	00b77563          	bgeu	a4,a1,20001616 <__udivdi3+0x8e>
20001610:	ffe78513          	addi	a0,a5,-2
20001614:	9742                	add	a4,a4,a6
20001616:	8f0d                	sub	a4,a4,a1
20001618:	031777b3          	remu	a5,a4,a7
2000161c:	0342                	slli	t1,t1,0x10
2000161e:	01035313          	srli	t1,t1,0x10
20001622:	03175733          	divu	a4,a4,a7
20001626:	07c2                	slli	a5,a5,0x10
20001628:	0067e333          	or	t1,a5,t1
2000162c:	02e606b3          	mul	a3,a2,a4
20001630:	863a                	mv	a2,a4
20001632:	00d37b63          	bgeu	t1,a3,20001648 <__udivdi3+0xc0>
20001636:	9342                	add	t1,t1,a6
20001638:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000163c:	01036663          	bltu	t1,a6,20001648 <__udivdi3+0xc0>
20001640:	00d37463          	bgeu	t1,a3,20001648 <__udivdi3+0xc0>
20001644:	ffe70613          	addi	a2,a4,-2
20001648:	0542                	slli	a0,a0,0x10
2000164a:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000164c:	4581                	li	a1,0
2000164e:	a85d                	j	20001704 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001650:	01000537          	lui	a0,0x1000
20001654:	4741                	li	a4,16
20001656:	f4a66ee3          	bltu	a2,a0,200015b2 <__udivdi3+0x2a>
2000165a:	4761                	li	a4,24
2000165c:	bf99                	j	200015b2 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
2000165e:	e601                	bnez	a2,20001666 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001660:	4705                	li	a4,1
20001662:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001666:	6741                	lui	a4,0x10
20001668:	08e87f63          	bgeu	a6,a4,20001706 <__udivdi3+0x17e>
2000166c:	0ff00713          	li	a4,255
20001670:	01077363          	bgeu	a4,a6,20001676 <__udivdi3+0xee>
20001674:	4521                	li	a0,8
20001676:	00a85733          	srl	a4,a6,a0
2000167a:	96ba                	add	a3,a3,a4
2000167c:	0006c703          	lbu	a4,0(a3)
20001680:	02000613          	li	a2,32
20001684:	972a                	add	a4,a4,a0
20001686:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
2000168a:	08e61563          	bne	a2,a4,20001714 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
2000168e:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001692:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001694:	01085893          	srli	a7,a6,0x10
20001698:	01081613          	slli	a2,a6,0x10
2000169c:	8241                	srli	a2,a2,0x10
2000169e:	01035713          	srli	a4,t1,0x10
200016a2:	0317f6b3          	remu	a3,a5,a7
200016a6:	0317d7b3          	divu	a5,a5,a7
200016aa:	06c2                	slli	a3,a3,0x10
200016ac:	8f55                	or	a4,a4,a3
200016ae:	02f60e33          	mul	t3,a2,a5
200016b2:	853e                	mv	a0,a5
200016b4:	01c77c63          	bgeu	a4,t3,200016cc <__udivdi3+0x144>
200016b8:	9742                	add	a4,a4,a6
200016ba:	fff78513          	addi	a0,a5,-1
200016be:	01076763          	bltu	a4,a6,200016cc <__udivdi3+0x144>
200016c2:	01c77563          	bgeu	a4,t3,200016cc <__udivdi3+0x144>
200016c6:	ffe78513          	addi	a0,a5,-2
200016ca:	9742                	add	a4,a4,a6
200016cc:	41c70733          	sub	a4,a4,t3
200016d0:	031777b3          	remu	a5,a4,a7
200016d4:	0342                	slli	t1,t1,0x10
200016d6:	01035313          	srli	t1,t1,0x10
200016da:	03175733          	divu	a4,a4,a7
200016de:	07c2                	slli	a5,a5,0x10
200016e0:	0067e333          	or	t1,a5,t1
200016e4:	02e606b3          	mul	a3,a2,a4
200016e8:	863a                	mv	a2,a4
200016ea:	00d37b63          	bgeu	t1,a3,20001700 <__udivdi3+0x178>
200016ee:	9342                	add	t1,t1,a6
200016f0:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200016f4:	01036663          	bltu	t1,a6,20001700 <__udivdi3+0x178>
200016f8:	00d37463          	bgeu	t1,a3,20001700 <__udivdi3+0x178>
200016fc:	ffe70613          	addi	a2,a4,-2
20001700:	0542                	slli	a0,a0,0x10
20001702:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001704:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001706:	01000737          	lui	a4,0x1000
2000170a:	4541                	li	a0,16
2000170c:	f6e865e3          	bltu	a6,a4,20001676 <__udivdi3+0xee>
20001710:	4561                	li	a0,24
20001712:	b795                	j	20001676 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001714:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001718:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
2000171c:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001720:	00d797b3          	sll	a5,a5,a3
20001724:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001728:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
2000172c:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001730:	0315f733          	remu	a4,a1,a7
20001734:	01081793          	slli	a5,a6,0x10
20001738:	83c1                	srli	a5,a5,0x10
2000173a:	01065513          	srli	a0,a2,0x10
2000173e:	0315d5b3          	divu	a1,a1,a7
20001742:	0742                	slli	a4,a4,0x10
20001744:	8f49                	or	a4,a4,a0
20001746:	02b786b3          	mul	a3,a5,a1
2000174a:	852e                	mv	a0,a1
2000174c:	00d77c63          	bgeu	a4,a3,20001764 <__udivdi3+0x1dc>
20001750:	9742                	add	a4,a4,a6
20001752:	fff58513          	addi	a0,a1,-1
20001756:	01076763          	bltu	a4,a6,20001764 <__udivdi3+0x1dc>
2000175a:	00d77563          	bgeu	a4,a3,20001764 <__udivdi3+0x1dc>
2000175e:	ffe58513          	addi	a0,a1,-2
20001762:	9742                	add	a4,a4,a6
20001764:	40d706b3          	sub	a3,a4,a3
20001768:	0316f733          	remu	a4,a3,a7
2000176c:	0642                	slli	a2,a2,0x10
2000176e:	8241                	srli	a2,a2,0x10
20001770:	0316d6b3          	divu	a3,a3,a7
20001774:	0742                	slli	a4,a4,0x10
20001776:	02d788b3          	mul	a7,a5,a3
2000177a:	00c767b3          	or	a5,a4,a2
2000177e:	8736                	mv	a4,a3
20001780:	0117fc63          	bgeu	a5,a7,20001798 <__udivdi3+0x210>
20001784:	97c2                	add	a5,a5,a6
20001786:	fff68713          	addi	a4,a3,-1
2000178a:	0107e763          	bltu	a5,a6,20001798 <__udivdi3+0x210>
2000178e:	0117f563          	bgeu	a5,a7,20001798 <__udivdi3+0x210>
20001792:	ffe68713          	addi	a4,a3,-2
20001796:	97c2                	add	a5,a5,a6
20001798:	01051593          	slli	a1,a0,0x10
2000179c:	411787b3          	sub	a5,a5,a7
200017a0:	8dd9                	or	a1,a1,a4
200017a2:	bdcd                	j	20001694 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
200017a4:	14d5e263          	bltu	a1,a3,200018e8 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200017a8:	6741                	lui	a4,0x10
200017aa:	02e6ff63          	bgeu	a3,a4,200017e8 <__udivdi3+0x260>
200017ae:	0ff00713          	li	a4,255
200017b2:	00d735b3          	sltu	a1,a4,a3
200017b6:	058e                	slli	a1,a1,0x3
200017b8:	20002737          	lui	a4,0x20002
200017bc:	00b6d533          	srl	a0,a3,a1
200017c0:	bdc70713          	addi	a4,a4,-1060 # 20001bdc <__clz_tab>
200017c4:	972a                	add	a4,a4,a0
200017c6:	00074703          	lbu	a4,0(a4)
200017ca:	02000513          	li	a0,32
200017ce:	972e                	add	a4,a4,a1
200017d0:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
200017d4:	02e51163          	bne	a0,a4,200017f6 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
200017d8:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
200017da:	f2f6e5e3          	bltu	a3,a5,20001704 <__udivdi3+0x17c>
200017de:	00c8b533          	sltu	a0,a7,a2
200017e2:	00154513          	xori	a0,a0,1
200017e6:	bf39                	j	20001704 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200017e8:	01000737          	lui	a4,0x1000
200017ec:	45c1                	li	a1,16
200017ee:	fce6e5e3          	bltu	a3,a4,200017b8 <__udivdi3+0x230>
200017f2:	45e1                	li	a1,24
200017f4:	b7d1                	j	200017b8 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
200017f6:	00e65333          	srl	t1,a2,a4
200017fa:	00b696b3          	sll	a3,a3,a1
200017fe:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001802:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001806:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
2000180a:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000180e:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001812:	00b797b3          	sll	a5,a5,a1
20001816:	00e8d733          	srl	a4,a7,a4
2000181a:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000181e:	01031793          	slli	a5,t1,0x10
20001822:	83c1                	srli	a5,a5,0x10
20001824:	01085713          	srli	a4,a6,0x10
20001828:	02a65633          	divu	a2,a2,a0
2000182c:	06c2                	slli	a3,a3,0x10
2000182e:	8f55                	or	a4,a4,a3
20001830:	02c78f33          	mul	t5,a5,a2
20001834:	8e32                	mv	t3,a2
20001836:	01e77c63          	bgeu	a4,t5,2000184e <__udivdi3+0x2c6>
2000183a:	971a                	add	a4,a4,t1
2000183c:	fff60e13          	addi	t3,a2,-1
20001840:	00676763          	bltu	a4,t1,2000184e <__udivdi3+0x2c6>
20001844:	01e77563          	bgeu	a4,t5,2000184e <__udivdi3+0x2c6>
20001848:	ffe60e13          	addi	t3,a2,-2
2000184c:	971a                	add	a4,a4,t1
2000184e:	41e70733          	sub	a4,a4,t5
20001852:	02a776b3          	remu	a3,a4,a0
20001856:	02a75733          	divu	a4,a4,a0
2000185a:	06c2                	slli	a3,a3,0x10
2000185c:	02e78633          	mul	a2,a5,a4
20001860:	01081793          	slli	a5,a6,0x10
20001864:	83c1                	srli	a5,a5,0x10
20001866:	8fd5                	or	a5,a5,a3
20001868:	86ba                	mv	a3,a4
2000186a:	00c7fc63          	bgeu	a5,a2,20001882 <__udivdi3+0x2fa>
2000186e:	979a                	add	a5,a5,t1
20001870:	fff70693          	addi	a3,a4,-1 # ffffff <test_status_set.kLogFields.2+0xfefe97>
20001874:	0067e763          	bltu	a5,t1,20001882 <__udivdi3+0x2fa>
20001878:	00c7f563          	bgeu	a5,a2,20001882 <__udivdi3+0x2fa>
2000187c:	ffe70693          	addi	a3,a4,-2
20001880:	979a                	add	a5,a5,t1
20001882:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001886:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001888:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000188a:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
2000188e:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001892:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001894:	00def6b3          	and	a3,t4,a3
20001898:	01055613          	srli	a2,a0,0x10
2000189c:	010ede93          	srli	t4,t4,0x10
200018a0:	02d80333          	mul	t1,a6,a3
200018a4:	02d606b3          	mul	a3,a2,a3
200018a8:	01035713          	srli	a4,t1,0x10
200018ac:	03d80833          	mul	a6,a6,t4
200018b0:	9836                	add	a6,a6,a3
200018b2:	9742                	add	a4,a4,a6
200018b4:	03d60633          	mul	a2,a2,t4
200018b8:	00d77363          	bgeu	a4,a3,200018be <__udivdi3+0x336>
200018bc:	9672                	add	a2,a2,t3
200018be:	01075693          	srli	a3,a4,0x10
200018c2:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200018c4:	02c7e063          	bltu	a5,a2,200018e4 <__udivdi3+0x35c>
200018c8:	d8c792e3          	bne	a5,a2,2000164c <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200018cc:	67c1                	lui	a5,0x10
200018ce:	17fd                	addi	a5,a5,-1
200018d0:	8f7d                	and	a4,a4,a5
200018d2:	0742                	slli	a4,a4,0x10
200018d4:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
200018d8:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200018dc:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200018de:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200018e0:	e2e8f2e3          	bgeu	a7,a4,20001704 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
200018e4:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
200018e6:	b39d                	j	2000164c <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
200018e8:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
200018ea:	4501                	li	a0,0
200018ec:	bd21                	j	20001704 <__udivdi3+0x17c>
