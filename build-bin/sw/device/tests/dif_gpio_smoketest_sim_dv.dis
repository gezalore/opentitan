
sw/device/tests/dif_gpio_smoketest_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         0000173c  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000696  200018c0  200018c0  000028c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20001f58  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000000c  10000008  20001f60  00003008  2**2
                  ALLOC
  8 .logs.fields  0000012c  00010000  00010000  00003008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000765b  00000000  00000000  0000315a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014d7  00000000  00000000  0000a7b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004065  00000000  00000000  0000bd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004166  00000000  00000000  0000fd89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002f0  00000000  00000000  00013eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002044  00000000  00000000  000141df  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000007cc  00000000  00000000  00016224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fec58593          	addi	a1,a1,-20 # 10000014 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	f0860613          	addi	a2,a2,-248 # 20001f58 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2e7d                	jal	2000043c <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	6040006f          	j	20000684 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	0800006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	1b80006f          	j	200002c4 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2000006f          	j	2000031c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2480006f          	j	20000374 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000180:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20000182:	de06                	sw	ra,60(sp)
20000184:	dc16                	sw	t0,56(sp)
20000186:	da1a                	sw	t1,52(sp)
20000188:	d81e                	sw	t2,48(sp)
2000018a:	d62a                	sw	a0,44(sp)
2000018c:	d42e                	sw	a1,40(sp)
2000018e:	d232                	sw	a2,36(sp)
20000190:	d036                	sw	a3,32(sp)
20000192:	ce3a                	sw	a4,28(sp)
20000194:	cc3e                	sw	a5,24(sp)
20000196:	ca42                	sw	a6,20(sp)
20000198:	c846                	sw	a7,16(sp)
2000019a:	c672                	sw	t3,12(sp)
2000019c:	c476                	sw	t4,8(sp)
2000019e:	c27a                	sw	t5,4(sp)
200001a0:	c07e                	sw	t6,0(sp)
200001a2:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
200001a6:	897d                	andi	a0,a0,31
200001a8:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
200001aa:	00a5dc63          	bge	a1,a0,200001c2 <handler_exception+0x42>
200001ae:	4599                	li	a1,6
200001b0:	02a5c263          	blt	a1,a0,200001d4 <handler_exception+0x54>
200001b4:	458d                	li	a1,3
200001b6:	02b50c63          	beq	a0,a1,200001ee <handler_exception+0x6e>
200001ba:	4595                	li	a1,5
200001bc:	02b50763          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001c0:	a015                	j	200001e4 <handler_exception+0x64>
200001c2:	c115                	beqz	a0,200001e6 <handler_exception+0x66>
200001c4:	4585                	li	a1,1
200001c6:	02b50063          	beq	a0,a1,200001e6 <handler_exception+0x66>
200001ca:	4589                	li	a1,2
200001cc:	00b51c63          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200001d0:	208d                	jal	20000232 <handler_instr_ill_fault>
200001d2:	a839                	j	200001f0 <handler_exception+0x70>
200001d4:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200001d6:	00b50a63          	beq	a0,a1,200001ea <handler_exception+0x6a>
200001da:	45ad                	li	a1,11
200001dc:	00b51463          	bne	a0,a1,200001e4 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200001e0:	2065                	jal	20000288 <handler_ecall>
200001e2:	a039                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200001e4:	a001                	j	200001e4 <handler_exception+0x64>
200001e6:	2805                	jal	20000216 <handler_instr_acc_fault>
200001e8:	a021                	j	200001f0 <handler_exception+0x70>
200001ea:	2049                	jal	2000026c <handler_lsu_fault>
200001ec:	a011                	j	200001f0 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200001ee:	208d                	jal	20000250 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200001f0:	4f82                	lw	t6,0(sp)
200001f2:	4f12                	lw	t5,4(sp)
200001f4:	4ea2                	lw	t4,8(sp)
200001f6:	4e32                	lw	t3,12(sp)
200001f8:	48c2                	lw	a7,16(sp)
200001fa:	4852                	lw	a6,20(sp)
200001fc:	47e2                	lw	a5,24(sp)
200001fe:	4772                	lw	a4,28(sp)
20000200:	5682                	lw	a3,32(sp)
20000202:	5612                	lw	a2,36(sp)
20000204:	55a2                	lw	a1,40(sp)
20000206:	5532                	lw	a0,44(sp)
20000208:	53c2                	lw	t2,48(sp)
2000020a:	5352                	lw	t1,52(sp)
2000020c:	52e2                	lw	t0,56(sp)
2000020e:	50f2                	lw	ra,60(sp)
20000210:	6121                	addi	sp,sp,64
20000212:	30200073          	mret

20000216 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20000216:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20000218:	de06                	sw	ra,60(sp)
2000021a:	dc22                	sw	s0,56(sp)
2000021c:	00002597          	auipc	a1,0x2
20000220:	9c858593          	addi	a1,a1,-1592 # 20001be4 <__clz_tab+0x160>
20000224:	0040                	addi	s0,sp,4
20000226:	03400613          	li	a2,52
2000022a:	8522                	mv	a0,s0
2000022c:	21b5                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
2000022e:	8522                	mv	a0,s0
20000230:	2a71                	jal	200003cc <print_exc_msg>

20000232 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20000232:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20000234:	c686                	sw	ra,76(sp)
20000236:	c4a2                	sw	s0,72(sp)
20000238:	00002597          	auipc	a1,0x2
2000023c:	9e058593          	addi	a1,a1,-1568 # 20001c18 <__clz_tab+0x194>
20000240:	00d10413          	addi	s0,sp,13
20000244:	03b00613          	li	a2,59
20000248:	8522                	mv	a0,s0
2000024a:	21b9                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
2000024c:	8522                	mv	a0,s0
2000024e:	2abd                	jal	200003cc <print_exc_msg>

20000250 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20000250:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20000252:	de06                	sw	ra,60(sp)
20000254:	dc22                	sw	s0,56(sp)
20000256:	00002597          	auipc	a1,0x2
2000025a:	9fd58593          	addi	a1,a1,-1539 # 20001c53 <__clz_tab+0x1cf>
2000025e:	840a                	mv	s0,sp
20000260:	03800613          	li	a2,56
20000264:	8522                	mv	a0,s0
20000266:	290d                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20000268:	8522                	mv	a0,s0
2000026a:	228d                	jal	200003cc <print_exc_msg>

2000026c <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
2000026c:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
2000026e:	de06                	sw	ra,60(sp)
20000270:	dc22                	sw	s0,56(sp)
20000272:	00002597          	auipc	a1,0x2
20000276:	a1958593          	addi	a1,a1,-1511 # 20001c8b <__clz_tab+0x207>
2000027a:	0020                	addi	s0,sp,8
2000027c:	03000613          	li	a2,48
20000280:	8522                	mv	a0,s0
20000282:	2919                	jal	20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20000284:	8522                	mv	a0,s0
20000286:	2299                	jal	200003cc <print_exc_msg>

20000288 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000288:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000028a:	ce06                	sw	ra,28(sp)
2000028c:	cc22                	sw	s0,24(sp)
2000028e:	00001517          	auipc	a0,0x1
20000292:	72a50513          	addi	a0,a0,1834 # 200019b8 <kDeviceLogBypassUartAddress>
20000296:	4108                	lw	a0,0(a0)
20000298:	c909                	beqz	a0,200002aa <handler_ecall+0x22>
2000029a:	e0010517          	auipc	a0,0xe0010
2000029e:	da250513          	addi	a0,a0,-606 # 1003c <handler_ecall.kLogFields>
200002a2:	4581                	li	a1,0
200002a4:	1ef000ef          	jal	ra,20000c92 <base_log_internal_dv>
200002a8:	a821                	j	200002c0 <handler_ecall+0x38>
200002aa:	00001597          	auipc	a1,0x1
200002ae:	65258593          	addi	a1,a1,1618 # 200018fc <__udivdi3+0x3a6>
200002b2:	840a                	mv	s0,sp
200002b4:	4651                	li	a2,20
200002b6:	8522                	mv	a0,s0
200002b8:	26c5                	jal	20000698 <memcpy>
200002ba:	8522                	mv	a0,s0
200002bc:	131000ef          	jal	ra,20000bec <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200002c0:	a001                	j	200002c0 <handler_ecall+0x38>
200002c2:	0001                	nop

200002c4 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200002c4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200002c6:	ce86                	sw	ra,92(sp)
200002c8:	cc96                	sw	t0,88(sp)
200002ca:	ca9a                	sw	t1,84(sp)
200002cc:	c89e                	sw	t2,80(sp)
200002ce:	c6a2                	sw	s0,76(sp)
200002d0:	c4aa                	sw	a0,72(sp)
200002d2:	c2ae                	sw	a1,68(sp)
200002d4:	c0b2                	sw	a2,64(sp)
200002d6:	de36                	sw	a3,60(sp)
200002d8:	dc3a                	sw	a4,56(sp)
200002da:	da3e                	sw	a5,52(sp)
200002dc:	d842                	sw	a6,48(sp)
200002de:	d646                	sw	a7,44(sp)
200002e0:	d472                	sw	t3,40(sp)
200002e2:	d276                	sw	t4,36(sp)
200002e4:	d07a                	sw	t5,32(sp)
200002e6:	ce7e                	sw	t6,28(sp)
200002e8:	00001517          	auipc	a0,0x1
200002ec:	6d050513          	addi	a0,a0,1744 # 200019b8 <kDeviceLogBypassUartAddress>
200002f0:	4108                	lw	a0,0(a0)
200002f2:	c909                	beqz	a0,20000304 <handler_irq_software+0x40>
200002f4:	e0010517          	auipc	a0,0xe0010
200002f8:	d0c50513          	addi	a0,a0,-756 # 10000 <_dv_log_offset>
200002fc:	4581                	li	a1,0
200002fe:	195000ef          	jal	ra,20000c92 <base_log_internal_dv>
20000302:	a821                	j	2000031a <handler_irq_software+0x56>
20000304:	00001597          	auipc	a1,0x1
20000308:	5bc58593          	addi	a1,a1,1468 # 200018c0 <__udivdi3+0x36a>
2000030c:	0020                	addi	s0,sp,8
2000030e:	4651                	li	a2,20
20000310:	8522                	mv	a0,s0
20000312:	2659                	jal	20000698 <memcpy>
20000314:	8522                	mv	a0,s0
20000316:	0d7000ef          	jal	ra,20000bec <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
2000031a:	a001                	j	2000031a <handler_irq_software+0x56>

2000031c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
2000031c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
2000031e:	ce86                	sw	ra,92(sp)
20000320:	cc96                	sw	t0,88(sp)
20000322:	ca9a                	sw	t1,84(sp)
20000324:	c89e                	sw	t2,80(sp)
20000326:	c6a2                	sw	s0,76(sp)
20000328:	c4aa                	sw	a0,72(sp)
2000032a:	c2ae                	sw	a1,68(sp)
2000032c:	c0b2                	sw	a2,64(sp)
2000032e:	de36                	sw	a3,60(sp)
20000330:	dc3a                	sw	a4,56(sp)
20000332:	da3e                	sw	a5,52(sp)
20000334:	d842                	sw	a6,48(sp)
20000336:	d646                	sw	a7,44(sp)
20000338:	d472                	sw	t3,40(sp)
2000033a:	d276                	sw	t4,36(sp)
2000033c:	d07a                	sw	t5,32(sp)
2000033e:	ce7e                	sw	t6,28(sp)
20000340:	00001517          	auipc	a0,0x1
20000344:	67850513          	addi	a0,a0,1656 # 200019b8 <kDeviceLogBypassUartAddress>
20000348:	4108                	lw	a0,0(a0)
2000034a:	c909                	beqz	a0,2000035c <handler_irq_timer+0x40>
2000034c:	e0010517          	auipc	a0,0xe0010
20000350:	cc850513          	addi	a0,a0,-824 # 10014 <handler_irq_timer.kLogFields>
20000354:	4581                	li	a1,0
20000356:	13d000ef          	jal	ra,20000c92 <base_log_internal_dv>
2000035a:	a821                	j	20000372 <handler_irq_timer+0x56>
2000035c:	00001597          	auipc	a1,0x1
20000360:	57858593          	addi	a1,a1,1400 # 200018d4 <__udivdi3+0x37e>
20000364:	0020                	addi	s0,sp,8
20000366:	4651                	li	a2,20
20000368:	8522                	mv	a0,s0
2000036a:	263d                	jal	20000698 <memcpy>
2000036c:	8522                	mv	a0,s0
2000036e:	07f000ef          	jal	ra,20000bec <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20000372:	a001                	j	20000372 <handler_irq_timer+0x56>

20000374 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20000374:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20000376:	ce86                	sw	ra,92(sp)
20000378:	cc96                	sw	t0,88(sp)
2000037a:	ca9a                	sw	t1,84(sp)
2000037c:	c89e                	sw	t2,80(sp)
2000037e:	c6a2                	sw	s0,76(sp)
20000380:	c4aa                	sw	a0,72(sp)
20000382:	c2ae                	sw	a1,68(sp)
20000384:	c0b2                	sw	a2,64(sp)
20000386:	de36                	sw	a3,60(sp)
20000388:	dc3a                	sw	a4,56(sp)
2000038a:	da3e                	sw	a5,52(sp)
2000038c:	d842                	sw	a6,48(sp)
2000038e:	d646                	sw	a7,44(sp)
20000390:	d472                	sw	t3,40(sp)
20000392:	d276                	sw	t4,36(sp)
20000394:	d07a                	sw	t5,32(sp)
20000396:	ce7e                	sw	t6,28(sp)
20000398:	00001517          	auipc	a0,0x1
2000039c:	62050513          	addi	a0,a0,1568 # 200019b8 <kDeviceLogBypassUartAddress>
200003a0:	4108                	lw	a0,0(a0)
200003a2:	c909                	beqz	a0,200003b4 <handler_irq_external+0x40>
200003a4:	e0010517          	auipc	a0,0xe0010
200003a8:	c8450513          	addi	a0,a0,-892 # 10028 <handler_irq_external.kLogFields>
200003ac:	4581                	li	a1,0
200003ae:	0e5000ef          	jal	ra,20000c92 <base_log_internal_dv>
200003b2:	a821                	j	200003ca <handler_irq_external+0x56>
200003b4:	00001597          	auipc	a1,0x1
200003b8:	53458593          	addi	a1,a1,1332 # 200018e8 <__udivdi3+0x392>
200003bc:	0020                	addi	s0,sp,8
200003be:	4651                	li	a2,20
200003c0:	8522                	mv	a0,s0
200003c2:	2cd9                	jal	20000698 <memcpy>
200003c4:	8522                	mv	a0,s0
200003c6:	027000ef          	jal	ra,20000bec <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200003ca:	a001                	j	200003ca <handler_irq_external+0x56>

200003cc <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200003cc:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200003ce:	ce06                	sw	ra,28(sp)
200003d0:	cc22                	sw	s0,24(sp)
200003d2:	ca26                	sw	s1,20(sp)
200003d4:	00001597          	auipc	a1,0x1
200003d8:	5e458593          	addi	a1,a1,1508 # 200019b8 <kDeviceLogBypassUartAddress>
200003dc:	418c                	lw	a1,0(a1)
200003de:	842a                	mv	s0,a0
200003e0:	c19d                	beqz	a1,20000406 <print_exc_msg+0x3a>
200003e2:	e0010517          	auipc	a0,0xe0010
200003e6:	c6e50513          	addi	a0,a0,-914 # 10050 <print_exc_msg.kLogFields>
200003ea:	4585                	li	a1,1
200003ec:	8622                	mv	a2,s0
200003ee:	0a5000ef          	jal	ra,20000c92 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200003f2:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200003f6:	e0010517          	auipc	a0,0xe0010
200003fa:	c6e50513          	addi	a0,a0,-914 # 10064 <print_exc_msg.kLogFields.6>
200003fe:	4585                	li	a1,1
20000400:	093000ef          	jal	ra,20000c92 <base_log_internal_dv>
20000404:	a81d                	j	2000043a <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000406:	00001597          	auipc	a1,0x1
2000040a:	50a58593          	addi	a1,a1,1290 # 20001910 <__udivdi3+0x3ba>
2000040e:	848a                	mv	s1,sp
20000410:	4651                	li	a2,20
20000412:	8526                	mv	a0,s1
20000414:	2451                	jal	20000698 <memcpy>
20000416:	8526                	mv	a0,s1
20000418:	85a2                	mv	a1,s0
2000041a:	7d2000ef          	jal	ra,20000bec <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000041e:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20000422:	00001597          	auipc	a1,0x1
20000426:	50258593          	addi	a1,a1,1282 # 20001924 <__udivdi3+0x3ce>
2000042a:	848a                	mv	s1,sp
2000042c:	4651                	li	a2,20
2000042e:	8526                	mv	a0,s1
20000430:	24a5                	jal	20000698 <memcpy>
20000432:	8526                	mv	a0,s1
20000434:	85a2                	mv	a1,s0
20000436:	7b6000ef          	jal	ra,20000bec <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
2000043a:	a001                	j	2000043a <print_exc_msg+0x6e>

2000043c <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
2000043c:	1141                	addi	sp,sp,-16
2000043e:	c606                	sw	ra,12(sp)
20000440:	c422                	sw	s0,8(sp)
20000442:	6511                	lui	a0,0x4
20000444:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20000448:	2221                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
2000044a:	00001517          	auipc	a0,0x1
2000044e:	53e50513          	addi	a0,a0,1342 # 20001988 <kDeviceType>
20000452:	4108                	lw	a0,0(a0)
20000454:	c111                	beqz	a0,20000458 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
20000456:	280d                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20000458:	24f1                	jal	20000724 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
2000045a:	00001597          	auipc	a1,0x1
2000045e:	58a58593          	addi	a1,a1,1418 # 200019e4 <kTestConfig>
20000462:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20000466:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20000468:	c191                	beqz	a1,2000046c <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
2000046a:	2839                	jal	20000488 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
2000046c:	2405                	jal	2000068c <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
2000046e:	e409                	bnez	s0,20000478 <main+0x3c>
20000470:	6531                	lui	a0,0xc
20000472:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000476:	a019                	j	2000047c <main+0x40>
20000478:	6525                	lui	a0,0x9
2000047a:	0535                	addi	a0,a0,13
2000047c:	28d1                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
2000047e:	4505                	li	a0,1
20000480:	4422                	lw	s0,8(sp)
20000482:	40b2                	lw	ra,12(sp)
20000484:	0141                	addi	sp,sp,16
20000486:	8082                	ret

20000488 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000488:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
2000048a:	ce06                	sw	ra,28(sp)
2000048c:	cc22                	sw	s0,24(sp)
2000048e:	ca26                	sw	s1,20(sp)
20000490:	f0000597          	auipc	a1,0xf0000
20000494:	b7858593          	addi	a1,a1,-1160 # 10000008 <_data_end>
20000498:	40000537          	lui	a0,0x40000
2000049c:	4f5000ef          	jal	ra,20001190 <dif_uart_init>
200004a0:	00001497          	auipc	s1,0x1
200004a4:	51848493          	addi	s1,s1,1304 # 200019b8 <kDeviceLogBypassUartAddress>
200004a8:	c915                	beqz	a0,200004dc <init_uart+0x54>
200004aa:	4088                	lw	a0,0(s1)
200004ac:	c909                	beqz	a0,200004be <init_uart+0x36>
200004ae:	e0010517          	auipc	a0,0xe0010
200004b2:	bca50513          	addi	a0,a0,-1078 # 10078 <init_uart.kLogFields>
200004b6:	4581                	li	a1,0
200004b8:	7da000ef          	jal	ra,20000c92 <base_log_internal_dv>
200004bc:	a821                	j	200004d4 <init_uart+0x4c>
200004be:	00001597          	auipc	a1,0x1
200004c2:	47a58593          	addi	a1,a1,1146 # 20001938 <__udivdi3+0x3e2>
200004c6:	840a                	mv	s0,sp
200004c8:	4651                	li	a2,20
200004ca:	8522                	mv	a0,s0
200004cc:	22f1                	jal	20000698 <memcpy>
200004ce:	8522                	mv	a0,s0
200004d0:	71c000ef          	jal	ra,20000bec <base_log_internal_core>
200004d4:	6531                	lui	a0,0xc
200004d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004da:	289d                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200004dc:	00001517          	auipc	a0,0x1
200004e0:	4cc50513          	addi	a0,a0,1228 # 200019a8 <kUartBaudrate>
200004e4:	4108                	lw	a0,0(a0)
200004e6:	00001597          	auipc	a1,0x1
200004ea:	4b258593          	addi	a1,a1,1202 # 20001998 <kClockFreqPeripheralHz>
200004ee:	418c                	lw	a1,0(a1)
200004f0:	c02a                	sw	a0,0(sp)
200004f2:	c22e                	sw	a1,4(sp)
200004f4:	4505                	li	a0,1
200004f6:	c42a                	sw	a0,8(sp)
200004f8:	c62a                	sw	a0,12(sp)
200004fa:	f0000517          	auipc	a0,0xf0000
200004fe:	b0e50513          	addi	a0,a0,-1266 # 10000008 <_data_end>
20000502:	858a                	mv	a1,sp
20000504:	49b000ef          	jal	ra,2000119e <dif_uart_configure>
20000508:	c90d                	beqz	a0,2000053a <init_uart+0xb2>
2000050a:	4088                	lw	a0,0(s1)
2000050c:	c909                	beqz	a0,2000051e <init_uart+0x96>
2000050e:	e0010517          	auipc	a0,0xe0010
20000512:	b7e50513          	addi	a0,a0,-1154 # 1008c <init_uart.kLogFields.2>
20000516:	4581                	li	a1,0
20000518:	77a000ef          	jal	ra,20000c92 <base_log_internal_dv>
2000051c:	a819                	j	20000532 <init_uart+0xaa>
2000051e:	00001597          	auipc	a1,0x1
20000522:	42e58593          	addi	a1,a1,1070 # 2000194c <__udivdi3+0x3f6>
20000526:	840a                	mv	s0,sp
20000528:	4651                	li	a2,20
2000052a:	8522                	mv	a0,s0
2000052c:	22b5                	jal	20000698 <memcpy>
2000052e:	8522                	mv	a0,s0
20000530:	2d75                	jal	20000bec <base_log_internal_core>
20000532:	6531                	lui	a0,0xc
20000534:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000538:	2821                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
2000053a:	f0000517          	auipc	a0,0xf0000
2000053e:	ace50513          	addi	a0,a0,-1330 # 10000008 <_data_end>
20000542:	7a2000ef          	jal	ra,20000ce4 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20000546:	44d2                	lw	s1,20(sp)
20000548:	4462                	lw	s0,24(sp)
2000054a:	40f2                	lw	ra,28(sp)
2000054c:	6105                	addi	sp,sp,32
2000054e:	8082                	ret

20000550 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20000550:	1101                	addi	sp,sp,-32
20000552:	ce06                	sw	ra,28(sp)
20000554:	cc22                	sw	s0,24(sp)
20000556:	65b1                	lui	a1,0xc
20000558:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
2000055c:	02b50163          	beq	a0,a1,2000057e <test_status_set+0x2e>
20000560:	65a5                	lui	a1,0x9
20000562:	05b5                	addi	a1,a1,13
20000564:	02b50e63          	beq	a0,a1,200005a0 <test_status_set+0x50>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000568:	00001597          	auipc	a1,0x1
2000056c:	44c58593          	addi	a1,a1,1100 # 200019b4 <kDeviceTestStatusAddress>
20000570:	418c                	lw	a1,0(a1)
20000572:	c191                	beqz	a1,20000576 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000574:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000576:	4462                	lw	s0,24(sp)
20000578:	40f2                	lw	ra,28(sp)
2000057a:	6105                	addi	sp,sp,32
2000057c:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000057e:	00001517          	auipc	a0,0x1
20000582:	43a50513          	addi	a0,a0,1082 # 200019b8 <kDeviceLogBypassUartAddress>
20000586:	4108                	lw	a0,0(a0)
20000588:	ed0d                	bnez	a0,200005c2 <test_status_set+0x72>
2000058a:	00001597          	auipc	a1,0x1
2000058e:	3ea58593          	addi	a1,a1,1002 # 20001974 <__udivdi3+0x41e>
20000592:	840a                	mv	s0,sp
20000594:	4651                	li	a2,20
20000596:	8522                	mv	a0,s0
20000598:	2201                	jal	20000698 <memcpy>
2000059a:	8522                	mv	a0,s0
2000059c:	2d81                	jal	20000bec <base_log_internal_core>
2000059e:	a805                	j	200005ce <test_status_set+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005a0:	00001517          	auipc	a0,0x1
200005a4:	41850513          	addi	a0,a0,1048 # 200019b8 <kDeviceLogBypassUartAddress>
200005a8:	4108                	lw	a0,0(a0)
200005aa:	ed05                	bnez	a0,200005e2 <test_status_set+0x92>
200005ac:	00001597          	auipc	a1,0x1
200005b0:	3b458593          	addi	a1,a1,948 # 20001960 <__udivdi3+0x40a>
200005b4:	840a                	mv	s0,sp
200005b6:	4651                	li	a2,20
200005b8:	8522                	mv	a0,s0
200005ba:	28f9                	jal	20000698 <memcpy>
200005bc:	8522                	mv	a0,s0
200005be:	253d                	jal	20000bec <base_log_internal_core>
200005c0:	a03d                	j	200005ee <test_status_set+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200005c2:	e0010517          	auipc	a0,0xe0010
200005c6:	af250513          	addi	a0,a0,-1294 # 100b4 <test_status_set.kLogFields.2>
200005ca:	4581                	li	a1,0
200005cc:	25d9                	jal	20000c92 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005ce:	00001517          	auipc	a0,0x1
200005d2:	3e650513          	addi	a0,a0,998 # 200019b4 <kDeviceTestStatusAddress>
200005d6:	4108                	lw	a0,0(a0)
200005d8:	c505                	beqz	a0,20000600 <test_status_set+0xb0>
200005da:	65b1                	lui	a1,0xc
200005dc:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200005e0:	a839                	j	200005fe <test_status_set+0xae>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200005e2:	e0010517          	auipc	a0,0xe0010
200005e6:	abe50513          	addi	a0,a0,-1346 # 100a0 <test_status_set.kLogFields>
200005ea:	4581                	li	a1,0
200005ec:	255d                	jal	20000c92 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005ee:	00001517          	auipc	a0,0x1
200005f2:	3c650513          	addi	a0,a0,966 # 200019b4 <kDeviceTestStatusAddress>
200005f6:	4108                	lw	a0,0(a0)
200005f8:	c501                	beqz	a0,20000600 <test_status_set+0xb0>
200005fa:	65a5                	lui	a1,0x9
200005fc:	05b5                	addi	a1,a1,13
200005fe:	c10c                	sw	a1,0(a0)
20000600:	2051                	jal	20000684 <abort>
	...

20000604 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000604:	10500073          	wfi
20000608:	8082                	ret

2000060a <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
2000060a:	1141                	addi	sp,sp,-16
2000060c:	c606                	sw	ra,12(sp)
2000060e:	00001597          	auipc	a1,0x1
20000612:	38258593          	addi	a1,a1,898 # 20001990 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000616:	41d0                	lw	a2,4(a1)
20000618:	4194                	lw	a3,0(a1)
2000061a:	02a605b3          	mul	a1,a2,a0
2000061e:	02a6b633          	mulhu	a2,a3,a0
20000622:	95b2                	add	a1,a1,a2
20000624:	02a68533          	mul	a0,a3,a0
20000628:	000f4637          	lui	a2,0xf4
2000062c:	24060613          	addi	a2,a2,576 # f4240 <test_gpio_write.kLogFields.9+0xe4128>
20000630:	4681                	li	a3,0
20000632:	725000ef          	jal	ra,20001556 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000636:	4801                	li	a6,0
20000638:	4701                	li	a4,0

2000063a <read0>:
2000063a:	b8002873          	csrr	a6,mcycleh
2000063e:	b00026f3          	csrr	a3,mcycle
20000642:	b8002773          	csrr	a4,mcycleh
20000646:	fee81ae3          	bne	a6,a4,2000063a <read0>
2000064a:	4781                	li	a5,0
2000064c:	4601                	li	a2,0

2000064e <read1>:
2000064e:	b80027f3          	csrr	a5,mcycleh
20000652:	b0002773          	csrr	a4,mcycle
20000656:	b8002673          	csrr	a2,mcycleh
2000065a:	fec79ae3          	bne	a5,a2,2000064e <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
2000065e:	00d73633          	sltu	a2,a4,a3
20000662:	410787b3          	sub	a5,a5,a6
20000666:	8f91                	sub	a5,a5,a2
20000668:	00b78663          	beq	a5,a1,20000674 <read1+0x26>
2000066c:	00b7b733          	sltu	a4,a5,a1
20000670:	ff69                	bnez	a4,2000064a <read0+0x10>
20000672:	a031                	j	2000067e <read1+0x30>
20000674:	40d70633          	sub	a2,a4,a3
20000678:	00a63733          	sltu	a4,a2,a0
2000067c:	f779                	bnez	a4,2000064a <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
2000067e:	40b2                	lw	ra,12(sp)
20000680:	0141                	addi	sp,sp,16
20000682:	8082                	ret

20000684 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000684:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000688:	bff5                	j	20000684 <abort>
	...

2000068c <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
2000068c:	8082                	ret
	...

20000690 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20000690:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20000692:	8082                	ret

20000694 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20000694:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20000696:	8082                	ret

20000698 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20000698:	ca11                	beqz	a2,200006ac <memcpy+0x14>
2000069a:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
2000069c:	00058703          	lb	a4,0(a1)
200006a0:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006a4:	167d                	addi	a2,a2,-1
200006a6:	0685                	addi	a3,a3,1
200006a8:	0585                	addi	a1,a1,1
200006aa:	fa6d                	bnez	a2,2000069c <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006ac:	8082                	ret

200006ae <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ae:	c619                	beqz	a2,200006bc <memset+0xe>
200006b0:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006b2:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006b6:	167d                	addi	a2,a2,-1
200006b8:	0685                	addi	a3,a3,1
200006ba:	fe65                	bnez	a2,200006b2 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006bc:	8082                	ret

200006be <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006be:	ce09                	beqz	a2,200006d8 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006c0:	00054683          	lbu	a3,0(a0)
200006c4:	0005c703          	lbu	a4,0(a1)
200006c8:	00e6ea63          	bltu	a3,a4,200006dc <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006cc:	00d76b63          	bltu	a4,a3,200006e2 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006d0:	167d                	addi	a2,a2,-1
200006d2:	0585                	addi	a1,a1,1
200006d4:	0505                	addi	a0,a0,1
200006d6:	f66d                	bnez	a2,200006c0 <memcmp+0x2>
200006d8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006da:	8082                	ret
200006dc:	fd600513          	li	a0,-42
200006e0:	8082                	ret
200006e2:	02a00513          	li	a0,42
200006e6:	8082                	ret

200006e8 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006e8:	ca11                	beqz	a2,200006fc <memchr+0x14>
200006ea:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006ee:	00054683          	lbu	a3,0(a0)
200006f2:	00b68663          	beq	a3,a1,200006fe <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
200006f6:	167d                	addi	a2,a2,-1
200006f8:	0505                	addi	a0,a0,1
200006fa:	fa75                	bnez	a2,200006ee <memchr+0x6>
200006fc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
200006fe:	8082                	ret

20000700 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000700:	ce09                	beqz	a2,2000071a <memrchr+0x1a>
20000702:	fff50693          	addi	a3,a0,-1
20000706:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
2000070a:	00c68733          	add	a4,a3,a2
2000070e:	00074703          	lbu	a4,0(a4)
20000712:	00b70663          	beq	a4,a1,2000071e <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000716:	167d                	addi	a2,a2,-1
20000718:	fa6d                	bnez	a2,2000070a <memrchr+0xa>
2000071a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
2000071c:	8082                	ret
2000071e:	9532                	add	a0,a0,a2
20000720:	157d                	addi	a0,a0,-1
20000722:	8082                	ret

20000724 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:66
 * Smoke test for the GPIO peripheral.
 *
 * Performs a loopback test by writing various values and reading them back.
 * NOTE: This test can currently run only on FPGA and DV.
 */
bool test_main(void) {
20000724:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:67
  CHECK(dif_gpio_init(
20000726:	d606                	sw	ra,44(sp)
20000728:	d422                	sw	s0,40(sp)
2000072a:	d226                	sw	s1,36(sp)
2000072c:	d04a                	sw	s2,32(sp)
2000072e:	f0000597          	auipc	a1,0xf0000
20000732:	8de58593          	addi	a1,a1,-1826 # 1000000c <gpio>
20000736:	40040537          	lui	a0,0x40040
2000073a:	2a59                	jal	200008d0 <dif_gpio_init>
2000073c:	00001497          	auipc	s1,0x1
20000740:	27c48493          	addi	s1,s1,636 # 200019b8 <kDeviceLogBypassUartAddress>
20000744:	c905                	beqz	a0,20000774 <test_main+0x50>
20000746:	4088                	lw	a0,0(s1)
20000748:	c901                	beqz	a0,20000758 <test_main+0x34>
2000074a:	e0010517          	auipc	a0,0xe0010
2000074e:	97e50513          	addi	a0,a0,-1666 # 100c8 <test_main.kLogFields>
20000752:	4581                	li	a1,0
20000754:	2b3d                	jal	20000c92 <base_log_internal_dv>
20000756:	a819                	j	2000076c <test_main+0x48>
20000758:	00001597          	auipc	a1,0x1
2000075c:	26458593          	addi	a1,a1,612 # 200019bc <kDeviceLogBypassUartAddress+0x4>
20000760:	0020                	addi	s0,sp,8
20000762:	4651                	li	a2,20
20000764:	8522                	mv	a0,s0
20000766:	3f0d                	jal	20000698 <memcpy>
20000768:	8522                	mv	a0,s0
2000076a:	2149                	jal	20000bec <base_log_internal_core>
2000076c:	6531                	lui	a0,0xc
2000076e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000772:	3bf9                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:72
            (dif_gpio_params_t){
                .base_addr = mmio_region_from_addr(TOP_EARLGREY_GPIO_BASE_ADDR),
            },
            &gpio) == kDifGpioOk);
  CHECK(dif_gpio_output_set_enabled_all(&gpio, kGpioMask) == kDifGpioOk);
20000774:	f0000517          	auipc	a0,0xf0000
20000778:	89850513          	addi	a0,a0,-1896 # 1000000c <gpio>
2000077c:	65c1                	lui	a1,0x10
2000077e:	15fd                	addi	a1,a1,-1
20000780:	2ec9                	jal	20000b52 <dif_gpio_output_set_enabled_all>
20000782:	c905                	beqz	a0,200007b2 <test_main+0x8e>
20000784:	4088                	lw	a0,0(s1)
20000786:	c901                	beqz	a0,20000796 <test_main+0x72>
20000788:	e0010517          	auipc	a0,0xe0010
2000078c:	95450513          	addi	a0,a0,-1708 # 100dc <test_main.kLogFields.2>
20000790:	4581                	li	a1,0
20000792:	2301                	jal	20000c92 <base_log_internal_dv>
20000794:	a819                	j	200007aa <test_main+0x86>
20000796:	00001597          	auipc	a1,0x1
2000079a:	23a58593          	addi	a1,a1,570 # 200019d0 <kDeviceLogBypassUartAddress+0x18>
2000079e:	0020                	addi	s0,sp,8
200007a0:	4651                	li	a2,20
200007a2:	8522                	mv	a0,s0
200007a4:	3dd5                	jal	20000698 <memcpy>
200007a6:	8522                	mv	a0,s0
200007a8:	2191                	jal	20000bec <base_log_internal_core>
200007aa:	6531                	lui	a0,0xc
200007ac:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007b0:	3345                	jal	20000550 <test_status_set>
200007b2:	4401                	li	s0,0
200007b4:	00001497          	auipc	s1,0x1
200007b8:	76c48493          	addi	s1,s1,1900 # 20001f20 <kGpioVals>
200007bc:	4951                	li	s2,20
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:75

  for (uint8_t i = 0; i < ARRAYSIZE(kGpioVals); ++i) {
    test_gpio_write(kGpioVals[i]);
200007be:	00940533          	add	a0,s0,s1
200007c2:	4108                	lw	a0,0(a0)
200007c4:	201d                	jal	200007ea <test_gpio_write>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:74
  for (uint8_t i = 0; i < ARRAYSIZE(kGpioVals); ++i) {
200007c6:	0411                	addi	s0,s0,4
200007c8:	ff241be3          	bne	s0,s2,200007be <test_main+0x9a>
200007cc:	4405                	li	s0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:81
  }

  // Walking 1s and 0s. Iterates over every integer with one bit set and every
  // integer with all but one bit set.
  for (uint32_t i = 1; i > 0; i <<= 1) {
    test_gpio_write(i);
200007ce:	8522                	mv	a0,s0
200007d0:	2829                	jal	200007ea <test_gpio_write>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:82
    test_gpio_write(~i);
200007d2:	fff44513          	not	a0,s0
200007d6:	2811                	jal	200007ea <test_gpio_write>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:80
  for (uint32_t i = 1; i > 0; i <<= 1) {
200007d8:	0406                	slli	s0,s0,0x1
200007da:	f875                	bnez	s0,200007ce <test_main+0xaa>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:85
  }

  return true;
200007dc:	4505                	li	a0,1
200007de:	5902                	lw	s2,32(sp)
200007e0:	5492                	lw	s1,36(sp)
200007e2:	5422                	lw	s0,40(sp)
200007e4:	50b2                	lw	ra,44(sp)
200007e6:	6145                	addi	sp,sp,48
200007e8:	8082                	ret

200007ea <test_gpio_write>:
test_gpio_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:49
static void test_gpio_write(uint32_t write_val) {
200007ea:	7179                	addi	sp,sp,-48
200007ec:	d606                	sw	ra,44(sp)
200007ee:	d422                	sw	s0,40(sp)
200007f0:	d226                	sw	s1,36(sp)
200007f2:	d04a                	sw	s2,32(sp)
200007f4:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:50
  CHECK(dif_gpio_write_all(&gpio, write_val) == kDifGpioOk);
200007f6:	f0000517          	auipc	a0,0xf0000
200007fa:	81650513          	addi	a0,a0,-2026 # 1000000c <gpio>
200007fe:	85a2                	mv	a1,s0
20000800:	24dd                	jal	20000ae6 <dif_gpio_write_all>
20000802:	00001917          	auipc	s2,0x1
20000806:	1b690913          	addi	s2,s2,438 # 200019b8 <kDeviceLogBypassUartAddress>
2000080a:	c90d                	beqz	a0,2000083c <test_gpio_write+0x52>
2000080c:	00092503          	lw	a0,0(s2)
20000810:	c901                	beqz	a0,20000820 <test_gpio_write+0x36>
20000812:	e0010517          	auipc	a0,0xe0010
20000816:	8de50513          	addi	a0,a0,-1826 # 100f0 <test_gpio_write.kLogFields>
2000081a:	4581                	li	a1,0
2000081c:	299d                	jal	20000c92 <base_log_internal_dv>
2000081e:	a819                	j	20000834 <test_gpio_write+0x4a>
20000820:	00001597          	auipc	a1,0x1
20000824:	1c858593          	addi	a1,a1,456 # 200019e8 <kTestConfig+0x4>
20000828:	0024                	addi	s1,sp,8
2000082a:	4651                	li	a2,20
2000082c:	8526                	mv	a0,s1
2000082e:	35ad                	jal	20000698 <memcpy>
20000830:	8526                	mv	a0,s1
20000832:	2e6d                	jal	20000bec <base_log_internal_core>
20000834:	6531                	lui	a0,0xc
20000836:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000083a:	3b19                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:52
  uint32_t read_val = 0;
2000083c:	c202                	sw	zero,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:53
  CHECK(dif_gpio_read_all(&gpio, &read_val) == kDifGpioOk);
2000083e:	effff517          	auipc	a0,0xeffff
20000842:	7ce50513          	addi	a0,a0,1998 # 1000000c <gpio>
20000846:	004c                	addi	a1,sp,4
20000848:	2c8d                	jal	20000aba <dif_gpio_read_all>
2000084a:	c90d                	beqz	a0,2000087c <test_gpio_write+0x92>
2000084c:	00092503          	lw	a0,0(s2)
20000850:	c901                	beqz	a0,20000860 <test_gpio_write+0x76>
20000852:	e0010517          	auipc	a0,0xe0010
20000856:	8b250513          	addi	a0,a0,-1870 # 10104 <test_gpio_write.kLogFields.6>
2000085a:	4581                	li	a1,0
2000085c:	291d                	jal	20000c92 <base_log_internal_dv>
2000085e:	a819                	j	20000874 <test_gpio_write+0x8a>
20000860:	00001597          	auipc	a1,0x1
20000864:	19c58593          	addi	a1,a1,412 # 200019fc <kTestConfig+0x18>
20000868:	0024                	addi	s1,sp,8
2000086a:	4651                	li	a2,20
2000086c:	8526                	mv	a0,s1
2000086e:	352d                	jal	20000698 <memcpy>
20000870:	8526                	mv	a0,s1
20000872:	2ead                	jal	20000bec <base_log_internal_core>
20000874:	6531                	lui	a0,0xc
20000876:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000087a:	39d9                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:56
  uint32_t actual = read_val & kGpioMask;
2000087c:	00415483          	lhu	s1,4(sp)
20000880:	6541                	lui	a0,0x10
20000882:	157d                	addi	a0,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:55
  uint32_t expected = write_val & kGpioMask;
20000884:	8c69                	and	s0,s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:57
  CHECK(expected == actual, "%X != %X", expected, actual);
20000886:	02940f63          	beq	s0,s1,200008c4 <test_gpio_write+0xda>
2000088a:	00092503          	lw	a0,0(s2)
2000088e:	c911                	beqz	a0,200008a2 <test_gpio_write+0xb8>
20000890:	e0010517          	auipc	a0,0xe0010
20000894:	88850513          	addi	a0,a0,-1912 # 10118 <test_gpio_write.kLogFields.9>
20000898:	4589                	li	a1,2
2000089a:	8622                	mv	a2,s0
2000089c:	86a6                	mv	a3,s1
2000089e:	2ed5                	jal	20000c92 <base_log_internal_dv>
200008a0:	a831                	j	200008bc <test_gpio_write+0xd2>
200008a2:	00001597          	auipc	a1,0x1
200008a6:	16e58593          	addi	a1,a1,366 # 20001a10 <kTestConfig+0x2c>
200008aa:	00810913          	addi	s2,sp,8
200008ae:	4651                	li	a2,20
200008b0:	854a                	mv	a0,s2
200008b2:	33dd                	jal	20000698 <memcpy>
200008b4:	854a                	mv	a0,s2
200008b6:	85a2                	mv	a1,s0
200008b8:	8626                	mv	a2,s1
200008ba:	2e0d                	jal	20000bec <base_log_internal_core>
200008bc:	6531                	lui	a0,0xc
200008be:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200008c2:	3179                	jal	20000550 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_gpio_smoketest.c:58
}
200008c4:	5902                	lw	s2,32(sp)
200008c6:	5492                	lw	s1,36(sp)
200008c8:	5422                	lw	s0,40(sp)
200008ca:	50b2                	lw	ra,44(sp)
200008cc:	6145                	addi	sp,sp,48
200008ce:	8082                	ret

200008d0 <dif_gpio_init>:
dif_gpio_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:103

  return kDifGpioOk;
}

dif_gpio_result_t dif_gpio_init(dif_gpio_params_t params, dif_gpio_t *gpio) {
  if (gpio == NULL) {
200008d0:	c581                	beqz	a1,200008d8 <dif_gpio_init+0x8>
200008d2:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:107
    return kDifGpioBadArg;
  }

  gpio->params = params;
200008d4:	c188                	sw	a0,0(a1)
200008d6:	a011                	j	200008da <dif_gpio_init+0xa>
200008d8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:110

  return kDifGpioOk;
}
200008da:	8532                	mv	a0,a2
200008dc:	8082                	ret

200008de <dif_gpio_reset>:
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:113

dif_gpio_result_t dif_gpio_reset(const dif_gpio_t *gpio) {
  if (gpio == NULL) {
200008de:	cd15                	beqz	a0,2000091a <dif_gpio_reset+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:119
    return kDifGpioBadArg;
  }

  // We don't need to write to `GPIO_MASKED_OE_*` and `GPIO_MASKED_OUT_*`
  // since we directly reset `GPIO_DIRECT_OE` and `GPIO_DIRECT_OUT` below.
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
200008e0:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200008e2:	0005a223          	sw	zero,4(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:120
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, 0);
200008e6:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200008e8:	0005ae23          	sw	zero,28(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:121
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET, 0);
200008ec:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200008ee:	0005a823          	sw	zero,16(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:122
  mmio_region_write32(gpio->params.base_addr,
200008f2:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200008f4:	0205a423          	sw	zero,40(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:124
                      GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
200008f8:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200008fa:	0205a623          	sw	zero,44(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:126
                      GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
200008fe:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000900:	0205a823          	sw	zero,48(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:128
                      GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000904:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000906:	0205aa23          	sw	zero,52(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:130
                      GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
2000090a:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000090c:	0205ac23          	sw	zero,56(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:133
                      GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET, 0);
  // Also clear all pending interrupts
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000910:	410c                	lw	a1,0(a0)
20000912:	4501                	li	a0,0
20000914:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000916:	c190                	sw	a2,0(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:137
                      0xFFFFFFFFu);

  return kDifGpioOk;
}
20000918:	8082                	ret
2000091a:	4509                	li	a0,2
2000091c:	8082                	ret

2000091e <dif_gpio_irq_is_pending>:
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:141

dif_gpio_result_t dif_gpio_irq_is_pending(const dif_gpio_t *gpio,
                                          dif_gpio_pin_t pin,
                                          bool *is_pending) {
2000091e:	86aa                	mv	a3,a0
20000920:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:142
  if (gpio == NULL || is_pending == NULL) {
20000922:	ca91                	beqz	a3,20000936 <dif_gpio_irq_is_pending+0x18>
20000924:	ca09                	beqz	a2,20000936 <dif_gpio_irq_is_pending+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
    return kDifGpioBadArg;
  }

  *is_pending = mmio_region_get_bit32(gpio->params.base_addr,
20000926:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000928:	4114                	lw	a3,0(a0)
2000092a:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000092c:	00b6d5b3          	srl	a1,a3,a1
20000930:	8985                	andi	a1,a1,1
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
20000932:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:150
                                      GPIO_INTR_STATE_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000936:	8082                	ret

20000938 <dif_gpio_irq_is_pending_all>:
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:153

dif_gpio_result_t dif_gpio_irq_is_pending_all(const dif_gpio_t *gpio,
                                              dif_gpio_state_t *is_pending) {
20000938:	862a                	mv	a2,a0
2000093a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:154
  if (gpio == NULL || is_pending == NULL) {
2000093c:	c611                	beqz	a2,20000948 <dif_gpio_irq_is_pending_all+0x10>
2000093e:	c589                	beqz	a1,20000948 <dif_gpio_irq_is_pending_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:159
    return kDifGpioBadArg;
  }

  *is_pending =
      mmio_region_read32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET);
20000940:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000942:	4110                	lw	a2,0(a0)
20000944:	4501                	li	a0,0
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:158
  *is_pending =
20000946:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:162

  return kDifGpioOk;
}
20000948:	8082                	ret

2000094a <dif_gpio_irq_acknowledge>:
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:166

dif_gpio_result_t dif_gpio_irq_acknowledge(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin) {
  if (gpio == NULL) {
2000094a:	c901                	beqz	a0,2000095a <dif_gpio_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:170
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
2000094c:	4110                	lw	a2,0(a0)
2000094e:	4501                	li	a0,0
20000950:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000952:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000956:	c20c                	sw	a1,0(a2)
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:174
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000958:	8082                	ret
2000095a:	4509                	li	a0,2
2000095c:	8082                	ret

2000095e <dif_gpio_irq_get_enabled>:
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:178

dif_gpio_result_t dif_gpio_irq_get_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t *state) {
2000095e:	86aa                	mv	a3,a0
20000960:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:179
  if (gpio == NULL || state == NULL) {
20000962:	ca89                	beqz	a3,20000974 <dif_gpio_irq_get_enabled+0x16>
20000964:	ca01                	beqz	a2,20000974 <dif_gpio_irq_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:183
    return kDifGpioBadArg;
  }

  bool is_enabled = mmio_region_get_bit32(gpio->params.base_addr,
20000966:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000968:	4154                	lw	a3,4(a0)
2000096a:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000096c:	00b6d5b3          	srl	a1,a3,a1
20000970:	8985                	andi	a1,a1,1
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:185
                                          GPIO_INTR_ENABLE_REG_OFFSET, pin);
  *state = is_enabled ? kDifGpioToggleEnabled : kDifGpioToggleDisabled;
20000972:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:188

  return kDifGpioOk;
}
20000974:	8082                	ret

20000976 <dif_gpio_irq_set_enabled>:
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:192

dif_gpio_result_t dif_gpio_irq_set_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t state) {
20000976:	86aa                	mv	a3,a0
20000978:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:193
  if (gpio == NULL) {
2000097a:	c695                	beqz	a3,200009a6 <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:197
    return kDifGpioBadArg;
  }

  switch (state) {
2000097c:	ca19                	beqz	a2,20000992 <dif_gpio_irq_set_enabled+0x1c>
2000097e:	4705                	li	a4,1
20000980:	02e61363          	bne	a2,a4,200009a6 <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:199
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_bit32(gpio->params.base_addr,
20000984:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000986:	4254                	lw	a3,4(a2)
20000988:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000098a:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000098e:	8dd5                	or	a1,a1,a3
20000990:	a811                	j	200009a4 <dif_gpio_irq_set_enabled+0x2e>
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:203
                                      GPIO_INTR_ENABLE_REG_OFFSET, pin);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_bit32(gpio->params.base_addr,
20000992:	4290                	lw	a2,0(a3)
20000994:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000996:	4254                	lw	a3,4(a2)
20000998:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000099a:	00b715b3          	sll	a1,a4,a1
2000099e:	fff5c593          	not	a1,a1
200009a2:	8df5                	and	a1,a1,a3
200009a4:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:211
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
200009a6:	8082                	ret

200009a8 <dif_gpio_irq_set_enabled_masked>:
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:215

dif_gpio_result_t dif_gpio_irq_set_enabled_masked(const dif_gpio_t *gpio,
                                                  dif_gpio_mask_t mask,
                                                  dif_gpio_toggle_t state) {
200009a8:	86aa                	mv	a3,a0
200009aa:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:216
  if (gpio == NULL) {
200009ac:	c28d                	beqz	a3,200009ce <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:220
    return kDifGpioBadArg;
  }

  switch (state) {
200009ae:	ca09                	beqz	a2,200009c0 <dif_gpio_irq_set_enabled_masked+0x18>
200009b0:	4705                	li	a4,1
200009b2:	00e61e63          	bne	a2,a4,200009ce <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:222
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
200009b6:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200009b8:	4254                	lw	a3,4(a2)
200009ba:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200009bc:	8dd5                	or	a1,a1,a3
200009be:	a039                	j	200009cc <dif_gpio_irq_set_enabled_masked+0x24>
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:226
                                       GPIO_INTR_ENABLE_REG_OFFSET, mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
200009c0:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200009c2:	4254                	lw	a3,4(a2)
200009c4:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200009c6:	fff5c593          	not	a1,a1
200009ca:	8df5                	and	a1,a1,a3
200009cc:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:234
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
200009ce:	8082                	ret

200009d0 <dif_gpio_irq_force>:
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:238

dif_gpio_result_t dif_gpio_irq_force(const dif_gpio_t *gpio,
                                     dif_gpio_pin_t pin) {
  if (gpio == NULL) {
200009d0:	c901                	beqz	a0,200009e0 <dif_gpio_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:242
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_TEST_REG_OFFSET,
200009d2:	4110                	lw	a2,0(a0)
200009d4:	4501                	li	a0,0
200009d6:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
200009d8:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200009dc:	c60c                	sw	a1,8(a2)
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:246
                      index_to_mask(pin));

  return kDifGpioOk;
}
200009de:	8082                	ret
200009e0:	4509                	li	a0,2
200009e2:	8082                	ret

200009e4 <dif_gpio_irq_disable_all>:
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:250

dif_gpio_result_t dif_gpio_irq_disable_all(const dif_gpio_t *gpio,
                                           dif_gpio_state_t *snapshot) {
  if (gpio == NULL) {
200009e4:	c911                	beqz	a0,200009f8 <dif_gpio_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:254
    return kDifGpioBadArg;
  }

  if (snapshot != NULL) {
200009e6:	c581                	beqz	a1,200009ee <dif_gpio_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:256
    *snapshot =
        mmio_region_read32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET);
200009e8:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200009ea:	4250                	lw	a2,4(a2)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:255
    *snapshot =
200009ec:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:258
  }
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
200009ee:	410c                	lw	a1,0(a0)
200009f0:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200009f2:	0005a223          	sw	zero,4(a1)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:261

  return kDifGpioOk;
}
200009f6:	8082                	ret
200009f8:	4509                	li	a0,2
200009fa:	8082                	ret

200009fc <dif_gpio_irq_restore_all>:
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:264

dif_gpio_result_t dif_gpio_irq_restore_all(const dif_gpio_t *gpio,
                                           const dif_gpio_state_t *snapshot) {
200009fc:	862a                	mv	a2,a0
200009fe:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:265
  if (gpio == NULL || snapshot == NULL) {
20000a00:	c611                	beqz	a2,20000a0c <dif_gpio_irq_restore_all+0x10>
20000a02:	c589                	beqz	a1,20000a0c <dif_gpio_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:270
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000a04:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:269
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
20000a06:	4210                	lw	a2,0(a2)
20000a08:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a0a:	c24c                	sw	a1,4(a2)
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:273

  return kDifGpioOk;
}
20000a0c:	8082                	ret

20000a0e <dif_gpio_irq_set_trigger>:
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:278

dif_gpio_result_t dif_gpio_irq_set_trigger(const dif_gpio_t *gpio,
                                           dif_gpio_mask_t mask,
                                           dif_gpio_irq_trigger_t trigger) {
  if (gpio == NULL) {
20000a0e:	c529                	beqz	a0,20000a58 <dif_gpio_irq_set_trigger+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:283
    return kDifGpioBadArg;
  }

  // Disable all interrupt triggers for the given mask.
  mmio_region_nonatomic_clear_mask32(
20000a10:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a12:	5698                	lw	a4,40(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000a14:	fff5c793          	not	a5,a1
20000a18:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a1a:	d698                	sw	a4,40(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:285
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000a1c:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a1e:	56d8                	lw	a4,44(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000a20:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a22:	d6d8                	sw	a4,44(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:287
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000a24:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a26:	5a98                	lw	a4,48(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000a28:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a2a:	da98                	sw	a4,48(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:289
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000a2c:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a2e:	5ad8                	lw	a4,52(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000a30:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a32:	dad8                	sw	a4,52(a3)
20000a34:	4709                	li	a4,2
20000a36:	4685                	li	a3,1
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);

  switch (trigger) {
20000a38:	02c75263          	bge	a4,a2,20000a5c <dif_gpio_irq_set_trigger+0x4e>
20000a3c:	4711                	li	a4,4
20000a3e:	02c74763          	blt	a4,a2,20000a6c <dif_gpio_irq_set_trigger+0x5e>
20000a42:	470d                	li	a4,3
20000a44:	02e60e63          	beq	a2,a4,20000a80 <dif_gpio_irq_set_trigger+0x72>
20000a48:	4711                	li	a4,4
20000a4a:	06e61663          	bne	a2,a4,20000ab6 <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:312
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
                                       GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeRisingFalling:
      mmio_region_nonatomic_set_mask32(
20000a4e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a50:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000a52:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a54:	d614                	sw	a3,40(a2)
20000a56:	a81d                	j	20000a8c <dif_gpio_irq_set_trigger+0x7e>
20000a58:	4689                	li	a3,2
20000a5a:	a8b1                	j	20000ab6 <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
  switch (trigger) {
20000a5c:	ce15                	beqz	a2,20000a98 <dif_gpio_irq_set_trigger+0x8a>
20000a5e:	4705                	li	a4,1
20000a60:	02e60663          	beq	a2,a4,20000a8c <dif_gpio_irq_set_trigger+0x7e>
20000a64:	4709                	li	a4,2
20000a66:	04e60363          	beq	a2,a4,20000aac <dif_gpio_irq_set_trigger+0x9e>
20000a6a:	a0b1                	j	20000ab6 <dif_gpio_irq_set_trigger+0xa8>
20000a6c:	4715                	li	a4,5
20000a6e:	02e60b63          	beq	a2,a4,20000aa4 <dif_gpio_irq_set_trigger+0x96>
20000a72:	4719                	li	a4,6
20000a74:	04e61163          	bne	a2,a4,20000ab6 <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:325
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
      mmio_region_nonatomic_set_mask32(
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeFallingLevelHigh:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000a78:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a7a:	5654                	lw	a3,44(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000a7c:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a7e:	d654                	sw	a3,44(a2)
20000a80:	4108                	lw	a0,0(a0)
20000a82:	5910                	lw	a2,48(a0)
20000a84:	4681                	li	a3,0
20000a86:	8dd1                	or	a1,a1,a2
20000a88:	d90c                	sw	a1,48(a0)
20000a8a:	a035                	j	20000ab6 <dif_gpio_irq_set_trigger+0xa8>
20000a8c:	4108                	lw	a0,0(a0)
20000a8e:	5550                	lw	a2,44(a0)
20000a90:	4681                	li	a3,0
20000a92:	8dd1                	or	a1,a1,a2
20000a94:	d54c                	sw	a1,44(a0)
20000a96:	a005                	j	20000ab6 <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:294
      mmio_region_nonatomic_set_mask32(
20000a98:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a9a:	5510                	lw	a2,40(a0)
20000a9c:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000a9e:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000aa0:	d50c                	sw	a1,40(a0)
20000aa2:	a811                	j	20000ab6 <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:319
      mmio_region_nonatomic_set_mask32(
20000aa4:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000aa6:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000aa8:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000aaa:	d614                	sw	a3,40(a2)
20000aac:	4108                	lw	a0,0(a0)
20000aae:	5950                	lw	a2,52(a0)
20000ab0:	4681                	li	a3,0
20000ab2:	8dd1                	or	a1,a1,a2
20000ab4:	d94c                	sw	a1,52(a0)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:337
    default:
      return kDifGpioError;
  }

  return kDifGpioOk;
}
20000ab6:	8536                	mv	a0,a3
20000ab8:	8082                	ret

20000aba <dif_gpio_read_all>:
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:340

dif_gpio_result_t dif_gpio_read_all(const dif_gpio_t *gpio,
                                    dif_gpio_state_t *state) {
20000aba:	862a                	mv	a2,a0
20000abc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:341
  if (gpio == NULL || state == NULL) {
20000abe:	c611                	beqz	a2,20000aca <dif_gpio_read_all+0x10>
20000ac0:	c589                	beqz	a1,20000aca <dif_gpio_read_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
    return kDifGpioBadArg;
  }

  *state = mmio_region_read32(gpio->params.base_addr, GPIO_DATA_IN_REG_OFFSET);
20000ac2:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ac4:	4550                	lw	a2,12(a0)
20000ac6:	4501                	li	a0,0
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
20000ac8:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:348

  return kDifGpioOk;
}
20000aca:	8082                	ret

20000acc <dif_gpio_read>:
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:351

dif_gpio_result_t dif_gpio_read(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                bool *state) {
20000acc:	86aa                	mv	a3,a0
20000ace:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:352
  if (gpio == NULL || state == NULL) {
20000ad0:	ca91                	beqz	a3,20000ae4 <dif_gpio_read+0x18>
20000ad2:	ca09                	beqz	a2,20000ae4 <dif_gpio_read+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
    return kDifGpioBadArg;
  }

  *state = mmio_region_get_bit32(gpio->params.base_addr,
20000ad4:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ad6:	4554                	lw	a3,12(a0)
20000ad8:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000ada:	00b6d5b3          	srl	a1,a3,a1
20000ade:	8985                	andi	a1,a1,1
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
20000ae0:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:360
                                 GPIO_DATA_IN_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000ae4:	8082                	ret

20000ae6 <dif_gpio_write_all>:
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:364

dif_gpio_result_t dif_gpio_write_all(const dif_gpio_t *gpio,
                                     dif_gpio_state_t state) {
  if (gpio == NULL) {
20000ae6:	c509                	beqz	a0,20000af0 <dif_gpio_write_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:368
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET,
20000ae8:	4110                	lw	a2,0(a0)
20000aea:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000aec:	ca0c                	sw	a1,16(a2)
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:372
                      state);

  return kDifGpioOk;
}
20000aee:	8082                	ret
20000af0:	4509                	li	a0,2
20000af2:	8082                	ret

20000af4 <dif_gpio_write>:
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:86
  if (gpio == NULL) {
20000af4:	c505                	beqz	a0,20000b1c <dif_gpio_write+0x28>
20000af6:	4741                	li	a4,16
20000af8:	46d1                	li	a3,20
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000afa:	00e5e363          	bltu	a1,a4,20000b00 <dif_gpio_write+0xc>
20000afe:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000b00:	89bd                	andi	a1,a1,15
20000b02:	4705                	li	a4,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000b04:	00b71733          	sll	a4,a4,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000b08:	01071593          	slli	a1,a4,0x10
20000b0c:	e211                	bnez	a2,20000b10 <dif_gpio_write+0x1c>
20000b0e:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000b10:	4110                	lw	a2,0(a0)
20000b12:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000b14:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b16:	9636                	add	a2,a2,a3
20000b18:	c20c                	sw	a1,0(a2)
dif_gpio_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:376

dif_gpio_result_t dif_gpio_write(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                 bool state) {
  return gpio_masked_bit_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000b1a:	8082                	ret
20000b1c:	4509                	li	a0,2
20000b1e:	8082                	ret

20000b20 <dif_gpio_write_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000b20:	c50d                	beqz	a0,20000b4a <dif_gpio_write_masked+0x2a>
20000b22:	66c1                	lui	a3,0x10
20000b24:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000b28:	00e5f7b3          	and	a5,a1,a4
20000b2c:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000b2e:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000b30:	c791                	beqz	a5,20000b3c <dif_gpio_write_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000b32:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000b34:	05c2                	slli	a1,a1,0x10
20000b36:	8f71                	and	a4,a4,a2
20000b38:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b3a:	cbcc                	sw	a1,20(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20000b3c:	ca89                	beqz	a3,20000b4e <dif_gpio_write_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20000b3e:	410c                	lw	a1,0(a0)
20000b40:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20000b42:	8241                	srli	a2,a2,0x10
20000b44:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b46:	cd90                	sw	a2,24(a1)
dif_gpio_write_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:383
}

dif_gpio_result_t dif_gpio_write_masked(const dif_gpio_t *gpio,
                                        dif_gpio_mask_t mask,
                                        dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000b48:	8082                	ret
20000b4a:	4509                	li	a0,2
20000b4c:	8082                	ret
20000b4e:	4501                	li	a0,0
20000b50:	8082                	ret

20000b52 <dif_gpio_output_set_enabled_all>:
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:389
                           GPIO_MASKED_OUT_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_output_set_enabled_all(const dif_gpio_t *gpio,
                                                  dif_gpio_state_t state) {
  if (gpio == NULL) {
20000b52:	c509                	beqz	a0,20000b5c <dif_gpio_output_set_enabled_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:393
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, state);
20000b54:	4110                	lw	a2,0(a0)
20000b56:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b58:	ce4c                	sw	a1,28(a2)
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:396

  return kDifGpioOk;
}
20000b5a:	8082                	ret
20000b5c:	4509                	li	a0,2
20000b5e:	8082                	ret

20000b60 <dif_gpio_output_set_enabled>:
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:401

dif_gpio_result_t dif_gpio_output_set_enabled(const dif_gpio_t *gpio,
                                              dif_gpio_pin_t pin,
                                              dif_gpio_toggle_t state) {
  if (gpio == NULL) {
20000b60:	c51d                	beqz	a0,20000b8e <dif_gpio_output_set_enabled+0x2e>
20000b62:	4741                	li	a4,16
20000b64:	02000693          	li	a3,32
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000b68:	00e5e463          	bltu	a1,a4,20000b70 <dif_gpio_output_set_enabled+0x10>
20000b6c:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000b70:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000b72:	89bd                	andi	a1,a1,15
20000b74:	4785                	li	a5,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000b76:	00b797b3          	sll	a5,a5,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000b7a:	01079593          	slli	a1,a5,0x10
20000b7e:	c211                	beqz	a2,20000b82 <dif_gpio_output_set_enabled+0x22>
20000b80:	873e                	mv	a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000b82:	4110                	lw	a2,0(a0)
20000b84:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000b86:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b88:	9636                	add	a2,a2,a3
20000b8a:	c20c                	sw	a1,0(a2)
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:409

  return gpio_masked_bit_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
                               GPIO_MASKED_OE_UPPER_REG_OFFSET, pin, state);

  return kDifGpioOk;
}
20000b8c:	8082                	ret
20000b8e:	4509                	li	a0,2
20000b90:	8082                	ret

20000b92 <dif_gpio_output_set_enabled_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000b92:	c50d                	beqz	a0,20000bbc <dif_gpio_output_set_enabled_masked+0x2a>
20000b94:	66c1                	lui	a3,0x10
20000b96:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000b9a:	00e5f7b3          	and	a5,a1,a4
20000b9e:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000ba0:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000ba2:	c791                	beqz	a5,20000bae <dif_gpio_output_set_enabled_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000ba4:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000ba6:	05c2                	slli	a1,a1,0x10
20000ba8:	8f71                	and	a4,a4,a2
20000baa:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bac:	d38c                	sw	a1,32(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20000bae:	ca89                	beqz	a3,20000bc0 <dif_gpio_output_set_enabled_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20000bb0:	410c                	lw	a1,0(a0)
20000bb2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20000bb4:	8241                	srli	a2,a2,0x10
20000bb6:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bb8:	d1d0                	sw	a2,36(a1)
dif_gpio_output_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:414

dif_gpio_result_t dif_gpio_output_set_enabled_masked(const dif_gpio_t *gpio,
                                                     dif_gpio_mask_t mask,
                                                     dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
20000bba:	8082                	ret
20000bbc:	4509                	li	a0,2
20000bbe:	8082                	ret
20000bc0:	4501                	li	a0,0
20000bc2:	8082                	ret

20000bc4 <dif_gpio_input_noise_filter_set_enabled>:
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:419
                           GPIO_MASKED_OE_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_input_noise_filter_set_enabled(
    const dif_gpio_t *gpio, dif_gpio_mask_t mask, dif_gpio_toggle_t state) {
20000bc4:	86aa                	mv	a3,a0
20000bc6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:420
  if (gpio == NULL) {
20000bc8:	c28d                	beqz	a3,20000bea <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:424
    return kDifGpioBadArg;
  }

  switch (state) {
20000bca:	ca09                	beqz	a2,20000bdc <dif_gpio_input_noise_filter_set_enabled+0x18>
20000bcc:	4705                	li	a4,1
20000bce:	00e61e63          	bne	a2,a4,20000bea <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:426
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000bd2:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000bd4:	5e14                	lw	a3,56(a2)
20000bd6:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000bd8:	8dd5                	or	a1,a1,a3
20000bda:	a039                	j	20000be8 <dif_gpio_input_noise_filter_set_enabled+0x24>
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:431
                                       GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20000bdc:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bde:	5e14                	lw	a3,56(a2)
20000be0:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000be2:	fff5c593          	not	a1,a1
20000be6:	8df5                	and	a1,a1,a3
20000be8:	de0c                	sw	a1,56(a2)
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:440
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000bea:	8082                	ret

20000bec <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000bec:	7139                	addi	sp,sp,-64
20000bee:	ce06                	sw	ra,28(sp)
20000bf0:	cc22                	sw	s0,24(sp)
20000bf2:	ca26                	sw	s1,20(sp)
20000bf4:	c84a                	sw	s2,16(sp)
20000bf6:	892a                	mv	s2,a0
20000bf8:	de46                	sw	a7,60(sp)
20000bfa:	dc42                	sw	a6,56(sp)
20000bfc:	da3e                	sw	a5,52(sp)
20000bfe:	d83a                	sw	a4,48(sp)
20000c00:	d636                	sw	a3,44(sp)
20000c02:	d432                	sw	a2,40(sp)
20000c04:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20000c06:	4144                	lw	s1,4(a0)
20000c08:	80000537          	lui	a0,0x80000
20000c0c:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffe0a7>
20000c10:	8526                	mv	a0,s1
20000c12:	4581                	li	a1,0
20000c14:	3cd1                	jal	200006e8 <memchr>
20000c16:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20000c1a:	02f00593          	li	a1,47
20000c1e:	8526                	mv	a0,s1
20000c20:	34c5                	jal	20000700 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000c22:	00092583          	lw	a1,0(s2)
20000c26:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20000c28:	00b66b63          	bltu	a2,a1,20000c3e <base_log_internal_core+0x52>
20000c2c:	058a                	slli	a1,a1,0x2
20000c2e:	00001617          	auipc	a2,0x1
20000c32:	df660613          	addi	a2,a2,-522 # 20001a24 <kTestConfig+0x40>
20000c36:	95b2                	add	a1,a1,a2
20000c38:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20000c3a:	e519                	bnez	a0,20000c48 <base_log_internal_core+0x5c>
20000c3c:	a801                	j	20000c4c <base_log_internal_core+0x60>
20000c3e:	00001597          	auipc	a1,0x1
20000c42:	30f58593          	addi	a1,a1,783 # 20001f4d <kGpioVals+0x2d>
20000c46:	c119                	beqz	a0,20000c4c <base_log_internal_core+0x60>
20000c48:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20000c4c:	effff417          	auipc	s0,0xeffff
20000c50:	3c440413          	addi	s0,s0,964 # 10000010 <base_log_internal_core.global_log_counter>
20000c54:	00045603          	lhu	a2,0(s0)
20000c58:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20000c5c:	00001517          	auipc	a0,0x1
20000c60:	2d850513          	addi	a0,a0,728 # 20001f34 <kGpioVals+0x14>
20000c64:	86a6                	mv	a3,s1
20000c66:	28d1                	jal	20000d3a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20000c68:	00041503          	lh	a0,0(s0)
20000c6c:	0505                	addi	a0,a0,1
20000c6e:	00a41023          	sh	a0,0(s0)
20000c72:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000c74:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000c76:	01092503          	lw	a0,16(s2)
20000c7a:	28c5                	jal	20000d6a <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000c7c:	00001517          	auipc	a0,0x1
20000c80:	2c650513          	addi	a0,a0,710 # 20001f42 <kGpioVals+0x22>
20000c84:	285d                	jal	20000d3a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000c86:	4942                	lw	s2,16(sp)
20000c88:	44d2                	lw	s1,20(sp)
20000c8a:	4462                	lw	s0,24(sp)
20000c8c:	40f2                	lw	ra,28(sp)
20000c8e:	6121                	addi	sp,sp,64
20000c90:	8082                	ret

20000c92 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20000c92:	1101                	addi	sp,sp,-32
20000c94:	ce46                	sw	a7,28(sp)
20000c96:	cc42                	sw	a6,24(sp)
20000c98:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000c9a:	00001797          	auipc	a5,0x1
20000c9e:	d1e78793          	addi	a5,a5,-738 # 200019b8 <kDeviceLogBypassUartAddress>
20000ca2:	439c                	lw	a5,0(a5)
20000ca4:	c83a                	sw	a4,16(sp)
20000ca6:	c636                	sw	a3,12(sp)
20000ca8:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000caa:	c388                	sw	a0,0(a5)
20000cac:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000cae:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000cb0:	c989                	beqz	a1,20000cc2 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000cb2:	4512                	lw	a0,4(sp)
20000cb4:	00450613          	addi	a2,a0,4
20000cb8:	c232                	sw	a2,4(sp)
20000cba:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000cbc:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cbe:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000cc0:	f9ed                	bnez	a1,20000cb2 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000cc2:	6105                	addi	sp,sp,32
20000cc4:	8082                	ret
	...

20000cc8 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20000cc8:	e589                	bnez	a1,20000cd2 <base_set_stdout+0xa>
20000cca:	00000597          	auipc	a1,0x0
20000cce:	01658593          	addi	a1,a1,22 # 20000ce0 <base_dev_null>
20000cd2:	effff617          	auipc	a2,0xeffff
20000cd6:	32e60613          	addi	a2,a2,814 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20000cda:	c208                	sw	a0,0(a2)
20000cdc:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20000cde:	8082                	ret

20000ce0 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20000ce0:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20000ce2:	8082                	ret

20000ce4 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20000ce4:	effff597          	auipc	a1,0xeffff
20000ce8:	31c58593          	addi	a1,a1,796 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20000cec:	c188                	sw	a0,0(a1)
20000cee:	00000517          	auipc	a0,0x0
20000cf2:	00c50513          	addi	a0,a0,12 # 20000cfa <base_dev_uart>
20000cf6:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20000cf8:	8082                	ret

20000cfa <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20000cfa:	1101                	addi	sp,sp,-32
20000cfc:	ce06                	sw	ra,28(sp)
20000cfe:	cc22                	sw	s0,24(sp)
20000d00:	ca26                	sw	s1,20(sp)
20000d02:	c84a                	sw	s2,16(sp)
20000d04:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000d06:	c20d                	beqz	a2,20000d28 <base_dev_uart+0x2e>
20000d08:	8432                	mv	s0,a2
20000d0a:	892e                	mv	s2,a1
20000d0c:	89aa                	mv	s3,a0
20000d0e:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20000d10:	00990533          	add	a0,s2,s1
20000d14:	00054583          	lbu	a1,0(a0)
20000d18:	854e                	mv	a0,s3
20000d1a:	2f11                	jal	2000142e <dif_uart_byte_send_polled>
20000d1c:	e519                	bnez	a0,20000d2a <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000d1e:	0485                	addi	s1,s1,1
20000d20:	fe9418e3          	bne	s0,s1,20000d10 <base_dev_uart+0x16>
20000d24:	84a2                	mv	s1,s0
20000d26:	a011                	j	20000d2a <base_dev_uart+0x30>
20000d28:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000d2a:	8526                	mv	a0,s1
20000d2c:	49b2                	lw	s3,12(sp)
20000d2e:	4942                	lw	s2,16(sp)
20000d30:	44d2                	lw	s1,20(sp)
20000d32:	4462                	lw	s0,24(sp)
20000d34:	40f2                	lw	ra,28(sp)
20000d36:	6105                	addi	sp,sp,32
20000d38:	8082                	ret

20000d3a <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000d3a:	7179                	addi	sp,sp,-48
20000d3c:	c606                	sw	ra,12(sp)
20000d3e:	d646                	sw	a7,44(sp)
20000d40:	d442                	sw	a6,40(sp)
20000d42:	d23e                	sw	a5,36(sp)
20000d44:	d03a                	sw	a4,32(sp)
20000d46:	ce36                	sw	a3,28(sp)
20000d48:	cc32                	sw	a2,24(sp)
20000d4a:	ca2e                	sw	a1,20(sp)
20000d4c:	effff597          	auipc	a1,0xeffff
20000d50:	2b458593          	addi	a1,a1,692 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000d54:	4190                	lw	a2,0(a1)
20000d56:	41cc                	lw	a1,4(a1)
20000d58:	872a                	mv	a4,a0
20000d5a:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000d5c:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000d5e:	8532                	mv	a0,a2
20000d60:	863a                	mv	a2,a4
20000d62:	200d                	jal	20000d84 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000d64:	40b2                	lw	ra,12(sp)
20000d66:	6145                	addi	sp,sp,48
20000d68:	8082                	ret

20000d6a <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000d6a:	effff697          	auipc	a3,0xeffff
20000d6e:	29668693          	addi	a3,a3,662 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000d72:	4290                	lw	a2,0(a3)
20000d74:	42d4                	lw	a3,4(a3)
20000d76:	872e                	mv	a4,a1
20000d78:	87aa                	mv	a5,a0
20000d7a:	8532                	mv	a0,a2
20000d7c:	85b6                	mv	a1,a3
20000d7e:	863e                	mv	a2,a5
20000d80:	86ba                	mv	a3,a4
20000d82:	a009                	j	20000d84 <base_vfprintf>

20000d84 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000d84:	7139                	addi	sp,sp,-64
20000d86:	de06                	sw	ra,60(sp)
20000d88:	dc22                	sw	s0,56(sp)
20000d8a:	da26                	sw	s1,52(sp)
20000d8c:	d84a                	sw	s2,48(sp)
20000d8e:	d64e                	sw	s3,44(sp)
20000d90:	d452                	sw	s4,40(sp)
20000d92:	d256                	sw	s5,36(sp)
20000d94:	d05a                	sw	s6,32(sp)
20000d96:	ce5e                	sw	s7,28(sp)
20000d98:	cc62                	sw	s8,24(sp)
20000d9a:	ca66                	sw	s9,20(sp)
20000d9c:	c86a                	sw	s10,16(sp)
20000d9e:	c66e                	sw	s11,12(sp)
20000da0:	8bb2                	mv	s7,a2
20000da2:	892a                	mv	s2,a0
20000da4:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000da6:	c199                	beqz	a1,20000dac <base_vfprintf+0x28>
20000da8:	89ae                	mv	s3,a1
20000daa:	a029                	j	20000db4 <base_vfprintf+0x30>
20000dac:	00000997          	auipc	s3,0x0
20000db0:	f3498993          	addi	s3,s3,-204 # 20000ce0 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000db4:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000db6:	000bc503          	lbu	a0,0(s7)
20000dba:	28050f63          	beqz	a0,20001058 <base_vfprintf+0x2d4>
20000dbe:	4b01                	li	s6,0
20000dc0:	02500c13          	li	s8,37
20000dc4:	4ca5                	li	s9,9
20000dc6:	02000d13          	li	s10,32
20000dca:	06800d93          	li	s11,104
20000dce:	00001a17          	auipc	s4,0x1
20000dd2:	181a0a13          	addi	s4,s4,385 # 20001f4f <kGpioVals+0x2f>
20000dd6:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20000dd8:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20000dda:	0ff57413          	andi	s0,a0,255
20000dde:	01840963          	beq	s0,s8,20000df0 <base_vfprintf+0x6c>
20000de2:	c419                	beqz	s0,20000df0 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20000de4:	009b8533          	add	a0,s7,s1
20000de8:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20000dec:	0485                	addi	s1,s1,1
20000dee:	b7f5                	j	20000dda <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20000df0:	c491                	beqz	s1,20000dfc <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20000df2:	854a                	mv	a0,s2
20000df4:	85de                	mv	a1,s7
20000df6:	8626                	mv	a2,s1
20000df8:	9982                	jalr	s3
20000dfa:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20000dfc:	24040f63          	beqz	s0,2000105a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000e00:	009b8633          	add	a2,s7,s1
20000e04:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000e08:	22050f63          	beqz	a0,20001046 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000e0c:	fd050593          	addi	a1,a0,-48
20000e10:	0ff5f593          	andi	a1,a1,255
20000e14:	00bcf863          	bgeu	s9,a1,20000e24 <base_vfprintf+0xa0>
20000e18:	4401                	li	s0,0
20000e1a:	4581                	li	a1,0
20000e1c:	4605                	li	a2,1
20000e1e:	028d7f63          	bgeu	s10,s0,20000e5c <base_vfprintf+0xd8>
20000e22:	aca1                	j	2000107a <base_vfprintf+0x2f6>
20000e24:	4581                	li	a1,0
20000e26:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000e28:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000e2a:	00b606b3          	add	a3,a2,a1
20000e2e:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000e32:	20068a63          	beqz	a3,20001046 <base_vfprintf+0x2c2>
20000e36:	0ff57513          	andi	a0,a0,255
20000e3a:	03540733          	mul	a4,s0,s5
20000e3e:	953a                	add	a0,a0,a4
20000e40:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000e44:	fd068513          	addi	a0,a3,-48
20000e48:	0ff57713          	andi	a4,a0,255
20000e4c:	0585                	addi	a1,a1,1
20000e4e:	8536                	mv	a0,a3
20000e50:	fcecfde3          	bgeu	s9,a4,20000e2a <base_vfprintf+0xa6>
20000e54:	4601                	li	a2,0
20000e56:	8536                	mv	a0,a3
20000e58:	228d6163          	bltu	s10,s0,2000107a <base_vfprintf+0x2f6>
20000e5c:	008036b3          	snez	a3,s0
20000e60:	8e55                	or	a2,a2,a3
20000e62:	20060c63          	beqz	a2,2000107a <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000e66:	95de                	add	a1,a1,s7
20000e68:	95a6                	add	a1,a1,s1
20000e6a:	00258b93          	addi	s7,a1,2
20000e6e:	02adce63          	blt	s11,a0,20000eaa <base_vfprintf+0x126>
20000e72:	06100593          	li	a1,97
20000e76:	06a5d563          	bge	a1,a0,20000ee0 <base_vfprintf+0x15c>
20000e7a:	06300593          	li	a1,99
20000e7e:	0ca5cb63          	blt	a1,a0,20000f54 <base_vfprintf+0x1d0>
20000e82:	06200593          	li	a1,98
20000e86:	14b50a63          	beq	a0,a1,20000fda <base_vfprintf+0x256>
20000e8a:	06300593          	li	a1,99
20000e8e:	18b51f63          	bne	a0,a1,2000102c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20000e92:	4502                	lw	a0,0(sp)
20000e94:	00450593          	addi	a1,a0,4
20000e98:	c02e                	sw	a1,0(sp)
20000e9a:	4108                	lw	a0,0(a0)
20000e9c:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20000ea0:	4605                	li	a2,1
20000ea2:	854a                	mv	a0,s2
20000ea4:	00b10593          	addi	a1,sp,11
20000ea8:	aa41                	j	20001038 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000eaa:	07200593          	li	a1,114
20000eae:	04a5dd63          	bge	a1,a0,20000f08 <base_vfprintf+0x184>
20000eb2:	07700593          	li	a1,119
20000eb6:	0aa5c663          	blt	a1,a0,20000f62 <base_vfprintf+0x1de>
20000eba:	07300593          	li	a1,115
20000ebe:	12b50963          	beq	a0,a1,20000ff0 <base_vfprintf+0x26c>
20000ec2:	07500593          	li	a1,117
20000ec6:	16b51363          	bne	a0,a1,2000102c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20000eca:	4502                	lw	a0,0(sp)
20000ecc:	00450593          	addi	a1,a0,4
20000ed0:	c02e                	sw	a1,0(sp)
20000ed2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000ed4:	00001797          	auipc	a5,0x1
20000ed8:	b7d78793          	addi	a5,a5,-1155 # 20001a51 <kDigitsLow>
20000edc:	4729                	li	a4,10
20000ede:	a8cd                	j	20000fd0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000ee0:	13850763          	beq	a0,s8,2000100e <base_vfprintf+0x28a>
20000ee4:	04800593          	li	a1,72
20000ee8:	00b50663          	beq	a0,a1,20000ef4 <base_vfprintf+0x170>
20000eec:	05800593          	li	a1,88
20000ef0:	12b51e63          	bne	a0,a1,2000102c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20000ef4:	4502                	lw	a0,0(sp)
20000ef6:	00450593          	addi	a1,a0,4
20000efa:	c02e                	sw	a1,0(sp)
20000efc:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20000efe:	00001797          	auipc	a5,0x1
20000f02:	b6378793          	addi	a5,a5,-1181 # 20001a61 <kDigitsHigh>
20000f06:	a0e1                	j	20000fce <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000f08:	06900593          	li	a1,105
20000f0c:	06b50d63          	beq	a0,a1,20000f86 <base_vfprintf+0x202>
20000f10:	06f00593          	li	a1,111
20000f14:	10b50163          	beq	a0,a1,20001016 <base_vfprintf+0x292>
20000f18:	07000593          	li	a1,112
20000f1c:	10b51863          	bne	a0,a1,2000102c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000f20:	00001597          	auipc	a1,0x1
20000f24:	03358593          	addi	a1,a1,51 # 20001f53 <kGpioVals+0x33>
20000f28:	4609                	li	a2,2
20000f2a:	854a                	mv	a0,s2
20000f2c:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20000f2e:	4582                	lw	a1,0(sp)
20000f30:	00458613          	addi	a2,a1,4
20000f34:	c032                	sw	a2,0(sp)
20000f36:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000f38:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000f3c:	00001797          	auipc	a5,0x1
20000f40:	b1578793          	addi	a5,a5,-1259 # 20001a51 <kDigitsLow>
20000f44:	46a1                	li	a3,8
20000f46:	4741                	li	a4,16
20000f48:	854a                	mv	a0,s2
20000f4a:	85ce                	mv	a1,s3
20000f4c:	2a5d                	jal	20001102 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20000f4e:	00a40b33          	add	s6,s0,a0
20000f52:	a0ed                	j	2000103c <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000f54:	06400593          	li	a1,100
20000f58:	02b50763          	beq	a0,a1,20000f86 <base_vfprintf+0x202>
20000f5c:	07b50063          	beq	a0,s11,20000fbc <base_vfprintf+0x238>
20000f60:	a0f1                	j	2000102c <base_vfprintf+0x2a8>
20000f62:	07800593          	li	a1,120
20000f66:	04b50b63          	beq	a0,a1,20000fbc <base_vfprintf+0x238>
20000f6a:	07a00593          	li	a1,122
20000f6e:	0ab51f63          	bne	a0,a1,2000102c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20000f72:	4502                	lw	a0,0(sp)
20000f74:	00450593          	addi	a1,a0,4
20000f78:	c02e                	sw	a1,0(sp)
20000f7a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20000f7c:	00850593          	addi	a1,a0,8
20000f80:	c02e                	sw	a1,0(sp)
20000f82:	414c                	lw	a1,4(a0)
20000f84:	a84d                	j	20001036 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000f86:	4502                	lw	a0,0(sp)
20000f88:	00450593          	addi	a1,a0,4
20000f8c:	c02e                	sw	a1,0(sp)
20000f8e:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20000f90:	557d                	li	a0,-1
20000f92:	00954c63          	blt	a0,s1,20000faa <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000f96:	00001597          	auipc	a1,0x1
20000f9a:	fbb58593          	addi	a1,a1,-69 # 20001f51 <kGpioVals+0x31>
20000f9e:	4605                	li	a2,1
20000fa0:	854a                	mv	a0,s2
20000fa2:	9982                	jalr	s3
20000fa4:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000fa6:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000faa:	00001797          	auipc	a5,0x1
20000fae:	aa778793          	addi	a5,a5,-1369 # 20001a51 <kDigitsLow>
20000fb2:	4729                	li	a4,10
20000fb4:	854a                	mv	a0,s2
20000fb6:	85ce                	mv	a1,s3
20000fb8:	8626                	mv	a2,s1
20000fba:	a829                	j	20000fd4 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000fbc:	4502                	lw	a0,0(sp)
20000fbe:	00450593          	addi	a1,a0,4
20000fc2:	c02e                	sw	a1,0(sp)
20000fc4:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20000fc6:	00001797          	auipc	a5,0x1
20000fca:	a8b78793          	addi	a5,a5,-1397 # 20001a51 <kDigitsLow>
20000fce:	4741                	li	a4,16
20000fd0:	854a                	mv	a0,s2
20000fd2:	85ce                	mv	a1,s3
20000fd4:	86a2                	mv	a3,s0
20000fd6:	2235                	jal	20001102 <write_digits>
20000fd8:	a08d                	j	2000103a <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20000fda:	4502                	lw	a0,0(sp)
20000fdc:	00450593          	addi	a1,a0,4
20000fe0:	c02e                	sw	a1,0(sp)
20000fe2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20000fe4:	00001797          	auipc	a5,0x1
20000fe8:	a6d78793          	addi	a5,a5,-1427 # 20001a51 <kDigitsLow>
20000fec:	4709                	li	a4,2
20000fee:	b7cd                	j	20000fd0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20000ff0:	4502                	lw	a0,0(sp)
20000ff2:	00450593          	addi	a1,a0,4
20000ff6:	c02e                	sw	a1,0(sp)
20000ff8:	410c                	lw	a1,0(a0)
20000ffa:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000ffc:	00a58633          	add	a2,a1,a0
20001000:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20001004:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001006:	fa7d                	bnez	a2,20000ffc <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001008:	fff50613          	addi	a2,a0,-1
2000100c:	a02d                	j	20001036 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
2000100e:	4605                	li	a2,1
20001010:	854a                	mv	a0,s2
20001012:	85d2                	mv	a1,s4
20001014:	a015                	j	20001038 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20001016:	4502                	lw	a0,0(sp)
20001018:	00450593          	addi	a1,a0,4
2000101c:	c02e                	sw	a1,0(sp)
2000101e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001020:	00001797          	auipc	a5,0x1
20001024:	a3178793          	addi	a5,a5,-1487 # 20001a51 <kDigitsLow>
20001028:	4721                	li	a4,8
2000102a:	b75d                	j	20000fd0 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
2000102c:	00001597          	auipc	a1,0x1
20001030:	a4558593          	addi	a1,a1,-1467 # 20001a71 <kUnknownSpec>
20001034:	463d                	li	a2,15
20001036:	854a                	mv	a0,s2
20001038:	9982                	jalr	s3
2000103a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
2000103c:	000bc503          	lbu	a0,0(s7)
20001040:	d8051ce3          	bnez	a0,20000dd8 <base_vfprintf+0x54>
20001044:	a819                	j	2000105a <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20001046:	00001597          	auipc	a1,0x1
2000104a:	9ee58593          	addi	a1,a1,-1554 # 20001a34 <kErrorNul>
2000104e:	4645                	li	a2,17
20001050:	854a                	mv	a0,s2
20001052:	9982                	jalr	s3
20001054:	9b2a                	add	s6,s6,a0
20001056:	a011                	j	2000105a <base_vfprintf+0x2d6>
20001058:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
2000105a:	855a                	mv	a0,s6
2000105c:	4db2                	lw	s11,12(sp)
2000105e:	4d42                	lw	s10,16(sp)
20001060:	4cd2                	lw	s9,20(sp)
20001062:	4c62                	lw	s8,24(sp)
20001064:	4bf2                	lw	s7,28(sp)
20001066:	5b02                	lw	s6,32(sp)
20001068:	5a92                	lw	s5,36(sp)
2000106a:	5a22                	lw	s4,40(sp)
2000106c:	59b2                	lw	s3,44(sp)
2000106e:	5942                	lw	s2,48(sp)
20001070:	54d2                	lw	s1,52(sp)
20001072:	5462                	lw	s0,56(sp)
20001074:	50f2                	lw	ra,60(sp)
20001076:	6121                	addi	sp,sp,64
20001078:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
2000107a:	00001597          	auipc	a1,0x1
2000107e:	9cb58593          	addi	a1,a1,-1589 # 20001a45 <kErrorTooWide>
20001082:	4631                	li	a2,12
20001084:	b7f1                	j	20001050 <base_vfprintf+0x2cc>

20001086 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20001086:	7179                	addi	sp,sp,-48
20001088:	ca06                	sw	ra,20(sp)
2000108a:	d646                	sw	a7,44(sp)
2000108c:	d442                	sw	a6,40(sp)
2000108e:	d23e                	sw	a5,36(sp)
20001090:	d03a                	sw	a4,32(sp)
20001092:	ce36                	sw	a3,28(sp)
20001094:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20001096:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001098:	c42a                	sw	a0,8(sp)
2000109a:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
2000109c:	00000597          	auipc	a1,0x0
200010a0:	01258593          	addi	a1,a1,18 # 200010ae <snprintf_sink>
200010a4:	0028                	addi	a0,sp,8
200010a6:	39f9                	jal	20000d84 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200010a8:	40d2                	lw	ra,20(sp)
200010aa:	6145                	addi	sp,sp,48
200010ac:	8082                	ret

200010ae <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
200010ae:	1141                	addi	sp,sp,-16
200010b0:	c606                	sw	ra,12(sp)
200010b2:	c422                	sw	s0,8(sp)
200010b4:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
200010b6:	4140                	lw	s0,4(a0)
200010b8:	c00d                	beqz	s0,200010da <snprintf_sink+0x2c>
200010ba:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
200010bc:	00c46363          	bltu	s0,a2,200010c2 <snprintf_sink+0x14>
200010c0:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200010c2:	4088                	lw	a0,0(s1)
200010c4:	8622                	mv	a2,s0
200010c6:	dd2ff0ef          	jal	ra,20000698 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200010ca:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200010cc:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200010ce:	9522                	add	a0,a0,s0
200010d0:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200010d2:	40858533          	sub	a0,a1,s0
200010d6:	c0c8                	sw	a0,4(s1)
200010d8:	a011                	j	200010dc <snprintf_sink+0x2e>
200010da:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200010dc:	8522                	mv	a0,s0
200010de:	4492                	lw	s1,4(sp)
200010e0:	4422                	lw	s0,8(sp)
200010e2:	40b2                	lw	ra,12(sp)
200010e4:	0141                	addi	sp,sp,16
200010e6:	8082                	ret

200010e8 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200010e8:	1101                	addi	sp,sp,-32
200010ea:	c206                	sw	ra,4(sp)
200010ec:	ce46                	sw	a7,28(sp)
200010ee:	cc42                	sw	a6,24(sp)
200010f0:	ca3e                	sw	a5,20(sp)
200010f2:	c83a                	sw	a4,16(sp)
200010f4:	c636                	sw	a3,12(sp)
200010f6:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
200010f8:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
200010fa:	3169                	jal	20000d84 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
200010fc:	4092                	lw	ra,4(sp)
200010fe:	6105                	addi	sp,sp,32
20001100:	8082                	ret

20001102 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001102:	7139                	addi	sp,sp,-64
20001104:	de06                	sw	ra,60(sp)
20001106:	dc22                	sw	s0,56(sp)
20001108:	da26                	sw	s1,52(sp)
2000110a:	d84a                	sw	s2,48(sp)
2000110c:	d64e                	sw	s3,44(sp)
2000110e:	892e                	mv	s2,a1
20001110:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001112:	ca05                	beqz	a2,20001142 <write_digits+0x40>
20001114:	4501                	li	a0,0
20001116:	02b10813          	addi	a6,sp,43
2000111a:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
2000111c:	02e65633          	divu	a2,a2,a4
20001120:	02e60433          	mul	s0,a2,a4
20001124:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001128:	943e                	add	s0,s0,a5
2000112a:	00040403          	lb	s0,0(s0)
2000112e:	00a805b3          	add	a1,a6,a0
20001132:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001136:	157d                	addi	a0,a0,-1
20001138:	fee4f1e3          	bgeu	s1,a4,2000111a <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
2000113c:	40a00633          	neg	a2,a0
20001140:	a011                	j	20001144 <write_digits+0x42>
20001142:	4601                	li	a2,0
20001144:	4485                	li	s1,1
20001146:	c291                	beqz	a3,2000114a <write_digits+0x48>
20001148:	84b6                	mv	s1,a3
2000114a:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
2000114e:	00a4e463          	bltu	s1,a0,20001156 <write_digits+0x54>
20001152:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001156:	02967063          	bgeu	a2,s1,20001176 <write_digits+0x74>
2000115a:	0068                	addi	a0,sp,12
2000115c:	8d05                	sub	a0,a0,s1
2000115e:	02050513          	addi	a0,a0,32
20001162:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001166:	03000593          	li	a1,48
2000116a:	8622                	mv	a2,s0
2000116c:	d42ff0ef          	jal	ra,200006ae <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001170:	147d                	addi	s0,s0,-1
20001172:	fc7d                	bnez	s0,20001170 <write_digits+0x6e>
20001174:	8626                	mv	a2,s1
20001176:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001178:	8d11                	sub	a0,a0,a2
2000117a:	02050593          	addi	a1,a0,32
2000117e:	854e                	mv	a0,s3
20001180:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20001182:	59b2                	lw	s3,44(sp)
20001184:	5942                	lw	s2,48(sp)
20001186:	54d2                	lw	s1,52(sp)
20001188:	5462                	lw	s0,56(sp)
2000118a:	50f2                	lw	ra,60(sp)
2000118c:	6121                	addi	sp,sp,64
2000118e:	8082                	ret

20001190 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20001190:	c581                	beqz	a1,20001198 <dif_uart_init+0x8>
20001192:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20001194:	c188                	sw	a0,0(a1)
20001196:	a011                	j	2000119a <dif_uart_init+0xa>
20001198:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
2000119a:	8532                	mv	a0,a2
2000119c:	8082                	ret

2000119e <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
2000119e:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
200011a0:	c606                	sw	ra,12(sp)
200011a2:	c422                	sw	s0,8(sp)
200011a4:	c226                	sw	s1,4(sp)
200011a6:	c92d                	beqz	a0,20001218 <dif_uart_configure+0x7a>
200011a8:	84ae                	mv	s1,a1
200011aa:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
200011ac:	418c                	lw	a1,0(a1)
200011ae:	450d                	li	a0,3
200011b0:	c5ad                	beqz	a1,2000121a <dif_uart_configure+0x7c>
200011b2:	40d0                	lw	a2,4(s1)
200011b4:	c23d                	beqz	a2,2000121a <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200011b6:	01459513          	slli	a0,a1,0x14
200011ba:	81b1                	srli	a1,a1,0xc
200011bc:	4681                	li	a3,0
200011be:	2e61                	jal	20001556 <__udivdi3>
200011c0:	6641                	lui	a2,0x10
200011c2:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200011c4:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200011c6:	8d31                	xor	a0,a0,a2
200011c8:	8dc9                	or	a1,a1,a0
200011ca:	4511                	li	a0,4
200011cc:	e5b9                	bnez	a1,2000121a <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200011ce:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011d0:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200011d4:	4008                	lw	a0,0(s0)
200011d6:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011d8:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200011da:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011dc:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200011e0:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011e2:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200011e6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011e8:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200011ec:	4008                	lw	a0,0(s0)
200011ee:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011f0:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200011f2:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200011f4:	01061513          	slli	a0,a2,0x10
200011f8:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
200011fc:	c291                	beqz	a3,20001200 <dif_uart_configure+0x62>
200011fe:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001200:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001202:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001204:	e219                	bnez	a2,2000120a <dif_uart_configure+0x6c>
20001206:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
2000120a:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000120c:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000120e:	400c                	lw	a1,0(s0)
20001210:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001212:	0005a223          	sw	zero,4(a1)
20001216:	a011                	j	2000121a <dif_uart_configure+0x7c>
20001218:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
2000121a:	4492                	lw	s1,4(sp)
2000121c:	4422                	lw	s0,8(sp)
2000121e:	40b2                	lw	ra,12(sp)
20001220:	0141                	addi	sp,sp,16
20001222:	8082                	ret

20001224 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001224:	1141                	addi	sp,sp,-16
20001226:	c606                	sw	ra,12(sp)
20001228:	c422                	sw	s0,8(sp)
2000122a:	c226                	sw	s1,4(sp)
2000122c:	84aa                	mv	s1,a0
2000122e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001230:	c09d                	beqz	s1,20001256 <dif_uart_irq_is_pending+0x32>
20001232:	8432                	mv	s0,a2
20001234:	c20d                	beqz	a2,20001256 <dif_uart_irq_is_pending+0x32>
20001236:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001238:	852e                	mv	a0,a1
2000123a:	85b2                	mv	a1,a2
2000123c:	2015                	jal	20001260 <uart_irq_offset_get>
2000123e:	85aa                	mv	a1,a0
20001240:	4505                	li	a0,1
20001242:	c991                	beqz	a1,20001256 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001244:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001246:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001248:	4602                	lw	a2,0(sp)
2000124a:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000124c:	00c5d5b3          	srl	a1,a1,a2
20001250:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20001252:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001256:	4492                	lw	s1,4(sp)
20001258:	4422                	lw	s0,8(sp)
2000125a:	40b2                	lw	ra,12(sp)
2000125c:	0141                	addi	sp,sp,16
2000125e:	8082                	ret

20001260 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001260:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20001262:	00a66563          	bltu	a2,a0,2000126c <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001266:	c188                	sw	a0,0(a1)
20001268:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
2000126a:	8082                	ret
2000126c:	4501                	li	a0,0
2000126e:	8082                	ret

20001270 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20001270:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20001272:	c606                	sw	ra,12(sp)
20001274:	c422                	sw	s0,8(sp)
20001276:	c10d                	beqz	a0,20001298 <dif_uart_irq_acknowledge+0x28>
20001278:	842a                	mv	s0,a0
2000127a:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000127c:	852e                	mv	a0,a1
2000127e:	85b2                	mv	a1,a2
20001280:	37c5                	jal	20001260 <uart_irq_offset_get>
20001282:	85aa                	mv	a1,a0
20001284:	4505                	li	a0,1
20001286:	c991                	beqz	a1,2000129a <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001288:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
2000128a:	4010                	lw	a2,0(s0)
2000128c:	4501                	li	a0,0
2000128e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001290:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001294:	c20c                	sw	a1,0(a2)
20001296:	a011                	j	2000129a <dif_uart_irq_acknowledge+0x2a>
20001298:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
2000129a:	4422                	lw	s0,8(sp)
2000129c:	40b2                	lw	ra,12(sp)
2000129e:	0141                	addi	sp,sp,16
200012a0:	8082                	ret

200012a2 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
200012a2:	c911                	beqz	a0,200012b6 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
200012a4:	c581                	beqz	a1,200012ac <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200012a6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012a8:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
200012aa:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200012ac:	410c                	lw	a1,0(a0)
200012ae:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200012b0:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
200012b4:	8082                	ret
200012b6:	4509                	li	a0,2
200012b8:	8082                	ret

200012ba <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200012ba:	862a                	mv	a2,a0
200012bc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200012be:	c611                	beqz	a2,200012ca <dif_uart_irq_restore_all+0x10>
200012c0:	c589                	beqz	a1,200012ca <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200012c2:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200012c4:	4210                	lw	a2,0(a2)
200012c6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012c8:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200012ca:	8082                	ret

200012cc <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200012cc:	1141                	addi	sp,sp,-16
200012ce:	c606                	sw	ra,12(sp)
200012d0:	c422                	sw	s0,8(sp)
200012d2:	c226                	sw	s1,4(sp)
200012d4:	84aa                	mv	s1,a0
200012d6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200012d8:	c485                	beqz	s1,20001300 <dif_uart_irq_get_enabled+0x34>
200012da:	8432                	mv	s0,a2
200012dc:	c215                	beqz	a2,20001300 <dif_uart_irq_get_enabled+0x34>
200012de:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200012e0:	852e                	mv	a0,a1
200012e2:	85b2                	mv	a1,a2
200012e4:	3fb5                	jal	20001260 <uart_irq_offset_get>
200012e6:	85aa                	mv	a1,a0
200012e8:	4505                	li	a0,1
200012ea:	c999                	beqz	a1,20001300 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200012ec:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012ee:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
200012f0:	4602                	lw	a2,0(sp)
200012f2:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200012f4:	00c5d5b3          	srl	a1,a1,a2
200012f8:	8985                	andi	a1,a1,1
200012fa:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
200012fe:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001300:	4492                	lw	s1,4(sp)
20001302:	4422                	lw	s0,8(sp)
20001304:	40b2                	lw	ra,12(sp)
20001306:	0141                	addi	sp,sp,16
20001308:	8082                	ret

2000130a <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
2000130a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
2000130c:	c606                	sw	ra,12(sp)
2000130e:	c422                	sw	s0,8(sp)
20001310:	c226                	sw	s1,4(sp)
20001312:	c91d                	beqz	a0,20001348 <dif_uart_irq_set_enabled+0x3e>
20001314:	8432                	mv	s0,a2
20001316:	84aa                	mv	s1,a0
20001318:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000131a:	852e                	mv	a0,a1
2000131c:	85b2                	mv	a1,a2
2000131e:	3789                	jal	20001260 <uart_irq_offset_get>
20001320:	85aa                	mv	a1,a0
20001322:	4505                	li	a0,1
20001324:	c19d                	beqz	a1,2000134a <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001326:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001328:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
2000132a:	4682                	lw	a3,0(sp)
2000132c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
2000132e:	00143713          	seqz	a4,s0
20001332:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001334:	00d797b3          	sll	a5,a5,a3
20001338:	fff7c793          	not	a5,a5
2000133c:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000133e:	00d716b3          	sll	a3,a4,a3
20001342:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001344:	c1d0                	sw	a2,4(a1)
20001346:	a011                	j	2000134a <dif_uart_irq_set_enabled+0x40>
20001348:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
2000134a:	4492                	lw	s1,4(sp)
2000134c:	4422                	lw	s0,8(sp)
2000134e:	40b2                	lw	ra,12(sp)
20001350:	0141                	addi	sp,sp,16
20001352:	8082                	ret

20001354 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20001354:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20001356:	c606                	sw	ra,12(sp)
20001358:	c422                	sw	s0,8(sp)
2000135a:	c10d                	beqz	a0,2000137c <dif_uart_irq_force+0x28>
2000135c:	842a                	mv	s0,a0
2000135e:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001360:	852e                	mv	a0,a1
20001362:	85b2                	mv	a1,a2
20001364:	3df5                	jal	20001260 <uart_irq_offset_get>
20001366:	85aa                	mv	a1,a0
20001368:	4505                	li	a0,1
2000136a:	c991                	beqz	a1,2000137e <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
2000136c:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
2000136e:	4010                	lw	a2,0(s0)
20001370:	4501                	li	a0,0
20001372:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001374:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001378:	c60c                	sw	a1,8(a2)
2000137a:	a011                	j	2000137e <dif_uart_irq_force+0x2a>
2000137c:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
2000137e:	4422                	lw	s0,8(sp)
20001380:	40b2                	lw	ra,12(sp)
20001382:	0141                	addi	sp,sp,16
20001384:	8082                	ret

20001386 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001386:	cd09                	beqz	a0,200013a0 <dif_uart_watermark_rx_set+0x1a>
20001388:	4691                	li	a3,4
2000138a:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000138c:	00b6eb63          	bltu	a3,a1,200013a2 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001390:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001392:	4d54                	lw	a3,28(a0)
20001394:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20001396:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001398:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000139a:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000139c:	cd4c                	sw	a1,28(a0)
2000139e:	a011                	j	200013a2 <dif_uart_watermark_rx_set+0x1c>
200013a0:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200013a2:	8532                	mv	a0,a2
200013a4:	8082                	ret

200013a6 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200013a6:	cd11                	beqz	a0,200013c2 <dif_uart_watermark_tx_set+0x1c>
200013a8:	468d                	li	a3,3
200013aa:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200013ac:	00b6ec63          	bltu	a3,a1,200013c4 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200013b0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200013b2:	4d54                	lw	a3,28(a0)
200013b4:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
200013b6:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200013b8:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200013bc:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013be:	cd4c                	sw	a1,28(a0)
200013c0:	a011                	j	200013c4 <dif_uart_watermark_tx_set+0x1e>
200013c2:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200013c4:	8532                	mv	a0,a2
200013c6:	8082                	ret

200013c8 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200013c8:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200013ca:	c51d                	beqz	a0,200013f8 <dif_uart_bytes_send+0x30>
200013cc:	c595                	beqz	a1,200013f8 <dif_uart_bytes_send+0x30>
200013ce:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200013d0:	c20d                	beqz	a2,200013f2 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200013d2:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200013d6:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200013da:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200013dc:	eb19                	bnez	a4,200013f2 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
200013de:	00f58733          	add	a4,a1,a5
200013e2:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
200013e6:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200013e8:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200013ec:	fef613e3          	bne	a2,a5,200013d2 <dif_uart_bytes_send+0xa>
200013f0:	87b2                	mv	a5,a2
200013f2:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
200013f4:	c291                	beqz	a3,200013f8 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
200013f6:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
200013f8:	853a                	mv	a0,a4
200013fa:	8082                	ret

200013fc <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
200013fc:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
200013fe:	c515                	beqz	a0,2000142a <dif_uart_bytes_receive+0x2e>
20001400:	c60d                	beqz	a2,2000142a <dif_uart_bytes_receive+0x2e>
20001402:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001404:	cd99                	beqz	a1,20001422 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001406:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001408:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000140a:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000140e:	eb91                	bnez	a5,20001422 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001410:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001412:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001416:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001418:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000141c:	ff0595e3          	bne	a1,a6,20001406 <dif_uart_bytes_receive+0xa>
20001420:	882e                	mv	a6,a1
20001422:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001424:	c299                	beqz	a3,2000142a <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001426:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
2000142a:	853a                	mv	a0,a4
2000142c:	8082                	ret

2000142e <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
2000142e:	cd19                	beqz	a0,2000144c <dif_uart_byte_send_polled+0x1e>
20001430:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001432:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001434:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001436:	fef5                	bnez	a3,20001432 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001438:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000143a:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000143c:	e299                	bnez	a3,20001442 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000143e:	ce0c                	sw	a1,24(a2)
20001440:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001442:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001444:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001446:	dd75                	beqz	a0,20001442 <dif_uart_byte_send_polled+0x14>
20001448:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
2000144a:	8082                	ret
2000144c:	4509                	li	a0,2
2000144e:	8082                	ret

20001450 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001450:	862a                	mv	a2,a0
20001452:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001454:	c205                	beqz	a2,20001474 <dif_uart_byte_receive_polled+0x24>
20001456:	cd99                	beqz	a1,20001474 <dif_uart_byte_receive_polled+0x24>
20001458:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000145a:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000145c:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001460:	fd6d                	bnez	a0,2000145a <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001462:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001464:	02057693          	andi	a3,a0,32
20001468:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000146a:	e689                	bnez	a3,20001474 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000146c:	4a50                	lw	a2,20(a2)
2000146e:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001470:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001474:	8082                	ret

20001476 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001476:	862a                	mv	a2,a0
20001478:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
2000147a:	ca09                	beqz	a2,2000148c <dif_uart_rx_bytes_available+0x16>
2000147c:	c981                	beqz	a1,2000148c <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000147e:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001480:	5110                	lw	a2,32(a0)
20001482:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001484:	8241                	srli	a2,a2,0x10
20001486:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
2000148a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
2000148c:	8082                	ret

2000148e <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000148e:	862a                	mv	a2,a0
20001490:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001492:	ce01                	beqz	a2,200014aa <dif_uart_tx_bytes_available+0x1c>
20001494:	c999                	beqz	a1,200014aa <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001496:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001498:	5110                	lw	a2,32(a0)
2000149a:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
2000149c:	03f67613          	andi	a2,a2,63
200014a0:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
200014a4:	40c68633          	sub	a2,a3,a2
200014a8:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
200014aa:	8082                	ret

200014ac <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
200014ac:	c11d                	beqz	a0,200014d2 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200014ae:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200014b0:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200014b2:	ffd5f693          	andi	a3,a1,-3
200014b6:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200014ba:	fff58713          	addi	a4,a1,-1
200014be:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200014c0:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200014c4:	00f77463          	bgeu	a4,a5,200014cc <dif_uart_fifo_reset+0x20>
200014c8:	0025e593          	ori	a1,a1,2
200014cc:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200014ce:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200014d0:	8082                	ret
200014d2:	4509                	li	a0,2
200014d4:	8082                	ret

200014d6 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
200014d6:	c515                	beqz	a0,20001502 <dif_uart_loopback_set+0x2c>
200014d8:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
200014da:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
200014dc:	0015b593          	seqz	a1,a1
200014e0:	4715                	li	a4,5
200014e2:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200014e6:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
200014e8:	00163613          	seqz	a2,a2
200014ec:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200014ee:	00b797b3          	sll	a5,a5,a1
200014f2:	fff7c793          	not	a5,a5
200014f6:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200014f8:	00b615b3          	sll	a1,a2,a1
200014fc:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200014fe:	c54c                	sw	a1,12(a0)
20001500:	a011                	j	20001504 <dif_uart_loopback_set+0x2e>
20001502:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001504:	8536                	mv	a0,a3
20001506:	8082                	ret

20001508 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001508:	862a                	mv	a2,a0
2000150a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
2000150c:	ca11                	beqz	a2,20001520 <dif_uart_enable_rx_timeout+0x18>
2000150e:	0185d693          	srli	a3,a1,0x18
20001512:	e699                	bnez	a3,20001520 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001514:	4210                	lw	a2,0(a2)
20001516:	4501                	li	a0,0
20001518:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000151c:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000151e:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001520:	8082                	ret

20001522 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001522:	c511                	beqz	a0,2000152e <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001524:	410c                	lw	a1,0(a0)
20001526:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001528:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
2000152c:	8082                	ret
2000152e:	4509                	li	a0,2
20001530:	8082                	ret

20001532 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001532:	86aa                	mv	a3,a0
20001534:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001536:	ce99                	beqz	a3,20001554 <dif_uart_get_rx_timeout+0x22>
20001538:	cd91                	beqz	a1,20001554 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
2000153a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000153c:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
2000153e:	fff6c513          	not	a0,a3
20001542:	817d                	srli	a0,a0,0x1f
20001544:	c188                	sw	a0,0(a1)
20001546:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001548:	c611                	beqz	a2,20001554 <dif_uart_get_rx_timeout+0x22>
2000154a:	010005b7          	lui	a1,0x1000
2000154e:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001550:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001552:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001554:	8082                	ret

20001556 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001556:	88aa                	mv	a7,a0
20001558:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
2000155a:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
2000155c:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
2000155e:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001560:	20069963          	bnez	a3,20001772 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001564:	200026b7          	lui	a3,0x20002
20001568:	a8468693          	addi	a3,a3,-1404 # 20001a84 <__clz_tab>
2000156c:	0cc5f063          	bgeu	a1,a2,2000162c <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001570:	6741                	lui	a4,0x10
20001572:	0ae67663          	bgeu	a2,a4,2000161e <__udivdi3+0xc8>
20001576:	0ff00713          	li	a4,255
2000157a:	00c73733          	sltu	a4,a4,a2
2000157e:	070e                	slli	a4,a4,0x3
20001580:	00e65533          	srl	a0,a2,a4
20001584:	96aa                	add	a3,a3,a0
20001586:	0006c683          	lbu	a3,0(a3)
2000158a:	02000513          	li	a0,32
2000158e:	9736                	add	a4,a4,a3
20001590:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001594:	00e50c63          	beq	a0,a4,200015ac <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001598:	00d797b3          	sll	a5,a5,a3
2000159c:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
200015a0:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200015a4:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
200015a8:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
200015ac:	01085893          	srli	a7,a6,0x10
200015b0:	0315d7b3          	divu	a5,a1,a7
200015b4:	01081613          	slli	a2,a6,0x10
200015b8:	8241                	srli	a2,a2,0x10
200015ba:	01035713          	srli	a4,t1,0x10
200015be:	0315f6b3          	remu	a3,a1,a7
200015c2:	853e                	mv	a0,a5
200015c4:	02f605b3          	mul	a1,a2,a5
200015c8:	06c2                	slli	a3,a3,0x10
200015ca:	8f55                	or	a4,a4,a3
200015cc:	00b77c63          	bgeu	a4,a1,200015e4 <__udivdi3+0x8e>
200015d0:	9742                	add	a4,a4,a6
200015d2:	fff78513          	addi	a0,a5,-1
200015d6:	01076763          	bltu	a4,a6,200015e4 <__udivdi3+0x8e>
200015da:	00b77563          	bgeu	a4,a1,200015e4 <__udivdi3+0x8e>
200015de:	ffe78513          	addi	a0,a5,-2
200015e2:	9742                	add	a4,a4,a6
200015e4:	8f0d                	sub	a4,a4,a1
200015e6:	031777b3          	remu	a5,a4,a7
200015ea:	0342                	slli	t1,t1,0x10
200015ec:	01035313          	srli	t1,t1,0x10
200015f0:	03175733          	divu	a4,a4,a7
200015f4:	07c2                	slli	a5,a5,0x10
200015f6:	0067e333          	or	t1,a5,t1
200015fa:	02e606b3          	mul	a3,a2,a4
200015fe:	863a                	mv	a2,a4
20001600:	00d37b63          	bgeu	t1,a3,20001616 <__udivdi3+0xc0>
20001604:	9342                	add	t1,t1,a6
20001606:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
2000160a:	01036663          	bltu	t1,a6,20001616 <__udivdi3+0xc0>
2000160e:	00d37463          	bgeu	t1,a3,20001616 <__udivdi3+0xc0>
20001612:	ffe70613          	addi	a2,a4,-2
20001616:	0542                	slli	a0,a0,0x10
20001618:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
2000161a:	4581                	li	a1,0
2000161c:	a85d                	j	200016d2 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
2000161e:	01000537          	lui	a0,0x1000
20001622:	4741                	li	a4,16
20001624:	f4a66ee3          	bltu	a2,a0,20001580 <__udivdi3+0x2a>
20001628:	4761                	li	a4,24
2000162a:	bf99                	j	20001580 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
2000162c:	e601                	bnez	a2,20001634 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
2000162e:	4705                	li	a4,1
20001630:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001634:	6741                	lui	a4,0x10
20001636:	08e87f63          	bgeu	a6,a4,200016d4 <__udivdi3+0x17e>
2000163a:	0ff00713          	li	a4,255
2000163e:	01077363          	bgeu	a4,a6,20001644 <__udivdi3+0xee>
20001642:	4521                	li	a0,8
20001644:	00a85733          	srl	a4,a6,a0
20001648:	96ba                	add	a3,a3,a4
2000164a:	0006c703          	lbu	a4,0(a3)
2000164e:	02000613          	li	a2,32
20001652:	972a                	add	a4,a4,a0
20001654:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001658:	08e61563          	bne	a2,a4,200016e2 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
2000165c:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001660:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001662:	01085893          	srli	a7,a6,0x10
20001666:	01081613          	slli	a2,a6,0x10
2000166a:	8241                	srli	a2,a2,0x10
2000166c:	01035713          	srli	a4,t1,0x10
20001670:	0317f6b3          	remu	a3,a5,a7
20001674:	0317d7b3          	divu	a5,a5,a7
20001678:	06c2                	slli	a3,a3,0x10
2000167a:	8f55                	or	a4,a4,a3
2000167c:	02f60e33          	mul	t3,a2,a5
20001680:	853e                	mv	a0,a5
20001682:	01c77c63          	bgeu	a4,t3,2000169a <__udivdi3+0x144>
20001686:	9742                	add	a4,a4,a6
20001688:	fff78513          	addi	a0,a5,-1
2000168c:	01076763          	bltu	a4,a6,2000169a <__udivdi3+0x144>
20001690:	01c77563          	bgeu	a4,t3,2000169a <__udivdi3+0x144>
20001694:	ffe78513          	addi	a0,a5,-2
20001698:	9742                	add	a4,a4,a6
2000169a:	41c70733          	sub	a4,a4,t3
2000169e:	031777b3          	remu	a5,a4,a7
200016a2:	0342                	slli	t1,t1,0x10
200016a4:	01035313          	srli	t1,t1,0x10
200016a8:	03175733          	divu	a4,a4,a7
200016ac:	07c2                	slli	a5,a5,0x10
200016ae:	0067e333          	or	t1,a5,t1
200016b2:	02e606b3          	mul	a3,a2,a4
200016b6:	863a                	mv	a2,a4
200016b8:	00d37b63          	bgeu	t1,a3,200016ce <__udivdi3+0x178>
200016bc:	9342                	add	t1,t1,a6
200016be:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200016c2:	01036663          	bltu	t1,a6,200016ce <__udivdi3+0x178>
200016c6:	00d37463          	bgeu	t1,a3,200016ce <__udivdi3+0x178>
200016ca:	ffe70613          	addi	a2,a4,-2
200016ce:	0542                	slli	a0,a0,0x10
200016d0:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
200016d2:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200016d4:	01000737          	lui	a4,0x1000
200016d8:	4541                	li	a0,16
200016da:	f6e865e3          	bltu	a6,a4,20001644 <__udivdi3+0xee>
200016de:	4561                	li	a0,24
200016e0:	b795                	j	20001644 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
200016e2:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
200016e6:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
200016ea:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200016ee:	00d797b3          	sll	a5,a5,a3
200016f2:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200016f6:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200016fa:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200016fe:	0315f733          	remu	a4,a1,a7
20001702:	01081793          	slli	a5,a6,0x10
20001706:	83c1                	srli	a5,a5,0x10
20001708:	01065513          	srli	a0,a2,0x10
2000170c:	0315d5b3          	divu	a1,a1,a7
20001710:	0742                	slli	a4,a4,0x10
20001712:	8f49                	or	a4,a4,a0
20001714:	02b786b3          	mul	a3,a5,a1
20001718:	852e                	mv	a0,a1
2000171a:	00d77c63          	bgeu	a4,a3,20001732 <__udivdi3+0x1dc>
2000171e:	9742                	add	a4,a4,a6
20001720:	fff58513          	addi	a0,a1,-1 # ffffff <test_gpio_write.kLogFields.9+0xfefee7>
20001724:	01076763          	bltu	a4,a6,20001732 <__udivdi3+0x1dc>
20001728:	00d77563          	bgeu	a4,a3,20001732 <__udivdi3+0x1dc>
2000172c:	ffe58513          	addi	a0,a1,-2
20001730:	9742                	add	a4,a4,a6
20001732:	40d706b3          	sub	a3,a4,a3
20001736:	0316f733          	remu	a4,a3,a7
2000173a:	0642                	slli	a2,a2,0x10
2000173c:	8241                	srli	a2,a2,0x10
2000173e:	0316d6b3          	divu	a3,a3,a7
20001742:	0742                	slli	a4,a4,0x10
20001744:	02d788b3          	mul	a7,a5,a3
20001748:	00c767b3          	or	a5,a4,a2
2000174c:	8736                	mv	a4,a3
2000174e:	0117fc63          	bgeu	a5,a7,20001766 <__udivdi3+0x210>
20001752:	97c2                	add	a5,a5,a6
20001754:	fff68713          	addi	a4,a3,-1
20001758:	0107e763          	bltu	a5,a6,20001766 <__udivdi3+0x210>
2000175c:	0117f563          	bgeu	a5,a7,20001766 <__udivdi3+0x210>
20001760:	ffe68713          	addi	a4,a3,-2
20001764:	97c2                	add	a5,a5,a6
20001766:	01051593          	slli	a1,a0,0x10
2000176a:	411787b3          	sub	a5,a5,a7
2000176e:	8dd9                	or	a1,a1,a4
20001770:	bdcd                	j	20001662 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001772:	14d5e263          	bltu	a1,a3,200018b6 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001776:	6741                	lui	a4,0x10
20001778:	02e6ff63          	bgeu	a3,a4,200017b6 <__udivdi3+0x260>
2000177c:	0ff00713          	li	a4,255
20001780:	00d735b3          	sltu	a1,a4,a3
20001784:	058e                	slli	a1,a1,0x3
20001786:	20002737          	lui	a4,0x20002
2000178a:	00b6d533          	srl	a0,a3,a1
2000178e:	a8470713          	addi	a4,a4,-1404 # 20001a84 <__clz_tab>
20001792:	972a                	add	a4,a4,a0
20001794:	00074703          	lbu	a4,0(a4)
20001798:	02000513          	li	a0,32
2000179c:	972e                	add	a4,a4,a1
2000179e:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
200017a2:	02e51163          	bne	a0,a4,200017c4 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
200017a6:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
200017a8:	f2f6e5e3          	bltu	a3,a5,200016d2 <__udivdi3+0x17c>
200017ac:	00c8b533          	sltu	a0,a7,a2
200017b0:	00154513          	xori	a0,a0,1
200017b4:	bf39                	j	200016d2 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
200017b6:	01000737          	lui	a4,0x1000
200017ba:	45c1                	li	a1,16
200017bc:	fce6e5e3          	bltu	a3,a4,20001786 <__udivdi3+0x230>
200017c0:	45e1                	li	a1,24
200017c2:	b7d1                	j	20001786 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
200017c4:	00e65333          	srl	t1,a2,a4
200017c8:	00b696b3          	sll	a3,a3,a1
200017cc:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017d0:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
200017d4:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
200017d8:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017dc:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
200017e0:	00b797b3          	sll	a5,a5,a1
200017e4:	00e8d733          	srl	a4,a7,a4
200017e8:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200017ec:	01031793          	slli	a5,t1,0x10
200017f0:	83c1                	srli	a5,a5,0x10
200017f2:	01085713          	srli	a4,a6,0x10
200017f6:	02a65633          	divu	a2,a2,a0
200017fa:	06c2                	slli	a3,a3,0x10
200017fc:	8f55                	or	a4,a4,a3
200017fe:	02c78f33          	mul	t5,a5,a2
20001802:	8e32                	mv	t3,a2
20001804:	01e77c63          	bgeu	a4,t5,2000181c <__udivdi3+0x2c6>
20001808:	971a                	add	a4,a4,t1
2000180a:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
2000180e:	00676763          	bltu	a4,t1,2000181c <__udivdi3+0x2c6>
20001812:	01e77563          	bgeu	a4,t5,2000181c <__udivdi3+0x2c6>
20001816:	ffe60e13          	addi	t3,a2,-2
2000181a:	971a                	add	a4,a4,t1
2000181c:	41e70733          	sub	a4,a4,t5
20001820:	02a776b3          	remu	a3,a4,a0
20001824:	02a75733          	divu	a4,a4,a0
20001828:	06c2                	slli	a3,a3,0x10
2000182a:	02e78633          	mul	a2,a5,a4
2000182e:	01081793          	slli	a5,a6,0x10
20001832:	83c1                	srli	a5,a5,0x10
20001834:	8fd5                	or	a5,a5,a3
20001836:	86ba                	mv	a3,a4
20001838:	00c7fc63          	bgeu	a5,a2,20001850 <__udivdi3+0x2fa>
2000183c:	979a                	add	a5,a5,t1
2000183e:	fff70693          	addi	a3,a4,-1 # ffffff <test_gpio_write.kLogFields.9+0xfefee7>
20001842:	0067e763          	bltu	a5,t1,20001850 <__udivdi3+0x2fa>
20001846:	00c7f563          	bgeu	a5,a2,20001850 <__udivdi3+0x2fa>
2000184a:	ffe70693          	addi	a3,a4,-2
2000184e:	979a                	add	a5,a5,t1
20001850:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001854:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001856:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001858:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
2000185c:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001860:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001862:	00def6b3          	and	a3,t4,a3
20001866:	01055613          	srli	a2,a0,0x10
2000186a:	010ede93          	srli	t4,t4,0x10
2000186e:	02d80333          	mul	t1,a6,a3
20001872:	02d606b3          	mul	a3,a2,a3
20001876:	01035713          	srli	a4,t1,0x10
2000187a:	03d80833          	mul	a6,a6,t4
2000187e:	9836                	add	a6,a6,a3
20001880:	9742                	add	a4,a4,a6
20001882:	03d60633          	mul	a2,a2,t4
20001886:	00d77363          	bgeu	a4,a3,2000188c <__udivdi3+0x336>
2000188a:	9672                	add	a2,a2,t3
2000188c:	01075693          	srli	a3,a4,0x10
20001890:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001892:	02c7e063          	bltu	a5,a2,200018b2 <__udivdi3+0x35c>
20001896:	d8c792e3          	bne	a5,a2,2000161a <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000189a:	67c1                	lui	a5,0x10
2000189c:	17fd                	addi	a5,a5,-1
2000189e:	8f7d                	and	a4,a4,a5
200018a0:	0742                	slli	a4,a4,0x10
200018a2:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
200018a6:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
200018aa:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200018ac:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
200018ae:	e2e8f2e3          	bgeu	a7,a4,200016d2 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
200018b2:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
200018b4:	b39d                	j	2000161a <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
200018b6:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
200018b8:	4501                	li	a0,0
200018ba:	bd21                	j	200016d2 <__udivdi3+0x17c>
