
sw/device/tests/dif_rv_timer_smoketest_sim_verilator.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000e0  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001e26  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000adb  20001fa8  20001fa8  00002fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000000c  10000000  20002a84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000014  1000000c  20002a90  0000400c  2**2
                  ALLOC
  8 .logs.fields  00000208  00010000  00010000  0000400c  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00004214  2**0
                  CONTENTS, READONLY
 10 .debug_info   000087f0  00000000  00000000  0000423a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000018e2  00000000  00000000  0000ca2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000b8  00000000  00000000  0000e30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004b6e  00000000  00000000  0000e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000046b9  00000000  00000000  00012f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000378  00000000  00000000  000175eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002102  00000000  00000000  00017963  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000007f8  00000000  00000000  00019a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fec50513          	addi	a0,a0,-20 # 1000000c <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	ff858593          	addi	a1,a1,-8 # 10000020 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2899                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2091                	jal	20000086 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80c18593          	addi	a1,gp,-2036 # 1000000c <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00003617          	auipc	a2,0x3
20000054:	a3460613          	addi	a2,a2,-1484 # 20002a84 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2889                	jal	200000aa <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	5a6010ef          	jal	ra,20001624 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	2e00106f          	j	20001362 <abort>

20000086 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000086:	00b57e63          	bgeu	a0,a1,200000a2 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
2000008a:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008e:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000092:	00029b63          	bnez	t0,200000a8 <L_clear_error>

20000096 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000096:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
2000009a:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009c:	feb56de3          	bltu	a0,a1,20000096 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
200000a0:	8082                	ret

200000a2 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a2:	00b51363          	bne	a0,a1,200000a8 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a6:	8082                	ret

200000a8 <L_clear_error>:
	...

200000aa <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000aa:	02b57963          	bgeu	a0,a1,200000dc <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ae:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b2:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b6:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000ba:	02029463          	bnez	t0,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000be:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c2:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c6:	0062ee63          	bltu	t0,t1,200000e2 <L_copy_error>

200000ca <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000ca:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000ce:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000d0:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d4:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d6:	feb56ae3          	bltu	a0,a1,200000ca <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000da:	8082                	ret

200000dc <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000dc:	00b51363          	bne	a0,a1,200000e2 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000e0:	8082                	ret

200000e2 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	2680106f          	j	20001368 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	3a00106f          	j	200014ac <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	0640006f          	j	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	4300106f          	j	2000155c <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:48

  irq_fired = true;
}

// Register our own IRQ handler by overriding a weak symbol in `handler.h`.
void handler_irq_timer(void) {
20000180:	7159                	addi	sp,sp,-112
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:49
  LOG_INFO("Entering handler_irq_timer()");
20000182:	d686                	sw	ra,108(sp)
20000184:	d496                	sw	t0,104(sp)
20000186:	d29a                	sw	t1,100(sp)
20000188:	d09e                	sw	t2,96(sp)
2000018a:	cea2                	sw	s0,92(sp)
2000018c:	cca6                	sw	s1,88(sp)
2000018e:	caaa                	sw	a0,84(sp)
20000190:	c8ae                	sw	a1,80(sp)
20000192:	c6b2                	sw	a2,76(sp)
20000194:	c4b6                	sw	a3,72(sp)
20000196:	c2ba                	sw	a4,68(sp)
20000198:	c0be                	sw	a5,64(sp)
2000019a:	de42                	sw	a6,60(sp)
2000019c:	dc46                	sw	a7,56(sp)
2000019e:	da4a                	sw	s2,52(sp)
200001a0:	d872                	sw	t3,48(sp)
200001a2:	d676                	sw	t4,44(sp)
200001a4:	d47a                	sw	t5,40(sp)
200001a6:	d27e                	sw	t6,36(sp)
200001a8:	00002517          	auipc	a0,0x2
200001ac:	0a050513          	addi	a0,a0,160 # 20002248 <kDeviceLogBypassUartAddress>
200001b0:	4104                	lw	s1,0(a0)
200001b2:	f0000917          	auipc	s2,0xf0000
200001b6:	e4e90913          	addi	s2,s2,-434 # 10000000 <_data_start>
200001ba:	c09d                	beqz	s1,200001e0 <handler_irq_timer+0x60>
200001bc:	e0010517          	auipc	a0,0xe0010
200001c0:	e4450513          	addi	a0,a0,-444 # 10000 <_dv_log_offset>
200001c4:	4581                	li	a1,0
200001c6:	059000ef          	jal	ra,20000a1e <base_log_internal_dv>
test_handler():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:33
  CHECK(!irq_fired, "Entered IRQ handler, but `irq_fired` was not false!");
200001ca:	00094503          	lbu	a0,0(s2)
200001ce:	c929                	beqz	a0,20000220 <handler_irq_timer+0xa0>
200001d0:	e0010517          	auipc	a0,0xe0010
200001d4:	f0c50513          	addi	a0,a0,-244 # 100dc <test_handler.kLogFields>
200001d8:	4581                	li	a1,0
200001da:	045000ef          	jal	ra,20000a1e <base_log_internal_dv>
200001de:	a825                	j	20000216 <handler_irq_timer+0x96>
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:49
  LOG_INFO("Entering handler_irq_timer()");
200001e0:	00002597          	auipc	a1,0x2
200001e4:	dc858593          	addi	a1,a1,-568 # 20001fa8 <__umoddi3+0x356>
200001e8:	0800                	addi	s0,sp,16
200001ea:	4651                	li	a2,20
200001ec:	8522                	mv	a0,s0
200001ee:	616010ef          	jal	ra,20001804 <memcpy>
200001f2:	8522                	mv	a0,s0
200001f4:	780000ef          	jal	ra,20000974 <base_log_internal_core>
test_handler():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:33
  CHECK(!irq_fired, "Entered IRQ handler, but `irq_fired` was not false!");
200001f8:	00094503          	lbu	a0,0(s2)
200001fc:	c115                	beqz	a0,20000220 <handler_irq_timer+0xa0>
200001fe:	00002597          	auipc	a1,0x2
20000202:	e8a58593          	addi	a1,a1,-374 # 20002088 <kTestConfig+0x4>
20000206:	0800                	addi	s0,sp,16
20000208:	4651                	li	a2,20
2000020a:	8522                	mv	a0,s0
2000020c:	5f8010ef          	jal	ra,20001804 <memcpy>
20000210:	8522                	mv	a0,s0
20000212:	762000ef          	jal	ra,20000974 <base_log_internal_core>
20000216:	6531                	lui	a0,0xc
20000218:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000021c:	520010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:36
  CHECK(dif_rv_timer_irq_get(&timer, kHart, kComparator, &irq_flag) ==
20000220:	f0000517          	auipc	a0,0xf0000
20000224:	df450513          	addi	a0,a0,-524 # 10000014 <timer>
20000228:	00f10693          	addi	a3,sp,15
2000022c:	4581                	li	a1,0
2000022e:	4601                	li	a2,0
20000230:	259d                	jal	20000896 <dif_rv_timer_irq_get>
20000232:	c91d                	beqz	a0,20000268 <handler_irq_timer+0xe8>
20000234:	c889                	beqz	s1,20000246 <handler_irq_timer+0xc6>
20000236:	e0010517          	auipc	a0,0xe0010
2000023a:	eba50513          	addi	a0,a0,-326 # 100f0 <test_handler.kLogFields.31>
2000023e:	4581                	li	a1,0
20000240:	7de000ef          	jal	ra,20000a1e <base_log_internal_dv>
20000244:	a829                	j	2000025e <handler_irq_timer+0xde>
20000246:	00002597          	auipc	a1,0x2
2000024a:	e5658593          	addi	a1,a1,-426 # 2000209c <kTestConfig+0x18>
2000024e:	0800                	addi	s0,sp,16
20000250:	4651                	li	a2,20
20000252:	8522                	mv	a0,s0
20000254:	5b0010ef          	jal	ra,20001804 <memcpy>
20000258:	8522                	mv	a0,s0
2000025a:	71a000ef          	jal	ra,20000974 <base_log_internal_core>
2000025e:	6531                	lui	a0,0xc
20000260:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000264:	4d8010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:38
  CHECK(irq_flag, "Entered IRQ handler but the expected IRQ flag wasn't set!");
20000268:	00f14503          	lbu	a0,15(sp)
2000026c:	e91d                	bnez	a0,200002a2 <handler_irq_timer+0x122>
2000026e:	c889                	beqz	s1,20000280 <handler_irq_timer+0x100>
20000270:	e0010517          	auipc	a0,0xe0010
20000274:	e9450513          	addi	a0,a0,-364 # 10104 <test_handler.kLogFields.34>
20000278:	4581                	li	a1,0
2000027a:	7a4000ef          	jal	ra,20000a1e <base_log_internal_dv>
2000027e:	a829                	j	20000298 <handler_irq_timer+0x118>
20000280:	00002597          	auipc	a1,0x2
20000284:	e3058593          	addi	a1,a1,-464 # 200020b0 <kTestConfig+0x2c>
20000288:	0800                	addi	s0,sp,16
2000028a:	4651                	li	a2,20
2000028c:	8522                	mv	a0,s0
2000028e:	576010ef          	jal	ra,20001804 <memcpy>
20000292:	8522                	mv	a0,s0
20000294:	6e0000ef          	jal	ra,20000974 <base_log_internal_core>
20000298:	6531                	lui	a0,0xc
2000029a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000029e:	49e010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:40
  CHECK(dif_rv_timer_counter_set_enabled(&timer, kHart, kDifRvTimerDisabled) ==
200002a2:	f0000517          	auipc	a0,0xf0000
200002a6:	d7250513          	addi	a0,a0,-654 # 10000014 <timer>
200002aa:	4581                	li	a1,0
200002ac:	4601                	li	a2,0
200002ae:	29f5                	jal	200007aa <dif_rv_timer_counter_set_enabled>
200002b0:	c91d                	beqz	a0,200002e6 <handler_irq_timer+0x166>
200002b2:	c889                	beqz	s1,200002c4 <handler_irq_timer+0x144>
200002b4:	e0010517          	auipc	a0,0xe0010
200002b8:	e6450513          	addi	a0,a0,-412 # 10118 <test_handler.kLogFields.37>
200002bc:	4581                	li	a1,0
200002be:	760000ef          	jal	ra,20000a1e <base_log_internal_dv>
200002c2:	a829                	j	200002dc <handler_irq_timer+0x15c>
200002c4:	00002597          	auipc	a1,0x2
200002c8:	e0058593          	addi	a1,a1,-512 # 200020c4 <kTestConfig+0x40>
200002cc:	0800                	addi	s0,sp,16
200002ce:	4651                	li	a2,20
200002d0:	8522                	mv	a0,s0
200002d2:	532010ef          	jal	ra,20001804 <memcpy>
200002d6:	8522                	mv	a0,s0
200002d8:	69c000ef          	jal	ra,20000974 <base_log_internal_core>
200002dc:	6531                	lui	a0,0xc
200002de:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200002e2:	45a010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:42
  CHECK(dif_rv_timer_irq_clear(&timer, kHart, kComparator) == kDifRvTimerOk);
200002e6:	f0000517          	auipc	a0,0xf0000
200002ea:	d2e50513          	addi	a0,a0,-722 # 10000014 <timer>
200002ee:	4581                	li	a1,0
200002f0:	4601                	li	a2,0
200002f2:	2bd9                	jal	200008c8 <dif_rv_timer_irq_clear>
200002f4:	c915                	beqz	a0,20000328 <handler_irq_timer+0x1a8>
200002f6:	c889                	beqz	s1,20000308 <handler_irq_timer+0x188>
200002f8:	e0010517          	auipc	a0,0xe0010
200002fc:	e3450513          	addi	a0,a0,-460 # 1012c <test_handler.kLogFields.40>
20000300:	4581                	li	a1,0
20000302:	71c000ef          	jal	ra,20000a1e <base_log_internal_dv>
20000306:	a821                	j	2000031e <handler_irq_timer+0x19e>
20000308:	00002597          	auipc	a1,0x2
2000030c:	dd058593          	addi	a1,a1,-560 # 200020d8 <kTestConfig+0x54>
20000310:	0800                	addi	s0,sp,16
20000312:	4651                	li	a2,20
20000314:	8522                	mv	a0,s0
20000316:	4ee010ef          	jal	ra,20001804 <memcpy>
2000031a:	8522                	mv	a0,s0
2000031c:	2da1                	jal	20000974 <base_log_internal_core>
2000031e:	6531                	lui	a0,0xc
20000320:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000324:	418010ef          	jal	ra,2000173c <test_status_set>
20000328:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:44
  irq_fired = true;
2000032a:	00a90023          	sb	a0,0(s2)
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:51
  test_handler();
  LOG_INFO("Exiting handler_irq_timer()");
2000032e:	c889                	beqz	s1,20000340 <handler_irq_timer+0x1c0>
20000330:	e0010517          	auipc	a0,0xe0010
20000334:	ce450513          	addi	a0,a0,-796 # 10014 <handler_irq_timer.kLogFields.2>
20000338:	4581                	li	a1,0
2000033a:	6e4000ef          	jal	ra,20000a1e <base_log_internal_dv>
2000033e:	a821                	j	20000356 <handler_irq_timer+0x1d6>
20000340:	00002597          	auipc	a1,0x2
20000344:	c7c58593          	addi	a1,a1,-900 # 20001fbc <__umoddi3+0x36a>
20000348:	0800                	addi	s0,sp,16
2000034a:	4651                	li	a2,20
2000034c:	8522                	mv	a0,s0
2000034e:	4b6010ef          	jal	ra,20001804 <memcpy>
20000352:	8522                	mv	a0,s0
20000354:	2505                	jal	20000974 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:52
}
20000356:	5f92                	lw	t6,36(sp)
20000358:	5f22                	lw	t5,40(sp)
2000035a:	5eb2                	lw	t4,44(sp)
2000035c:	5e42                	lw	t3,48(sp)
2000035e:	5952                	lw	s2,52(sp)
20000360:	58e2                	lw	a7,56(sp)
20000362:	5872                	lw	a6,60(sp)
20000364:	4786                	lw	a5,64(sp)
20000366:	4716                	lw	a4,68(sp)
20000368:	46a6                	lw	a3,72(sp)
2000036a:	4636                	lw	a2,76(sp)
2000036c:	45c6                	lw	a1,80(sp)
2000036e:	4556                	lw	a0,84(sp)
20000370:	44e6                	lw	s1,88(sp)
20000372:	4476                	lw	s0,92(sp)
20000374:	5386                	lw	t2,96(sp)
20000376:	5316                	lw	t1,100(sp)
20000378:	52a6                	lw	t0,104(sp)
2000037a:	50b6                	lw	ra,108(sp)
2000037c:	6165                	addi	sp,sp,112
2000037e:	30200073          	mret

20000382 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:56

const test_config_t kTestConfig;

bool test_main(void) {
20000382:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:57
  irq_global_ctrl(true);
20000384:	de06                	sw	ra,60(sp)
20000386:	dc22                	sw	s0,56(sp)
20000388:	da26                	sw	s1,52(sp)
2000038a:	d84a                	sw	s2,48(sp)
2000038c:	d64e                	sw	s3,44(sp)
2000038e:	d452                	sw	s4,40(sp)
20000390:	4505                	li	a0,1
20000392:	504010ef          	jal	ra,20001896 <irq_global_ctrl>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:58
  irq_timer_ctrl(true);
20000396:	4505                	li	a0,1
20000398:	52a010ef          	jal	ra,200018c2 <irq_timer_ctrl>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:62

  mmio_region_t timer_reg =
      mmio_region_from_addr(TOP_EARLGREY_RV_TIMER_BASE_ADDR);
  CHECK(dif_rv_timer_init(
2000039c:	f0000697          	auipc	a3,0xf0000
200003a0:	c7868693          	addi	a3,a3,-904 # 10000014 <timer>
200003a4:	40100537          	lui	a0,0x40100
200003a8:	4585                	li	a1,1
200003aa:	4605                	li	a2,1
200003ac:	2471                	jal	20000638 <dif_rv_timer_init>
200003ae:	00002497          	auipc	s1,0x2
200003b2:	e9a48493          	addi	s1,s1,-358 # 20002248 <kDeviceLogBypassUartAddress>
200003b6:	c915                	beqz	a0,200003ea <test_main+0x68>
200003b8:	4088                	lw	a0,0(s1)
200003ba:	c901                	beqz	a0,200003ca <test_main+0x48>
200003bc:	e0010517          	auipc	a0,0xe0010
200003c0:	c6c50513          	addi	a0,a0,-916 # 10028 <test_main.kLogFields>
200003c4:	4581                	li	a1,0
200003c6:	2da1                	jal	20000a1e <base_log_internal_dv>
200003c8:	a821                	j	200003e0 <test_main+0x5e>
200003ca:	00002597          	auipc	a1,0x2
200003ce:	c0658593          	addi	a1,a1,-1018 # 20001fd0 <__umoddi3+0x37e>
200003d2:	0800                	addi	s0,sp,16
200003d4:	4651                	li	a2,20
200003d6:	8522                	mv	a0,s0
200003d8:	42c010ef          	jal	ra,20001804 <memcpy>
200003dc:	8522                	mv	a0,s0
200003de:	2b59                	jal	20000974 <base_log_internal_core>
200003e0:	6531                	lui	a0,0xc
200003e2:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200003e6:	356010ef          	jal	ra,2000173c <test_status_set>
200003ea:	00002597          	auipc	a1,0x2
200003ee:	e3e58593          	addi	a1,a1,-450 # 20002228 <kClockFreqPeripheralHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:68
            timer_reg,
            (dif_rv_timer_config_t){.hart_count = 1, .comparator_count = 1},
            &timer) == kDifRvTimerOk);

  dif_rv_timer_tick_params_t tick_params;
  CHECK(dif_rv_timer_approximate_tick_params(kClockFreqPeripheralHz,
200003f2:	4188                	lw	a0,0(a1)
200003f4:	41cc                	lw	a1,4(a1)
200003f6:	000f4637          	lui	a2,0xf4
200003fa:	24060613          	addi	a2,a2,576 # f4240 <test_status_set.kLogFields.2+0xe404c>
200003fe:	0078                	addi	a4,sp,12
20000400:	4681                	li	a3,0
20000402:	24f9                	jal	200006d0 <dif_rv_timer_approximate_tick_params>
20000404:	c915                	beqz	a0,20000438 <test_main+0xb6>
20000406:	4088                	lw	a0,0(s1)
20000408:	c901                	beqz	a0,20000418 <test_main+0x96>
2000040a:	e0010517          	auipc	a0,0xe0010
2000040e:	c3250513          	addi	a0,a0,-974 # 1003c <test_main.kLogFields.6>
20000412:	4581                	li	a1,0
20000414:	2529                	jal	20000a1e <base_log_internal_dv>
20000416:	a821                	j	2000042e <test_main+0xac>
20000418:	00002597          	auipc	a1,0x2
2000041c:	bcc58593          	addi	a1,a1,-1076 # 20001fe4 <__umoddi3+0x392>
20000420:	0800                	addi	s0,sp,16
20000422:	4651                	li	a2,20
20000424:	8522                	mv	a0,s0
20000426:	3de010ef          	jal	ra,20001804 <memcpy>
2000042a:	8522                	mv	a0,s0
2000042c:	23a1                	jal	20000974 <base_log_internal_core>
2000042e:	6531                	lui	a0,0xc
20000430:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000434:	308010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:71
                                             kTickFreqHz, &tick_params) ==
        kDifRvTimerApproximateTickParamsOk);
  CHECK(dif_rv_timer_set_tick_params(&timer, kHart, tick_params) ==
20000438:	4632                	lw	a2,12(sp)
2000043a:	f0000517          	auipc	a0,0xf0000
2000043e:	bda50513          	addi	a0,a0,-1062 # 10000014 <timer>
20000442:	4581                	li	a1,0
20000444:	2691                	jal	20000788 <dif_rv_timer_set_tick_params>
20000446:	c915                	beqz	a0,2000047a <test_main+0xf8>
20000448:	4088                	lw	a0,0(s1)
2000044a:	c901                	beqz	a0,2000045a <test_main+0xd8>
2000044c:	e0010517          	auipc	a0,0xe0010
20000450:	c0450513          	addi	a0,a0,-1020 # 10050 <test_main.kLogFields.9>
20000454:	4581                	li	a1,0
20000456:	23e1                	jal	20000a1e <base_log_internal_dv>
20000458:	a821                	j	20000470 <test_main+0xee>
2000045a:	00002597          	auipc	a1,0x2
2000045e:	b9e58593          	addi	a1,a1,-1122 # 20001ff8 <__umoddi3+0x3a6>
20000462:	0800                	addi	s0,sp,16
20000464:	4651                	li	a2,20
20000466:	8522                	mv	a0,s0
20000468:	39c010ef          	jal	ra,20001804 <memcpy>
2000046c:	8522                	mv	a0,s0
2000046e:	2319                	jal	20000974 <base_log_internal_core>
20000470:	6531                	lui	a0,0xc
20000472:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000476:	2c6010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:73
        kDifRvTimerOk);
  CHECK(dif_rv_timer_irq_enable(&timer, kHart, kComparator,
2000047a:	f0000517          	auipc	a0,0xf0000
2000047e:	b9a50513          	addi	a0,a0,-1126 # 10000014 <timer>
20000482:	4685                	li	a3,1
20000484:	4581                	li	a1,0
20000486:	4601                	li	a2,0
20000488:	26c9                	jal	2000084a <dif_rv_timer_irq_enable>
2000048a:	c915                	beqz	a0,200004be <test_main+0x13c>
2000048c:	4088                	lw	a0,0(s1)
2000048e:	c901                	beqz	a0,2000049e <test_main+0x11c>
20000490:	e0010517          	auipc	a0,0xe0010
20000494:	bd450513          	addi	a0,a0,-1068 # 10064 <test_main.kLogFields.12>
20000498:	4581                	li	a1,0
2000049a:	2351                	jal	20000a1e <base_log_internal_dv>
2000049c:	a821                	j	200004b4 <test_main+0x132>
2000049e:	00002597          	auipc	a1,0x2
200004a2:	b6e58593          	addi	a1,a1,-1170 # 2000200c <__umoddi3+0x3ba>
200004a6:	0800                	addi	s0,sp,16
200004a8:	4651                	li	a2,20
200004aa:	8522                	mv	a0,s0
200004ac:	358010ef          	jal	ra,20001804 <memcpy>
200004b0:	8522                	mv	a0,s0
200004b2:	21c9                	jal	20000974 <base_log_internal_core>
200004b4:	6531                	lui	a0,0xc
200004b6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004ba:	282010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:82
  // Logs over UART incur a large runtime overhead. To accommodate that, the
  // timer deadline needs to be large as well. In DV simulations, logs are not
  // sent over UART, so we can reduce the runtime / sim time with a much shorter
  // deadline (30 ms vs 100 us).
  uint64_t kDeadline =
      (kDeviceType == kDeviceSimDV) ? 100 /* 100 us */ : 30000 /* 30 ms */;
200004be:	00002517          	auipc	a0,0x2
200004c2:	d5a50513          	addi	a0,a0,-678 # 20002218 <kDeviceType>
200004c6:	4108                	lw	a0,0(a0)
200004c8:	06400a13          	li	s4,100
200004cc:	c501                	beqz	a0,200004d4 <test_main+0x152>
200004ce:	651d                	lui	a0,0x7
200004d0:	53050a13          	addi	s4,a0,1328 # 7530 <_stack_size+0x5530>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:83
  CHECK(dif_rv_timer_counter_read(&timer, kHart, &current_time) ==
200004d4:	f0000517          	auipc	a0,0xf0000
200004d8:	b4050513          	addi	a0,a0,-1216 # 10000014 <timer>
200004dc:	860a                	mv	a2,sp
200004de:	4581                	li	a1,0
200004e0:	2609                	jal	200007e2 <dif_rv_timer_counter_read>
200004e2:	0004a983          	lw	s3,0(s1)
200004e6:	c915                	beqz	a0,2000051a <test_main+0x198>
200004e8:	00098963          	beqz	s3,200004fa <test_main+0x178>
200004ec:	e0010517          	auipc	a0,0xe0010
200004f0:	b8c50513          	addi	a0,a0,-1140 # 10078 <test_main.kLogFields.15>
200004f4:	4581                	li	a1,0
200004f6:	2325                	jal	20000a1e <base_log_internal_dv>
200004f8:	a821                	j	20000510 <test_main+0x18e>
200004fa:	00002597          	auipc	a1,0x2
200004fe:	b2658593          	addi	a1,a1,-1242 # 20002020 <__umoddi3+0x3ce>
20000502:	0800                	addi	s0,sp,16
20000504:	4651                	li	a2,20
20000506:	8522                	mv	a0,s0
20000508:	2fc010ef          	jal	ra,20001804 <memcpy>
2000050c:	8522                	mv	a0,s0
2000050e:	219d                	jal	20000974 <base_log_internal_core>
20000510:	6531                	lui	a0,0xc
20000512:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000516:	226010ef          	jal	ra,2000173c <test_status_set>
2000051a:	4482                	lw	s1,0(sp)
2000051c:	009a0433          	add	s0,s4,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:85
        kDifRvTimerOk);
  LOG_INFO("Current time: %d; timer theshold: %d", (uint32_t)current_time,
20000520:	00098b63          	beqz	s3,20000536 <test_main+0x1b4>
20000524:	e0010517          	auipc	a0,0xe0010
20000528:	b6850513          	addi	a0,a0,-1176 # 1008c <test_main.kLogFields.18>
2000052c:	4589                	li	a1,2
2000052e:	8626                	mv	a2,s1
20000530:	86a2                	mv	a3,s0
20000532:	21f5                	jal	20000a1e <base_log_internal_dv>
20000534:	a839                	j	20000552 <test_main+0x1d0>
20000536:	00002597          	auipc	a1,0x2
2000053a:	afe58593          	addi	a1,a1,-1282 # 20002034 <__umoddi3+0x3e2>
2000053e:	01010913          	addi	s2,sp,16
20000542:	4651                	li	a2,20
20000544:	854a                	mv	a0,s2
20000546:	2be010ef          	jal	ra,20001804 <memcpy>
2000054a:	854a                	mv	a0,s2
2000054c:	85a6                	mv	a1,s1
2000054e:	8622                	mv	a2,s0
20000550:	2115                	jal	20000974 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:87
           (uint32_t)(current_time + kDeadline));
  CHECK(dif_rv_timer_arm(&timer, kHart, kComparator,
20000552:	4502                	lw	a0,0(sp)
20000554:	4592                	lw	a1,4(sp)
20000556:	014506b3          	add	a3,a0,s4
2000055a:	00a6b533          	sltu	a0,a3,a0
2000055e:	00a58733          	add	a4,a1,a0
20000562:	f0000517          	auipc	a0,0xf0000
20000566:	ab250513          	addi	a0,a0,-1358 # 10000014 <timer>
2000056a:	4581                	li	a1,0
2000056c:	4601                	li	a2,0
2000056e:	244d                	jal	20000810 <dif_rv_timer_arm>
20000570:	c915                	beqz	a0,200005a4 <test_main+0x222>
20000572:	00098963          	beqz	s3,20000584 <test_main+0x202>
20000576:	e0010517          	auipc	a0,0xe0010
2000057a:	b2a50513          	addi	a0,a0,-1238 # 100a0 <test_main.kLogFields.21>
2000057e:	4581                	li	a1,0
20000580:	2979                	jal	20000a1e <base_log_internal_dv>
20000582:	a821                	j	2000059a <test_main+0x218>
20000584:	00002597          	auipc	a1,0x2
20000588:	ac458593          	addi	a1,a1,-1340 # 20002048 <__umoddi3+0x3f6>
2000058c:	0800                	addi	s0,sp,16
2000058e:	4651                	li	a2,20
20000590:	8522                	mv	a0,s0
20000592:	272010ef          	jal	ra,20001804 <memcpy>
20000596:	8522                	mv	a0,s0
20000598:	2ef1                	jal	20000974 <base_log_internal_core>
2000059a:	6531                	lui	a0,0xc
2000059c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005a0:	19c010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:90
                         current_time + kDeadline) == kDifRvTimerOk);

  irq_fired = false;
200005a4:	f0000497          	auipc	s1,0xf0000
200005a8:	a5c48493          	addi	s1,s1,-1444 # 10000000 <_data_start>
200005ac:	00048023          	sb	zero,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:91
  CHECK(dif_rv_timer_counter_set_enabled(&timer, kHart, kDifRvTimerEnabled) ==
200005b0:	f0000517          	auipc	a0,0xf0000
200005b4:	a6450513          	addi	a0,a0,-1436 # 10000014 <timer>
200005b8:	4605                	li	a2,1
200005ba:	4581                	li	a1,0
200005bc:	22fd                	jal	200007aa <dif_rv_timer_counter_set_enabled>
200005be:	c915                	beqz	a0,200005f2 <test_main+0x270>
200005c0:	00098963          	beqz	s3,200005d2 <test_main+0x250>
200005c4:	e0010517          	auipc	a0,0xe0010
200005c8:	af050513          	addi	a0,a0,-1296 # 100b4 <test_main.kLogFields.24>
200005cc:	4581                	li	a1,0
200005ce:	2981                	jal	20000a1e <base_log_internal_dv>
200005d0:	a821                	j	200005e8 <test_main+0x266>
200005d2:	00002597          	auipc	a1,0x2
200005d6:	a8a58593          	addi	a1,a1,-1398 # 2000205c <__umoddi3+0x40a>
200005da:	0800                	addi	s0,sp,16
200005dc:	4651                	li	a2,20
200005de:	8522                	mv	a0,s0
200005e0:	224010ef          	jal	ra,20001804 <memcpy>
200005e4:	8522                	mv	a0,s0
200005e6:	2679                	jal	20000974 <base_log_internal_core>
200005e8:	6531                	lui	a0,0xc
200005ea:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005ee:	14e010ef          	jal	ra,2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:94
        kDifRvTimerOk);

  LOG_INFO("Waiting...");
200005f2:	00098963          	beqz	s3,20000604 <test_main+0x282>
200005f6:	e0010517          	auipc	a0,0xe0010
200005fa:	ad250513          	addi	a0,a0,-1326 # 100c8 <test_main.kLogFields.27>
200005fe:	4581                	li	a1,0
20000600:	2939                	jal	20000a1e <base_log_internal_dv>
20000602:	a839                	j	20000620 <test_main+0x29e>
20000604:	00002597          	auipc	a1,0x2
20000608:	a6c58593          	addi	a1,a1,-1428 # 20002070 <__umoddi3+0x41e>
2000060c:	0800                	addi	s0,sp,16
2000060e:	4651                	li	a2,20
20000610:	8522                	mv	a0,s0
20000612:	1f2010ef          	jal	ra,20001804 <memcpy>
20000616:	8522                	mv	a0,s0
20000618:	2eb1                	jal	20000974 <base_log_internal_core>
2000061a:	a019                	j	20000620 <test_main+0x29e>
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
2000061c:	10500073          	wfi
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:95
  while (!irq_fired) {
20000620:	0004c503          	lbu	a0,0(s1)
20000624:	dd65                	beqz	a0,2000061c <test_main+0x29a>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_rv_timer_smoketest.c:99
    wait_for_interrupt();
  }

  return true;
20000626:	4505                	li	a0,1
20000628:	5a22                	lw	s4,40(sp)
2000062a:	59b2                	lw	s3,44(sp)
2000062c:	5942                	lw	s2,48(sp)
2000062e:	54d2                	lw	s1,52(sp)
20000630:	5462                	lw	s0,56(sp)
20000632:	50f2                	lw	ra,60(sp)
20000634:	6121                	addi	sp,sp,64
20000636:	8082                	ret

20000638 <dif_rv_timer_init>:
dif_rv_timer_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:35
}

dif_rv_timer_result_t dif_rv_timer_init(mmio_region_t base_addr,
                                        dif_rv_timer_config_t config,
                                        dif_rv_timer_t *timer_out) {
  if (timer_out == NULL || config.hart_count < 1 ||
20000638:	ca01                	beqz	a2,20000648 <dif_rv_timer_init+0x10>
2000063a:	c699                	beqz	a3,20000648 <dif_rv_timer_init+0x10>
2000063c:	c591                	beqz	a1,20000648 <dif_rv_timer_init+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:40
      config.comparator_count < 1) {
    return kDifRvTimerBadArg;
  }

  timer_out->base_addr = base_addr;
2000063e:	c288                	sw	a0,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:41
  timer_out->config = config;
20000640:	c2cc                	sw	a1,4(a3)
20000642:	c690                	sw	a2,8(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:43

  return dif_rv_timer_reset(timer_out);
20000644:	8536                	mv	a0,a3
20000646:	a019                	j	2000064c <dif_rv_timer_reset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:44
}
20000648:	4505                	li	a0,1
2000064a:	8082                	ret

2000064c <dif_rv_timer_reset>:
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:333
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);

  return kDifRvTimerOk;
}

dif_rv_timer_result_t dif_rv_timer_reset(const dif_rv_timer_t *timer) {
2000064c:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:334
  if (timer == NULL) {
2000064e:	ce06                	sw	ra,28(sp)
20000650:	cc22                	sw	s0,24(sp)
20000652:	ca26                	sw	s1,20(sp)
20000654:	c84a                	sw	s2,16(sp)
20000656:	c64e                	sw	s3,12(sp)
20000658:	c452                	sw	s4,8(sp)
2000065a:	c135                	beqz	a0,200006be <dif_rv_timer_reset+0x72>
2000065c:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:339
    return kDifRvTimerBadArg;
  }

  // Disable all counters.
  mmio_region_write32(timer->base_addr, RV_TIMER_CTRL_REG_OFFSET, 0x0);
2000065e:	4108                	lw	a0,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000660:	00052023          	sw	zero,0(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:341

  for (uint32_t hart_id = 0; hart_id < timer->config.hart_count; ++hart_id) {
20000664:	4048                	lw	a0,4(s0)
20000666:	c931                	beqz	a0,200006ba <dif_rv_timer_reset+0x6e>
20000668:	4901                	li	s2,0
2000066a:	59fd                	li	s3,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:344
    // Clear and disable all interrupts.
    ptrdiff_t irq_status =
        irq_reg_for_hart(hart_id, timer->config.comparator_count,
2000066c:	4408                	lw	a0,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:349
                         RV_TIMER_INTR_STATE0_REG_OFFSET);
    ptrdiff_t irq_enable =
        irq_reg_for_hart(hart_id, timer->config.comparator_count,
                         RV_TIMER_INTR_ENABLE0_REG_OFFSET);
    mmio_region_write32(timer->base_addr, irq_enable, 0x0);
2000066e:	400c                	lw	a1,0(s0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
20000670:	050e                	slli	a0,a0,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
20000672:	00891a13          	slli	s4,s2,0x8
20000676:	9552                	add	a0,a0,s4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
20000678:	95aa                	add	a1,a1,a0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000067a:	1005a623          	sw	zero,268(a1)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:350
    mmio_region_write32(timer->base_addr, irq_status, UINT32_MAX);
2000067e:	400c                	lw	a1,0(s0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
20000680:	952e                	add	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000682:	11352823          	sw	s3,272(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:353

    // Reset all comparators to their default all-ones state.
    for (uint32_t comp_id = 0; comp_id < timer->config.comparator_count;
20000686:	4408                	lw	a0,8(s0)
20000688:	cd09                	beqz	a0,200006a2 <dif_rv_timer_reset+0x56>
2000068a:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:356
         ++comp_id) {
      dif_rv_timer_result_t error =
          dif_rv_timer_arm(timer, hart_id, comp_id, UINT64_MAX);
2000068c:	56fd                	li	a3,-1
2000068e:	577d                	li	a4,-1
20000690:	8522                	mv	a0,s0
20000692:	85ca                	mv	a1,s2
20000694:	8626                	mv	a2,s1
20000696:	2aad                	jal	20000810 <dif_rv_timer_arm>
20000698:	e505                	bnez	a0,200006c0 <dif_rv_timer_reset+0x74>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:353
    for (uint32_t comp_id = 0; comp_id < timer->config.comparator_count;
2000069a:	4408                	lw	a0,8(s0)
2000069c:	0485                	addi	s1,s1,1
2000069e:	fea4e7e3          	bltu	s1,a0,2000068c <dif_rv_timer_reset+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:363
        return error;
      }
    }

    // Reset the counter to zero.
    mmio_region_write32(
200006a2:	4008                	lw	a0,0(s0)
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200006a4:	9552                	add	a0,a0,s4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200006a6:	10052223          	sw	zero,260(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:366
        timer->base_addr,
        reg_for_hart(hart_id, RV_TIMER_TIMER_V_LOWER0_REG_OFFSET), 0x0);
    mmio_region_write32(
200006aa:	4008                	lw	a0,0(s0)
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200006ac:	9552                	add	a0,a0,s4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200006ae:	10052423          	sw	zero,264(a0)
dif_rv_timer_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:341
  for (uint32_t hart_id = 0; hart_id < timer->config.hart_count; ++hart_id) {
200006b2:	4048                	lw	a0,4(s0)
200006b4:	0905                	addi	s2,s2,1
200006b6:	faa96be3          	bltu	s2,a0,2000066c <dif_rv_timer_reset+0x20>
200006ba:	4501                	li	a0,0
200006bc:	a011                	j	200006c0 <dif_rv_timer_reset+0x74>
200006be:	4505                	li	a0,1
200006c0:	4a22                	lw	s4,8(sp)
200006c2:	49b2                	lw	s3,12(sp)
200006c4:	4942                	lw	s2,16(sp)
200006c6:	44d2                	lw	s1,20(sp)
200006c8:	4462                	lw	s0,24(sp)
200006ca:	40f2                	lw	ra,28(sp)
200006cc:	6105                	addi	sp,sp,32
200006ce:	8082                	ret

200006d0 <dif_rv_timer_approximate_tick_params>:
dif_rv_timer_approximate_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:63
                                     dif_rv_timer_tick_params_t *out) {
200006d0:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:64
  if (out == NULL) {
200006d2:	ce06                	sw	ra,28(sp)
200006d4:	cc22                	sw	s0,24(sp)
200006d6:	ca26                	sw	s1,20(sp)
200006d8:	c84a                	sw	s2,16(sp)
200006da:	c64e                	sw	s3,12(sp)
200006dc:	c452                	sw	s4,8(sp)
200006de:	c256                	sw	s5,4(sp)
200006e0:	c05a                	sw	s6,0(sp)
200006e2:	cf25                	beqz	a4,2000075a <dif_rv_timer_approximate_tick_params+0x8a>
200006e4:	893a                	mv	s2,a4
200006e6:	89b6                	mv	s3,a3
200006e8:	8a32                	mv	s4,a2
200006ea:	8aae                	mv	s5,a1
200006ec:	8b2a                	mv	s6,a0
euclidean_gcd():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:52
  while (b != 0) {
200006ee:	00d66533          	or	a0,a2,a3
200006f2:	845a                	mv	s0,s6
200006f4:	84ae                	mv	s1,a1
200006f6:	c105                	beqz	a0,20000716 <dif_rv_timer_approximate_tick_params+0x46>
200006f8:	855a                	mv	a0,s6
200006fa:	85d6                	mv	a1,s5
200006fc:	8652                	mv	a2,s4
200006fe:	86ce                	mv	a3,s3
20000700:	84b6                	mv	s1,a3
20000702:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:54
    b = a % b;
20000704:	54e010ef          	jal	ra,20001c52 <__umoddi3>
20000708:	862a                	mv	a2,a0
2000070a:	86ae                	mv	a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:52
  while (b != 0) {
2000070c:	00b56733          	or	a4,a0,a1
20000710:	8522                	mv	a0,s0
20000712:	85a6                	mv	a1,s1
20000714:	f775                	bnez	a4,20000700 <dif_rv_timer_approximate_tick_params+0x30>
dif_rv_timer_approximate_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:75
  uint64_t prescale = clock_freq / gcd - 1;
20000716:	855a                	mv	a0,s6
20000718:	85d6                	mv	a1,s5
2000071a:	8622                	mv	a2,s0
2000071c:	86a6                	mv	a3,s1
2000071e:	1ce010ef          	jal	ra,200018ec <__udivdi3>
20000722:	fff50a93          	addi	s5,a0,-1
20000726:	00aab533          	sltu	a0,s5,a0
2000072a:	952e                	add	a0,a0,a1
2000072c:	fff50b13          	addi	s6,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:76
  uint64_t step = counter_freq / gcd;
20000730:	8552                	mv	a0,s4
20000732:	85ce                	mv	a1,s3
20000734:	8622                	mv	a2,s0
20000736:	86a6                	mv	a3,s1
20000738:	1b4010ef          	jal	ra,200018ec <__udivdi3>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:78
  if (prescale > RV_TIMER_CFG0_PRESCALE_MASK ||
2000073c:	014b1613          	slli	a2,s6,0x14
20000740:	00cad693          	srli	a3,s5,0xc
20000744:	8e55                	or	a2,a2,a3
20000746:	00cb5693          	srli	a3,s6,0xc
2000074a:	8ed1                	or	a3,a3,a2
2000074c:	460d                	li	a2,3
2000074e:	e295                	bnez	a3,20000772 <dif_rv_timer_approximate_tick_params+0xa2>
20000750:	c599                	beqz	a1,2000075e <dif_rv_timer_approximate_tick_params+0x8e>
20000752:	00b035b3          	snez	a1,a1
20000756:	c989                	beqz	a1,20000768 <dif_rv_timer_approximate_tick_params+0x98>
20000758:	a829                	j	20000772 <dif_rv_timer_approximate_tick_params+0xa2>
2000075a:	4605                	li	a2,1
2000075c:	a819                	j	20000772 <dif_rv_timer_approximate_tick_params+0xa2>
2000075e:	0ff00593          	li	a1,255
20000762:	00a5b5b3          	sltu	a1,a1,a0
20000766:	e591                	bnez	a1,20000772 <dif_rv_timer_approximate_tick_params+0xa2>
20000768:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:83
  out->prescale = (uint16_t)prescale;
2000076a:	01591023          	sh	s5,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:84
  out->tick_step = (uint8_t)step;
2000076e:	00a90123          	sb	a0,2(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:87
}
20000772:	8532                	mv	a0,a2
20000774:	4b02                	lw	s6,0(sp)
20000776:	4a92                	lw	s5,4(sp)
20000778:	4a22                	lw	s4,8(sp)
2000077a:	49b2                	lw	s3,12(sp)
2000077c:	4942                	lw	s2,16(sp)
2000077e:	44d2                	lw	s1,20(sp)
20000780:	4462                	lw	s0,24(sp)
20000782:	40f2                	lw	ra,28(sp)
20000784:	6105                	addi	sp,sp,32
20000786:	8082                	ret

20000788 <dif_rv_timer_set_tick_params>:
dif_rv_timer_set_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:91
    dif_rv_timer_tick_params_t params) {
20000788:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:92
  if (timer == NULL || hart_id >= timer->config.hart_count) {
2000078a:	cd11                	beqz	a0,200007a6 <dif_rv_timer_set_tick_params+0x1e>
2000078c:	4158                	lw	a4,4(a0)
2000078e:	00e5fc63          	bgeu	a1,a4,200007a6 <dif_rv_timer_set_tick_params+0x1e>
20000792:	4681                	li	a3,0
20000794:	00ff1737          	lui	a4,0xff1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:101
  mmio_region_write32(timer->base_addr,
20000798:	4108                	lw	a0,0(a0)
2000079a:	177d                	addi	a4,a4,-1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
2000079c:	8e79                	and	a2,a2,a4
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000079e:	05a2                	slli	a1,a1,0x8
200007a0:	952e                	add	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200007a2:	10c52023          	sw	a2,256(a0)
dif_rv_timer_set_tick_params():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:106
}
200007a6:	8536                	mv	a0,a3
200007a8:	8082                	ret

200007aa <dif_rv_timer_counter_set_enabled>:
dif_rv_timer_counter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:110
    dif_rv_timer_enabled_t state) {
200007aa:	86aa                	mv	a3,a0
200007ac:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:111
  if (timer == NULL || hart_id >= timer->config.hart_count) {
200007ae:	ca8d                	beqz	a3,200007e0 <dif_rv_timer_counter_set_enabled+0x36>
200007b0:	42d8                	lw	a4,4(a3)
200007b2:	02e5f763          	bgeu	a1,a4,200007e0 <dif_rv_timer_counter_set_enabled+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:115
  switch (state) {
200007b6:	ca19                	beqz	a2,200007cc <dif_rv_timer_counter_set_enabled+0x22>
200007b8:	4705                	li	a4,1
200007ba:	02e61363          	bne	a2,a4,200007e0 <dif_rv_timer_counter_set_enabled+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:117
      mmio_region_nonatomic_set_bit32(timer->base_addr,
200007be:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200007c0:	4214                	lw	a3,0(a2)
200007c2:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200007c4:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200007c8:	8dd5                	or	a1,a1,a3
200007ca:	a811                	j	200007de <dif_rv_timer_counter_set_enabled+0x34>
dif_rv_timer_counter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:121
      mmio_region_nonatomic_clear_bit32(timer->base_addr,
200007cc:	4290                	lw	a2,0(a3)
200007ce:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200007d0:	4214                	lw	a3,0(a2)
200007d2:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200007d4:	00b715b3          	sll	a1,a4,a1
200007d8:	fff5c593          	not	a1,a1
200007dc:	8df5                	and	a1,a1,a3
200007de:	c20c                	sw	a1,0(a2)
dif_rv_timer_counter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:129
}
200007e0:	8082                	ret

200007e2 <dif_rv_timer_counter_read>:
dif_rv_timer_counter_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:133
                                                uint64_t *out) {
200007e2:	86aa                	mv	a3,a0
200007e4:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:134
  if (timer == NULL || out == NULL || hart_id >= timer->config.hart_count) {
200007e6:	c685                	beqz	a3,2000080e <dif_rv_timer_counter_read+0x2c>
200007e8:	c21d                	beqz	a2,2000080e <dif_rv_timer_counter_read+0x2c>
200007ea:	42d8                	lw	a4,4(a3)
200007ec:	02e5f163          	bgeu	a1,a4,2000080e <dif_rv_timer_counter_read+0x2c>
200007f0:	4288                	lw	a0,0(a3)
200007f2:	05a2                	slli	a1,a1,0x8
200007f4:	95aa                	add	a1,a1,a0
200007f6:	10858513          	addi	a0,a1,264
200007fa:	10458713          	addi	a4,a1,260
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200007fe:	410c                	lw	a1,0(a0)
20000800:	4314                	lw	a3,0(a4)
20000802:	411c                	lw	a5,0(a0)
dif_rv_timer_counter_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:154
    if (upper == overflow_check) {
20000804:	fef59de3          	bne	a1,a5,200007fe <dif_rv_timer_counter_read+0x1c>
20000808:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:155
      *out = (((uint64_t)upper) << 32) | lower;
2000080a:	c24c                	sw	a1,4(a2)
2000080c:	c214                	sw	a3,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:159
}
2000080e:	8082                	ret

20000810 <dif_rv_timer_arm>:
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:163
                                       uint64_t threshold) {
20000810:	4805                	li	a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:164
  if (timer == NULL || hart_id >= timer->config.hart_count ||
20000812:	c915                	beqz	a0,20000846 <dif_rv_timer_arm+0x36>
20000814:	415c                	lw	a5,4(a0)
20000816:	02f5f863          	bgeu	a1,a5,20000846 <dif_rv_timer_arm+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:165
      comp_id >= timer->config.comparator_count) {
2000081a:	451c                	lw	a5,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:164
  if (timer == NULL || hart_id >= timer->config.hart_count ||
2000081c:	02f67563          	bgeu	a2,a5,20000846 <dif_rv_timer_arm+0x36>
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
20000820:	05a2                	slli	a1,a1,0x8
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:182
  mmio_region_write32(timer->base_addr, upper_reg, UINT32_MAX);
20000822:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:174
      (sizeof(uint64_t) * comp_id);
20000824:	060e                	slli	a2,a2,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
20000826:	95b2                	add	a1,a1,a2
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:176
      reg_for_hart(hart_id, RV_TIMER_COMPARE_UPPER0_0_REG_OFFSET) +
20000828:	11058613          	addi	a2,a1,272
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000082c:	00c78833          	add	a6,a5,a2
20000830:	57fd                	li	a5,-1
20000832:	00f82023          	sw	a5,0(a6)
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:185
  mmio_region_write32(timer->base_addr, lower_reg, lower);
20000836:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:173
      reg_for_hart(hart_id, RV_TIMER_COMPARE_LOWER0_0_REG_OFFSET) +
20000838:	95be                	add	a1,a1,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000083a:	10d5a623          	sw	a3,268(a1)
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:187
  mmio_region_write32(timer->base_addr, upper_reg, upper);
2000083e:	4108                	lw	a0,0(a0)
20000840:	4801                	li	a6,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000842:	9532                	add	a0,a0,a2
20000844:	c118                	sw	a4,0(a0)
dif_rv_timer_arm():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:190
}
20000846:	8542                	mv	a0,a6
20000848:	8082                	ret

2000084a <dif_rv_timer_irq_enable>:
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:227
                                              dif_rv_timer_enabled_t state) {
2000084a:	872a                	mv	a4,a0
2000084c:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:228
  if (timer == NULL || hart_id >= timer->config.hart_count ||
2000084e:	c339                	beqz	a4,20000894 <dif_rv_timer_irq_enable+0x4a>
20000850:	435c                	lw	a5,4(a4)
20000852:	04f5f163          	bgeu	a1,a5,20000894 <dif_rv_timer_irq_enable+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:229
      comp_id >= timer->config.comparator_count) {
20000856:	471c                	lw	a5,8(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:228
  if (timer == NULL || hart_id >= timer->config.hart_count ||
20000858:	02f67e63          	bgeu	a2,a5,20000894 <dif_rv_timer_irq_enable+0x4a>
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
2000085c:	078e                	slli	a5,a5,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000085e:	05a2                	slli	a1,a1,0x8
20000860:	95be                	add	a1,a1,a5
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
20000862:	10c58593          	addi	a1,a1,268
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:236
  switch (state) {
20000866:	ce81                	beqz	a3,2000087e <dif_rv_timer_irq_enable+0x34>
20000868:	4785                	li	a5,1
2000086a:	02f69563          	bne	a3,a5,20000894 <dif_rv_timer_irq_enable+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:238
      mmio_region_nonatomic_set_bit32(timer->base_addr, reg, comp_id);
2000086e:	4308                	lw	a0,0(a4)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000870:	95aa                	add	a1,a1,a0
20000872:	4194                	lw	a3,0(a1)
20000874:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000876:	00c79633          	sll	a2,a5,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000087a:	8e55                	or	a2,a2,a3
2000087c:	a819                	j	20000892 <dif_rv_timer_irq_enable+0x48>
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:241
      mmio_region_nonatomic_clear_bit32(timer->base_addr, reg, comp_id);
2000087e:	4314                	lw	a3,0(a4)
20000880:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000882:	95b6                	add	a1,a1,a3
20000884:	4194                	lw	a3,0(a1)
20000886:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000888:	00c71633          	sll	a2,a4,a2
2000088c:	fff64613          	not	a2,a2
20000890:	8e75                	and	a2,a2,a3
20000892:	c190                	sw	a2,0(a1)
dif_rv_timer_irq_enable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:248
}
20000894:	8082                	ret

20000896 <dif_rv_timer_irq_get>:
dif_rv_timer_irq_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:252
                                           bool *flag_out) {
20000896:	872a                	mv	a4,a0
20000898:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:253
  if (timer == NULL || flag_out == NULL ||
2000089a:	c715                	beqz	a4,200008c6 <dif_rv_timer_irq_get+0x30>
2000089c:	c68d                	beqz	a3,200008c6 <dif_rv_timer_irq_get+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:254
      hart_id >= timer->config.hart_count ||
2000089e:	435c                	lw	a5,4(a4)
200008a0:	02f5f363          	bgeu	a1,a5,200008c6 <dif_rv_timer_irq_get+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:255
      comp_id >= timer->config.comparator_count) {
200008a4:	471c                	lw	a5,8(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:253
  if (timer == NULL || flag_out == NULL ||
200008a6:	02f67063          	bgeu	a2,a5,200008c6 <dif_rv_timer_irq_get+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:262
  *flag_out = mmio_region_get_bit32(timer->base_addr, reg, comp_id);
200008aa:	4308                	lw	a0,0(a4)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
200008ac:	00379713          	slli	a4,a5,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200008b0:	05a2                	slli	a1,a1,0x8
200008b2:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
200008b4:	952e                	add	a0,a0,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200008b6:	11052583          	lw	a1,272(a0)
200008ba:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200008bc:	00c5d5b3          	srl	a1,a1,a2
200008c0:	8985                	andi	a1,a1,1
dif_rv_timer_irq_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:262
  *flag_out = mmio_region_get_bit32(timer->base_addr, reg, comp_id);
200008c2:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:265
}
200008c6:	8082                	ret

200008c8 <dif_rv_timer_irq_clear>:
dif_rv_timer_irq_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:269
                                             uint32_t comp_id) {
200008c8:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:270
  if (timer == NULL || hart_id >= timer->config.hart_count ||
200008ca:	c115                	beqz	a0,200008ee <dif_rv_timer_irq_clear+0x26>
200008cc:	4158                	lw	a4,4(a0)
200008ce:	02e5f063          	bgeu	a1,a4,200008ee <dif_rv_timer_irq_clear+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:271
      comp_id >= timer->config.comparator_count) {
200008d2:	4518                	lw	a4,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:270
  if (timer == NULL || hart_id >= timer->config.hart_count ||
200008d4:	00e67d63          	bgeu	a2,a4,200008ee <dif_rv_timer_irq_clear+0x26>
200008d8:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:278
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
200008da:	4108                	lw	a0,0(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
200008dc:	070e                	slli	a4,a4,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
200008de:	05a2                	slli	a1,a1,0x8
200008e0:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
200008e2:	952e                	add	a0,a0,a1
200008e4:	4585                	li	a1,1
dif_rv_timer_irq_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:278
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
200008e6:	00c595b3          	sll	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200008ea:	10b52823          	sw	a1,272(a0)
dif_rv_timer_irq_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:281
}
200008ee:	8536                	mv	a0,a3
200008f0:	8082                	ret

200008f2 <dif_rv_timer_irq_disable>:
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:285
                                               uint32_t *state) {
200008f2:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:286
  if (timer == NULL || hart_id >= timer->config.hart_count) {
200008f4:	c905                	beqz	a0,20000924 <dif_rv_timer_irq_disable+0x32>
200008f6:	4158                	lw	a4,4(a0)
200008f8:	02e5f663          	bgeu	a1,a4,20000924 <dif_rv_timer_irq_disable+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:290
  ptrdiff_t reg = irq_reg_for_hart(hart_id, timer->config.comparator_count,
200008fc:	4514                	lw	a3,8(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
200008fe:	068e                	slli	a3,a3,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
20000900:	05a2                	slli	a1,a1,0x8
20000902:	95b6                	add	a1,a1,a3
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
20000904:	10c58593          	addi	a1,a1,268
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:293
  if (state != NULL) {
20000908:	c619                	beqz	a2,20000916 <dif_rv_timer_irq_disable+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:294
    *state = mmio_region_read32(timer->base_addr, reg);
2000090a:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000090c:	96ae                	add	a3,a3,a1
2000090e:	4294                	lw	a3,0(a3)
20000910:	8189                	srli	a1,a1,0x2
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:294
20000912:	c214                	sw	a3,0(a2)
20000914:	a011                	j	20000918 <dif_rv_timer_irq_disable+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000916:	8189                	srli	a1,a1,0x2
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:297
  mmio_region_write32(timer->base_addr, reg, 0);
20000918:	4108                	lw	a0,0(a0)
2000091a:	4681                	li	a3,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000091c:	058a                	slli	a1,a1,0x2
2000091e:	952e                	add	a0,a0,a1
20000920:	00052023          	sw	zero,0(a0)
dif_rv_timer_irq_disable():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:300
}
20000924:	8536                	mv	a0,a3
20000926:	8082                	ret

20000928 <dif_rv_timer_irq_restore>:
dif_rv_timer_irq_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:304
                                               uint32_t state) {
20000928:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:305
  if (timer == NULL || hart_id >= timer->config.hart_count) {
2000092a:	cd09                	beqz	a0,20000944 <dif_rv_timer_irq_restore+0x1c>
2000092c:	4158                	lw	a4,4(a0)
2000092e:	00e5fb63          	bgeu	a1,a4,20000944 <dif_rv_timer_irq_restore+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:309
  ptrdiff_t reg = irq_reg_for_hart(hart_id, timer->config.comparator_count,
20000932:	4518                	lw	a4,8(a0)
20000934:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:312
  mmio_region_write32(timer->base_addr, reg, state);
20000936:	4108                	lw	a0,0(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
20000938:	070e                	slli	a4,a4,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000093a:	05a2                	slli	a1,a1,0x8
2000093c:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
2000093e:	952e                	add	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000940:	10c52623          	sw	a2,268(a0)
dif_rv_timer_irq_restore():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:315
}
20000944:	8536                	mv	a0,a3
20000946:	8082                	ret

20000948 <dif_rv_timer_irq_force>:
dif_rv_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:319
                                             uint32_t comp_id) {
20000948:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:320
  if (timer == NULL || hart_id >= timer->config.hart_count ||
2000094a:	c115                	beqz	a0,2000096e <dif_rv_timer_irq_force+0x26>
2000094c:	4158                	lw	a4,4(a0)
2000094e:	02e5f063          	bgeu	a1,a4,2000096e <dif_rv_timer_irq_force+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:321
      comp_id >= timer->config.comparator_count) {
20000952:	4518                	lw	a4,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:320
  if (timer == NULL || hart_id >= timer->config.hart_count ||
20000954:	00e67d63          	bgeu	a2,a4,2000096e <dif_rv_timer_irq_force+0x26>
20000958:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:328
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
2000095a:	4108                	lw	a0,0(a0)
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:220
      sizeof(uint64_t) * (comparators - kComparatorsInReggenHeader);
2000095c:	070e                	slli	a4,a4,0x3
reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:29
  return kHartRegisterSpacing * hart + reg_offset;
2000095e:	05a2                	slli	a1,a1,0x8
20000960:	95ba                	add	a1,a1,a4
irq_reg_for_hart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:221
  return reg_for_hart(hart_id, reg_offset) + extra_comparator_offset;
20000962:	952e                	add	a0,a0,a1
20000964:	4585                	li	a1,1
dif_rv_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:328
  mmio_region_write32(timer->base_addr, reg, 1 << comp_id);
20000966:	00c595b3          	sll	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000096a:	10b52a23          	sw	a1,276(a0)
dif_rv_timer_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_rv_timer.c:331
}
2000096e:	8536                	mv	a0,a3
20000970:	8082                	ret
	...

20000974 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20000974:	7139                	addi	sp,sp,-64
20000976:	ce06                	sw	ra,28(sp)
20000978:	cc22                	sw	s0,24(sp)
2000097a:	ca26                	sw	s1,20(sp)
2000097c:	c84a                	sw	s2,16(sp)
2000097e:	892a                	mv	s2,a0
20000980:	de46                	sw	a7,60(sp)
20000982:	dc42                	sw	a6,56(sp)
20000984:	da3e                	sw	a5,52(sp)
20000986:	d83a                	sw	a4,48(sp)
20000988:	d636                	sw	a3,44(sp)
2000098a:	d432                	sw	a2,40(sp)
2000098c:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
2000098e:	4144                	lw	s1,4(a0)
20000990:	80000537          	lui	a0,0x80000
20000994:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd57b>
20000998:	8526                	mv	a0,s1
2000099a:	4581                	li	a1,0
2000099c:	6b9000ef          	jal	ra,20001854 <memchr>
200009a0:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
200009a4:	02f00593          	li	a1,47
200009a8:	8526                	mv	a0,s1
200009aa:	6c3000ef          	jal	ra,2000186c <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200009ae:	00092583          	lw	a1,0(s2)
200009b2:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
200009b4:	00b66b63          	bltu	a2,a1,200009ca <base_log_internal_core+0x56>
200009b8:	058a                	slli	a1,a1,0x2
200009ba:	00001617          	auipc	a2,0x1
200009be:	73260613          	addi	a2,a2,1842 # 200020ec <kTestConfig+0x68>
200009c2:	95b2                	add	a1,a1,a2
200009c4:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
200009c6:	e519                	bnez	a0,200009d4 <base_log_internal_core+0x60>
200009c8:	a801                	j	200009d8 <base_log_internal_core+0x64>
200009ca:	00002597          	auipc	a1,0x2
200009ce:	ea858593          	addi	a1,a1,-344 # 20002872 <__clz_tab+0x626>
200009d2:	c119                	beqz	a0,200009d8 <base_log_internal_core+0x64>
200009d4:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
200009d8:	effff417          	auipc	s0,0xeffff
200009dc:	63440413          	addi	s0,s0,1588 # 1000000c <_data_end>
200009e0:	00045603          	lhu	a2,0(s0)
200009e4:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200009e8:	00002517          	auipc	a0,0x2
200009ec:	e7150513          	addi	a0,a0,-399 # 20002859 <__clz_tab+0x60d>
200009f0:	86a6                	mv	a3,s1
200009f2:	28d1                	jal	20000ac6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
200009f4:	00041503          	lh	a0,0(s0)
200009f8:	0505                	addi	a0,a0,1
200009fa:	00a41023          	sh	a0,0(s0)
200009fe:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20000a00:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20000a02:	01092503          	lw	a0,16(s2)
20000a06:	28c5                	jal	20000af6 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20000a08:	00002517          	auipc	a0,0x2
20000a0c:	e5f50513          	addi	a0,a0,-417 # 20002867 <__clz_tab+0x61b>
20000a10:	285d                	jal	20000ac6 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20000a12:	4942                	lw	s2,16(sp)
20000a14:	44d2                	lw	s1,20(sp)
20000a16:	4462                	lw	s0,24(sp)
20000a18:	40f2                	lw	ra,28(sp)
20000a1a:	6121                	addi	sp,sp,64
20000a1c:	8082                	ret

20000a1e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20000a1e:	1101                	addi	sp,sp,-32
20000a20:	ce46                	sw	a7,28(sp)
20000a22:	cc42                	sw	a6,24(sp)
20000a24:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20000a26:	00002797          	auipc	a5,0x2
20000a2a:	82278793          	addi	a5,a5,-2014 # 20002248 <kDeviceLogBypassUartAddress>
20000a2e:	439c                	lw	a5,0(a5)
20000a30:	c83a                	sw	a4,16(sp)
20000a32:	c636                	sw	a3,12(sp)
20000a34:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a36:	c388                	sw	a0,0(a5)
20000a38:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20000a3a:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000a3c:	c989                	beqz	a1,20000a4e <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20000a3e:	4512                	lw	a0,4(sp)
20000a40:	00450613          	addi	a2,a0,4
20000a44:	c232                	sw	a2,4(sp)
20000a46:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20000a48:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a4a:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20000a4c:	f9ed                	bnez	a1,20000a3e <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20000a4e:	6105                	addi	sp,sp,32
20000a50:	8082                	ret
	...

20000a54 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20000a54:	e589                	bnez	a1,20000a5e <base_set_stdout+0xa>
20000a56:	00000597          	auipc	a1,0x0
20000a5a:	01658593          	addi	a1,a1,22 # 20000a6c <base_dev_null>
20000a5e:	effff617          	auipc	a2,0xeffff
20000a62:	5a660613          	addi	a2,a2,1446 # 10000004 <base_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
20000a66:	c208                	sw	a0,0(a2)
20000a68:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20000a6a:	8082                	ret

20000a6c <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20000a6c:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20000a6e:	8082                	ret

20000a70 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20000a70:	effff597          	auipc	a1,0xeffff
20000a74:	59458593          	addi	a1,a1,1428 # 10000004 <base_stdout>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20000a78:	c188                	sw	a0,0(a1)
20000a7a:	00000517          	auipc	a0,0x0
20000a7e:	00c50513          	addi	a0,a0,12 # 20000a86 <base_dev_uart>
20000a82:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20000a84:	8082                	ret

20000a86 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20000a86:	1101                	addi	sp,sp,-32
20000a88:	ce06                	sw	ra,28(sp)
20000a8a:	cc22                	sw	s0,24(sp)
20000a8c:	ca26                	sw	s1,20(sp)
20000a8e:	c84a                	sw	s2,16(sp)
20000a90:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000a92:	c20d                	beqz	a2,20000ab4 <base_dev_uart+0x2e>
20000a94:	8432                	mv	s0,a2
20000a96:	892e                	mv	s2,a1
20000a98:	89aa                	mv	s3,a0
20000a9a:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20000a9c:	00990533          	add	a0,s2,s1
20000aa0:	00054583          	lbu	a1,0(a0)
20000aa4:	854e                	mv	a0,s3
20000aa6:	2f19                	jal	200011bc <dif_uart_byte_send_polled>
20000aa8:	e519                	bnez	a0,20000ab6 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20000aaa:	0485                	addi	s1,s1,1
20000aac:	fe9418e3          	bne	s0,s1,20000a9c <base_dev_uart+0x16>
20000ab0:	84a2                	mv	s1,s0
20000ab2:	a011                	j	20000ab6 <base_dev_uart+0x30>
20000ab4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20000ab6:	8526                	mv	a0,s1
20000ab8:	49b2                	lw	s3,12(sp)
20000aba:	4942                	lw	s2,16(sp)
20000abc:	44d2                	lw	s1,20(sp)
20000abe:	4462                	lw	s0,24(sp)
20000ac0:	40f2                	lw	ra,28(sp)
20000ac2:	6105                	addi	sp,sp,32
20000ac4:	8082                	ret

20000ac6 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20000ac6:	7179                	addi	sp,sp,-48
20000ac8:	c606                	sw	ra,12(sp)
20000aca:	d646                	sw	a7,44(sp)
20000acc:	d442                	sw	a6,40(sp)
20000ace:	d23e                	sw	a5,36(sp)
20000ad0:	d03a                	sw	a4,32(sp)
20000ad2:	ce36                	sw	a3,28(sp)
20000ad4:	cc32                	sw	a2,24(sp)
20000ad6:	ca2e                	sw	a1,20(sp)
20000ad8:	effff597          	auipc	a1,0xeffff
20000adc:	52c58593          	addi	a1,a1,1324 # 10000004 <base_stdout>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20000ae0:	4190                	lw	a2,0(a1)
20000ae2:	41cc                	lw	a1,4(a1)
20000ae4:	872a                	mv	a4,a0
20000ae6:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20000ae8:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000aea:	8532                	mv	a0,a2
20000aec:	863a                	mv	a2,a4
20000aee:	200d                	jal	20000b10 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20000af0:	40b2                	lw	ra,12(sp)
20000af2:	6145                	addi	sp,sp,48
20000af4:	8082                	ret

20000af6 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20000af6:	effff697          	auipc	a3,0xeffff
20000afa:	50e68693          	addi	a3,a3,1294 # 10000004 <base_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20000afe:	4290                	lw	a2,0(a3)
20000b00:	42d4                	lw	a3,4(a3)
20000b02:	872e                	mv	a4,a1
20000b04:	87aa                	mv	a5,a0
20000b06:	8532                	mv	a0,a2
20000b08:	85b6                	mv	a1,a3
20000b0a:	863e                	mv	a2,a5
20000b0c:	86ba                	mv	a3,a4
20000b0e:	a009                	j	20000b10 <base_vfprintf>

20000b10 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20000b10:	7139                	addi	sp,sp,-64
20000b12:	de06                	sw	ra,60(sp)
20000b14:	dc22                	sw	s0,56(sp)
20000b16:	da26                	sw	s1,52(sp)
20000b18:	d84a                	sw	s2,48(sp)
20000b1a:	d64e                	sw	s3,44(sp)
20000b1c:	d452                	sw	s4,40(sp)
20000b1e:	d256                	sw	s5,36(sp)
20000b20:	d05a                	sw	s6,32(sp)
20000b22:	ce5e                	sw	s7,28(sp)
20000b24:	cc62                	sw	s8,24(sp)
20000b26:	ca66                	sw	s9,20(sp)
20000b28:	c86a                	sw	s10,16(sp)
20000b2a:	c66e                	sw	s11,12(sp)
20000b2c:	8bb2                	mv	s7,a2
20000b2e:	892a                	mv	s2,a0
20000b30:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20000b32:	c199                	beqz	a1,20000b38 <base_vfprintf+0x28>
20000b34:	89ae                	mv	s3,a1
20000b36:	a029                	j	20000b40 <base_vfprintf+0x30>
20000b38:	00000997          	auipc	s3,0x0
20000b3c:	f3498993          	addi	s3,s3,-204 # 20000a6c <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20000b40:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20000b42:	000bc503          	lbu	a0,0(s7)
20000b46:	28050f63          	beqz	a0,20000de4 <base_vfprintf+0x2d4>
20000b4a:	4b01                	li	s6,0
20000b4c:	02500c13          	li	s8,37
20000b50:	4ca5                	li	s9,9
20000b52:	02000d13          	li	s10,32
20000b56:	06800d93          	li	s11,104
20000b5a:	00002a17          	auipc	s4,0x2
20000b5e:	d1aa0a13          	addi	s4,s4,-742 # 20002874 <__clz_tab+0x628>
20000b62:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20000b64:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
20000b66:	0ff57413          	andi	s0,a0,255
20000b6a:	01840963          	beq	s0,s8,20000b7c <base_vfprintf+0x6c>
20000b6e:	c419                	beqz	s0,20000b7c <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20000b70:	009b8533          	add	a0,s7,s1
20000b74:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20000b78:	0485                	addi	s1,s1,1
20000b7a:	b7f5                	j	20000b66 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20000b7c:	c491                	beqz	s1,20000b88 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20000b7e:	854a                	mv	a0,s2
20000b80:	85de                	mv	a1,s7
20000b82:	8626                	mv	a2,s1
20000b84:	9982                	jalr	s3
20000b86:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20000b88:	24040f63          	beqz	s0,20000de6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000b8c:	009b8633          	add	a2,s7,s1
20000b90:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000b94:	22050f63          	beqz	a0,20000dd2 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000b98:	fd050593          	addi	a1,a0,-48
20000b9c:	0ff5f593          	andi	a1,a1,255
20000ba0:	00bcf863          	bgeu	s9,a1,20000bb0 <base_vfprintf+0xa0>
20000ba4:	4401                	li	s0,0
20000ba6:	4581                	li	a1,0
20000ba8:	4605                	li	a2,1
20000baa:	028d7f63          	bgeu	s10,s0,20000be8 <base_vfprintf+0xd8>
20000bae:	aca1                	j	20000e06 <base_vfprintf+0x2f6>
20000bb0:	4581                	li	a1,0
20000bb2:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000bb4:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20000bb6:	00b606b3          	add	a3,a2,a1
20000bba:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20000bbe:	20068a63          	beqz	a3,20000dd2 <base_vfprintf+0x2c2>
20000bc2:	0ff57513          	andi	a0,a0,255
20000bc6:	03540733          	mul	a4,s0,s5
20000bca:	953a                	add	a0,a0,a4
20000bcc:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20000bd0:	fd068513          	addi	a0,a3,-48
20000bd4:	0ff57713          	andi	a4,a0,255
20000bd8:	0585                	addi	a1,a1,1
20000bda:	8536                	mv	a0,a3
20000bdc:	fcecfde3          	bgeu	s9,a4,20000bb6 <base_vfprintf+0xa6>
20000be0:	4601                	li	a2,0
20000be2:	8536                	mv	a0,a3
20000be4:	228d6163          	bltu	s10,s0,20000e06 <base_vfprintf+0x2f6>
20000be8:	008036b3          	snez	a3,s0
20000bec:	8e55                	or	a2,a2,a3
20000bee:	20060c63          	beqz	a2,20000e06 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000bf2:	95de                	add	a1,a1,s7
20000bf4:	95a6                	add	a1,a1,s1
20000bf6:	00258b93          	addi	s7,a1,2
20000bfa:	02adce63          	blt	s11,a0,20000c36 <base_vfprintf+0x126>
20000bfe:	06100593          	li	a1,97
20000c02:	06a5d563          	bge	a1,a0,20000c6c <base_vfprintf+0x15c>
20000c06:	06300593          	li	a1,99
20000c0a:	0ca5cb63          	blt	a1,a0,20000ce0 <base_vfprintf+0x1d0>
20000c0e:	06200593          	li	a1,98
20000c12:	14b50a63          	beq	a0,a1,20000d66 <base_vfprintf+0x256>
20000c16:	06300593          	li	a1,99
20000c1a:	18b51f63          	bne	a0,a1,20000db8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20000c1e:	4502                	lw	a0,0(sp)
20000c20:	00450593          	addi	a1,a0,4
20000c24:	c02e                	sw	a1,0(sp)
20000c26:	4108                	lw	a0,0(a0)
20000c28:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20000c2c:	4605                	li	a2,1
20000c2e:	854a                	mv	a0,s2
20000c30:	00b10593          	addi	a1,sp,11
20000c34:	aa41                	j	20000dc4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000c36:	07200593          	li	a1,114
20000c3a:	04a5dd63          	bge	a1,a0,20000c94 <base_vfprintf+0x184>
20000c3e:	07700593          	li	a1,119
20000c42:	0aa5c663          	blt	a1,a0,20000cee <base_vfprintf+0x1de>
20000c46:	07300593          	li	a1,115
20000c4a:	12b50963          	beq	a0,a1,20000d7c <base_vfprintf+0x26c>
20000c4e:	07500593          	li	a1,117
20000c52:	16b51363          	bne	a0,a1,20000db8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
20000c56:	4502                	lw	a0,0(sp)
20000c58:	00450593          	addi	a1,a0,4
20000c5c:	c02e                	sw	a1,0(sp)
20000c5e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000c60:	00001797          	auipc	a5,0x1
20000c64:	4b978793          	addi	a5,a5,1209 # 20002119 <kDigitsLow>
20000c68:	4729                	li	a4,10
20000c6a:	a8cd                	j	20000d5c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000c6c:	13850763          	beq	a0,s8,20000d9a <base_vfprintf+0x28a>
20000c70:	04800593          	li	a1,72
20000c74:	00b50663          	beq	a0,a1,20000c80 <base_vfprintf+0x170>
20000c78:	05800593          	li	a1,88
20000c7c:	12b51e63          	bne	a0,a1,20000db8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20000c80:	4502                	lw	a0,0(sp)
20000c82:	00450593          	addi	a1,a0,4
20000c86:	c02e                	sw	a1,0(sp)
20000c88:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20000c8a:	00001797          	auipc	a5,0x1
20000c8e:	49f78793          	addi	a5,a5,1183 # 20002129 <kDigitsHigh>
20000c92:	a0e1                	j	20000d5a <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000c94:	06900593          	li	a1,105
20000c98:	06b50d63          	beq	a0,a1,20000d12 <base_vfprintf+0x202>
20000c9c:	06f00593          	li	a1,111
20000ca0:	10b50163          	beq	a0,a1,20000da2 <base_vfprintf+0x292>
20000ca4:	07000593          	li	a1,112
20000ca8:	10b51863          	bne	a0,a1,20000db8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000cac:	00002597          	auipc	a1,0x2
20000cb0:	bcc58593          	addi	a1,a1,-1076 # 20002878 <__clz_tab+0x62c>
20000cb4:	4609                	li	a2,2
20000cb6:	854a                	mv	a0,s2
20000cb8:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20000cba:	4582                	lw	a1,0(sp)
20000cbc:	00458613          	addi	a2,a1,4
20000cc0:	c032                	sw	a2,0(sp)
20000cc2:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20000cc4:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20000cc8:	00001797          	auipc	a5,0x1
20000ccc:	45178793          	addi	a5,a5,1105 # 20002119 <kDigitsLow>
20000cd0:	46a1                	li	a3,8
20000cd2:	4741                	li	a4,16
20000cd4:	854a                	mv	a0,s2
20000cd6:	85ce                	mv	a1,s3
20000cd8:	2a5d                	jal	20000e8e <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20000cda:	00a40b33          	add	s6,s0,a0
20000cde:	a0ed                	j	20000dc8 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20000ce0:	06400593          	li	a1,100
20000ce4:	02b50763          	beq	a0,a1,20000d12 <base_vfprintf+0x202>
20000ce8:	07b50063          	beq	a0,s11,20000d48 <base_vfprintf+0x238>
20000cec:	a0f1                	j	20000db8 <base_vfprintf+0x2a8>
20000cee:	07800593          	li	a1,120
20000cf2:	04b50b63          	beq	a0,a1,20000d48 <base_vfprintf+0x238>
20000cf6:	07a00593          	li	a1,122
20000cfa:	0ab51f63          	bne	a0,a1,20000db8 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20000cfe:	4502                	lw	a0,0(sp)
20000d00:	00450593          	addi	a1,a0,4
20000d04:	c02e                	sw	a1,0(sp)
20000d06:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20000d08:	00850593          	addi	a1,a0,8
20000d0c:	c02e                	sw	a1,0(sp)
20000d0e:	414c                	lw	a1,4(a0)
20000d10:	a84d                	j	20000dc2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20000d12:	4502                	lw	a0,0(sp)
20000d14:	00450593          	addi	a1,a0,4
20000d18:	c02e                	sw	a1,0(sp)
20000d1a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20000d1c:	557d                	li	a0,-1
20000d1e:	00954c63          	blt	a0,s1,20000d36 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
20000d22:	00002597          	auipc	a1,0x2
20000d26:	b5458593          	addi	a1,a1,-1196 # 20002876 <__clz_tab+0x62a>
20000d2a:	4605                	li	a2,1
20000d2c:	854a                	mv	a0,s2
20000d2e:	9982                	jalr	s3
20000d30:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20000d32:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20000d36:	00001797          	auipc	a5,0x1
20000d3a:	3e378793          	addi	a5,a5,995 # 20002119 <kDigitsLow>
20000d3e:	4729                	li	a4,10
20000d40:	854a                	mv	a0,s2
20000d42:	85ce                	mv	a1,s3
20000d44:	8626                	mv	a2,s1
20000d46:	a829                	j	20000d60 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20000d48:	4502                	lw	a0,0(sp)
20000d4a:	00450593          	addi	a1,a0,4
20000d4e:	c02e                	sw	a1,0(sp)
20000d50:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20000d52:	00001797          	auipc	a5,0x1
20000d56:	3c778793          	addi	a5,a5,967 # 20002119 <kDigitsLow>
20000d5a:	4741                	li	a4,16
20000d5c:	854a                	mv	a0,s2
20000d5e:	85ce                	mv	a1,s3
20000d60:	86a2                	mv	a3,s0
20000d62:	2235                	jal	20000e8e <write_digits>
20000d64:	a08d                	j	20000dc6 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
20000d66:	4502                	lw	a0,0(sp)
20000d68:	00450593          	addi	a1,a0,4
20000d6c:	c02e                	sw	a1,0(sp)
20000d6e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20000d70:	00001797          	auipc	a5,0x1
20000d74:	3a978793          	addi	a5,a5,937 # 20002119 <kDigitsLow>
20000d78:	4709                	li	a4,2
20000d7a:	b7cd                	j	20000d5c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20000d7c:	4502                	lw	a0,0(sp)
20000d7e:	00450593          	addi	a1,a0,4
20000d82:	c02e                	sw	a1,0(sp)
20000d84:	410c                	lw	a1,0(a0)
20000d86:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000d88:	00a58633          	add	a2,a1,a0
20000d8c:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20000d90:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20000d92:	fa7d                	bnez	a2,20000d88 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20000d94:	fff50613          	addi	a2,a0,-1
20000d98:	a02d                	j	20000dc2 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20000d9a:	4605                	li	a2,1
20000d9c:	854a                	mv	a0,s2
20000d9e:	85d2                	mv	a1,s4
20000da0:	a015                	j	20000dc4 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20000da2:	4502                	lw	a0,0(sp)
20000da4:	00450593          	addi	a1,a0,4
20000da8:	c02e                	sw	a1,0(sp)
20000daa:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20000dac:	00001797          	auipc	a5,0x1
20000db0:	36d78793          	addi	a5,a5,877 # 20002119 <kDigitsLow>
20000db4:	4721                	li	a4,8
20000db6:	b75d                	j	20000d5c <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20000db8:	00001597          	auipc	a1,0x1
20000dbc:	38158593          	addi	a1,a1,897 # 20002139 <kUnknownSpec>
20000dc0:	463d                	li	a2,15
20000dc2:	854a                	mv	a0,s2
20000dc4:	9982                	jalr	s3
20000dc6:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20000dc8:	000bc503          	lbu	a0,0(s7)
20000dcc:	d8051ce3          	bnez	a0,20000b64 <base_vfprintf+0x54>
20000dd0:	a819                	j	20000de6 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20000dd2:	00001597          	auipc	a1,0x1
20000dd6:	32a58593          	addi	a1,a1,810 # 200020fc <kErrorNul>
20000dda:	4645                	li	a2,17
20000ddc:	854a                	mv	a0,s2
20000dde:	9982                	jalr	s3
20000de0:	9b2a                	add	s6,s6,a0
20000de2:	a011                	j	20000de6 <base_vfprintf+0x2d6>
20000de4:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20000de6:	855a                	mv	a0,s6
20000de8:	4db2                	lw	s11,12(sp)
20000dea:	4d42                	lw	s10,16(sp)
20000dec:	4cd2                	lw	s9,20(sp)
20000dee:	4c62                	lw	s8,24(sp)
20000df0:	4bf2                	lw	s7,28(sp)
20000df2:	5b02                	lw	s6,32(sp)
20000df4:	5a92                	lw	s5,36(sp)
20000df6:	5a22                	lw	s4,40(sp)
20000df8:	59b2                	lw	s3,44(sp)
20000dfa:	5942                	lw	s2,48(sp)
20000dfc:	54d2                	lw	s1,52(sp)
20000dfe:	5462                	lw	s0,56(sp)
20000e00:	50f2                	lw	ra,60(sp)
20000e02:	6121                	addi	sp,sp,64
20000e04:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20000e06:	00001597          	auipc	a1,0x1
20000e0a:	30758593          	addi	a1,a1,775 # 2000210d <kErrorTooWide>
20000e0e:	4631                	li	a2,12
20000e10:	b7f1                	j	20000ddc <base_vfprintf+0x2cc>

20000e12 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20000e12:	7179                	addi	sp,sp,-48
20000e14:	ca06                	sw	ra,20(sp)
20000e16:	d646                	sw	a7,44(sp)
20000e18:	d442                	sw	a6,40(sp)
20000e1a:	d23e                	sw	a5,36(sp)
20000e1c:	d03a                	sw	a4,32(sp)
20000e1e:	ce36                	sw	a3,28(sp)
20000e20:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20000e22:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20000e24:	c42a                	sw	a0,8(sp)
20000e26:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20000e28:	00000597          	auipc	a1,0x0
20000e2c:	01258593          	addi	a1,a1,18 # 20000e3a <snprintf_sink>
20000e30:	0028                	addi	a0,sp,8
20000e32:	39f9                	jal	20000b10 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20000e34:	40d2                	lw	ra,20(sp)
20000e36:	6145                	addi	sp,sp,48
20000e38:	8082                	ret

20000e3a <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20000e3a:	1141                	addi	sp,sp,-16
20000e3c:	c606                	sw	ra,12(sp)
20000e3e:	c422                	sw	s0,8(sp)
20000e40:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20000e42:	4140                	lw	s0,4(a0)
20000e44:	c00d                	beqz	s0,20000e66 <snprintf_sink+0x2c>
20000e46:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20000e48:	00c46363          	bltu	s0,a2,20000e4e <snprintf_sink+0x14>
20000e4c:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20000e4e:	4088                	lw	a0,0(s1)
20000e50:	8622                	mv	a2,s0
20000e52:	1b3000ef          	jal	ra,20001804 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20000e56:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20000e58:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20000e5a:	9522                	add	a0,a0,s0
20000e5c:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20000e5e:	40858533          	sub	a0,a1,s0
20000e62:	c0c8                	sw	a0,4(s1)
20000e64:	a011                	j	20000e68 <snprintf_sink+0x2e>
20000e66:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20000e68:	8522                	mv	a0,s0
20000e6a:	4492                	lw	s1,4(sp)
20000e6c:	4422                	lw	s0,8(sp)
20000e6e:	40b2                	lw	ra,12(sp)
20000e70:	0141                	addi	sp,sp,16
20000e72:	8082                	ret

20000e74 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20000e74:	1101                	addi	sp,sp,-32
20000e76:	c206                	sw	ra,4(sp)
20000e78:	ce46                	sw	a7,28(sp)
20000e7a:	cc42                	sw	a6,24(sp)
20000e7c:	ca3e                	sw	a5,20(sp)
20000e7e:	c83a                	sw	a4,16(sp)
20000e80:	c636                	sw	a3,12(sp)
20000e82:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20000e84:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20000e86:	3169                	jal	20000b10 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20000e88:	4092                	lw	ra,4(sp)
20000e8a:	6105                	addi	sp,sp,32
20000e8c:	8082                	ret

20000e8e <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20000e8e:	7139                	addi	sp,sp,-64
20000e90:	de06                	sw	ra,60(sp)
20000e92:	dc22                	sw	s0,56(sp)
20000e94:	da26                	sw	s1,52(sp)
20000e96:	d84a                	sw	s2,48(sp)
20000e98:	d64e                	sw	s3,44(sp)
20000e9a:	892e                	mv	s2,a1
20000e9c:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000e9e:	ca05                	beqz	a2,20000ece <write_digits+0x40>
20000ea0:	4501                	li	a0,0
20000ea2:	02b10813          	addi	a6,sp,43
20000ea6:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20000ea8:	02e65633          	divu	a2,a2,a4
20000eac:	02e60433          	mul	s0,a2,a4
20000eb0:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20000eb4:	943e                	add	s0,s0,a5
20000eb6:	00040403          	lb	s0,0(s0)
20000eba:	00a805b3          	add	a1,a6,a0
20000ebe:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20000ec2:	157d                	addi	a0,a0,-1
20000ec4:	fee4f1e3          	bgeu	s1,a4,20000ea6 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20000ec8:	40a00633          	neg	a2,a0
20000ecc:	a011                	j	20000ed0 <write_digits+0x42>
20000ece:	4601                	li	a2,0
20000ed0:	4485                	li	s1,1
20000ed2:	c291                	beqz	a3,20000ed6 <write_digits+0x48>
20000ed4:	84b6                	mv	s1,a3
20000ed6:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20000eda:	00a4e463          	bltu	s1,a0,20000ee2 <write_digits+0x54>
20000ede:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000ee2:	02967063          	bgeu	a2,s1,20000f02 <write_digits+0x74>
20000ee6:	0068                	addi	a0,sp,12
20000ee8:	8d05                	sub	a0,a0,s1
20000eea:	02050513          	addi	a0,a0,32
20000eee:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20000ef2:	03000593          	li	a1,48
20000ef6:	8622                	mv	a2,s0
20000ef8:	123000ef          	jal	ra,2000181a <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20000efc:	147d                	addi	s0,s0,-1
20000efe:	fc7d                	bnez	s0,20000efc <write_digits+0x6e>
20000f00:	8626                	mv	a2,s1
20000f02:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20000f04:	8d11                	sub	a0,a0,a2
20000f06:	02050593          	addi	a1,a0,32
20000f0a:	854e                	mv	a0,s3
20000f0c:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20000f0e:	59b2                	lw	s3,44(sp)
20000f10:	5942                	lw	s2,48(sp)
20000f12:	54d2                	lw	s1,52(sp)
20000f14:	5462                	lw	s0,56(sp)
20000f16:	50f2                	lw	ra,60(sp)
20000f18:	6121                	addi	sp,sp,64
20000f1a:	8082                	ret

20000f1c <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20000f1c:	c581                	beqz	a1,20000f24 <dif_uart_init+0x8>
20000f1e:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20000f20:	c188                	sw	a0,0(a1)
20000f22:	a011                	j	20000f26 <dif_uart_init+0xa>
20000f24:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20000f26:	8532                	mv	a0,a2
20000f28:	8082                	ret

20000f2a <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20000f2a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20000f2c:	c606                	sw	ra,12(sp)
20000f2e:	c422                	sw	s0,8(sp)
20000f30:	c226                	sw	s1,4(sp)
20000f32:	c935                	beqz	a0,20000fa6 <dif_uart_configure+0x7c>
20000f34:	84ae                	mv	s1,a1
20000f36:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20000f38:	418c                	lw	a1,0(a1)
20000f3a:	450d                	li	a0,3
20000f3c:	c5b5                	beqz	a1,20000fa8 <dif_uart_configure+0x7e>
20000f3e:	40d0                	lw	a2,4(s1)
20000f40:	c625                	beqz	a2,20000fa8 <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20000f42:	01459513          	slli	a0,a1,0x14
20000f46:	81b1                	srli	a1,a1,0xc
20000f48:	4681                	li	a3,0
20000f4a:	1a3000ef          	jal	ra,200018ec <__udivdi3>
20000f4e:	6641                	lui	a2,0x10
20000f50:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20000f52:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20000f54:	8d31                	xor	a0,a0,a2
20000f56:	8dc9                	or	a1,a1,a0
20000f58:	4511                	li	a0,4
20000f5a:	e5b9                	bnez	a1,20000fa8 <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20000f5c:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f5e:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20000f62:	4008                	lw	a0,0(s0)
20000f64:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f66:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20000f68:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f6a:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20000f6e:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f70:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000f74:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f76:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20000f7a:	4008                	lw	a0,0(s0)
20000f7c:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f7e:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20000f80:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000f82:	01061513          	slli	a0,a2,0x10
20000f86:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20000f8a:	c291                	beqz	a3,20000f8e <dif_uart_configure+0x64>
20000f8c:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20000f8e:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20000f90:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20000f92:	e219                	bnez	a2,20000f98 <dif_uart_configure+0x6e>
20000f94:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20000f98:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f9a:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20000f9c:	400c                	lw	a1,0(s0)
20000f9e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fa0:	0005a223          	sw	zero,4(a1)
20000fa4:	a011                	j	20000fa8 <dif_uart_configure+0x7e>
20000fa6:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20000fa8:	4492                	lw	s1,4(sp)
20000faa:	4422                	lw	s0,8(sp)
20000fac:	40b2                	lw	ra,12(sp)
20000fae:	0141                	addi	sp,sp,16
20000fb0:	8082                	ret

20000fb2 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20000fb2:	1141                	addi	sp,sp,-16
20000fb4:	c606                	sw	ra,12(sp)
20000fb6:	c422                	sw	s0,8(sp)
20000fb8:	c226                	sw	s1,4(sp)
20000fba:	84aa                	mv	s1,a0
20000fbc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20000fbe:	c09d                	beqz	s1,20000fe4 <dif_uart_irq_is_pending+0x32>
20000fc0:	8432                	mv	s0,a2
20000fc2:	c20d                	beqz	a2,20000fe4 <dif_uart_irq_is_pending+0x32>
20000fc4:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20000fc6:	852e                	mv	a0,a1
20000fc8:	85b2                	mv	a1,a2
20000fca:	2015                	jal	20000fee <uart_irq_offset_get>
20000fcc:	85aa                	mv	a1,a0
20000fce:	4505                	li	a0,1
20000fd0:	c991                	beqz	a1,20000fe4 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20000fd2:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fd4:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20000fd6:	4602                	lw	a2,0(sp)
20000fd8:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000fda:	00c5d5b3          	srl	a1,a1,a2
20000fde:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20000fe0:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20000fe4:	4492                	lw	s1,4(sp)
20000fe6:	4422                	lw	s0,8(sp)
20000fe8:	40b2                	lw	ra,12(sp)
20000fea:	0141                	addi	sp,sp,16
20000fec:	8082                	ret

20000fee <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20000fee:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20000ff0:	00a66563          	bltu	a2,a0,20000ffa <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20000ff4:	c188                	sw	a0,0(a1)
20000ff6:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20000ff8:	8082                	ret
20000ffa:	4501                	li	a0,0
20000ffc:	8082                	ret

20000ffe <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20000ffe:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20001000:	c606                	sw	ra,12(sp)
20001002:	c422                	sw	s0,8(sp)
20001004:	c10d                	beqz	a0,20001026 <dif_uart_irq_acknowledge+0x28>
20001006:	842a                	mv	s0,a0
20001008:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000100a:	852e                	mv	a0,a1
2000100c:	85b2                	mv	a1,a2
2000100e:	37c5                	jal	20000fee <uart_irq_offset_get>
20001010:	85aa                	mv	a1,a0
20001012:	4505                	li	a0,1
20001014:	c991                	beqz	a1,20001028 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001016:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001018:	4010                	lw	a2,0(s0)
2000101a:	4501                	li	a0,0
2000101c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000101e:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001022:	c20c                	sw	a1,0(a2)
20001024:	a011                	j	20001028 <dif_uart_irq_acknowledge+0x2a>
20001026:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001028:	4422                	lw	s0,8(sp)
2000102a:	40b2                	lw	ra,12(sp)
2000102c:	0141                	addi	sp,sp,16
2000102e:	8082                	ret

20001030 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001030:	c911                	beqz	a0,20001044 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001032:	c581                	beqz	a1,2000103a <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001034:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001036:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001038:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000103a:	410c                	lw	a1,0(a0)
2000103c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000103e:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001042:	8082                	ret
20001044:	4509                	li	a0,2
20001046:	8082                	ret

20001048 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20001048:	862a                	mv	a2,a0
2000104a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
2000104c:	c611                	beqz	a2,20001058 <dif_uart_irq_restore_all+0x10>
2000104e:	c589                	beqz	a1,20001058 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001050:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001052:	4210                	lw	a2,0(a2)
20001054:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001056:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20001058:	8082                	ret

2000105a <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
2000105a:	1141                	addi	sp,sp,-16
2000105c:	c606                	sw	ra,12(sp)
2000105e:	c422                	sw	s0,8(sp)
20001060:	c226                	sw	s1,4(sp)
20001062:	84aa                	mv	s1,a0
20001064:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20001066:	c485                	beqz	s1,2000108e <dif_uart_irq_get_enabled+0x34>
20001068:	8432                	mv	s0,a2
2000106a:	c215                	beqz	a2,2000108e <dif_uart_irq_get_enabled+0x34>
2000106c:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000106e:	852e                	mv	a0,a1
20001070:	85b2                	mv	a1,a2
20001072:	3fb5                	jal	20000fee <uart_irq_offset_get>
20001074:	85aa                	mv	a1,a0
20001076:	4505                	li	a0,1
20001078:	c999                	beqz	a1,2000108e <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000107a:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000107c:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
2000107e:	4602                	lw	a2,0(sp)
20001080:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001082:	00c5d5b3          	srl	a1,a1,a2
20001086:	8985                	andi	a1,a1,1
20001088:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
2000108c:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
2000108e:	4492                	lw	s1,4(sp)
20001090:	4422                	lw	s0,8(sp)
20001092:	40b2                	lw	ra,12(sp)
20001094:	0141                	addi	sp,sp,16
20001096:	8082                	ret

20001098 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20001098:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
2000109a:	c606                	sw	ra,12(sp)
2000109c:	c422                	sw	s0,8(sp)
2000109e:	c226                	sw	s1,4(sp)
200010a0:	c91d                	beqz	a0,200010d6 <dif_uart_irq_set_enabled+0x3e>
200010a2:	8432                	mv	s0,a2
200010a4:	84aa                	mv	s1,a0
200010a6:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200010a8:	852e                	mv	a0,a1
200010aa:	85b2                	mv	a1,a2
200010ac:	3789                	jal	20000fee <uart_irq_offset_get>
200010ae:	85aa                	mv	a1,a0
200010b0:	4505                	li	a0,1
200010b2:	c19d                	beqz	a1,200010d8 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200010b4:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200010b6:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
200010b8:	4682                	lw	a3,0(sp)
200010ba:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
200010bc:	00143713          	seqz	a4,s0
200010c0:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200010c2:	00d797b3          	sll	a5,a5,a3
200010c6:	fff7c793          	not	a5,a5
200010ca:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200010cc:	00d716b3          	sll	a3,a4,a3
200010d0:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200010d2:	c1d0                	sw	a2,4(a1)
200010d4:	a011                	j	200010d8 <dif_uart_irq_set_enabled+0x40>
200010d6:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200010d8:	4492                	lw	s1,4(sp)
200010da:	4422                	lw	s0,8(sp)
200010dc:	40b2                	lw	ra,12(sp)
200010de:	0141                	addi	sp,sp,16
200010e0:	8082                	ret

200010e2 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200010e2:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200010e4:	c606                	sw	ra,12(sp)
200010e6:	c422                	sw	s0,8(sp)
200010e8:	c10d                	beqz	a0,2000110a <dif_uart_irq_force+0x28>
200010ea:	842a                	mv	s0,a0
200010ec:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200010ee:	852e                	mv	a0,a1
200010f0:	85b2                	mv	a1,a2
200010f2:	3df5                	jal	20000fee <uart_irq_offset_get>
200010f4:	85aa                	mv	a1,a0
200010f6:	4505                	li	a0,1
200010f8:	c991                	beqz	a1,2000110c <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200010fa:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
200010fc:	4010                	lw	a2,0(s0)
200010fe:	4501                	li	a0,0
20001100:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001102:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001106:	c60c                	sw	a1,8(a2)
20001108:	a011                	j	2000110c <dif_uart_irq_force+0x2a>
2000110a:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
2000110c:	4422                	lw	s0,8(sp)
2000110e:	40b2                	lw	ra,12(sp)
20001110:	0141                	addi	sp,sp,16
20001112:	8082                	ret

20001114 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001114:	cd09                	beqz	a0,2000112e <dif_uart_watermark_rx_set+0x1a>
20001116:	4691                	li	a3,4
20001118:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000111a:	00b6eb63          	bltu	a3,a1,20001130 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000111e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001120:	4d54                	lw	a3,28(a0)
20001122:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20001124:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001126:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001128:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000112a:	cd4c                	sw	a1,28(a0)
2000112c:	a011                	j	20001130 <dif_uart_watermark_rx_set+0x1c>
2000112e:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001130:	8532                	mv	a0,a2
20001132:	8082                	ret

20001134 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001134:	cd11                	beqz	a0,20001150 <dif_uart_watermark_tx_set+0x1c>
20001136:	468d                	li	a3,3
20001138:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000113a:	00b6ec63          	bltu	a3,a1,20001152 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000113e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001140:	4d54                	lw	a3,28(a0)
20001142:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20001144:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001146:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000114a:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000114c:	cd4c                	sw	a1,28(a0)
2000114e:	a011                	j	20001152 <dif_uart_watermark_tx_set+0x1e>
20001150:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001152:	8532                	mv	a0,a2
20001154:	8082                	ret

20001156 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001156:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20001158:	c51d                	beqz	a0,20001186 <dif_uart_bytes_send+0x30>
2000115a:	c595                	beqz	a1,20001186 <dif_uart_bytes_send+0x30>
2000115c:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000115e:	c20d                	beqz	a2,20001180 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001160:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001164:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001168:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000116a:	eb19                	bnez	a4,20001180 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
2000116c:	00f58733          	add	a4,a1,a5
20001170:	00074703          	lbu	a4,0(a4) # ff1000 <test_status_set.kLogFields.2+0xfe0e0c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001174:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001176:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000117a:	fef613e3          	bne	a2,a5,20001160 <dif_uart_bytes_send+0xa>
2000117e:	87b2                	mv	a5,a2
20001180:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001182:	c291                	beqz	a3,20001186 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001184:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001186:	853a                	mv	a0,a4
20001188:	8082                	ret

2000118a <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
2000118a:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
2000118c:	c515                	beqz	a0,200011b8 <dif_uart_bytes_receive+0x2e>
2000118e:	c60d                	beqz	a2,200011b8 <dif_uart_bytes_receive+0x2e>
20001190:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001192:	cd99                	beqz	a1,200011b0 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001194:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001196:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001198:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000119c:	eb91                	bnez	a5,200011b0 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000119e:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200011a0:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
200011a4:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200011a6:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200011aa:	ff0595e3          	bne	a1,a6,20001194 <dif_uart_bytes_receive+0xa>
200011ae:	882e                	mv	a6,a1
200011b0:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
200011b2:	c299                	beqz	a3,200011b8 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
200011b4:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
200011b8:	853a                	mv	a0,a4
200011ba:	8082                	ret

200011bc <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
200011bc:	cd19                	beqz	a0,200011da <dif_uart_byte_send_polled+0x1e>
200011be:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011c0:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011c2:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
200011c4:	fef5                	bnez	a3,200011c0 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011c6:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011c8:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200011ca:	e299                	bnez	a3,200011d0 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200011cc:	ce0c                	sw	a1,24(a2)
200011ce:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011d0:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011d2:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200011d4:	dd75                	beqz	a0,200011d0 <dif_uart_byte_send_polled+0x14>
200011d6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
200011d8:	8082                	ret
200011da:	4509                	li	a0,2
200011dc:	8082                	ret

200011de <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
200011de:	862a                	mv	a2,a0
200011e0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
200011e2:	c205                	beqz	a2,20001202 <dif_uart_byte_receive_polled+0x24>
200011e4:	cd99                	beqz	a1,20001202 <dif_uart_byte_receive_polled+0x24>
200011e6:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011e8:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011ea:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200011ee:	fd6d                	bnez	a0,200011e8 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011f0:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200011f2:	02057693          	andi	a3,a0,32
200011f6:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200011f8:	e689                	bnez	a3,20001202 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200011fa:	4a50                	lw	a2,20(a2)
200011fc:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200011fe:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001202:	8082                	ret

20001204 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001204:	862a                	mv	a2,a0
20001206:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001208:	ca09                	beqz	a2,2000121a <dif_uart_rx_bytes_available+0x16>
2000120a:	c981                	beqz	a1,2000121a <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000120c:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000120e:	5110                	lw	a2,32(a0)
20001210:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001212:	8241                	srli	a2,a2,0x10
20001214:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001218:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
2000121a:	8082                	ret

2000121c <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000121c:	862a                	mv	a2,a0
2000121e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001220:	ce01                	beqz	a2,20001238 <dif_uart_tx_bytes_available+0x1c>
20001222:	c999                	beqz	a1,20001238 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001224:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001226:	5110                	lw	a2,32(a0)
20001228:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
2000122a:	03f67613          	andi	a2,a2,63
2000122e:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001232:	40c68633          	sub	a2,a3,a2
20001236:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001238:	8082                	ret

2000123a <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
2000123a:	c11d                	beqz	a0,20001260 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000123c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000123e:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001240:	ffd5f693          	andi	a3,a1,-3
20001244:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001248:	fff58713          	addi	a4,a1,-1
2000124c:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
2000124e:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001252:	00f77463          	bgeu	a4,a5,2000125a <dif_uart_fifo_reset+0x20>
20001256:	0025e593          	ori	a1,a1,2
2000125a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000125c:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
2000125e:	8082                	ret
20001260:	4509                	li	a0,2
20001262:	8082                	ret

20001264 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001264:	c515                	beqz	a0,20001290 <dif_uart_loopback_set+0x2c>
20001266:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20001268:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
2000126a:	0015b593          	seqz	a1,a1
2000126e:	4715                	li	a4,5
20001270:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001274:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001276:	00163613          	seqz	a2,a2
2000127a:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000127c:	00b797b3          	sll	a5,a5,a1
20001280:	fff7c793          	not	a5,a5
20001284:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001286:	00b615b3          	sll	a1,a2,a1
2000128a:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000128c:	c54c                	sw	a1,12(a0)
2000128e:	a011                	j	20001292 <dif_uart_loopback_set+0x2e>
20001290:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001292:	8536                	mv	a0,a3
20001294:	8082                	ret

20001296 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001296:	862a                	mv	a2,a0
20001298:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
2000129a:	ca11                	beqz	a2,200012ae <dif_uart_enable_rx_timeout+0x18>
2000129c:	0185d693          	srli	a3,a1,0x18
200012a0:	e699                	bnez	a3,200012ae <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200012a2:	4210                	lw	a2,0(a2)
200012a4:	4501                	li	a0,0
200012a6:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200012aa:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012ac:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
200012ae:	8082                	ret

200012b0 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
200012b0:	c511                	beqz	a0,200012bc <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
200012b2:	410c                	lw	a1,0(a0)
200012b4:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012b6:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
200012ba:	8082                	ret
200012bc:	4509                	li	a0,2
200012be:	8082                	ret

200012c0 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
200012c0:	86aa                	mv	a3,a0
200012c2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
200012c4:	ce99                	beqz	a3,200012e2 <dif_uart_get_rx_timeout+0x22>
200012c6:	cd91                	beqz	a1,200012e2 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
200012c8:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012ca:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
200012cc:	fff6c513          	not	a0,a3
200012d0:	817d                	srli	a0,a0,0x1f
200012d2:	c188                	sw	a0,0(a1)
200012d4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
200012d6:	c611                	beqz	a2,200012e2 <dif_uart_get_rx_timeout+0x22>
200012d8:	010005b7          	lui	a1,0x1000
200012dc:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200012de:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
200012e0:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
200012e2:	8082                	ret

200012e4 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
200012e4:	10500073          	wfi
200012e8:	8082                	ret

200012ea <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
200012ea:	1141                	addi	sp,sp,-16
200012ec:	c606                	sw	ra,12(sp)
200012ee:	00001597          	auipc	a1,0x1
200012f2:	f3258593          	addi	a1,a1,-206 # 20002220 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
200012f6:	41d0                	lw	a2,4(a1)
200012f8:	4194                	lw	a3,0(a1)
200012fa:	02a605b3          	mul	a1,a2,a0
200012fe:	02a6b633          	mulhu	a2,a3,a0
20001302:	95b2                	add	a1,a1,a2
20001304:	02a68533          	mul	a0,a3,a0
20001308:	000f4637          	lui	a2,0xf4
2000130c:	24060613          	addi	a2,a2,576 # f4240 <test_status_set.kLogFields.2+0xe404c>
20001310:	4681                	li	a3,0
20001312:	2be9                	jal	200018ec <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20001314:	4801                	li	a6,0
20001316:	4701                	li	a4,0

20001318 <read0>:
20001318:	b8002873          	csrr	a6,mcycleh
2000131c:	b00026f3          	csrr	a3,mcycle
20001320:	b8002773          	csrr	a4,mcycleh
20001324:	fee81ae3          	bne	a6,a4,20001318 <read0>
20001328:	4781                	li	a5,0
2000132a:	4601                	li	a2,0

2000132c <read1>:
2000132c:	b80027f3          	csrr	a5,mcycleh
20001330:	b0002773          	csrr	a4,mcycle
20001334:	b8002673          	csrr	a2,mcycleh
20001338:	fec79ae3          	bne	a5,a2,2000132c <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
2000133c:	00d73633          	sltu	a2,a4,a3
20001340:	410787b3          	sub	a5,a5,a6
20001344:	8f91                	sub	a5,a5,a2
20001346:	00b78663          	beq	a5,a1,20001352 <read1+0x26>
2000134a:	00b7b733          	sltu	a4,a5,a1
2000134e:	ff69                	bnez	a4,20001328 <read0+0x10>
20001350:	a031                	j	2000135c <read1+0x30>
20001352:	40d70633          	sub	a2,a4,a3
20001356:	00a63733          	sltu	a4,a2,a0
2000135a:	f779                	bnez	a4,20001328 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
2000135c:	40b2                	lw	ra,12(sp)
2000135e:	0141                	addi	sp,sp,16
20001360:	8082                	ret

20001362 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20001362:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20001366:	bff5                	j	20001362 <abort>

20001368 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20001368:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000136a:	de06                	sw	ra,60(sp)
2000136c:	dc16                	sw	t0,56(sp)
2000136e:	da1a                	sw	t1,52(sp)
20001370:	d81e                	sw	t2,48(sp)
20001372:	d62a                	sw	a0,44(sp)
20001374:	d42e                	sw	a1,40(sp)
20001376:	d232                	sw	a2,36(sp)
20001378:	d036                	sw	a3,32(sp)
2000137a:	ce3a                	sw	a4,28(sp)
2000137c:	cc3e                	sw	a5,24(sp)
2000137e:	ca42                	sw	a6,20(sp)
20001380:	c846                	sw	a7,16(sp)
20001382:	c672                	sw	t3,12(sp)
20001384:	c476                	sw	t4,8(sp)
20001386:	c27a                	sw	t5,4(sp)
20001388:	c07e                	sw	t6,0(sp)
2000138a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000138e:	897d                	andi	a0,a0,31
20001390:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20001392:	00a5dc63          	bge	a1,a0,200013aa <handler_exception+0x42>
20001396:	4599                	li	a1,6
20001398:	02a5c263          	blt	a1,a0,200013bc <handler_exception+0x54>
2000139c:	458d                	li	a1,3
2000139e:	02b50c63          	beq	a0,a1,200013d6 <handler_exception+0x6e>
200013a2:	4595                	li	a1,5
200013a4:	02b50763          	beq	a0,a1,200013d2 <handler_exception+0x6a>
200013a8:	a015                	j	200013cc <handler_exception+0x64>
200013aa:	c115                	beqz	a0,200013ce <handler_exception+0x66>
200013ac:	4585                	li	a1,1
200013ae:	02b50063          	beq	a0,a1,200013ce <handler_exception+0x66>
200013b2:	4589                	li	a1,2
200013b4:	00b51c63          	bne	a0,a1,200013cc <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
200013b8:	208d                	jal	2000141a <handler_instr_ill_fault>
200013ba:	a839                	j	200013d8 <handler_exception+0x70>
200013bc:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
200013be:	00b50a63          	beq	a0,a1,200013d2 <handler_exception+0x6a>
200013c2:	45ad                	li	a1,11
200013c4:	00b51463          	bne	a0,a1,200013cc <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
200013c8:	2065                	jal	20001470 <handler_ecall>
200013ca:	a039                	j	200013d8 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
200013cc:	a001                	j	200013cc <handler_exception+0x64>
200013ce:	2805                	jal	200013fe <handler_instr_acc_fault>
200013d0:	a021                	j	200013d8 <handler_exception+0x70>
200013d2:	2049                	jal	20001454 <handler_lsu_fault>
200013d4:	a011                	j	200013d8 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
200013d6:	208d                	jal	20001438 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
200013d8:	4f82                	lw	t6,0(sp)
200013da:	4f12                	lw	t5,4(sp)
200013dc:	4ea2                	lw	t4,8(sp)
200013de:	4e32                	lw	t3,12(sp)
200013e0:	48c2                	lw	a7,16(sp)
200013e2:	4852                	lw	a6,20(sp)
200013e4:	47e2                	lw	a5,24(sp)
200013e6:	4772                	lw	a4,28(sp)
200013e8:	5682                	lw	a3,32(sp)
200013ea:	5612                	lw	a2,36(sp)
200013ec:	55a2                	lw	a1,40(sp)
200013ee:	5532                	lw	a0,44(sp)
200013f0:	53c2                	lw	t2,48(sp)
200013f2:	5352                	lw	t1,52(sp)
200013f4:	52e2                	lw	t0,56(sp)
200013f6:	50f2                	lw	ra,60(sp)
200013f8:	6121                	addi	sp,sp,64
200013fa:	30200073          	mret

200013fe <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
200013fe:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20001400:	de06                	sw	ra,60(sp)
20001402:	dc22                	sw	s0,56(sp)
20001404:	00001597          	auipc	a1,0x1
20001408:	4d758593          	addi	a1,a1,1239 # 200028db <__clz_tab+0x68f>
2000140c:	0040                	addi	s0,sp,4
2000140e:	03400613          	li	a2,52
20001412:	8522                	mv	a0,s0
20001414:	2ec5                	jal	20001804 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
20001416:	8522                	mv	a0,s0
20001418:	2a71                	jal	200015b4 <print_exc_msg>

2000141a <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
2000141a:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
2000141c:	c686                	sw	ra,76(sp)
2000141e:	c4a2                	sw	s0,72(sp)
20001420:	00001597          	auipc	a1,0x1
20001424:	4ef58593          	addi	a1,a1,1263 # 2000290f <__clz_tab+0x6c3>
20001428:	00d10413          	addi	s0,sp,13
2000142c:	03b00613          	li	a2,59
20001430:	8522                	mv	a0,s0
20001432:	2ec9                	jal	20001804 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20001434:	8522                	mv	a0,s0
20001436:	2abd                	jal	200015b4 <print_exc_msg>

20001438 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20001438:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
2000143a:	de06                	sw	ra,60(sp)
2000143c:	dc22                	sw	s0,56(sp)
2000143e:	00001597          	auipc	a1,0x1
20001442:	50c58593          	addi	a1,a1,1292 # 2000294a <__clz_tab+0x6fe>
20001446:	840a                	mv	s0,sp
20001448:	03800613          	li	a2,56
2000144c:	8522                	mv	a0,s0
2000144e:	2e5d                	jal	20001804 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20001450:	8522                	mv	a0,s0
20001452:	228d                	jal	200015b4 <print_exc_msg>

20001454 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20001454:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20001456:	de06                	sw	ra,60(sp)
20001458:	dc22                	sw	s0,56(sp)
2000145a:	00001597          	auipc	a1,0x1
2000145e:	52858593          	addi	a1,a1,1320 # 20002982 <__clz_tab+0x736>
20001462:	0020                	addi	s0,sp,8
20001464:	03000613          	li	a2,48
20001468:	8522                	mv	a0,s0
2000146a:	2e69                	jal	20001804 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000146c:	8522                	mv	a0,s0
2000146e:	2299                	jal	200015b4 <print_exc_msg>

20001470 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20001470:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20001472:	ce06                	sw	ra,28(sp)
20001474:	cc22                	sw	s0,24(sp)
20001476:	00001517          	auipc	a0,0x1
2000147a:	dd250513          	addi	a0,a0,-558 # 20002248 <kDeviceLogBypassUartAddress>
2000147e:	4108                	lw	a0,0(a0)
20001480:	c909                	beqz	a0,20001492 <handler_ecall+0x22>
20001482:	e000f517          	auipc	a0,0xe000f
20001486:	cfa50513          	addi	a0,a0,-774 # 1017c <handler_ecall.kLogFields>
2000148a:	4581                	li	a1,0
2000148c:	d92ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
20001490:	a821                	j	200014a8 <handler_ecall+0x38>
20001492:	00001597          	auipc	a1,0x1
20001496:	cf658593          	addi	a1,a1,-778 # 20002188 <kDifUartFifoSizeBytes+0x40>
2000149a:	840a                	mv	s0,sp
2000149c:	4651                	li	a2,20
2000149e:	8522                	mv	a0,s0
200014a0:	2695                	jal	20001804 <memcpy>
200014a2:	8522                	mv	a0,s0
200014a4:	cd0ff0ef          	jal	ra,20000974 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
200014a8:	a001                	j	200014a8 <handler_ecall+0x38>
200014aa:	0001                	nop

200014ac <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
200014ac:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
200014ae:	ce86                	sw	ra,92(sp)
200014b0:	cc96                	sw	t0,88(sp)
200014b2:	ca9a                	sw	t1,84(sp)
200014b4:	c89e                	sw	t2,80(sp)
200014b6:	c6a2                	sw	s0,76(sp)
200014b8:	c4aa                	sw	a0,72(sp)
200014ba:	c2ae                	sw	a1,68(sp)
200014bc:	c0b2                	sw	a2,64(sp)
200014be:	de36                	sw	a3,60(sp)
200014c0:	dc3a                	sw	a4,56(sp)
200014c2:	da3e                	sw	a5,52(sp)
200014c4:	d842                	sw	a6,48(sp)
200014c6:	d646                	sw	a7,44(sp)
200014c8:	d472                	sw	t3,40(sp)
200014ca:	d276                	sw	t4,36(sp)
200014cc:	d07a                	sw	t5,32(sp)
200014ce:	ce7e                	sw	t6,28(sp)
200014d0:	00001517          	auipc	a0,0x1
200014d4:	d7850513          	addi	a0,a0,-648 # 20002248 <kDeviceLogBypassUartAddress>
200014d8:	4108                	lw	a0,0(a0)
200014da:	c909                	beqz	a0,200014ec <handler_irq_software+0x40>
200014dc:	e000f517          	auipc	a0,0xe000f
200014e0:	c6450513          	addi	a0,a0,-924 # 10140 <handler_irq_software.kLogFields>
200014e4:	4581                	li	a1,0
200014e6:	d38ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
200014ea:	a821                	j	20001502 <handler_irq_software+0x56>
200014ec:	00001597          	auipc	a1,0x1
200014f0:	c6058593          	addi	a1,a1,-928 # 2000214c <kDifUartFifoSizeBytes+0x4>
200014f4:	0020                	addi	s0,sp,8
200014f6:	4651                	li	a2,20
200014f8:	8522                	mv	a0,s0
200014fa:	2629                	jal	20001804 <memcpy>
200014fc:	8522                	mv	a0,s0
200014fe:	c76ff0ef          	jal	ra,20000974 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
20001502:	a001                	j	20001502 <handler_irq_software+0x56>
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
20001504:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
20001506:	ce86                	sw	ra,92(sp)
20001508:	cc96                	sw	t0,88(sp)
2000150a:	ca9a                	sw	t1,84(sp)
2000150c:	c89e                	sw	t2,80(sp)
2000150e:	c6a2                	sw	s0,76(sp)
20001510:	c4aa                	sw	a0,72(sp)
20001512:	c2ae                	sw	a1,68(sp)
20001514:	c0b2                	sw	a2,64(sp)
20001516:	de36                	sw	a3,60(sp)
20001518:	dc3a                	sw	a4,56(sp)
2000151a:	da3e                	sw	a5,52(sp)
2000151c:	d842                	sw	a6,48(sp)
2000151e:	d646                	sw	a7,44(sp)
20001520:	d472                	sw	t3,40(sp)
20001522:	d276                	sw	t4,36(sp)
20001524:	d07a                	sw	t5,32(sp)
20001526:	ce7e                	sw	t6,28(sp)
20001528:	00001517          	auipc	a0,0x1
2000152c:	d2050513          	addi	a0,a0,-736 # 20002248 <kDeviceLogBypassUartAddress>
20001530:	4108                	lw	a0,0(a0)
20001532:	c909                	beqz	a0,20001544 <handler_irq_software+0x98>
20001534:	e000f517          	auipc	a0,0xe000f
20001538:	c2050513          	addi	a0,a0,-992 # 10154 <handler_irq_timer.kLogFields>
2000153c:	4581                	li	a1,0
2000153e:	ce0ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
20001542:	a821                	j	2000155a <handler_irq_software+0xae>
20001544:	00001597          	auipc	a1,0x1
20001548:	c1c58593          	addi	a1,a1,-996 # 20002160 <kDifUartFifoSizeBytes+0x18>
2000154c:	0020                	addi	s0,sp,8
2000154e:	4651                	li	a2,20
20001550:	8522                	mv	a0,s0
20001552:	2c4d                	jal	20001804 <memcpy>
20001554:	8522                	mv	a0,s0
20001556:	c1eff0ef          	jal	ra,20000974 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
2000155a:	a001                	j	2000155a <handler_irq_software+0xae>

2000155c <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
2000155c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
2000155e:	ce86                	sw	ra,92(sp)
20001560:	cc96                	sw	t0,88(sp)
20001562:	ca9a                	sw	t1,84(sp)
20001564:	c89e                	sw	t2,80(sp)
20001566:	c6a2                	sw	s0,76(sp)
20001568:	c4aa                	sw	a0,72(sp)
2000156a:	c2ae                	sw	a1,68(sp)
2000156c:	c0b2                	sw	a2,64(sp)
2000156e:	de36                	sw	a3,60(sp)
20001570:	dc3a                	sw	a4,56(sp)
20001572:	da3e                	sw	a5,52(sp)
20001574:	d842                	sw	a6,48(sp)
20001576:	d646                	sw	a7,44(sp)
20001578:	d472                	sw	t3,40(sp)
2000157a:	d276                	sw	t4,36(sp)
2000157c:	d07a                	sw	t5,32(sp)
2000157e:	ce7e                	sw	t6,28(sp)
20001580:	00001517          	auipc	a0,0x1
20001584:	cc850513          	addi	a0,a0,-824 # 20002248 <kDeviceLogBypassUartAddress>
20001588:	4108                	lw	a0,0(a0)
2000158a:	c909                	beqz	a0,2000159c <handler_irq_external+0x40>
2000158c:	e000f517          	auipc	a0,0xe000f
20001590:	bdc50513          	addi	a0,a0,-1060 # 10168 <handler_irq_external.kLogFields>
20001594:	4581                	li	a1,0
20001596:	c88ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
2000159a:	a821                	j	200015b2 <handler_irq_external+0x56>
2000159c:	00001597          	auipc	a1,0x1
200015a0:	bd858593          	addi	a1,a1,-1064 # 20002174 <kDifUartFifoSizeBytes+0x2c>
200015a4:	0020                	addi	s0,sp,8
200015a6:	4651                	li	a2,20
200015a8:	8522                	mv	a0,s0
200015aa:	2ca9                	jal	20001804 <memcpy>
200015ac:	8522                	mv	a0,s0
200015ae:	bc6ff0ef          	jal	ra,20000974 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
200015b2:	a001                	j	200015b2 <handler_irq_external+0x56>

200015b4 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
200015b4:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200015b6:	ce06                	sw	ra,28(sp)
200015b8:	cc22                	sw	s0,24(sp)
200015ba:	ca26                	sw	s1,20(sp)
200015bc:	00001597          	auipc	a1,0x1
200015c0:	c8c58593          	addi	a1,a1,-884 # 20002248 <kDeviceLogBypassUartAddress>
200015c4:	418c                	lw	a1,0(a1)
200015c6:	842a                	mv	s0,a0
200015c8:	c19d                	beqz	a1,200015ee <print_exc_msg+0x3a>
200015ca:	e000f517          	auipc	a0,0xe000f
200015ce:	bc650513          	addi	a0,a0,-1082 # 10190 <print_exc_msg.kLogFields>
200015d2:	4585                	li	a1,1
200015d4:	8622                	mv	a2,s0
200015d6:	c48ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200015da:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200015de:	e000f517          	auipc	a0,0xe000f
200015e2:	bc650513          	addi	a0,a0,-1082 # 101a4 <print_exc_msg.kLogFields.6>
200015e6:	4585                	li	a1,1
200015e8:	c36ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
200015ec:	a81d                	j	20001622 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200015ee:	00001597          	auipc	a1,0x1
200015f2:	bae58593          	addi	a1,a1,-1106 # 2000219c <kDifUartFifoSizeBytes+0x54>
200015f6:	848a                	mv	s1,sp
200015f8:	4651                	li	a2,20
200015fa:	8526                	mv	a0,s1
200015fc:	2421                	jal	20001804 <memcpy>
200015fe:	8526                	mv	a0,s1
20001600:	85a2                	mv	a1,s0
20001602:	b72ff0ef          	jal	ra,20000974 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20001606:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000160a:	00001597          	auipc	a1,0x1
2000160e:	ba658593          	addi	a1,a1,-1114 # 200021b0 <kDifUartFifoSizeBytes+0x68>
20001612:	848a                	mv	s1,sp
20001614:	4651                	li	a2,20
20001616:	8526                	mv	a0,s1
20001618:	22f5                	jal	20001804 <memcpy>
2000161a:	8526                	mv	a0,s1
2000161c:	85a2                	mv	a1,s0
2000161e:	b56ff0ef          	jal	ra,20000974 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20001622:	a001                	j	20001622 <print_exc_msg+0x6e>

20001624 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
20001624:	1141                	addi	sp,sp,-16
20001626:	c606                	sw	ra,12(sp)
20001628:	c422                	sw	s0,8(sp)
2000162a:	6511                	lui	a0,0x4
2000162c:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
20001630:	2231                	jal	2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20001632:	00001517          	auipc	a0,0x1
20001636:	be650513          	addi	a0,a0,-1050 # 20002218 <kDeviceType>
2000163a:	4108                	lw	a0,0(a0)
2000163c:	c111                	beqz	a0,20001640 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
2000163e:	2815                	jal	20001672 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
20001640:	d43fe0ef          	jal	ra,20000382 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
20001644:	00001597          	auipc	a1,0x1
20001648:	a4058593          	addi	a1,a1,-1472 # 20002084 <kTestConfig>
2000164c:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
20001650:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
20001652:	c191                	beqz	a1,20001656 <main+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
20001654:	2839                	jal	20001672 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
20001656:	224d                	jal	200017f8 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20001658:	e409                	bnez	s0,20001662 <main+0x3e>
2000165a:	6531                	lui	a0,0xc
2000165c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001660:	a019                	j	20001666 <main+0x42>
20001662:	6525                	lui	a0,0x9
20001664:	0535                	addi	a0,a0,13
20001666:	28d9                	jal	2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20001668:	4505                	li	a0,1
2000166a:	4422                	lw	s0,8(sp)
2000166c:	40b2                	lw	ra,12(sp)
2000166e:	0141                	addi	sp,sp,16
20001670:	8082                	ret

20001672 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20001672:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20001674:	ce06                	sw	ra,28(sp)
20001676:	cc22                	sw	s0,24(sp)
20001678:	ca26                	sw	s1,20(sp)
2000167a:	effff597          	auipc	a1,0xeffff
2000167e:	99658593          	addi	a1,a1,-1642 # 10000010 <uart0>
20001682:	40000537          	lui	a0,0x40000
20001686:	897ff0ef          	jal	ra,20000f1c <dif_uart_init>
2000168a:	00001497          	auipc	s1,0x1
2000168e:	bbe48493          	addi	s1,s1,-1090 # 20002248 <kDeviceLogBypassUartAddress>
20001692:	c915                	beqz	a0,200016c6 <init_uart+0x54>
20001694:	4088                	lw	a0,0(s1)
20001696:	c909                	beqz	a0,200016a8 <init_uart+0x36>
20001698:	e000f517          	auipc	a0,0xe000f
2000169c:	b2050513          	addi	a0,a0,-1248 # 101b8 <init_uart.kLogFields>
200016a0:	4581                	li	a1,0
200016a2:	b7cff0ef          	jal	ra,20000a1e <base_log_internal_dv>
200016a6:	a821                	j	200016be <init_uart+0x4c>
200016a8:	00001597          	auipc	a1,0x1
200016ac:	b1c58593          	addi	a1,a1,-1252 # 200021c4 <kDifUartFifoSizeBytes+0x7c>
200016b0:	840a                	mv	s0,sp
200016b2:	4651                	li	a2,20
200016b4:	8522                	mv	a0,s0
200016b6:	22b9                	jal	20001804 <memcpy>
200016b8:	8522                	mv	a0,s0
200016ba:	abaff0ef          	jal	ra,20000974 <base_log_internal_core>
200016be:	6531                	lui	a0,0xc
200016c0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200016c4:	28a5                	jal	2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
200016c6:	00001517          	auipc	a0,0x1
200016ca:	b7250513          	addi	a0,a0,-1166 # 20002238 <kUartBaudrate>
200016ce:	4108                	lw	a0,0(a0)
200016d0:	00001597          	auipc	a1,0x1
200016d4:	b5858593          	addi	a1,a1,-1192 # 20002228 <kClockFreqPeripheralHz>
200016d8:	418c                	lw	a1,0(a1)
200016da:	c02a                	sw	a0,0(sp)
200016dc:	c22e                	sw	a1,4(sp)
200016de:	4505                	li	a0,1
200016e0:	c42a                	sw	a0,8(sp)
200016e2:	c62a                	sw	a0,12(sp)
200016e4:	effff517          	auipc	a0,0xeffff
200016e8:	92c50513          	addi	a0,a0,-1748 # 10000010 <uart0>
200016ec:	858a                	mv	a1,sp
200016ee:	83dff0ef          	jal	ra,20000f2a <dif_uart_configure>
200016f2:	c915                	beqz	a0,20001726 <init_uart+0xb4>
200016f4:	4088                	lw	a0,0(s1)
200016f6:	c909                	beqz	a0,20001708 <init_uart+0x96>
200016f8:	e000f517          	auipc	a0,0xe000f
200016fc:	ad450513          	addi	a0,a0,-1324 # 101cc <init_uart.kLogFields.2>
20001700:	4581                	li	a1,0
20001702:	b1cff0ef          	jal	ra,20000a1e <base_log_internal_dv>
20001706:	a821                	j	2000171e <init_uart+0xac>
20001708:	00001597          	auipc	a1,0x1
2000170c:	ad058593          	addi	a1,a1,-1328 # 200021d8 <kDifUartFifoSizeBytes+0x90>
20001710:	840a                	mv	s0,sp
20001712:	4651                	li	a2,20
20001714:	8522                	mv	a0,s0
20001716:	20fd                	jal	20001804 <memcpy>
20001718:	8522                	mv	a0,s0
2000171a:	a5aff0ef          	jal	ra,20000974 <base_log_internal_core>
2000171e:	6531                	lui	a0,0xc
20001720:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20001724:	2821                	jal	2000173c <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
20001726:	effff517          	auipc	a0,0xeffff
2000172a:	8ea50513          	addi	a0,a0,-1814 # 10000010 <uart0>
2000172e:	b42ff0ef          	jal	ra,20000a70 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
20001732:	44d2                	lw	s1,20(sp)
20001734:	4462                	lw	s0,24(sp)
20001736:	40f2                	lw	ra,28(sp)
20001738:	6105                	addi	sp,sp,32
2000173a:	8082                	ret

2000173c <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
2000173c:	1101                	addi	sp,sp,-32
2000173e:	ce06                	sw	ra,28(sp)
20001740:	cc22                	sw	s0,24(sp)
20001742:	65b1                	lui	a1,0xc
20001744:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20001748:	02b50163          	beq	a0,a1,2000176a <test_status_set+0x2e>
2000174c:	65a5                	lui	a1,0x9
2000174e:	05b5                	addi	a1,a1,13
20001750:	02b50f63          	beq	a0,a1,2000178e <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001754:	00001597          	auipc	a1,0x1
20001758:	af058593          	addi	a1,a1,-1296 # 20002244 <kDeviceTestStatusAddress>
2000175c:	418c                	lw	a1,0(a1)
2000175e:	c191                	beqz	a1,20001762 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001760:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20001762:	4462                	lw	s0,24(sp)
20001764:	40f2                	lw	ra,28(sp)
20001766:	6105                	addi	sp,sp,32
20001768:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000176a:	00001517          	auipc	a0,0x1
2000176e:	ade50513          	addi	a0,a0,-1314 # 20002248 <kDeviceLogBypassUartAddress>
20001772:	4108                	lw	a0,0(a0)
20001774:	ed1d                	bnez	a0,200017b2 <test_status_set+0x76>
20001776:	00001597          	auipc	a1,0x1
2000177a:	a8a58593          	addi	a1,a1,-1398 # 20002200 <kDifUartFifoSizeBytes+0xb8>
2000177e:	840a                	mv	s0,sp
20001780:	4651                	li	a2,20
20001782:	8522                	mv	a0,s0
20001784:	2041                	jal	20001804 <memcpy>
20001786:	8522                	mv	a0,s0
20001788:	9ecff0ef          	jal	ra,20000974 <base_log_internal_core>
2000178c:	a815                	j	200017c0 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
2000178e:	00001517          	auipc	a0,0x1
20001792:	aba50513          	addi	a0,a0,-1350 # 20002248 <kDeviceLogBypassUartAddress>
20001796:	4108                	lw	a0,0(a0)
20001798:	ed15                	bnez	a0,200017d4 <test_status_set+0x98>
2000179a:	00001597          	auipc	a1,0x1
2000179e:	a5258593          	addi	a1,a1,-1454 # 200021ec <kDifUartFifoSizeBytes+0xa4>
200017a2:	840a                	mv	s0,sp
200017a4:	4651                	li	a2,20
200017a6:	8522                	mv	a0,s0
200017a8:	28b1                	jal	20001804 <memcpy>
200017aa:	8522                	mv	a0,s0
200017ac:	9c8ff0ef          	jal	ra,20000974 <base_log_internal_core>
200017b0:	a80d                	j	200017e2 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
200017b2:	e000f517          	auipc	a0,0xe000f
200017b6:	a4250513          	addi	a0,a0,-1470 # 101f4 <test_status_set.kLogFields.2>
200017ba:	4581                	li	a1,0
200017bc:	a62ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200017c0:	00001517          	auipc	a0,0x1
200017c4:	a8450513          	addi	a0,a0,-1404 # 20002244 <kDeviceTestStatusAddress>
200017c8:	4108                	lw	a0,0(a0)
200017ca:	c50d                	beqz	a0,200017f4 <test_status_set+0xb8>
200017cc:	65b1                	lui	a1,0xc
200017ce:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
200017d2:	a005                	j	200017f2 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
200017d4:	e000f517          	auipc	a0,0xe000f
200017d8:	a0c50513          	addi	a0,a0,-1524 # 101e0 <test_status_set.kLogFields>
200017dc:	4581                	li	a1,0
200017de:	a40ff0ef          	jal	ra,20000a1e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200017e2:	00001517          	auipc	a0,0x1
200017e6:	a6250513          	addi	a0,a0,-1438 # 20002244 <kDeviceTestStatusAddress>
200017ea:	4108                	lw	a0,0(a0)
200017ec:	c501                	beqz	a0,200017f4 <test_status_set+0xb8>
200017ee:	65a5                	lui	a1,0x9
200017f0:	05b5                	addi	a1,a1,13
200017f2:	c10c                	sw	a1,0(a0)
200017f4:	36bd                	jal	20001362 <abort>
	...

200017f8 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
200017f8:	8082                	ret
	...

200017fc <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200017fc:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
200017fe:	8082                	ret

20001800 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20001800:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20001802:	8082                	ret

20001804 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20001804:	ca11                	beqz	a2,20001818 <memcpy+0x14>
20001806:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20001808:	00058703          	lb	a4,0(a1) # 9000 <_stack_size+0x7000>
2000180c:	00e68023          	sb	a4,0(a3) # 80000000 <_data_init_start+0x5fffd57c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20001810:	167d                	addi	a2,a2,-1
20001812:	0685                	addi	a3,a3,1
20001814:	0585                	addi	a1,a1,1
20001816:	fa6d                	bnez	a2,20001808 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20001818:	8082                	ret

2000181a <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000181a:	c619                	beqz	a2,20001828 <memset+0xe>
2000181c:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
2000181e:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20001822:	167d                	addi	a2,a2,-1
20001824:	0685                	addi	a3,a3,1
20001826:	fe65                	bnez	a2,2000181e <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20001828:	8082                	ret

2000182a <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
2000182a:	ce09                	beqz	a2,20001844 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
2000182c:	00054683          	lbu	a3,0(a0)
20001830:	0005c703          	lbu	a4,0(a1)
20001834:	00e6ea63          	bltu	a3,a4,20001848 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20001838:	00d76b63          	bltu	a4,a3,2000184e <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
2000183c:	167d                	addi	a2,a2,-1
2000183e:	0585                	addi	a1,a1,1
20001840:	0505                	addi	a0,a0,1
20001842:	f66d                	bnez	a2,2000182c <memcmp+0x2>
20001844:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
20001846:	8082                	ret
20001848:	fd600513          	li	a0,-42
2000184c:	8082                	ret
2000184e:	02a00513          	li	a0,42
20001852:	8082                	ret

20001854 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20001854:	ca11                	beqz	a2,20001868 <memchr+0x14>
20001856:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
2000185a:	00054683          	lbu	a3,0(a0)
2000185e:	00b68663          	beq	a3,a1,2000186a <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20001862:	167d                	addi	a2,a2,-1
20001864:	0505                	addi	a0,a0,1
20001866:	fa75                	bnez	a2,2000185a <memchr+0x6>
20001868:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000186a:	8082                	ret

2000186c <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000186c:	ce09                	beqz	a2,20001886 <memrchr+0x1a>
2000186e:	fff50693          	addi	a3,a0,-1
20001872:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20001876:	00c68733          	add	a4,a3,a2
2000187a:	00074703          	lbu	a4,0(a4)
2000187e:	00b70663          	beq	a4,a1,2000188a <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20001882:	167d                	addi	a2,a2,-1
20001884:	fa6d                	bnez	a2,20001876 <memrchr+0xa>
20001886:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20001888:	8082                	ret
2000188a:	9532                	add	a0,a0,a2
2000188c:	157d                	addi	a0,a0,-1
2000188e:	8082                	ret

20001890 <irq_set_vector_offset>:
irq_set_vector_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:14
static const uint32_t IRQ_EXT_ENABLE_OFFSET = 11;
static const uint32_t IRQ_TIMER_ENABLE_OFFSET = 7;
static const uint32_t IRQ_SW_ENABLE_OFFSET = 3;

void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
20001890:	30551073          	csrw	mtvec,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:15
}
20001894:	8082                	ret

20001896 <irq_global_ctrl>:
irq_global_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:18

void irq_global_ctrl(bool en) {
  if (en) {
20001896:	c509                	beqz	a0,200018a0 <irq_global_ctrl+0xa>
20001898:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
2000189a:	30052073          	csrs	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
2000189e:	8082                	ret
200018a0:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
200018a2:	30053073          	csrc	mstatus,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:23
}
200018a6:	8082                	ret

200018a8 <irq_external_ctrl>:
irq_external_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
200018a8:	c519                	beqz	a0,200018b6 <irq_external_ctrl+0xe>
200018aa:	6505                	lui	a0,0x1
200018ac:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
200018b0:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
200018b4:	8082                	ret
200018b6:	6505                	lui	a0,0x1
200018b8:	80050513          	addi	a0,a0,-2048 # 800 <__DYNAMIC+0x800>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
200018bc:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:32
}
200018c0:	8082                	ret

200018c2 <irq_timer_ctrl>:
irq_timer_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
200018c2:	c511                	beqz	a0,200018ce <irq_timer_ctrl+0xc>
200018c4:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
200018c8:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
200018cc:	8082                	ret
200018ce:	08000513          	li	a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
200018d2:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:41
}
200018d6:	8082                	ret

200018d8 <irq_software_ctrl>:
irq_software_ctrl():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
200018d8:	c509                	beqz	a0,200018e2 <irq_software_ctrl+0xa>
200018da:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
200018dc:	30452073          	csrs	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
200018e0:	8082                	ret
200018e2:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
200018e4:	30453073          	csrc	mie,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/irq.c:50
}
200018e8:	8082                	ret
	...

200018ec <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200018ec:	88aa                	mv	a7,a0
200018ee:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200018f0:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200018f2:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200018f4:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200018f6:	20069963          	bnez	a3,20001b08 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200018fa:	200026b7          	lui	a3,0x20002
200018fe:	24c68693          	addi	a3,a3,588 # 2000224c <__clz_tab>
20001902:	0cc5f063          	bgeu	a1,a2,200019c2 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001906:	6741                	lui	a4,0x10
20001908:	0ae67663          	bgeu	a2,a4,200019b4 <__udivdi3+0xc8>
2000190c:	0ff00713          	li	a4,255
20001910:	00c73733          	sltu	a4,a4,a2
20001914:	070e                	slli	a4,a4,0x3
20001916:	00e65533          	srl	a0,a2,a4
2000191a:	96aa                	add	a3,a3,a0
2000191c:	0006c683          	lbu	a3,0(a3)
20001920:	02000513          	li	a0,32
20001924:	9736                	add	a4,a4,a3
20001926:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
2000192a:	00e50c63          	beq	a0,a4,20001942 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000192e:	00d797b3          	sll	a5,a5,a3
20001932:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001936:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000193a:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
2000193e:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001942:	01085893          	srli	a7,a6,0x10
20001946:	0315d7b3          	divu	a5,a1,a7
2000194a:	01081613          	slli	a2,a6,0x10
2000194e:	8241                	srli	a2,a2,0x10
20001950:	01035713          	srli	a4,t1,0x10
20001954:	0315f6b3          	remu	a3,a1,a7
20001958:	853e                	mv	a0,a5
2000195a:	02f605b3          	mul	a1,a2,a5
2000195e:	06c2                	slli	a3,a3,0x10
20001960:	8f55                	or	a4,a4,a3
20001962:	00b77c63          	bgeu	a4,a1,2000197a <__udivdi3+0x8e>
20001966:	9742                	add	a4,a4,a6
20001968:	fff78513          	addi	a0,a5,-1
2000196c:	01076763          	bltu	a4,a6,2000197a <__udivdi3+0x8e>
20001970:	00b77563          	bgeu	a4,a1,2000197a <__udivdi3+0x8e>
20001974:	ffe78513          	addi	a0,a5,-2
20001978:	9742                	add	a4,a4,a6
2000197a:	8f0d                	sub	a4,a4,a1
2000197c:	031777b3          	remu	a5,a4,a7
20001980:	0342                	slli	t1,t1,0x10
20001982:	01035313          	srli	t1,t1,0x10
20001986:	03175733          	divu	a4,a4,a7
2000198a:	07c2                	slli	a5,a5,0x10
2000198c:	0067e333          	or	t1,a5,t1
20001990:	02e606b3          	mul	a3,a2,a4
20001994:	863a                	mv	a2,a4
20001996:	00d37b63          	bgeu	t1,a3,200019ac <__udivdi3+0xc0>
2000199a:	9342                	add	t1,t1,a6
2000199c:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200019a0:	01036663          	bltu	t1,a6,200019ac <__udivdi3+0xc0>
200019a4:	00d37463          	bgeu	t1,a3,200019ac <__udivdi3+0xc0>
200019a8:	ffe70613          	addi	a2,a4,-2
200019ac:	0542                	slli	a0,a0,0x10
200019ae:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200019b0:	4581                	li	a1,0
200019b2:	a85d                	j	20001a68 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200019b4:	01000537          	lui	a0,0x1000
200019b8:	4741                	li	a4,16
200019ba:	f4a66ee3          	bltu	a2,a0,20001916 <__udivdi3+0x2a>
200019be:	4761                	li	a4,24
200019c0:	bf99                	j	20001916 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
200019c2:	e601                	bnez	a2,200019ca <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
200019c4:	4705                	li	a4,1
200019c6:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200019ca:	6741                	lui	a4,0x10
200019cc:	08e87f63          	bgeu	a6,a4,20001a6a <__udivdi3+0x17e>
200019d0:	0ff00713          	li	a4,255
200019d4:	01077363          	bgeu	a4,a6,200019da <__udivdi3+0xee>
200019d8:	4521                	li	a0,8
200019da:	00a85733          	srl	a4,a6,a0
200019de:	96ba                	add	a3,a3,a4
200019e0:	0006c703          	lbu	a4,0(a3)
200019e4:	02000613          	li	a2,32
200019e8:	972a                	add	a4,a4,a0
200019ea:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
200019ee:	08e61563          	bne	a2,a4,20001a78 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
200019f2:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
200019f6:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
200019f8:	01085893          	srli	a7,a6,0x10
200019fc:	01081613          	slli	a2,a6,0x10
20001a00:	8241                	srli	a2,a2,0x10
20001a02:	01035713          	srli	a4,t1,0x10
20001a06:	0317f6b3          	remu	a3,a5,a7
20001a0a:	0317d7b3          	divu	a5,a5,a7
20001a0e:	06c2                	slli	a3,a3,0x10
20001a10:	8f55                	or	a4,a4,a3
20001a12:	02f60e33          	mul	t3,a2,a5
20001a16:	853e                	mv	a0,a5
20001a18:	01c77c63          	bgeu	a4,t3,20001a30 <__udivdi3+0x144>
20001a1c:	9742                	add	a4,a4,a6
20001a1e:	fff78513          	addi	a0,a5,-1
20001a22:	01076763          	bltu	a4,a6,20001a30 <__udivdi3+0x144>
20001a26:	01c77563          	bgeu	a4,t3,20001a30 <__udivdi3+0x144>
20001a2a:	ffe78513          	addi	a0,a5,-2
20001a2e:	9742                	add	a4,a4,a6
20001a30:	41c70733          	sub	a4,a4,t3
20001a34:	031777b3          	remu	a5,a4,a7
20001a38:	0342                	slli	t1,t1,0x10
20001a3a:	01035313          	srli	t1,t1,0x10
20001a3e:	03175733          	divu	a4,a4,a7
20001a42:	07c2                	slli	a5,a5,0x10
20001a44:	0067e333          	or	t1,a5,t1
20001a48:	02e606b3          	mul	a3,a2,a4
20001a4c:	863a                	mv	a2,a4
20001a4e:	00d37b63          	bgeu	t1,a3,20001a64 <__udivdi3+0x178>
20001a52:	9342                	add	t1,t1,a6
20001a54:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001a58:	01036663          	bltu	t1,a6,20001a64 <__udivdi3+0x178>
20001a5c:	00d37463          	bgeu	t1,a3,20001a64 <__udivdi3+0x178>
20001a60:	ffe70613          	addi	a2,a4,-2
20001a64:	0542                	slli	a0,a0,0x10
20001a66:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001a68:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001a6a:	01000737          	lui	a4,0x1000
20001a6e:	4541                	li	a0,16
20001a70:	f6e865e3          	bltu	a6,a4,200019da <__udivdi3+0xee>
20001a74:	4561                	li	a0,24
20001a76:	b795                	j	200019da <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001a78:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001a7c:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001a80:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001a84:	00d797b3          	sll	a5,a5,a3
20001a88:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001a8c:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001a90:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001a94:	0315f733          	remu	a4,a1,a7
20001a98:	01081793          	slli	a5,a6,0x10
20001a9c:	83c1                	srli	a5,a5,0x10
20001a9e:	01065513          	srli	a0,a2,0x10
20001aa2:	0315d5b3          	divu	a1,a1,a7
20001aa6:	0742                	slli	a4,a4,0x10
20001aa8:	8f49                	or	a4,a4,a0
20001aaa:	02b786b3          	mul	a3,a5,a1
20001aae:	852e                	mv	a0,a1
20001ab0:	00d77c63          	bgeu	a4,a3,20001ac8 <__udivdi3+0x1dc>
20001ab4:	9742                	add	a4,a4,a6
20001ab6:	fff58513          	addi	a0,a1,-1
20001aba:	01076763          	bltu	a4,a6,20001ac8 <__udivdi3+0x1dc>
20001abe:	00d77563          	bgeu	a4,a3,20001ac8 <__udivdi3+0x1dc>
20001ac2:	ffe58513          	addi	a0,a1,-2
20001ac6:	9742                	add	a4,a4,a6
20001ac8:	40d706b3          	sub	a3,a4,a3
20001acc:	0316f733          	remu	a4,a3,a7
20001ad0:	0642                	slli	a2,a2,0x10
20001ad2:	8241                	srli	a2,a2,0x10
20001ad4:	0316d6b3          	divu	a3,a3,a7
20001ad8:	0742                	slli	a4,a4,0x10
20001ada:	02d788b3          	mul	a7,a5,a3
20001ade:	00c767b3          	or	a5,a4,a2
20001ae2:	8736                	mv	a4,a3
20001ae4:	0117fc63          	bgeu	a5,a7,20001afc <__udivdi3+0x210>
20001ae8:	97c2                	add	a5,a5,a6
20001aea:	fff68713          	addi	a4,a3,-1
20001aee:	0107e763          	bltu	a5,a6,20001afc <__udivdi3+0x210>
20001af2:	0117f563          	bgeu	a5,a7,20001afc <__udivdi3+0x210>
20001af6:	ffe68713          	addi	a4,a3,-2
20001afa:	97c2                	add	a5,a5,a6
20001afc:	01051593          	slli	a1,a0,0x10
20001b00:	411787b3          	sub	a5,a5,a7
20001b04:	8dd9                	or	a1,a1,a4
20001b06:	bdcd                	j	200019f8 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001b08:	14d5e263          	bltu	a1,a3,20001c4c <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001b0c:	6741                	lui	a4,0x10
20001b0e:	02e6ff63          	bgeu	a3,a4,20001b4c <__udivdi3+0x260>
20001b12:	0ff00713          	li	a4,255
20001b16:	00d735b3          	sltu	a1,a4,a3
20001b1a:	058e                	slli	a1,a1,0x3
20001b1c:	20002737          	lui	a4,0x20002
20001b20:	00b6d533          	srl	a0,a3,a1
20001b24:	24c70713          	addi	a4,a4,588 # 2000224c <__clz_tab>
20001b28:	972a                	add	a4,a4,a0
20001b2a:	00074703          	lbu	a4,0(a4)
20001b2e:	02000513          	li	a0,32
20001b32:	972e                	add	a4,a4,a1
20001b34:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001b38:	02e51163          	bne	a0,a4,20001b5a <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001b3c:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001b3e:	f2f6e5e3          	bltu	a3,a5,20001a68 <__udivdi3+0x17c>
20001b42:	00c8b533          	sltu	a0,a7,a2
20001b46:	00154513          	xori	a0,a0,1
20001b4a:	bf39                	j	20001a68 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001b4c:	01000737          	lui	a4,0x1000
20001b50:	45c1                	li	a1,16
20001b52:	fce6e5e3          	bltu	a3,a4,20001b1c <__udivdi3+0x230>
20001b56:	45e1                	li	a1,24
20001b58:	b7d1                	j	20001b1c <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001b5a:	00e65333          	srl	t1,a2,a4
20001b5e:	00b696b3          	sll	a3,a3,a1
20001b62:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001b66:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001b6a:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001b6e:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001b72:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001b76:	00b797b3          	sll	a5,a5,a1
20001b7a:	00e8d733          	srl	a4,a7,a4
20001b7e:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001b82:	01031793          	slli	a5,t1,0x10
20001b86:	83c1                	srli	a5,a5,0x10
20001b88:	01085713          	srli	a4,a6,0x10
20001b8c:	02a65633          	divu	a2,a2,a0
20001b90:	06c2                	slli	a3,a3,0x10
20001b92:	8f55                	or	a4,a4,a3
20001b94:	02c78f33          	mul	t5,a5,a2
20001b98:	8e32                	mv	t3,a2
20001b9a:	01e77c63          	bgeu	a4,t5,20001bb2 <__udivdi3+0x2c6>
20001b9e:	971a                	add	a4,a4,t1
20001ba0:	fff60e13          	addi	t3,a2,-1
20001ba4:	00676763          	bltu	a4,t1,20001bb2 <__udivdi3+0x2c6>
20001ba8:	01e77563          	bgeu	a4,t5,20001bb2 <__udivdi3+0x2c6>
20001bac:	ffe60e13          	addi	t3,a2,-2
20001bb0:	971a                	add	a4,a4,t1
20001bb2:	41e70733          	sub	a4,a4,t5
20001bb6:	02a776b3          	remu	a3,a4,a0
20001bba:	02a75733          	divu	a4,a4,a0
20001bbe:	06c2                	slli	a3,a3,0x10
20001bc0:	02e78633          	mul	a2,a5,a4
20001bc4:	01081793          	slli	a5,a6,0x10
20001bc8:	83c1                	srli	a5,a5,0x10
20001bca:	8fd5                	or	a5,a5,a3
20001bcc:	86ba                	mv	a3,a4
20001bce:	00c7fc63          	bgeu	a5,a2,20001be6 <__udivdi3+0x2fa>
20001bd2:	979a                	add	a5,a5,t1
20001bd4:	fff70693          	addi	a3,a4,-1 # ffffff <test_status_set.kLogFields.2+0xfefe0b>
20001bd8:	0067e763          	bltu	a5,t1,20001be6 <__udivdi3+0x2fa>
20001bdc:	00c7f563          	bgeu	a5,a2,20001be6 <__udivdi3+0x2fa>
20001be0:	ffe70693          	addi	a3,a4,-2
20001be4:	979a                	add	a5,a5,t1
20001be6:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001bea:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001bec:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001bee:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001bf2:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001bf6:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001bf8:	00def6b3          	and	a3,t4,a3
20001bfc:	01055613          	srli	a2,a0,0x10
20001c00:	010ede93          	srli	t4,t4,0x10
20001c04:	02d80333          	mul	t1,a6,a3
20001c08:	02d606b3          	mul	a3,a2,a3
20001c0c:	01035713          	srli	a4,t1,0x10
20001c10:	03d80833          	mul	a6,a6,t4
20001c14:	9836                	add	a6,a6,a3
20001c16:	9742                	add	a4,a4,a6
20001c18:	03d60633          	mul	a2,a2,t4
20001c1c:	00d77363          	bgeu	a4,a3,20001c22 <__udivdi3+0x336>
20001c20:	9672                	add	a2,a2,t3
20001c22:	01075693          	srli	a3,a4,0x10
20001c26:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001c28:	02c7e063          	bltu	a5,a2,20001c48 <__udivdi3+0x35c>
20001c2c:	d8c792e3          	bne	a5,a2,200019b0 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c30:	67c1                	lui	a5,0x10
20001c32:	17fd                	addi	a5,a5,-1
20001c34:	8f7d                	and	a4,a4,a5
20001c36:	0742                	slli	a4,a4,0x10
20001c38:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001c3c:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001c40:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001c42:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001c44:	e2e8f2e3          	bgeu	a7,a4,20001a68 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001c48:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001c4a:	b39d                	j	200019b0 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001c4c:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001c4e:	4501                	li	a0,0
20001c50:	bd21                	j	20001a68 <__udivdi3+0x17c>

20001c52 <__umoddi3>:
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001c52:	88b2                	mv	a7,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001c54:	8736                	mv	a4,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001c56:	87aa                	mv	a5,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1027
20001c58:	882e                	mv	a6,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001c5a:	1c069863          	bnez	a3,20001e2a <__umoddi3+0x1d8>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001c5e:	200026b7          	lui	a3,0x20002
20001c62:	24c68693          	addi	a3,a3,588 # 2000224c <__clz_tab>
20001c66:	0ac5f863          	bgeu	a1,a2,20001d16 <__umoddi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001c6a:	6341                	lui	t1,0x10
20001c6c:	08667e63          	bgeu	a2,t1,20001d08 <__umoddi3+0xb6>
20001c70:	0ff00313          	li	t1,255
20001c74:	00c37363          	bgeu	t1,a2,20001c7a <__umoddi3+0x28>
20001c78:	4721                	li	a4,8
20001c7a:	00e65333          	srl	t1,a2,a4
20001c7e:	969a                	add	a3,a3,t1
20001c80:	0006ce03          	lbu	t3,0(a3)
20001c84:	9e3a                	add	t3,t3,a4
20001c86:	02000713          	li	a4,32
20001c8a:	41c70333          	sub	t1,a4,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001c8e:	01c70c63          	beq	a4,t3,20001ca6 <__umoddi3+0x54>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001c92:	006595b3          	sll	a1,a1,t1
20001c96:	01c55e33          	srl	t3,a0,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001c9a:	006618b3          	sll	a7,a2,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001c9e:	00be6833          	or	a6,t3,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001ca2:	006517b3          	sll	a5,a0,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001ca6:	0108d613          	srli	a2,a7,0x10
20001caa:	02c87733          	remu	a4,a6,a2
20001cae:	01089513          	slli	a0,a7,0x10
20001cb2:	8141                	srli	a0,a0,0x10
20001cb4:	0107d693          	srli	a3,a5,0x10
20001cb8:	02c85833          	divu	a6,a6,a2
20001cbc:	0742                	slli	a4,a4,0x10
20001cbe:	8ed9                	or	a3,a3,a4
20001cc0:	03050833          	mul	a6,a0,a6
20001cc4:	0106f863          	bgeu	a3,a6,20001cd4 <__umoddi3+0x82>
20001cc8:	96c6                	add	a3,a3,a7
20001cca:	0116e563          	bltu	a3,a7,20001cd4 <__umoddi3+0x82>
20001cce:	0106f363          	bgeu	a3,a6,20001cd4 <__umoddi3+0x82>
20001cd2:	96c6                	add	a3,a3,a7
20001cd4:	410686b3          	sub	a3,a3,a6
20001cd8:	02c6f733          	remu	a4,a3,a2
20001cdc:	07c2                	slli	a5,a5,0x10
20001cde:	83c1                	srli	a5,a5,0x10
20001ce0:	02c6d6b3          	divu	a3,a3,a2
20001ce4:	02d506b3          	mul	a3,a0,a3
20001ce8:	01071513          	slli	a0,a4,0x10
20001cec:	8fc9                	or	a5,a5,a0
20001cee:	00d7f863          	bgeu	a5,a3,20001cfe <__umoddi3+0xac>
20001cf2:	97c6                	add	a5,a5,a7
20001cf4:	0117e563          	bltu	a5,a7,20001cfe <__umoddi3+0xac>
20001cf8:	00d7f363          	bgeu	a5,a3,20001cfe <__umoddi3+0xac>
20001cfc:	97c6                	add	a5,a5,a7
20001cfe:	8f95                	sub	a5,a5,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1131
20001d00:	0067d533          	srl	a0,a5,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1133
20001d04:	4581                	li	a1,0
__umoddi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1313
20001d06:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001d08:	01000337          	lui	t1,0x1000
20001d0c:	4741                	li	a4,16
20001d0e:	f66666e3          	bltu	a2,t1,20001c7a <__umoddi3+0x28>
20001d12:	4761                	li	a4,24
20001d14:	b79d                	j	20001c7a <__umoddi3+0x28>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001d16:	e601                	bnez	a2,20001d1e <__umoddi3+0xcc>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001d18:	4605                	li	a2,1
20001d1a:	031658b3          	divu	a7,a2,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001d1e:	6641                	lui	a2,0x10
20001d20:	08c8f363          	bgeu	a7,a2,20001da6 <__umoddi3+0x154>
20001d24:	0ff00613          	li	a2,255
20001d28:	01167363          	bgeu	a2,a7,20001d2e <__umoddi3+0xdc>
20001d2c:	4721                	li	a4,8
20001d2e:	00e8d633          	srl	a2,a7,a4
20001d32:	96b2                	add	a3,a3,a2
20001d34:	0006ce03          	lbu	t3,0(a3)
20001d38:	9e3a                	add	t3,t3,a4
20001d3a:	02000713          	li	a4,32
20001d3e:	41c70333          	sub	t1,a4,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001d42:	07c71963          	bne	a4,t3,20001db4 <__umoddi3+0x162>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001d46:	411585b3          	sub	a1,a1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001d4a:	0108d713          	srli	a4,a7,0x10
20001d4e:	01089513          	slli	a0,a7,0x10
20001d52:	8141                	srli	a0,a0,0x10
20001d54:	0107d613          	srli	a2,a5,0x10
20001d58:	02e5f6b3          	remu	a3,a1,a4
20001d5c:	02e5d5b3          	divu	a1,a1,a4
20001d60:	06c2                	slli	a3,a3,0x10
20001d62:	8ed1                	or	a3,a3,a2
20001d64:	02b505b3          	mul	a1,a0,a1
20001d68:	00b6f863          	bgeu	a3,a1,20001d78 <__umoddi3+0x126>
20001d6c:	96c6                	add	a3,a3,a7
20001d6e:	0116e563          	bltu	a3,a7,20001d78 <__umoddi3+0x126>
20001d72:	00b6f363          	bgeu	a3,a1,20001d78 <__umoddi3+0x126>
20001d76:	96c6                	add	a3,a3,a7
20001d78:	40b685b3          	sub	a1,a3,a1
20001d7c:	02e5f6b3          	remu	a3,a1,a4
20001d80:	07c2                	slli	a5,a5,0x10
20001d82:	83c1                	srli	a5,a5,0x10
20001d84:	02e5d5b3          	divu	a1,a1,a4
20001d88:	02b505b3          	mul	a1,a0,a1
20001d8c:	01069513          	slli	a0,a3,0x10
20001d90:	8fc9                	or	a5,a5,a0
20001d92:	00b7f863          	bgeu	a5,a1,20001da2 <__umoddi3+0x150>
20001d96:	97c6                	add	a5,a5,a7
20001d98:	0117e563          	bltu	a5,a7,20001da2 <__umoddi3+0x150>
20001d9c:	00b7f363          	bgeu	a5,a1,20001da2 <__umoddi3+0x150>
20001da0:	97c6                	add	a5,a5,a7
20001da2:	8f8d                	sub	a5,a5,a1
20001da4:	bfb1                	j	20001d00 <__umoddi3+0xae>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001da6:	01000637          	lui	a2,0x1000
20001daa:	4741                	li	a4,16
20001dac:	f8c8e1e3          	bltu	a7,a2,20001d2e <__umoddi3+0xdc>
20001db0:	4761                	li	a4,24
20001db2:	bfb5                	j	20001d2e <__umoddi3+0xdc>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001db4:	006898b3          	sll	a7,a7,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001db8:	01c5d733          	srl	a4,a1,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001dbc:	006517b3          	sll	a5,a0,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001dc0:	01c55e33          	srl	t3,a0,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001dc4:	0108d513          	srli	a0,a7,0x10
20001dc8:	02a776b3          	remu	a3,a4,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001dcc:	006595b3          	sll	a1,a1,t1
20001dd0:	00be6e33          	or	t3,t3,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001dd4:	01089593          	slli	a1,a7,0x10
20001dd8:	81c1                	srli	a1,a1,0x10
20001dda:	010e5613          	srli	a2,t3,0x10
20001dde:	02a75733          	divu	a4,a4,a0
20001de2:	06c2                	slli	a3,a3,0x10
20001de4:	8ed1                	or	a3,a3,a2
20001de6:	02e58733          	mul	a4,a1,a4
20001dea:	00e6f863          	bgeu	a3,a4,20001dfa <__umoddi3+0x1a8>
20001dee:	96c6                	add	a3,a3,a7
20001df0:	0116e563          	bltu	a3,a7,20001dfa <__umoddi3+0x1a8>
20001df4:	00e6f363          	bgeu	a3,a4,20001dfa <__umoddi3+0x1a8>
20001df8:	96c6                	add	a3,a3,a7
20001dfa:	40e68633          	sub	a2,a3,a4
20001dfe:	02a676b3          	remu	a3,a2,a0
20001e02:	0e42                	slli	t3,t3,0x10
20001e04:	010e5e13          	srli	t3,t3,0x10
20001e08:	02a65633          	divu	a2,a2,a0
20001e0c:	06c2                	slli	a3,a3,0x10
20001e0e:	02c58633          	mul	a2,a1,a2
20001e12:	01c6e5b3          	or	a1,a3,t3
20001e16:	00c5f863          	bgeu	a1,a2,20001e26 <__umoddi3+0x1d4>
20001e1a:	95c6                	add	a1,a1,a7
20001e1c:	0115e563          	bltu	a1,a7,20001e26 <__umoddi3+0x1d4>
20001e20:	00c5f363          	bgeu	a1,a2,20001e26 <__umoddi3+0x1d4>
20001e24:	95c6                	add	a1,a1,a7
20001e26:	8d91                	sub	a1,a1,a2
20001e28:	b70d                	j	20001d4a <__umoddi3+0xf8>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001e2a:	ecd5eee3          	bltu	a1,a3,20001d06 <__umoddi3+0xb4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001e2e:	6741                	lui	a4,0x10
20001e30:	04e6f563          	bgeu	a3,a4,20001e7a <__umoddi3+0x228>
20001e34:	0ff00e13          	li	t3,255
20001e38:	00de3733          	sltu	a4,t3,a3
20001e3c:	070e                	slli	a4,a4,0x3
20001e3e:	200028b7          	lui	a7,0x20002
20001e42:	00e6d333          	srl	t1,a3,a4
20001e46:	24c88893          	addi	a7,a7,588 # 2000224c <__clz_tab>
20001e4a:	989a                	add	a7,a7,t1
20001e4c:	0008ce03          	lbu	t3,0(a7)
20001e50:	9e3a                	add	t3,t3,a4
20001e52:	02000713          	li	a4,32
20001e56:	41c70333          	sub	t1,a4,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001e5a:	03c71763          	bne	a4,t3,20001e88 <__umoddi3+0x236>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001e5e:	00b6e463          	bltu	a3,a1,20001e66 <__umoddi3+0x214>
20001e62:	00c56963          	bltu	a0,a2,20001e74 <__umoddi3+0x222>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1173
20001e66:	40c507b3          	sub	a5,a0,a2
20001e6a:	8d95                	sub	a1,a1,a3
20001e6c:	00f53533          	sltu	a0,a0,a5
20001e70:	40a58833          	sub	a6,a1,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1184
20001e74:	853e                	mv	a0,a5
20001e76:	85c2                	mv	a1,a6
20001e78:	b579                	j	20001d06 <__umoddi3+0xb4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001e7a:	010008b7          	lui	a7,0x1000
20001e7e:	4741                	li	a4,16
20001e80:	fb16efe3          	bltu	a3,a7,20001e3e <__umoddi3+0x1ec>
20001e84:	4761                	li	a4,24
20001e86:	bf65                	j	20001e3e <__umoddi3+0x1ec>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001e88:	01c65733          	srl	a4,a2,t3
20001e8c:	006696b3          	sll	a3,a3,t1
20001e90:	00d76f33          	or	t5,a4,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001e94:	01c5d7b3          	srl	a5,a1,t3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001e98:	010f5713          	srli	a4,t5,0x10
20001e9c:	02e7f8b3          	remu	a7,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001ea0:	006595b3          	sll	a1,a1,t1
20001ea4:	01c55833          	srl	a6,a0,t3
20001ea8:	00b86833          	or	a6,a6,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001eac:	010f1593          	slli	a1,t5,0x10
20001eb0:	81c1                	srli	a1,a1,0x10
20001eb2:	01085693          	srli	a3,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001eb6:	00661633          	sll	a2,a2,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001eba:	00651533          	sll	a0,a0,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001ebe:	02e7d7b3          	divu	a5,a5,a4
20001ec2:	08c2                	slli	a7,a7,0x10
20001ec4:	00d8e6b3          	or	a3,a7,a3
20001ec8:	02f58eb3          	mul	t4,a1,a5
20001ecc:	88be                	mv	a7,a5
20001ece:	01d6fc63          	bgeu	a3,t4,20001ee6 <__umoddi3+0x294>
20001ed2:	96fa                	add	a3,a3,t5
20001ed4:	fff78893          	addi	a7,a5,-1 # ffff <_stack_size+0xdfff>
20001ed8:	01e6e763          	bltu	a3,t5,20001ee6 <__umoddi3+0x294>
20001edc:	01d6f563          	bgeu	a3,t4,20001ee6 <__umoddi3+0x294>
20001ee0:	ffe78893          	addi	a7,a5,-2
20001ee4:	96fa                	add	a3,a3,t5
20001ee6:	41d686b3          	sub	a3,a3,t4
20001eea:	02e6feb3          	remu	t4,a3,a4
20001eee:	0842                	slli	a6,a6,0x10
20001ef0:	01085813          	srli	a6,a6,0x10
20001ef4:	02e6d6b3          	divu	a3,a3,a4
20001ef8:	0ec2                	slli	t4,t4,0x10
20001efa:	010eeeb3          	or	t4,t4,a6
20001efe:	02d585b3          	mul	a1,a1,a3
20001f02:	87b6                	mv	a5,a3
20001f04:	00befc63          	bgeu	t4,a1,20001f1c <__umoddi3+0x2ca>
20001f08:	9efa                	add	t4,t4,t5
20001f0a:	fff68793          	addi	a5,a3,-1
20001f0e:	01eee763          	bltu	t4,t5,20001f1c <__umoddi3+0x2ca>
20001f12:	00bef563          	bgeu	t4,a1,20001f1c <__umoddi3+0x2ca>
20001f16:	ffe68793          	addi	a5,a3,-2
20001f1a:	9efa                	add	t4,t4,t5
20001f1c:	40be85b3          	sub	a1,t4,a1
20001f20:	08c2                	slli	a7,a7,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001f22:	6ec1                	lui	t4,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001f24:	00f8e8b3          	or	a7,a7,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001f28:	fffe8793          	addi	a5,t4,-1 # ffff <_stack_size+0xdfff>
20001f2c:	00f8f833          	and	a6,a7,a5
20001f30:	01065693          	srli	a3,a2,0x10
20001f34:	0108d893          	srli	a7,a7,0x10
20001f38:	8ff1                	and	a5,a5,a2
20001f3a:	02f80733          	mul	a4,a6,a5
20001f3e:	02f887b3          	mul	a5,a7,a5
20001f42:	02d80833          	mul	a6,a6,a3
20001f46:	02d888b3          	mul	a7,a7,a3
20001f4a:	983e                	add	a6,a6,a5
20001f4c:	01075693          	srli	a3,a4,0x10
20001f50:	96c2                	add	a3,a3,a6
20001f52:	00f6f363          	bgeu	a3,a5,20001f58 <__umoddi3+0x306>
20001f56:	98f6                	add	a7,a7,t4
20001f58:	67c1                	lui	a5,0x10
20001f5a:	17fd                	addi	a5,a5,-1
20001f5c:	0106d813          	srli	a6,a3,0x10
20001f60:	8efd                	and	a3,a3,a5
20001f62:	06c2                	slli	a3,a3,0x10
20001f64:	8f7d                	and	a4,a4,a5
20001f66:	98c2                	add	a7,a7,a6
20001f68:	9736                	add	a4,a4,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001f6a:	0115e663          	bltu	a1,a7,20001f76 <__umoddi3+0x324>
20001f6e:	01159c63          	bne	a1,a7,20001f86 <__umoddi3+0x334>
20001f72:	00e57a63          	bgeu	a0,a4,20001f86 <__umoddi3+0x334>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001f76:	40c70633          	sub	a2,a4,a2
20001f7a:	00c73733          	sltu	a4,a4,a2
20001f7e:	977a                	add	a4,a4,t5
20001f80:	40e888b3          	sub	a7,a7,a4
20001f84:	8732                	mv	a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1214
20001f86:	40e50733          	sub	a4,a0,a4
20001f8a:	00e53533          	sltu	a0,a0,a4
20001f8e:	411585b3          	sub	a1,a1,a7
20001f92:	8d89                	sub	a1,a1,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1215
20001f94:	01c597b3          	sll	a5,a1,t3
20001f98:	00675733          	srl	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1217
20001f9c:	00e7e533          	or	a0,a5,a4
20001fa0:	0065d5b3          	srl	a1,a1,t1
20001fa4:	b38d                	j	20001d06 <__umoddi3+0xb4>
