
sw/device/tests/dif_kmac_cshake_smoketest_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001c48  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000a2e  20001dc8  20001dc8  00002dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  200027f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000008  10000008  20002800  00004008  2**2
                  ALLOC
  8 .logs.fields  000001a4  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007d5b  00000000  00000000  000041d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000156d  00000000  00000000  0000bf2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000d49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004495  00000000  00000000  0000d532  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000040cb  00000000  00000000  000119c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  00015a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002272  00000000  00000000  00015d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000750  00000000  00000000  00017f94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fe858593          	addi	a1,a1,-24 # 10000010 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	7a860613          	addi	a2,a2,1960 # 200027f8 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	446000ef          	jal	ra,200004c4 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	aabd                	j	20000200 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	1080006f          	j	20000208 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	2400006f          	j	2000034c <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2880006f          	j	200003a4 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2d00006f          	j	200003fc <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000180:	10500073          	wfi
20000184:	8082                	ret

20000186 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000186:	1141                	addi	sp,sp,-16
20000188:	c606                	sw	ra,12(sp)
2000018a:	00002597          	auipc	a1,0x2
2000018e:	d0e58593          	addi	a1,a1,-754 # 20001e98 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000192:	41d0                	lw	a2,4(a1)
20000194:	4194                	lw	a3,0(a1)
20000196:	02a605b3          	mul	a1,a2,a0
2000019a:	02a6b633          	mulhu	a2,a3,a0
2000019e:	95b2                	add	a1,a1,a2
200001a0:	02a68533          	mul	a0,a3,a0
200001a4:	000f4637          	lui	a2,0xf4
200001a8:	24060613          	addi	a2,a2,576 # f4240 <test_main.kLogFields.34+0xe40b0>
200001ac:	4681                	li	a3,0
200001ae:	0b5010ef          	jal	ra,20001a62 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200001b2:	4801                	li	a6,0
200001b4:	4701                	li	a4,0

200001b6 <read0>:
200001b6:	b8002873          	csrr	a6,mcycleh
200001ba:	b00026f3          	csrr	a3,mcycle
200001be:	b8002773          	csrr	a4,mcycleh
200001c2:	fee81ae3          	bne	a6,a4,200001b6 <read0>
200001c6:	4781                	li	a5,0
200001c8:	4601                	li	a2,0

200001ca <read1>:
200001ca:	b80027f3          	csrr	a5,mcycleh
200001ce:	b0002773          	csrr	a4,mcycle
200001d2:	b8002673          	csrr	a2,mcycleh
200001d6:	fec79ae3          	bne	a5,a2,200001ca <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200001da:	00d73633          	sltu	a2,a4,a3
200001de:	410787b3          	sub	a5,a5,a6
200001e2:	8f91                	sub	a5,a5,a2
200001e4:	00b78663          	beq	a5,a1,200001f0 <read1+0x26>
200001e8:	00b7b733          	sltu	a4,a5,a1
200001ec:	ff69                	bnez	a4,200001c6 <read0+0x10>
200001ee:	a031                	j	200001fa <read1+0x30>
200001f0:	40d70633          	sub	a2,a4,a3
200001f4:	00a63733          	sltu	a4,a2,a0
200001f8:	f779                	bnez	a4,200001c6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200001fa:	40b2                	lw	ra,12(sp)
200001fc:	0141                	addi	sp,sp,16
200001fe:	8082                	ret

20000200 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000200:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000204:	bff5                	j	20000200 <abort>
	...

20000208 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000208:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000020a:	de06                	sw	ra,60(sp)
2000020c:	dc16                	sw	t0,56(sp)
2000020e:	da1a                	sw	t1,52(sp)
20000210:	d81e                	sw	t2,48(sp)
20000212:	d62a                	sw	a0,44(sp)
20000214:	d42e                	sw	a1,40(sp)
20000216:	d232                	sw	a2,36(sp)
20000218:	d036                	sw	a3,32(sp)
2000021a:	ce3a                	sw	a4,28(sp)
2000021c:	cc3e                	sw	a5,24(sp)
2000021e:	ca42                	sw	a6,20(sp)
20000220:	c846                	sw	a7,16(sp)
20000222:	c672                	sw	t3,12(sp)
20000224:	c476                	sw	t4,8(sp)
20000226:	c27a                	sw	t5,4(sp)
20000228:	c07e                	sw	t6,0(sp)
2000022a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000022e:	897d                	andi	a0,a0,31
20000230:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20000232:	00a5dc63          	bge	a1,a0,2000024a <handler_exception+0x42>
20000236:	4599                	li	a1,6
20000238:	02a5c263          	blt	a1,a0,2000025c <handler_exception+0x54>
2000023c:	458d                	li	a1,3
2000023e:	02b50c63          	beq	a0,a1,20000276 <handler_exception+0x6e>
20000242:	4595                	li	a1,5
20000244:	02b50763          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000248:	a015                	j	2000026c <handler_exception+0x64>
2000024a:	c115                	beqz	a0,2000026e <handler_exception+0x66>
2000024c:	4585                	li	a1,1
2000024e:	02b50063          	beq	a0,a1,2000026e <handler_exception+0x66>
20000252:	4589                	li	a1,2
20000254:	00b51c63          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000258:	208d                	jal	200002ba <handler_instr_ill_fault>
2000025a:	a839                	j	20000278 <handler_exception+0x70>
2000025c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000025e:	00b50a63          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000262:	45ad                	li	a1,11
20000264:	00b51463          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000268:	2065                	jal	20000310 <handler_ecall>
2000026a:	a039                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000026c:	a001                	j	2000026c <handler_exception+0x64>
2000026e:	2805                	jal	2000029e <handler_instr_acc_fault>
20000270:	a021                	j	20000278 <handler_exception+0x70>
20000272:	2049                	jal	200002f4 <handler_lsu_fault>
20000274:	a011                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20000276:	208d                	jal	200002d8 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20000278:	4f82                	lw	t6,0(sp)
2000027a:	4f12                	lw	t5,4(sp)
2000027c:	4ea2                	lw	t4,8(sp)
2000027e:	4e32                	lw	t3,12(sp)
20000280:	48c2                	lw	a7,16(sp)
20000282:	4852                	lw	a6,20(sp)
20000284:	47e2                	lw	a5,24(sp)
20000286:	4772                	lw	a4,28(sp)
20000288:	5682                	lw	a3,32(sp)
2000028a:	5612                	lw	a2,36(sp)
2000028c:	55a2                	lw	a1,40(sp)
2000028e:	5532                	lw	a0,44(sp)
20000290:	53c2                	lw	t2,48(sp)
20000292:	5352                	lw	t1,52(sp)
20000294:	52e2                	lw	t0,56(sp)
20000296:	50f2                	lw	ra,60(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	30200073          	mret

2000029e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
2000029e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200002a0:	de06                	sw	ra,60(sp)
200002a2:	dc22                	sw	s0,56(sp)
200002a4:	00002597          	auipc	a1,0x2
200002a8:	fd058593          	addi	a1,a1,-48 # 20002274 <__clz_tab+0x160>
200002ac:	0040                	addi	s0,sp,4
200002ae:	03400613          	li	a2,52
200002b2:	8522                	mv	a0,s0
200002b4:	2ec5                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200002b6:	8522                	mv	a0,s0
200002b8:	2a71                	jal	20000454 <print_exc_msg>

200002ba <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200002ba:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200002bc:	c686                	sw	ra,76(sp)
200002be:	c4a2                	sw	s0,72(sp)
200002c0:	00002597          	auipc	a1,0x2
200002c4:	fe858593          	addi	a1,a1,-24 # 200022a8 <__clz_tab+0x194>
200002c8:	00d10413          	addi	s0,sp,13
200002cc:	03b00613          	li	a2,59
200002d0:	8522                	mv	a0,s0
200002d2:	2ec9                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200002d4:	8522                	mv	a0,s0
200002d6:	2abd                	jal	20000454 <print_exc_msg>

200002d8 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200002d8:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200002da:	de06                	sw	ra,60(sp)
200002dc:	dc22                	sw	s0,56(sp)
200002de:	00002597          	auipc	a1,0x2
200002e2:	00558593          	addi	a1,a1,5 # 200022e3 <__clz_tab+0x1cf>
200002e6:	840a                	mv	s0,sp
200002e8:	03800613          	li	a2,56
200002ec:	8522                	mv	a0,s0
200002ee:	2e5d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200002f0:	8522                	mv	a0,s0
200002f2:	228d                	jal	20000454 <print_exc_msg>

200002f4 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200002f4:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
200002f6:	de06                	sw	ra,60(sp)
200002f8:	dc22                	sw	s0,56(sp)
200002fa:	00002597          	auipc	a1,0x2
200002fe:	02158593          	addi	a1,a1,33 # 2000231b <__clz_tab+0x207>
20000302:	0020                	addi	s0,sp,8
20000304:	03000613          	li	a2,48
20000308:	8522                	mv	a0,s0
2000030a:	2e69                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000030c:	8522                	mv	a0,s0
2000030e:	2299                	jal	20000454 <print_exc_msg>

20000310 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000310:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20000312:	ce06                	sw	ra,28(sp)
20000314:	cc22                	sw	s0,24(sp)
20000316:	00002517          	auipc	a0,0x2
2000031a:	baa50513          	addi	a0,a0,-1110 # 20001ec0 <kDeviceLogBypassUartAddress>
2000031e:	4108                	lw	a0,0(a0)
20000320:	c909                	beqz	a0,20000332 <handler_ecall+0x22>
20000322:	e0010517          	auipc	a0,0xe0010
20000326:	d1a50513          	addi	a0,a0,-742 # 1003c <handler_ecall.kLogFields>
2000032a:	4581                	li	a1,0
2000032c:	673000ef          	jal	ra,2000119e <base_log_internal_dv>
20000330:	a821                	j	20000348 <handler_ecall+0x38>
20000332:	00002597          	auipc	a1,0x2
20000336:	ad258593          	addi	a1,a1,-1326 # 20001e04 <__udivdi3+0x3a2>
2000033a:	840a                	mv	s0,sp
2000033c:	4651                	li	a2,20
2000033e:	8522                	mv	a0,s0
20000340:	2695                	jal	200006a4 <memcpy>
20000342:	8522                	mv	a0,s0
20000344:	5b1000ef          	jal	ra,200010f4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20000348:	a001                	j	20000348 <handler_ecall+0x38>
2000034a:	0001                	nop

2000034c <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
2000034c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
2000034e:	ce86                	sw	ra,92(sp)
20000350:	cc96                	sw	t0,88(sp)
20000352:	ca9a                	sw	t1,84(sp)
20000354:	c89e                	sw	t2,80(sp)
20000356:	c6a2                	sw	s0,76(sp)
20000358:	c4aa                	sw	a0,72(sp)
2000035a:	c2ae                	sw	a1,68(sp)
2000035c:	c0b2                	sw	a2,64(sp)
2000035e:	de36                	sw	a3,60(sp)
20000360:	dc3a                	sw	a4,56(sp)
20000362:	da3e                	sw	a5,52(sp)
20000364:	d842                	sw	a6,48(sp)
20000366:	d646                	sw	a7,44(sp)
20000368:	d472                	sw	t3,40(sp)
2000036a:	d276                	sw	t4,36(sp)
2000036c:	d07a                	sw	t5,32(sp)
2000036e:	ce7e                	sw	t6,28(sp)
20000370:	00002517          	auipc	a0,0x2
20000374:	b5050513          	addi	a0,a0,-1200 # 20001ec0 <kDeviceLogBypassUartAddress>
20000378:	4108                	lw	a0,0(a0)
2000037a:	c909                	beqz	a0,2000038c <handler_irq_software+0x40>
2000037c:	e0010517          	auipc	a0,0xe0010
20000380:	c8450513          	addi	a0,a0,-892 # 10000 <_dv_log_offset>
20000384:	4581                	li	a1,0
20000386:	619000ef          	jal	ra,2000119e <base_log_internal_dv>
2000038a:	a821                	j	200003a2 <handler_irq_software+0x56>
2000038c:	00002597          	auipc	a1,0x2
20000390:	a3c58593          	addi	a1,a1,-1476 # 20001dc8 <__udivdi3+0x366>
20000394:	0020                	addi	s0,sp,8
20000396:	4651                	li	a2,20
20000398:	8522                	mv	a0,s0
2000039a:	2629                	jal	200006a4 <memcpy>
2000039c:	8522                	mv	a0,s0
2000039e:	557000ef          	jal	ra,200010f4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200003a2:	a001                	j	200003a2 <handler_irq_software+0x56>

200003a4 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200003a4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200003a6:	ce86                	sw	ra,92(sp)
200003a8:	cc96                	sw	t0,88(sp)
200003aa:	ca9a                	sw	t1,84(sp)
200003ac:	c89e                	sw	t2,80(sp)
200003ae:	c6a2                	sw	s0,76(sp)
200003b0:	c4aa                	sw	a0,72(sp)
200003b2:	c2ae                	sw	a1,68(sp)
200003b4:	c0b2                	sw	a2,64(sp)
200003b6:	de36                	sw	a3,60(sp)
200003b8:	dc3a                	sw	a4,56(sp)
200003ba:	da3e                	sw	a5,52(sp)
200003bc:	d842                	sw	a6,48(sp)
200003be:	d646                	sw	a7,44(sp)
200003c0:	d472                	sw	t3,40(sp)
200003c2:	d276                	sw	t4,36(sp)
200003c4:	d07a                	sw	t5,32(sp)
200003c6:	ce7e                	sw	t6,28(sp)
200003c8:	00002517          	auipc	a0,0x2
200003cc:	af850513          	addi	a0,a0,-1288 # 20001ec0 <kDeviceLogBypassUartAddress>
200003d0:	4108                	lw	a0,0(a0)
200003d2:	c909                	beqz	a0,200003e4 <handler_irq_timer+0x40>
200003d4:	e0010517          	auipc	a0,0xe0010
200003d8:	c4050513          	addi	a0,a0,-960 # 10014 <handler_irq_timer.kLogFields>
200003dc:	4581                	li	a1,0
200003de:	5c1000ef          	jal	ra,2000119e <base_log_internal_dv>
200003e2:	a821                	j	200003fa <handler_irq_timer+0x56>
200003e4:	00002597          	auipc	a1,0x2
200003e8:	9f858593          	addi	a1,a1,-1544 # 20001ddc <__udivdi3+0x37a>
200003ec:	0020                	addi	s0,sp,8
200003ee:	4651                	li	a2,20
200003f0:	8522                	mv	a0,s0
200003f2:	2c4d                	jal	200006a4 <memcpy>
200003f4:	8522                	mv	a0,s0
200003f6:	4ff000ef          	jal	ra,200010f4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
200003fa:	a001                	j	200003fa <handler_irq_timer+0x56>

200003fc <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
200003fc:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
200003fe:	ce86                	sw	ra,92(sp)
20000400:	cc96                	sw	t0,88(sp)
20000402:	ca9a                	sw	t1,84(sp)
20000404:	c89e                	sw	t2,80(sp)
20000406:	c6a2                	sw	s0,76(sp)
20000408:	c4aa                	sw	a0,72(sp)
2000040a:	c2ae                	sw	a1,68(sp)
2000040c:	c0b2                	sw	a2,64(sp)
2000040e:	de36                	sw	a3,60(sp)
20000410:	dc3a                	sw	a4,56(sp)
20000412:	da3e                	sw	a5,52(sp)
20000414:	d842                	sw	a6,48(sp)
20000416:	d646                	sw	a7,44(sp)
20000418:	d472                	sw	t3,40(sp)
2000041a:	d276                	sw	t4,36(sp)
2000041c:	d07a                	sw	t5,32(sp)
2000041e:	ce7e                	sw	t6,28(sp)
20000420:	00002517          	auipc	a0,0x2
20000424:	aa050513          	addi	a0,a0,-1376 # 20001ec0 <kDeviceLogBypassUartAddress>
20000428:	4108                	lw	a0,0(a0)
2000042a:	c909                	beqz	a0,2000043c <handler_irq_external+0x40>
2000042c:	e0010517          	auipc	a0,0xe0010
20000430:	bfc50513          	addi	a0,a0,-1028 # 10028 <handler_irq_external.kLogFields>
20000434:	4581                	li	a1,0
20000436:	569000ef          	jal	ra,2000119e <base_log_internal_dv>
2000043a:	a821                	j	20000452 <handler_irq_external+0x56>
2000043c:	00002597          	auipc	a1,0x2
20000440:	9b458593          	addi	a1,a1,-1612 # 20001df0 <__udivdi3+0x38e>
20000444:	0020                	addi	s0,sp,8
20000446:	4651                	li	a2,20
20000448:	8522                	mv	a0,s0
2000044a:	2ca9                	jal	200006a4 <memcpy>
2000044c:	8522                	mv	a0,s0
2000044e:	4a7000ef          	jal	ra,200010f4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000452:	a001                	j	20000452 <handler_irq_external+0x56>

20000454 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000454:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000456:	ce06                	sw	ra,28(sp)
20000458:	cc22                	sw	s0,24(sp)
2000045a:	ca26                	sw	s1,20(sp)
2000045c:	00002597          	auipc	a1,0x2
20000460:	a6458593          	addi	a1,a1,-1436 # 20001ec0 <kDeviceLogBypassUartAddress>
20000464:	418c                	lw	a1,0(a1)
20000466:	842a                	mv	s0,a0
20000468:	c19d                	beqz	a1,2000048e <print_exc_msg+0x3a>
2000046a:	e0010517          	auipc	a0,0xe0010
2000046e:	be650513          	addi	a0,a0,-1050 # 10050 <print_exc_msg.kLogFields>
20000472:	4585                	li	a1,1
20000474:	8622                	mv	a2,s0
20000476:	529000ef          	jal	ra,2000119e <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000047a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000047e:	e0010517          	auipc	a0,0xe0010
20000482:	be650513          	addi	a0,a0,-1050 # 10064 <print_exc_msg.kLogFields.6>
20000486:	4585                	li	a1,1
20000488:	517000ef          	jal	ra,2000119e <base_log_internal_dv>
2000048c:	a81d                	j	200004c2 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000048e:	00002597          	auipc	a1,0x2
20000492:	98a58593          	addi	a1,a1,-1654 # 20001e18 <__udivdi3+0x3b6>
20000496:	848a                	mv	s1,sp
20000498:	4651                	li	a2,20
2000049a:	8526                	mv	a0,s1
2000049c:	2421                	jal	200006a4 <memcpy>
2000049e:	8526                	mv	a0,s1
200004a0:	85a2                	mv	a1,s0
200004a2:	453000ef          	jal	ra,200010f4 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200004a6:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200004aa:	00002597          	auipc	a1,0x2
200004ae:	98258593          	addi	a1,a1,-1662 # 20001e2c <__udivdi3+0x3ca>
200004b2:	848a                	mv	s1,sp
200004b4:	4651                	li	a2,20
200004b6:	8526                	mv	a0,s1
200004b8:	22f5                	jal	200006a4 <memcpy>
200004ba:	8526                	mv	a0,s1
200004bc:	85a2                	mv	a1,s0
200004be:	437000ef          	jal	ra,200010f4 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200004c2:	a001                	j	200004c2 <print_exc_msg+0x6e>

200004c4 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
200004c4:	1141                	addi	sp,sp,-16
200004c6:	c606                	sw	ra,12(sp)
200004c8:	c422                	sw	s0,8(sp)
200004ca:	6511                	lui	a0,0x4
200004cc:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
200004d0:	2231                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
200004d2:	00002517          	auipc	a0,0x2
200004d6:	9be50513          	addi	a0,a0,-1602 # 20001e90 <kDeviceType>
200004da:	4108                	lw	a0,0(a0)
200004dc:	c111                	beqz	a0,200004e0 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
200004de:	280d                	jal	20000510 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
200004e0:	2c81                	jal	20000730 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
200004e2:	00002597          	auipc	a1,0x2
200004e6:	bc258593          	addi	a1,a1,-1086 # 200020a4 <kTestConfig>
200004ea:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
200004ee:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
200004f0:	c191                	beqz	a1,200004f4 <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
200004f2:	2839                	jal	20000510 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
200004f4:	2255                	jal	20000698 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
200004f6:	e409                	bnez	s0,20000500 <main+0x3c>
200004f8:	6531                	lui	a0,0xc
200004fa:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004fe:	a019                	j	20000504 <main+0x40>
20000500:	6525                	lui	a0,0x9
20000502:	0535                	addi	a0,a0,13
20000504:	28e1                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20000506:	4505                	li	a0,1
20000508:	4422                	lw	s0,8(sp)
2000050a:	40b2                	lw	ra,12(sp)
2000050c:	0141                	addi	sp,sp,16
2000050e:	8082                	ret

20000510 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000510:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000512:	ce06                	sw	ra,28(sp)
20000514:	cc22                	sw	s0,24(sp)
20000516:	ca26                	sw	s1,20(sp)
20000518:	f0000597          	auipc	a1,0xf0000
2000051c:	af058593          	addi	a1,a1,-1296 # 10000008 <_data_end>
20000520:	40000537          	lui	a0,0x40000
20000524:	178010ef          	jal	ra,2000169c <dif_uart_init>
20000528:	00002497          	auipc	s1,0x2
2000052c:	99848493          	addi	s1,s1,-1640 # 20001ec0 <kDeviceLogBypassUartAddress>
20000530:	c915                	beqz	a0,20000564 <init_uart+0x54>
20000532:	4088                	lw	a0,0(s1)
20000534:	c909                	beqz	a0,20000546 <init_uart+0x36>
20000536:	e0010517          	auipc	a0,0xe0010
2000053a:	b4250513          	addi	a0,a0,-1214 # 10078 <init_uart.kLogFields>
2000053e:	4581                	li	a1,0
20000540:	45f000ef          	jal	ra,2000119e <base_log_internal_dv>
20000544:	a821                	j	2000055c <init_uart+0x4c>
20000546:	00002597          	auipc	a1,0x2
2000054a:	8fa58593          	addi	a1,a1,-1798 # 20001e40 <__udivdi3+0x3de>
2000054e:	840a                	mv	s0,sp
20000550:	4651                	li	a2,20
20000552:	8522                	mv	a0,s0
20000554:	2a81                	jal	200006a4 <memcpy>
20000556:	8522                	mv	a0,s0
20000558:	39d000ef          	jal	ra,200010f4 <base_log_internal_core>
2000055c:	6531                	lui	a0,0xc
2000055e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000562:	28ad                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20000564:	00002517          	auipc	a0,0x2
20000568:	94c50513          	addi	a0,a0,-1716 # 20001eb0 <kUartBaudrate>
2000056c:	4108                	lw	a0,0(a0)
2000056e:	00002597          	auipc	a1,0x2
20000572:	93258593          	addi	a1,a1,-1742 # 20001ea0 <kClockFreqPeripheralHz>
20000576:	418c                	lw	a1,0(a1)
20000578:	c02a                	sw	a0,0(sp)
2000057a:	c22e                	sw	a1,4(sp)
2000057c:	4505                	li	a0,1
2000057e:	c42a                	sw	a0,8(sp)
20000580:	c62a                	sw	a0,12(sp)
20000582:	f0000517          	auipc	a0,0xf0000
20000586:	a8650513          	addi	a0,a0,-1402 # 10000008 <_data_end>
2000058a:	858a                	mv	a1,sp
2000058c:	11e010ef          	jal	ra,200016aa <dif_uart_configure>
20000590:	c915                	beqz	a0,200005c4 <init_uart+0xb4>
20000592:	4088                	lw	a0,0(s1)
20000594:	c909                	beqz	a0,200005a6 <init_uart+0x96>
20000596:	e0010517          	auipc	a0,0xe0010
2000059a:	af650513          	addi	a0,a0,-1290 # 1008c <init_uart.kLogFields.2>
2000059e:	4581                	li	a1,0
200005a0:	3ff000ef          	jal	ra,2000119e <base_log_internal_dv>
200005a4:	a821                	j	200005bc <init_uart+0xac>
200005a6:	00002597          	auipc	a1,0x2
200005aa:	8ae58593          	addi	a1,a1,-1874 # 20001e54 <__udivdi3+0x3f2>
200005ae:	840a                	mv	s0,sp
200005b0:	4651                	li	a2,20
200005b2:	8522                	mv	a0,s0
200005b4:	28c5                	jal	200006a4 <memcpy>
200005b6:	8522                	mv	a0,s0
200005b8:	33d000ef          	jal	ra,200010f4 <base_log_internal_core>
200005bc:	6531                	lui	a0,0xc
200005be:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005c2:	2829                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
200005c4:	f0000517          	auipc	a0,0xf0000
200005c8:	a4450513          	addi	a0,a0,-1468 # 10000008 <_data_end>
200005cc:	425000ef          	jal	ra,200011f0 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
200005d0:	44d2                	lw	s1,20(sp)
200005d2:	4462                	lw	s0,24(sp)
200005d4:	40f2                	lw	ra,28(sp)
200005d6:	6105                	addi	sp,sp,32
200005d8:	8082                	ret
	...

200005dc <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
200005dc:	1101                	addi	sp,sp,-32
200005de:	ce06                	sw	ra,28(sp)
200005e0:	cc22                	sw	s0,24(sp)
200005e2:	65b1                	lui	a1,0xc
200005e4:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
200005e8:	02b50163          	beq	a0,a1,2000060a <test_status_set+0x2e>
200005ec:	65a5                	lui	a1,0x9
200005ee:	05b5                	addi	a1,a1,13
200005f0:	02b50f63          	beq	a0,a1,2000062e <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005f4:	00002597          	auipc	a1,0x2
200005f8:	8c858593          	addi	a1,a1,-1848 # 20001ebc <kDeviceTestStatusAddress>
200005fc:	418c                	lw	a1,0(a1)
200005fe:	c191                	beqz	a1,20000602 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000600:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000602:	4462                	lw	s0,24(sp)
20000604:	40f2                	lw	ra,28(sp)
20000606:	6105                	addi	sp,sp,32
20000608:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000060a:	00002517          	auipc	a0,0x2
2000060e:	8b650513          	addi	a0,a0,-1866 # 20001ec0 <kDeviceLogBypassUartAddress>
20000612:	4108                	lw	a0,0(a0)
20000614:	ed1d                	bnez	a0,20000652 <test_status_set+0x76>
20000616:	00002597          	auipc	a1,0x2
2000061a:	86658593          	addi	a1,a1,-1946 # 20001e7c <__udivdi3+0x41a>
2000061e:	840a                	mv	s0,sp
20000620:	4651                	li	a2,20
20000622:	8522                	mv	a0,s0
20000624:	2041                	jal	200006a4 <memcpy>
20000626:	8522                	mv	a0,s0
20000628:	2cd000ef          	jal	ra,200010f4 <base_log_internal_core>
2000062c:	a815                	j	20000660 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
2000062e:	00002517          	auipc	a0,0x2
20000632:	89250513          	addi	a0,a0,-1902 # 20001ec0 <kDeviceLogBypassUartAddress>
20000636:	4108                	lw	a0,0(a0)
20000638:	ed15                	bnez	a0,20000674 <test_status_set+0x98>
2000063a:	00002597          	auipc	a1,0x2
2000063e:	82e58593          	addi	a1,a1,-2002 # 20001e68 <__udivdi3+0x406>
20000642:	840a                	mv	s0,sp
20000644:	4651                	li	a2,20
20000646:	8522                	mv	a0,s0
20000648:	28b1                	jal	200006a4 <memcpy>
2000064a:	8522                	mv	a0,s0
2000064c:	2a9000ef          	jal	ra,200010f4 <base_log_internal_core>
20000650:	a80d                	j	20000682 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000652:	e0010517          	auipc	a0,0xe0010
20000656:	a6250513          	addi	a0,a0,-1438 # 100b4 <test_status_set.kLogFields.2>
2000065a:	4581                	li	a1,0
2000065c:	343000ef          	jal	ra,2000119e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000660:	00002517          	auipc	a0,0x2
20000664:	85c50513          	addi	a0,a0,-1956 # 20001ebc <kDeviceTestStatusAddress>
20000668:	4108                	lw	a0,0(a0)
2000066a:	c50d                	beqz	a0,20000694 <test_status_set+0xb8>
2000066c:	65b1                	lui	a1,0xc
2000066e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20000672:	a005                	j	20000692 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000674:	e0010517          	auipc	a0,0xe0010
20000678:	a2c50513          	addi	a0,a0,-1492 # 100a0 <test_status_set.kLogFields>
2000067c:	4581                	li	a1,0
2000067e:	321000ef          	jal	ra,2000119e <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000682:	00002517          	auipc	a0,0x2
20000686:	83a50513          	addi	a0,a0,-1990 # 20001ebc <kDeviceTestStatusAddress>
2000068a:	4108                	lw	a0,0(a0)
2000068c:	c501                	beqz	a0,20000694 <test_status_set+0xb8>
2000068e:	65a5                	lui	a1,0x9
20000690:	05b5                	addi	a1,a1,13
20000692:	c10c                	sw	a1,0(a0)
20000694:	36b5                	jal	20000200 <abort>
	...

20000698 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000698:	8082                	ret
	...

2000069c <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
2000069c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
2000069e:	8082                	ret

200006a0 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200006a0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200006a2:	8082                	ret

200006a4 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200006a4:	ca11                	beqz	a2,200006b8 <memcpy+0x14>
200006a6:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200006a8:	00058703          	lb	a4,0(a1) # 9000 <_stack_size+0x7000>
200006ac:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006b0:	167d                	addi	a2,a2,-1
200006b2:	0685                	addi	a3,a3,1
200006b4:	0585                	addi	a1,a1,1
200006b6:	fa6d                	bnez	a2,200006a8 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006b8:	8082                	ret

200006ba <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ba:	c619                	beqz	a2,200006c8 <memset+0xe>
200006bc:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006be:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006c2:	167d                	addi	a2,a2,-1
200006c4:	0685                	addi	a3,a3,1
200006c6:	fe65                	bnez	a2,200006be <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006c8:	8082                	ret

200006ca <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006ca:	ce09                	beqz	a2,200006e4 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006cc:	00054683          	lbu	a3,0(a0)
200006d0:	0005c703          	lbu	a4,0(a1)
200006d4:	00e6ea63          	bltu	a3,a4,200006e8 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006d8:	00d76b63          	bltu	a4,a3,200006ee <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006dc:	167d                	addi	a2,a2,-1
200006de:	0585                	addi	a1,a1,1
200006e0:	0505                	addi	a0,a0,1
200006e2:	f66d                	bnez	a2,200006cc <memcmp+0x2>
200006e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006e6:	8082                	ret
200006e8:	fd600513          	li	a0,-42
200006ec:	8082                	ret
200006ee:	02a00513          	li	a0,42
200006f2:	8082                	ret

200006f4 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006f4:	ca11                	beqz	a2,20000708 <memchr+0x14>
200006f6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006fa:	00054683          	lbu	a3,0(a0)
200006fe:	00b68663          	beq	a3,a1,2000070a <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000702:	167d                	addi	a2,a2,-1
20000704:	0505                	addi	a0,a0,1
20000706:	fa75                	bnez	a2,200006fa <memchr+0x6>
20000708:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000070a:	8082                	ret

2000070c <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000070c:	ce09                	beqz	a2,20000726 <memrchr+0x1a>
2000070e:	fff50693          	addi	a3,a0,-1
20000712:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000716:	00c68733          	add	a4,a3,a2
2000071a:	00074703          	lbu	a4,0(a4)
2000071e:	00b70663          	beq	a4,a1,2000072a <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000722:	167d                	addi	a2,a2,-1
20000724:	fa6d                	bnez	a2,20000716 <memrchr+0xa>
20000726:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000728:	8082                	ret
2000072a:	9532                	add	a0,a0,a2
2000072c:	157d                	addi	a0,a0,-1
2000072e:	8082                	ret

20000730 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:91
        .digest = {0xda353307, 0xdf18e570, 0x6211cee0, 0x716e816c},
        .digest_len = 4,  // Rate (r) is 34 words.
    },
};

bool test_main() {
20000730:	712d                	addi	sp,sp,-288
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:92
  LOG_INFO("Running KMAC DIF cSHAKE test...");
20000732:	10112e23          	sw	ra,284(sp)
20000736:	10812c23          	sw	s0,280(sp)
2000073a:	10912a23          	sw	s1,276(sp)
2000073e:	11212823          	sw	s2,272(sp)
20000742:	11312623          	sw	s3,268(sp)
20000746:	11412423          	sw	s4,264(sp)
2000074a:	11512223          	sw	s5,260(sp)
2000074e:	11612023          	sw	s6,256(sp)
20000752:	dfde                	sw	s7,252(sp)
20000754:	dde2                	sw	s8,248(sp)
20000756:	dbe6                	sw	s9,244(sp)
20000758:	d9ea                	sw	s10,240(sp)
2000075a:	d7ee                	sw	s11,236(sp)
2000075c:	00001517          	auipc	a0,0x1
20000760:	76450513          	addi	a0,a0,1892 # 20001ec0 <kDeviceLogBypassUartAddress>
20000764:	00052a83          	lw	s5,0(a0)
20000768:	000a8a63          	beqz	s5,2000077c <test_main+0x4c>
2000076c:	e0010517          	auipc	a0,0xe0010
20000770:	95c50513          	addi	a0,a0,-1700 # 100c8 <test_main.kLogFields>
20000774:	4581                	li	a1,0
20000776:	229000ef          	jal	ra,2000119e <base_log_internal_dv>
2000077a:	a821                	j	20000792 <test_main+0x62>
2000077c:	00002597          	auipc	a1,0x2
20000780:	83058593          	addi	a1,a1,-2000 # 20001fac <cshake_tests+0xc0>
20000784:	1120                	addi	s0,sp,168
20000786:	4651                	li	a2,20
20000788:	8522                	mv	a0,s0
2000078a:	3f29                	jal	200006a4 <memcpy>
2000078c:	8522                	mv	a0,s0
2000078e:	167000ef          	jal	ra,200010f4 <base_log_internal_core>
20000792:	09ac                	addi	a1,sp,216
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:96

  // Intialize KMAC hardware.
  dif_kmac_t kmac;
  CHECK(dif_kmac_init((dif_kmac_params_t){.base_addr = mmio_region_from_addr(
20000794:	41120537          	lui	a0,0x41120
20000798:	2e6d                	jal	20000b52 <dif_kmac_init>
2000079a:	c915                	beqz	a0,200007ce <test_main+0x9e>
2000079c:	000a8a63          	beqz	s5,200007b0 <test_main+0x80>
200007a0:	e0010517          	auipc	a0,0xe0010
200007a4:	93c50513          	addi	a0,a0,-1732 # 100dc <test_main.kLogFields.7>
200007a8:	4581                	li	a1,0
200007aa:	1f5000ef          	jal	ra,2000119e <base_log_internal_dv>
200007ae:	a821                	j	200007c6 <test_main+0x96>
200007b0:	00002597          	auipc	a1,0x2
200007b4:	81058593          	addi	a1,a1,-2032 # 20001fc0 <cshake_tests+0xd4>
200007b8:	1120                	addi	s0,sp,168
200007ba:	4651                	li	a2,20
200007bc:	8522                	mv	a0,s0
200007be:	35dd                	jal	200006a4 <memcpy>
200007c0:	8522                	mv	a0,s0
200007c2:	133000ef          	jal	ra,200010f4 <base_log_internal_core>
200007c6:	6531                	lui	a0,0xc
200007c8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007cc:	3d01                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:106
  dif_kmac_config_t config = (dif_kmac_config_t){
      .entropy_mode = kDifKmacEntropyModeSoftware,
      .entropy_seed = 0xffff,
      .entropy_fast_process = kDifKmacToggleEnabled,
  };
  CHECK(dif_kmac_configure(&kmac, config) == kDifKmacOk);
200007ce:	00002597          	auipc	a1,0x2
200007d2:	80a58593          	addi	a1,a1,-2038 # 20001fd8 <cshake_tests+0xec>
200007d6:	1120                	addi	s0,sp,168
200007d8:	4661                	li	a2,24
200007da:	8522                	mv	a0,s0
200007dc:	35e1                	jal	200006a4 <memcpy>
200007de:	09a8                	addi	a0,sp,216
200007e0:	85a2                	mv	a1,s0
200007e2:	2679                	jal	20000b70 <dif_kmac_configure>
200007e4:	c915                	beqz	a0,20000818 <test_main+0xe8>
200007e6:	000a8a63          	beqz	s5,200007fa <test_main+0xca>
200007ea:	e0010517          	auipc	a0,0xe0010
200007ee:	90650513          	addi	a0,a0,-1786 # 100f0 <test_main.kLogFields.10>
200007f2:	4581                	li	a1,0
200007f4:	1ab000ef          	jal	ra,2000119e <base_log_internal_dv>
200007f8:	a821                	j	20000810 <test_main+0xe0>
200007fa:	00001597          	auipc	a1,0x1
200007fe:	7f658593          	addi	a1,a1,2038 # 20001ff0 <cshake_tests+0x104>
20000802:	1120                	addi	s0,sp,168
20000804:	4651                	li	a2,20
20000806:	8522                	mv	a0,s0
20000808:	3d71                	jal	200006a4 <memcpy>
2000080a:	8522                	mv	a0,s0
2000080c:	0e9000ef          	jal	ra,200010f4 <base_log_internal_core>
20000810:	6531                	lui	a0,0xc
20000812:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000816:	33d9                	jal	200005dc <test_status_set>
20000818:	4401                	li	s0,0
2000081a:	00001517          	auipc	a0,0x1
2000081e:	6d250513          	addi	a0,a0,1746 # 20001eec <cshake_tests>
20000822:	c0aa                	sw	a0,64(sp)
20000824:	0d810b93          	addi	s7,sp,216
20000828:	00002517          	auipc	a0,0x2
2000082c:	86850513          	addi	a0,a0,-1944 # 20002090 <cshake_tests+0x1a4>
20000830:	c2aa                	sw	a0,68(sp)
20000832:	05810c13          	addi	s8,sp,88
20000836:	6531                	lui	a0,0xc
20000838:	aad50913          	addi	s2,a0,-1363 # baad <_stack_size+0x9aad>
2000083c:	e0010c97          	auipc	s9,0xe0010
20000840:	954c8c93          	addi	s9,s9,-1708 # 10190 <test_main.kLogFields.34>
20000844:	00002517          	auipc	a0,0x2
20000848:	83850513          	addi	a0,a0,-1992 # 2000207c <cshake_tests+0x190>
2000084c:	d02a                	sw	a0,32(sp)
2000084e:	e0010517          	auipc	a0,0xe0010
20000852:	92e50513          	addi	a0,a0,-1746 # 1017c <test_main.kLogFields.31>
20000856:	de2a                	sw	a0,60(sp)
20000858:	00002517          	auipc	a0,0x2
2000085c:	81050513          	addi	a0,a0,-2032 # 20002068 <cshake_tests+0x17c>
20000860:	ce2a                	sw	a0,28(sp)
20000862:	e0010517          	auipc	a0,0xe0010
20000866:	90650513          	addi	a0,a0,-1786 # 10168 <test_main.kLogFields.28>
2000086a:	dc2a                	sw	a0,56(sp)
2000086c:	00001517          	auipc	a0,0x1
20000870:	7e850513          	addi	a0,a0,2024 # 20002054 <cshake_tests+0x168>
20000874:	c42a                	sw	a0,8(sp)
20000876:	e0010517          	auipc	a0,0xe0010
2000087a:	8de50513          	addi	a0,a0,-1826 # 10154 <test_main.kLogFields.25>
2000087e:	d22a                	sw	a0,36(sp)
20000880:	00001517          	auipc	a0,0x1
20000884:	7c050513          	addi	a0,a0,1984 # 20002040 <cshake_tests+0x154>
20000888:	cc2a                	sw	a0,24(sp)
2000088a:	e0010517          	auipc	a0,0xe0010
2000088e:	8b650513          	addi	a0,a0,-1866 # 10140 <test_main.kLogFields.22>
20000892:	da2a                	sw	a0,52(sp)
20000894:	00001517          	auipc	a0,0x1
20000898:	79850513          	addi	a0,a0,1944 # 2000202c <cshake_tests+0x140>
2000089c:	ca2a                	sw	a0,20(sp)
2000089e:	e0010517          	auipc	a0,0xe0010
200008a2:	88e50513          	addi	a0,a0,-1906 # 1012c <test_main.kLogFields.19>
200008a6:	d82a                	sw	a0,48(sp)
200008a8:	00001517          	auipc	a0,0x1
200008ac:	77050513          	addi	a0,a0,1904 # 20002018 <cshake_tests+0x12c>
200008b0:	c82a                	sw	a0,16(sp)
200008b2:	e0010517          	auipc	a0,0xe0010
200008b6:	86650513          	addi	a0,a0,-1946 # 10118 <test_main.kLogFields.16>
200008ba:	d62a                	sw	a0,44(sp)
200008bc:	00001517          	auipc	a0,0x1
200008c0:	74850513          	addi	a0,a0,1864 # 20002004 <cshake_tests+0x118>
200008c4:	c62a                	sw	a0,12(sp)
200008c6:	e0010517          	auipc	a0,0xe0010
200008ca:	83e50513          	addi	a0,a0,-1986 # 10104 <test_main.kLogFields.13>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:109

  // Run cSHAKE test cases using single blocking absorb/squeeze operations.
  for (int i = 0; i < ARRAYSIZE(cshake_tests); ++i) {
200008ce:	d42a                	sw	a0,40(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:110
    cshake_test_t test = cshake_tests[i];
200008d0:	03000513          	li	a0,48
200008d4:	02a40533          	mul	a0,s0,a0
200008d8:	4586                	lw	a1,64(sp)
200008da:	95aa                	add	a1,a1,a0
200008dc:	03000613          	li	a2,48
200008e0:	1128                	addi	a0,sp,168
200008e2:	33c9                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:113

    dif_kmac_function_name_t n;
    CHECK(dif_kmac_function_name_init(
200008e4:	555a                	lw	a0,180(sp)
200008e6:	5dea                	lw	s11,184(sp)
200008e8:	85ee                	mv	a1,s11
200008ea:	0930                	addi	a2,sp,152
200008ec:	2415                	jal	20000b10 <dif_kmac_function_name_init>
200008ee:	c115                	beqz	a0,20000912 <test_main+0x1e2>
200008f0:	000a8763          	beqz	s5,200008fe <test_main+0x1ce>
200008f4:	5522                	lw	a0,40(sp)
200008f6:	4581                	li	a1,0
200008f8:	0a7000ef          	jal	ra,2000119e <base_log_internal_dv>
200008fc:	a809                	j	2000090e <test_main+0x1de>
200008fe:	4651                	li	a2,20
20000900:	1884                	addi	s1,sp,112
20000902:	8526                	mv	a0,s1
20000904:	45b2                	lw	a1,12(sp)
20000906:	3b79                	jal	200006a4 <memcpy>
20000908:	8526                	mv	a0,s1
2000090a:	7ea000ef          	jal	ra,200010f4 <base_log_internal_core>
2000090e:	854a                	mv	a0,s2
20000910:	31f1                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:117
              test.function_name, test.function_name_len, &n) == kDifKmacOk);

    dif_kmac_customization_string_t s;
    CHECK(dif_kmac_customization_string_init(test.customization_string,
20000912:	557a                	lw	a0,188(sp)
20000914:	448e                	lw	s1,192(sp)
20000916:	85a6                	mv	a1,s1
20000918:	1890                	addi	a2,sp,112
2000091a:	2279                	jal	20000aa8 <dif_kmac_customization_string_init>
2000091c:	c10d                	beqz	a0,2000093e <test_main+0x20e>
2000091e:	000a8763          	beqz	s5,2000092c <test_main+0x1fc>
20000922:	5532                	lw	a0,44(sp)
20000924:	4581                	li	a1,0
20000926:	079000ef          	jal	ra,2000119e <base_log_internal_dv>
2000092a:	a801                	j	2000093a <test_main+0x20a>
2000092c:	4651                	li	a2,20
2000092e:	8562                	mv	a0,s8
20000930:	45c2                	lw	a1,16(sp)
20000932:	3b8d                	jal	200006a4 <memcpy>
20000934:	8562                	mv	a0,s8
20000936:	7be000ef          	jal	ra,200010f4 <base_log_internal_core>
2000093a:	854a                	mv	a0,s2
2000093c:	3145                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:122
                                             test.customization_string_len,
                                             &s) == kDifKmacOk);

    // Use NULL for empty strings to exercise that code path.
    dif_kmac_function_name_t *np = test.function_name_len == 0 ? NULL : &n;
2000093e:	4601                	li	a2,0
20000940:	000d8363          	beqz	s11,20000946 <test_main+0x216>
20000944:	0930                	addi	a2,sp,152
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:124
    dif_kmac_customization_string_t *sp =
        test.customization_string_len == 0 ? NULL : &s;
20000946:	4681                	li	a3,0
20000948:	c091                	beqz	s1,2000094c <test_main+0x21c>
2000094a:	1894                	addi	a3,sp,112
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:126

    CHECK(dif_kmac_mode_cshake_start(&kmac, test.mode, np, sp) == kDifKmacOk);
2000094c:	55aa                	lw	a1,168(sp)
2000094e:	855e                	mv	a0,s7
20000950:	2e25                	jal	20000c88 <dif_kmac_mode_cshake_start>
20000952:	c10d                	beqz	a0,20000974 <test_main+0x244>
20000954:	000a8763          	beqz	s5,20000962 <test_main+0x232>
20000958:	5542                	lw	a0,48(sp)
2000095a:	4581                	li	a1,0
2000095c:	043000ef          	jal	ra,2000119e <base_log_internal_dv>
20000960:	a801                	j	20000970 <test_main+0x240>
20000962:	4651                	li	a2,20
20000964:	8562                	mv	a0,s8
20000966:	45d2                	lw	a1,20(sp)
20000968:	3b35                	jal	200006a4 <memcpy>
2000096a:	8562                	mv	a0,s8
2000096c:	788000ef          	jal	ra,200010f4 <base_log_internal_core>
20000970:	854a                	mv	a0,s2
20000972:	31ad                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:127
    CHECK(dif_kmac_absorb(&kmac, test.message, test.message_len, NULL) ==
20000974:	55ba                	lw	a1,172(sp)
20000976:	564a                	lw	a2,176(sp)
20000978:	855e                	mv	a0,s7
2000097a:	4681                	li	a3,0
2000097c:	2b4d                	jal	20000f2e <dif_kmac_absorb>
2000097e:	c10d                	beqz	a0,200009a0 <test_main+0x270>
20000980:	000a8763          	beqz	s5,2000098e <test_main+0x25e>
20000984:	5552                	lw	a0,52(sp)
20000986:	4581                	li	a1,0
20000988:	017000ef          	jal	ra,2000119e <base_log_internal_dv>
2000098c:	a801                	j	2000099c <test_main+0x26c>
2000098e:	4651                	li	a2,20
20000990:	8562                	mv	a0,s8
20000992:	45e2                	lw	a1,24(sp)
20000994:	3b01                	jal	200006a4 <memcpy>
20000996:	8562                	mv	a0,s8
20000998:	75c000ef          	jal	ra,200010f4 <base_log_internal_core>
2000099c:	854a                	mv	a0,s2
2000099e:	393d                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:130
          kDifKmacOk);
    uint32_t out[DIGEST_LEN_CSHAKE_MAX];
    CHECK(DIGEST_LEN_CSHAKE_MAX >= test.digest_len);
200009a0:	4dde                	lw	s11,212(sp)
200009a2:	4515                	li	a0,5
200009a4:	02ade263          	bltu	s11,a0,200009c8 <test_main+0x298>
200009a8:	000a8763          	beqz	s5,200009b6 <test_main+0x286>
200009ac:	5512                	lw	a0,36(sp)
200009ae:	4581                	li	a1,0
200009b0:	7ee000ef          	jal	ra,2000119e <base_log_internal_dv>
200009b4:	a801                	j	200009c4 <test_main+0x294>
200009b6:	4651                	li	a2,20
200009b8:	8562                	mv	a0,s8
200009ba:	45a2                	lw	a1,8(sp)
200009bc:	31e5                	jal	200006a4 <memcpy>
200009be:	8562                	mv	a0,s8
200009c0:	734000ef          	jal	ra,200010f4 <base_log_internal_core>
200009c4:	854a                	mv	a0,s2
200009c6:	3919                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:131
    CHECK(dif_kmac_squeeze(&kmac, out, test.digest_len, NULL) == kDifKmacOk);
200009c8:	855e                	mv	a0,s7
200009ca:	00ac                	addi	a1,sp,72
200009cc:	866e                	mv	a2,s11
200009ce:	4681                	li	a3,0
200009d0:	2b6d                	jal	20000f8a <dif_kmac_squeeze>
200009d2:	c10d                	beqz	a0,200009f4 <test_main+0x2c4>
200009d4:	000a8763          	beqz	s5,200009e2 <test_main+0x2b2>
200009d8:	5562                	lw	a0,56(sp)
200009da:	4581                	li	a1,0
200009dc:	7c2000ef          	jal	ra,2000119e <base_log_internal_dv>
200009e0:	a801                	j	200009f0 <test_main+0x2c0>
200009e2:	4651                	li	a2,20
200009e4:	8562                	mv	a0,s8
200009e6:	45f2                	lw	a1,28(sp)
200009e8:	3975                	jal	200006a4 <memcpy>
200009ea:	8562                	mv	a0,s8
200009ec:	708000ef          	jal	ra,200010f4 <base_log_internal_core>
200009f0:	854a                	mv	a0,s2
200009f2:	36ed                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:132
    CHECK(dif_kmac_end(&kmac) == kDifKmacOk);
200009f4:	855e                	mv	a0,s7
200009f6:	6c6000ef          	jal	ra,200010bc <dif_kmac_end>
200009fa:	c10d                	beqz	a0,20000a1c <test_main+0x2ec>
200009fc:	000a8763          	beqz	s5,20000a0a <test_main+0x2da>
20000a00:	5572                	lw	a0,60(sp)
20000a02:	4581                	li	a1,0
20000a04:	79a000ef          	jal	ra,2000119e <base_log_internal_dv>
20000a08:	a801                	j	20000a18 <test_main+0x2e8>
20000a0a:	4651                	li	a2,20
20000a0c:	8562                	mv	a0,s8
20000a0e:	5582                	lw	a1,32(sp)
20000a10:	3951                	jal	200006a4 <memcpy>
20000a12:	8562                	mv	a0,s8
20000a14:	6e0000ef          	jal	ra,200010f4 <base_log_internal_core>
20000a18:	854a                	mv	a0,s2
20000a1a:	36c9                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:134

    for (int j = 0; j < test.digest_len; ++j) {
20000a1c:	040d8963          	beqz	s11,20000a6e <test_main+0x33e>
20000a20:	4d01                	li	s10,0
20000a22:	0c410a13          	addi	s4,sp,196
20000a26:	04810b13          	addi	s6,sp,72
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:135
      CHECK(out[j] == test.digest[j],
20000a2a:	000b2983          	lw	s3,0(s6)
20000a2e:	000a2483          	lw	s1,0(s4)
20000a32:	02998963          	beq	s3,s1,20000a64 <test_main+0x334>
20000a36:	000a8b63          	beqz	s5,20000a4c <test_main+0x31c>
20000a3a:	4591                	li	a1,4
20000a3c:	8566                	mv	a0,s9
20000a3e:	8622                	mv	a2,s0
20000a40:	86ea                	mv	a3,s10
20000a42:	874e                	mv	a4,s3
20000a44:	87a6                	mv	a5,s1
20000a46:	758000ef          	jal	ra,2000119e <base_log_internal_dv>
20000a4a:	a819                	j	20000a60 <test_main+0x330>
20000a4c:	4651                	li	a2,20
20000a4e:	8562                	mv	a0,s8
20000a50:	4596                	lw	a1,68(sp)
20000a52:	3989                	jal	200006a4 <memcpy>
20000a54:	8562                	mv	a0,s8
20000a56:	85a2                	mv	a1,s0
20000a58:	866a                	mv	a2,s10
20000a5a:	86ce                	mv	a3,s3
20000a5c:	8726                	mv	a4,s1
20000a5e:	2d59                	jal	200010f4 <base_log_internal_core>
20000a60:	854a                	mv	a0,s2
20000a62:	3ead                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:134
    for (int j = 0; j < test.digest_len; ++j) {
20000a64:	0d05                	addi	s10,s10,1
20000a66:	0b11                	addi	s6,s6,4
20000a68:	0a11                	addi	s4,s4,4
20000a6a:	fdad90e3          	bne	s11,s10,20000a2a <test_main+0x2fa>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:109
  for (int i = 0; i < ARRAYSIZE(cshake_tests); ++i) {
20000a6e:	0405                	addi	s0,s0,1
20000a70:	4511                	li	a0,4
20000a72:	e4a41fe3          	bne	s0,a0,200008d0 <test_main+0x1a0>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_kmac_cshake_smoketest.c:141
            "test %d: mismatch at %d got=0x%x want=0x%x", i, j, out[j],
            test.digest[j]);
    }
  }

  return true;
20000a76:	4505                	li	a0,1
20000a78:	5dbe                	lw	s11,236(sp)
20000a7a:	5d4e                	lw	s10,240(sp)
20000a7c:	5cde                	lw	s9,244(sp)
20000a7e:	5c6e                	lw	s8,248(sp)
20000a80:	5bfe                	lw	s7,252(sp)
20000a82:	10012b03          	lw	s6,256(sp)
20000a86:	10412a83          	lw	s5,260(sp)
20000a8a:	10812a03          	lw	s4,264(sp)
20000a8e:	10c12983          	lw	s3,268(sp)
20000a92:	11012903          	lw	s2,272(sp)
20000a96:	11412483          	lw	s1,276(sp)
20000a9a:	11812403          	lw	s0,280(sp)
20000a9e:	11c12083          	lw	ra,284(sp)
20000aa2:	6115                	addi	sp,sp,288
20000aa4:	8082                	ret
	...

20000aa8 <dif_kmac_customization_string_init>:
dif_kmac_customization_string_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:41
   */
  kDifKmacStateShareOffset = 0x100,
};

dif_kmac_result_t dif_kmac_customization_string_init(
    const char *data, size_t len, dif_kmac_customization_string_t *out) {
20000aa8:	1141                	addi	sp,sp,-16
20000aaa:	c606                	sw	ra,12(sp)
20000aac:	86ae                	mv	a3,a1
20000aae:	85aa                	mv	a1,a0
20000ab0:	02000713          	li	a4,32
20000ab4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:42
  if ((data == NULL && len != 0) || out == NULL) {
20000ab6:	04d76a63          	bltu	a4,a3,20000b0a <dif_kmac_customization_string_init+0x62>
20000aba:	0015b713          	seqz	a4,a1
20000abe:	00d037b3          	snez	a5,a3
20000ac2:	8f7d                	and	a4,a4,a5
20000ac4:	e339                	bnez	a4,20000b0a <dif_kmac_customization_string_init+0x62>
20000ac6:	c231                	beqz	a2,20000b0a <dif_kmac_customization_string_init+0x62>
20000ac8:	6541                	lui	a0,0x10
20000aca:	157d                	addi	a0,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:56
                "length requires more than 3 bytes to left encode");
  static_assert(ARRAYSIZE(out->buffer) >= kDifKmacMaxCustomizationStringLen + 3,
                "buffer is not large enough");

  // Left encode length in bits.
  uint16_t bits = ((uint16_t)len) * 8;
20000acc:	8d75                	and	a0,a0,a3
20000ace:	47fd                	li	a5,31
20000ad0:	00369713          	slli	a4,a3,0x3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:58
  char *buffer = out->buffer;
  if (bits <= UINT8_MAX) {
20000ad4:	00a7eb63          	bltu	a5,a0,20000aea <dif_kmac_customization_string_init+0x42>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:59
    out->length = len + 2;
20000ad8:	00268513          	addi	a0,a3,2
20000adc:	d248                	sw	a0,36(a2)
20000ade:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:60
    *buffer++ = 1;
20000ae0:	00a60023          	sb	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:61
    *buffer++ = (char)bits;
20000ae4:	00260513          	addi	a0,a2,2
20000ae8:	a821                	j	20000b00 <dif_kmac_customization_string_init+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:63
  } else {
    out->length = len + 3;
20000aea:	00368513          	addi	a0,a3,3
20000aee:	d248                	sw	a0,36(a2)
20000af0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:64
    *buffer++ = 2;
20000af2:	00a60023          	sb	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:67
    // Most significant byte is first (i.e. big-endian).
    *buffer++ = (char)(bits >> 8);
    *buffer++ = (char)bits;
20000af6:	00360513          	addi	a0,a2,3
20000afa:	00e60123          	sb	a4,2(a2)
20000afe:	4705                	li	a4,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:61
    *buffer++ = (char)bits;
20000b00:	00e600a3          	sb	a4,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:70
  }

  memcpy(buffer, data, len);
20000b04:	8636                	mv	a2,a3
20000b06:	3e79                	jal	200006a4 <memcpy>
20000b08:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:73

  return kDifKmacOk;
}
20000b0a:	40b2                	lw	ra,12(sp)
20000b0c:	0141                	addi	sp,sp,16
20000b0e:	8082                	ret

20000b10 <dif_kmac_function_name_init>:
dif_kmac_function_name_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:76

dif_kmac_result_t dif_kmac_function_name_init(const char *data, size_t len,
                                              dif_kmac_function_name_t *out) {
20000b10:	1141                	addi	sp,sp,-16
20000b12:	c606                	sw	ra,12(sp)
20000b14:	86ae                	mv	a3,a1
20000b16:	85aa                	mv	a1,a0
20000b18:	4711                	li	a4,4
20000b1a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:77
  if ((data == NULL && len != 0) || out == NULL) {
20000b1c:	02d76863          	bltu	a4,a3,20000b4c <dif_kmac_function_name_init+0x3c>
20000b20:	0015b713          	seqz	a4,a1
20000b24:	00d037b3          	snez	a5,a3
20000b28:	8f7d                	and	a4,a4,a5
20000b2a:	e30d                	bnez	a4,20000b4c <dif_kmac_function_name_init+0x3c>
20000b2c:	c205                	beqz	a2,20000b4c <dif_kmac_function_name_init+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:91
                "length requires more than 2 bytes to left encode");
  static_assert(ARRAYSIZE(out->buffer) >= kDifKmacMaxFunctionNameLen + 2,
                "buffer is not large enough");

  // Length of the data to be stored into buffer.
  out->length = len + 2;
20000b2e:	00268513          	addi	a0,a3,2
20000b32:	c608                	sw	a0,8(a2)
20000b34:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:94

  // Left encode length in bits.
  out->buffer[0] = 1;
20000b36:	00a60023          	sb	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:95
  out->buffer[1] = (char)(len * 8);
20000b3a:	00369513          	slli	a0,a3,0x3
20000b3e:	00a600a3          	sb	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:97

  memcpy(&out->buffer[2], data, len);
20000b42:	00260513          	addi	a0,a2,2
20000b46:	8636                	mv	a2,a3
20000b48:	3eb1                	jal	200006a4 <memcpy>
20000b4a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:100

  return kDifKmacOk;
}
20000b4c:	40b2                	lw	ra,12(sp)
20000b4e:	0141                	addi	sp,sp,16
20000b50:	8082                	ret

20000b52 <dif_kmac_init>:
dif_kmac_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:142
  uint32_t reg = mmio_region_read32(params.base_addr, KMAC_STATUS_REG_OFFSET);
  return bitfield_bit32_read(reg, KMAC_STATUS_SHA3_SQUEEZE_BIT);
}

dif_kmac_result_t dif_kmac_init(dif_kmac_params_t params, dif_kmac_t *kmac) {
  if (kmac == NULL) {
20000b52:	cd81                	beqz	a1,20000b6a <dif_kmac_init+0x18>
20000b54:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:146
    return kDifKmacBadArg;
  }

  *kmac = (dif_kmac_t){.params = params};
20000b56:	c188                	sw	a0,0(a1)
20000b58:	0005a223          	sw	zero,4(a1)
20000b5c:	0005a423          	sw	zero,8(a1)
20000b60:	0005a623          	sw	zero,12(a1)
20000b64:	0005a823          	sw	zero,16(a1)
20000b68:	a011                	j	20000b6c <dif_kmac_init+0x1a>
20000b6a:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:148
  return kDifKmacOk;
}
20000b6c:	8532                	mv	a0,a2
20000b6e:	8082                	ret

20000b70 <dif_kmac_configure>:
dif_kmac_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:152

dif_kmac_result_t dif_kmac_configure(dif_kmac_t *kmac,
                                     dif_kmac_config_t config) {
  if (kmac == NULL) {
20000b70:	c135                	beqz	a0,20000bd4 <dif_kmac_configure+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:159
  }

  // Entropy mode.
  uint32_t entropy_mode_value;
  bool entropy_ready = false;
  switch (config.entropy_mode) {
20000b72:	4194                	lw	a3,0(a1)
20000b74:	4609                	li	a2,2
20000b76:	06d66063          	bltu	a2,a3,20000bd6 <dif_kmac_configure+0x66>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:175
    default:
      return kDifKmacBadArg;
  }

  // Check that the hardware is in an idle state.
  if (!is_state_idle(kmac->params)) {
20000b7a:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b7c:	4f10                	lw	a2,24(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b7e:	00167793          	andi	a5,a2,1
20000b82:	460d                	li	a2,3
dif_kmac_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:175
20000b84:	cba9                	beqz	a5,20000bd6 <dif_kmac_configure+0x66>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:159
  switch (config.entropy_mode) {
20000b86:	00269613          	slli	a2,a3,0x2
20000b8a:	00001797          	auipc	a5,0x1
20000b8e:	51e78793          	addi	a5,a5,1310 # 200020a8 <kTestConfig+0x4>
20000b92:	963e                	add	a2,a2,a5
20000b94:	00062803          	lw	a6,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:182
  }

  // Write configuration register.
  uint32_t cfg_reg = 0;
  cfg_reg = bitfield_bit32_write(cfg_reg, KMAC_CFG_MSG_ENDIANNESS_BIT,
                                 config.message_big_endian);
20000b98:	0145c883          	lbu	a7,20(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:184
  cfg_reg = bitfield_bit32_write(cfg_reg, KMAC_CFG_STATE_ENDIANNESS_BIT,
                                 config.output_big_endian);
20000b9c:	0155c283          	lbu	t0,21(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:188
  cfg_reg = bitfield_field32_write(cfg_reg, KMAC_CFG_ENTROPY_MODE_FIELD,
                                   entropy_mode_value);
  cfg_reg = bitfield_bit32_write(cfg_reg, KMAC_CFG_ENTROPY_FAST_PROCESS_BIT,
                                 config.entropy_fast_process);
20000ba0:	0045c783          	lbu	a5,4(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:159
  switch (config.entropy_mode) {
20000ba4:	06c2                	slli	a3,a3,0x10
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000ba6:	00889613          	slli	a2,a7,0x8
20000baa:	00929893          	slli	a7,t0,0x9
20000bae:	07ce                	slli	a5,a5,0x13
20000bb0:	0106e6b3          	or	a3,a3,a6
20000bb4:	8e55                	or	a2,a2,a3
20000bb6:	01166633          	or	a2,a2,a7
20000bba:	8e5d                	or	a2,a2,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000bbc:	cb10                	sw	a2,16(a4)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000bbe:	4990                	lw	a2,16(a1)
dif_kmac_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:201
      entropy_period_reg, KMAC_ENTROPY_PERIOD_ENTROPY_TIMER_FIELD,
      config.entropy_reseed_interval);
  entropy_period_reg = bitfield_field32_write(
      entropy_period_reg, KMAC_ENTROPY_PERIOD_WAIT_TIMER_FIELD,
      config.entropy_wait_timer);
  mmio_region_write32(kmac->params.base_addr, KMAC_ENTROPY_PERIOD_REG_OFFSET,
20000bc0:	4114                	lw	a3,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bc2:	ced0                	sw	a2,28(a3)
dif_kmac_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:207
                      entropy_period_reg);

  // Write entropy seed registers.
  mmio_region_write32(kmac->params.base_addr,
                      KMAC_ENTROPY_SEED_LOWER_REG_OFFSET,
                      (uint32_t)config.entropy_seed);
20000bc4:	4590                	lw	a2,8(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:205
  mmio_region_write32(kmac->params.base_addr,
20000bc6:	4114                	lw	a3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:207
                      (uint32_t)config.entropy_seed);
20000bc8:	45cc                	lw	a1,12(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bca:	d290                	sw	a2,32(a3)
dif_kmac_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:208
  mmio_region_write32(kmac->params.base_addr,
20000bcc:	4108                	lw	a0,0(a0)
20000bce:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000bd0:	d14c                	sw	a1,36(a0)
20000bd2:	a011                	j	20000bd6 <dif_kmac_configure+0x66>
20000bd4:	4609                	li	a2,2
dif_kmac_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:213
                      KMAC_ENTROPY_SEED_UPPER_REG_OFFSET,
                      (uint32_t)(config.entropy_seed >> 32));

  return kDifKmacOk;
}
20000bd6:	8532                	mv	a0,a2
20000bd8:	8082                	ret

20000bda <dif_kmac_mode_sha3_start>:
dif_kmac_mode_sha3_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:231
  // Where c is the capacity (the security level in bits multiplied by two).
  return 1600 - 2 * security_level;
}

dif_kmac_result_t dif_kmac_mode_sha3_start(dif_kmac_t *kmac,
                                           dif_kmac_mode_sha3_t mode) {
20000bda:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:232
  if (kmac == NULL) {
20000bdc:	c939                	beqz	a0,20000c32 <dif_kmac_mode_sha3_start+0x58>
20000bde:	468d                	li	a3,3
20000be0:	04b6e963          	bltu	a3,a1,20000c32 <dif_kmac_mode_sha3_start+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:239
  }

  // Set key strength and calculate rate (r) and digest length (d) in 32-bit
  // words.
  uint32_t kstrength;
  switch (mode) {
20000be4:	00259613          	slli	a2,a1,0x2
20000be8:	00002697          	auipc	a3,0x2
20000bec:	bcc68693          	addi	a3,a3,-1076 # 200027b4 <__clz_tab+0x6a0>
20000bf0:	96b2                	add	a3,a3,a2
20000bf2:	4298                	lw	a4,0(a3)
20000bf4:	00002697          	auipc	a3,0x2
20000bf8:	bd068693          	addi	a3,a3,-1072 # 200027c4 <__clz_tab+0x6b0>
20000bfc:	9636                	add	a2,a2,a3
20000bfe:	4210                	lw	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:269
    default:
      return kDifKmacBadArg;
  }

  // Hardware must be idle to start an operation.
  if (!is_state_idle(kmac->params)) {
20000c00:	4114                	lw	a3,0(a0)
20000c02:	00052423          	sw	zero,8(a0) # 10008 <_dv_log_offset+0x8>
20000c06:	c558                	sw	a4,12(a0)
20000c08:	c910                	sw	a2,16(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c0a:	4e90                	lw	a2,24(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000c0c:	00167713          	andi	a4,a2,1
20000c10:	4605                	li	a2,1
dif_kmac_mode_sha3_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:269
20000c12:	c305                	beqz	a4,20000c32 <dif_kmac_mode_sha3_start+0x58>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c14:	4a90                	lw	a2,16(a3)
dif_kmac_mode_sha3_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:239
  switch (mode) {
20000c16:	0586                	slli	a1,a1,0x1
20000c18:	0589                	addi	a1,a1,2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c1a:	fc167613          	andi	a2,a2,-63
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c1e:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c20:	ca8c                	sw	a1,16(a3)
dif_kmac_mode_sha3_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:285
  mmio_region_write32(kmac->params.base_addr, KMAC_CFG_REG_OFFSET, cfg_reg);

  // Issue start command.
  uint32_t cmd_reg =
      bitfield_field32_write(0, KMAC_CMD_CMD_FIELD, KMAC_CMD_CMD_VALUE_START);
  mmio_region_write32(kmac->params.base_addr, KMAC_CMD_REG_OFFSET, cmd_reg);
20000c22:	410c                	lw	a1,0(a0)
20000c24:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c26:	c9d0                	sw	a2,20(a1)
20000c28:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c2a:	4d0c                	lw	a1,24(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000c2c:	8989                	andi	a1,a1,2
dif_kmac_mode_sha3_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:289

  // Poll until the status register is in the 'absorb' state.
  while (true) {
    if (is_state_absorb(kmac->params)) {
20000c2e:	ddf5                	beqz	a1,20000c2a <dif_kmac_mode_sha3_start+0x50>
20000c30:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:296
    }
    // TODO(#6248): check for error.
  }

  return kDifKmacOk;
}
20000c32:	8532                	mv	a0,a2
20000c34:	8082                	ret

20000c36 <dif_kmac_mode_shake_start>:
dif_kmac_mode_shake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:299

dif_kmac_result_t dif_kmac_mode_shake_start(dif_kmac_t *kmac,
                                            dif_kmac_mode_shake_t mode) {
20000c36:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:300
  if (kmac == NULL) {
20000c38:	c531                	beqz	a0,20000c84 <dif_kmac_mode_shake_start+0x4e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:306
    return kDifKmacBadArg;
  }

  // Set key strength and calculate rate (r).
  uint32_t kstrength;
  switch (mode) {
20000c3a:	c989                	beqz	a1,20000c4c <dif_kmac_mode_shake_start+0x16>
20000c3c:	4685                	li	a3,1
20000c3e:	04d59363          	bne	a1,a3,20000c84 <dif_kmac_mode_shake_start+0x4e>
20000c42:	02400593          	li	a1,36
20000c46:	02200613          	li	a2,34
20000c4a:	a029                	j	20000c54 <dif_kmac_mode_shake_start+0x1e>
20000c4c:	02000593          	li	a1,32
20000c50:	02a00613          	li	a2,42
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:322
  }
  kmac->d = 0;  // Zero indicates variable digest length.
  kmac->offset = 0;

  // Hardware must be idle to start an operation.
  if (!is_state_idle(kmac->params)) {
20000c54:	4114                	lw	a3,0(a0)
20000c56:	c550                	sw	a2,12(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:318
  kmac->d = 0;  // Zero indicates variable digest length.
20000c58:	00052823          	sw	zero,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:319
  kmac->offset = 0;
20000c5c:	00052423          	sw	zero,8(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c60:	4e90                	lw	a2,24(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c62:	00167713          	andi	a4,a2,1
20000c66:	4605                	li	a2,1
dif_kmac_mode_shake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:322
  if (!is_state_idle(kmac->params)) {
20000c68:	cf11                	beqz	a4,20000c84 <dif_kmac_mode_shake_start+0x4e>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c6a:	4a90                	lw	a2,16(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000c6c:	fc167613          	andi	a2,a2,-63
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c70:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c72:	ca8c                	sw	a1,16(a3)
dif_kmac_mode_shake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:338
  mmio_region_write32(kmac->params.base_addr, KMAC_CFG_REG_OFFSET, cfg_reg);

  // Issue start command.
  uint32_t cmd_reg =
      bitfield_field32_write(0, KMAC_CMD_CMD_FIELD, KMAC_CMD_CMD_VALUE_START);
  mmio_region_write32(kmac->params.base_addr, KMAC_CMD_REG_OFFSET, cmd_reg);
20000c74:	410c                	lw	a1,0(a0)
20000c76:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c78:	c9d0                	sw	a2,20(a1)
20000c7a:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c7c:	4d0c                	lw	a1,24(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000c7e:	8989                	andi	a1,a1,2
dif_kmac_mode_shake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:342

  // Poll until the status register is in the 'absorb' state.
  while (true) {
    if (is_state_absorb(kmac->params)) {
20000c80:	ddf5                	beqz	a1,20000c7c <dif_kmac_mode_shake_start+0x46>
20000c82:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:349
    }
    // TODO(#6248): check for error.
  }

  return kDifKmacOk;
}
20000c84:	8532                	mv	a0,a2
20000c86:	8082                	ret

20000c88 <dif_kmac_mode_cshake_start>:
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:354

dif_kmac_result_t dif_kmac_mode_cshake_start(
    dif_kmac_t *kmac, dif_kmac_mode_cshake_t mode,
    const dif_kmac_function_name_t *n,
    const dif_kmac_customization_string_t *s) {
20000c88:	715d                	addi	sp,sp,-80
20000c8a:	c686                	sw	ra,76(sp)
20000c8c:	c4a2                	sw	s0,72(sp)
20000c8e:	c2a6                	sw	s1,68(sp)
20000c90:	c0ca                	sw	s2,64(sp)
20000c92:	de4e                	sw	s3,60(sp)
20000c94:	dc52                	sw	s4,56(sp)
20000c96:	842a                	mv	s0,a0
20000c98:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:355
  if (kmac == NULL) {
20000c9a:	12040c63          	beqz	s0,20000dd2 <dif_kmac_mode_cshake_start+0x14a>
20000c9e:	8936                	mv	s2,a3
20000ca0:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:360
    return kDifKmacBadArg;
  }

  // Use SHAKE if both N and S are empty strings.
  bool n_is_empty = n == NULL || (n->buffer[0] == 1 && n->buffer[1] == 0);
20000ca2:	c615                	beqz	a2,20000cce <dif_kmac_mode_cshake_start+0x46>
20000ca4:	0004c683          	lbu	a3,0(s1)
20000ca8:	4605                	li	a2,1
20000caa:	00c69663          	bne	a3,a2,20000cb6 <dif_kmac_mode_cshake_start+0x2e>
20000cae:	0014c603          	lbu	a2,1(s1)
20000cb2:	00c03633          	snez	a2,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:361
  bool s_is_empty = s == NULL || (s->buffer[0] == 1 && s->buffer[1] == 0);
20000cb6:	00090f63          	beqz	s2,20000cd4 <dif_kmac_mode_cshake_start+0x4c>
20000cba:	00094683          	lbu	a3,0(s2)
20000cbe:	4705                	li	a4,1
20000cc0:	00e69d63          	bne	a3,a4,20000cda <dif_kmac_mode_cshake_start+0x52>
20000cc4:	00194683          	lbu	a3,1(s2)
20000cc8:	00d036b3          	snez	a3,a3
20000ccc:	a029                	j	20000cd6 <dif_kmac_mode_cshake_start+0x4e>
20000cce:	4601                	li	a2,0
20000cd0:	fe0915e3          	bnez	s2,20000cba <dif_kmac_mode_cshake_start+0x32>
20000cd4:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:362
  if (n_is_empty && s_is_empty) {
20000cd6:	8e55                	or	a2,a2,a3
20000cd8:	ca11                	beqz	a2,20000cec <dif_kmac_mode_cshake_start+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:375
    }
  }

  // Set key strength and calculate rate (r).
  uint32_t kstrength;
  switch (mode) {
20000cda:	c185                	beqz	a1,20000cfa <dif_kmac_mode_cshake_start+0x72>
20000cdc:	4605                	li	a2,1
20000cde:	0ec59a63          	bne	a1,a2,20000dd2 <dif_kmac_mode_cshake_start+0x14a>
20000ce2:	03400593          	li	a1,52
20000ce6:	02200513          	li	a0,34
20000cea:	a821                	j	20000d02 <dif_kmac_mode_cshake_start+0x7a>
20000cec:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:363
    switch (mode) {
20000cee:	04c58b63          	beq	a1,a2,20000d44 <dif_kmac_mode_cshake_start+0xbc>
20000cf2:	e1e5                	bnez	a1,20000dd2 <dif_kmac_mode_cshake_start+0x14a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:365
        return dif_kmac_mode_shake_start(kmac, kDifKmacModeShakeLen128);
20000cf4:	8522                	mv	a0,s0
20000cf6:	4581                	li	a1,0
20000cf8:	a881                	j	20000d48 <dif_kmac_mode_cshake_start+0xc0>
20000cfa:	03000593          	li	a1,48
20000cfe:	02a00513          	li	a0,42
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:391
  }
  kmac->d = 0;  // Zero indicates variable digest length.
  kmac->offset = 0;

  // Hardware must be idle to start an operation.
  if (!is_state_idle(kmac->params)) {
20000d02:	4010                	lw	a2,0(s0)
20000d04:	c448                	sw	a0,12(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:387
  kmac->d = 0;  // Zero indicates variable digest length.
20000d06:	00042823          	sw	zero,16(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:388
  kmac->offset = 0;
20000d0a:	00042423          	sw	zero,8(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d0e:	4e08                	lw	a0,24(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d10:	00157693          	andi	a3,a0,1
20000d14:	4505                	li	a0,1
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:391
  if (!is_state_idle(kmac->params)) {
20000d16:	ced5                	beqz	a3,20000dd2 <dif_kmac_mode_cshake_start+0x14a>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d18:	4a08                	lw	a0,16(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000d1a:	fc157513          	andi	a0,a0,-63
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000d1e:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d20:	ca08                	sw	a0,16(a2)
20000d22:	00c10993          	addi	s3,sp,12
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:405
  cfg_reg = bitfield_field32_write(cfg_reg, KMAC_CFG_MODE_FIELD,
                                   KMAC_CFG_MODE_VALUE_CSHAKE);
  mmio_region_write32(kmac->params.base_addr, KMAC_CFG_REG_OFFSET, cfg_reg);

  // Calculate PREFIX register values.
  uint32_t prefix_regs[11] = {0};
20000d26:	02c00613          	li	a2,44
20000d2a:	854e                	mv	a0,s3
20000d2c:	4581                	li	a1,0
20000d2e:	98dff0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:407
  uint8_t *prefix_data = (void *)prefix_regs;
  if (n == NULL) {
20000d32:	c09d                	beqz	s1,20000d58 <dif_kmac_mode_cshake_start+0xd0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:413
    // Append left encoded empty string.
    prefix_data[0] = 1;
    prefix_data[1] = 0;
    prefix_data += 2;
  } else {
    memcpy(prefix_data, n->buffer, n->length);
20000d34:	0084aa03          	lw	s4,8(s1)
20000d38:	0068                	addi	a0,sp,12
20000d3a:	85a6                	mv	a1,s1
20000d3c:	8652                	mv	a2,s4
20000d3e:	967ff0ef          	jal	ra,200006a4 <memcpy>
20000d42:	a839                	j	20000d60 <dif_kmac_mode_cshake_start+0xd8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:367
        return dif_kmac_mode_shake_start(kmac, kDifKmacModeShakeLen256);
20000d44:	4585                	li	a1,1
20000d46:	8522                	mv	a0,s0
20000d48:	5a62                	lw	s4,56(sp)
20000d4a:	59f2                	lw	s3,60(sp)
20000d4c:	4906                	lw	s2,64(sp)
20000d4e:	4496                	lw	s1,68(sp)
20000d50:	4426                	lw	s0,72(sp)
20000d52:	40b6                	lw	ra,76(sp)
20000d54:	6161                	addi	sp,sp,80
20000d56:	b5c5                	j	20000c36 <dif_kmac_mode_shake_start>
20000d58:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:409
    prefix_data[0] = 1;
20000d5a:	00a11623          	sh	a0,12(sp)
20000d5e:	4a09                	li	s4,2
20000d60:	01498533          	add	a0,s3,s4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:416
    prefix_data += n->length;
  }
  if (s == NULL) {
20000d64:	00090863          	beqz	s2,20000d74 <dif_kmac_mode_cshake_start+0xec>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:421
    // Append left encoded empty string.
    prefix_data[0] = 1;
    prefix_data[1] = 0;
  } else {
    memcpy(prefix_data, s->buffer, s->length);
20000d68:	02492603          	lw	a2,36(s2)
20000d6c:	85ca                	mv	a1,s2
20000d6e:	937ff0ef          	jal	ra,200006a4 <memcpy>
20000d72:	a031                	j	20000d7e <dif_kmac_mode_cshake_start+0xf6>
20000d74:	4585                	li	a1,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:418
    prefix_data[0] = 1;
20000d76:	00b50023          	sb	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:419
    prefix_data[1] = 0;
20000d7a:	000500a3          	sb	zero,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:425
  }

  // Write PREFIX register values.
  const mmio_region_t base = kmac->params.base_addr;
20000d7e:	4008                	lw	a0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:426
  mmio_region_write32(base, KMAC_PREFIX_0_REG_OFFSET, prefix_regs[0]);
20000d80:	45b2                	lw	a1,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d82:	0ab52623          	sw	a1,172(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:427
  mmio_region_write32(base, KMAC_PREFIX_1_REG_OFFSET, prefix_regs[1]);
20000d86:	45c2                	lw	a1,16(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d88:	0ab52823          	sw	a1,176(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:428
  mmio_region_write32(base, KMAC_PREFIX_2_REG_OFFSET, prefix_regs[2]);
20000d8c:	45d2                	lw	a1,20(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d8e:	0ab52a23          	sw	a1,180(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:429
  mmio_region_write32(base, KMAC_PREFIX_3_REG_OFFSET, prefix_regs[3]);
20000d92:	45e2                	lw	a1,24(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d94:	0ab52c23          	sw	a1,184(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:430
  mmio_region_write32(base, KMAC_PREFIX_4_REG_OFFSET, prefix_regs[4]);
20000d98:	45f2                	lw	a1,28(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d9a:	0ab52e23          	sw	a1,188(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:431
  mmio_region_write32(base, KMAC_PREFIX_5_REG_OFFSET, prefix_regs[5]);
20000d9e:	5582                	lw	a1,32(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000da0:	0cb52023          	sw	a1,192(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:432
  mmio_region_write32(base, KMAC_PREFIX_6_REG_OFFSET, prefix_regs[6]);
20000da4:	5592                	lw	a1,36(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000da6:	0cb52223          	sw	a1,196(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:433
  mmio_region_write32(base, KMAC_PREFIX_7_REG_OFFSET, prefix_regs[7]);
20000daa:	55a2                	lw	a1,40(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dac:	0cb52423          	sw	a1,200(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:434
  mmio_region_write32(base, KMAC_PREFIX_8_REG_OFFSET, prefix_regs[8]);
20000db0:	55b2                	lw	a1,44(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000db2:	0cb52623          	sw	a1,204(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:435
  mmio_region_write32(base, KMAC_PREFIX_9_REG_OFFSET, prefix_regs[9]);
20000db6:	55c2                	lw	a1,48(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000db8:	0cb52823          	sw	a1,208(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:436
  mmio_region_write32(base, KMAC_PREFIX_10_REG_OFFSET, prefix_regs[10]);
20000dbc:	55d2                	lw	a1,52(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dbe:	0cb52a23          	sw	a1,212(a0)
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:441

  // Issue start command.
  uint32_t cmd_reg =
      bitfield_field32_write(0, KMAC_CMD_CMD_FIELD, KMAC_CMD_CMD_VALUE_START);
  mmio_region_write32(kmac->params.base_addr, KMAC_CMD_REG_OFFSET, cmd_reg);
20000dc2:	4008                	lw	a0,0(s0)
20000dc4:	4585                	li	a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dc6:	c94c                	sw	a1,20(a0)
20000dc8:	4008                	lw	a0,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dca:	4d0c                	lw	a1,24(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000dcc:	8989                	andi	a1,a1,2
dif_kmac_mode_cshake_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:445

  // Poll until the status register is in the 'absorb' state.
  while (true) {
    if (is_state_absorb(kmac->params)) {
20000dce:	ddf5                	beqz	a1,20000dca <dif_kmac_mode_cshake_start+0x142>
20000dd0:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:452
    }
    // TODO(#6248): check for error.
  }

  return kDifKmacOk;
}
20000dd2:	5a62                	lw	s4,56(sp)
20000dd4:	59f2                	lw	s3,60(sp)
20000dd6:	4906                	lw	s2,64(sp)
20000dd8:	4496                	lw	s1,68(sp)
20000dda:	4426                	lw	s0,72(sp)
20000ddc:	40b6                	lw	ra,76(sp)
20000dde:	6161                	addi	sp,sp,80
20000de0:	8082                	ret

20000de2 <dif_kmac_mode_kmac_start>:
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:456

dif_kmac_result_t dif_kmac_mode_kmac_start(
    dif_kmac_t *kmac, dif_kmac_mode_kmac_t mode, size_t l,
    const dif_kmac_key_t *k, const dif_kmac_customization_string_t *s) {
20000de2:	7139                	addi	sp,sp,-64
20000de4:	de06                	sw	ra,60(sp)
20000de6:	dc22                	sw	s0,56(sp)
20000de8:	da26                	sw	s1,52(sp)
20000dea:	d84a                	sw	s2,48(sp)
20000dec:	84ba                	mv	s1,a4
20000dee:	842a                	mv	s0,a0
20000df0:	08000537          	lui	a0,0x8000
20000df4:	ffe50713          	addi	a4,a0,-2 # 7fffffe <test_main.kLogFields.34+0x7fefe6e>
20000df8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:457
  if (kmac == NULL || k == NULL || l > kDifKmacMaxOutputLenWords) {
20000dfa:	12c76463          	bltu	a4,a2,20000f22 <dif_kmac_mode_kmac_start+0x140>
20000dfe:	12040263          	beqz	s0,20000f22 <dif_kmac_mode_kmac_start+0x140>
20000e02:	12068063          	beqz	a3,20000f22 <dif_kmac_mode_kmac_start+0x140>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:463
    return kDifKmacBadArg;
  }

  // Set key strength and calculate rate (r).
  uint32_t kstrength;
  switch (mode) {
20000e06:	c989                	beqz	a1,20000e18 <dif_kmac_mode_kmac_start+0x36>
20000e08:	4705                	li	a4,1
20000e0a:	10e59c63          	bne	a1,a4,20000f22 <dif_kmac_mode_kmac_start+0x140>
20000e0e:	03500813          	li	a6,53
20000e12:	02200713          	li	a4,34
20000e16:	a029                	j	20000e20 <dif_kmac_mode_kmac_start+0x3e>
20000e18:	03100813          	li	a6,49
20000e1c:	02a00713          	li	a4,42
20000e20:	c458                	sw	a4,12(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:475
      kmac->r = calculate_rate_bits(256) / 32;
      break;
    default:
      return kDifKmacBadArg;
  }
  kmac->offset = 0;
20000e22:	00042423          	sw	zero,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:476
  kmac->d = l;
20000e26:	c810                	sw	a2,16(s0)
20000e28:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:477
  kmac->append_d = true;
20000e2a:	00c402a3          	sb	a2,5(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:480

  uint32_t key_len;
  switch (k->length) {
20000e2e:	0806a603          	lw	a2,128(a3)
20000e32:	4711                	li	a4,4
20000e34:	0ec76763          	bltu	a4,a2,20000f22 <dif_kmac_mode_kmac_start+0x140>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:501
    default:
      return kDifKmacBadArg;
  }

  // Hardware must be idle to start an operation.
  if (!is_state_idle(kmac->params)) {
20000e38:	4018                	lw	a4,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e3a:	4f08                	lw	a0,24(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000e3c:	00157793          	andi	a5,a0,1
20000e40:	4505                	li	a0,1
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:501
20000e42:	c3e5                	beqz	a5,20000f22 <dif_kmac_mode_kmac_start+0x140>
20000e44:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e46:	0ac72423          	sw	a2,168(a4)
20000e4a:	04000613          	li	a2,64
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:510
  // Set key length and shares.
  mmio_region_write32(kmac->params.base_addr, KMAC_KEY_LEN_REG_OFFSET, key_len);
  for (int i = 0; i < ARRAYSIZE(k->share0); ++i) {
    mmio_region_write32(kmac->params.base_addr,
                        KMAC_KEY_SHARE0_0_REG_OFFSET + i * sizeof(uint32_t),
                        k->share0[i]);
20000e4e:	00a68733          	add	a4,a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:508
    mmio_region_write32(kmac->params.base_addr,
20000e52:	401c                	lw	a5,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:510
                        k->share0[i]);
20000e54:	430c                	lw	a1,0(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e56:	97aa                	add	a5,a5,a0
20000e58:	d78c                	sw	a1,40(a5)
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:511
    mmio_region_write32(kmac->params.base_addr,
20000e5a:	400c                	lw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:513
                        KMAC_KEY_SHARE1_0_REG_OFFSET + i * sizeof(uint32_t),
                        k->share1[i]);
20000e5c:	4338                	lw	a4,64(a4)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e5e:	95aa                	add	a1,a1,a0
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:507
  for (int i = 0; i < ARRAYSIZE(k->share0); ++i) {
20000e60:	0511                	addi	a0,a0,4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e62:	d5b8                	sw	a4,104(a1)
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:507
20000e64:	fec515e3          	bne	a0,a2,20000e4e <dif_kmac_mode_kmac_start+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:518
  }

  // Configure cSHAKE mode with the given strength and enable KMAC mode.
  uint32_t cfg_reg =
      mmio_region_read32(kmac->params.base_addr, KMAC_CFG_REG_OFFSET);
20000e68:	4008                	lw	a0,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e6a:	4910                	lw	a2,16(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e6c:	fc067613          	andi	a2,a2,-64
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e70:	00c865b3          	or	a1,a6,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e74:	c90c                	sw	a1,16(a0)
20000e76:	0068                	addi	a0,sp,12
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:529
  mmio_region_write32(kmac->params.base_addr, KMAC_CFG_REG_OFFSET, cfg_reg);

  // Initialize prefix registers with function name ("KMAC") and empty
  // customization string. The empty customization string will be overwritten if
  // a non-empty string is provided.
  uint32_t prefix_regs[11] = {
20000e78:	02400613          	li	a2,36
20000e7c:	4581                	li	a1,0
20000e7e:	83dff0ef          	jal	ra,200006ba <memset>
20000e82:	6551                	lui	a0,0x14
20000e84:	34150913          	addi	s2,a0,833 # 14341 <test_main.kLogFields.34+0x41b1>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:536
      0x00014341,  // 'A' 'C'  1   0
  };

  // Encoded customization string (s) must be at least 3 bytes long if it is not
  // the empty string.
  if (s != NULL && s->length >= 3) {
20000e88:	c0b1                	beqz	s1,20000ecc <dif_kmac_mode_kmac_start+0xea>
20000e8a:	50c8                	lw	a0,36(s1)
20000e8c:	458d                	li	a1,3
20000e8e:	02b56f63          	bltu	a0,a1,20000ecc <dif_kmac_mode_kmac_start+0xea>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:539
    // First two bytes overwrite the pre-encoded empty customization string.
    prefix_regs[1] &= 0xFFFF;
    prefix_regs[1] |= (uint32_t)((uint8_t)s->buffer[0]) << 16;
20000e92:	0004c583          	lbu	a1,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:540
    prefix_regs[1] |= (uint32_t)((uint8_t)s->buffer[1]) << 24;
20000e96:	00148603          	lb	a2,1(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:539
    prefix_regs[1] |= (uint32_t)((uint8_t)s->buffer[0]) << 16;
20000e9a:	05c2                	slli	a1,a1,0x10
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:540
    prefix_regs[1] |= (uint32_t)((uint8_t)s->buffer[1]) << 24;
20000e9c:	0662                	slli	a2,a2,0x18
20000e9e:	8dd1                	or	a1,a1,a2
20000ea0:	6611                	lui	a2,0x4
20000ea2:	34160613          	addi	a2,a2,833 # 4341 <_stack_size+0x2341>
20000ea6:	00c5e933          	or	s2,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:541
    memcpy(&prefix_regs[2], &s->buffer[2], s->length - 2);
20000eaa:	00248593          	addi	a1,s1,2
20000eae:	ffe50613          	addi	a2,a0,-2
20000eb2:	0068                	addi	a0,sp,12
20000eb4:	ff0ff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:548

  // Write PREFIX register values.
  const mmio_region_t base = kmac->params.base_addr;
  mmio_region_write32(base, KMAC_PREFIX_0_REG_OFFSET, prefix_regs[0]);
  mmio_region_write32(base, KMAC_PREFIX_1_REG_OFFSET, prefix_regs[1]);
  mmio_region_write32(base, KMAC_PREFIX_2_REG_OFFSET, prefix_regs[2]);
20000eb8:	45b2                	lw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:549
  mmio_region_write32(base, KMAC_PREFIX_3_REG_OFFSET, prefix_regs[3]);
20000eba:	4542                	lw	a0,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:550
  mmio_region_write32(base, KMAC_PREFIX_4_REG_OFFSET, prefix_regs[4]);
20000ebc:	44d2                	lw	s1,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:551
  mmio_region_write32(base, KMAC_PREFIX_5_REG_OFFSET, prefix_regs[5]);
20000ebe:	47e2                	lw	a5,24(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:552
  mmio_region_write32(base, KMAC_PREFIX_6_REG_OFFSET, prefix_regs[6]);
20000ec0:	4772                	lw	a4,28(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:553
  mmio_region_write32(base, KMAC_PREFIX_7_REG_OFFSET, prefix_regs[7]);
20000ec2:	5302                	lw	t1,32(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:554
  mmio_region_write32(base, KMAC_PREFIX_8_REG_OFFSET, prefix_regs[8]);
20000ec4:	5292                	lw	t0,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:555
  mmio_region_write32(base, KMAC_PREFIX_9_REG_OFFSET, prefix_regs[9]);
20000ec6:	58a2                	lw	a7,40(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:556
  mmio_region_write32(base, KMAC_PREFIX_10_REG_OFFSET, prefix_regs[10]);
20000ec8:	5832                	lw	a6,44(sp)
20000eca:	a811                	j	20000ede <dif_kmac_mode_kmac_start+0xfc>
20000ecc:	4801                	li	a6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:555
  mmio_region_write32(base, KMAC_PREFIX_9_REG_OFFSET, prefix_regs[9]);
20000ece:	4881                	li	a7,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:554
  mmio_region_write32(base, KMAC_PREFIX_8_REG_OFFSET, prefix_regs[8]);
20000ed0:	4281                	li	t0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:553
  mmio_region_write32(base, KMAC_PREFIX_7_REG_OFFSET, prefix_regs[7]);
20000ed2:	4301                	li	t1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:552
  mmio_region_write32(base, KMAC_PREFIX_6_REG_OFFSET, prefix_regs[6]);
20000ed4:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:551
  mmio_region_write32(base, KMAC_PREFIX_5_REG_OFFSET, prefix_regs[5]);
20000ed6:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:550
  mmio_region_write32(base, KMAC_PREFIX_4_REG_OFFSET, prefix_regs[4]);
20000ed8:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:549
  mmio_region_write32(base, KMAC_PREFIX_3_REG_OFFSET, prefix_regs[3]);
20000eda:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:548
  mmio_region_write32(base, KMAC_PREFIX_2_REG_OFFSET, prefix_regs[2]);
20000edc:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:545
  const mmio_region_t base = kmac->params.base_addr;
20000ede:	4010                	lw	a2,0(s0)
20000ee0:	4d4b26b7          	lui	a3,0x4d4b2
20000ee4:	0685                	addi	a3,a3,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ee6:	0ad62623          	sw	a3,172(a2)
20000eea:	0b262823          	sw	s2,176(a2)
20000eee:	0ab62a23          	sw	a1,180(a2)
20000ef2:	0aa62c23          	sw	a0,184(a2)
20000ef6:	0a962e23          	sw	s1,188(a2)
20000efa:	0cf62023          	sw	a5,192(a2)
20000efe:	0ce62223          	sw	a4,196(a2)
20000f02:	0c662423          	sw	t1,200(a2)
20000f06:	0c562623          	sw	t0,204(a2)
20000f0a:	0d162823          	sw	a7,208(a2)
20000f0e:	0d062a23          	sw	a6,212(a2)
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:561

  // Issue start command.
  uint32_t cmd_reg =
      bitfield_field32_write(0, KMAC_CMD_CMD_FIELD, KMAC_CMD_CMD_VALUE_START);
  mmio_region_write32(kmac->params.base_addr, KMAC_CMD_REG_OFFSET, cmd_reg);
20000f12:	4008                	lw	a0,0(s0)
20000f14:	4585                	li	a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f16:	c94c                	sw	a1,20(a0)
20000f18:	4008                	lw	a0,0(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f1a:	4d0c                	lw	a1,24(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000f1c:	8989                	andi	a1,a1,2
dif_kmac_mode_kmac_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:565

  // Poll until the status register is in the 'absorb' state.
  while (true) {
    if (is_state_absorb(kmac->params)) {
20000f1e:	ddf5                	beqz	a1,20000f1a <dif_kmac_mode_kmac_start+0x138>
20000f20:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:572
    }
    // TODO(#6248): check for error.
  }

  return kDifKmacOk;
}
20000f22:	5942                	lw	s2,48(sp)
20000f24:	54d2                	lw	s1,52(sp)
20000f26:	5462                	lw	s0,56(sp)
20000f28:	50f2                	lw	ra,60(sp)
20000f2a:	6121                	addi	sp,sp,64
20000f2c:	8082                	ret

20000f2e <dif_kmac_absorb>:
dif_kmac_absorb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:577

dif_kmac_result_t dif_kmac_absorb(dif_kmac_t *kmac, const void *msg, size_t len,
                                  size_t *processed) {
  // Set the number of bytes processed to 0.
  if (processed != NULL) {
20000f2e:	c299                	beqz	a3,20000f34 <dif_kmac_absorb+0x6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:578
    *processed = 0;
20000f30:	0006a023          	sw	zero,0(a3) # 4d4b2000 <_data_init_start+0x2d4af808>
20000f34:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:581
  }

  if (kmac == NULL || (msg == NULL && len != 0)) {
20000f36:	c921                	beqz	a0,20000f86 <dif_kmac_absorb+0x58>
20000f38:	e191                	bnez	a1,20000f3c <dif_kmac_absorb+0xe>
20000f3a:	e631                	bnez	a2,20000f86 <dif_kmac_absorb+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:586
    return kDifKmacBadArg;
  }

  // Check that an operation has been started.
  if (kmac->r == 0) {
20000f3c:	455c                	lw	a5,12(a0)
20000f3e:	4705                	li	a4,1
20000f40:	c3b9                	beqz	a5,20000f86 <dif_kmac_absorb+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:591
    return kDifKmacError;
  }

  // Poll until the the status register is in the 'absorb' state.
  if (!is_state_absorb(kmac->params)) {
20000f42:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f46:	01882783          	lw	a5,24(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000f4a:	8b89                	andi	a5,a5,2
dif_kmac_absorb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:591
20000f4c:	cf8d                	beqz	a5,20000f86 <dif_kmac_absorb+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:599

  // Copy the message one byte at a time.
  // This could be sped up copying a word at a time but be careful
  // about message endianness (e.g. only copy a word at a time when in
  // little-endian mode).
  for (size_t i = 0; i < len; ++i) {
20000f4e:	ca0d                	beqz	a2,20000f80 <dif_kmac_absorb+0x52>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:601
    mmio_region_write8(kmac->params.base_addr, KMAC_MSG_FIFO_REG_OFFSET,
                       ((const uint8_t *)msg)[i]);
20000f50:	00058883          	lb	a7,0(a1)
20000f54:	6705                	lui	a4,0x1
20000f56:	80070293          	addi	t0,a4,-2048 # 800 <__DYNAMIC+0x800>
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
20000f5a:	005807b3          	add	a5,a6,t0
20000f5e:	4805                	li	a6,1
20000f60:	01178023          	sb	a7,0(a5)
dif_kmac_absorb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:599
  for (size_t i = 0; i < len; ++i) {
20000f64:	01060e63          	beq	a2,a6,20000f80 <dif_kmac_absorb+0x52>
20000f68:	0585                	addi	a1,a1,1
20000f6a:	fff60793          	addi	a5,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:600
    mmio_region_write8(kmac->params.base_addr, KMAC_MSG_FIFO_REG_OFFSET,
20000f6e:	4118                	lw	a4,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:601
                       ((const uint8_t *)msg)[i]);
20000f70:	00058803          	lb	a6,0(a1)
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
20000f74:	9716                	add	a4,a4,t0
20000f76:	01070023          	sb	a6,0(a4)
dif_kmac_absorb():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:599
  for (size_t i = 0; i < len; ++i) {
20000f7a:	17fd                	addi	a5,a5,-1
20000f7c:	0585                	addi	a1,a1,1
20000f7e:	fbe5                	bnez	a5,20000f6e <dif_kmac_absorb+0x40>
20000f80:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:604
  }

  if (processed != NULL) {
20000f82:	c291                	beqz	a3,20000f86 <dif_kmac_absorb+0x58>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:605
    *processed = len;
20000f84:	c290                	sw	a2,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:608
  }
  return kDifKmacOk;
}
20000f86:	853a                	mv	a0,a4
20000f88:	8082                	ret

20000f8a <dif_kmac_squeeze>:
dif_kmac_squeeze():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:611

dif_kmac_result_t dif_kmac_squeeze(dif_kmac_t *kmac, uint32_t *out, size_t len,
                                   size_t *processed) {
20000f8a:	4809                	li	a6,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:612
  if (kmac == NULL || (out == NULL && len != 0)) {
20000f8c:	12050463          	beqz	a0,200010b4 <dif_kmac_squeeze+0x12a>
20000f90:	e199                	bnez	a1,20000f96 <dif_kmac_squeeze+0xc>
20000f92:	12061163          	bnez	a2,200010b4 <dif_kmac_squeeze+0x12a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:617
    return kDifKmacBadArg;
  }

  // Set `processed` to 0 so we can return early without setting it again.
  if (processed != NULL) {
20000f96:	c299                	beqz	a3,20000f9c <dif_kmac_squeeze+0x12>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:618
    *processed = 0;
20000f98:	0006a023          	sw	zero,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:625

  const mmio_region_t base = kmac->params.base_addr;

  // Move into squeezing state (if not already in it).
  // Do this even if the length requested is 0 or too big.
  if (!kmac->squeezing) {
20000f9c:	00454703          	lbu	a4,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:621
  const mmio_region_t base = kmac->params.base_addr;
20000fa0:	00052e03          	lw	t3,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:625
  if (!kmac->squeezing) {
20000fa4:	eb35                	bnez	a4,20001018 <dif_kmac_squeeze+0x8e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:626
    if (kmac->append_d) {
20000fa6:	00554703          	lbu	a4,5(a0)
20000faa:	c32d                	beqz	a4,2000100c <dif_kmac_squeeze+0x82>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:632
      // The KMAC operation requires that the output length (d) in bits be right
      // encoded and appended to the end of the message.
      // Note: kDifKmacMaxOutputLenWords could be reduced to make this code
      // simpler. For example, a maximum of `(UINT16_MAX - 32) / 32` (just under
      // 8 KiB) would mean that d is guaranteed to be less than 0xFFFF.
      uint32_t d = kmac->d * 32;
20000fac:	4918                	lw	a4,16(a0)
20000fae:	00571893          	slli	a7,a4,0x5
20000fb2:	0ff00713          	li	a4,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:633
      int len = 1 + (d > 0xFF) + (d > 0xFFFF) + (d > 0xFFFFFF);
20000fb6:	01173733          	sltu	a4,a4,a7
20000fba:	0108d793          	srli	a5,a7,0x10
20000fbe:	00f037b3          	snez	a5,a5
20000fc2:	973e                	add	a4,a4,a5
20000fc4:	0188d793          	srli	a5,a7,0x18
20000fc8:	00f037b3          	snez	a5,a5
20000fcc:	973e                	add	a4,a4,a5
20000fce:	00170813          	addi	a6,a4,1
20000fd2:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:635
      int shift = (len - 1) * 8;
      while (shift >= 8) {
20000fd4:	02e86463          	bltu	a6,a4,20000ffc <dif_kmac_squeeze+0x72>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:634
      int shift = (len - 1) * 8;
20000fd8:	00381713          	slli	a4,a6,0x3
20000fdc:	6785                	lui	a5,0x1
20000fde:	80078793          	addi	a5,a5,-2048 # 800 <__DYNAMIC+0x800>
20000fe2:	00fe0333          	add	t1,t3,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:635
      while (shift >= 8) {
20000fe6:	0721                	addi	a4,a4,8
20000fe8:	42dd                	li	t0,23
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:637
        mmio_region_write8(base, KMAC_MSG_FIFO_REG_OFFSET,
                           (uint8_t)(d >> shift));
20000fea:	ff070793          	addi	a5,a4,-16
20000fee:	00f8d7b3          	srl	a5,a7,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:635
      while (shift >= 8) {
20000ff2:	1761                	addi	a4,a4,-8
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
20000ff4:	00f30023          	sb	a5,0(t1)
dif_kmac_squeeze():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:635
20000ff8:	fee2c9e3          	blt	t0,a4,20000fea <dif_kmac_squeeze+0x60>
20000ffc:	6705                	lui	a4,0x1
20000ffe:	80070713          	addi	a4,a4,-2048 # 800 <__DYNAMIC+0x800>
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
20001002:	9772                	add	a4,a4,t3
20001004:	01170023          	sb	a7,0(a4)
20001008:	01070023          	sb	a6,0(a4)
2000100c:	4705                	li	a4,1
dif_kmac_squeeze():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:643
        shift -= 8;
      }
      mmio_region_write8(base, KMAC_MSG_FIFO_REG_OFFSET, (uint8_t)d);
      mmio_region_write8(base, KMAC_MSG_FIFO_REG_OFFSET, (uint8_t)len);
    }
    kmac->squeezing = true;
2000100e:	00e50223          	sb	a4,4(a0)
20001012:	4709                	li	a4,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001014:	00ee2a23          	sw	a4,20(t3)
dif_kmac_squeeze():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:653
    mmio_region_write32(base, KMAC_CMD_REG_OFFSET, cmd_reg);
  }

  // If the operation has a fixed length output then the total number of bytes
  // requested must not exceed that length.
  if (kmac->d != 0 && len > (kmac->d - kmac->offset)) {
20001018:	01052883          	lw	a7,16(a0)
2000101c:	00088863          	beqz	a7,2000102c <dif_kmac_squeeze+0xa2>
20001020:	4518                	lw	a4,8(a0)
20001022:	40e88733          	sub	a4,a7,a4
20001026:	4805                	li	a6,1
20001028:	08c76663          	bltu	a4,a2,200010b4 <dif_kmac_squeeze+0x12a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:657
    return kDifKmacError;
  }

  if (len == 0) {
2000102c:	c259                	beqz	a2,200010b2 <dif_kmac_squeeze+0x128>
2000102e:	4811                	li	a6,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:663
    return kDifKmacOk;
  }

  while (len > 0) {
    size_t n = len;
    size_t remaining = kmac->r - kmac->offset;
20001030:	00c52303          	lw	t1,12(a0)
20001034:	00852283          	lw	t0,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:664
    if (kmac->d != 0 && kmac->d < kmac->r) {
20001038:	8746                	mv	a4,a7
2000103a:	0068e363          	bltu	a7,t1,20001040 <dif_kmac_squeeze+0xb6>
2000103e:	871a                	mv	a4,t1
20001040:	00089363          	bnez	a7,20001046 <dif_kmac_squeeze+0xbc>
20001044:	871a                	mv	a4,t1
20001046:	405703b3          	sub	t2,a4,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:667
      remaining = kmac->d - kmac->offset;
    }
    if (n > remaining) {
2000104a:	00c3e363          	bltu	t2,a2,20001050 <dif_kmac_squeeze+0xc6>
2000104e:	83b2                	mv	t2,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:670
      n = remaining;
    }
    if (n == 0) {
20001050:	04038363          	beqz	t2,20001096 <dif_kmac_squeeze+0x10c>
20001054:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001056:	4f1c                	lw	a5,24(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001058:	8b91                	andi	a5,a5,4
2000105a:	dff5                	beqz	a5,20001056 <dif_kmac_squeeze+0xcc>
dif_kmac_squeeze():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:695
        break;
      }
      // TODO(#6248): check for error.
    }

    uint32_t offset = KMAC_STATE_REG_OFFSET + kmac->offset * sizeof(uint32_t);
2000105c:	00229713          	slli	a4,t0,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:696
    for (size_t i = 0; i < n; ++i) {
20001060:	50070313          	addi	t1,a4,1280
20001064:	879e                	mv	a5,t2
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001066:	006e08b3          	add	a7,t3,t1
2000106a:	f008a283          	lw	t0,-256(a7)
2000106e:	0008a883          	lw	a7,0(a7)
dif_kmac_squeeze():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:701
      // Read both shares from state register and combine using XOR.
      uint32_t share0 = mmio_region_read32(base, offset);
      uint32_t share1 =
          mmio_region_read32(base, offset + kDifKmacStateShareOffset);
      *out++ = share0 ^ share1;
20001072:	0058c733          	xor	a4,a7,t0
20001076:	c198                	sw	a4,0(a1)
20001078:	0591                	addi	a1,a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:696
    for (size_t i = 0; i < n; ++i) {
2000107a:	17fd                	addi	a5,a5,-1
2000107c:	0311                	addi	t1,t1,4
2000107e:	f7e5                	bnez	a5,20001066 <dif_kmac_squeeze+0xdc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:704
      offset += sizeof(uint32_t);
    }
    kmac->offset += n;
20001080:	4518                	lw	a4,8(a0)
20001082:	971e                	add	a4,a4,t2
20001084:	c518                	sw	a4,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:705
    len -= n;
20001086:	40760633          	sub	a2,a2,t2
2000108a:	c681                	beqz	a3,20001092 <dif_kmac_squeeze+0x108>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:707
    if (processed != NULL) {
      *processed += n;
2000108c:	4298                	lw	a4,0(a3)
2000108e:	971e                	add	a4,a4,t2
20001090:	c298                	sw	a4,0(a3)
20001092:	ee09                	bnez	a2,200010ac <dif_kmac_squeeze+0x122>
20001094:	a839                	j	200010b2 <dif_kmac_squeeze+0x128>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:672
      if (kmac->d != 0) {
20001096:	00088763          	beqz	a7,200010a4 <dif_kmac_squeeze+0x11a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:673
        if (kmac->d <= kmac->r) {
2000109a:	01137f63          	bgeu	t1,a7,200010b8 <dif_kmac_squeeze+0x12e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:676
        kmac->d -= kmac->r;
2000109e:	40688733          	sub	a4,a7,t1
200010a2:	c918                	sw	a4,16(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200010a4:	010e2a23          	sw	a6,20(t3)
dif_kmac_squeeze():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:683
      kmac->offset = 0;
200010a8:	00052423          	sw	zero,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:664
    if (kmac->d != 0 && kmac->d < kmac->r) {
200010ac:	01052883          	lw	a7,16(a0)
200010b0:	b741                	j	20001030 <dif_kmac_squeeze+0xa6>
200010b2:	4801                	li	a6,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:711
    }
  }
  return kDifKmacOk;
}
200010b4:	8542                	mv	a0,a6
200010b6:	8082                	ret
200010b8:	4805                	li	a6,1
200010ba:	bfed                	j	200010b4 <dif_kmac_squeeze+0x12a>

200010bc <dif_kmac_end>:
dif_kmac_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:714

dif_kmac_result_t dif_kmac_end(dif_kmac_t *kmac) {
  if (kmac == NULL) {
200010bc:	c905                	beqz	a0,200010ec <dif_kmac_end+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:720
    return kDifKmacBadArg;
  }

  // The hardware should (must?) complete squeeze operation before the DONE
  // command is issued.
  if (!kmac->squeezing) {
200010be:	00454583          	lbu	a1,4(a0)
200010c2:	c59d                	beqz	a1,200010f0 <dif_kmac_end+0x34>
200010c4:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010c6:	4d90                	lw	a2,24(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200010c8:	8a11                	andi	a2,a2,4
dif_kmac_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:724
    return kDifKmacError;
  }
  while (true) {
    if (is_state_squeeze(kmac->params)) {
200010ca:	de75                	beqz	a2,200010c6 <dif_kmac_end+0xa>
200010cc:	4621                	li	a2,8
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200010ce:	c9d0                	sw	a2,20(a1)
dif_kmac_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:736
  uint32_t cmd_reg =
      bitfield_field32_write(0, KMAC_CMD_CMD_FIELD, KMAC_CMD_CMD_VALUE_DONE);
  mmio_region_write32(kmac->params.base_addr, KMAC_CMD_REG_OFFSET, cmd_reg);

  // Reset state.
  kmac->squeezing = false;
200010d0:	00051223          	sh	zero,4(a0)
200010d4:	410c                	lw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:738
  kmac->append_d = false;
  kmac->offset = 0;
200010d6:	00052423          	sw	zero,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:739
  kmac->r = 0;
200010da:	00052623          	sw	zero,12(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:740
  kmac->d = 0;
200010de:	00052823          	sw	zero,16(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200010e2:	4d88                	lw	a0,24(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200010e4:	8905                	andi	a0,a0,1
dif_kmac_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:744

  // Poll status register until in idle state.
  while (true) {
    if (is_state_idle(kmac->params)) {
200010e6:	dd75                	beqz	a0,200010e2 <dif_kmac_end+0x26>
200010e8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_kmac.c:751
    }
    // TODO(#6248): check for error.
  }

  return kDifKmacOk;
}
200010ea:	8082                	ret
200010ec:	4509                	li	a0,2
200010ee:	8082                	ret
200010f0:	4505                	li	a0,1
200010f2:	8082                	ret

200010f4 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
200010f4:	7139                	addi	sp,sp,-64
200010f6:	ce06                	sw	ra,28(sp)
200010f8:	cc22                	sw	s0,24(sp)
200010fa:	ca26                	sw	s1,20(sp)
200010fc:	c84a                	sw	s2,16(sp)
200010fe:	892a                	mv	s2,a0
20001100:	de46                	sw	a7,60(sp)
20001102:	dc42                	sw	a6,56(sp)
20001104:	da3e                	sw	a5,52(sp)
20001106:	d83a                	sw	a4,48(sp)
20001108:	d636                	sw	a3,44(sp)
2000110a:	d432                	sw	a2,40(sp)
2000110c:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
2000110e:	4144                	lw	s1,4(a0)
20001110:	80000537          	lui	a0,0x80000
20001114:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffd807>
20001118:	8526                	mv	a0,s1
2000111a:	4581                	li	a1,0
2000111c:	dd8ff0ef          	jal	ra,200006f4 <memchr>
20001120:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20001124:	02f00593          	li	a1,47
20001128:	8526                	mv	a0,s1
2000112a:	de2ff0ef          	jal	ra,2000070c <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
2000112e:	00092583          	lw	a1,0(s2)
20001132:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001134:	00b66b63          	bltu	a2,a1,2000114a <base_log_internal_core+0x56>
20001138:	058a                	slli	a1,a1,0x2
2000113a:	00001617          	auipc	a2,0x1
2000113e:	f7a60613          	addi	a2,a2,-134 # 200020b4 <kTestConfig+0x10>
20001142:	95b2                	add	a1,a1,a2
20001144:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
20001146:	e519                	bnez	a0,20001154 <base_log_internal_core+0x60>
20001148:	a801                	j	20001158 <base_log_internal_core+0x64>
2000114a:	00001597          	auipc	a1,0x1
2000114e:	6a358593          	addi	a1,a1,1699 # 200027ed <__clz_tab+0x6d9>
20001152:	c119                	beqz	a0,20001158 <base_log_internal_core+0x64>
20001154:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20001158:	effff417          	auipc	s0,0xeffff
2000115c:	eb440413          	addi	s0,s0,-332 # 1000000c <base_log_internal_core.global_log_counter>
20001160:	00045603          	lhu	a2,0(s0)
20001164:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001168:	00001517          	auipc	a0,0x1
2000116c:	66c50513          	addi	a0,a0,1644 # 200027d4 <__clz_tab+0x6c0>
20001170:	86a6                	mv	a3,s1
20001172:	28d1                	jal	20001246 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
20001174:	00041503          	lh	a0,0(s0)
20001178:	0505                	addi	a0,a0,1
2000117a:	00a41023          	sh	a0,0(s0)
2000117e:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20001180:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
20001182:	01092503          	lw	a0,16(s2)
20001186:	28c5                	jal	20001276 <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001188:	00001517          	auipc	a0,0x1
2000118c:	65a50513          	addi	a0,a0,1626 # 200027e2 <__clz_tab+0x6ce>
20001190:	285d                	jal	20001246 <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
20001192:	4942                	lw	s2,16(sp)
20001194:	44d2                	lw	s1,20(sp)
20001196:	4462                	lw	s0,24(sp)
20001198:	40f2                	lw	ra,28(sp)
2000119a:	6121                	addi	sp,sp,64
2000119c:	8082                	ret

2000119e <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
2000119e:	1101                	addi	sp,sp,-32
200011a0:	ce46                	sw	a7,28(sp)
200011a2:	cc42                	sw	a6,24(sp)
200011a4:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
200011a6:	00001797          	auipc	a5,0x1
200011aa:	d1a78793          	addi	a5,a5,-742 # 20001ec0 <kDeviceLogBypassUartAddress>
200011ae:	439c                	lw	a5,0(a5)
200011b0:	c83a                	sw	a4,16(sp)
200011b2:	c636                	sw	a3,12(sp)
200011b4:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200011b6:	c388                	sw	a0,0(a5)
200011b8:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
200011ba:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
200011bc:	c989                	beqz	a1,200011ce <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
200011be:	4512                	lw	a0,4(sp)
200011c0:	00450613          	addi	a2,a0,4
200011c4:	c232                	sw	a2,4(sp)
200011c6:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
200011c8:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200011ca:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
200011cc:	f9ed                	bnez	a1,200011be <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
200011ce:	6105                	addi	sp,sp,32
200011d0:	8082                	ret
	...

200011d4 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
200011d4:	e589                	bnez	a1,200011de <base_set_stdout+0xa>
200011d6:	00000597          	auipc	a1,0x0
200011da:	01658593          	addi	a1,a1,22 # 200011ec <base_dev_null>
200011de:	effff617          	auipc	a2,0xeffff
200011e2:	e2260613          	addi	a2,a2,-478 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
200011e6:	c208                	sw	a0,0(a2)
200011e8:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200011ea:	8082                	ret

200011ec <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
200011ec:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
200011ee:	8082                	ret

200011f0 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
200011f0:	effff597          	auipc	a1,0xeffff
200011f4:	e1058593          	addi	a1,a1,-496 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
200011f8:	c188                	sw	a0,0(a1)
200011fa:	00000517          	auipc	a0,0x0
200011fe:	00c50513          	addi	a0,a0,12 # 20001206 <base_dev_uart>
20001202:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001204:	8082                	ret

20001206 <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
20001206:	1101                	addi	sp,sp,-32
20001208:	ce06                	sw	ra,28(sp)
2000120a:	cc22                	sw	s0,24(sp)
2000120c:	ca26                	sw	s1,20(sp)
2000120e:	c84a                	sw	s2,16(sp)
20001210:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001212:	c20d                	beqz	a2,20001234 <base_dev_uart+0x2e>
20001214:	8432                	mv	s0,a2
20001216:	892e                	mv	s2,a1
20001218:	89aa                	mv	s3,a0
2000121a:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
2000121c:	00990533          	add	a0,s2,s1
20001220:	00054583          	lbu	a1,0(a0)
20001224:	854e                	mv	a0,s3
20001226:	2f11                	jal	2000193a <dif_uart_byte_send_polled>
20001228:	e519                	bnez	a0,20001236 <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
2000122a:	0485                	addi	s1,s1,1
2000122c:	fe9418e3          	bne	s0,s1,2000121c <base_dev_uart+0x16>
20001230:	84a2                	mv	s1,s0
20001232:	a011                	j	20001236 <base_dev_uart+0x30>
20001234:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
20001236:	8526                	mv	a0,s1
20001238:	49b2                	lw	s3,12(sp)
2000123a:	4942                	lw	s2,16(sp)
2000123c:	44d2                	lw	s1,20(sp)
2000123e:	4462                	lw	s0,24(sp)
20001240:	40f2                	lw	ra,28(sp)
20001242:	6105                	addi	sp,sp,32
20001244:	8082                	ret

20001246 <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
20001246:	7179                	addi	sp,sp,-48
20001248:	c606                	sw	ra,12(sp)
2000124a:	d646                	sw	a7,44(sp)
2000124c:	d442                	sw	a6,40(sp)
2000124e:	d23e                	sw	a5,36(sp)
20001250:	d03a                	sw	a4,32(sp)
20001252:	ce36                	sw	a3,28(sp)
20001254:	cc32                	sw	a2,24(sp)
20001256:	ca2e                	sw	a1,20(sp)
20001258:	effff597          	auipc	a1,0xeffff
2000125c:	da858593          	addi	a1,a1,-600 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20001260:	4190                	lw	a2,0(a1)
20001262:	41cc                	lw	a1,4(a1)
20001264:	872a                	mv	a4,a0
20001266:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20001268:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000126a:	8532                	mv	a0,a2
2000126c:	863a                	mv	a2,a4
2000126e:	200d                	jal	20001290 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20001270:	40b2                	lw	ra,12(sp)
20001272:	6145                	addi	sp,sp,48
20001274:	8082                	ret

20001276 <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
20001276:	effff697          	auipc	a3,0xeffff
2000127a:	d8a68693          	addi	a3,a3,-630 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
2000127e:	4290                	lw	a2,0(a3)
20001280:	42d4                	lw	a3,4(a3)
20001282:	872e                	mv	a4,a1
20001284:	87aa                	mv	a5,a0
20001286:	8532                	mv	a0,a2
20001288:	85b6                	mv	a1,a3
2000128a:	863e                	mv	a2,a5
2000128c:	86ba                	mv	a3,a4
2000128e:	a009                	j	20001290 <base_vfprintf>

20001290 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20001290:	7139                	addi	sp,sp,-64
20001292:	de06                	sw	ra,60(sp)
20001294:	dc22                	sw	s0,56(sp)
20001296:	da26                	sw	s1,52(sp)
20001298:	d84a                	sw	s2,48(sp)
2000129a:	d64e                	sw	s3,44(sp)
2000129c:	d452                	sw	s4,40(sp)
2000129e:	d256                	sw	s5,36(sp)
200012a0:	d05a                	sw	s6,32(sp)
200012a2:	ce5e                	sw	s7,28(sp)
200012a4:	cc62                	sw	s8,24(sp)
200012a6:	ca66                	sw	s9,20(sp)
200012a8:	c86a                	sw	s10,16(sp)
200012aa:	c66e                	sw	s11,12(sp)
200012ac:	8bb2                	mv	s7,a2
200012ae:	892a                	mv	s2,a0
200012b0:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
200012b2:	c199                	beqz	a1,200012b8 <base_vfprintf+0x28>
200012b4:	89ae                	mv	s3,a1
200012b6:	a029                	j	200012c0 <base_vfprintf+0x30>
200012b8:	00000997          	auipc	s3,0x0
200012bc:	f3498993          	addi	s3,s3,-204 # 200011ec <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
200012c0:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
200012c2:	000bc503          	lbu	a0,0(s7)
200012c6:	28050f63          	beqz	a0,20001564 <base_vfprintf+0x2d4>
200012ca:	4b01                	li	s6,0
200012cc:	02500c13          	li	s8,37
200012d0:	4ca5                	li	s9,9
200012d2:	02000d13          	li	s10,32
200012d6:	06800d93          	li	s11,104
200012da:	00001a17          	auipc	s4,0x1
200012de:	515a0a13          	addi	s4,s4,1301 # 200027ef <__clz_tab+0x6db>
200012e2:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
200012e4:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
200012e6:	0ff57413          	andi	s0,a0,255
200012ea:	01840963          	beq	s0,s8,200012fc <base_vfprintf+0x6c>
200012ee:	c419                	beqz	s0,200012fc <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200012f0:	009b8533          	add	a0,s7,s1
200012f4:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200012f8:	0485                	addi	s1,s1,1
200012fa:	b7f5                	j	200012e6 <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200012fc:	c491                	beqz	s1,20001308 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200012fe:	854a                	mv	a0,s2
20001300:	85de                	mv	a1,s7
20001302:	8626                	mv	a2,s1
20001304:	9982                	jalr	s3
20001306:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20001308:	24040f63          	beqz	s0,20001566 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000130c:	009b8633          	add	a2,s7,s1
20001310:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001314:	22050f63          	beqz	a0,20001552 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001318:	fd050593          	addi	a1,a0,-48
2000131c:	0ff5f593          	andi	a1,a1,255
20001320:	00bcf863          	bgeu	s9,a1,20001330 <base_vfprintf+0xa0>
20001324:	4401                	li	s0,0
20001326:	4581                	li	a1,0
20001328:	4605                	li	a2,1
2000132a:	028d7f63          	bgeu	s10,s0,20001368 <base_vfprintf+0xd8>
2000132e:	aca1                	j	20001586 <base_vfprintf+0x2f6>
20001330:	4581                	li	a1,0
20001332:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001334:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001336:	00b606b3          	add	a3,a2,a1
2000133a:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000133e:	20068a63          	beqz	a3,20001552 <base_vfprintf+0x2c2>
20001342:	0ff57513          	andi	a0,a0,255
20001346:	03540733          	mul	a4,s0,s5
2000134a:	953a                	add	a0,a0,a4
2000134c:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001350:	fd068513          	addi	a0,a3,-48
20001354:	0ff57713          	andi	a4,a0,255
20001358:	0585                	addi	a1,a1,1
2000135a:	8536                	mv	a0,a3
2000135c:	fcecfde3          	bgeu	s9,a4,20001336 <base_vfprintf+0xa6>
20001360:	4601                	li	a2,0
20001362:	8536                	mv	a0,a3
20001364:	228d6163          	bltu	s10,s0,20001586 <base_vfprintf+0x2f6>
20001368:	008036b3          	snez	a3,s0
2000136c:	8e55                	or	a2,a2,a3
2000136e:	20060c63          	beqz	a2,20001586 <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001372:	95de                	add	a1,a1,s7
20001374:	95a6                	add	a1,a1,s1
20001376:	00258b93          	addi	s7,a1,2
2000137a:	02adce63          	blt	s11,a0,200013b6 <base_vfprintf+0x126>
2000137e:	06100593          	li	a1,97
20001382:	06a5d563          	bge	a1,a0,200013ec <base_vfprintf+0x15c>
20001386:	06300593          	li	a1,99
2000138a:	0ca5cb63          	blt	a1,a0,20001460 <base_vfprintf+0x1d0>
2000138e:	06200593          	li	a1,98
20001392:	14b50a63          	beq	a0,a1,200014e6 <base_vfprintf+0x256>
20001396:	06300593          	li	a1,99
2000139a:	18b51f63          	bne	a0,a1,20001538 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
2000139e:	4502                	lw	a0,0(sp)
200013a0:	00450593          	addi	a1,a0,4
200013a4:	c02e                	sw	a1,0(sp)
200013a6:	4108                	lw	a0,0(a0)
200013a8:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
200013ac:	4605                	li	a2,1
200013ae:	854a                	mv	a0,s2
200013b0:	00b10593          	addi	a1,sp,11
200013b4:	aa41                	j	20001544 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200013b6:	07200593          	li	a1,114
200013ba:	04a5dd63          	bge	a1,a0,20001414 <base_vfprintf+0x184>
200013be:	07700593          	li	a1,119
200013c2:	0aa5c663          	blt	a1,a0,2000146e <base_vfprintf+0x1de>
200013c6:	07300593          	li	a1,115
200013ca:	12b50963          	beq	a0,a1,200014fc <base_vfprintf+0x26c>
200013ce:	07500593          	li	a1,117
200013d2:	16b51363          	bne	a0,a1,20001538 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
200013d6:	4502                	lw	a0,0(sp)
200013d8:	00450593          	addi	a1,a0,4
200013dc:	c02e                	sw	a1,0(sp)
200013de:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200013e0:	00001797          	auipc	a5,0x1
200013e4:	d0178793          	addi	a5,a5,-767 # 200020e1 <kDigitsLow>
200013e8:	4729                	li	a4,10
200013ea:	a8cd                	j	200014dc <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200013ec:	13850763          	beq	a0,s8,2000151a <base_vfprintf+0x28a>
200013f0:	04800593          	li	a1,72
200013f4:	00b50663          	beq	a0,a1,20001400 <base_vfprintf+0x170>
200013f8:	05800593          	li	a1,88
200013fc:	12b51e63          	bne	a0,a1,20001538 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001400:	4502                	lw	a0,0(sp)
20001402:	00450593          	addi	a1,a0,4
20001406:	c02e                	sw	a1,0(sp)
20001408:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
2000140a:	00001797          	auipc	a5,0x1
2000140e:	ce778793          	addi	a5,a5,-793 # 200020f1 <kDigitsHigh>
20001412:	a0e1                	j	200014da <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001414:	06900593          	li	a1,105
20001418:	06b50d63          	beq	a0,a1,20001492 <base_vfprintf+0x202>
2000141c:	06f00593          	li	a1,111
20001420:	10b50163          	beq	a0,a1,20001522 <base_vfprintf+0x292>
20001424:	07000593          	li	a1,112
20001428:	10b51863          	bne	a0,a1,20001538 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
2000142c:	00001597          	auipc	a1,0x1
20001430:	3c758593          	addi	a1,a1,967 # 200027f3 <__clz_tab+0x6df>
20001434:	4609                	li	a2,2
20001436:	854a                	mv	a0,s2
20001438:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000143a:	4582                	lw	a1,0(sp)
2000143c:	00458613          	addi	a2,a1,4
20001440:	c032                	sw	a2,0(sp)
20001442:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001444:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001448:	00001797          	auipc	a5,0x1
2000144c:	c9978793          	addi	a5,a5,-871 # 200020e1 <kDigitsLow>
20001450:	46a1                	li	a3,8
20001452:	4741                	li	a4,16
20001454:	854a                	mv	a0,s2
20001456:	85ce                	mv	a1,s3
20001458:	2a5d                	jal	2000160e <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
2000145a:	00a40b33          	add	s6,s0,a0
2000145e:	a0ed                	j	20001548 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001460:	06400593          	li	a1,100
20001464:	02b50763          	beq	a0,a1,20001492 <base_vfprintf+0x202>
20001468:	07b50063          	beq	a0,s11,200014c8 <base_vfprintf+0x238>
2000146c:	a0f1                	j	20001538 <base_vfprintf+0x2a8>
2000146e:	07800593          	li	a1,120
20001472:	04b50b63          	beq	a0,a1,200014c8 <base_vfprintf+0x238>
20001476:	07a00593          	li	a1,122
2000147a:	0ab51f63          	bne	a0,a1,20001538 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
2000147e:	4502                	lw	a0,0(sp)
20001480:	00450593          	addi	a1,a0,4
20001484:	c02e                	sw	a1,0(sp)
20001486:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001488:	00850593          	addi	a1,a0,8
2000148c:	c02e                	sw	a1,0(sp)
2000148e:	414c                	lw	a1,4(a0)
20001490:	a84d                	j	20001542 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
20001492:	4502                	lw	a0,0(sp)
20001494:	00450593          	addi	a1,a0,4
20001498:	c02e                	sw	a1,0(sp)
2000149a:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
2000149c:	557d                	li	a0,-1
2000149e:	00954c63          	blt	a0,s1,200014b6 <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
200014a2:	00001597          	auipc	a1,0x1
200014a6:	34f58593          	addi	a1,a1,847 # 200027f1 <__clz_tab+0x6dd>
200014aa:	4605                	li	a2,1
200014ac:	854a                	mv	a0,s2
200014ae:	9982                	jalr	s3
200014b0:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
200014b2:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200014b6:	00001797          	auipc	a5,0x1
200014ba:	c2b78793          	addi	a5,a5,-981 # 200020e1 <kDigitsLow>
200014be:	4729                	li	a4,10
200014c0:	854a                	mv	a0,s2
200014c2:	85ce                	mv	a1,s3
200014c4:	8626                	mv	a2,s1
200014c6:	a829                	j	200014e0 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
200014c8:	4502                	lw	a0,0(sp)
200014ca:	00450593          	addi	a1,a0,4
200014ce:	c02e                	sw	a1,0(sp)
200014d0:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
200014d2:	00001797          	auipc	a5,0x1
200014d6:	c0f78793          	addi	a5,a5,-1009 # 200020e1 <kDigitsLow>
200014da:	4741                	li	a4,16
200014dc:	854a                	mv	a0,s2
200014de:	85ce                	mv	a1,s3
200014e0:	86a2                	mv	a3,s0
200014e2:	2235                	jal	2000160e <write_digits>
200014e4:	a08d                	j	20001546 <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
200014e6:	4502                	lw	a0,0(sp)
200014e8:	00450593          	addi	a1,a0,4
200014ec:	c02e                	sw	a1,0(sp)
200014ee:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200014f0:	00001797          	auipc	a5,0x1
200014f4:	bf178793          	addi	a5,a5,-1039 # 200020e1 <kDigitsLow>
200014f8:	4709                	li	a4,2
200014fa:	b7cd                	j	200014dc <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200014fc:	4502                	lw	a0,0(sp)
200014fe:	00450593          	addi	a1,a0,4
20001502:	c02e                	sw	a1,0(sp)
20001504:	410c                	lw	a1,0(a0)
20001506:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001508:	00a58633          	add	a2,a1,a0
2000150c:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20001510:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001512:	fa7d                	bnez	a2,20001508 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001514:	fff50613          	addi	a2,a0,-1
20001518:	a02d                	j	20001542 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
2000151a:	4605                	li	a2,1
2000151c:	854a                	mv	a0,s2
2000151e:	85d2                	mv	a1,s4
20001520:	a015                	j	20001544 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20001522:	4502                	lw	a0,0(sp)
20001524:	00450593          	addi	a1,a0,4
20001528:	c02e                	sw	a1,0(sp)
2000152a:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
2000152c:	00001797          	auipc	a5,0x1
20001530:	bb578793          	addi	a5,a5,-1099 # 200020e1 <kDigitsLow>
20001534:	4721                	li	a4,8
20001536:	b75d                	j	200014dc <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20001538:	00001597          	auipc	a1,0x1
2000153c:	bc958593          	addi	a1,a1,-1079 # 20002101 <kUnknownSpec>
20001540:	463d                	li	a2,15
20001542:	854a                	mv	a0,s2
20001544:	9982                	jalr	s3
20001546:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001548:	000bc503          	lbu	a0,0(s7)
2000154c:	d8051ce3          	bnez	a0,200012e4 <base_vfprintf+0x54>
20001550:	a819                	j	20001566 <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20001552:	00001597          	auipc	a1,0x1
20001556:	b7258593          	addi	a1,a1,-1166 # 200020c4 <kErrorNul>
2000155a:	4645                	li	a2,17
2000155c:	854a                	mv	a0,s2
2000155e:	9982                	jalr	s3
20001560:	9b2a                	add	s6,s6,a0
20001562:	a011                	j	20001566 <base_vfprintf+0x2d6>
20001564:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20001566:	855a                	mv	a0,s6
20001568:	4db2                	lw	s11,12(sp)
2000156a:	4d42                	lw	s10,16(sp)
2000156c:	4cd2                	lw	s9,20(sp)
2000156e:	4c62                	lw	s8,24(sp)
20001570:	4bf2                	lw	s7,28(sp)
20001572:	5b02                	lw	s6,32(sp)
20001574:	5a92                	lw	s5,36(sp)
20001576:	5a22                	lw	s4,40(sp)
20001578:	59b2                	lw	s3,44(sp)
2000157a:	5942                	lw	s2,48(sp)
2000157c:	54d2                	lw	s1,52(sp)
2000157e:	5462                	lw	s0,56(sp)
20001580:	50f2                	lw	ra,60(sp)
20001582:	6121                	addi	sp,sp,64
20001584:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001586:	00001597          	auipc	a1,0x1
2000158a:	b4f58593          	addi	a1,a1,-1201 # 200020d5 <kErrorTooWide>
2000158e:	4631                	li	a2,12
20001590:	b7f1                	j	2000155c <base_vfprintf+0x2cc>

20001592 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20001592:	7179                	addi	sp,sp,-48
20001594:	ca06                	sw	ra,20(sp)
20001596:	d646                	sw	a7,44(sp)
20001598:	d442                	sw	a6,40(sp)
2000159a:	d23e                	sw	a5,36(sp)
2000159c:	d03a                	sw	a4,32(sp)
2000159e:	ce36                	sw	a3,28(sp)
200015a0:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200015a2:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200015a4:	c42a                	sw	a0,8(sp)
200015a6:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200015a8:	00000597          	auipc	a1,0x0
200015ac:	01258593          	addi	a1,a1,18 # 200015ba <snprintf_sink>
200015b0:	0028                	addi	a0,sp,8
200015b2:	39f9                	jal	20001290 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200015b4:	40d2                	lw	ra,20(sp)
200015b6:	6145                	addi	sp,sp,48
200015b8:	8082                	ret

200015ba <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
200015ba:	1141                	addi	sp,sp,-16
200015bc:	c606                	sw	ra,12(sp)
200015be:	c422                	sw	s0,8(sp)
200015c0:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
200015c2:	4140                	lw	s0,4(a0)
200015c4:	c00d                	beqz	s0,200015e6 <snprintf_sink+0x2c>
200015c6:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
200015c8:	00c46363          	bltu	s0,a2,200015ce <snprintf_sink+0x14>
200015cc:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
200015ce:	4088                	lw	a0,0(s1)
200015d0:	8622                	mv	a2,s0
200015d2:	8d2ff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200015d6:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200015d8:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
200015da:	9522                	add	a0,a0,s0
200015dc:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
200015de:	40858533          	sub	a0,a1,s0
200015e2:	c0c8                	sw	a0,4(s1)
200015e4:	a011                	j	200015e8 <snprintf_sink+0x2e>
200015e6:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
200015e8:	8522                	mv	a0,s0
200015ea:	4492                	lw	s1,4(sp)
200015ec:	4422                	lw	s0,8(sp)
200015ee:	40b2                	lw	ra,12(sp)
200015f0:	0141                	addi	sp,sp,16
200015f2:	8082                	ret

200015f4 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
200015f4:	1101                	addi	sp,sp,-32
200015f6:	c206                	sw	ra,4(sp)
200015f8:	ce46                	sw	a7,28(sp)
200015fa:	cc42                	sw	a6,24(sp)
200015fc:	ca3e                	sw	a5,20(sp)
200015fe:	c83a                	sw	a4,16(sp)
20001600:	c636                	sw	a3,12(sp)
20001602:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001604:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20001606:	3169                	jal	20001290 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001608:	4092                	lw	ra,4(sp)
2000160a:	6105                	addi	sp,sp,32
2000160c:	8082                	ret

2000160e <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
2000160e:	7139                	addi	sp,sp,-64
20001610:	de06                	sw	ra,60(sp)
20001612:	dc22                	sw	s0,56(sp)
20001614:	da26                	sw	s1,52(sp)
20001616:	d84a                	sw	s2,48(sp)
20001618:	d64e                	sw	s3,44(sp)
2000161a:	892e                	mv	s2,a1
2000161c:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000161e:	ca05                	beqz	a2,2000164e <write_digits+0x40>
20001620:	4501                	li	a0,0
20001622:	02b10813          	addi	a6,sp,43
20001626:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001628:	02e65633          	divu	a2,a2,a4
2000162c:	02e60433          	mul	s0,a2,a4
20001630:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001634:	943e                	add	s0,s0,a5
20001636:	00040403          	lb	s0,0(s0)
2000163a:	00a805b3          	add	a1,a6,a0
2000163e:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001642:	157d                	addi	a0,a0,-1
20001644:	fee4f1e3          	bgeu	s1,a4,20001626 <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001648:	40a00633          	neg	a2,a0
2000164c:	a011                	j	20001650 <write_digits+0x42>
2000164e:	4601                	li	a2,0
20001650:	4485                	li	s1,1
20001652:	c291                	beqz	a3,20001656 <write_digits+0x48>
20001654:	84b6                	mv	s1,a3
20001656:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
2000165a:	00a4e463          	bltu	s1,a0,20001662 <write_digits+0x54>
2000165e:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001662:	02967063          	bgeu	a2,s1,20001682 <write_digits+0x74>
20001666:	0068                	addi	a0,sp,12
20001668:	8d05                	sub	a0,a0,s1
2000166a:	02050513          	addi	a0,a0,32
2000166e:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001672:	03000593          	li	a1,48
20001676:	8622                	mv	a2,s0
20001678:	842ff0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
2000167c:	147d                	addi	s0,s0,-1
2000167e:	fc7d                	bnez	s0,2000167c <write_digits+0x6e>
20001680:	8626                	mv	a2,s1
20001682:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001684:	8d11                	sub	a0,a0,a2
20001686:	02050593          	addi	a1,a0,32
2000168a:	854e                	mv	a0,s3
2000168c:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
2000168e:	59b2                	lw	s3,44(sp)
20001690:	5942                	lw	s2,48(sp)
20001692:	54d2                	lw	s1,52(sp)
20001694:	5462                	lw	s0,56(sp)
20001696:	50f2                	lw	ra,60(sp)
20001698:	6121                	addi	sp,sp,64
2000169a:	8082                	ret

2000169c <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
2000169c:	c581                	beqz	a1,200016a4 <dif_uart_init+0x8>
2000169e:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200016a0:	c188                	sw	a0,0(a1)
200016a2:	a011                	j	200016a6 <dif_uart_init+0xa>
200016a4:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200016a6:	8532                	mv	a0,a2
200016a8:	8082                	ret

200016aa <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200016aa:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
200016ac:	c606                	sw	ra,12(sp)
200016ae:	c422                	sw	s0,8(sp)
200016b0:	c226                	sw	s1,4(sp)
200016b2:	c92d                	beqz	a0,20001724 <dif_uart_configure+0x7a>
200016b4:	84ae                	mv	s1,a1
200016b6:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
200016b8:	418c                	lw	a1,0(a1)
200016ba:	450d                	li	a0,3
200016bc:	c5ad                	beqz	a1,20001726 <dif_uart_configure+0x7c>
200016be:	40d0                	lw	a2,4(s1)
200016c0:	c23d                	beqz	a2,20001726 <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
200016c2:	01459513          	slli	a0,a1,0x14
200016c6:	81b1                	srli	a1,a1,0xc
200016c8:	4681                	li	a3,0
200016ca:	2e61                	jal	20001a62 <__udivdi3>
200016cc:	6641                	lui	a2,0x10
200016ce:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
200016d0:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200016d2:	8d31                	xor	a0,a0,a2
200016d4:	8dc9                	or	a1,a1,a0
200016d6:	4511                	li	a0,4
200016d8:	e5b9                	bnez	a1,20001726 <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
200016da:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016dc:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200016e0:	4008                	lw	a0,0(s0)
200016e2:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016e4:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
200016e6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016e8:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200016ec:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016ee:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200016f2:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016f4:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
200016f8:	4008                	lw	a0,0(s0)
200016fa:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200016fc:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
200016fe:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001700:	01061513          	slli	a0,a2,0x10
20001704:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20001708:	c291                	beqz	a3,2000170c <dif_uart_configure+0x62>
2000170a:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
2000170c:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
2000170e:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001710:	e219                	bnez	a2,20001716 <dif_uart_configure+0x6c>
20001712:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20001716:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001718:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000171a:	400c                	lw	a1,0(s0)
2000171c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000171e:	0005a223          	sw	zero,4(a1)
20001722:	a011                	j	20001726 <dif_uart_configure+0x7c>
20001724:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001726:	4492                	lw	s1,4(sp)
20001728:	4422                	lw	s0,8(sp)
2000172a:	40b2                	lw	ra,12(sp)
2000172c:	0141                	addi	sp,sp,16
2000172e:	8082                	ret

20001730 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001730:	1141                	addi	sp,sp,-16
20001732:	c606                	sw	ra,12(sp)
20001734:	c422                	sw	s0,8(sp)
20001736:	c226                	sw	s1,4(sp)
20001738:	84aa                	mv	s1,a0
2000173a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
2000173c:	c09d                	beqz	s1,20001762 <dif_uart_irq_is_pending+0x32>
2000173e:	8432                	mv	s0,a2
20001740:	c20d                	beqz	a2,20001762 <dif_uart_irq_is_pending+0x32>
20001742:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001744:	852e                	mv	a0,a1
20001746:	85b2                	mv	a1,a2
20001748:	2015                	jal	2000176c <uart_irq_offset_get>
2000174a:	85aa                	mv	a1,a0
2000174c:	4505                	li	a0,1
2000174e:	c991                	beqz	a1,20001762 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001750:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001752:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001754:	4602                	lw	a2,0(sp)
20001756:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001758:	00c5d5b3          	srl	a1,a1,a2
2000175c:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
2000175e:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001762:	4492                	lw	s1,4(sp)
20001764:	4422                	lw	s0,8(sp)
20001766:	40b2                	lw	ra,12(sp)
20001768:	0141                	addi	sp,sp,16
2000176a:	8082                	ret

2000176c <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
2000176c:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
2000176e:	00a66563          	bltu	a2,a0,20001778 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001772:	c188                	sw	a0,0(a1)
20001774:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001776:	8082                	ret
20001778:	4501                	li	a0,0
2000177a:	8082                	ret

2000177c <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
2000177c:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
2000177e:	c606                	sw	ra,12(sp)
20001780:	c422                	sw	s0,8(sp)
20001782:	c10d                	beqz	a0,200017a4 <dif_uart_irq_acknowledge+0x28>
20001784:	842a                	mv	s0,a0
20001786:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001788:	852e                	mv	a0,a1
2000178a:	85b2                	mv	a1,a2
2000178c:	37c5                	jal	2000176c <uart_irq_offset_get>
2000178e:	85aa                	mv	a1,a0
20001790:	4505                	li	a0,1
20001792:	c991                	beqz	a1,200017a6 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001794:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001796:	4010                	lw	a2,0(s0)
20001798:	4501                	li	a0,0
2000179a:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000179c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017a0:	c20c                	sw	a1,0(a2)
200017a2:	a011                	j	200017a6 <dif_uart_irq_acknowledge+0x2a>
200017a4:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
200017a6:	4422                	lw	s0,8(sp)
200017a8:	40b2                	lw	ra,12(sp)
200017aa:	0141                	addi	sp,sp,16
200017ac:	8082                	ret

200017ae <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
200017ae:	c911                	beqz	a0,200017c2 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
200017b0:	c581                	beqz	a1,200017b8 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200017b2:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017b4:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
200017b6:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200017b8:	410c                	lw	a1,0(a0)
200017ba:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017bc:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
200017c0:	8082                	ret
200017c2:	4509                	li	a0,2
200017c4:	8082                	ret

200017c6 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
200017c6:	862a                	mv	a2,a0
200017c8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
200017ca:	c611                	beqz	a2,200017d6 <dif_uart_irq_restore_all+0x10>
200017cc:	c589                	beqz	a1,200017d6 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
200017ce:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
200017d0:	4210                	lw	a2,0(a2)
200017d2:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017d4:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
200017d6:	8082                	ret

200017d8 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
200017d8:	1141                	addi	sp,sp,-16
200017da:	c606                	sw	ra,12(sp)
200017dc:	c422                	sw	s0,8(sp)
200017de:	c226                	sw	s1,4(sp)
200017e0:	84aa                	mv	s1,a0
200017e2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
200017e4:	c485                	beqz	s1,2000180c <dif_uart_irq_get_enabled+0x34>
200017e6:	8432                	mv	s0,a2
200017e8:	c215                	beqz	a2,2000180c <dif_uart_irq_get_enabled+0x34>
200017ea:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200017ec:	852e                	mv	a0,a1
200017ee:	85b2                	mv	a1,a2
200017f0:	3fb5                	jal	2000176c <uart_irq_offset_get>
200017f2:	85aa                	mv	a1,a0
200017f4:	4505                	li	a0,1
200017f6:	c999                	beqz	a1,2000180c <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200017f8:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017fa:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
200017fc:	4602                	lw	a2,0(sp)
200017fe:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001800:	00c5d5b3          	srl	a1,a1,a2
20001804:	8985                	andi	a1,a1,1
20001806:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
2000180a:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
2000180c:	4492                	lw	s1,4(sp)
2000180e:	4422                	lw	s0,8(sp)
20001810:	40b2                	lw	ra,12(sp)
20001812:	0141                	addi	sp,sp,16
20001814:	8082                	ret

20001816 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20001816:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20001818:	c606                	sw	ra,12(sp)
2000181a:	c422                	sw	s0,8(sp)
2000181c:	c226                	sw	s1,4(sp)
2000181e:	c91d                	beqz	a0,20001854 <dif_uart_irq_set_enabled+0x3e>
20001820:	8432                	mv	s0,a2
20001822:	84aa                	mv	s1,a0
20001824:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001826:	852e                	mv	a0,a1
20001828:	85b2                	mv	a1,a2
2000182a:	3789                	jal	2000176c <uart_irq_offset_get>
2000182c:	85aa                	mv	a1,a0
2000182e:	4505                	li	a0,1
20001830:	c19d                	beqz	a1,20001856 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001832:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001834:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001836:	4682                	lw	a3,0(sp)
20001838:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
2000183a:	00143713          	seqz	a4,s0
2000183e:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001840:	00d797b3          	sll	a5,a5,a3
20001844:	fff7c793          	not	a5,a5
20001848:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000184a:	00d716b3          	sll	a3,a4,a3
2000184e:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001850:	c1d0                	sw	a2,4(a1)
20001852:	a011                	j	20001856 <dif_uart_irq_set_enabled+0x40>
20001854:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001856:	4492                	lw	s1,4(sp)
20001858:	4422                	lw	s0,8(sp)
2000185a:	40b2                	lw	ra,12(sp)
2000185c:	0141                	addi	sp,sp,16
2000185e:	8082                	ret

20001860 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20001860:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20001862:	c606                	sw	ra,12(sp)
20001864:	c422                	sw	s0,8(sp)
20001866:	c10d                	beqz	a0,20001888 <dif_uart_irq_force+0x28>
20001868:	842a                	mv	s0,a0
2000186a:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000186c:	852e                	mv	a0,a1
2000186e:	85b2                	mv	a1,a2
20001870:	3df5                	jal	2000176c <uart_irq_offset_get>
20001872:	85aa                	mv	a1,a0
20001874:	4505                	li	a0,1
20001876:	c991                	beqz	a1,2000188a <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001878:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
2000187a:	4010                	lw	a2,0(s0)
2000187c:	4501                	li	a0,0
2000187e:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001880:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001884:	c60c                	sw	a1,8(a2)
20001886:	a011                	j	2000188a <dif_uart_irq_force+0x2a>
20001888:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
2000188a:	4422                	lw	s0,8(sp)
2000188c:	40b2                	lw	ra,12(sp)
2000188e:	0141                	addi	sp,sp,16
20001890:	8082                	ret

20001892 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001892:	cd09                	beqz	a0,200018ac <dif_uart_watermark_rx_set+0x1a>
20001894:	4691                	li	a3,4
20001896:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001898:	00b6eb63          	bltu	a3,a1,200018ae <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000189c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000189e:	4d54                	lw	a3,28(a0)
200018a0:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
200018a2:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200018a4:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200018a6:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018a8:	cd4c                	sw	a1,28(a0)
200018aa:	a011                	j	200018ae <dif_uart_watermark_rx_set+0x1c>
200018ac:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200018ae:	8532                	mv	a0,a2
200018b0:	8082                	ret

200018b2 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200018b2:	cd11                	beqz	a0,200018ce <dif_uart_watermark_tx_set+0x1c>
200018b4:	468d                	li	a3,3
200018b6:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200018b8:	00b6ec63          	bltu	a3,a1,200018d0 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200018bc:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018be:	4d54                	lw	a3,28(a0)
200018c0:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
200018c2:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200018c4:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200018c8:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018ca:	cd4c                	sw	a1,28(a0)
200018cc:	a011                	j	200018d0 <dif_uart_watermark_tx_set+0x1e>
200018ce:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200018d0:	8532                	mv	a0,a2
200018d2:	8082                	ret

200018d4 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
200018d4:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
200018d6:	c51d                	beqz	a0,20001904 <dif_uart_bytes_send+0x30>
200018d8:	c595                	beqz	a1,20001904 <dif_uart_bytes_send+0x30>
200018da:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200018dc:	c20d                	beqz	a2,200018fe <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
200018de:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018e2:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200018e6:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200018e8:	eb19                	bnez	a4,200018fe <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
200018ea:	00f58733          	add	a4,a1,a5
200018ee:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
200018f2:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018f4:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200018f8:	fef613e3          	bne	a2,a5,200018de <dif_uart_bytes_send+0xa>
200018fc:	87b2                	mv	a5,a2
200018fe:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001900:	c291                	beqz	a3,20001904 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001902:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001904:	853a                	mv	a0,a4
20001906:	8082                	ret

20001908 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001908:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
2000190a:	c515                	beqz	a0,20001936 <dif_uart_bytes_receive+0x2e>
2000190c:	c60d                	beqz	a2,20001936 <dif_uart_bytes_receive+0x2e>
2000190e:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001910:	cd99                	beqz	a1,2000192e <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001912:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001914:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001916:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000191a:	eb91                	bnez	a5,2000192e <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000191c:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000191e:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001922:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001924:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001928:	ff0595e3          	bne	a1,a6,20001912 <dif_uart_bytes_receive+0xa>
2000192c:	882e                	mv	a6,a1
2000192e:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001930:	c299                	beqz	a3,20001936 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001932:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001936:	853a                	mv	a0,a4
20001938:	8082                	ret

2000193a <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
2000193a:	cd19                	beqz	a0,20001958 <dif_uart_byte_send_polled+0x1e>
2000193c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000193e:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001940:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001942:	fef5                	bnez	a3,2000193e <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001944:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001946:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001948:	e299                	bnez	a3,2000194e <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000194a:	ce0c                	sw	a1,24(a2)
2000194c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000194e:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001950:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001952:	dd75                	beqz	a0,2000194e <dif_uart_byte_send_polled+0x14>
20001954:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001956:	8082                	ret
20001958:	4509                	li	a0,2
2000195a:	8082                	ret

2000195c <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
2000195c:	862a                	mv	a2,a0
2000195e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001960:	c205                	beqz	a2,20001980 <dif_uart_byte_receive_polled+0x24>
20001962:	cd99                	beqz	a1,20001980 <dif_uart_byte_receive_polled+0x24>
20001964:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001966:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001968:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
2000196c:	fd6d                	bnez	a0,20001966 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000196e:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001970:	02057693          	andi	a3,a0,32
20001974:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001976:	e689                	bnez	a3,20001980 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001978:	4a50                	lw	a2,20(a2)
2000197a:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
2000197c:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001980:	8082                	ret

20001982 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001982:	862a                	mv	a2,a0
20001984:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001986:	ca09                	beqz	a2,20001998 <dif_uart_rx_bytes_available+0x16>
20001988:	c981                	beqz	a1,20001998 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000198a:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000198c:	5110                	lw	a2,32(a0)
2000198e:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001990:	8241                	srli	a2,a2,0x10
20001992:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001996:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001998:	8082                	ret

2000199a <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
2000199a:	862a                	mv	a2,a0
2000199c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
2000199e:	ce01                	beqz	a2,200019b6 <dif_uart_tx_bytes_available+0x1c>
200019a0:	c999                	beqz	a1,200019b6 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200019a2:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200019a4:	5110                	lw	a2,32(a0)
200019a6:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
200019a8:	03f67613          	andi	a2,a2,63
200019ac:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
200019b0:	40c68633          	sub	a2,a3,a2
200019b4:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
200019b6:	8082                	ret

200019b8 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
200019b8:	c11d                	beqz	a0,200019de <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200019ba:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200019bc:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200019be:	ffd5f693          	andi	a3,a1,-3
200019c2:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200019c6:	fff58713          	addi	a4,a1,-1
200019ca:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
200019cc:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
200019d0:	00f77463          	bgeu	a4,a5,200019d8 <dif_uart_fifo_reset+0x20>
200019d4:	0025e593          	ori	a1,a1,2
200019d8:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200019da:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200019dc:	8082                	ret
200019de:	4509                	li	a0,2
200019e0:	8082                	ret

200019e2 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
200019e2:	c515                	beqz	a0,20001a0e <dif_uart_loopback_set+0x2c>
200019e4:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
200019e6:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
200019e8:	0015b593          	seqz	a1,a1
200019ec:	4715                	li	a4,5
200019ee:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019f2:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
200019f4:	00163613          	seqz	a2,a2
200019f8:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200019fa:	00b797b3          	sll	a5,a5,a1
200019fe:	fff7c793          	not	a5,a5
20001a02:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001a04:	00b615b3          	sll	a1,a2,a1
20001a08:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a0a:	c54c                	sw	a1,12(a0)
20001a0c:	a011                	j	20001a10 <dif_uart_loopback_set+0x2e>
20001a0e:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001a10:	8536                	mv	a0,a3
20001a12:	8082                	ret

20001a14 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001a14:	862a                	mv	a2,a0
20001a16:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001a18:	ca11                	beqz	a2,20001a2c <dif_uart_enable_rx_timeout+0x18>
20001a1a:	0185d693          	srli	a3,a1,0x18
20001a1e:	e699                	bnez	a3,20001a2c <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001a20:	4210                	lw	a2,0(a2)
20001a22:	4501                	li	a0,0
20001a24:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001a28:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a2a:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001a2c:	8082                	ret

20001a2e <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001a2e:	c511                	beqz	a0,20001a3a <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001a30:	410c                	lw	a1,0(a0)
20001a32:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001a34:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001a38:	8082                	ret
20001a3a:	4509                	li	a0,2
20001a3c:	8082                	ret

20001a3e <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001a3e:	86aa                	mv	a3,a0
20001a40:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001a42:	ce99                	beqz	a3,20001a60 <dif_uart_get_rx_timeout+0x22>
20001a44:	cd91                	beqz	a1,20001a60 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001a46:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a48:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001a4a:	fff6c513          	not	a0,a3
20001a4e:	817d                	srli	a0,a0,0x1f
20001a50:	c188                	sw	a0,0(a1)
20001a52:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001a54:	c611                	beqz	a2,20001a60 <dif_uart_get_rx_timeout+0x22>
20001a56:	010005b7          	lui	a1,0x1000
20001a5a:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001a5c:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001a5e:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001a60:	8082                	ret

20001a62 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20001a62:	88aa                	mv	a7,a0
20001a64:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20001a66:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20001a68:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20001a6a:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20001a6c:	20069963          	bnez	a3,20001c7e <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20001a70:	200026b7          	lui	a3,0x20002
20001a74:	11468693          	addi	a3,a3,276 # 20002114 <__clz_tab>
20001a78:	0cc5f063          	bgeu	a1,a2,20001b38 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001a7c:	6741                	lui	a4,0x10
20001a7e:	0ae67663          	bgeu	a2,a4,20001b2a <__udivdi3+0xc8>
20001a82:	0ff00713          	li	a4,255
20001a86:	00c73733          	sltu	a4,a4,a2
20001a8a:	070e                	slli	a4,a4,0x3
20001a8c:	00e65533          	srl	a0,a2,a4
20001a90:	96aa                	add	a3,a3,a0
20001a92:	0006c683          	lbu	a3,0(a3)
20001a96:	02000513          	li	a0,32
20001a9a:	9736                	add	a4,a4,a3
20001a9c:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20001aa0:	00e50c63          	beq	a0,a4,20001ab8 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001aa4:	00d797b3          	sll	a5,a5,a3
20001aa8:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001aac:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001ab0:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001ab4:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001ab8:	01085893          	srli	a7,a6,0x10
20001abc:	0315d7b3          	divu	a5,a1,a7
20001ac0:	01081613          	slli	a2,a6,0x10
20001ac4:	8241                	srli	a2,a2,0x10
20001ac6:	01035713          	srli	a4,t1,0x10
20001aca:	0315f6b3          	remu	a3,a1,a7
20001ace:	853e                	mv	a0,a5
20001ad0:	02f605b3          	mul	a1,a2,a5
20001ad4:	06c2                	slli	a3,a3,0x10
20001ad6:	8f55                	or	a4,a4,a3
20001ad8:	00b77c63          	bgeu	a4,a1,20001af0 <__udivdi3+0x8e>
20001adc:	9742                	add	a4,a4,a6
20001ade:	fff78513          	addi	a0,a5,-1
20001ae2:	01076763          	bltu	a4,a6,20001af0 <__udivdi3+0x8e>
20001ae6:	00b77563          	bgeu	a4,a1,20001af0 <__udivdi3+0x8e>
20001aea:	ffe78513          	addi	a0,a5,-2
20001aee:	9742                	add	a4,a4,a6
20001af0:	8f0d                	sub	a4,a4,a1
20001af2:	031777b3          	remu	a5,a4,a7
20001af6:	0342                	slli	t1,t1,0x10
20001af8:	01035313          	srli	t1,t1,0x10
20001afc:	03175733          	divu	a4,a4,a7
20001b00:	07c2                	slli	a5,a5,0x10
20001b02:	0067e333          	or	t1,a5,t1
20001b06:	02e606b3          	mul	a3,a2,a4
20001b0a:	863a                	mv	a2,a4
20001b0c:	00d37b63          	bgeu	t1,a3,20001b22 <__udivdi3+0xc0>
20001b10:	9342                	add	t1,t1,a6
20001b12:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001b16:	01036663          	bltu	t1,a6,20001b22 <__udivdi3+0xc0>
20001b1a:	00d37463          	bgeu	t1,a3,20001b22 <__udivdi3+0xc0>
20001b1e:	ffe70613          	addi	a2,a4,-2
20001b22:	0542                	slli	a0,a0,0x10
20001b24:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001b26:	4581                	li	a1,0
20001b28:	a85d                	j	20001bde <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001b2a:	01000537          	lui	a0,0x1000
20001b2e:	4741                	li	a4,16
20001b30:	f4a66ee3          	bltu	a2,a0,20001a8c <__udivdi3+0x2a>
20001b34:	4761                	li	a4,24
20001b36:	bf99                	j	20001a8c <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001b38:	e601                	bnez	a2,20001b40 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001b3a:	4705                	li	a4,1
20001b3c:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001b40:	6741                	lui	a4,0x10
20001b42:	08e87f63          	bgeu	a6,a4,20001be0 <__udivdi3+0x17e>
20001b46:	0ff00713          	li	a4,255
20001b4a:	01077363          	bgeu	a4,a6,20001b50 <__udivdi3+0xee>
20001b4e:	4521                	li	a0,8
20001b50:	00a85733          	srl	a4,a6,a0
20001b54:	96ba                	add	a3,a3,a4
20001b56:	0006c703          	lbu	a4,0(a3)
20001b5a:	02000613          	li	a2,32
20001b5e:	972a                	add	a4,a4,a0
20001b60:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001b64:	08e61563          	bne	a2,a4,20001bee <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001b68:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001b6c:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001b6e:	01085893          	srli	a7,a6,0x10
20001b72:	01081613          	slli	a2,a6,0x10
20001b76:	8241                	srli	a2,a2,0x10
20001b78:	01035713          	srli	a4,t1,0x10
20001b7c:	0317f6b3          	remu	a3,a5,a7
20001b80:	0317d7b3          	divu	a5,a5,a7
20001b84:	06c2                	slli	a3,a3,0x10
20001b86:	8f55                	or	a4,a4,a3
20001b88:	02f60e33          	mul	t3,a2,a5
20001b8c:	853e                	mv	a0,a5
20001b8e:	01c77c63          	bgeu	a4,t3,20001ba6 <__udivdi3+0x144>
20001b92:	9742                	add	a4,a4,a6
20001b94:	fff78513          	addi	a0,a5,-1
20001b98:	01076763          	bltu	a4,a6,20001ba6 <__udivdi3+0x144>
20001b9c:	01c77563          	bgeu	a4,t3,20001ba6 <__udivdi3+0x144>
20001ba0:	ffe78513          	addi	a0,a5,-2
20001ba4:	9742                	add	a4,a4,a6
20001ba6:	41c70733          	sub	a4,a4,t3
20001baa:	031777b3          	remu	a5,a4,a7
20001bae:	0342                	slli	t1,t1,0x10
20001bb0:	01035313          	srli	t1,t1,0x10
20001bb4:	03175733          	divu	a4,a4,a7
20001bb8:	07c2                	slli	a5,a5,0x10
20001bba:	0067e333          	or	t1,a5,t1
20001bbe:	02e606b3          	mul	a3,a2,a4
20001bc2:	863a                	mv	a2,a4
20001bc4:	00d37b63          	bgeu	t1,a3,20001bda <__udivdi3+0x178>
20001bc8:	9342                	add	t1,t1,a6
20001bca:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001bce:	01036663          	bltu	t1,a6,20001bda <__udivdi3+0x178>
20001bd2:	00d37463          	bgeu	t1,a3,20001bda <__udivdi3+0x178>
20001bd6:	ffe70613          	addi	a2,a4,-2
20001bda:	0542                	slli	a0,a0,0x10
20001bdc:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001bde:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001be0:	01000737          	lui	a4,0x1000
20001be4:	4541                	li	a0,16
20001be6:	f6e865e3          	bltu	a6,a4,20001b50 <__udivdi3+0xee>
20001bea:	4561                	li	a0,24
20001bec:	b795                	j	20001b50 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001bee:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001bf2:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001bf6:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001bfa:	00d797b3          	sll	a5,a5,a3
20001bfe:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001c02:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001c06:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001c0a:	0315f733          	remu	a4,a1,a7
20001c0e:	01081793          	slli	a5,a6,0x10
20001c12:	83c1                	srli	a5,a5,0x10
20001c14:	01065513          	srli	a0,a2,0x10
20001c18:	0315d5b3          	divu	a1,a1,a7
20001c1c:	0742                	slli	a4,a4,0x10
20001c1e:	8f49                	or	a4,a4,a0
20001c20:	02b786b3          	mul	a3,a5,a1
20001c24:	852e                	mv	a0,a1
20001c26:	00d77c63          	bgeu	a4,a3,20001c3e <__udivdi3+0x1dc>
20001c2a:	9742                	add	a4,a4,a6
20001c2c:	fff58513          	addi	a0,a1,-1 # ffffff <test_main.kLogFields.34+0xfefe6f>
20001c30:	01076763          	bltu	a4,a6,20001c3e <__udivdi3+0x1dc>
20001c34:	00d77563          	bgeu	a4,a3,20001c3e <__udivdi3+0x1dc>
20001c38:	ffe58513          	addi	a0,a1,-2
20001c3c:	9742                	add	a4,a4,a6
20001c3e:	40d706b3          	sub	a3,a4,a3
20001c42:	0316f733          	remu	a4,a3,a7
20001c46:	0642                	slli	a2,a2,0x10
20001c48:	8241                	srli	a2,a2,0x10
20001c4a:	0316d6b3          	divu	a3,a3,a7
20001c4e:	0742                	slli	a4,a4,0x10
20001c50:	02d788b3          	mul	a7,a5,a3
20001c54:	00c767b3          	or	a5,a4,a2
20001c58:	8736                	mv	a4,a3
20001c5a:	0117fc63          	bgeu	a5,a7,20001c72 <__udivdi3+0x210>
20001c5e:	97c2                	add	a5,a5,a6
20001c60:	fff68713          	addi	a4,a3,-1
20001c64:	0107e763          	bltu	a5,a6,20001c72 <__udivdi3+0x210>
20001c68:	0117f563          	bgeu	a5,a7,20001c72 <__udivdi3+0x210>
20001c6c:	ffe68713          	addi	a4,a3,-2
20001c70:	97c2                	add	a5,a5,a6
20001c72:	01051593          	slli	a1,a0,0x10
20001c76:	411787b3          	sub	a5,a5,a7
20001c7a:	8dd9                	or	a1,a1,a4
20001c7c:	bdcd                	j	20001b6e <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001c7e:	14d5e263          	bltu	a1,a3,20001dc2 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001c82:	6741                	lui	a4,0x10
20001c84:	02e6ff63          	bgeu	a3,a4,20001cc2 <__udivdi3+0x260>
20001c88:	0ff00713          	li	a4,255
20001c8c:	00d735b3          	sltu	a1,a4,a3
20001c90:	058e                	slli	a1,a1,0x3
20001c92:	20002737          	lui	a4,0x20002
20001c96:	00b6d533          	srl	a0,a3,a1
20001c9a:	11470713          	addi	a4,a4,276 # 20002114 <__clz_tab>
20001c9e:	972a                	add	a4,a4,a0
20001ca0:	00074703          	lbu	a4,0(a4)
20001ca4:	02000513          	li	a0,32
20001ca8:	972e                	add	a4,a4,a1
20001caa:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001cae:	02e51163          	bne	a0,a4,20001cd0 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001cb2:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001cb4:	f2f6e5e3          	bltu	a3,a5,20001bde <__udivdi3+0x17c>
20001cb8:	00c8b533          	sltu	a0,a7,a2
20001cbc:	00154513          	xori	a0,a0,1
20001cc0:	bf39                	j	20001bde <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001cc2:	01000737          	lui	a4,0x1000
20001cc6:	45c1                	li	a1,16
20001cc8:	fce6e5e3          	bltu	a3,a4,20001c92 <__udivdi3+0x230>
20001ccc:	45e1                	li	a1,24
20001cce:	b7d1                	j	20001c92 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001cd0:	00e65333          	srl	t1,a2,a4
20001cd4:	00b696b3          	sll	a3,a3,a1
20001cd8:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cdc:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001ce0:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001ce4:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001ce8:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001cec:	00b797b3          	sll	a5,a5,a1
20001cf0:	00e8d733          	srl	a4,a7,a4
20001cf4:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cf8:	01031793          	slli	a5,t1,0x10
20001cfc:	83c1                	srli	a5,a5,0x10
20001cfe:	01085713          	srli	a4,a6,0x10
20001d02:	02a65633          	divu	a2,a2,a0
20001d06:	06c2                	slli	a3,a3,0x10
20001d08:	8f55                	or	a4,a4,a3
20001d0a:	02c78f33          	mul	t5,a5,a2
20001d0e:	8e32                	mv	t3,a2
20001d10:	01e77c63          	bgeu	a4,t5,20001d28 <__udivdi3+0x2c6>
20001d14:	971a                	add	a4,a4,t1
20001d16:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001d1a:	00676763          	bltu	a4,t1,20001d28 <__udivdi3+0x2c6>
20001d1e:	01e77563          	bgeu	a4,t5,20001d28 <__udivdi3+0x2c6>
20001d22:	ffe60e13          	addi	t3,a2,-2
20001d26:	971a                	add	a4,a4,t1
20001d28:	41e70733          	sub	a4,a4,t5
20001d2c:	02a776b3          	remu	a3,a4,a0
20001d30:	02a75733          	divu	a4,a4,a0
20001d34:	06c2                	slli	a3,a3,0x10
20001d36:	02e78633          	mul	a2,a5,a4
20001d3a:	01081793          	slli	a5,a6,0x10
20001d3e:	83c1                	srli	a5,a5,0x10
20001d40:	8fd5                	or	a5,a5,a3
20001d42:	86ba                	mv	a3,a4
20001d44:	00c7fc63          	bgeu	a5,a2,20001d5c <__udivdi3+0x2fa>
20001d48:	979a                	add	a5,a5,t1
20001d4a:	fff70693          	addi	a3,a4,-1 # ffffff <test_main.kLogFields.34+0xfefe6f>
20001d4e:	0067e763          	bltu	a5,t1,20001d5c <__udivdi3+0x2fa>
20001d52:	00c7f563          	bgeu	a5,a2,20001d5c <__udivdi3+0x2fa>
20001d56:	ffe70693          	addi	a3,a4,-2
20001d5a:	979a                	add	a5,a5,t1
20001d5c:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d60:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d62:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d64:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001d68:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001d6c:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d6e:	00def6b3          	and	a3,t4,a3
20001d72:	01055613          	srli	a2,a0,0x10
20001d76:	010ede93          	srli	t4,t4,0x10
20001d7a:	02d80333          	mul	t1,a6,a3
20001d7e:	02d606b3          	mul	a3,a2,a3
20001d82:	01035713          	srli	a4,t1,0x10
20001d86:	03d80833          	mul	a6,a6,t4
20001d8a:	9836                	add	a6,a6,a3
20001d8c:	9742                	add	a4,a4,a6
20001d8e:	03d60633          	mul	a2,a2,t4
20001d92:	00d77363          	bgeu	a4,a3,20001d98 <__udivdi3+0x336>
20001d96:	9672                	add	a2,a2,t3
20001d98:	01075693          	srli	a3,a4,0x10
20001d9c:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001d9e:	02c7e063          	bltu	a5,a2,20001dbe <__udivdi3+0x35c>
20001da2:	d8c792e3          	bne	a5,a2,20001b26 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001da6:	67c1                	lui	a5,0x10
20001da8:	17fd                	addi	a5,a5,-1
20001daa:	8f7d                	and	a4,a4,a5
20001dac:	0742                	slli	a4,a4,0x10
20001dae:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001db2:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001db6:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001db8:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001dba:	e2e8f2e3          	bgeu	a7,a4,20001bde <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001dbe:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001dc0:	b39d                	j	20001b26 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001dc2:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001dc4:	4501                	li	a0,0
20001dc6:	bd21                	j	20001bde <__udivdi3+0x17c>
