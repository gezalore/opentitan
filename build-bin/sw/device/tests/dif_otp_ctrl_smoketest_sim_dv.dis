
sw/device/tests/dif_otp_ctrl_smoketest_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00001b9c  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       0000081f  20001d20  20001d20  00002d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  20002540  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000000c  10000008  20002548  00004008  2**2
                  ALLOC
  8 .logs.fields  00000154  00010000  00010000  00004008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  0000415c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000087a7  00000000  00000000  00004182  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001790  00000000  00000000  0000c929  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  0000e0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000048e8  00000000  00000000  0000e151  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004799  00000000  00000000  00012a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000218  00000000  00000000  000171d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002912  00000000  00000000  000173ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000964  00000000  00000000  00019cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	fec58593          	addi	a1,a1,-20 # 10000014 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00002617          	auipc	a2,0x2
20000054:	4f060613          	addi	a2,a2,1264 # 20002540 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	446000ef          	jal	ra,200004c4 <main>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000082:	aabd                	j	20000200 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	1080006f          	j	20000208 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	2400006f          	j	2000034c <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	2880006f          	j	200003a4 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	2d00006f          	j	200003fc <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000180:	10500073          	wfi
20000184:	8082                	ret

20000186 <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000186:	1141                	addi	sp,sp,-16
20000188:	c606                	sw	ra,12(sp)
2000018a:	00002597          	auipc	a1,0x2
2000018e:	c6658593          	addi	a1,a1,-922 # 20001df0 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000192:	41d0                	lw	a2,4(a1)
20000194:	4194                	lw	a3,0(a1)
20000196:	02a605b3          	mul	a1,a2,a0
2000019a:	02a6b633          	mulhu	a2,a3,a0
2000019e:	95b2                	add	a1,a1,a2
200001a0:	02a68533          	mul	a0,a3,a0
200001a4:	000f4637          	lui	a2,0xf4
200001a8:	24060613          	addi	a2,a2,576 # f4240 <wait_for_dai.kLogFields.15+0xe4100>
200001ac:	4681                	li	a3,0
200001ae:	009010ef          	jal	ra,200019b6 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200001b2:	4801                	li	a6,0
200001b4:	4701                	li	a4,0

200001b6 <read0>:
200001b6:	b8002873          	csrr	a6,mcycleh
200001ba:	b00026f3          	csrr	a3,mcycle
200001be:	b8002773          	csrr	a4,mcycleh
200001c2:	fee81ae3          	bne	a6,a4,200001b6 <read0>
200001c6:	4781                	li	a5,0
200001c8:	4601                	li	a2,0

200001ca <read1>:
200001ca:	b80027f3          	csrr	a5,mcycleh
200001ce:	b0002773          	csrr	a4,mcycle
200001d2:	b8002673          	csrr	a2,mcycleh
200001d6:	fec79ae3          	bne	a5,a2,200001ca <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
200001da:	00d73633          	sltu	a2,a4,a3
200001de:	410787b3          	sub	a5,a5,a6
200001e2:	8f91                	sub	a5,a5,a2
200001e4:	00b78663          	beq	a5,a1,200001f0 <read1+0x26>
200001e8:	00b7b733          	sltu	a4,a5,a1
200001ec:	ff69                	bnez	a4,200001c6 <read0+0x10>
200001ee:	a031                	j	200001fa <read1+0x30>
200001f0:	40d70633          	sub	a2,a4,a3
200001f4:	00a63733          	sltu	a4,a2,a0
200001f8:	f779                	bnez	a4,200001c6 <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
200001fa:	40b2                	lw	ra,12(sp)
200001fc:	0141                	addi	sp,sp,16
200001fe:	8082                	ret

20000200 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000200:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000204:	bff5                	j	20000200 <abort>
	...

20000208 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20000208:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000020a:	de06                	sw	ra,60(sp)
2000020c:	dc16                	sw	t0,56(sp)
2000020e:	da1a                	sw	t1,52(sp)
20000210:	d81e                	sw	t2,48(sp)
20000212:	d62a                	sw	a0,44(sp)
20000214:	d42e                	sw	a1,40(sp)
20000216:	d232                	sw	a2,36(sp)
20000218:	d036                	sw	a3,32(sp)
2000021a:	ce3a                	sw	a4,28(sp)
2000021c:	cc3e                	sw	a5,24(sp)
2000021e:	ca42                	sw	a6,20(sp)
20000220:	c846                	sw	a7,16(sp)
20000222:	c672                	sw	t3,12(sp)
20000224:	c476                	sw	t4,8(sp)
20000226:	c27a                	sw	t5,4(sp)
20000228:	c07e                	sw	t6,0(sp)
2000022a:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
2000022e:	897d                	andi	a0,a0,31
20000230:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20000232:	00a5dc63          	bge	a1,a0,2000024a <handler_exception+0x42>
20000236:	4599                	li	a1,6
20000238:	02a5c263          	blt	a1,a0,2000025c <handler_exception+0x54>
2000023c:	458d                	li	a1,3
2000023e:	02b50c63          	beq	a0,a1,20000276 <handler_exception+0x6e>
20000242:	4595                	li	a1,5
20000244:	02b50763          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000248:	a015                	j	2000026c <handler_exception+0x64>
2000024a:	c115                	beqz	a0,2000026e <handler_exception+0x66>
2000024c:	4585                	li	a1,1
2000024e:	02b50063          	beq	a0,a1,2000026e <handler_exception+0x66>
20000252:	4589                	li	a1,2
20000254:	00b51c63          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20000258:	208d                	jal	200002ba <handler_instr_ill_fault>
2000025a:	a839                	j	20000278 <handler_exception+0x70>
2000025c:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
2000025e:	00b50a63          	beq	a0,a1,20000272 <handler_exception+0x6a>
20000262:	45ad                	li	a1,11
20000264:	00b51463          	bne	a0,a1,2000026c <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20000268:	2065                	jal	20000310 <handler_ecall>
2000026a:	a039                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
2000026c:	a001                	j	2000026c <handler_exception+0x64>
2000026e:	2805                	jal	2000029e <handler_instr_acc_fault>
20000270:	a021                	j	20000278 <handler_exception+0x70>
20000272:	2049                	jal	200002f4 <handler_lsu_fault>
20000274:	a011                	j	20000278 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20000276:	208d                	jal	200002d8 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20000278:	4f82                	lw	t6,0(sp)
2000027a:	4f12                	lw	t5,4(sp)
2000027c:	4ea2                	lw	t4,8(sp)
2000027e:	4e32                	lw	t3,12(sp)
20000280:	48c2                	lw	a7,16(sp)
20000282:	4852                	lw	a6,20(sp)
20000284:	47e2                	lw	a5,24(sp)
20000286:	4772                	lw	a4,28(sp)
20000288:	5682                	lw	a3,32(sp)
2000028a:	5612                	lw	a2,36(sp)
2000028c:	55a2                	lw	a1,40(sp)
2000028e:	5532                	lw	a0,44(sp)
20000290:	53c2                	lw	t2,48(sp)
20000292:	5352                	lw	t1,52(sp)
20000294:	52e2                	lw	t0,56(sp)
20000296:	50f2                	lw	ra,60(sp)
20000298:	6121                	addi	sp,sp,64
2000029a:	30200073          	mret

2000029e <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
2000029e:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200002a0:	de06                	sw	ra,60(sp)
200002a2:	dc22                	sw	s0,56(sp)
200002a4:	00002597          	auipc	a1,0x2
200002a8:	eec58593          	addi	a1,a1,-276 # 20002190 <__clz_tab+0x160>
200002ac:	0040                	addi	s0,sp,4
200002ae:	03400613          	li	a2,52
200002b2:	8522                	mv	a0,s0
200002b4:	2ec5                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200002b6:	8522                	mv	a0,s0
200002b8:	2a71                	jal	20000454 <print_exc_msg>

200002ba <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200002ba:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200002bc:	c686                	sw	ra,76(sp)
200002be:	c4a2                	sw	s0,72(sp)
200002c0:	00002597          	auipc	a1,0x2
200002c4:	f0458593          	addi	a1,a1,-252 # 200021c4 <__clz_tab+0x194>
200002c8:	00d10413          	addi	s0,sp,13
200002cc:	03b00613          	li	a2,59
200002d0:	8522                	mv	a0,s0
200002d2:	2ec9                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200002d4:	8522                	mv	a0,s0
200002d6:	2abd                	jal	20000454 <print_exc_msg>

200002d8 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200002d8:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200002da:	de06                	sw	ra,60(sp)
200002dc:	dc22                	sw	s0,56(sp)
200002de:	00002597          	auipc	a1,0x2
200002e2:	f2158593          	addi	a1,a1,-223 # 200021ff <__clz_tab+0x1cf>
200002e6:	840a                	mv	s0,sp
200002e8:	03800613          	li	a2,56
200002ec:	8522                	mv	a0,s0
200002ee:	2e5d                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200002f0:	8522                	mv	a0,s0
200002f2:	228d                	jal	20000454 <print_exc_msg>

200002f4 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200002f4:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
200002f6:	de06                	sw	ra,60(sp)
200002f8:	dc22                	sw	s0,56(sp)
200002fa:	00002597          	auipc	a1,0x2
200002fe:	f3d58593          	addi	a1,a1,-195 # 20002237 <__clz_tab+0x207>
20000302:	0020                	addi	s0,sp,8
20000304:	03000613          	li	a2,48
20000308:	8522                	mv	a0,s0
2000030a:	2e69                	jal	200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
2000030c:	8522                	mv	a0,s0
2000030e:	2299                	jal	20000454 <print_exc_msg>

20000310 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20000310:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20000312:	ce06                	sw	ra,28(sp)
20000314:	cc22                	sw	s0,24(sp)
20000316:	00002517          	auipc	a0,0x2
2000031a:	b0250513          	addi	a0,a0,-1278 # 20001e18 <kDeviceLogBypassUartAddress>
2000031e:	4108                	lw	a0,0(a0)
20000320:	c909                	beqz	a0,20000332 <handler_ecall+0x22>
20000322:	e0010517          	auipc	a0,0xe0010
20000326:	d1a50513          	addi	a0,a0,-742 # 1003c <handler_ecall.kLogFields>
2000032a:	4581                	li	a1,0
2000032c:	5c7000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000330:	a821                	j	20000348 <handler_ecall+0x38>
20000332:	00002597          	auipc	a1,0x2
20000336:	a2a58593          	addi	a1,a1,-1494 # 20001d5c <__udivdi3+0x3a6>
2000033a:	840a                	mv	s0,sp
2000033c:	4651                	li	a2,20
2000033e:	8522                	mv	a0,s0
20000340:	2695                	jal	200006a4 <memcpy>
20000342:	8522                	mv	a0,s0
20000344:	505000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20000348:	a001                	j	20000348 <handler_ecall+0x38>
2000034a:	0001                	nop

2000034c <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
2000034c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
2000034e:	ce86                	sw	ra,92(sp)
20000350:	cc96                	sw	t0,88(sp)
20000352:	ca9a                	sw	t1,84(sp)
20000354:	c89e                	sw	t2,80(sp)
20000356:	c6a2                	sw	s0,76(sp)
20000358:	c4aa                	sw	a0,72(sp)
2000035a:	c2ae                	sw	a1,68(sp)
2000035c:	c0b2                	sw	a2,64(sp)
2000035e:	de36                	sw	a3,60(sp)
20000360:	dc3a                	sw	a4,56(sp)
20000362:	da3e                	sw	a5,52(sp)
20000364:	d842                	sw	a6,48(sp)
20000366:	d646                	sw	a7,44(sp)
20000368:	d472                	sw	t3,40(sp)
2000036a:	d276                	sw	t4,36(sp)
2000036c:	d07a                	sw	t5,32(sp)
2000036e:	ce7e                	sw	t6,28(sp)
20000370:	00002517          	auipc	a0,0x2
20000374:	aa850513          	addi	a0,a0,-1368 # 20001e18 <kDeviceLogBypassUartAddress>
20000378:	4108                	lw	a0,0(a0)
2000037a:	c909                	beqz	a0,2000038c <handler_irq_software+0x40>
2000037c:	e0010517          	auipc	a0,0xe0010
20000380:	c8450513          	addi	a0,a0,-892 # 10000 <_dv_log_offset>
20000384:	4581                	li	a1,0
20000386:	56d000ef          	jal	ra,200010f2 <base_log_internal_dv>
2000038a:	a821                	j	200003a2 <handler_irq_software+0x56>
2000038c:	00002597          	auipc	a1,0x2
20000390:	99458593          	addi	a1,a1,-1644 # 20001d20 <__udivdi3+0x36a>
20000394:	0020                	addi	s0,sp,8
20000396:	4651                	li	a2,20
20000398:	8522                	mv	a0,s0
2000039a:	2629                	jal	200006a4 <memcpy>
2000039c:	8522                	mv	a0,s0
2000039e:	4ab000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200003a2:	a001                	j	200003a2 <handler_irq_software+0x56>

200003a4 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200003a4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200003a6:	ce86                	sw	ra,92(sp)
200003a8:	cc96                	sw	t0,88(sp)
200003aa:	ca9a                	sw	t1,84(sp)
200003ac:	c89e                	sw	t2,80(sp)
200003ae:	c6a2                	sw	s0,76(sp)
200003b0:	c4aa                	sw	a0,72(sp)
200003b2:	c2ae                	sw	a1,68(sp)
200003b4:	c0b2                	sw	a2,64(sp)
200003b6:	de36                	sw	a3,60(sp)
200003b8:	dc3a                	sw	a4,56(sp)
200003ba:	da3e                	sw	a5,52(sp)
200003bc:	d842                	sw	a6,48(sp)
200003be:	d646                	sw	a7,44(sp)
200003c0:	d472                	sw	t3,40(sp)
200003c2:	d276                	sw	t4,36(sp)
200003c4:	d07a                	sw	t5,32(sp)
200003c6:	ce7e                	sw	t6,28(sp)
200003c8:	00002517          	auipc	a0,0x2
200003cc:	a5050513          	addi	a0,a0,-1456 # 20001e18 <kDeviceLogBypassUartAddress>
200003d0:	4108                	lw	a0,0(a0)
200003d2:	c909                	beqz	a0,200003e4 <handler_irq_timer+0x40>
200003d4:	e0010517          	auipc	a0,0xe0010
200003d8:	c4050513          	addi	a0,a0,-960 # 10014 <handler_irq_timer.kLogFields>
200003dc:	4581                	li	a1,0
200003de:	515000ef          	jal	ra,200010f2 <base_log_internal_dv>
200003e2:	a821                	j	200003fa <handler_irq_timer+0x56>
200003e4:	00002597          	auipc	a1,0x2
200003e8:	95058593          	addi	a1,a1,-1712 # 20001d34 <__udivdi3+0x37e>
200003ec:	0020                	addi	s0,sp,8
200003ee:	4651                	li	a2,20
200003f0:	8522                	mv	a0,s0
200003f2:	2c4d                	jal	200006a4 <memcpy>
200003f4:	8522                	mv	a0,s0
200003f6:	453000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
200003fa:	a001                	j	200003fa <handler_irq_timer+0x56>

200003fc <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
200003fc:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
200003fe:	ce86                	sw	ra,92(sp)
20000400:	cc96                	sw	t0,88(sp)
20000402:	ca9a                	sw	t1,84(sp)
20000404:	c89e                	sw	t2,80(sp)
20000406:	c6a2                	sw	s0,76(sp)
20000408:	c4aa                	sw	a0,72(sp)
2000040a:	c2ae                	sw	a1,68(sp)
2000040c:	c0b2                	sw	a2,64(sp)
2000040e:	de36                	sw	a3,60(sp)
20000410:	dc3a                	sw	a4,56(sp)
20000412:	da3e                	sw	a5,52(sp)
20000414:	d842                	sw	a6,48(sp)
20000416:	d646                	sw	a7,44(sp)
20000418:	d472                	sw	t3,40(sp)
2000041a:	d276                	sw	t4,36(sp)
2000041c:	d07a                	sw	t5,32(sp)
2000041e:	ce7e                	sw	t6,28(sp)
20000420:	00002517          	auipc	a0,0x2
20000424:	9f850513          	addi	a0,a0,-1544 # 20001e18 <kDeviceLogBypassUartAddress>
20000428:	4108                	lw	a0,0(a0)
2000042a:	c909                	beqz	a0,2000043c <handler_irq_external+0x40>
2000042c:	e0010517          	auipc	a0,0xe0010
20000430:	bfc50513          	addi	a0,a0,-1028 # 10028 <handler_irq_external.kLogFields>
20000434:	4581                	li	a1,0
20000436:	4bd000ef          	jal	ra,200010f2 <base_log_internal_dv>
2000043a:	a821                	j	20000452 <handler_irq_external+0x56>
2000043c:	00002597          	auipc	a1,0x2
20000440:	90c58593          	addi	a1,a1,-1780 # 20001d48 <__udivdi3+0x392>
20000444:	0020                	addi	s0,sp,8
20000446:	4651                	li	a2,20
20000448:	8522                	mv	a0,s0
2000044a:	2ca9                	jal	200006a4 <memcpy>
2000044c:	8522                	mv	a0,s0
2000044e:	3fb000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20000452:	a001                	j	20000452 <handler_irq_external+0x56>

20000454 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20000454:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20000456:	ce06                	sw	ra,28(sp)
20000458:	cc22                	sw	s0,24(sp)
2000045a:	ca26                	sw	s1,20(sp)
2000045c:	00002597          	auipc	a1,0x2
20000460:	9bc58593          	addi	a1,a1,-1604 # 20001e18 <kDeviceLogBypassUartAddress>
20000464:	418c                	lw	a1,0(a1)
20000466:	842a                	mv	s0,a0
20000468:	c19d                	beqz	a1,2000048e <print_exc_msg+0x3a>
2000046a:	e0010517          	auipc	a0,0xe0010
2000046e:	be650513          	addi	a0,a0,-1050 # 10050 <print_exc_msg.kLogFields>
20000472:	4585                	li	a1,1
20000474:	8622                	mv	a2,s0
20000476:	47d000ef          	jal	ra,200010f2 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
2000047a:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
2000047e:	e0010517          	auipc	a0,0xe0010
20000482:	be650513          	addi	a0,a0,-1050 # 10064 <print_exc_msg.kLogFields.6>
20000486:	4585                	li	a1,1
20000488:	46b000ef          	jal	ra,200010f2 <base_log_internal_dv>
2000048c:	a81d                	j	200004c2 <print_exc_msg+0x6e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000048e:	00002597          	auipc	a1,0x2
20000492:	8e258593          	addi	a1,a1,-1822 # 20001d70 <__udivdi3+0x3ba>
20000496:	848a                	mv	s1,sp
20000498:	4651                	li	a2,20
2000049a:	8526                	mv	a0,s1
2000049c:	2421                	jal	200006a4 <memcpy>
2000049e:	8526                	mv	a0,s1
200004a0:	85a2                	mv	a1,s0
200004a2:	3a7000ef          	jal	ra,20001048 <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200004a6:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200004aa:	00002597          	auipc	a1,0x2
200004ae:	8da58593          	addi	a1,a1,-1830 # 20001d84 <__udivdi3+0x3ce>
200004b2:	848a                	mv	s1,sp
200004b4:	4651                	li	a2,20
200004b6:	8526                	mv	a0,s1
200004b8:	22f5                	jal	200006a4 <memcpy>
200004ba:	8526                	mv	a0,s1
200004bc:	85a2                	mv	a1,s0
200004be:	38b000ef          	jal	ra,20001048 <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200004c2:	a001                	j	200004c2 <print_exc_msg+0x6e>

200004c4 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:37
                           }) == kDifUartConfigOk,
        "failed to configure UART");
  base_uart_stdout(&uart0);
}

int main(int argc, char **argv) {
200004c4:	1141                	addi	sp,sp,-16
200004c6:	c606                	sw	ra,12(sp)
200004c8:	c422                	sw	s0,8(sp)
200004ca:	6511                	lui	a0,0x4
200004cc:	35450513          	addi	a0,a0,852 # 4354 <_stack_size+0x2354>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:38
  test_status_set(kTestStatusInTest);
200004d0:	2231                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:41

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
200004d2:	00002517          	auipc	a0,0x2
200004d6:	91650513          	addi	a0,a0,-1770 # 20001de8 <kDeviceType>
200004da:	4108                	lw	a0,0(a0)
200004dc:	c111                	beqz	a0,200004e0 <main+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:42
    init_uart();
200004de:	280d                	jal	20000510 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  }

  // Run the SW test which is fully contained within `test_main()`.
  bool result = test_main();
200004e0:	2c81                	jal	20000730 <test_main>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49

  // Must happen before any debug output.
  if (kTestConfig.can_clobber_uart) {
200004e2:	00002597          	auipc	a1,0x2
200004e6:	9ba58593          	addi	a1,a1,-1606 # 20001e9c <kTestConfig>
200004ea:	0005c583          	lbu	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:46
  bool result = test_main();
200004ee:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:49
  if (kTestConfig.can_clobber_uart) {
200004f0:	c191                	beqz	a1,200004f4 <main+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:50
    init_uart();
200004f2:	2839                	jal	20000510 <init_uart>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:53
  }

  test_coverage_send_buffer();
200004f4:	2255                	jal	20000698 <test_coverage_send_buffer>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:54
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
200004f6:	e409                	bnez	s0,20000500 <main+0x3c>
200004f8:	6531                	lui	a0,0xc
200004fa:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200004fe:	a019                	j	20000504 <main+0x40>
20000500:	6525                	lui	a0,0x9
20000502:	0535                	addi	a0,a0,13
20000504:	28e1                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:57

  // Unreachable code.
  return 1;
20000506:	4505                	li	a0,1
20000508:	4422                	lw	s0,8(sp)
2000050a:	40b2                	lw	ra,12(sp)
2000050c:	0141                	addi	sp,sp,16
2000050e:	8082                	ret

20000510 <init_uart>:
init_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:18
static void init_uart(void) {
20000510:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:19
  CHECK(
20000512:	ce06                	sw	ra,28(sp)
20000514:	cc22                	sw	s0,24(sp)
20000516:	ca26                	sw	s1,20(sp)
20000518:	f0000597          	auipc	a1,0xf0000
2000051c:	af058593          	addi	a1,a1,-1296 # 10000008 <_data_end>
20000520:	40000537          	lui	a0,0x40000
20000524:	0cc010ef          	jal	ra,200015f0 <dif_uart_init>
20000528:	00002497          	auipc	s1,0x2
2000052c:	8f048493          	addi	s1,s1,-1808 # 20001e18 <kDeviceLogBypassUartAddress>
20000530:	c915                	beqz	a0,20000564 <init_uart+0x54>
20000532:	4088                	lw	a0,0(s1)
20000534:	c909                	beqz	a0,20000546 <init_uart+0x36>
20000536:	e0010517          	auipc	a0,0xe0010
2000053a:	b4250513          	addi	a0,a0,-1214 # 10078 <init_uart.kLogFields>
2000053e:	4581                	li	a1,0
20000540:	3b3000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000544:	a821                	j	2000055c <init_uart+0x4c>
20000546:	00002597          	auipc	a1,0x2
2000054a:	85258593          	addi	a1,a1,-1966 # 20001d98 <__udivdi3+0x3e2>
2000054e:	840a                	mv	s0,sp
20000550:	4651                	li	a2,20
20000552:	8522                	mv	a0,s0
20000554:	2a81                	jal	200006a4 <memcpy>
20000556:	8522                	mv	a0,s0
20000558:	2f1000ef          	jal	ra,20001048 <base_log_internal_core>
2000055c:	6531                	lui	a0,0xc
2000055e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000562:	28ad                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:26
  CHECK(dif_uart_configure(&uart0,
20000564:	00002517          	auipc	a0,0x2
20000568:	8a450513          	addi	a0,a0,-1884 # 20001e08 <kUartBaudrate>
2000056c:	4108                	lw	a0,0(a0)
2000056e:	00002597          	auipc	a1,0x2
20000572:	88a58593          	addi	a1,a1,-1910 # 20001df8 <kClockFreqPeripheralHz>
20000576:	418c                	lw	a1,0(a1)
20000578:	c02a                	sw	a0,0(sp)
2000057a:	c22e                	sw	a1,4(sp)
2000057c:	4505                	li	a0,1
2000057e:	c42a                	sw	a0,8(sp)
20000580:	c62a                	sw	a0,12(sp)
20000582:	f0000517          	auipc	a0,0xf0000
20000586:	a8650513          	addi	a0,a0,-1402 # 10000008 <_data_end>
2000058a:	858a                	mv	a1,sp
2000058c:	072010ef          	jal	ra,200015fe <dif_uart_configure>
20000590:	c915                	beqz	a0,200005c4 <init_uart+0xb4>
20000592:	4088                	lw	a0,0(s1)
20000594:	c909                	beqz	a0,200005a6 <init_uart+0x96>
20000596:	e0010517          	auipc	a0,0xe0010
2000059a:	af650513          	addi	a0,a0,-1290 # 1008c <init_uart.kLogFields.2>
2000059e:	4581                	li	a1,0
200005a0:	353000ef          	jal	ra,200010f2 <base_log_internal_dv>
200005a4:	a821                	j	200005bc <init_uart+0xac>
200005a6:	00002597          	auipc	a1,0x2
200005aa:	80658593          	addi	a1,a1,-2042 # 20001dac <__udivdi3+0x3f6>
200005ae:	840a                	mv	s0,sp
200005b0:	4651                	li	a2,20
200005b2:	8522                	mv	a0,s0
200005b4:	28c5                	jal	200006a4 <memcpy>
200005b6:	8522                	mv	a0,s0
200005b8:	291000ef          	jal	ra,20001048 <base_log_internal_core>
200005bc:	6531                	lui	a0,0xc
200005be:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005c2:	2829                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:34
  base_uart_stdout(&uart0);
200005c4:	f0000517          	auipc	a0,0xf0000
200005c8:	a4450513          	addi	a0,a0,-1468 # 10000008 <_data_end>
200005cc:	379000ef          	jal	ra,20001144 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_main.c:35
}
200005d0:	44d2                	lw	s1,20(sp)
200005d2:	4462                	lw	s0,24(sp)
200005d4:	40f2                	lw	ra,28(sp)
200005d6:	6105                	addi	sp,sp,32
200005d8:	8082                	ret
	...

200005dc <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
200005dc:	1101                	addi	sp,sp,-32
200005de:	ce06                	sw	ra,28(sp)
200005e0:	cc22                	sw	s0,24(sp)
200005e2:	65b1                	lui	a1,0xc
200005e4:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
200005e8:	02b50163          	beq	a0,a1,2000060a <test_status_set+0x2e>
200005ec:	65a5                	lui	a1,0x9
200005ee:	05b5                	addi	a1,a1,13
200005f0:	02b50f63          	beq	a0,a1,2000062e <test_status_set+0x52>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200005f4:	00002597          	auipc	a1,0x2
200005f8:	82058593          	addi	a1,a1,-2016 # 20001e14 <kDeviceTestStatusAddress>
200005fc:	418c                	lw	a1,0(a1)
200005fe:	c191                	beqz	a1,20000602 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000600:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20000602:	4462                	lw	s0,24(sp)
20000604:	40f2                	lw	ra,28(sp)
20000606:	6105                	addi	sp,sp,32
20000608:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
2000060a:	00002517          	auipc	a0,0x2
2000060e:	80e50513          	addi	a0,a0,-2034 # 20001e18 <kDeviceLogBypassUartAddress>
20000612:	4108                	lw	a0,0(a0)
20000614:	ed1d                	bnez	a0,20000652 <test_status_set+0x76>
20000616:	00001597          	auipc	a1,0x1
2000061a:	7be58593          	addi	a1,a1,1982 # 20001dd4 <__udivdi3+0x41e>
2000061e:	840a                	mv	s0,sp
20000620:	4651                	li	a2,20
20000622:	8522                	mv	a0,s0
20000624:	2041                	jal	200006a4 <memcpy>
20000626:	8522                	mv	a0,s0
20000628:	221000ef          	jal	ra,20001048 <base_log_internal_core>
2000062c:	a815                	j	20000660 <test_status_set+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
2000062e:	00001517          	auipc	a0,0x1
20000632:	7ea50513          	addi	a0,a0,2026 # 20001e18 <kDeviceLogBypassUartAddress>
20000636:	4108                	lw	a0,0(a0)
20000638:	ed15                	bnez	a0,20000674 <test_status_set+0x98>
2000063a:	00001597          	auipc	a1,0x1
2000063e:	78658593          	addi	a1,a1,1926 # 20001dc0 <__udivdi3+0x40a>
20000642:	840a                	mv	s0,sp
20000644:	4651                	li	a2,20
20000646:	8522                	mv	a0,s0
20000648:	28b1                	jal	200006a4 <memcpy>
2000064a:	8522                	mv	a0,s0
2000064c:	1fd000ef          	jal	ra,20001048 <base_log_internal_core>
20000650:	a80d                	j	20000682 <test_status_set+0xa6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20000652:	e0010517          	auipc	a0,0xe0010
20000656:	a6250513          	addi	a0,a0,-1438 # 100b4 <test_status_set.kLogFields.2>
2000065a:	4581                	li	a1,0
2000065c:	297000ef          	jal	ra,200010f2 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000660:	00001517          	auipc	a0,0x1
20000664:	7b450513          	addi	a0,a0,1972 # 20001e14 <kDeviceTestStatusAddress>
20000668:	4108                	lw	a0,0(a0)
2000066a:	c50d                	beqz	a0,20000694 <test_status_set+0xb8>
2000066c:	65b1                	lui	a1,0xc
2000066e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20000672:	a005                	j	20000692 <test_status_set+0xb6>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20000674:	e0010517          	auipc	a0,0xe0010
20000678:	a2c50513          	addi	a0,a0,-1492 # 100a0 <test_status_set.kLogFields>
2000067c:	4581                	li	a1,0
2000067e:	275000ef          	jal	ra,200010f2 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20000682:	00001517          	auipc	a0,0x1
20000686:	79250513          	addi	a0,a0,1938 # 20001e14 <kDeviceTestStatusAddress>
2000068a:	4108                	lw	a0,0(a0)
2000068c:	c501                	beqz	a0,20000694 <test_status_set+0xb8>
2000068e:	65a5                	lui	a1,0x9
20000690:	05b5                	addi	a1,a1,13
20000692:	c10c                	sw	a1,0(a0)
20000694:	36b5                	jal	20000200 <abort>
	...

20000698 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_coverage_none.c:9

#include "sw/device/lib/testing/test_coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
20000698:	8082                	ret
	...

2000069c <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
2000069c:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
2000069e:	8082                	ret

200006a0 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200006a0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
200006a2:	8082                	ret

200006a4 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
200006a4:	ca11                	beqz	a2,200006b8 <memcpy+0x14>
200006a6:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
200006a8:	00058703          	lb	a4,0(a1) # 9000 <_stack_size+0x7000>
200006ac:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
200006b0:	167d                	addi	a2,a2,-1
200006b2:	0685                	addi	a3,a3,1
200006b4:	0585                	addi	a1,a1,1
200006b6:	fa6d                	bnez	a2,200006a8 <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
200006b8:	8082                	ret

200006ba <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006ba:	c619                	beqz	a2,200006c8 <memset+0xe>
200006bc:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
200006be:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
200006c2:	167d                	addi	a2,a2,-1
200006c4:	0685                	addi	a3,a3,1
200006c6:	fe65                	bnez	a2,200006be <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
200006c8:	8082                	ret

200006ca <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
200006ca:	ce09                	beqz	a2,200006e4 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
200006cc:	00054683          	lbu	a3,0(a0)
200006d0:	0005c703          	lbu	a4,0(a1)
200006d4:	00e6ea63          	bltu	a3,a4,200006e8 <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
200006d8:	00d76b63          	bltu	a4,a3,200006ee <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
200006dc:	167d                	addi	a2,a2,-1
200006de:	0585                	addi	a1,a1,1
200006e0:	0505                	addi	a0,a0,1
200006e2:	f66d                	bnez	a2,200006cc <memcmp+0x2>
200006e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
200006e6:	8082                	ret
200006e8:	fd600513          	li	a0,-42
200006ec:	8082                	ret
200006ee:	02a00513          	li	a0,42
200006f2:	8082                	ret

200006f4 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
200006f4:	ca11                	beqz	a2,20000708 <memchr+0x14>
200006f6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
200006fa:	00054683          	lbu	a3,0(a0)
200006fe:	00b68663          	beq	a3,a1,2000070a <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000702:	167d                	addi	a2,a2,-1
20000704:	0505                	addi	a0,a0,1
20000706:	fa75                	bnez	a2,200006fa <memchr+0x6>
20000708:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
2000070a:	8082                	ret

2000070c <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
2000070c:	ce09                	beqz	a2,20000726 <memrchr+0x1a>
2000070e:	fff50693          	addi	a3,a0,-1
20000712:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000716:	00c68733          	add	a4,a3,a2
2000071a:	00074703          	lbu	a4,0(a4)
2000071e:	00b70663          	beq	a4,a1,2000072a <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000722:	167d                	addi	a2,a2,-1
20000724:	fa6d                	bnez	a2,20000716 <memrchr+0xa>
20000726:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000728:	8082                	ret
2000072a:	9532                	add	a0,a0,a2
2000072c:	157d                	addi	a0,a0,-1
2000072e:	8082                	ret

20000730 <test_main>:
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:43

/**
 * Tests that the OTP can be programed in a particular spot, and that the
 * value can then be read out exactly through the blocking read interface.
 */
bool test_main(void) {
20000730:	7119                	addi	sp,sp,-128
20000732:	de86                	sw	ra,124(sp)
20000734:	dca2                	sw	s0,120(sp)
20000736:	daa6                	sw	s1,116(sp)
20000738:	d8ca                	sw	s2,112(sp)
2000073a:	d6ce                	sw	s3,108(sp)
2000073c:	d4d2                	sw	s4,104(sp)
2000073e:	d2d6                	sw	s5,100(sp)
20000740:	d0da                	sw	s6,96(sp)
20000742:	cede                	sw	s7,92(sp)
20000744:	cce2                	sw	s8,88(sp)
20000746:	cae6                	sw	s9,84(sp)
20000748:	c8ea                	sw	s10,80(sp)
2000074a:	c6ee                	sw	s11,76(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:46
  mmio_region_t otp_reg =
      mmio_region_from_addr(TOP_EARLGREY_OTP_CTRL_BASE_ADDR);
  CHECK(dif_otp_ctrl_init((dif_otp_ctrl_params_t){.base_addr = otp_reg},
2000074c:	f0000597          	auipc	a1,0xf0000
20000750:	8c058593          	addi	a1,a1,-1856 # 1000000c <otp>
20000754:	40130537          	lui	a0,0x40130
20000758:	24b1                	jal	200009a4 <dif_otp_ctrl_init>
2000075a:	00001497          	auipc	s1,0x1
2000075e:	6be48493          	addi	s1,s1,1726 # 20001e18 <kDeviceLogBypassUartAddress>
20000762:	c915                	beqz	a0,20000796 <test_main+0x66>
20000764:	4088                	lw	a0,0(s1)
20000766:	c909                	beqz	a0,20000778 <test_main+0x48>
20000768:	e0010517          	auipc	a0,0xe0010
2000076c:	96050513          	addi	a0,a0,-1696 # 100c8 <test_main.kLogFields>
20000770:	4581                	li	a1,0
20000772:	181000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000776:	a821                	j	2000078e <test_main+0x5e>
20000778:	00001597          	auipc	a1,0x1
2000077c:	6a458593          	addi	a1,a1,1700 # 20001e1c <kDeviceLogBypassUartAddress+0x4>
20000780:	1000                	addi	s0,sp,32
20000782:	4651                	li	a2,20
20000784:	8522                	mv	a0,s0
20000786:	3f39                	jal	200006a4 <memcpy>
20000788:	8522                	mv	a0,s0
2000078a:	0bf000ef          	jal	ra,20001048 <base_log_internal_core>
2000078e:	6531                	lui	a0,0xc
20000790:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000794:	35a1                	jal	200005dc <test_status_set>
20000796:	00001517          	auipc	a0,0x1
2000079a:	69a50513          	addi	a0,a0,1690 # 20001e30 <kDeviceLogBypassUartAddress+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:54
  dif_otp_ctrl_config_t config = {
      .check_timeout = 100000,
      .integrity_period_mask = 0x3ffff,
      .consistency_period_mask = 0x3ffffff,
  };
  CHECK(dif_otp_ctrl_configure(&otp, config) == kDifOtpCtrlLockableOk);
2000079e:	450c                	lw	a1,8(a0)
200007a0:	4150                	lw	a2,4(a0)
200007a2:	4108                	lw	a0,0(a0)
200007a4:	d42e                	sw	a1,40(sp)
200007a6:	d232                	sw	a2,36(sp)
200007a8:	d02a                	sw	a0,32(sp)
200007aa:	f0000517          	auipc	a0,0xf0000
200007ae:	86250513          	addi	a0,a0,-1950 # 1000000c <otp>
200007b2:	100c                	addi	a1,sp,32
200007b4:	2afd                	jal	200009b2 <dif_otp_ctrl_configure>
200007b6:	0004aa83          	lw	s5,0(s1)
200007ba:	c915                	beqz	a0,200007ee <test_main+0xbe>
200007bc:	000a8a63          	beqz	s5,200007d0 <test_main+0xa0>
200007c0:	e0010517          	auipc	a0,0xe0010
200007c4:	91c50513          	addi	a0,a0,-1764 # 100dc <test_main.kLogFields.2>
200007c8:	4581                	li	a1,0
200007ca:	129000ef          	jal	ra,200010f2 <base_log_internal_dv>
200007ce:	a821                	j	200007e6 <test_main+0xb6>
200007d0:	00001597          	auipc	a1,0x1
200007d4:	66c58593          	addi	a1,a1,1644 # 20001e3c <kDeviceLogBypassUartAddress+0x24>
200007d8:	1000                	addi	s0,sp,32
200007da:	4651                	li	a2,20
200007dc:	8522                	mv	a0,s0
200007de:	35d9                	jal	200006a4 <memcpy>
200007e0:	8522                	mv	a0,s0
200007e2:	067000ef          	jal	ra,20001048 <base_log_internal_core>
200007e6:	6531                	lui	a0,0xc
200007e8:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200007ec:	3bc5                	jal	200005dc <test_status_set>
200007ee:	4501                	li	a0,0
200007f0:	00001b97          	auipc	s7,0x1
200007f4:	660b8b93          	addi	s7,s7,1632 # 20001e50 <kTestData>
200007f8:	f0000417          	auipc	s0,0xf0000
200007fc:	81440413          	addi	s0,s0,-2028 # 1000000c <otp>
20000800:	02010993          	addi	s3,sp,32
20000804:	00001917          	auipc	s2,0x1
20000808:	6b090913          	addi	s2,s2,1712 # 20001eb4 <kTestConfig+0x18>
2000080c:	00810a13          	addi	s4,sp,8
20000810:	e0010b17          	auipc	s6,0xe0010
20000814:	930b0b13          	addi	s6,s6,-1744 # 10140 <wait_for_dai.kLogFields.15>
20000818:	00001597          	auipc	a1,0x1
2000081c:	64858593          	addi	a1,a1,1608 # 20001e60 <kTestData+0x10>
20000820:	c02e                	sw	a1,0(sp)
20000822:	65b1                	lui	a1,0xc
20000824:	aad58493          	addi	s1,a1,-1363 # baad <_stack_size+0x9aad>
20000828:	e0010597          	auipc	a1,0xe0010
2000082c:	8c858593          	addi	a1,a1,-1848 # 100f0 <test_main.kLogFields.5>
20000830:	c22e                	sw	a1,4(sp)
20000832:	00001c17          	auipc	s8,0x1
20000836:	66ec0c13          	addi	s8,s8,1646 # 20001ea0 <kTestConfig+0x4>
2000083a:	e0010c97          	auipc	s9,0xe0010
2000083e:	8f2c8c93          	addi	s9,s9,-1806 # 1012c <wait_for_dai.kLogFields>
20000842:	8d2a                	mv	s10,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:58

  for (int i = 0; i < ARRAYSIZE(kTestData); i += sizeof(uint32_t)) {
    uint32_t word;
    memcpy(&word, &kTestData[i], sizeof(word));
20000844:	955e                	add	a0,a0,s7
20000846:	00154583          	lbu	a1,1(a0)
2000084a:	00054603          	lbu	a2,0(a0)
2000084e:	00354683          	lbu	a3,3(a0)
20000852:	00254503          	lbu	a0,2(a0)
20000856:	05a2                	slli	a1,a1,0x8
20000858:	8dd1                	or	a1,a1,a2
2000085a:	00869613          	slli	a2,a3,0x8
2000085e:	8d51                	or	a0,a0,a2
20000860:	0542                	slli	a0,a0,0x10
20000862:	00b56db3          	or	s11,a0,a1
wait_for_dai():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:31
    CHECK(dif_otp_ctrl_get_status(&otp, &status) == kDifOtpCtrlOk);
20000866:	8522                	mv	a0,s0
20000868:	85ce                	mv	a1,s3
2000086a:	2639                	jal	20000b78 <dif_otp_ctrl_get_status>
2000086c:	c10d                	beqz	a0,2000088e <test_main+0x15e>
2000086e:	000a8763          	beqz	s5,2000087c <test_main+0x14c>
20000872:	8566                	mv	a0,s9
20000874:	4581                	li	a1,0
20000876:	07d000ef          	jal	ra,200010f2 <base_log_internal_dv>
2000087a:	a801                	j	2000088a <test_main+0x15a>
2000087c:	4651                	li	a2,20
2000087e:	8552                	mv	a0,s4
20000880:	85e2                	mv	a1,s8
20000882:	350d                	jal	200006a4 <memcpy>
20000884:	8552                	mv	a0,s4
20000886:	7c2000ef          	jal	ra,20001048 <base_log_internal_core>
2000088a:	8526                	mv	a0,s1
2000088c:	3b81                	jal	200005dc <test_status_set>
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000088e:	02114503          	lbu	a0,33(sp)
20000892:	02057513          	andi	a0,a0,32
wait_for_dai():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:32
    if (bitfield_bit32_read(status.codes, kDifOtpCtrlStatusCodeDaiIdle)) {
20000896:	e105                	bnez	a0,200008b6 <test_main+0x186>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:35
    LOG_INFO("Waiting for DAI...");
20000898:	000a8763          	beqz	s5,200008a6 <test_main+0x176>
2000089c:	855a                	mv	a0,s6
2000089e:	4581                	li	a1,0
200008a0:	053000ef          	jal	ra,200010f2 <base_log_internal_dv>
200008a4:	b7c9                	j	20000866 <test_main+0x136>
200008a6:	4651                	li	a2,20
200008a8:	8552                	mv	a0,s4
200008aa:	85ca                	mv	a1,s2
200008ac:	3be5                	jal	200006a4 <memcpy>
200008ae:	8552                	mv	a0,s4
200008b0:	798000ef          	jal	ra,20001048 <base_log_internal_core>
200008b4:	bf4d                	j	20000866 <test_main+0x136>
test_main():
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:62

    wait_for_dai();
    dif_otp_ctrl_dai_result_t err = dif_otp_ctrl_dai_program32(
        &otp, kDifOtpCtrlPartitionOwnerSwCfg, 0x100 + i, word);
200008b6:	100d0613          	addi	a2,s10,256
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:61
    dif_otp_ctrl_dai_result_t err = dif_otp_ctrl_dai_program32(
200008ba:	4585                	li	a1,1
200008bc:	8522                	mv	a0,s0
200008be:	86ee                	mv	a3,s11
200008c0:	2e6d                	jal	20000c7a <dif_otp_ctrl_dai_program32>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:63
    CHECK(err == kDifOtpCtrlDaiOk,
200008c2:	c50d                	beqz	a0,200008ec <test_main+0x1bc>
200008c4:	000a8963          	beqz	s5,200008d6 <test_main+0x1a6>
200008c8:	4589                	li	a1,2
200008ca:	4512                	lw	a0,4(sp)
200008cc:	866a                	mv	a2,s10
200008ce:	86ee                	mv	a3,s11
200008d0:	023000ef          	jal	ra,200010f2 <base_log_internal_dv>
200008d4:	a811                	j	200008e8 <test_main+0x1b8>
200008d6:	4651                	li	a2,20
200008d8:	854e                	mv	a0,s3
200008da:	4582                	lw	a1,0(sp)
200008dc:	33e1                	jal	200006a4 <memcpy>
200008de:	854e                	mv	a0,s3
200008e0:	85ea                	mv	a1,s10
200008e2:	866e                	mv	a2,s11
200008e4:	764000ef          	jal	ra,20001048 <base_log_internal_core>
200008e8:	8526                	mv	a0,s1
200008ea:	39cd                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:56
  for (int i = 0; i < ARRAYSIZE(kTestData); i += sizeof(uint32_t)) {
200008ec:	004d0513          	addi	a0,s10,4
200008f0:	45b1                	li	a1,12
200008f2:	f4bd68e3          	bltu	s10,a1,20000842 <test_main+0x112>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:67
          "Failed to program word kTestData[%d] = 0x%8x.", i, word);
  }

  uint32_t readout[ARRAYSIZE(kTestData) / sizeof(uint32_t)] = {0};
200008f6:	ca02                	sw	zero,20(sp)
200008f8:	c802                	sw	zero,16(sp)
200008fa:	c602                	sw	zero,12(sp)
200008fc:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:69
  dif_otp_ctrl_dai_result_t err =
      dif_otp_ctrl_read_blocking(&otp, kDifOtpCtrlPartitionOwnerSwCfg, 0x100,
200008fe:	effff517          	auipc	a0,0xeffff
20000902:	70e50513          	addi	a0,a0,1806 # 1000000c <otp>
20000906:	0034                	addi	a3,sp,8
20000908:	4585                	li	a1,1
2000090a:	10000613          	li	a2,256
2000090e:	4741                	li	a4,16
20000910:	29f5                	jal	20000e0c <dif_otp_ctrl_read_blocking>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:71
                                 readout, ARRAYSIZE(kTestData));
  CHECK(err == kDifOtpCtrlDaiOk, "Failed to perform OTP blocking readout.");
20000912:	c90d                	beqz	a0,20000944 <test_main+0x214>
20000914:	000a8a63          	beqz	s5,20000928 <test_main+0x1f8>
20000918:	e000f517          	auipc	a0,0xe000f
2000091c:	7ec50513          	addi	a0,a0,2028 # 10104 <test_main.kLogFields.8>
20000920:	4581                	li	a1,0
20000922:	7d0000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000926:	a819                	j	2000093c <test_main+0x20c>
20000928:	00001597          	auipc	a1,0x1
2000092c:	54c58593          	addi	a1,a1,1356 # 20001e74 <kTestData+0x24>
20000930:	1000                	addi	s0,sp,32
20000932:	4651                	li	a2,20
20000934:	8522                	mv	a0,s0
20000936:	33bd                	jal	200006a4 <memcpy>
20000938:	8522                	mv	a0,s0
2000093a:	2739                	jal	20001048 <base_log_internal_core>
2000093c:	6531                	lui	a0,0xc
2000093e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000942:	3969                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:73

  CHECK(memcmp(kTestData, readout, ARRAYSIZE(kTestData)) == 0);
20000944:	00001517          	auipc	a0,0x1
20000948:	50c50513          	addi	a0,a0,1292 # 20001e50 <kTestData>
2000094c:	002c                	addi	a1,sp,8
2000094e:	4641                	li	a2,16
20000950:	3bad                	jal	200006ca <memcmp>
20000952:	c90d                	beqz	a0,20000984 <test_main+0x254>
20000954:	000a8a63          	beqz	s5,20000968 <test_main+0x238>
20000958:	e000f517          	auipc	a0,0xe000f
2000095c:	7c050513          	addi	a0,a0,1984 # 10118 <test_main.kLogFields.11>
20000960:	4581                	li	a1,0
20000962:	790000ef          	jal	ra,200010f2 <base_log_internal_dv>
20000966:	a819                	j	2000097c <test_main+0x24c>
20000968:	00001597          	auipc	a1,0x1
2000096c:	52058593          	addi	a1,a1,1312 # 20001e88 <kTestData+0x38>
20000970:	1000                	addi	s0,sp,32
20000972:	4651                	li	a2,20
20000974:	8522                	mv	a0,s0
20000976:	333d                	jal	200006a4 <memcpy>
20000978:	8522                	mv	a0,s0
2000097a:	25f9                	jal	20001048 <base_log_internal_core>
2000097c:	6531                	lui	a0,0xc
2000097e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000982:	39a9                	jal	200005dc <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/tests/dif/dif_otp_ctrl_smoketest.c:75

  return true;
20000984:	4505                	li	a0,1
20000986:	4db6                	lw	s11,76(sp)
20000988:	4d46                	lw	s10,80(sp)
2000098a:	4cd6                	lw	s9,84(sp)
2000098c:	4c66                	lw	s8,88(sp)
2000098e:	4bf6                	lw	s7,92(sp)
20000990:	5b06                	lw	s6,96(sp)
20000992:	5a96                	lw	s5,100(sp)
20000994:	5a26                	lw	s4,104(sp)
20000996:	59b6                	lw	s3,108(sp)
20000998:	5946                	lw	s2,112(sp)
2000099a:	54d6                	lw	s1,116(sp)
2000099c:	5466                	lw	s0,120(sp)
2000099e:	50f6                	lw	ra,124(sp)
200009a0:	6109                	addi	sp,sp,128
200009a2:	8082                	ret

200009a4 <dif_otp_ctrl_init>:
dif_otp_ctrl_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:16

#include "otp_ctrl_regs.h"  // Generated.

dif_otp_ctrl_result_t dif_otp_ctrl_init(dif_otp_ctrl_params_t params,
                                        dif_otp_ctrl_t *otp) {
  if (otp == NULL) {
200009a4:	c581                	beqz	a1,200009ac <dif_otp_ctrl_init+0x8>
200009a6:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:20
    return kDifOtpCtrlBadArg;
  }

  otp->params = params;
200009a8:	c188                	sw	a0,0(a1)
200009aa:	a011                	j	200009ae <dif_otp_ctrl_init+0xa>
200009ac:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:22
  return kDifOtpCtrlOk;
}
200009ae:	8532                	mv	a0,a2
200009b0:	8082                	ret

200009b2 <dif_otp_ctrl_configure>:
dif_otp_ctrl_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:38
  return !bitfield_bit32_read(locked, OTP_CTRL_CHECK_REGWEN_CHECK_REGWEN_BIT);
}

dif_otp_ctrl_lockable_result_t dif_otp_ctrl_configure(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_config_t config) {
  if (otp == NULL) {
200009b2:	c10d                	beqz	a0,200009d4 <dif_otp_ctrl_configure+0x22>
checks_are_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:31
  uint32_t locked = mmio_region_read32(otp->params.base_addr,
200009b4:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200009b6:	5ed0                	lw	a2,60(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200009b8:	00167713          	andi	a4,a2,1
200009bc:	460d                	li	a2,3
dif_otp_ctrl_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:41
    return kDifOtpCtrlLockableBadArg;
  }
  if (checks_are_locked(otp)) {
200009be:	cf01                	beqz	a4,200009d6 <dif_otp_ctrl_configure+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:46
    return kDifOtpCtrlLockableLocked;
  }

  mmio_region_write32(otp->params.base_addr, OTP_CTRL_CHECK_TIMEOUT_REG_OFFSET,
                      config.check_timeout);
200009c0:	4190                	lw	a2,0(a1)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200009c2:	c2b0                	sw	a2,64(a3)
dif_otp_ctrl_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:49
  mmio_region_write32(otp->params.base_addr,
                      OTP_CTRL_INTEGRITY_CHECK_PERIOD_REG_OFFSET,
                      config.integrity_period_mask);
200009c4:	41d0                	lw	a2,4(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:47
  mmio_region_write32(otp->params.base_addr,
200009c6:	4114                	lw	a3,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200009c8:	c2f0                	sw	a2,68(a3)
dif_otp_ctrl_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:52
  mmio_region_write32(otp->params.base_addr,
                      OTP_CTRL_CONSISTENCY_CHECK_PERIOD_REG_OFFSET,
                      config.consistency_period_mask);
200009ca:	458c                	lw	a1,8(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:50
  mmio_region_write32(otp->params.base_addr,
200009cc:	4108                	lw	a0,0(a0)
200009ce:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200009d0:	c52c                	sw	a1,72(a0)
200009d2:	a011                	j	200009d6 <dif_otp_ctrl_configure+0x24>
200009d4:	4609                	li	a2,2
dif_otp_ctrl_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:55

  return kDifOtpCtrlLockableOk;
}
200009d6:	8532                	mv	a0,a2
200009d8:	8082                	ret

200009da <dif_otp_ctrl_check_integrity>:
dif_otp_ctrl_check_integrity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:59

dif_otp_ctrl_lockable_result_t dif_otp_ctrl_check_integrity(
    const dif_otp_ctrl_t *otp) {
  if (otp == NULL) {
200009da:	c919                	beqz	a0,200009f0 <dif_otp_ctrl_check_integrity+0x16>
checks_are_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:31
  uint32_t locked = mmio_region_read32(otp->params.base_addr,
200009dc:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200009de:	5dc8                	lw	a0,60(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200009e0:	00157613          	andi	a2,a0,1
200009e4:	450d                	li	a0,3
dif_otp_ctrl_check_integrity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:62
    return kDifOtpCtrlLockableBadArg;
  }
  if (checks_are_locked(otp)) {
200009e6:	c601                	beqz	a2,200009ee <dif_otp_ctrl_check_integrity+0x14>
200009e8:	4501                	li	a0,0
200009ea:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200009ec:	dd90                	sw	a2,56(a1)
dif_otp_ctrl_check_integrity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:72
      bitfield_bit32_write(0, OTP_CTRL_CHECK_TRIGGER_INTEGRITY_BIT, true);
  mmio_region_write32(otp->params.base_addr, OTP_CTRL_CHECK_TRIGGER_REG_OFFSET,
                      reg);

  return kDifOtpCtrlLockableOk;
}
200009ee:	8082                	ret
200009f0:	4509                	li	a0,2
200009f2:	8082                	ret

200009f4 <dif_otp_ctrl_check_consistency>:
dif_otp_ctrl_check_consistency():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:76

dif_otp_ctrl_lockable_result_t dif_otp_ctrl_check_consistency(
    const dif_otp_ctrl_t *otp) {
  if (otp == NULL) {
200009f4:	c919                	beqz	a0,20000a0a <dif_otp_ctrl_check_consistency+0x16>
checks_are_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:31
  uint32_t locked = mmio_region_read32(otp->params.base_addr,
200009f6:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200009f8:	5dc8                	lw	a0,60(a1)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200009fa:	00157613          	andi	a2,a0,1
200009fe:	450d                	li	a0,3
dif_otp_ctrl_check_consistency():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:79
    return kDifOtpCtrlLockableBadArg;
  }
  if (checks_are_locked(otp)) {
20000a00:	c601                	beqz	a2,20000a08 <dif_otp_ctrl_check_consistency+0x14>
20000a02:	4501                	li	a0,0
20000a04:	4609                	li	a2,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a06:	dd90                	sw	a2,56(a1)
dif_otp_ctrl_check_consistency():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:89
      bitfield_bit32_write(0, OTP_CTRL_CHECK_TRIGGER_CONSISTENCY_BIT, true);
  mmio_region_write32(otp->params.base_addr, OTP_CTRL_CHECK_TRIGGER_REG_OFFSET,
                      reg);

  return kDifOtpCtrlLockableOk;
}
20000a08:	8082                	ret
20000a0a:	4509                	li	a0,2
20000a0c:	8082                	ret

20000a0e <dif_otp_ctrl_lock_config>:
dif_otp_ctrl_lock_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:92

dif_otp_ctrl_result_t dif_otp_ctrl_lock_config(const dif_otp_ctrl_t *otp) {
  if (otp == NULL) {
20000a0e:	c511                	beqz	a0,20000a1a <dif_otp_ctrl_lock_config+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:98
    return kDifOtpCtrlBadArg;
  }

  uint32_t reg =
      bitfield_bit32_write(0, OTP_CTRL_CHECK_REGWEN_CHECK_REGWEN_BIT, true);
  mmio_region_write32(otp->params.base_addr, OTP_CTRL_CHECK_REGWEN_REG_OFFSET,
20000a10:	410c                	lw	a1,0(a0)
20000a12:	4501                	li	a0,0
20000a14:	4605                	li	a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000a16:	ddd0                	sw	a2,60(a1)
dif_otp_ctrl_lock_config():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:102
                      reg);

  return kDifOtpCtrlOk;
}
20000a18:	8082                	ret
20000a1a:	4509                	li	a0,2
20000a1c:	8082                	ret

20000a1e <dif_otp_ctrl_config_is_locked>:
dif_otp_ctrl_config_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:105

dif_otp_ctrl_result_t dif_otp_ctrl_config_is_locked(const dif_otp_ctrl_t *otp,
                                                    bool *is_locked) {
20000a1e:	862a                	mv	a2,a0
20000a20:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:106
  if (otp == NULL || is_locked == NULL) {
20000a22:	ca11                	beqz	a2,20000a36 <dif_otp_ctrl_config_is_locked+0x18>
20000a24:	c989                	beqz	a1,20000a36 <dif_otp_ctrl_config_is_locked+0x18>
checks_are_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:31
  uint32_t locked = mmio_region_read32(otp->params.base_addr,
20000a26:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a28:	5d50                	lw	a2,60(a0)
20000a2a:	4501                	li	a0,0
dif_otp_ctrl_config_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:110
    return kDifOtpCtrlBadArg;
  }

  *is_locked = checks_are_locked(otp);
20000a2c:	fff64613          	not	a2,a2
20000a30:	8a05                	andi	a2,a2,1
20000a32:	00c58023          	sb	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:112
  return kDifOtpCtrlOk;
}
20000a36:	8082                	ret

20000a38 <dif_otp_ctrl_lock_reading>:
dif_otp_ctrl_lock_reading():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:133
  }
  return true;
}

dif_otp_ctrl_result_t dif_otp_ctrl_lock_reading(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition) {
20000a38:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:134
  if (otp == NULL) {
20000a3a:	cd11                	beqz	a0,20000a56 <dif_otp_ctrl_lock_reading+0x1e>
sw_read_lock_reg_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:117
  switch (partition) {
20000a3c:	c591                	beqz	a1,20000a48 <dif_otp_ctrl_lock_reading+0x10>
20000a3e:	4685                	li	a3,1
20000a40:	00d59b63          	bne	a1,a3,20000a56 <dif_otp_ctrl_lock_reading+0x1e>
20000a44:	45d1                	li	a1,20
20000a46:	a011                	j	20000a4a <dif_otp_ctrl_lock_reading+0x12>
20000a48:	45cd                	li	a1,19
dif_otp_ctrl_lock_reading():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:145
  if (!sw_read_lock_reg_offset(partition, &offset, &index)) {
    return kDifOtpCtrlBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(otp->params.base_addr, offset, reg);
20000a4a:	4108                	lw	a0,0(a0)
20000a4c:	4601                	li	a2,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000a4e:	058a                	slli	a1,a1,0x2
20000a50:	952e                	add	a0,a0,a1
20000a52:	4585                	li	a1,1
20000a54:	c10c                	sw	a1,0(a0)
dif_otp_ctrl_lock_reading():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:148

  return kDifOtpCtrlOk;
}
20000a56:	8532                	mv	a0,a2
20000a58:	8082                	ret

20000a5a <dif_otp_ctrl_reading_is_locked>:
dif_otp_ctrl_reading_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:152

dif_otp_ctrl_result_t dif_otp_ctrl_reading_is_locked(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition,
    bool *is_locked) {
20000a5a:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:153
  if (otp == NULL || is_locked == NULL) {
20000a5c:	c11d                	beqz	a0,20000a82 <dif_otp_ctrl_reading_is_locked+0x28>
20000a5e:	c215                	beqz	a2,20000a82 <dif_otp_ctrl_reading_is_locked+0x28>
sw_read_lock_reg_offset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:117
  switch (partition) {
20000a60:	c591                	beqz	a1,20000a6c <dif_otp_ctrl_reading_is_locked+0x12>
20000a62:	4705                	li	a4,1
20000a64:	00e59f63          	bne	a1,a4,20000a82 <dif_otp_ctrl_reading_is_locked+0x28>
20000a68:	45d1                	li	a1,20
20000a6a:	a011                	j	20000a6e <dif_otp_ctrl_reading_is_locked+0x14>
20000a6c:	45cd                	li	a1,19
dif_otp_ctrl_reading_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:163
  bitfield_bit32_index_t index;
  if (!sw_read_lock_reg_offset(partition, &offset, &index)) {
    return kDifOtpCtrlBadArg;
  }

  uint32_t reg = mmio_region_read32(otp->params.base_addr, offset);
20000a6e:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000a70:	058a                	slli	a1,a1,0x2
20000a72:	952e                	add	a0,a0,a1
20000a74:	4108                	lw	a0,0(a0)
20000a76:	4681                	li	a3,0
dif_otp_ctrl_reading_is_locked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:164
  *is_locked = !bitfield_bit32_read(reg, index);
20000a78:	fff54513          	not	a0,a0
20000a7c:	8905                	andi	a0,a0,1
20000a7e:	00a60023          	sb	a0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:166
  return kDifOtpCtrlOk;
}
20000a82:	8536                	mv	a0,a3
20000a84:	8082                	ret

20000a86 <dif_otp_ctrl_irq_is_pending>:
dif_otp_ctrl_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:184
  return true;
}

dif_otp_ctrl_result_t dif_otp_ctrl_irq_is_pending(const dif_otp_ctrl_t *otp,
                                                  dif_otp_ctrl_irq_t irq,
                                                  bool *is_pending) {
20000a86:	86aa                	mv	a3,a0
20000a88:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:185
  if (otp == NULL || is_pending == NULL) {
20000a8a:	c691                	beqz	a3,20000a96 <dif_otp_ctrl_irq_is_pending+0x10>
20000a8c:	c609                	beqz	a2,20000a96 <dif_otp_ctrl_irq_is_pending+0x10>
irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:169
  switch (irq) {
20000a8e:	c589                	beqz	a1,20000a98 <dif_otp_ctrl_irq_is_pending+0x12>
20000a90:	4705                	li	a4,1
20000a92:	00e58463          	beq	a1,a4,20000a9a <dif_otp_ctrl_irq_is_pending+0x14>
dif_otp_ctrl_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:199
  uint32_t reg =
      mmio_region_read32(otp->params.base_addr, OTP_CTRL_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg, index);

  return kDifOtpCtrlOk;
}
20000a96:	8082                	ret
20000a98:	872e                	mv	a4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:195
      mmio_region_read32(otp->params.base_addr, OTP_CTRL_INTR_STATE_REG_OFFSET);
20000a9a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000a9c:	410c                	lw	a1,0(a0)
20000a9e:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000aa0:	00e5d5b3          	srl	a1,a1,a4
20000aa4:	8985                	andi	a1,a1,1
dif_otp_ctrl_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:196
  *is_pending = bitfield_bit32_read(reg, index);
20000aa6:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:199
}
20000aaa:	8082                	ret

20000aac <dif_otp_ctrl_irq_acknowledge>:
dif_otp_ctrl_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:202

dif_otp_ctrl_result_t dif_otp_ctrl_irq_acknowledge(const dif_otp_ctrl_t *otp,
                                                   dif_otp_ctrl_irq_t irq) {
20000aac:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:203
  if (otp == NULL) {
20000aae:	cd09                	beqz	a0,20000ac8 <dif_otp_ctrl_irq_acknowledge+0x1c>
irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:169
  switch (irq) {
20000ab0:	c589                	beqz	a1,20000aba <dif_otp_ctrl_irq_acknowledge+0xe>
20000ab2:	4685                	li	a3,1
20000ab4:	00d58463          	beq	a1,a3,20000abc <dif_otp_ctrl_irq_acknowledge+0x10>
20000ab8:	a801                	j	20000ac8 <dif_otp_ctrl_irq_acknowledge+0x1c>
20000aba:	86ae                	mv	a3,a1
dif_otp_ctrl_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:213
  if (!irq_index(irq, &index)) {
    return kDifOtpCtrlBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(otp->params.base_addr, OTP_CTRL_INTR_STATE_REG_OFFSET,
20000abc:	4108                	lw	a0,0(a0)
20000abe:	4601                	li	a2,0
20000ac0:	4585                	li	a1,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000ac2:	00d595b3          	sll	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ac6:	c10c                	sw	a1,0(a0)
dif_otp_ctrl_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:217
                      reg);

  return kDifOtpCtrlOk;
}
20000ac8:	8532                	mv	a0,a2
20000aca:	8082                	ret

20000acc <dif_otp_ctrl_irq_get_enabled>:
dif_otp_ctrl_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:221

dif_otp_ctrl_result_t dif_otp_ctrl_irq_get_enabled(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_irq_t irq,
    dif_otp_ctrl_toggle_t *state) {
20000acc:	86aa                	mv	a3,a0
20000ace:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:222
  if (otp == NULL || state == NULL) {
20000ad0:	c691                	beqz	a3,20000adc <dif_otp_ctrl_irq_get_enabled+0x10>
20000ad2:	c609                	beqz	a2,20000adc <dif_otp_ctrl_irq_get_enabled+0x10>
irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:169
  switch (irq) {
20000ad4:	c589                	beqz	a1,20000ade <dif_otp_ctrl_irq_get_enabled+0x12>
20000ad6:	4705                	li	a4,1
20000ad8:	00e58463          	beq	a1,a4,20000ae0 <dif_otp_ctrl_irq_get_enabled+0x14>
dif_otp_ctrl_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:237
                                    OTP_CTRL_INTR_ENABLE_REG_OFFSET);
  *state = bitfield_bit32_read(reg, index) ? kDifOtpCtrlToggleEnabled
                                           : kDifOtpCtrlToggleDisabled;

  return kDifOtpCtrlOk;
}
20000adc:	8082                	ret
20000ade:	872e                	mv	a4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:231
  uint32_t reg = mmio_region_read32(otp->params.base_addr,
20000ae0:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ae2:	414c                	lw	a1,4(a0)
20000ae4:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000ae6:	00e5d5b3          	srl	a1,a1,a4
20000aea:	8985                	andi	a1,a1,1
20000aec:	0015b593          	seqz	a1,a1
dif_otp_ctrl_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:233
  *state = bitfield_bit32_read(reg, index) ? kDifOtpCtrlToggleEnabled
20000af0:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:237
}
20000af2:	8082                	ret

20000af4 <dif_otp_ctrl_irq_set_enabled>:
dif_otp_ctrl_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:241

dif_otp_ctrl_result_t dif_otp_ctrl_irq_set_enabled(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_irq_t irq,
    dif_otp_ctrl_toggle_t state) {
20000af4:	86aa                	mv	a3,a0
20000af6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:242
  if (otp == NULL) {
20000af8:	c689                	beqz	a3,20000b02 <dif_otp_ctrl_irq_set_enabled+0xe>
irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:169
  switch (irq) {
20000afa:	c589                	beqz	a1,20000b04 <dif_otp_ctrl_irq_set_enabled+0x10>
20000afc:	4705                	li	a4,1
20000afe:	00e58463          	beq	a1,a4,20000b06 <dif_otp_ctrl_irq_set_enabled+0x12>
dif_otp_ctrl_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:270
  reg = bitfield_bit32_write(reg, index, flag);
  mmio_region_write32(otp->params.base_addr, OTP_CTRL_INTR_ENABLE_REG_OFFSET,
                      reg);

  return kDifOtpCtrlOk;
}
20000b02:	8082                	ret
20000b04:	872e                	mv	a4,a1
20000b06:	4585                	li	a1,1
20000b08:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:252
  switch (state) {
20000b0a:	c609                	beqz	a2,20000b14 <dif_otp_ctrl_irq_set_enabled+0x20>
20000b0c:	4785                	li	a5,1
20000b0e:	fef61ae3          	bne	a2,a5,20000b02 <dif_otp_ctrl_irq_set_enabled+0xe>
20000b12:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:263
  uint32_t reg = mmio_region_read32(otp->params.base_addr,
20000b14:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b16:	4254                	lw	a3,4(a2)
20000b18:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b1a:	00e595b3          	sll	a1,a1,a4
20000b1e:	fff5c593          	not	a1,a1
20000b22:	8df5                	and	a1,a1,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000b24:	00e796b3          	sll	a3,a5,a4
20000b28:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b2a:	c24c                	sw	a1,4(a2)
dif_otp_ctrl_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:270
}
20000b2c:	8082                	ret

20000b2e <dif_otp_ctrl_irq_force>:
dif_otp_ctrl_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:273

dif_otp_ctrl_result_t dif_otp_ctrl_irq_force(const dif_otp_ctrl_t *otp,
                                             dif_otp_ctrl_irq_t irq) {
20000b2e:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:274
  if (otp == NULL) {
20000b30:	cd09                	beqz	a0,20000b4a <dif_otp_ctrl_irq_force+0x1c>
irq_index():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:169
  switch (irq) {
20000b32:	c589                	beqz	a1,20000b3c <dif_otp_ctrl_irq_force+0xe>
20000b34:	4685                	li	a3,1
20000b36:	00d58463          	beq	a1,a3,20000b3e <dif_otp_ctrl_irq_force+0x10>
20000b3a:	a801                	j	20000b4a <dif_otp_ctrl_irq_force+0x1c>
20000b3c:	86ae                	mv	a3,a1
dif_otp_ctrl_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:284
  if (!irq_index(irq, &index)) {
    return kDifOtpCtrlBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(otp->params.base_addr, OTP_CTRL_INTR_TEST_REG_OFFSET,
20000b3e:	4108                	lw	a0,0(a0)
20000b40:	4601                	li	a2,0
20000b42:	4585                	li	a1,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000b44:	00d595b3          	sll	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b48:	c50c                	sw	a1,8(a0)
dif_otp_ctrl_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:288
                      reg);

  return kDifOtpCtrlOk;
}
20000b4a:	8532                	mv	a0,a2
20000b4c:	8082                	ret

20000b4e <dif_otp_ctrl_irq_disable_all>:
dif_otp_ctrl_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:292

dif_otp_ctrl_result_t dif_otp_ctrl_irq_disable_all(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_irq_snapshot_t *snapshot) {
  if (otp == NULL) {
20000b4e:	c911                	beqz	a0,20000b62 <dif_otp_ctrl_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:296
    return kDifOtpCtrlBadArg;
  }

  if (snapshot != NULL) {
20000b50:	c581                	beqz	a1,20000b58 <dif_otp_ctrl_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:297
    *snapshot = mmio_region_read32(otp->params.base_addr,
20000b52:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b54:	4250                	lw	a2,4(a2)
dif_otp_ctrl_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:297
20000b56:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:301
                                   OTP_CTRL_INTR_ENABLE_REG_OFFSET);
  }

  mmio_region_write32(otp->params.base_addr, OTP_CTRL_INTR_ENABLE_REG_OFFSET,
20000b58:	410c                	lw	a1,0(a0)
20000b5a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b5c:	0005a223          	sw	zero,4(a1)
dif_otp_ctrl_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:304
                      0);
  return kDifOtpCtrlOk;
}
20000b60:	8082                	ret
20000b62:	4509                	li	a0,2
20000b64:	8082                	ret

20000b66 <dif_otp_ctrl_irq_restore_all>:
dif_otp_ctrl_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:307

dif_otp_ctrl_result_t dif_otp_ctrl_irq_restore_all(
    const dif_otp_ctrl_t *otp, const dif_otp_ctrl_irq_snapshot_t *snapshot) {
20000b66:	862a                	mv	a2,a0
20000b68:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:308
  if (otp == NULL || snapshot == NULL) {
20000b6a:	c611                	beqz	a2,20000b76 <dif_otp_ctrl_irq_restore_all+0x10>
20000b6c:	c589                	beqz	a1,20000b76 <dif_otp_ctrl_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:313
    return kDifOtpCtrlBadArg;
  }

  mmio_region_write32(otp->params.base_addr, OTP_CTRL_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000b6e:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:312
  mmio_region_write32(otp->params.base_addr, OTP_CTRL_INTR_ENABLE_REG_OFFSET,
20000b70:	4210                	lw	a2,0(a2)
20000b72:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b74:	c24c                	sw	a1,4(a2)
dif_otp_ctrl_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:315
  return kDifOtpCtrlOk;
}
20000b76:	8082                	ret

20000b78 <dif_otp_ctrl_get_status>:
dif_otp_ctrl_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:318

dif_otp_ctrl_result_t dif_otp_ctrl_get_status(const dif_otp_ctrl_t *otp,
                                              dif_otp_ctrl_status_t *status) {
20000b78:	862a                	mv	a2,a0
20000b7a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:319
  if (otp == NULL || status == NULL) {
20000b7c:	c635                	beqz	a2,20000be8 <dif_otp_ctrl_get_status+0x70>
20000b7e:	c5ad                	beqz	a1,20000be8 <dif_otp_ctrl_get_status+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:345
      [kDifOtpCtrlStatusCodeKdfError] = OTP_CTRL_STATUS_KEY_DERIV_FSM_ERROR_BIT,
      [kDifOtpCtrlStatusCodeDaiIdle] = OTP_CTRL_STATUS_DAI_IDLE_BIT,
      [kDifOtpCtrlStatusCodeCheckPending] = OTP_CTRL_STATUS_CHECK_PENDING_BIT,
  };

  status->codes = 0;
20000b80:	0005a023          	sw	zero,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:347
  uint32_t status_code =
      mmio_region_read32(otp->params.base_addr, OTP_CTRL_STATUS_REG_OFFSET);
20000b84:	4214                	lw	a3,0(a2)
20000b86:	4e01                	li	t3,0
20000b88:	4601                	li	a2,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b8a:	0106a883          	lw	a7,16(a3)
20000b8e:	0146a803          	lw	a6,20(a3)
dif_otp_ctrl_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:350
  uint32_t error_codes =
      mmio_region_read32(otp->params.base_addr, OTP_CTRL_ERR_CODE_REG_OFFSET);
  for (int i = 0; i < ARRAYSIZE(kIndices); ++i) {
20000b92:	00458793          	addi	a5,a1,4
20000b96:	00001717          	auipc	a4,0x1
20000b9a:	3de70713          	addi	a4,a4,990 # 20001f74 <kPartitions+0x70>
20000b9e:	00001697          	auipc	a3,0x1
20000ba2:	32a68693          	addi	a3,a3,810 # 20001ec8 <dif_otp_ctrl_get_status.kIndices>
20000ba6:	42a1                	li	t0,8
20000ba8:	433d                	li	t1,15
20000baa:	4385                	li	t2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:353
    // If the error is not present at all, we clear its cause bit if relevant,
    // and bail immediately.
    if (!bitfield_bit32_read(status_code, kIndices[i])) {
20000bac:	4288                	lw	a0,0(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000bae:	00a8d533          	srl	a0,a7,a0
20000bb2:	8905                	andi	a0,a0,1
dif_otp_ctrl_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:353
20000bb4:	cd19                	beqz	a0,20000bd2 <dif_otp_ctrl_get_status+0x5a>
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000bb6:	00c39533          	sll	a0,t2,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000bba:	00ae6e33          	or	t3,t3,a0
dif_otp_ctrl_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:360
        status->causes[i] = kDifOtpCtrlErrorOk;
      }
      continue;
    }

    status->codes = bitfield_bit32_write(status->codes, i, true);
20000bbe:	01c5a023          	sw	t3,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:363

    bitfield_field32_t field;
    switch (i) {
20000bc2:	00c2ec63          	bltu	t0,a2,20000bda <dif_otp_ctrl_get_status+0x62>
20000bc6:	4308                	lw	a0,0(a4)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000bc8:	00a85533          	srl	a0,a6,a0
20000bcc:	891d                	andi	a0,a0,7
dif_otp_ctrl_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:452
        err = kDifOtpCtrlErrorFsmBadState;
        break;
      default:
        return kDifOtpCtrlError;
    }
    status->causes[i] = err;
20000bce:	c388                	sw	a0,0(a5)
20000bd0:	a029                	j	20000bda <dif_otp_ctrl_get_status+0x62>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:354
      if (i <= kDifOtpCtrlStatusCodeHasCauseLast) {
20000bd2:	00c2e463          	bltu	t0,a2,20000bda <dif_otp_ctrl_get_status+0x62>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:355
        status->causes[i] = kDifOtpCtrlErrorOk;
20000bd6:	0007a023          	sw	zero,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:350
  for (int i = 0; i < ARRAYSIZE(kIndices); ++i) {
20000bda:	0605                	addi	a2,a2,1
20000bdc:	0711                	addi	a4,a4,4
20000bde:	0691                	addi	a3,a3,4
20000be0:	0791                	addi	a5,a5,4
20000be2:	fc6615e3          	bne	a2,t1,20000bac <dif_otp_ctrl_get_status+0x34>
20000be6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:456
  }

  return kDifOtpCtrlOk;
}
20000be8:	8082                	ret

20000bea <dif_otp_ctrl_dai_read_start>:
dif_otp_ctrl_dai_read_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:536
        },
};

dif_otp_ctrl_dai_result_t dif_otp_ctrl_dai_read_start(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition,
    uint32_t address) {
20000bea:	4689                	li	a3,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:537
  if (otp == NULL || partition >= ARRAYSIZE(kPartitions)) {
20000bec:	c139                	beqz	a0,20000c32 <dif_otp_ctrl_dai_read_start+0x48>
20000bee:	4719                	li	a4,6
20000bf0:	04b76163          	bltu	a4,a1,20000c32 <dif_otp_ctrl_dai_read_start+0x48>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:541
    return kDifOtpCtrlDaiBadArg;
  }

  if ((address & kPartitions[partition].align_mask) != 0) {
20000bf4:	00459813          	slli	a6,a1,0x4
20000bf8:	00001717          	auipc	a4,0x1
20000bfc:	30c70713          	addi	a4,a4,780 # 20001f04 <kPartitions>
20000c00:	010707b3          	add	a5,a4,a6
20000c04:	4794                	lw	a3,8(a5)
20000c06:	00c6f5b3          	and	a1,a3,a2
20000c0a:	4699                	li	a3,6
20000c0c:	e19d                	bnez	a1,20000c32 <dif_otp_ctrl_dai_read_start+0x48>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:545
    return kDifOtpCtrlDaiUnaligned;
  }

  if (address >= kPartitions[partition].len) {
20000c0e:	43cc                	lw	a1,4(a5)
20000c10:	4695                	li	a3,5
20000c12:	02b67063          	bgeu	a2,a1,20000c32 <dif_otp_ctrl_dai_read_start+0x48>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:549
    return kDifOtpCtrlDaiOutOfRange;
  }

  uint32_t busy = mmio_region_read32(otp->params.base_addr,
20000c16:	411c                	lw	a5,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c18:	4f8c                	lw	a1,24(a5)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000c1a:	8985                	andi	a1,a1,1
20000c1c:	468d                	li	a3,3
dif_otp_ctrl_dai_read_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:551
                                     OTP_CTRL_DIRECT_ACCESS_REGWEN_REG_OFFSET);
  if (!bitfield_bit32_read(
20000c1e:	c991                	beqz	a1,20000c32 <dif_otp_ctrl_dai_read_start+0x48>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:556
          busy, OTP_CTRL_DIRECT_ACCESS_REGWEN_DIRECT_ACCESS_REGWEN_BIT)) {
    return kDifOtpCtrlDaiBusy;
  }

  address += kPartitions[partition].start_addr;
20000c20:	00e805b3          	add	a1,a6,a4
20000c24:	418c                	lw	a1,0(a1)
20000c26:	95b2                	add	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c28:	d38c                	sw	a1,32(a5)
dif_otp_ctrl_dai_read_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:562
  mmio_region_write32(otp->params.base_addr,
                      OTP_CTRL_DIRECT_ACCESS_ADDRESS_REG_OFFSET, address);

  uint32_t cmd =
      bitfield_bit32_write(0, OTP_CTRL_DIRECT_ACCESS_CMD_RD_BIT, true);
  mmio_region_write32(otp->params.base_addr,
20000c2a:	4108                	lw	a0,0(a0)
20000c2c:	4681                	li	a3,0
20000c2e:	4585                	li	a1,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c30:	cd4c                	sw	a1,28(a0)
dif_otp_ctrl_dai_read_start():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:566
                      OTP_CTRL_DIRECT_ACCESS_CMD_REG_OFFSET, cmd);

  return kDifOtpCtrlDaiOk;
}
20000c32:	8536                	mv	a0,a3
20000c34:	8082                	ret

20000c36 <dif_otp_ctrl_dai_read32_end>:
dif_otp_ctrl_dai_read32_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:569

dif_otp_ctrl_dai_result_t dif_otp_ctrl_dai_read32_end(const dif_otp_ctrl_t *otp,
                                                      uint32_t *value) {
20000c36:	862a                	mv	a2,a0
20000c38:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:570
  if (otp == NULL || value == NULL) {
20000c3a:	ca19                	beqz	a2,20000c50 <dif_otp_ctrl_dai_read32_end+0x1a>
20000c3c:	c991                	beqz	a1,20000c50 <dif_otp_ctrl_dai_read32_end+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:574
    return kDifOtpCtrlDaiBadArg;
  }

  uint32_t busy = mmio_region_read32(otp->params.base_addr,
20000c3e:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c40:	4e08                	lw	a0,24(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c42:	00157693          	andi	a3,a0,1
20000c46:	450d                	li	a0,3
dif_otp_ctrl_dai_read32_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:576
                                     OTP_CTRL_DIRECT_ACCESS_REGWEN_REG_OFFSET);
  if (!bitfield_bit32_read(
20000c48:	c681                	beqz	a3,20000c50 <dif_otp_ctrl_dai_read32_end+0x1a>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c4a:	5650                	lw	a2,44(a2)
20000c4c:	4501                	li	a0,0
dif_otp_ctrl_dai_read32_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:581
          busy, OTP_CTRL_DIRECT_ACCESS_REGWEN_DIRECT_ACCESS_REGWEN_BIT)) {
    return kDifOtpCtrlDaiBusy;
  }

  *value = mmio_region_read32(otp->params.base_addr,
20000c4e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:584
                              OTP_CTRL_DIRECT_ACCESS_RDATA_0_REG_OFFSET);
  return kDifOtpCtrlDaiOk;
}
20000c50:	8082                	ret

20000c52 <dif_otp_ctrl_dai_read64_end>:
dif_otp_ctrl_dai_read64_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:587

dif_otp_ctrl_dai_result_t dif_otp_ctrl_dai_read64_end(const dif_otp_ctrl_t *otp,
                                                      uint64_t *value) {
20000c52:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:588
  if (otp == NULL || value == NULL) {
20000c54:	c10d                	beqz	a0,20000c76 <dif_otp_ctrl_dai_read64_end+0x24>
20000c56:	c185                	beqz	a1,20000c76 <dif_otp_ctrl_dai_read64_end+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:592
    return kDifOtpCtrlDaiBadArg;
  }

  uint32_t busy = mmio_region_read32(otp->params.base_addr,
20000c58:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c5a:	4e90                	lw	a2,24(a3)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000c5c:	00167713          	andi	a4,a2,1
20000c60:	460d                	li	a2,3
dif_otp_ctrl_dai_read64_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:594
                                     OTP_CTRL_DIRECT_ACCESS_REGWEN_REG_OFFSET);
  if (!bitfield_bit32_read(
20000c62:	cb11                	beqz	a4,20000c76 <dif_otp_ctrl_dai_read64_end+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:599
          busy, OTP_CTRL_DIRECT_ACCESS_REGWEN_DIRECT_ACCESS_REGWEN_BIT)) {
    return kDifOtpCtrlDaiBusy;
  }

  *value = mmio_region_read32(otp->params.base_addr,
20000c64:	5a94                	lw	a3,48(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:601
                              OTP_CTRL_DIRECT_ACCESS_RDATA_1_REG_OFFSET);
  *value <<= 32;
20000c66:	c1d4                	sw	a3,4(a1)
20000c68:	0005a023          	sw	zero,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:602
  *value |= mmio_region_read32(otp->params.base_addr,
20000c6c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000c6e:	5548                	lw	a0,44(a0)
20000c70:	4601                	li	a2,0
dif_otp_ctrl_dai_read64_end():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:602
20000c72:	c1d4                	sw	a3,4(a1)
20000c74:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:605
                               OTP_CTRL_DIRECT_ACCESS_RDATA_0_REG_OFFSET);
  return kDifOtpCtrlDaiOk;
}
20000c76:	8532                	mv	a0,a2
20000c78:	8082                	ret

20000c7a <dif_otp_ctrl_dai_program32>:
dif_otp_ctrl_dai_program32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:609

dif_otp_ctrl_dai_result_t dif_otp_ctrl_dai_program32(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition,
    uint32_t address, uint32_t value) {
20000c7a:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:610
  if (otp == NULL || partition >= ARRAYSIZE(kPartitions)) {
20000c7c:	cd31                	beqz	a0,20000cd8 <dif_otp_ctrl_dai_program32+0x5e>
20000c7e:	4799                	li	a5,6
20000c80:	04b7ec63          	bltu	a5,a1,20000cd8 <dif_otp_ctrl_dai_program32+0x5e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:619
  // Ensure that we are writing to a 32-bit-access partition by checking that
  // the alignment mask is 0b11.
  //
  // Note furthermore that the LC partition is *not* writeable, so we eject
  // here.
  if (kPartitions[partition].align_mask != 0x3 ||
20000c84:	ffd58793          	addi	a5,a1,-3
20000c88:	4711                	li	a4,4
20000c8a:	04e7e763          	bltu	a5,a4,20000cd8 <dif_otp_ctrl_dai_program32+0x5e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:624
      partition == kDifOtpCtrlPartitionLifeCycle) {
    return kDifOtpCtrlDaiBadPartition;
  }

  if ((address & kPartitions[partition].align_mask) != 0) {
20000c8e:	00367793          	andi	a5,a2,3
20000c92:	4719                	li	a4,6
20000c94:	e3b1                	bnez	a5,20000cd8 <dif_otp_ctrl_dai_program32+0x5e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:631
  }

  // NOTE: The bounds check is tightened here, since we disallow writing the
  // digest directly.
  size_t digest_size = sizeof(uint64_t);
  if (address >= kPartitions[partition].len - digest_size) {
20000c96:	00459893          	slli	a7,a1,0x4
20000c9a:	00001797          	auipc	a5,0x1
20000c9e:	26a78793          	addi	a5,a5,618 # 20001f04 <kPartitions>
20000ca2:	01178733          	add	a4,a5,a7
20000ca6:	4358                	lw	a4,4(a4)
20000ca8:	ff870593          	addi	a1,a4,-8
20000cac:	4715                	li	a4,5
20000cae:	02b67563          	bgeu	a2,a1,20000cd8 <dif_otp_ctrl_dai_program32+0x5e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:635
    return kDifOtpCtrlDaiOutOfRange;
  }

  uint32_t busy = mmio_region_read32(otp->params.base_addr,
20000cb2:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000cb6:	01882583          	lw	a1,24(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000cba:	8985                	andi	a1,a1,1
20000cbc:	470d                	li	a4,3
dif_otp_ctrl_dai_program32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:637
                                     OTP_CTRL_DIRECT_ACCESS_REGWEN_REG_OFFSET);
  if (!bitfield_bit32_read(
20000cbe:	cd89                	beqz	a1,20000cd8 <dif_otp_ctrl_dai_program32+0x5e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:642
          busy, OTP_CTRL_DIRECT_ACCESS_REGWEN_DIRECT_ACCESS_REGWEN_BIT)) {
    return kDifOtpCtrlDaiBusy;
  }

  address += kPartitions[partition].start_addr;
20000cc0:	00f885b3          	add	a1,a7,a5
20000cc4:	418c                	lw	a1,0(a1)
20000cc6:	95b2                	add	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cc8:	02b82023          	sw	a1,32(a6)
dif_otp_ctrl_dai_program32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:646
  mmio_region_write32(otp->params.base_addr,
                      OTP_CTRL_DIRECT_ACCESS_ADDRESS_REG_OFFSET, address);

  mmio_region_write32(otp->params.base_addr,
20000ccc:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cce:	d1d4                	sw	a3,36(a1)
dif_otp_ctrl_dai_program32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:651
                      OTP_CTRL_DIRECT_ACCESS_WDATA_0_REG_OFFSET, value);

  uint32_t cmd =
      bitfield_bit32_write(0, OTP_CTRL_DIRECT_ACCESS_CMD_WR_BIT, true);
  mmio_region_write32(otp->params.base_addr,
20000cd0:	4108                	lw	a0,0(a0)
20000cd2:	4701                	li	a4,0
20000cd4:	4589                	li	a1,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000cd6:	cd4c                	sw	a1,28(a0)
dif_otp_ctrl_dai_program32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:655
                      OTP_CTRL_DIRECT_ACCESS_CMD_REG_OFFSET, cmd);

  return kDifOtpCtrlDaiOk;
}
20000cd8:	853a                	mv	a0,a4
20000cda:	8082                	ret

20000cdc <dif_otp_ctrl_dai_program64>:
dif_otp_ctrl_dai_program64():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:659

dif_otp_ctrl_dai_result_t dif_otp_ctrl_dai_program64(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition,
    uint32_t address, uint64_t value) {
20000cdc:	4289                	li	t0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:660
  if (otp == NULL || partition >= ARRAYSIZE(kPartitions)) {
20000cde:	cd21                	beqz	a0,20000d36 <dif_otp_ctrl_dai_program64+0x5a>
20000ce0:	4799                	li	a5,6
20000ce2:	04b7ea63          	bltu	a5,a1,20000d36 <dif_otp_ctrl_dai_program64+0x5a>
20000ce6:	4291                	li	t0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:666
    return kDifOtpCtrlDaiBadArg;
  }

  // Ensure that we are writing to a 32-bit-access partition by checking that
  // the alignment mask is 0b11.
  if (kPartitions[partition].align_mask != 0x7) {
20000ce8:	0455e763          	bltu	a1,t0,20000d36 <dif_otp_ctrl_dai_program64+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:670
    return kDifOtpCtrlDaiBadPartition;
  }

  if ((address & kPartitions[partition].align_mask) != 0) {
20000cec:	00767793          	andi	a5,a2,7
20000cf0:	4299                	li	t0,6
20000cf2:	e3b1                	bnez	a5,20000d36 <dif_otp_ctrl_dai_program64+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:677
  }

  // NOTE: The bounds check is tightened here, since we disallow writing the
  // digest directly.
  size_t digest_size = sizeof(uint64_t);
  if (address >= kPartitions[partition].len - digest_size) {
20000cf4:	00459813          	slli	a6,a1,0x4
20000cf8:	00001597          	auipc	a1,0x1
20000cfc:	20c58593          	addi	a1,a1,524 # 20001f04 <kPartitions>
20000d00:	010587b3          	add	a5,a1,a6
20000d04:	43dc                	lw	a5,4(a5)
20000d06:	17e1                	addi	a5,a5,-8
20000d08:	4295                	li	t0,5
20000d0a:	02f67663          	bgeu	a2,a5,20000d36 <dif_otp_ctrl_dai_program64+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:681
    return kDifOtpCtrlDaiOutOfRange;
  }

  uint32_t busy = mmio_region_read32(otp->params.base_addr,
20000d0e:	00052883          	lw	a7,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d12:	0188a783          	lw	a5,24(a7)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d16:	8b85                	andi	a5,a5,1
20000d18:	428d                	li	t0,3
dif_otp_ctrl_dai_program64():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:683
                                     OTP_CTRL_DIRECT_ACCESS_REGWEN_REG_OFFSET);
  if (!bitfield_bit32_read(
20000d1a:	cf91                	beqz	a5,20000d36 <dif_otp_ctrl_dai_program64+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:688
          busy, OTP_CTRL_DIRECT_ACCESS_REGWEN_DIRECT_ACCESS_REGWEN_BIT)) {
    return kDifOtpCtrlDaiBusy;
  }

  address += kPartitions[partition].start_addr;
20000d1c:	95c2                	add	a1,a1,a6
20000d1e:	418c                	lw	a1,0(a1)
20000d20:	95b2                	add	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d22:	02b8a023          	sw	a1,32(a7)
dif_otp_ctrl_dai_program64():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:692
  mmio_region_write32(otp->params.base_addr,
                      OTP_CTRL_DIRECT_ACCESS_ADDRESS_REG_OFFSET, address);

  mmio_region_write32(otp->params.base_addr,
20000d26:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d28:	d1d4                	sw	a3,36(a1)
dif_otp_ctrl_dai_program64():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:695
                      OTP_CTRL_DIRECT_ACCESS_WDATA_0_REG_OFFSET,
                      value & UINT32_MAX);
  mmio_region_write32(otp->params.base_addr,
20000d2a:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d2c:	d598                	sw	a4,40(a1)
dif_otp_ctrl_dai_program64():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:700
                      OTP_CTRL_DIRECT_ACCESS_WDATA_1_REG_OFFSET, value >> 32);

  uint32_t cmd =
      bitfield_bit32_write(0, OTP_CTRL_DIRECT_ACCESS_CMD_WR_BIT, true);
  mmio_region_write32(otp->params.base_addr,
20000d2e:	4108                	lw	a0,0(a0)
20000d30:	4281                	li	t0,0
20000d32:	4589                	li	a1,2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d34:	cd4c                	sw	a1,28(a0)
dif_otp_ctrl_dai_program64():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:704
                      OTP_CTRL_DIRECT_ACCESS_CMD_REG_OFFSET, cmd);

  return kDifOtpCtrlDaiOk;
}
20000d36:	8516                	mv	a0,t0
20000d38:	8082                	ret

20000d3a <dif_otp_ctrl_dai_digest>:
dif_otp_ctrl_dai_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:708

dif_otp_ctrl_dai_result_t dif_otp_ctrl_dai_digest(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition,
    uint64_t digest) {
20000d3a:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:709
  if (otp == NULL || partition >= ARRAYSIZE(kPartitions)) {
20000d3c:	c935                	beqz	a0,20000db0 <dif_otp_ctrl_dai_digest+0x76>
20000d3e:	4799                	li	a5,6
20000d40:	06b7e863          	bltu	a5,a1,20000db0 <dif_otp_ctrl_dai_digest+0x76>
20000d44:	478d                	li	a5,3
20000d46:	4711                	li	a4,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:714
    return kDifOtpCtrlDaiBadArg;
  }

  // The LC partition does not have a digest.
  if (partition == kDifOtpCtrlPartitionLifeCycle) {
20000d48:	06f58463          	beq	a1,a5,20000db0 <dif_otp_ctrl_dai_digest+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:720
    return kDifOtpCtrlDaiBadPartition;
  }

  // For software partitions, the digest must be nonzero; for all other
  // partitions it must be zero.
  bool is_sw = kPartitions[partition].is_software;
20000d4c:	0025b713          	sltiu	a4,a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:721
  if (is_sw == (digest == 0)) {
20000d50:	00d66333          	or	t1,a2,a3
20000d54:	006037b3          	snez	a5,t1
20000d58:	8fb9                	xor	a5,a5,a4
20000d5a:	4709                	li	a4,2
20000d5c:	ebb1                	bnez	a5,20000db0 <dif_otp_ctrl_dai_digest+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:725
    return kDifOtpCtrlDaiBadArg;
  }

  uint32_t busy = mmio_region_read32(otp->params.base_addr,
20000d5e:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000d62:	01882703          	lw	a4,24(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000d66:	00177793          	andi	a5,a4,1
20000d6a:	470d                	li	a4,3
dif_otp_ctrl_dai_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:727
                                     OTP_CTRL_DIRECT_ACCESS_REGWEN_REG_OFFSET);
  if (!bitfield_bit32_read(
20000d6c:	c3b1                	beqz	a5,20000db0 <dif_otp_ctrl_dai_digest+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:732
          busy, OTP_CTRL_DIRECT_ACCESS_REGWEN_DIRECT_ACCESS_REGWEN_BIT)) {
    return kDifOtpCtrlDaiBusy;
  }

  uint32_t address = kPartitions[partition].start_addr;
20000d6e:	00459893          	slli	a7,a1,0x4
20000d72:	00001717          	auipc	a4,0x1
20000d76:	19270713          	addi	a4,a4,402 # 20001f04 <kPartitions>
20000d7a:	00e887b3          	add	a5,a7,a4
20000d7e:	0007a283          	lw	t0,0(a5)
20000d82:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:733
  if (is_sw) {
20000d84:	00b7e763          	bltu	a5,a1,20000d92 <dif_otp_ctrl_dai_digest+0x58>
20000d88:	9746                	add	a4,a4,a7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:734
    address += kPartitions[partition].len - sizeof(digest);
20000d8a:	4358                	lw	a4,4(a4)
20000d8c:	9716                	add	a4,a4,t0
20000d8e:	ff870293          	addi	t0,a4,-8
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d92:	02582023          	sw	t0,32(a6)
dif_otp_ctrl_dai_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:739
  }
  mmio_region_write32(otp->params.base_addr,
                      OTP_CTRL_DIRECT_ACCESS_ADDRESS_REG_OFFSET, address);

  if (digest != 0) {
20000d96:	00030663          	beqz	t1,20000da2 <dif_otp_ctrl_dai_digest+0x68>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:740
    mmio_region_write32(otp->params.base_addr,
20000d9a:	4118                	lw	a4,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d9c:	d350                	sw	a2,36(a4)
dif_otp_ctrl_dai_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:743
                        OTP_CTRL_DIRECT_ACCESS_WDATA_0_REG_OFFSET,
                        digest & 0xffffffff);
    mmio_region_write32(otp->params.base_addr,
20000d9e:	4110                	lw	a2,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000da0:	d614                	sw	a3,40(a2)
20000da2:	4609                	li	a2,2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000da4:	00c5e363          	bltu	a1,a2,20000daa <dif_otp_ctrl_dai_digest+0x70>
20000da8:	4611                	li	a2,4
dif_otp_ctrl_dai_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:752

  bitfield_bit32_index_t cmd_bit = is_sw
                                       ? OTP_CTRL_DIRECT_ACCESS_CMD_WR_BIT
                                       : OTP_CTRL_DIRECT_ACCESS_CMD_DIGEST_BIT;
  uint32_t cmd = bitfield_bit32_write(0, cmd_bit, true);
  mmio_region_write32(otp->params.base_addr,
20000daa:	4108                	lw	a0,0(a0)
20000dac:	4701                	li	a4,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dae:	cd50                	sw	a2,28(a0)
dif_otp_ctrl_dai_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:756
                      OTP_CTRL_DIRECT_ACCESS_CMD_REG_OFFSET, cmd);

  return kDifOtpCtrlDaiOk;
}
20000db0:	853a                	mv	a0,a4
20000db2:	8082                	ret

20000db4 <dif_otp_ctrl_get_digest>:
dif_otp_ctrl_get_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:760

dif_otp_ctrl_digest_result_t dif_otp_ctrl_get_digest(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition,
    uint64_t *digest) {
20000db4:	86aa                	mv	a3,a0
20000db6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:761
  if (otp == NULL || digest == NULL) {
20000db8:	c6b9                	beqz	a3,20000e06 <dif_otp_ctrl_get_digest+0x52>
20000dba:	c631                	beqz	a2,20000e06 <dif_otp_ctrl_get_digest+0x52>
20000dbc:	4719                	li	a4,6
20000dbe:	04b76463          	bltu	a4,a1,20000e06 <dif_otp_ctrl_get_digest+0x52>
20000dc2:	07700713          	li	a4,119
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:766
    return kDifOtpCtrlDigestBadArg;
  }

  // The LC partition does not have a digest.
  if (partition == kDifOtpCtrlPartitionLifeCycle) {
20000dc6:	00b75733          	srl	a4,a4,a1
20000dca:	8b05                	andi	a4,a4,1
20000dcc:	cf0d                	beqz	a4,20000e06 <dif_otp_ctrl_get_digest+0x52>
20000dce:	00259513          	slli	a0,a1,0x2
20000dd2:	00001597          	auipc	a1,0x1
20000dd6:	1c658593          	addi	a1,a1,454 # 20001f98 <kPartitions+0x94>
20000dda:	00001717          	auipc	a4,0x1
20000dde:	1da70713          	addi	a4,a4,474 # 20001fb4 <kPartitions+0xb0>
20000de2:	972a                	add	a4,a4,a0
20000de4:	4318                	lw	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:800
      break;
    default:
      return kDifOtpCtrlDigestBadArg;
  }

  uint64_t value = mmio_region_read32(otp->params.base_addr, reg1);
20000de6:	4294                	lw	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:766
  if (partition == kDifOtpCtrlPartitionLifeCycle) {
20000de8:	952e                	add	a0,a0,a1
20000dea:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000dec:	00271593          	slli	a1,a4,0x2
20000df0:	95b6                	add	a1,a1,a3
dif_otp_ctrl_get_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:800
  uint64_t value = mmio_region_read32(otp->params.base_addr, reg1);
20000df2:	418c                	lw	a1,0(a1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000df4:	050a                	slli	a0,a0,0x2
20000df6:	9536                	add	a0,a0,a3
20000df8:	4114                	lw	a3,0(a0)
dif_otp_ctrl_get_digest():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:804
  value <<= 32;
  value |= mmio_region_read32(otp->params.base_addr, reg0);

  if (value == 0) {
20000dfa:	00b6e533          	or	a0,a3,a1
20000dfe:	c509                	beqz	a0,20000e08 <dif_otp_ctrl_get_digest+0x54>
20000e00:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:807
    return kDifOtpCtrlDigestMissing;
  }
  *digest = value;
20000e02:	c214                	sw	a3,0(a2)
20000e04:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:810

  return kDifOtpCtrlDigestOk;
}
20000e06:	8082                	ret
20000e08:	450d                	li	a0,3
20000e0a:	8082                	ret

20000e0c <dif_otp_ctrl_read_blocking>:
dif_otp_ctrl_read_blocking():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:814

dif_otp_ctrl_dai_result_t dif_otp_ctrl_read_blocking(
    const dif_otp_ctrl_t *otp, dif_otp_ctrl_partition_t partition,
    uint32_t address, uint32_t *buf, size_t len) {
20000e0c:	1141                	addi	sp,sp,-16
20000e0e:	c606                	sw	ra,12(sp)
20000e10:	4289                	li	t0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:815
  if (otp == NULL || partition >= ARRAYSIZE(kPartitions) || buf == NULL) {
20000e12:	c539                	beqz	a0,20000e60 <dif_otp_ctrl_read_blocking+0x54>
20000e14:	4799                	li	a5,6
20000e16:	04b7e563          	bltu	a5,a1,20000e60 <dif_otp_ctrl_read_blocking+0x54>
20000e1a:	c2b9                	beqz	a3,20000e60 <dif_otp_ctrl_read_blocking+0x54>
20000e1c:	4785                	li	a5,1
20000e1e:	4291                	li	t0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:819
    return kDifOtpCtrlDaiBadArg;
  }

  if (!kPartitions[partition].is_software) {
20000e20:	04b7e063          	bltu	a5,a1,20000e60 <dif_otp_ctrl_read_blocking+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:823
    return kDifOtpCtrlDaiBadPartition;
  }

  if ((address & kPartitions[partition].align_mask) != 0) {
20000e24:	00459813          	slli	a6,a1,0x4
20000e28:	00001897          	auipc	a7,0x1
20000e2c:	0dc88893          	addi	a7,a7,220 # 20001f04 <kPartitions>
20000e30:	010885b3          	add	a1,a7,a6
20000e34:	459c                	lw	a5,8(a1)
20000e36:	8ff1                	and	a5,a5,a2
20000e38:	4299                	li	t0,6
20000e3a:	e39d                	bnez	a5,20000e60 <dif_otp_ctrl_read_blocking+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:827
    return kDifOtpCtrlDaiUnaligned;
  }

  if (address + len >= kPartitions[partition].len) {
20000e3c:	41cc                	lw	a1,4(a1)
20000e3e:	00c707b3          	add	a5,a4,a2
20000e42:	4295                	li	t0,5
20000e44:	00b7fe63          	bgeu	a5,a1,20000e60 <dif_otp_ctrl_read_blocking+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:832
    return kDifOtpCtrlDaiOutOfRange;
  }

  ptrdiff_t reg_offset = OTP_CTRL_SW_CFG_WINDOW_REG_OFFSET +
                         kPartitions[partition].start_addr + address;
20000e48:	011805b3          	add	a1,a6,a7
20000e4c:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:831
  ptrdiff_t reg_offset = OTP_CTRL_SW_CFG_WINDOW_REG_OFFSET +
20000e4e:	95b2                	add	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:833
  mmio_region_memcpy_from_mmio32(otp->params.base_addr, reg_offset, buf,
20000e50:	4108                	lw	a0,0(a0)
20000e52:	6605                	lui	a2,0x1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:832
                         kPartitions[partition].start_addr + address;
20000e54:	95b2                	add	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:834
                                 len * sizeof(uint32_t));
20000e56:	070a                	slli	a4,a4,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:833
  mmio_region_memcpy_from_mmio32(otp->params.base_addr, reg_offset, buf,
20000e58:	8636                	mv	a2,a3
20000e5a:	86ba                	mv	a3,a4
20000e5c:	20a1                	jal	20000ea4 <mmio_region_memcpy_from_mmio32>
20000e5e:	4281                	li	t0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:836
  return kDifOtpCtrlDaiOk;
}
20000e60:	8516                	mv	a0,t0
20000e62:	40b2                	lw	ra,12(sp)
20000e64:	0141                	addi	sp,sp,16
20000e66:	8082                	ret

20000e68 <dif_otp_ctrl_read_test>:
dif_otp_ctrl_read_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:840

dif_otp_ctrl_result_t dif_otp_ctrl_read_test(const dif_otp_ctrl_t *otp,
                                             uint32_t address, uint32_t *buf,
                                             size_t len) {
20000e68:	1141                	addi	sp,sp,-16
20000e6a:	c606                	sw	ra,12(sp)
20000e6c:	872a                	mv	a4,a0
20000e6e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:841
  if (otp == NULL || buf == NULL) {
20000e70:	cb01                	beqz	a4,20000e80 <dif_otp_ctrl_read_test+0x18>
20000e72:	c619                	beqz	a2,20000e80 <dif_otp_ctrl_read_test+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:846
    return kDifOtpCtrlBadArg;
  }

  ptrdiff_t reg_offset = OTP_CTRL_TEST_ACCESS_REG_OFFSET + address;
  mmio_region_memcpy_from_mmio32(otp->params.base_addr, reg_offset, buf,
20000e74:	4308                	lw	a0,0(a4)
20000e76:	6709                	lui	a4,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:845
  ptrdiff_t reg_offset = OTP_CTRL_TEST_ACCESS_REG_OFFSET + address;
20000e78:	95ba                	add	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:847
                                 len * sizeof(uint32_t));
20000e7a:	068a                	slli	a3,a3,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:846
  mmio_region_memcpy_from_mmio32(otp->params.base_addr, reg_offset, buf,
20000e7c:	2025                	jal	20000ea4 <mmio_region_memcpy_from_mmio32>
20000e7e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:849
  return kDifOtpCtrlOk;
}
20000e80:	40b2                	lw	ra,12(sp)
20000e82:	0141                	addi	sp,sp,16
20000e84:	8082                	ret

20000e86 <dif_otp_ctrl_write_test>:
dif_otp_ctrl_write_test():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:853

dif_otp_ctrl_result_t dif_otp_ctrl_write_test(const dif_otp_ctrl_t *otp,
                                              uint32_t address,
                                              const uint32_t *buf, size_t len) {
20000e86:	1141                	addi	sp,sp,-16
20000e88:	c606                	sw	ra,12(sp)
20000e8a:	872a                	mv	a4,a0
20000e8c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:854
  if (otp == NULL || buf == NULL) {
20000e8e:	cb01                	beqz	a4,20000e9e <dif_otp_ctrl_write_test+0x18>
20000e90:	c619                	beqz	a2,20000e9e <dif_otp_ctrl_write_test+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:859
    return kDifOtpCtrlBadArg;
  }

  ptrdiff_t reg_offset = OTP_CTRL_TEST_ACCESS_REG_OFFSET + address;
  mmio_region_memcpy_to_mmio32(otp->params.base_addr, reg_offset, buf,
20000e92:	4308                	lw	a0,0(a4)
20000e94:	6709                	lui	a4,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:858
  ptrdiff_t reg_offset = OTP_CTRL_TEST_ACCESS_REG_OFFSET + address;
20000e96:	95ba                	add	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:860
                               len * sizeof(uint32_t));
20000e98:	068a                	slli	a3,a3,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:859
  mmio_region_memcpy_to_mmio32(otp->params.base_addr, reg_offset, buf,
20000e9a:	28f1                	jal	20000f76 <mmio_region_memcpy_to_mmio32>
20000e9c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_otp_ctrl.c:862
  return kDifOtpCtrlOk;
}
20000e9e:	40b2                	lw	ra,12(sp)
20000ea0:	0141                	addi	sp,sp,16
20000ea2:	8082                	ret

20000ea4 <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:112
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
20000ea4:	4705                	li	a4,1
20000ea6:	a009                	j	20000ea8 <mmio_region_memcpy32>

20000ea8 <mmio_region_memcpy32>:
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:35
                                 size_t len, bool from_mmio) {
20000ea8:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:36
  if (len == 0) {
20000eaa:	d606                	sw	ra,44(sp)
20000eac:	d422                	sw	s0,40(sp)
20000eae:	d226                	sw	s1,36(sp)
20000eb0:	d04a                	sw	s2,32(sp)
20000eb2:	ce4e                	sw	s3,28(sp)
20000eb4:	cc52                	sw	s4,24(sp)
20000eb6:	ca56                	sw	s5,20(sp)
20000eb8:	c85a                	sw	s6,16(sp)
20000eba:	c6c5                	beqz	a3,20000f62 <mmio_region_memcpy32+0xba>
20000ebc:	893a                	mv	s2,a4
20000ebe:	8436                	mv	s0,a3
20000ec0:	89b2                	mv	s3,a2
20000ec2:	8b2e                	mv	s6,a1
20000ec4:	8a2a                	mv	s4,a0
misalignment32_of():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:16
  return addr % alignof(uint32_t);
20000ec6:	0035f513          	andi	a0,a1,3
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:43
  if (misalignment != 0) {
20000eca:	c139                	beqz	a0,20000f10 <mmio_region_memcpy32+0x68>
20000ecc:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:46
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
20000ece:	8d89                	sub	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:50
    if (realignment > len) {
20000ed0:	84a2                	mv	s1,s0
20000ed2:	00b46363          	bltu	s0,a1,20000ed8 <mmio_region_memcpy32+0x30>
20000ed6:	84ae                	mv	s1,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ed8:	ffcb7593          	andi	a1,s6,-4
20000edc:	00ba0ab3          	add	s5,s4,a1
20000ee0:	000aa583          	lw	a1,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:57
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
20000ee4:	c62e                	sw	a1,12(sp)
20000ee6:	006c                	addi	a1,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:61
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
20000ee8:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:62
    if (from_mmio) {
20000eea:	00090763          	beqz	s2,20000ef8 <mmio_region_memcpy32+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:63
      memcpy(buf, current_byte, realignment);
20000eee:	854e                	mv	a0,s3
20000ef0:	8626                	mv	a2,s1
20000ef2:	fb2ff0ef          	jal	ra,200006a4 <memcpy>
20000ef6:	a809                	j	20000f08 <mmio_region_memcpy32+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:66
      memcpy(current_byte, buf, realignment);
20000ef8:	852e                	mv	a0,a1
20000efa:	85ce                	mv	a1,s3
20000efc:	8626                	mv	a2,s1
20000efe:	fa6ff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:67
      mmio_region_write32(base, current_word_offset, current_word);
20000f02:	4532                	lw	a0,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f04:	00aaa023          	sw	a0,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:72
    len -= realignment;
20000f08:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20000f0a:	cc21                	beqz	s0,20000f62 <mmio_region_memcpy32+0xba>
20000f0c:	9b26                	add	s6,s6,s1
20000f0e:	99a6                	add	s3,s3,s1
20000f10:	00810a93          	addi	s5,sp,8
20000f14:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:81
    if (bytes_to_copy > len) {
20000f16:	84a2                	mv	s1,s0
20000f18:	00a46363          	bltu	s0,a0,20000f1e <mmio_region_memcpy32+0x76>
20000f1c:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:86
    uint32_t current_word = 0;
20000f1e:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:87
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
20000f20:	00a46c63          	bltu	s0,a0,20000f38 <mmio_region_memcpy32+0x90>
20000f24:	00091a63          	bnez	s2,20000f38 <mmio_region_memcpy32+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20000f28:	00090f63          	beqz	s2,20000f46 <mmio_region_memcpy32+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:97
      memcpy(buf, &current_word, bytes_to_copy);
20000f2c:	854e                	mv	a0,s3
20000f2e:	85d6                	mv	a1,s5
20000f30:	8626                	mv	a2,s1
20000f32:	f72ff0ef          	jal	ra,200006a4 <memcpy>
20000f36:	a015                	j	20000f5a <mmio_region_memcpy32+0xb2>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f38:	ffcb7513          	andi	a0,s6,-4
20000f3c:	9552                	add	a0,a0,s4
20000f3e:	4108                	lw	a0,0(a0)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:92
      current_word = mmio_region_read32(base, offset);
20000f40:	c42a                	sw	a0,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20000f42:	fe0915e3          	bnez	s2,20000f2c <mmio_region_memcpy32+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:100
      memcpy(&current_word, buf, bytes_to_copy);
20000f46:	8556                	mv	a0,s5
20000f48:	85ce                	mv	a1,s3
20000f4a:	8626                	mv	a2,s1
20000f4c:	f58ff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:101
      mmio_region_write32(base, offset, current_word);
20000f50:	4522                	lw	a0,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f52:	ffcb7593          	andi	a1,s6,-4
20000f56:	95d2                	add	a1,a1,s4
20000f58:	c188                	sw	a0,0(a1)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:104
    offset += bytes_to_copy;
20000f5a:	9b26                	add	s6,s6,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:106
    len -= bytes_to_copy;
20000f5c:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:105
    buf += bytes_to_copy;
20000f5e:	99a6                	add	s3,s3,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20000f60:	f855                	bnez	s0,20000f14 <mmio_region_memcpy32+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:108
}
20000f62:	4b42                	lw	s6,16(sp)
20000f64:	4ad2                	lw	s5,20(sp)
20000f66:	4a62                	lw	s4,24(sp)
20000f68:	49f2                	lw	s3,28(sp)
20000f6a:	5902                	lw	s2,32(sp)
20000f6c:	5492                	lw	s1,36(sp)
20000f6e:	5422                	lw	s0,40(sp)
20000f70:	50b2                	lw	ra,44(sp)
20000f72:	6145                	addi	sp,sp,48
20000f74:	8082                	ret

20000f76 <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:120
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
20000f76:	4701                	li	a4,0
20000f78:	bf05                	j	20000ea8 <mmio_region_memcpy32>

20000f7a <mmio_region_read8>:
mmio_region_read8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:85
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
20000f7a:	952e                	add	a0,a0,a1
20000f7c:	00054503          	lbu	a0,0(a0)
20000f80:	8082                	ret

20000f82 <mmio_region_read32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f82:	99f1                	andi	a1,a1,-4
20000f84:	952e                	add	a0,a0,a1
20000f86:	4108                	lw	a0,0(a0)
20000f88:	8082                	ret

20000f8a <mmio_region_write8>:
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
20000f8a:	952e                	add	a0,a0,a1
20000f8c:	00c50023          	sb	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:118
}
20000f90:	8082                	ret

20000f92 <mmio_region_write32>:
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f92:	99f1                	andi	a1,a1,-4
20000f94:	952e                	add	a0,a0,a1
20000f96:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:134
}
20000f98:	8082                	ret

20000f9a <mmio_region_read_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f9a:	99f1                	andi	a1,a1,-4
20000f9c:	952e                	add	a0,a0,a1
20000f9e:	4108                	lw	a0,0(a0)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20000fa0:	00d55533          	srl	a0,a0,a3
20000fa4:	8d71                	and	a0,a0,a2
mmio_region_read_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:176
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
20000fa6:	8082                	ret

20000fa8 <mmio_region_get_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fa8:	99f1                	andi	a1,a1,-4
20000faa:	952e                	add	a0,a0,a1
20000fac:	4108                	lw	a0,0(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000fae:	00c55533          	srl	a0,a0,a2
20000fb2:	8905                	andi	a0,a0,1
mmio_region_get_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:197
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
20000fb4:	8082                	ret

20000fb6 <mmio_region_nonatomic_clear_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fb6:	99f1                	andi	a1,a1,-4
20000fb8:	952e                	add	a0,a0,a1
20000fba:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000fbc:	00d61633          	sll	a2,a2,a3
20000fc0:	fff64613          	not	a2,a2
20000fc4:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fc6:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:220
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
20000fc8:	8082                	ret

20000fca <mmio_region_nonatomic_set_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fca:	99f1                	andi	a1,a1,-4
20000fcc:	952e                	add	a0,a0,a1
20000fce:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000fd0:	00d61633          	sll	a2,a2,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000fd4:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fd6:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:242
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20000fd8:	8082                	ret

20000fda <mmio_region_write_only_set_mask32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000fda:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fde:	99f1                	andi	a1,a1,-4
20000fe0:	952e                	add	a0,a0,a1
20000fe2:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:264
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20000fe4:	8082                	ret

20000fe6 <mmio_region_nonatomic_set_field32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fe6:	99f1                	andi	a1,a1,-4
20000fe8:	952e                	add	a0,a0,a1
20000fea:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000fec:	00d617b3          	sll	a5,a2,a3
20000ff0:	fff7c793          	not	a5,a5
20000ff4:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000ff6:	8e79                	and	a2,a2,a4
20000ff8:	00d61633          	sll	a2,a2,a3
20000ffc:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ffe:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:288
                                              bitfield_field32_t field,
                                              uint32_t value) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
20001000:	8082                	ret

20001002 <mmio_region_write_only_set_field32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001002:	8e79                	and	a2,a2,a4
20001004:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001008:	99f1                	andi	a1,a1,-4
2000100a:	952e                	add	a0,a0,a1
2000100c:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:309
                                               bitfield_field32_t field,
                                               uint32_t value) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
2000100e:	8082                	ret

20001010 <mmio_region_nonatomic_clear_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001010:	99f1                	andi	a1,a1,-4
20001012:	952e                	add	a0,a0,a1
20001014:	410c                	lw	a1,0(a0)
20001016:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001018:	00c69633          	sll	a2,a3,a2
2000101c:	fff64613          	not	a2,a2
20001020:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001022:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:328
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
20001024:	8082                	ret

20001026 <mmio_region_nonatomic_set_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001026:	99f1                	andi	a1,a1,-4
20001028:	952e                	add	a0,a0,a1
2000102a:	410c                	lw	a1,0(a0)
2000102c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
2000102e:	00c69633          	sll	a2,a3,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001032:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001034:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:346
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20001036:	8082                	ret

20001038 <mmio_region_write_only_set_bit32>:
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:363
 * @param bit_index the bit to set.
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_bit32(mmio_region_t base,
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
20001038:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000103a:	00c69633          	sll	a2,a3,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000103e:	99f1                	andi	a1,a1,-4
20001040:	952e                	add	a0,a0,a1
20001042:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:367
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20001044:	8082                	ret
	...

20001048 <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
20001048:	7139                	addi	sp,sp,-64
2000104a:	ce06                	sw	ra,28(sp)
2000104c:	cc22                	sw	s0,24(sp)
2000104e:	ca26                	sw	s1,20(sp)
20001050:	c84a                	sw	s2,16(sp)
20001052:	892a                	mv	s2,a0
20001054:	de46                	sw	a7,60(sp)
20001056:	dc42                	sw	a6,56(sp)
20001058:	da3e                	sw	a5,52(sp)
2000105a:	d83a                	sw	a4,48(sp)
2000105c:	d636                	sw	a3,44(sp)
2000105e:	d432                	sw	a2,40(sp)
20001060:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20001062:	4144                	lw	s1,4(a0)
20001064:	80000537          	lui	a0,0x80000
20001068:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffdabf>
2000106c:	8526                	mv	a0,s1
2000106e:	4581                	li	a1,0
20001070:	e84ff0ef          	jal	ra,200006f4 <memchr>
20001074:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
20001078:	02f00593          	li	a1,47
2000107c:	8526                	mv	a0,s1
2000107e:	e8eff0ef          	jal	ra,2000070c <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001082:	00092583          	lw	a1,0(s2)
20001086:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
20001088:	00b66b63          	bltu	a2,a1,2000109e <base_log_internal_core+0x56>
2000108c:	058a                	slli	a1,a1,0x2
2000108e:	00001617          	auipc	a2,0x1
20001092:	f4260613          	addi	a2,a2,-190 # 20001fd0 <kPartitions+0xcc>
20001096:	95b2                	add	a1,a1,a2
20001098:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
2000109a:	e519                	bnez	a0,200010a8 <base_log_internal_core+0x60>
2000109c:	a801                	j	200010ac <base_log_internal_core+0x64>
2000109e:	00001597          	auipc	a1,0x1
200010a2:	49858593          	addi	a1,a1,1176 # 20002536 <__clz_tab+0x506>
200010a6:	c119                	beqz	a0,200010ac <base_log_internal_core+0x64>
200010a8:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
200010ac:	effff417          	auipc	s0,0xeffff
200010b0:	f6440413          	addi	s0,s0,-156 # 10000010 <base_log_internal_core.global_log_counter>
200010b4:	00045603          	lhu	a2,0(s0)
200010b8:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200010bc:	00001517          	auipc	a0,0x1
200010c0:	46150513          	addi	a0,a0,1121 # 2000251d <__clz_tab+0x4ed>
200010c4:	86a6                	mv	a3,s1
200010c6:	28d1                	jal	2000119a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
200010c8:	00041503          	lh	a0,0(s0)
200010cc:	0505                	addi	a0,a0,1
200010ce:	00a41023          	sh	a0,0(s0)
200010d2:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
200010d4:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
200010d6:	01092503          	lw	a0,16(s2)
200010da:	28c5                	jal	200011ca <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
200010dc:	00001517          	auipc	a0,0x1
200010e0:	44f50513          	addi	a0,a0,1103 # 2000252b <__clz_tab+0x4fb>
200010e4:	285d                	jal	2000119a <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
200010e6:	4942                	lw	s2,16(sp)
200010e8:	44d2                	lw	s1,20(sp)
200010ea:	4462                	lw	s0,24(sp)
200010ec:	40f2                	lw	ra,28(sp)
200010ee:	6121                	addi	sp,sp,64
200010f0:	8082                	ret

200010f2 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
200010f2:	1101                	addi	sp,sp,-32
200010f4:	ce46                	sw	a7,28(sp)
200010f6:	cc42                	sw	a6,24(sp)
200010f8:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
200010fa:	00001797          	auipc	a5,0x1
200010fe:	d1e78793          	addi	a5,a5,-738 # 20001e18 <kDeviceLogBypassUartAddress>
20001102:	439c                	lw	a5,0(a5)
20001104:	c83a                	sw	a4,16(sp)
20001106:	c636                	sw	a3,12(sp)
20001108:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000110a:	c388                	sw	a0,0(a5)
2000110c:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
2000110e:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001110:	c989                	beqz	a1,20001122 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20001112:	4512                	lw	a0,4(sp)
20001114:	00450613          	addi	a2,a0,4
20001118:	c232                	sw	a2,4(sp)
2000111a:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
2000111c:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000111e:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001120:	f9ed                	bnez	a1,20001112 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20001122:	6105                	addi	sp,sp,32
20001124:	8082                	ret
	...

20001128 <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
20001128:	e589                	bnez	a1,20001132 <base_set_stdout+0xa>
2000112a:	00000597          	auipc	a1,0x0
2000112e:	01658593          	addi	a1,a1,22 # 20001140 <base_dev_null>
20001132:	effff617          	auipc	a2,0xeffff
20001136:	ece60613          	addi	a2,a2,-306 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
2000113a:	c208                	sw	a0,0(a2)
2000113c:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
2000113e:	8082                	ret

20001140 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001140:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20001142:	8082                	ret

20001144 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001144:	effff597          	auipc	a1,0xeffff
20001148:	ebc58593          	addi	a1,a1,-324 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
2000114c:	c188                	sw	a0,0(a1)
2000114e:	00000517          	auipc	a0,0x0
20001152:	00c50513          	addi	a0,a0,12 # 2000115a <base_dev_uart>
20001156:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20001158:	8082                	ret

2000115a <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
2000115a:	1101                	addi	sp,sp,-32
2000115c:	ce06                	sw	ra,28(sp)
2000115e:	cc22                	sw	s0,24(sp)
20001160:	ca26                	sw	s1,20(sp)
20001162:	c84a                	sw	s2,16(sp)
20001164:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001166:	c20d                	beqz	a2,20001188 <base_dev_uart+0x2e>
20001168:	8432                	mv	s0,a2
2000116a:	892e                	mv	s2,a1
2000116c:	89aa                	mv	s3,a0
2000116e:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001170:	00990533          	add	a0,s2,s1
20001174:	00054583          	lbu	a1,0(a0)
20001178:	854e                	mv	a0,s3
2000117a:	2f11                	jal	2000188e <dif_uart_byte_send_polled>
2000117c:	e519                	bnez	a0,2000118a <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
2000117e:	0485                	addi	s1,s1,1
20001180:	fe9418e3          	bne	s0,s1,20001170 <base_dev_uart+0x16>
20001184:	84a2                	mv	s1,s0
20001186:	a011                	j	2000118a <base_dev_uart+0x30>
20001188:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
2000118a:	8526                	mv	a0,s1
2000118c:	49b2                	lw	s3,12(sp)
2000118e:	4942                	lw	s2,16(sp)
20001190:	44d2                	lw	s1,20(sp)
20001192:	4462                	lw	s0,24(sp)
20001194:	40f2                	lw	ra,28(sp)
20001196:	6105                	addi	sp,sp,32
20001198:	8082                	ret

2000119a <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
2000119a:	7179                	addi	sp,sp,-48
2000119c:	c606                	sw	ra,12(sp)
2000119e:	d646                	sw	a7,44(sp)
200011a0:	d442                	sw	a6,40(sp)
200011a2:	d23e                	sw	a5,36(sp)
200011a4:	d03a                	sw	a4,32(sp)
200011a6:	ce36                	sw	a3,28(sp)
200011a8:	cc32                	sw	a2,24(sp)
200011aa:	ca2e                	sw	a1,20(sp)
200011ac:	effff597          	auipc	a1,0xeffff
200011b0:	e5458593          	addi	a1,a1,-428 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
200011b4:	4190                	lw	a2,0(a1)
200011b6:	41cc                	lw	a1,4(a1)
200011b8:	872a                	mv	a4,a0
200011ba:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
200011bc:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200011be:	8532                	mv	a0,a2
200011c0:	863a                	mv	a2,a4
200011c2:	200d                	jal	200011e4 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
200011c4:	40b2                	lw	ra,12(sp)
200011c6:	6145                	addi	sp,sp,48
200011c8:	8082                	ret

200011ca <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
200011ca:	effff697          	auipc	a3,0xeffff
200011ce:	e3668693          	addi	a3,a3,-458 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200011d2:	4290                	lw	a2,0(a3)
200011d4:	42d4                	lw	a3,4(a3)
200011d6:	872e                	mv	a4,a1
200011d8:	87aa                	mv	a5,a0
200011da:	8532                	mv	a0,a2
200011dc:	85b6                	mv	a1,a3
200011de:	863e                	mv	a2,a5
200011e0:	86ba                	mv	a3,a4
200011e2:	a009                	j	200011e4 <base_vfprintf>

200011e4 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
200011e4:	7139                	addi	sp,sp,-64
200011e6:	de06                	sw	ra,60(sp)
200011e8:	dc22                	sw	s0,56(sp)
200011ea:	da26                	sw	s1,52(sp)
200011ec:	d84a                	sw	s2,48(sp)
200011ee:	d64e                	sw	s3,44(sp)
200011f0:	d452                	sw	s4,40(sp)
200011f2:	d256                	sw	s5,36(sp)
200011f4:	d05a                	sw	s6,32(sp)
200011f6:	ce5e                	sw	s7,28(sp)
200011f8:	cc62                	sw	s8,24(sp)
200011fa:	ca66                	sw	s9,20(sp)
200011fc:	c86a                	sw	s10,16(sp)
200011fe:	c66e                	sw	s11,12(sp)
20001200:	8bb2                	mv	s7,a2
20001202:	892a                	mv	s2,a0
20001204:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
20001206:	c199                	beqz	a1,2000120c <base_vfprintf+0x28>
20001208:	89ae                	mv	s3,a1
2000120a:	a029                	j	20001214 <base_vfprintf+0x30>
2000120c:	00000997          	auipc	s3,0x0
20001210:	f3498993          	addi	s3,s3,-204 # 20001140 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001214:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20001216:	000bc503          	lbu	a0,0(s7)
2000121a:	28050f63          	beqz	a0,200014b8 <base_vfprintf+0x2d4>
2000121e:	4b01                	li	s6,0
20001220:	02500c13          	li	s8,37
20001224:	4ca5                	li	s9,9
20001226:	02000d13          	li	s10,32
2000122a:	06800d93          	li	s11,104
2000122e:	00001a17          	auipc	s4,0x1
20001232:	30aa0a13          	addi	s4,s4,778 # 20002538 <__clz_tab+0x508>
20001236:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
20001238:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
2000123a:	0ff57413          	andi	s0,a0,255
2000123e:	01840963          	beq	s0,s8,20001250 <base_vfprintf+0x6c>
20001242:	c419                	beqz	s0,20001250 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001244:	009b8533          	add	a0,s7,s1
20001248:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
2000124c:	0485                	addi	s1,s1,1
2000124e:	b7f5                	j	2000123a <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20001250:	c491                	beqz	s1,2000125c <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20001252:	854a                	mv	a0,s2
20001254:	85de                	mv	a1,s7
20001256:	8626                	mv	a2,s1
20001258:	9982                	jalr	s3
2000125a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
2000125c:	24040f63          	beqz	s0,200014ba <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001260:	009b8633          	add	a2,s7,s1
20001264:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001268:	22050f63          	beqz	a0,200014a6 <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
2000126c:	fd050593          	addi	a1,a0,-48
20001270:	0ff5f593          	andi	a1,a1,255
20001274:	00bcf863          	bgeu	s9,a1,20001284 <base_vfprintf+0xa0>
20001278:	4401                	li	s0,0
2000127a:	4581                	li	a1,0
2000127c:	4605                	li	a2,1
2000127e:	028d7f63          	bgeu	s10,s0,200012bc <base_vfprintf+0xd8>
20001282:	aca1                	j	200014da <base_vfprintf+0x2f6>
20001284:	4581                	li	a1,0
20001286:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001288:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000128a:	00b606b3          	add	a3,a2,a1
2000128e:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001292:	20068a63          	beqz	a3,200014a6 <base_vfprintf+0x2c2>
20001296:	0ff57513          	andi	a0,a0,255
2000129a:	03540733          	mul	a4,s0,s5
2000129e:	953a                	add	a0,a0,a4
200012a0:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200012a4:	fd068513          	addi	a0,a3,-48
200012a8:	0ff57713          	andi	a4,a0,255
200012ac:	0585                	addi	a1,a1,1
200012ae:	8536                	mv	a0,a3
200012b0:	fcecfde3          	bgeu	s9,a4,2000128a <base_vfprintf+0xa6>
200012b4:	4601                	li	a2,0
200012b6:	8536                	mv	a0,a3
200012b8:	228d6163          	bltu	s10,s0,200014da <base_vfprintf+0x2f6>
200012bc:	008036b3          	snez	a3,s0
200012c0:	8e55                	or	a2,a2,a3
200012c2:	20060c63          	beqz	a2,200014da <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200012c6:	95de                	add	a1,a1,s7
200012c8:	95a6                	add	a1,a1,s1
200012ca:	00258b93          	addi	s7,a1,2
200012ce:	02adce63          	blt	s11,a0,2000130a <base_vfprintf+0x126>
200012d2:	06100593          	li	a1,97
200012d6:	06a5d563          	bge	a1,a0,20001340 <base_vfprintf+0x15c>
200012da:	06300593          	li	a1,99
200012de:	0ca5cb63          	blt	a1,a0,200013b4 <base_vfprintf+0x1d0>
200012e2:	06200593          	li	a1,98
200012e6:	14b50a63          	beq	a0,a1,2000143a <base_vfprintf+0x256>
200012ea:	06300593          	li	a1,99
200012ee:	18b51f63          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
200012f2:	4502                	lw	a0,0(sp)
200012f4:	00450593          	addi	a1,a0,4
200012f8:	c02e                	sw	a1,0(sp)
200012fa:	4108                	lw	a0,0(a0)
200012fc:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20001300:	4605                	li	a2,1
20001302:	854a                	mv	a0,s2
20001304:	00b10593          	addi	a1,sp,11
20001308:	aa41                	j	20001498 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000130a:	07200593          	li	a1,114
2000130e:	04a5dd63          	bge	a1,a0,20001368 <base_vfprintf+0x184>
20001312:	07700593          	li	a1,119
20001316:	0aa5c663          	blt	a1,a0,200013c2 <base_vfprintf+0x1de>
2000131a:	07300593          	li	a1,115
2000131e:	12b50963          	beq	a0,a1,20001450 <base_vfprintf+0x26c>
20001322:	07500593          	li	a1,117
20001326:	16b51363          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
2000132a:	4502                	lw	a0,0(sp)
2000132c:	00450593          	addi	a1,a0,4
20001330:	c02e                	sw	a1,0(sp)
20001332:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001334:	00001797          	auipc	a5,0x1
20001338:	cc978793          	addi	a5,a5,-823 # 20001ffd <kDigitsLow>
2000133c:	4729                	li	a4,10
2000133e:	a8cd                	j	20001430 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001340:	13850763          	beq	a0,s8,2000146e <base_vfprintf+0x28a>
20001344:	04800593          	li	a1,72
20001348:	00b50663          	beq	a0,a1,20001354 <base_vfprintf+0x170>
2000134c:	05800593          	li	a1,88
20001350:	12b51e63          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001354:	4502                	lw	a0,0(sp)
20001356:	00450593          	addi	a1,a0,4
2000135a:	c02e                	sw	a1,0(sp)
2000135c:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
2000135e:	00001797          	auipc	a5,0x1
20001362:	caf78793          	addi	a5,a5,-849 # 2000200d <kDigitsHigh>
20001366:	a0e1                	j	2000142e <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001368:	06900593          	li	a1,105
2000136c:	06b50d63          	beq	a0,a1,200013e6 <base_vfprintf+0x202>
20001370:	06f00593          	li	a1,111
20001374:	10b50163          	beq	a0,a1,20001476 <base_vfprintf+0x292>
20001378:	07000593          	li	a1,112
2000137c:	10b51863          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001380:	00001597          	auipc	a1,0x1
20001384:	1bc58593          	addi	a1,a1,444 # 2000253c <__clz_tab+0x50c>
20001388:	4609                	li	a2,2
2000138a:	854a                	mv	a0,s2
2000138c:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
2000138e:	4582                	lw	a1,0(sp)
20001390:	00458613          	addi	a2,a1,4
20001394:	c032                	sw	a2,0(sp)
20001396:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001398:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
2000139c:	00001797          	auipc	a5,0x1
200013a0:	c6178793          	addi	a5,a5,-927 # 20001ffd <kDigitsLow>
200013a4:	46a1                	li	a3,8
200013a6:	4741                	li	a4,16
200013a8:	854a                	mv	a0,s2
200013aa:	85ce                	mv	a1,s3
200013ac:	2a5d                	jal	20001562 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
200013ae:	00a40b33          	add	s6,s0,a0
200013b2:	a0ed                	j	2000149c <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200013b4:	06400593          	li	a1,100
200013b8:	02b50763          	beq	a0,a1,200013e6 <base_vfprintf+0x202>
200013bc:	07b50063          	beq	a0,s11,2000141c <base_vfprintf+0x238>
200013c0:	a0f1                	j	2000148c <base_vfprintf+0x2a8>
200013c2:	07800593          	li	a1,120
200013c6:	04b50b63          	beq	a0,a1,2000141c <base_vfprintf+0x238>
200013ca:	07a00593          	li	a1,122
200013ce:	0ab51f63          	bne	a0,a1,2000148c <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
200013d2:	4502                	lw	a0,0(sp)
200013d4:	00450593          	addi	a1,a0,4
200013d8:	c02e                	sw	a1,0(sp)
200013da:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
200013dc:	00850593          	addi	a1,a0,8
200013e0:	c02e                	sw	a1,0(sp)
200013e2:	414c                	lw	a1,4(a0)
200013e4:	a84d                	j	20001496 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
200013e6:	4502                	lw	a0,0(sp)
200013e8:	00450593          	addi	a1,a0,4
200013ec:	c02e                	sw	a1,0(sp)
200013ee:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
200013f0:	557d                	li	a0,-1
200013f2:	00954c63          	blt	a0,s1,2000140a <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
200013f6:	00001597          	auipc	a1,0x1
200013fa:	14458593          	addi	a1,a1,324 # 2000253a <__clz_tab+0x50a>
200013fe:	4605                	li	a2,1
20001400:	854a                	mv	a0,s2
20001402:	9982                	jalr	s3
20001404:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
20001406:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
2000140a:	00001797          	auipc	a5,0x1
2000140e:	bf378793          	addi	a5,a5,-1037 # 20001ffd <kDigitsLow>
20001412:	4729                	li	a4,10
20001414:	854a                	mv	a0,s2
20001416:	85ce                	mv	a1,s3
20001418:	8626                	mv	a2,s1
2000141a:	a829                	j	20001434 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
2000141c:	4502                	lw	a0,0(sp)
2000141e:	00450593          	addi	a1,a0,4
20001422:	c02e                	sw	a1,0(sp)
20001424:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
20001426:	00001797          	auipc	a5,0x1
2000142a:	bd778793          	addi	a5,a5,-1065 # 20001ffd <kDigitsLow>
2000142e:	4741                	li	a4,16
20001430:	854a                	mv	a0,s2
20001432:	85ce                	mv	a1,s3
20001434:	86a2                	mv	a3,s0
20001436:	2235                	jal	20001562 <write_digits>
20001438:	a08d                	j	2000149a <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
2000143a:	4502                	lw	a0,0(sp)
2000143c:	00450593          	addi	a1,a0,4
20001440:	c02e                	sw	a1,0(sp)
20001442:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20001444:	00001797          	auipc	a5,0x1
20001448:	bb978793          	addi	a5,a5,-1095 # 20001ffd <kDigitsLow>
2000144c:	4709                	li	a4,2
2000144e:	b7cd                	j	20001430 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20001450:	4502                	lw	a0,0(sp)
20001452:	00450593          	addi	a1,a0,4
20001456:	c02e                	sw	a1,0(sp)
20001458:	410c                	lw	a1,0(a0)
2000145a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
2000145c:	00a58633          	add	a2,a1,a0
20001460:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20001464:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001466:	fa7d                	bnez	a2,2000145c <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
20001468:	fff50613          	addi	a2,a0,-1
2000146c:	a02d                	j	20001496 <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
2000146e:	4605                	li	a2,1
20001470:	854a                	mv	a0,s2
20001472:	85d2                	mv	a1,s4
20001474:	a015                	j	20001498 <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
20001476:	4502                	lw	a0,0(sp)
20001478:	00450593          	addi	a1,a0,4
2000147c:	c02e                	sw	a1,0(sp)
2000147e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001480:	00001797          	auipc	a5,0x1
20001484:	b7d78793          	addi	a5,a5,-1155 # 20001ffd <kDigitsLow>
20001488:	4721                	li	a4,8
2000148a:	b75d                	j	20001430 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
2000148c:	00001597          	auipc	a1,0x1
20001490:	b9158593          	addi	a1,a1,-1135 # 2000201d <kUnknownSpec>
20001494:	463d                	li	a2,15
20001496:	854a                	mv	a0,s2
20001498:	9982                	jalr	s3
2000149a:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
2000149c:	000bc503          	lbu	a0,0(s7)
200014a0:	d8051ce3          	bnez	a0,20001238 <base_vfprintf+0x54>
200014a4:	a819                	j	200014ba <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
200014a6:	00001597          	auipc	a1,0x1
200014aa:	b3a58593          	addi	a1,a1,-1222 # 20001fe0 <kErrorNul>
200014ae:	4645                	li	a2,17
200014b0:	854a                	mv	a0,s2
200014b2:	9982                	jalr	s3
200014b4:	9b2a                	add	s6,s6,a0
200014b6:	a011                	j	200014ba <base_vfprintf+0x2d6>
200014b8:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
200014ba:	855a                	mv	a0,s6
200014bc:	4db2                	lw	s11,12(sp)
200014be:	4d42                	lw	s10,16(sp)
200014c0:	4cd2                	lw	s9,20(sp)
200014c2:	4c62                	lw	s8,24(sp)
200014c4:	4bf2                	lw	s7,28(sp)
200014c6:	5b02                	lw	s6,32(sp)
200014c8:	5a92                	lw	s5,36(sp)
200014ca:	5a22                	lw	s4,40(sp)
200014cc:	59b2                	lw	s3,44(sp)
200014ce:	5942                	lw	s2,48(sp)
200014d0:	54d2                	lw	s1,52(sp)
200014d2:	5462                	lw	s0,56(sp)
200014d4:	50f2                	lw	ra,60(sp)
200014d6:	6121                	addi	sp,sp,64
200014d8:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
200014da:	00001597          	auipc	a1,0x1
200014de:	b1758593          	addi	a1,a1,-1257 # 20001ff1 <kErrorTooWide>
200014e2:	4631                	li	a2,12
200014e4:	b7f1                	j	200014b0 <base_vfprintf+0x2cc>

200014e6 <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
200014e6:	7179                	addi	sp,sp,-48
200014e8:	ca06                	sw	ra,20(sp)
200014ea:	d646                	sw	a7,44(sp)
200014ec:	d442                	sw	a6,40(sp)
200014ee:	d23e                	sw	a5,36(sp)
200014f0:	d03a                	sw	a4,32(sp)
200014f2:	ce36                	sw	a3,28(sp)
200014f4:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200014f6:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200014f8:	c42a                	sw	a0,8(sp)
200014fa:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200014fc:	00000597          	auipc	a1,0x0
20001500:	01258593          	addi	a1,a1,18 # 2000150e <snprintf_sink>
20001504:	0028                	addi	a0,sp,8
20001506:	39f9                	jal	200011e4 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001508:	40d2                	lw	ra,20(sp)
2000150a:	6145                	addi	sp,sp,48
2000150c:	8082                	ret

2000150e <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
2000150e:	1141                	addi	sp,sp,-16
20001510:	c606                	sw	ra,12(sp)
20001512:	c422                	sw	s0,8(sp)
20001514:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20001516:	4140                	lw	s0,4(a0)
20001518:	c00d                	beqz	s0,2000153a <snprintf_sink+0x2c>
2000151a:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
2000151c:	00c46363          	bltu	s0,a2,20001522 <snprintf_sink+0x14>
20001520:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20001522:	4088                	lw	a0,0(s1)
20001524:	8622                	mv	a2,s0
20001526:	97eff0ef          	jal	ra,200006a4 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000152a:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
2000152c:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000152e:	9522                	add	a0,a0,s0
20001530:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001532:	40858533          	sub	a0,a1,s0
20001536:	c0c8                	sw	a0,4(s1)
20001538:	a011                	j	2000153c <snprintf_sink+0x2e>
2000153a:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
2000153c:	8522                	mv	a0,s0
2000153e:	4492                	lw	s1,4(sp)
20001540:	4422                	lw	s0,8(sp)
20001542:	40b2                	lw	ra,12(sp)
20001544:	0141                	addi	sp,sp,16
20001546:	8082                	ret

20001548 <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001548:	1101                	addi	sp,sp,-32
2000154a:	c206                	sw	ra,4(sp)
2000154c:	ce46                	sw	a7,28(sp)
2000154e:	cc42                	sw	a6,24(sp)
20001550:	ca3e                	sw	a5,20(sp)
20001552:	c83a                	sw	a4,16(sp)
20001554:	c636                	sw	a3,12(sp)
20001556:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001558:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
2000155a:	3169                	jal	200011e4 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
2000155c:	4092                	lw	ra,4(sp)
2000155e:	6105                	addi	sp,sp,32
20001560:	8082                	ret

20001562 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001562:	7139                	addi	sp,sp,-64
20001564:	de06                	sw	ra,60(sp)
20001566:	dc22                	sw	s0,56(sp)
20001568:	da26                	sw	s1,52(sp)
2000156a:	d84a                	sw	s2,48(sp)
2000156c:	d64e                	sw	s3,44(sp)
2000156e:	892e                	mv	s2,a1
20001570:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001572:	ca05                	beqz	a2,200015a2 <write_digits+0x40>
20001574:	4501                	li	a0,0
20001576:	02b10813          	addi	a6,sp,43
2000157a:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
2000157c:	02e65633          	divu	a2,a2,a4
20001580:	02e60433          	mul	s0,a2,a4
20001584:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001588:	943e                	add	s0,s0,a5
2000158a:	00040403          	lb	s0,0(s0)
2000158e:	00a805b3          	add	a1,a6,a0
20001592:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001596:	157d                	addi	a0,a0,-1
20001598:	fee4f1e3          	bgeu	s1,a4,2000157a <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
2000159c:	40a00633          	neg	a2,a0
200015a0:	a011                	j	200015a4 <write_digits+0x42>
200015a2:	4601                	li	a2,0
200015a4:	4485                	li	s1,1
200015a6:	c291                	beqz	a3,200015aa <write_digits+0x48>
200015a8:	84b6                	mv	s1,a3
200015aa:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
200015ae:	00a4e463          	bltu	s1,a0,200015b6 <write_digits+0x54>
200015b2:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200015b6:	02967063          	bgeu	a2,s1,200015d6 <write_digits+0x74>
200015ba:	0068                	addi	a0,sp,12
200015bc:	8d05                	sub	a0,a0,s1
200015be:	02050513          	addi	a0,a0,32
200015c2:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
200015c6:	03000593          	li	a1,48
200015ca:	8622                	mv	a2,s0
200015cc:	8eeff0ef          	jal	ra,200006ba <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200015d0:	147d                	addi	s0,s0,-1
200015d2:	fc7d                	bnez	s0,200015d0 <write_digits+0x6e>
200015d4:	8626                	mv	a2,s1
200015d6:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
200015d8:	8d11                	sub	a0,a0,a2
200015da:	02050593          	addi	a1,a0,32
200015de:	854e                	mv	a0,s3
200015e0:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200015e2:	59b2                	lw	s3,44(sp)
200015e4:	5942                	lw	s2,48(sp)
200015e6:	54d2                	lw	s1,52(sp)
200015e8:	5462                	lw	s0,56(sp)
200015ea:	50f2                	lw	ra,60(sp)
200015ec:	6121                	addi	sp,sp,64
200015ee:	8082                	ret

200015f0 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
200015f0:	c581                	beqz	a1,200015f8 <dif_uart_init+0x8>
200015f2:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200015f4:	c188                	sw	a0,0(a1)
200015f6:	a011                	j	200015fa <dif_uart_init+0xa>
200015f8:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200015fa:	8532                	mv	a0,a2
200015fc:	8082                	ret

200015fe <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200015fe:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001600:	c606                	sw	ra,12(sp)
20001602:	c422                	sw	s0,8(sp)
20001604:	c226                	sw	s1,4(sp)
20001606:	c92d                	beqz	a0,20001678 <dif_uart_configure+0x7a>
20001608:	84ae                	mv	s1,a1
2000160a:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
2000160c:	418c                	lw	a1,0(a1)
2000160e:	450d                	li	a0,3
20001610:	c5ad                	beqz	a1,2000167a <dif_uart_configure+0x7c>
20001612:	40d0                	lw	a2,4(s1)
20001614:	c23d                	beqz	a2,2000167a <dif_uart_configure+0x7c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20001616:	01459513          	slli	a0,a1,0x14
2000161a:	81b1                	srli	a1,a1,0xc
2000161c:	4681                	li	a3,0
2000161e:	2e61                	jal	200019b6 <__udivdi3>
20001620:	6641                	lui	a2,0x10
20001622:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20001624:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20001626:	8d31                	xor	a0,a0,a2
20001628:	8dc9                	or	a1,a1,a0
2000162a:	4511                	li	a0,4
2000162c:	e5b9                	bnez	a1,2000167a <dif_uart_configure+0x7c>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
2000162e:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001630:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20001634:	4008                	lw	a0,0(s0)
20001636:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001638:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
2000163a:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000163c:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001640:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001642:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001646:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001648:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
2000164c:	4008                	lw	a0,0(s0)
2000164e:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001650:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20001652:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001654:	01061513          	slli	a0,a2,0x10
20001658:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
2000165c:	c291                	beqz	a3,20001660 <dif_uart_configure+0x62>
2000165e:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001660:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001662:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001664:	e219                	bnez	a2,2000166a <dif_uart_configure+0x6c>
20001666:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
2000166a:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000166c:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000166e:	400c                	lw	a1,0(s0)
20001670:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001672:	0005a223          	sw	zero,4(a1)
20001676:	a011                	j	2000167a <dif_uart_configure+0x7c>
20001678:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
2000167a:	4492                	lw	s1,4(sp)
2000167c:	4422                	lw	s0,8(sp)
2000167e:	40b2                	lw	ra,12(sp)
20001680:	0141                	addi	sp,sp,16
20001682:	8082                	ret

20001684 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001684:	1141                	addi	sp,sp,-16
20001686:	c606                	sw	ra,12(sp)
20001688:	c422                	sw	s0,8(sp)
2000168a:	c226                	sw	s1,4(sp)
2000168c:	84aa                	mv	s1,a0
2000168e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001690:	c09d                	beqz	s1,200016b6 <dif_uart_irq_is_pending+0x32>
20001692:	8432                	mv	s0,a2
20001694:	c20d                	beqz	a2,200016b6 <dif_uart_irq_is_pending+0x32>
20001696:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001698:	852e                	mv	a0,a1
2000169a:	85b2                	mv	a1,a2
2000169c:	2015                	jal	200016c0 <uart_irq_offset_get>
2000169e:	85aa                	mv	a1,a0
200016a0:	4505                	li	a0,1
200016a2:	c991                	beqz	a1,200016b6 <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
200016a4:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200016a6:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
200016a8:	4602                	lw	a2,0(sp)
200016aa:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200016ac:	00c5d5b3          	srl	a1,a1,a2
200016b0:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
200016b2:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
200016b6:	4492                	lw	s1,4(sp)
200016b8:	4422                	lw	s0,8(sp)
200016ba:	40b2                	lw	ra,12(sp)
200016bc:	0141                	addi	sp,sp,16
200016be:	8082                	ret

200016c0 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
200016c0:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
200016c2:	00a66563          	bltu	a2,a0,200016cc <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
200016c6:	c188                	sw	a0,0(a1)
200016c8:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
200016ca:	8082                	ret
200016cc:	4501                	li	a0,0
200016ce:	8082                	ret

200016d0 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
200016d0:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
200016d2:	c606                	sw	ra,12(sp)
200016d4:	c422                	sw	s0,8(sp)
200016d6:	c10d                	beqz	a0,200016f8 <dif_uart_irq_acknowledge+0x28>
200016d8:	842a                	mv	s0,a0
200016da:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200016dc:	852e                	mv	a0,a1
200016de:	85b2                	mv	a1,a2
200016e0:	37c5                	jal	200016c0 <uart_irq_offset_get>
200016e2:	85aa                	mv	a1,a0
200016e4:	4505                	li	a0,1
200016e6:	c991                	beqz	a1,200016fa <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200016e8:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
200016ea:	4010                	lw	a2,0(s0)
200016ec:	4501                	li	a0,0
200016ee:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200016f0:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200016f4:	c20c                	sw	a1,0(a2)
200016f6:	a011                	j	200016fa <dif_uart_irq_acknowledge+0x2a>
200016f8:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
200016fa:	4422                	lw	s0,8(sp)
200016fc:	40b2                	lw	ra,12(sp)
200016fe:	0141                	addi	sp,sp,16
20001700:	8082                	ret

20001702 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001702:	c911                	beqz	a0,20001716 <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001704:	c581                	beqz	a1,2000170c <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001706:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001708:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
2000170a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000170c:	410c                	lw	a1,0(a0)
2000170e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001710:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001714:	8082                	ret
20001716:	4509                	li	a0,2
20001718:	8082                	ret

2000171a <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
2000171a:	862a                	mv	a2,a0
2000171c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
2000171e:	c611                	beqz	a2,2000172a <dif_uart_irq_restore_all+0x10>
20001720:	c589                	beqz	a1,2000172a <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001722:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001724:	4210                	lw	a2,0(a2)
20001726:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001728:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
2000172a:	8082                	ret

2000172c <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
2000172c:	1141                	addi	sp,sp,-16
2000172e:	c606                	sw	ra,12(sp)
20001730:	c422                	sw	s0,8(sp)
20001732:	c226                	sw	s1,4(sp)
20001734:	84aa                	mv	s1,a0
20001736:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20001738:	c485                	beqz	s1,20001760 <dif_uart_irq_get_enabled+0x34>
2000173a:	8432                	mv	s0,a2
2000173c:	c215                	beqz	a2,20001760 <dif_uart_irq_get_enabled+0x34>
2000173e:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001740:	852e                	mv	a0,a1
20001742:	85b2                	mv	a1,a2
20001744:	3fb5                	jal	200016c0 <uart_irq_offset_get>
20001746:	85aa                	mv	a1,a0
20001748:	4505                	li	a0,1
2000174a:	c999                	beqz	a1,20001760 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000174c:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000174e:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001750:	4602                	lw	a2,0(sp)
20001752:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001754:	00c5d5b3          	srl	a1,a1,a2
20001758:	8985                	andi	a1,a1,1
2000175a:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
2000175e:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001760:	4492                	lw	s1,4(sp)
20001762:	4422                	lw	s0,8(sp)
20001764:	40b2                	lw	ra,12(sp)
20001766:	0141                	addi	sp,sp,16
20001768:	8082                	ret

2000176a <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
2000176a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
2000176c:	c606                	sw	ra,12(sp)
2000176e:	c422                	sw	s0,8(sp)
20001770:	c226                	sw	s1,4(sp)
20001772:	c91d                	beqz	a0,200017a8 <dif_uart_irq_set_enabled+0x3e>
20001774:	8432                	mv	s0,a2
20001776:	84aa                	mv	s1,a0
20001778:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000177a:	852e                	mv	a0,a1
2000177c:	85b2                	mv	a1,a2
2000177e:	3789                	jal	200016c0 <uart_irq_offset_get>
20001780:	85aa                	mv	a1,a0
20001782:	4505                	li	a0,1
20001784:	c19d                	beqz	a1,200017aa <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001786:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001788:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
2000178a:	4682                	lw	a3,0(sp)
2000178c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
2000178e:	00143713          	seqz	a4,s0
20001792:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001794:	00d797b3          	sll	a5,a5,a3
20001798:	fff7c793          	not	a5,a5
2000179c:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000179e:	00d716b3          	sll	a3,a4,a3
200017a2:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017a4:	c1d0                	sw	a2,4(a1)
200017a6:	a011                	j	200017aa <dif_uart_irq_set_enabled+0x40>
200017a8:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200017aa:	4492                	lw	s1,4(sp)
200017ac:	4422                	lw	s0,8(sp)
200017ae:	40b2                	lw	ra,12(sp)
200017b0:	0141                	addi	sp,sp,16
200017b2:	8082                	ret

200017b4 <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200017b4:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200017b6:	c606                	sw	ra,12(sp)
200017b8:	c422                	sw	s0,8(sp)
200017ba:	c10d                	beqz	a0,200017dc <dif_uart_irq_force+0x28>
200017bc:	842a                	mv	s0,a0
200017be:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200017c0:	852e                	mv	a0,a1
200017c2:	85b2                	mv	a1,a2
200017c4:	3df5                	jal	200016c0 <uart_irq_offset_get>
200017c6:	85aa                	mv	a1,a0
200017c8:	4505                	li	a0,1
200017ca:	c991                	beqz	a1,200017de <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200017cc:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
200017ce:	4010                	lw	a2,0(s0)
200017d0:	4501                	li	a0,0
200017d2:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200017d4:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200017d8:	c60c                	sw	a1,8(a2)
200017da:	a011                	j	200017de <dif_uart_irq_force+0x2a>
200017dc:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
200017de:	4422                	lw	s0,8(sp)
200017e0:	40b2                	lw	ra,12(sp)
200017e2:	0141                	addi	sp,sp,16
200017e4:	8082                	ret

200017e6 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200017e6:	cd09                	beqz	a0,20001800 <dif_uart_watermark_rx_set+0x1a>
200017e8:	4691                	li	a3,4
200017ea:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200017ec:	00b6eb63          	bltu	a3,a1,20001802 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200017f0:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200017f2:	4d54                	lw	a3,28(a0)
200017f4:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
200017f6:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200017f8:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200017fa:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200017fc:	cd4c                	sw	a1,28(a0)
200017fe:	a011                	j	20001802 <dif_uart_watermark_rx_set+0x1c>
20001800:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001802:	8532                	mv	a0,a2
20001804:	8082                	ret

20001806 <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001806:	cd11                	beqz	a0,20001822 <dif_uart_watermark_tx_set+0x1c>
20001808:	468d                	li	a3,3
2000180a:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
2000180c:	00b6ec63          	bltu	a3,a1,20001824 <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001810:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001812:	4d54                	lw	a3,28(a0)
20001814:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20001816:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001818:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000181c:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000181e:	cd4c                	sw	a1,28(a0)
20001820:	a011                	j	20001824 <dif_uart_watermark_tx_set+0x1e>
20001822:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001824:	8532                	mv	a0,a2
20001826:	8082                	ret

20001828 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001828:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
2000182a:	c51d                	beqz	a0,20001858 <dif_uart_bytes_send+0x30>
2000182c:	c595                	beqz	a1,20001858 <dif_uart_bytes_send+0x30>
2000182e:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001830:	c20d                	beqz	a2,20001852 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001832:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001836:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000183a:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000183c:	eb19                	bnez	a4,20001852 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
2000183e:	00f58733          	add	a4,a1,a5
20001842:	00074703          	lbu	a4,0(a4) # 2000 <_stack_size>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001846:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001848:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000184c:	fef613e3          	bne	a2,a5,20001832 <dif_uart_bytes_send+0xa>
20001850:	87b2                	mv	a5,a2
20001852:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001854:	c291                	beqz	a3,20001858 <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001856:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001858:	853a                	mv	a0,a4
2000185a:	8082                	ret

2000185c <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
2000185c:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
2000185e:	c515                	beqz	a0,2000188a <dif_uart_bytes_receive+0x2e>
20001860:	c60d                	beqz	a2,2000188a <dif_uart_bytes_receive+0x2e>
20001862:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001864:	cd99                	beqz	a1,20001882 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001866:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001868:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000186a:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000186e:	eb91                	bnez	a5,20001882 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001870:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001872:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001876:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001878:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
2000187c:	ff0595e3          	bne	a1,a6,20001866 <dif_uart_bytes_receive+0xa>
20001880:	882e                	mv	a6,a1
20001882:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001884:	c299                	beqz	a3,2000188a <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001886:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
2000188a:	853a                	mv	a0,a4
2000188c:	8082                	ret

2000188e <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
2000188e:	cd19                	beqz	a0,200018ac <dif_uart_byte_send_polled+0x1e>
20001890:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001892:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001894:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001896:	fef5                	bnez	a3,20001892 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001898:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000189a:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000189c:	e299                	bnez	a3,200018a2 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000189e:	ce0c                	sw	a1,24(a2)
200018a0:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018a2:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200018a4:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200018a6:	dd75                	beqz	a0,200018a2 <dif_uart_byte_send_polled+0x14>
200018a8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
200018aa:	8082                	ret
200018ac:	4509                	li	a0,2
200018ae:	8082                	ret

200018b0 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
200018b0:	862a                	mv	a2,a0
200018b2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
200018b4:	c205                	beqz	a2,200018d4 <dif_uart_byte_receive_polled+0x24>
200018b6:	cd99                	beqz	a1,200018d4 <dif_uart_byte_receive_polled+0x24>
200018b8:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018ba:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200018bc:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200018c0:	fd6d                	bnez	a0,200018ba <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018c2:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
200018c4:	02057693          	andi	a3,a0,32
200018c8:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200018ca:	e689                	bnez	a3,200018d4 <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018cc:	4a50                	lw	a2,20(a2)
200018ce:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
200018d0:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
200018d4:	8082                	ret

200018d6 <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200018d6:	862a                	mv	a2,a0
200018d8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
200018da:	ca09                	beqz	a2,200018ec <dif_uart_rx_bytes_available+0x16>
200018dc:	c981                	beqz	a1,200018ec <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200018de:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018e0:	5110                	lw	a2,32(a0)
200018e2:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200018e4:	8241                	srli	a2,a2,0x10
200018e6:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
200018ea:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
200018ec:	8082                	ret

200018ee <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
200018ee:	862a                	mv	a2,a0
200018f0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
200018f2:	ce01                	beqz	a2,2000190a <dif_uart_tx_bytes_available+0x1c>
200018f4:	c999                	beqz	a1,2000190a <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
200018f6:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200018f8:	5110                	lw	a2,32(a0)
200018fa:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
200018fc:	03f67613          	andi	a2,a2,63
20001900:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001904:	40c68633          	sub	a2,a3,a2
20001908:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
2000190a:	8082                	ret

2000190c <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
2000190c:	c11d                	beqz	a0,20001932 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000190e:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001910:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001912:	ffd5f693          	andi	a3,a1,-3
20001916:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
2000191a:	fff58713          	addi	a4,a1,-1
2000191e:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001920:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001924:	00f77463          	bgeu	a4,a5,2000192c <dif_uart_fifo_reset+0x20>
20001928:	0025e593          	ori	a1,a1,2
2000192c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000192e:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001930:	8082                	ret
20001932:	4509                	li	a0,2
20001934:	8082                	ret

20001936 <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001936:	c515                	beqz	a0,20001962 <dif_uart_loopback_set+0x2c>
20001938:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
2000193a:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
2000193c:	0015b593          	seqz	a1,a1
20001940:	4715                	li	a4,5
20001942:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001946:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001948:	00163613          	seqz	a2,a2
2000194c:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000194e:	00b797b3          	sll	a5,a5,a1
20001952:	fff7c793          	not	a5,a5
20001956:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001958:	00b615b3          	sll	a1,a2,a1
2000195c:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000195e:	c54c                	sw	a1,12(a0)
20001960:	a011                	j	20001964 <dif_uart_loopback_set+0x2e>
20001962:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001964:	8536                	mv	a0,a3
20001966:	8082                	ret

20001968 <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001968:	862a                	mv	a2,a0
2000196a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
2000196c:	ca11                	beqz	a2,20001980 <dif_uart_enable_rx_timeout+0x18>
2000196e:	0185d693          	srli	a3,a1,0x18
20001972:	e699                	bnez	a3,20001980 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001974:	4210                	lw	a2,0(a2)
20001976:	4501                	li	a0,0
20001978:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000197c:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000197e:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001980:	8082                	ret

20001982 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001982:	c511                	beqz	a0,2000198e <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001984:	410c                	lw	a1,0(a0)
20001986:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001988:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
2000198c:	8082                	ret
2000198e:	4509                	li	a0,2
20001990:	8082                	ret

20001992 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001992:	86aa                	mv	a3,a0
20001994:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001996:	ce99                	beqz	a3,200019b4 <dif_uart_get_rx_timeout+0x22>
20001998:	cd91                	beqz	a1,200019b4 <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
2000199a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000199c:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
2000199e:	fff6c513          	not	a0,a3
200019a2:	817d                	srli	a0,a0,0x1f
200019a4:	c188                	sw	a0,0(a1)
200019a6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
200019a8:	c611                	beqz	a2,200019b4 <dif_uart_get_rx_timeout+0x22>
200019aa:	010005b7          	lui	a1,0x1000
200019ae:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
200019b0:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
200019b2:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
200019b4:	8082                	ret

200019b6 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
200019b6:	88aa                	mv	a7,a0
200019b8:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
200019ba:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
200019bc:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
200019be:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
200019c0:	20069963          	bnez	a3,20001bd2 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
200019c4:	200026b7          	lui	a3,0x20002
200019c8:	03068693          	addi	a3,a3,48 # 20002030 <__clz_tab>
200019cc:	0cc5f063          	bgeu	a1,a2,20001a8c <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200019d0:	6741                	lui	a4,0x10
200019d2:	0ae67663          	bgeu	a2,a4,20001a7e <__udivdi3+0xc8>
200019d6:	0ff00713          	li	a4,255
200019da:	00c73733          	sltu	a4,a4,a2
200019de:	070e                	slli	a4,a4,0x3
200019e0:	00e65533          	srl	a0,a2,a4
200019e4:	96aa                	add	a3,a3,a0
200019e6:	0006c683          	lbu	a3,0(a3)
200019ea:	02000513          	li	a0,32
200019ee:	9736                	add	a4,a4,a3
200019f0:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
200019f4:	00e50c63          	beq	a0,a4,20001a0c <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
200019f8:	00d797b3          	sll	a5,a5,a3
200019fc:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20001a00:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20001a04:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20001a08:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20001a0c:	01085893          	srli	a7,a6,0x10
20001a10:	0315d7b3          	divu	a5,a1,a7
20001a14:	01081613          	slli	a2,a6,0x10
20001a18:	8241                	srli	a2,a2,0x10
20001a1a:	01035713          	srli	a4,t1,0x10
20001a1e:	0315f6b3          	remu	a3,a1,a7
20001a22:	853e                	mv	a0,a5
20001a24:	02f605b3          	mul	a1,a2,a5
20001a28:	06c2                	slli	a3,a3,0x10
20001a2a:	8f55                	or	a4,a4,a3
20001a2c:	00b77c63          	bgeu	a4,a1,20001a44 <__udivdi3+0x8e>
20001a30:	9742                	add	a4,a4,a6
20001a32:	fff78513          	addi	a0,a5,-1
20001a36:	01076763          	bltu	a4,a6,20001a44 <__udivdi3+0x8e>
20001a3a:	00b77563          	bgeu	a4,a1,20001a44 <__udivdi3+0x8e>
20001a3e:	ffe78513          	addi	a0,a5,-2
20001a42:	9742                	add	a4,a4,a6
20001a44:	8f0d                	sub	a4,a4,a1
20001a46:	031777b3          	remu	a5,a4,a7
20001a4a:	0342                	slli	t1,t1,0x10
20001a4c:	01035313          	srli	t1,t1,0x10
20001a50:	03175733          	divu	a4,a4,a7
20001a54:	07c2                	slli	a5,a5,0x10
20001a56:	0067e333          	or	t1,a5,t1
20001a5a:	02e606b3          	mul	a3,a2,a4
20001a5e:	863a                	mv	a2,a4
20001a60:	00d37b63          	bgeu	t1,a3,20001a76 <__udivdi3+0xc0>
20001a64:	9342                	add	t1,t1,a6
20001a66:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001a6a:	01036663          	bltu	t1,a6,20001a76 <__udivdi3+0xc0>
20001a6e:	00d37463          	bgeu	t1,a3,20001a76 <__udivdi3+0xc0>
20001a72:	ffe70613          	addi	a2,a4,-2
20001a76:	0542                	slli	a0,a0,0x10
20001a78:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001a7a:	4581                	li	a1,0
20001a7c:	a85d                	j	20001b32 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20001a7e:	01000537          	lui	a0,0x1000
20001a82:	4741                	li	a4,16
20001a84:	f4a66ee3          	bltu	a2,a0,200019e0 <__udivdi3+0x2a>
20001a88:	4761                	li	a4,24
20001a8a:	bf99                	j	200019e0 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20001a8c:	e601                	bnez	a2,20001a94 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20001a8e:	4705                	li	a4,1
20001a90:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001a94:	6741                	lui	a4,0x10
20001a96:	08e87f63          	bgeu	a6,a4,20001b34 <__udivdi3+0x17e>
20001a9a:	0ff00713          	li	a4,255
20001a9e:	01077363          	bgeu	a4,a6,20001aa4 <__udivdi3+0xee>
20001aa2:	4521                	li	a0,8
20001aa4:	00a85733          	srl	a4,a6,a0
20001aa8:	96ba                	add	a3,a3,a4
20001aaa:	0006c703          	lbu	a4,0(a3)
20001aae:	02000613          	li	a2,32
20001ab2:	972a                	add	a4,a4,a0
20001ab4:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20001ab8:	08e61563          	bne	a2,a4,20001b42 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20001abc:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20001ac0:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20001ac2:	01085893          	srli	a7,a6,0x10
20001ac6:	01081613          	slli	a2,a6,0x10
20001aca:	8241                	srli	a2,a2,0x10
20001acc:	01035713          	srli	a4,t1,0x10
20001ad0:	0317f6b3          	remu	a3,a5,a7
20001ad4:	0317d7b3          	divu	a5,a5,a7
20001ad8:	06c2                	slli	a3,a3,0x10
20001ada:	8f55                	or	a4,a4,a3
20001adc:	02f60e33          	mul	t3,a2,a5
20001ae0:	853e                	mv	a0,a5
20001ae2:	01c77c63          	bgeu	a4,t3,20001afa <__udivdi3+0x144>
20001ae6:	9742                	add	a4,a4,a6
20001ae8:	fff78513          	addi	a0,a5,-1
20001aec:	01076763          	bltu	a4,a6,20001afa <__udivdi3+0x144>
20001af0:	01c77563          	bgeu	a4,t3,20001afa <__udivdi3+0x144>
20001af4:	ffe78513          	addi	a0,a5,-2
20001af8:	9742                	add	a4,a4,a6
20001afa:	41c70733          	sub	a4,a4,t3
20001afe:	031777b3          	remu	a5,a4,a7
20001b02:	0342                	slli	t1,t1,0x10
20001b04:	01035313          	srli	t1,t1,0x10
20001b08:	03175733          	divu	a4,a4,a7
20001b0c:	07c2                	slli	a5,a5,0x10
20001b0e:	0067e333          	or	t1,a5,t1
20001b12:	02e606b3          	mul	a3,a2,a4
20001b16:	863a                	mv	a2,a4
20001b18:	00d37b63          	bgeu	t1,a3,20001b2e <__udivdi3+0x178>
20001b1c:	9342                	add	t1,t1,a6
20001b1e:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20001b22:	01036663          	bltu	t1,a6,20001b2e <__udivdi3+0x178>
20001b26:	00d37463          	bgeu	t1,a3,20001b2e <__udivdi3+0x178>
20001b2a:	ffe70613          	addi	a2,a4,-2
20001b2e:	0542                	slli	a0,a0,0x10
20001b30:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20001b32:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20001b34:	01000737          	lui	a4,0x1000
20001b38:	4541                	li	a0,16
20001b3a:	f6e865e3          	bltu	a6,a4,20001aa4 <__udivdi3+0xee>
20001b3e:	4561                	li	a0,24
20001b40:	b795                	j	20001aa4 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20001b42:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20001b46:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20001b4a:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001b4e:	00d797b3          	sll	a5,a5,a3
20001b52:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001b56:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20001b5a:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20001b5e:	0315f733          	remu	a4,a1,a7
20001b62:	01081793          	slli	a5,a6,0x10
20001b66:	83c1                	srli	a5,a5,0x10
20001b68:	01065513          	srli	a0,a2,0x10
20001b6c:	0315d5b3          	divu	a1,a1,a7
20001b70:	0742                	slli	a4,a4,0x10
20001b72:	8f49                	or	a4,a4,a0
20001b74:	02b786b3          	mul	a3,a5,a1
20001b78:	852e                	mv	a0,a1
20001b7a:	00d77c63          	bgeu	a4,a3,20001b92 <__udivdi3+0x1dc>
20001b7e:	9742                	add	a4,a4,a6
20001b80:	fff58513          	addi	a0,a1,-1 # ffffff <wait_for_dai.kLogFields.15+0xfefebf>
20001b84:	01076763          	bltu	a4,a6,20001b92 <__udivdi3+0x1dc>
20001b88:	00d77563          	bgeu	a4,a3,20001b92 <__udivdi3+0x1dc>
20001b8c:	ffe58513          	addi	a0,a1,-2
20001b90:	9742                	add	a4,a4,a6
20001b92:	40d706b3          	sub	a3,a4,a3
20001b96:	0316f733          	remu	a4,a3,a7
20001b9a:	0642                	slli	a2,a2,0x10
20001b9c:	8241                	srli	a2,a2,0x10
20001b9e:	0316d6b3          	divu	a3,a3,a7
20001ba2:	0742                	slli	a4,a4,0x10
20001ba4:	02d788b3          	mul	a7,a5,a3
20001ba8:	00c767b3          	or	a5,a4,a2
20001bac:	8736                	mv	a4,a3
20001bae:	0117fc63          	bgeu	a5,a7,20001bc6 <__udivdi3+0x210>
20001bb2:	97c2                	add	a5,a5,a6
20001bb4:	fff68713          	addi	a4,a3,-1
20001bb8:	0107e763          	bltu	a5,a6,20001bc6 <__udivdi3+0x210>
20001bbc:	0117f563          	bgeu	a5,a7,20001bc6 <__udivdi3+0x210>
20001bc0:	ffe68713          	addi	a4,a3,-2
20001bc4:	97c2                	add	a5,a5,a6
20001bc6:	01051593          	slli	a1,a0,0x10
20001bca:	411787b3          	sub	a5,a5,a7
20001bce:	8dd9                	or	a1,a1,a4
20001bd0:	bdcd                	j	20001ac2 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20001bd2:	14d5e263          	bltu	a1,a3,20001d16 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001bd6:	6741                	lui	a4,0x10
20001bd8:	02e6ff63          	bgeu	a3,a4,20001c16 <__udivdi3+0x260>
20001bdc:	0ff00713          	li	a4,255
20001be0:	00d735b3          	sltu	a1,a4,a3
20001be4:	058e                	slli	a1,a1,0x3
20001be6:	20002737          	lui	a4,0x20002
20001bea:	00b6d533          	srl	a0,a3,a1
20001bee:	03070713          	addi	a4,a4,48 # 20002030 <__clz_tab>
20001bf2:	972a                	add	a4,a4,a0
20001bf4:	00074703          	lbu	a4,0(a4)
20001bf8:	02000513          	li	a0,32
20001bfc:	972e                	add	a4,a4,a1
20001bfe:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20001c02:	02e51163          	bne	a0,a4,20001c24 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20001c06:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20001c08:	f2f6e5e3          	bltu	a3,a5,20001b32 <__udivdi3+0x17c>
20001c0c:	00c8b533          	sltu	a0,a7,a2
20001c10:	00154513          	xori	a0,a0,1
20001c14:	bf39                	j	20001b32 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20001c16:	01000737          	lui	a4,0x1000
20001c1a:	45c1                	li	a1,16
20001c1c:	fce6e5e3          	bltu	a3,a4,20001be6 <__udivdi3+0x230>
20001c20:	45e1                	li	a1,24
20001c22:	b7d1                	j	20001be6 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20001c24:	00e65333          	srl	t1,a2,a4
20001c28:	00b696b3          	sll	a3,a3,a1
20001c2c:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c30:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20001c34:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20001c38:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c3c:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20001c40:	00b797b3          	sll	a5,a5,a1
20001c44:	00e8d733          	srl	a4,a7,a4
20001c48:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001c4c:	01031793          	slli	a5,t1,0x10
20001c50:	83c1                	srli	a5,a5,0x10
20001c52:	01085713          	srli	a4,a6,0x10
20001c56:	02a65633          	divu	a2,a2,a0
20001c5a:	06c2                	slli	a3,a3,0x10
20001c5c:	8f55                	or	a4,a4,a3
20001c5e:	02c78f33          	mul	t5,a5,a2
20001c62:	8e32                	mv	t3,a2
20001c64:	01e77c63          	bgeu	a4,t5,20001c7c <__udivdi3+0x2c6>
20001c68:	971a                	add	a4,a4,t1
20001c6a:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
20001c6e:	00676763          	bltu	a4,t1,20001c7c <__udivdi3+0x2c6>
20001c72:	01e77563          	bgeu	a4,t5,20001c7c <__udivdi3+0x2c6>
20001c76:	ffe60e13          	addi	t3,a2,-2
20001c7a:	971a                	add	a4,a4,t1
20001c7c:	41e70733          	sub	a4,a4,t5
20001c80:	02a776b3          	remu	a3,a4,a0
20001c84:	02a75733          	divu	a4,a4,a0
20001c88:	06c2                	slli	a3,a3,0x10
20001c8a:	02e78633          	mul	a2,a5,a4
20001c8e:	01081793          	slli	a5,a6,0x10
20001c92:	83c1                	srli	a5,a5,0x10
20001c94:	8fd5                	or	a5,a5,a3
20001c96:	86ba                	mv	a3,a4
20001c98:	00c7fc63          	bgeu	a5,a2,20001cb0 <__udivdi3+0x2fa>
20001c9c:	979a                	add	a5,a5,t1
20001c9e:	fff70693          	addi	a3,a4,-1 # ffffff <wait_for_dai.kLogFields.15+0xfefebf>
20001ca2:	0067e763          	bltu	a5,t1,20001cb0 <__udivdi3+0x2fa>
20001ca6:	00c7f563          	bgeu	a5,a2,20001cb0 <__udivdi3+0x2fa>
20001caa:	ffe70693          	addi	a3,a4,-2
20001cae:	979a                	add	a5,a5,t1
20001cb0:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cb4:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cb6:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cb8:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20001cbc:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20001cc0:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cc2:	00def6b3          	and	a3,t4,a3
20001cc6:	01055613          	srli	a2,a0,0x10
20001cca:	010ede93          	srli	t4,t4,0x10
20001cce:	02d80333          	mul	t1,a6,a3
20001cd2:	02d606b3          	mul	a3,a2,a3
20001cd6:	01035713          	srli	a4,t1,0x10
20001cda:	03d80833          	mul	a6,a6,t4
20001cde:	9836                	add	a6,a6,a3
20001ce0:	9742                	add	a4,a4,a6
20001ce2:	03d60633          	mul	a2,a2,t4
20001ce6:	00d77363          	bgeu	a4,a3,20001cec <__udivdi3+0x336>
20001cea:	9672                	add	a2,a2,t3
20001cec:	01075693          	srli	a3,a4,0x10
20001cf0:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001cf2:	02c7e063          	bltu	a5,a2,20001d12 <__udivdi3+0x35c>
20001cf6:	d8c792e3          	bne	a5,a2,20001a7a <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001cfa:	67c1                	lui	a5,0x10
20001cfc:	17fd                	addi	a5,a5,-1
20001cfe:	8f7d                	and	a4,a4,a5
20001d00:	0742                	slli	a4,a4,0x10
20001d02:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20001d06:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20001d0a:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20001d0c:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20001d0e:	e2e8f2e3          	bgeu	a7,a4,20001b32 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20001d12:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20001d14:	b39d                	j	20001a7a <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20001d16:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20001d18:	4501                	li	a0,0
20001d1a:	bd21                	j	20001b32 <__udivdi3+0x17c>
