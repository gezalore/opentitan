
sw/device/examples/hello_world/hello_world_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000de  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00002310  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000e7a  20002490  20002490  00003490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000008  10000000  2000330c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000014  10000008  20003314  00005008  2**2
                  ALLOC
  8 .logs.fields  000002bc  00010000  00010000  00005008  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000aa21  00000000  00000000  000052ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a66  00000000  00000000  0000fd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  00011771  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005688  00000000  00000000  00011809  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005f43  00000000  00000000  00016e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000410  00000000  00000000  0001cdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004907  00000000  00000000  0001d1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000aa0  00000000  00000000  00021aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	fe850513          	addi	a0,a0,-24 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	f0000597          	auipc	a1,0xf0000
2000002c:	ff458593          	addi	a1,a1,-12 # 1000001c <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
20000030:	2891                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
20000032:	f001e517          	auipc	a0,0xf001e
20000036:	fce50513          	addi	a0,a0,-50 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
2000003a:	f0020597          	auipc	a1,0xf0020
2000003e:	fc658593          	addi	a1,a1,-58 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
20000042:	2089                	jal	20000084 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000044:	f0000517          	auipc	a0,0xf0000
20000048:	fbc50513          	addi	a0,a0,-68 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
2000004c:	80818593          	addi	a1,gp,-2040 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
20000050:	00003617          	auipc	a2,0x3
20000054:	2bc60613          	addi	a2,a2,700 # 2000330c <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000058:	2881                	jal	200000a8 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
2000005a:	00000417          	auipc	s0,0x0
2000005e:	12640413          	addi	s0,s0,294 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
20000062:	00000497          	auipc	s1,0x0
20000066:	11e48493          	addi	s1,s1,286 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
2000006a:	00947863          	bgeu	s0,s1,2000007a <init_array_loop_end>

2000006e <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006e:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
20000072:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000074:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000076:	fe946ce3          	bltu	s0,s1,2000006e <init_array_loop>

2000007a <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
2000007a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
2000007c:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007e:	2209                	jal	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
20000080:	1e90006f          	j	20000a68 <abort>

20000084 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000084:	00b57e63          	bgeu	a0,a1,200000a0 <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000088:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
2000008c:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
20000090:	00029b63          	bnez	t0,200000a6 <L_clear_error>

20000094 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000094:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000098:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
2000009a:	feb56de3          	bltu	a0,a1,20000094 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009e:	8082                	ret

200000a0 <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
200000a0:	00b51363          	bne	a0,a1,200000a6 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a4:	8082                	ret

200000a6 <L_clear_error>:
	...

200000a8 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a8:	02b57963          	bgeu	a0,a1,200000da <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000ac:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000b0:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b4:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b8:	02029463          	bnez	t0,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000bc:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000c0:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c4:	0062ee63          	bltu	t0,t1,200000e0 <L_copy_error>

200000c8 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c8:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000cc:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ce:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000d2:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d4:	feb56ae3          	bltu	a0,a1,200000c8 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d8:	8082                	ret

200000da <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000da:	00b51363          	bne	a0,a1,200000e0 <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000de:	8082                	ret

200000e0 <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	2f50106f          	j	20001bf4 <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	4350106f          	j	20001d40 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	4810106f          	j	20001d9c <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	4cd0106f          	j	20001df8 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:23

static dif_gpio_t gpio;
static dif_spi_device_t spi;
static dif_uart_t uart;

int main(int argc, char **argv) {
20000180:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:24
  CHECK(
20000182:	d606                	sw	ra,44(sp)
20000184:	d422                	sw	s0,40(sp)
20000186:	d226                	sw	s1,36(sp)
20000188:	d04a                	sw	s2,32(sp)
2000018a:	ce4e                	sw	s3,28(sp)
2000018c:	cc52                	sw	s4,24(sp)
2000018e:	f0000597          	auipc	a1,0xf0000
20000192:	e7a58593          	addi	a1,a1,-390 # 10000008 <_data_end>
20000196:	40000537          	lui	a0,0x40000
2000019a:	64a010ef          	jal	ra,200017e4 <dif_uart_init>
2000019e:	00002497          	auipc	s1,0x2
200001a2:	61a48493          	addi	s1,s1,1562 # 200027b8 <kDeviceLogBypassUartAddress>
200001a6:	cd05                	beqz	a0,200001de <main+0x5e>
200001a8:	4088                	lw	a0,0(s1)
200001aa:	c909                	beqz	a0,200001bc <main+0x3c>
200001ac:	e0010517          	auipc	a0,0xe0010
200001b0:	e5450513          	addi	a0,a0,-428 # 10000 <_dv_log_offset>
200001b4:	4581                	li	a1,0
200001b6:	130010ef          	jal	ra,200012e6 <base_log_internal_dv>
200001ba:	a829                	j	200001d4 <main+0x54>
200001bc:	00002597          	auipc	a1,0x2
200001c0:	2d458593          	addi	a1,a1,724 # 20002490 <__udivdi3+0x366>
200001c4:	840a                	mv	s0,sp
200001c6:	4651                	li	a2,20
200001c8:	8522                	mv	a0,s0
200001ca:	0af000ef          	jal	ra,20000a78 <memcpy>
200001ce:	8522                	mv	a0,s0
200001d0:	06c010ef          	jal	ra,2000123c <base_log_internal_core>
200001d4:	6531                	lui	a0,0xc
200001d6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200001da:	4ef010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:30
      dif_uart_init(
          (dif_uart_params_t){
              .base_addr = mmio_region_from_addr(TOP_EARLGREY_UART0_BASE_ADDR),
          },
          &uart) == kDifUartOk);
  CHECK(dif_uart_configure(&uart, (dif_uart_config_t){
200001de:	00002517          	auipc	a0,0x2
200001e2:	5ca50513          	addi	a0,a0,1482 # 200027a8 <kUartBaudrate>
200001e6:	4108                	lw	a0,0(a0)
200001e8:	00002597          	auipc	a1,0x2
200001ec:	5b058593          	addi	a1,a1,1456 # 20002798 <kClockFreqPeripheralHz>
200001f0:	418c                	lw	a1,0(a1)
200001f2:	c02a                	sw	a0,0(sp)
200001f4:	c22e                	sw	a1,4(sp)
200001f6:	4505                	li	a0,1
200001f8:	c42a                	sw	a0,8(sp)
200001fa:	c62a                	sw	a0,12(sp)
200001fc:	f0000517          	auipc	a0,0xf0000
20000200:	e0c50513          	addi	a0,a0,-500 # 10000008 <_data_end>
20000204:	858a                	mv	a1,sp
20000206:	5ec010ef          	jal	ra,200017f2 <dif_uart_configure>
2000020a:	cd05                	beqz	a0,20000242 <main+0xc2>
2000020c:	4088                	lw	a0,0(s1)
2000020e:	c909                	beqz	a0,20000220 <main+0xa0>
20000210:	e0010517          	auipc	a0,0xe0010
20000214:	e0450513          	addi	a0,a0,-508 # 10014 <main.kLogFields.2>
20000218:	4581                	li	a1,0
2000021a:	0cc010ef          	jal	ra,200012e6 <base_log_internal_dv>
2000021e:	a829                	j	20000238 <main+0xb8>
20000220:	00002597          	auipc	a1,0x2
20000224:	28458593          	addi	a1,a1,644 # 200024a4 <__udivdi3+0x37a>
20000228:	840a                	mv	s0,sp
2000022a:	4651                	li	a2,20
2000022c:	8522                	mv	a0,s0
2000022e:	04b000ef          	jal	ra,20000a78 <memcpy>
20000232:	8522                	mv	a0,s0
20000234:	008010ef          	jal	ra,2000123c <base_log_internal_core>
20000238:	6531                	lui	a0,0xc
2000023a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000023e:	48b010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:36
                                      .baudrate = kUartBaudrate,
                                      .clk_freq_hz = kClockFreqPeripheralHz,
                                      .parity_enable = kDifUartToggleDisabled,
                                      .parity = kDifUartParityEven,
                                  }) == kDifUartConfigOk);
  base_uart_stdout(&uart);
20000242:	f0000517          	auipc	a0,0xf0000
20000246:	dc650513          	addi	a0,a0,-570 # 10000008 <_data_end>
2000024a:	0ee010ef          	jal	ra,20001338 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:38

  pinmux_init();
2000024e:	15f010ef          	jal	ra,20001bac <pinmux_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:40

  CHECK(dif_spi_device_init(
20000252:	f0000597          	auipc	a1,0xf0000
20000256:	dba58593          	addi	a1,a1,-582 # 1000000c <spi>
2000025a:	40050537          	lui	a0,0x40050
2000025e:	3c3000ef          	jal	ra,20000e20 <dif_spi_device_init>
20000262:	cd05                	beqz	a0,2000029a <main+0x11a>
20000264:	4088                	lw	a0,0(s1)
20000266:	c909                	beqz	a0,20000278 <main+0xf8>
20000268:	e0010517          	auipc	a0,0xe0010
2000026c:	dc050513          	addi	a0,a0,-576 # 10028 <main.kLogFields.5>
20000270:	4581                	li	a1,0
20000272:	074010ef          	jal	ra,200012e6 <base_log_internal_dv>
20000276:	a829                	j	20000290 <main+0x110>
20000278:	00002597          	auipc	a1,0x2
2000027c:	24058593          	addi	a1,a1,576 # 200024b8 <__udivdi3+0x38e>
20000280:	840a                	mv	s0,sp
20000282:	4651                	li	a2,20
20000284:	8522                	mv	a0,s0
20000286:	7f2000ef          	jal	ra,20000a78 <memcpy>
2000028a:	8522                	mv	a0,s0
2000028c:	7b1000ef          	jal	ra,2000123c <base_log_internal_core>
20000290:	6531                	lui	a0,0xc
20000292:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000296:	433010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:46
            (dif_spi_device_params_t){
                .base_addr =
                    mmio_region_from_addr(TOP_EARLGREY_SPI_DEVICE_BASE_ADDR),
            },
            &spi) == kDifSpiDeviceOk);
  CHECK(dif_spi_device_configure(
2000029a:	00002517          	auipc	a0,0x2
2000029e:	41250513          	addi	a0,a0,1042 # 200026ac <kDifSpiDeviceBufferLen>
200002a2:	00055503          	lhu	a0,0(a0)
200002a6:	8105                	srli	a0,a0,0x1
200002a8:	c002                	sw	zero,0(sp)
200002aa:	4585                	li	a1,1
200002ac:	c22e                	sw	a1,4(sp)
200002ae:	c402                	sw	zero,8(sp)
200002b0:	c602                	sw	zero,12(sp)
200002b2:	03f00593          	li	a1,63
200002b6:	00b10823          	sb	a1,16(sp)
200002ba:	00a11923          	sh	a0,18(sp)
200002be:	00a11a23          	sh	a0,20(sp)
200002c2:	f0000517          	auipc	a0,0xf0000
200002c6:	d4a50513          	addi	a0,a0,-694 # 1000000c <spi>
200002ca:	858a                	mv	a1,sp
200002cc:	367000ef          	jal	ra,20000e32 <dif_spi_device_configure>
200002d0:	cd05                	beqz	a0,20000308 <main+0x188>
200002d2:	4088                	lw	a0,0(s1)
200002d4:	c909                	beqz	a0,200002e6 <main+0x166>
200002d6:	e0010517          	auipc	a0,0xe0010
200002da:	d6650513          	addi	a0,a0,-666 # 1003c <main.kLogFields.8>
200002de:	4581                	li	a1,0
200002e0:	006010ef          	jal	ra,200012e6 <base_log_internal_dv>
200002e4:	a829                	j	200002fe <main+0x17e>
200002e6:	00002597          	auipc	a1,0x2
200002ea:	1e658593          	addi	a1,a1,486 # 200024cc <__udivdi3+0x3a2>
200002ee:	840a                	mv	s0,sp
200002f0:	4651                	li	a2,20
200002f2:	8522                	mv	a0,s0
200002f4:	784000ef          	jal	ra,20000a78 <memcpy>
200002f8:	8522                	mv	a0,s0
200002fa:	743000ef          	jal	ra,2000123c <base_log_internal_core>
200002fe:	6531                	lui	a0,0xc
20000300:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000304:	3c5010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:60
                  }) == kDifSpiDeviceOk);

  dif_gpio_params_t gpio_params = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_GPIO_BASE_ADDR),
  };
  CHECK(dif_gpio_init(gpio_params, &gpio) == kDifGpioOk);
20000308:	f0000597          	auipc	a1,0xf0000
2000030c:	d0c58593          	addi	a1,a1,-756 # 10000014 <gpio>
20000310:	40040537          	lui	a0,0x40040
20000314:	7f0000ef          	jal	ra,20000b04 <dif_gpio_init>
20000318:	cd05                	beqz	a0,20000350 <main+0x1d0>
2000031a:	4088                	lw	a0,0(s1)
2000031c:	c909                	beqz	a0,2000032e <main+0x1ae>
2000031e:	e0010517          	auipc	a0,0xe0010
20000322:	d3250513          	addi	a0,a0,-718 # 10050 <main.kLogFields.11>
20000326:	4581                	li	a1,0
20000328:	7bf000ef          	jal	ra,200012e6 <base_log_internal_dv>
2000032c:	a829                	j	20000346 <main+0x1c6>
2000032e:	00002597          	auipc	a1,0x2
20000332:	1b258593          	addi	a1,a1,434 # 200024e0 <__udivdi3+0x3b6>
20000336:	840a                	mv	s0,sp
20000338:	4651                	li	a2,20
2000033a:	8522                	mv	a0,s0
2000033c:	73c000ef          	jal	ra,20000a78 <memcpy>
20000340:	8522                	mv	a0,s0
20000342:	6fb000ef          	jal	ra,2000123c <base_log_internal_core>
20000346:	6531                	lui	a0,0xc
20000348:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000034c:	37d010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:62
  // Enable GPIO: 0-7 and 16 is input; 8-15 is output.
  CHECK(dif_gpio_output_set_enabled_all(&gpio, 0x0ff00) == kDifGpioOk);
20000350:	f0000517          	auipc	a0,0xf0000
20000354:	cc450513          	addi	a0,a0,-828 # 10000014 <gpio>
20000358:	65c1                	lui	a1,0x10
2000035a:	f0058593          	addi	a1,a1,-256 # ff00 <_stack_size+0xdf00>
2000035e:	229000ef          	jal	ra,20000d86 <dif_gpio_output_set_enabled_all>
20000362:	4084                	lw	s1,0(s1)
20000364:	c91d                	beqz	a0,2000039a <main+0x21a>
20000366:	c889                	beqz	s1,20000378 <main+0x1f8>
20000368:	e0010517          	auipc	a0,0xe0010
2000036c:	cfc50513          	addi	a0,a0,-772 # 10064 <main.kLogFields.14>
20000370:	4581                	li	a1,0
20000372:	775000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000376:	a829                	j	20000390 <main+0x210>
20000378:	00002597          	auipc	a1,0x2
2000037c:	17c58593          	addi	a1,a1,380 # 200024f4 <__udivdi3+0x3ca>
20000380:	840a                	mv	s0,sp
20000382:	4651                	li	a2,20
20000384:	8522                	mv	a0,s0
20000386:	6f2000ef          	jal	ra,20000a78 <memcpy>
2000038a:	8522                	mv	a0,s0
2000038c:	6b1000ef          	jal	ra,2000123c <base_log_internal_core>
20000390:	6531                	lui	a0,0xc
20000392:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000396:	333010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:65

  // Add DATE and TIME because I keep fooling myself with old versions
  LOG_INFO("Hello World!");
2000039a:	c085                	beqz	s1,200003ba <main+0x23a>
2000039c:	e0010517          	auipc	a0,0xe0010
200003a0:	cdc50513          	addi	a0,a0,-804 # 10078 <main.kLogFields.17>
200003a4:	4581                	li	a1,0
200003a6:	741000ef          	jal	ra,200012e6 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:66
  LOG_INFO("Built at: " __DATE__ ", " __TIME__);
200003aa:	e0010517          	auipc	a0,0xe0010
200003ae:	ce250513          	addi	a0,a0,-798 # 1008c <main.kLogFields.20>
200003b2:	4581                	li	a1,0
200003b4:	733000ef          	jal	ra,200012e6 <base_log_internal_dv>
200003b8:	a80d                	j	200003ea <main+0x26a>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:65
  LOG_INFO("Hello World!");
200003ba:	00002597          	auipc	a1,0x2
200003be:	14e58593          	addi	a1,a1,334 # 20002508 <__udivdi3+0x3de>
200003c2:	840a                	mv	s0,sp
200003c4:	4651                	li	a2,20
200003c6:	8522                	mv	a0,s0
200003c8:	6b0000ef          	jal	ra,20000a78 <memcpy>
200003cc:	8522                	mv	a0,s0
200003ce:	66f000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:66
  LOG_INFO("Built at: " __DATE__ ", " __TIME__);
200003d2:	00002597          	auipc	a1,0x2
200003d6:	14a58593          	addi	a1,a1,330 # 2000251c <__udivdi3+0x3f2>
200003da:	840a                	mv	s0,sp
200003dc:	4651                	li	a2,20
200003de:	8522                	mv	a0,s0
200003e0:	698000ef          	jal	ra,20000a78 <memcpy>
200003e4:	8522                	mv	a0,s0
200003e6:	657000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:68

  demo_gpio_startup(&gpio);
200003ea:	f0000417          	auipc	s0,0xf0000
200003ee:	c2a40413          	addi	s0,s0,-982 # 10000014 <gpio>
200003f2:	8522                	mv	a0,s0
200003f4:	22b1                	jal	20000540 <demo_gpio_startup>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:72

  // Now have UART <-> Buttons/LEDs demo
  // all LEDs off
  CHECK(dif_gpio_write_all(&gpio, 0x0000) == kDifGpioOk);
200003f6:	8522                	mv	a0,s0
200003f8:	4581                	li	a1,0
200003fa:	121000ef          	jal	ra,20000d1a <dif_gpio_write_all>
200003fe:	c91d                	beqz	a0,20000434 <main+0x2b4>
20000400:	c889                	beqz	s1,20000412 <main+0x292>
20000402:	e0010517          	auipc	a0,0xe0010
20000406:	c9e50513          	addi	a0,a0,-866 # 100a0 <main.kLogFields.23>
2000040a:	4581                	li	a1,0
2000040c:	6db000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000410:	a829                	j	2000042a <main+0x2aa>
20000412:	00002597          	auipc	a1,0x2
20000416:	11e58593          	addi	a1,a1,286 # 20002530 <__udivdi3+0x406>
2000041a:	840a                	mv	s0,sp
2000041c:	4651                	li	a2,20
2000041e:	8522                	mv	a0,s0
20000420:	658000ef          	jal	ra,20000a78 <memcpy>
20000424:	8522                	mv	a0,s0
20000426:	617000ef          	jal	ra,2000123c <base_log_internal_core>
2000042a:	6531                	lui	a0,0xc
2000042c:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000430:	299010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:73
  LOG_INFO("Try out the switches on the board");
20000434:	c8b9                	beqz	s1,2000048a <main+0x30a>
20000436:	e0010517          	auipc	a0,0xe0010
2000043a:	c7e50513          	addi	a0,a0,-898 # 100b4 <main.kLogFields.26>
2000043e:	4581                	li	a1,0
20000440:	6a7000ef          	jal	ra,200012e6 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:74
  LOG_INFO("or type anything into the console window.");
20000444:	e0010517          	auipc	a0,0xe0010
20000448:	c8450513          	addi	a0,a0,-892 # 100c8 <main.kLogFields.29>
2000044c:	4581                	li	a1,0
2000044e:	699000ef          	jal	ra,200012e6 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:75
  LOG_INFO("The LEDs show the ASCII code of the last character.");
20000452:	e0010517          	auipc	a0,0xe0010
20000456:	c8a50513          	addi	a0,a0,-886 # 100dc <main.kLogFields.32>
2000045a:	4581                	li	a1,0
2000045c:	68b000ef          	jal	ra,200012e6 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:77

  CHECK(dif_spi_device_send(&spi, "SPI!", 4, /*bytes_sent=*/NULL) ==
20000460:	f0000517          	auipc	a0,0xf0000
20000464:	bac50513          	addi	a0,a0,-1108 # 1000000c <spi>
20000468:	00003597          	auipc	a1,0x3
2000046c:	99558593          	addi	a1,a1,-1643 # 20002dfd <__clz_tab+0x619>
20000470:	4611                	li	a2,4
20000472:	4681                	li	a3,0
20000474:	539000ef          	jal	ra,200011ac <dif_spi_device_send>
20000478:	c941                	beqz	a0,20000508 <main+0x388>
2000047a:	e0010517          	auipc	a0,0xe0010
2000047e:	c7650513          	addi	a0,a0,-906 # 100f0 <main.kLogFields.36>
20000482:	4581                	li	a1,0
20000484:	663000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000488:	a89d                	j	200004fe <main+0x37e>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:73
  LOG_INFO("Try out the switches on the board");
2000048a:	00002597          	auipc	a1,0x2
2000048e:	0ba58593          	addi	a1,a1,186 # 20002544 <__udivdi3+0x41a>
20000492:	840a                	mv	s0,sp
20000494:	4651                	li	a2,20
20000496:	8522                	mv	a0,s0
20000498:	5e0000ef          	jal	ra,20000a78 <memcpy>
2000049c:	8522                	mv	a0,s0
2000049e:	59f000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:74
  LOG_INFO("or type anything into the console window.");
200004a2:	00002597          	auipc	a1,0x2
200004a6:	0b658593          	addi	a1,a1,182 # 20002558 <__udivdi3+0x42e>
200004aa:	840a                	mv	s0,sp
200004ac:	4651                	li	a2,20
200004ae:	8522                	mv	a0,s0
200004b0:	23e1                	jal	20000a78 <memcpy>
200004b2:	8522                	mv	a0,s0
200004b4:	589000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:75
  LOG_INFO("The LEDs show the ASCII code of the last character.");
200004b8:	00002597          	auipc	a1,0x2
200004bc:	0b458593          	addi	a1,a1,180 # 2000256c <__udivdi3+0x442>
200004c0:	840a                	mv	s0,sp
200004c2:	4651                	li	a2,20
200004c4:	8522                	mv	a0,s0
200004c6:	2b4d                	jal	20000a78 <memcpy>
200004c8:	8522                	mv	a0,s0
200004ca:	573000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:77
  CHECK(dif_spi_device_send(&spi, "SPI!", 4, /*bytes_sent=*/NULL) ==
200004ce:	f0000517          	auipc	a0,0xf0000
200004d2:	b3e50513          	addi	a0,a0,-1218 # 1000000c <spi>
200004d6:	00003597          	auipc	a1,0x3
200004da:	92758593          	addi	a1,a1,-1753 # 20002dfd <__clz_tab+0x619>
200004de:	4611                	li	a2,4
200004e0:	4681                	li	a3,0
200004e2:	4cb000ef          	jal	ra,200011ac <dif_spi_device_send>
200004e6:	c10d                	beqz	a0,20000508 <main+0x388>
200004e8:	00002597          	auipc	a1,0x2
200004ec:	09858593          	addi	a1,a1,152 # 20002580 <__udivdi3+0x456>
200004f0:	840a                	mv	s0,sp
200004f2:	4651                	li	a2,20
200004f4:	8522                	mv	a0,s0
200004f6:	2349                	jal	20000a78 <memcpy>
200004f8:	8522                	mv	a0,s0
200004fa:	543000ef          	jal	ra,2000123c <base_log_internal_core>
200004fe:	6531                	lui	a0,0xc
20000500:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000504:	1c5010ef          	jal	ra,20001ec8 <test_status_set>
20000508:	4401                	li	s0,0
2000050a:	6509                	lui	a0,0x2
2000050c:	71050913          	addi	s2,a0,1808 # 2710 <_stack_size+0x710>
20000510:	f0000497          	auipc	s1,0xf0000
20000514:	b0448493          	addi	s1,s1,-1276 # 10000014 <gpio>
20000518:	f0000997          	auipc	s3,0xf0000
2000051c:	af498993          	addi	s3,s3,-1292 # 1000000c <spi>
20000520:	f0000a17          	auipc	s4,0xf0000
20000524:	ae8a0a13          	addi	s4,s4,-1304 # 10000008 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:82
        kDifSpiDeviceOk);

  uint32_t gpio_state = 0;
  while (true) {
    usleep(10 * 1000);  // 10 ms
20000528:	854a                	mv	a0,s2
2000052a:	21d1                	jal	200009ee <usleep>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:83
    gpio_state = demo_gpio_to_log_echo(&gpio, gpio_state);
2000052c:	8526                	mv	a0,s1
2000052e:	85a2                	mv	a1,s0
20000530:	2295                	jal	20000694 <demo_gpio_to_log_echo>
20000532:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:84
    demo_spi_to_log_echo(&spi);
20000534:	854e                	mv	a0,s3
20000536:	2471                	jal	200007c2 <demo_spi_to_log_echo>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:85
    demo_uart_to_uart_and_gpio_echo(&uart, &gpio);
20000538:	8552                	mv	a0,s4
2000053a:	85a6                	mv	a1,s1
2000053c:	2e85                	jal	200008ac <demo_uart_to_uart_and_gpio_echo>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_world/hello_world.c:81
  while (true) {
2000053e:	b7ed                	j	20000528 <main+0x3a8>

20000540 <demo_gpio_startup>:
demo_gpio_startup():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:17
#include "sw/device/lib/dif/dif_uart.h"
#include "sw/device/lib/runtime/hart.h"
#include "sw/device/lib/runtime/log.h"
#include "sw/device/lib/testing/check.h"

void demo_gpio_startup(dif_gpio_t *gpio) {
20000540:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:18
  LOG_INFO("Watch the LEDs!");
20000542:	de06                	sw	ra,60(sp)
20000544:	dc22                	sw	s0,56(sp)
20000546:	da26                	sw	s1,52(sp)
20000548:	d84a                	sw	s2,48(sp)
2000054a:	d64e                	sw	s3,44(sp)
2000054c:	d452                	sw	s4,40(sp)
2000054e:	d256                	sw	s5,36(sp)
20000550:	d05a                	sw	s6,32(sp)
20000552:	ce5e                	sw	s7,28(sp)
20000554:	cc62                	sw	s8,24(sp)
20000556:	00002597          	auipc	a1,0x2
2000055a:	26258593          	addi	a1,a1,610 # 200027b8 <kDeviceLogBypassUartAddress>
2000055e:	0005ab03          	lw	s6,0(a1)
20000562:	8a2a                	mv	s4,a0
20000564:	020b0863          	beqz	s6,20000594 <demo_gpio_startup+0x54>
20000568:	e0010517          	auipc	a0,0xe0010
2000056c:	b9c50513          	addi	a0,a0,-1124 # 10104 <demo_gpio_startup.kLogFields>
20000570:	4581                	li	a1,0
20000572:	575000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000576:	6541                	lui	a0,0x10
20000578:	f0050593          	addi	a1,a0,-256 # ff00 <_stack_size+0xdf00>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:21

  // Give a LED pattern as startup indicator for 5 seconds.
  CHECK(dif_gpio_write_all(gpio, 0xff00) == kDifGpioOk);
2000057c:	8552                	mv	a0,s4
2000057e:	79c000ef          	jal	ra,20000d1a <dif_gpio_write_all>
20000582:	c939                	beqz	a0,200005d8 <demo_gpio_startup+0x98>
20000584:	e0010517          	auipc	a0,0xe0010
20000588:	b9450513          	addi	a0,a0,-1132 # 10118 <demo_gpio_startup.kLogFields.2>
2000058c:	4581                	li	a1,0
2000058e:	559000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000592:	a835                	j	200005ce <demo_gpio_startup+0x8e>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:18
  LOG_INFO("Watch the LEDs!");
20000594:	00002597          	auipc	a1,0x2
20000598:	00058593          	mv	a1,a1
2000059c:	840a                	mv	s0,sp
2000059e:	4651                	li	a2,20
200005a0:	8522                	mv	a0,s0
200005a2:	29d9                	jal	20000a78 <memcpy>
200005a4:	8522                	mv	a0,s0
200005a6:	497000ef          	jal	ra,2000123c <base_log_internal_core>
200005aa:	6541                	lui	a0,0x10
200005ac:	f0050593          	addi	a1,a0,-256 # ff00 <_stack_size+0xdf00>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:21
  CHECK(dif_gpio_write_all(gpio, 0xff00) == kDifGpioOk);
200005b0:	8552                	mv	a0,s4
200005b2:	768000ef          	jal	ra,20000d1a <dif_gpio_write_all>
200005b6:	c10d                	beqz	a0,200005d8 <demo_gpio_startup+0x98>
200005b8:	00002597          	auipc	a1,0x2
200005bc:	ff058593          	addi	a1,a1,-16 # 200025a8 <__udivdi3+0x47e>
200005c0:	840a                	mv	s0,sp
200005c2:	4651                	li	a2,20
200005c4:	8522                	mv	a0,s0
200005c6:	294d                	jal	20000a78 <memcpy>
200005c8:	8522                	mv	a0,s0
200005ca:	473000ef          	jal	ra,2000123c <base_log_internal_core>
200005ce:	6531                	lui	a0,0xc
200005d0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200005d4:	0f5010ef          	jal	ra,20001ec8 <test_status_set>
200005d8:	4401                	li	s0,0
200005da:	6505                	lui	a0,0x1
200005dc:	38850493          	addi	s1,a0,904 # 1388 <__DYNAMIC+0x1388>
200005e0:	02000c13          	li	s8,32
200005e4:	00002917          	auipc	s2,0x2
200005e8:	fd890913          	addi	s2,s2,-40 # 200025bc <__udivdi3+0x492>
200005ec:	898a                	mv	s3,sp
200005ee:	6531                	lui	a0,0xc
200005f0:	aad50b93          	addi	s7,a0,-1363 # baad <_stack_size+0x9aad>
200005f4:	e0010a97          	auipc	s5,0xe0010
200005f8:	b38a8a93          	addi	s5,s5,-1224 # 1012c <demo_gpio_startup.kLogFields.5>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:23
  for (int i = 0; i < 32; ++i) {
    usleep(5 * 1000);  // 5 ms
200005fc:	8526                	mv	a0,s1
200005fe:	2ec5                	jal	200009ee <usleep>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:24
    CHECK(dif_gpio_write(gpio, 8 + (i % 8), (i / 8) % 2) == kDifGpioOk);
20000600:	00747513          	andi	a0,s0,7
20000604:	00856593          	ori	a1,a0,8
20000608:	00847513          	andi	a0,s0,8
2000060c:	00355613          	srli	a2,a0,0x3
20000610:	8552                	mv	a0,s4
20000612:	716000ef          	jal	ra,20000d28 <dif_gpio_write>
20000616:	c115                	beqz	a0,2000063a <demo_gpio_startup+0xfa>
20000618:	000b0763          	beqz	s6,20000626 <demo_gpio_startup+0xe6>
2000061c:	8556                	mv	a0,s5
2000061e:	4581                	li	a1,0
20000620:	4c7000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000624:	a801                	j	20000634 <demo_gpio_startup+0xf4>
20000626:	4651                	li	a2,20
20000628:	854e                	mv	a0,s3
2000062a:	85ca                	mv	a1,s2
2000062c:	21b1                	jal	20000a78 <memcpy>
2000062e:	854e                	mv	a0,s3
20000630:	40d000ef          	jal	ra,2000123c <base_log_internal_core>
20000634:	855e                	mv	a0,s7
20000636:	093010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:22
  for (int i = 0; i < 32; ++i) {
2000063a:	0405                	addi	s0,s0,1
2000063c:	fd8410e3          	bne	s0,s8,200005fc <demo_gpio_startup+0xbc>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:26
  }
  CHECK(dif_gpio_write_all(gpio, 0x0000) == kDifGpioOk);  // All LEDs off.
20000640:	8552                	mv	a0,s4
20000642:	4581                	li	a1,0
20000644:	2dd9                	jal	20000d1a <dif_gpio_write_all>
20000646:	c91d                	beqz	a0,2000067c <demo_gpio_startup+0x13c>
20000648:	000b0a63          	beqz	s6,2000065c <demo_gpio_startup+0x11c>
2000064c:	e0010517          	auipc	a0,0xe0010
20000650:	af450513          	addi	a0,a0,-1292 # 10140 <demo_gpio_startup.kLogFields.8>
20000654:	4581                	li	a1,0
20000656:	491000ef          	jal	ra,200012e6 <base_log_internal_dv>
2000065a:	a821                	j	20000672 <demo_gpio_startup+0x132>
2000065c:	00002597          	auipc	a1,0x2
20000660:	f7458593          	addi	a1,a1,-140 # 200025d0 <__udivdi3+0x4a6>
20000664:	840a                	mv	s0,sp
20000666:	4651                	li	a2,20
20000668:	8522                	mv	a0,s0
2000066a:	2139                	jal	20000a78 <memcpy>
2000066c:	8522                	mv	a0,s0
2000066e:	3cf000ef          	jal	ra,2000123c <base_log_internal_core>
20000672:	6531                	lui	a0,0xc
20000674:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000678:	051010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:27
}
2000067c:	4c62                	lw	s8,24(sp)
2000067e:	4bf2                	lw	s7,28(sp)
20000680:	5b02                	lw	s6,32(sp)
20000682:	5a92                	lw	s5,36(sp)
20000684:	5a22                	lw	s4,40(sp)
20000686:	59b2                	lw	s3,44(sp)
20000688:	5942                	lw	s2,48(sp)
2000068a:	54d2                	lw	s1,52(sp)
2000068c:	5462                	lw	s0,56(sp)
2000068e:	50f2                	lw	ra,60(sp)
20000690:	6121                	addi	sp,sp,64
20000692:	8082                	ret

20000694 <demo_gpio_to_log_echo>:
demo_gpio_to_log_echo():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:40
/**
 * Mask for the FTDI bit among the GPIO bits.
 */
static const uint32_t kFtdiMask = 0x10000;

uint32_t demo_gpio_to_log_echo(dif_gpio_t *gpio, uint32_t prev_gpio_state) {
20000694:	7139                	addi	sp,sp,-64
20000696:	de06                	sw	ra,60(sp)
20000698:	dc22                	sw	s0,56(sp)
2000069a:	da26                	sw	s1,52(sp)
2000069c:	d84a                	sw	s2,48(sp)
2000069e:	d64e                	sw	s3,44(sp)
200006a0:	d452                	sw	s4,40(sp)
200006a2:	d256                	sw	s5,36(sp)
200006a4:	d05a                	sw	s6,32(sp)
200006a6:	ce5e                	sw	s7,28(sp)
200006a8:	cc62                	sw	s8,24(sp)
200006aa:	842e                	mv	s0,a1
200006ac:	084c                	addi	a1,sp,20
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:42
  uint32_t gpio_state;
  CHECK(dif_gpio_read_all(gpio, &gpio_state) == kDifGpioOk);
200006ae:	2581                	jal	20000cee <dif_gpio_read_all>
200006b0:	00002597          	auipc	a1,0x2
200006b4:	10858593          	addi	a1,a1,264 # 200027b8 <kDeviceLogBypassUartAddress>
200006b8:	0005aa83          	lw	s5,0(a1)
200006bc:	c91d                	beqz	a0,200006f2 <demo_gpio_to_log_echo+0x5e>
200006be:	000a8a63          	beqz	s5,200006d2 <demo_gpio_to_log_echo+0x3e>
200006c2:	e0010517          	auipc	a0,0xe0010
200006c6:	a9250513          	addi	a0,a0,-1390 # 10154 <demo_gpio_to_log_echo.kLogFields>
200006ca:	4581                	li	a1,0
200006cc:	41b000ef          	jal	ra,200012e6 <base_log_internal_dv>
200006d0:	a821                	j	200006e8 <demo_gpio_to_log_echo+0x54>
200006d2:	00002597          	auipc	a1,0x2
200006d6:	f1258593          	addi	a1,a1,-238 # 200025e4 <__udivdi3+0x4ba>
200006da:	848a                	mv	s1,sp
200006dc:	4651                	li	a2,20
200006de:	8526                	mv	a0,s1
200006e0:	2e61                	jal	20000a78 <memcpy>
200006e2:	8526                	mv	a0,s1
200006e4:	359000ef          	jal	ra,2000123c <base_log_internal_core>
200006e8:	6531                	lui	a0,0xc
200006ea:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200006ee:	7da010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:43
  gpio_state &= kGpioMask;
200006f2:	4552                	lw	a0,20(sp)
200006f4:	4481                	li	s1,0
200006f6:	65c1                	lui	a1,0x10
200006f8:	0ff58593          	addi	a1,a1,255 # 100ff <main.kLogFields.36+0xf>
200006fc:	8d6d                	and	a0,a0,a1
200006fe:	ca2a                	sw	a0,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:45

  uint32_t state_delta = prev_gpio_state ^ gpio_state;
20000700:	00854b33          	xor	s6,a0,s0
20000704:	4b85                	li	s7,1
20000706:	4c21                	li	s8,8
20000708:	00002997          	auipc	s3,0x2
2000070c:	ef098993          	addi	s3,s3,-272 # 200025f8 <__udivdi3+0x4ce>
20000710:	890a                	mv	s2,sp
20000712:	e0010a17          	auipc	s4,0xe0010
20000716:	a56a0a13          	addi	s4,s4,-1450 # 10168 <demo_gpio_to_log_echo.kLogFields.12>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:47
  for (int bit_idx = 0; bit_idx < 8; ++bit_idx) {
    bool changed = ((state_delta >> bit_idx) & 0x1) != 0;
2000071a:	009b9533          	sll	a0,s7,s1
2000071e:	016575b3          	and	a1,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:49
    bool is_currently_set = ((gpio_state >> bit_idx) & 0x1) != 0;
    if (changed) {
20000722:	c59d                	beqz	a1,20000750 <demo_gpio_to_log_echo+0xbc>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:48
    bool is_currently_set = ((gpio_state >> bit_idx) & 0x1) != 0;
20000724:	45d2                	lw	a1,20(sp)
20000726:	8d6d                	and	a0,a0,a1
20000728:	00a03433          	snez	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:50
      LOG_INFO("GPIO switch #%d changed to %d", bit_idx, is_currently_set);
2000072c:	000a8963          	beqz	s5,2000073e <demo_gpio_to_log_echo+0xaa>
20000730:	4589                	li	a1,2
20000732:	8552                	mv	a0,s4
20000734:	8626                	mv	a2,s1
20000736:	86a2                	mv	a3,s0
20000738:	3af000ef          	jal	ra,200012e6 <base_log_internal_dv>
2000073c:	a811                	j	20000750 <demo_gpio_to_log_echo+0xbc>
2000073e:	4651                	li	a2,20
20000740:	854a                	mv	a0,s2
20000742:	85ce                	mv	a1,s3
20000744:	2e15                	jal	20000a78 <memcpy>
20000746:	854a                	mv	a0,s2
20000748:	85a6                	mv	a1,s1
2000074a:	8622                	mv	a2,s0
2000074c:	2f1000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:46
  for (int bit_idx = 0; bit_idx < 8; ++bit_idx) {
20000750:	0485                	addi	s1,s1,1
20000752:	fd8494e3          	bne	s1,s8,2000071a <demo_gpio_to_log_echo+0x86>
20000756:	6541                	lui	a0,0x10
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:54
    }
  }

  if ((state_delta & kFtdiMask) != 0) {
20000758:	00ab7533          	and	a0,s6,a0
2000075c:	c531                	beqz	a0,200007a8 <demo_gpio_to_log_echo+0x114>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:55
    if ((gpio_state & kFtdiMask) != 0) {
2000075e:	01614503          	lbu	a0,22(sp)
20000762:	8905                	andi	a0,a0,1
20000764:	e901                	bnez	a0,20000774 <demo_gpio_to_log_echo+0xe0>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:58
      LOG_INFO("FTDI control changed. Enable JTAG.");
    } else {
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000766:	020a8163          	beqz	s5,20000788 <demo_gpio_to_log_echo+0xf4>
2000076a:	e0010517          	auipc	a0,0xe0010
2000076e:	a2650513          	addi	a0,a0,-1498 # 10190 <demo_gpio_to_log_echo.kLogFields.18>
20000772:	a039                	j	20000780 <demo_gpio_to_log_echo+0xec>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:56
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000774:	000a8f63          	beqz	s5,20000792 <demo_gpio_to_log_echo+0xfe>
20000778:	e0010517          	auipc	a0,0xe0010
2000077c:	a0450513          	addi	a0,a0,-1532 # 1017c <demo_gpio_to_log_echo.kLogFields.15>
20000780:	4581                	li	a1,0
20000782:	365000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000786:	a00d                	j	200007a8 <demo_gpio_to_log_echo+0x114>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:58
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000788:	00002597          	auipc	a1,0x2
2000078c:	e9858593          	addi	a1,a1,-360 # 20002620 <__udivdi3+0x4f6>
20000790:	a029                	j	2000079a <demo_gpio_to_log_echo+0x106>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:56
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000792:	00002597          	auipc	a1,0x2
20000796:	e7a58593          	addi	a1,a1,-390 # 2000260c <__udivdi3+0x4e2>
2000079a:	840a                	mv	s0,sp
2000079c:	4651                	li	a2,20
2000079e:	8522                	mv	a0,s0
200007a0:	2ce1                	jal	20000a78 <memcpy>
200007a2:	8522                	mv	a0,s0
200007a4:	299000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:62
    }
  }

  return gpio_state;
200007a8:	4552                	lw	a0,20(sp)
200007aa:	4c62                	lw	s8,24(sp)
200007ac:	4bf2                	lw	s7,28(sp)
200007ae:	5b02                	lw	s6,32(sp)
200007b0:	5a92                	lw	s5,36(sp)
200007b2:	5a22                	lw	s4,40(sp)
200007b4:	59b2                	lw	s3,44(sp)
200007b6:	5942                	lw	s2,48(sp)
200007b8:	54d2                	lw	s1,52(sp)
200007ba:	5462                	lw	s0,56(sp)
200007bc:	50f2                	lw	ra,60(sp)
200007be:	6121                	addi	sp,sp,64
200007c0:	8082                	ret

200007c2 <demo_spi_to_log_echo>:
demo_spi_to_log_echo():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:65
}

void demo_spi_to_log_echo(const dif_spi_device_t *spi) {
200007c2:	715d                	addi	sp,sp,-80
200007c4:	c686                	sw	ra,76(sp)
200007c6:	c4a2                	sw	s0,72(sp)
200007c8:	c2a6                	sw	s1,68(sp)
200007ca:	c0ca                	sw	s2,64(sp)
200007cc:	842a                	mv	s0,a0
200007ce:	100c                	addi	a1,sp,32
200007d0:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:68
  uint32_t spi_buf[8];
  size_t spi_len;
  CHECK(dif_spi_device_recv(spi, spi_buf, sizeof(spi_buf), &spi_len) ==
200007d2:	02000613          	li	a2,32
200007d6:	049000ef          	jal	ra,2000101e <dif_spi_device_recv>
200007da:	00002497          	auipc	s1,0x2
200007de:	fde48493          	addi	s1,s1,-34 # 200027b8 <kDeviceLogBypassUartAddress>
200007e2:	cd05                	beqz	a0,2000081a <demo_spi_to_log_echo+0x58>
200007e4:	4088                	lw	a0,0(s1)
200007e6:	c909                	beqz	a0,200007f8 <demo_spi_to_log_echo+0x36>
200007e8:	e0010517          	auipc	a0,0xe0010
200007ec:	9bc50513          	addi	a0,a0,-1604 # 101a4 <demo_spi_to_log_echo.kLogFields>
200007f0:	4581                	li	a1,0
200007f2:	2f5000ef          	jal	ra,200012e6 <base_log_internal_dv>
200007f6:	a829                	j	20000810 <demo_spi_to_log_echo+0x4e>
200007f8:	00002597          	auipc	a1,0x2
200007fc:	e3c58593          	addi	a1,a1,-452 # 20002634 <__udivdi3+0x50a>
20000800:	00810913          	addi	s2,sp,8
20000804:	4651                	li	a2,20
20000806:	854a                	mv	a0,s2
20000808:	2c85                	jal	20000a78 <memcpy>
2000080a:	854a                	mv	a0,s2
2000080c:	231000ef          	jal	ra,2000123c <base_log_internal_core>
20000810:	6531                	lui	a0,0xc
20000812:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000816:	6b2010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:70
        kDifSpiDeviceOk);
  if (spi_len > 0) {
2000081a:	4572                	lw	a0,28(sp)
2000081c:	c151                	beqz	a0,200008a0 <demo_spi_to_log_echo+0xde>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:71
    uint32_t echo_word = spi_buf[0] ^ 0x01010101;
2000081e:	5502                	lw	a0,32(sp)
20000820:	010105b7          	lui	a1,0x1010
20000824:	10158593          	addi	a1,a1,257 # 1010101 <test_status_set.kLogFields.2+0xfffe59>
20000828:	8d2d                	xor	a0,a0,a1
2000082a:	c22a                	sw	a0,4(sp)
2000082c:	004c                	addi	a1,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:72
    CHECK(dif_spi_device_send(spi, &echo_word, sizeof(uint32_t),
2000082e:	4611                	li	a2,4
20000830:	8522                	mv	a0,s0
20000832:	4681                	li	a3,0
20000834:	179000ef          	jal	ra,200011ac <dif_spi_device_send>
20000838:	4084                	lw	s1,0(s1)
2000083a:	c915                	beqz	a0,2000086e <demo_spi_to_log_echo+0xac>
2000083c:	c889                	beqz	s1,2000084e <demo_spi_to_log_echo+0x8c>
2000083e:	e0010517          	auipc	a0,0xe0010
20000842:	97a50513          	addi	a0,a0,-1670 # 101b8 <demo_spi_to_log_echo.kLogFields.21>
20000846:	4581                	li	a1,0
20000848:	29f000ef          	jal	ra,200012e6 <base_log_internal_dv>
2000084c:	a821                	j	20000864 <demo_spi_to_log_echo+0xa2>
2000084e:	00002597          	auipc	a1,0x2
20000852:	dfa58593          	addi	a1,a1,-518 # 20002648 <__udivdi3+0x51e>
20000856:	0020                	addi	s0,sp,8
20000858:	4651                	li	a2,20
2000085a:	8522                	mv	a0,s0
2000085c:	2c31                	jal	20000a78 <memcpy>
2000085e:	8522                	mv	a0,s0
20000860:	1dd000ef          	jal	ra,2000123c <base_log_internal_core>
20000864:	6531                	lui	a0,0xc
20000866:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000086a:	65e010ef          	jal	ra,20001ec8 <test_status_set>
2000086e:	4472                	lw	s0,28(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:74
                              /*bytes_sent=*/NULL) == kDifSpiDeviceOk);
    LOG_INFO("SPI: %z", spi_len, spi_buf);
20000870:	c899                	beqz	s1,20000886 <demo_spi_to_log_echo+0xc4>
20000872:	e0010517          	auipc	a0,0xe0010
20000876:	95a50513          	addi	a0,a0,-1702 # 101cc <demo_spi_to_log_echo.kLogFields.24>
2000087a:	1014                	addi	a3,sp,32
2000087c:	4589                	li	a1,2
2000087e:	8622                	mv	a2,s0
20000880:	267000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000884:	a831                	j	200008a0 <demo_spi_to_log_echo+0xde>
20000886:	00002597          	auipc	a1,0x2
2000088a:	dd658593          	addi	a1,a1,-554 # 2000265c <__udivdi3+0x532>
2000088e:	0024                	addi	s1,sp,8
20000890:	4651                	li	a2,20
20000892:	8526                	mv	a0,s1
20000894:	22d5                	jal	20000a78 <memcpy>
20000896:	1010                	addi	a2,sp,32
20000898:	8526                	mv	a0,s1
2000089a:	85a2                	mv	a1,s0
2000089c:	1a1000ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:76
  }
}
200008a0:	4906                	lw	s2,64(sp)
200008a2:	4496                	lw	s1,68(sp)
200008a4:	4426                	lw	s0,72(sp)
200008a6:	40b6                	lw	ra,76(sp)
200008a8:	6161                	addi	sp,sp,80
200008aa:	8082                	ret

200008ac <demo_uart_to_uart_and_gpio_echo>:
demo_uart_to_uart_and_gpio_echo():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:78

void demo_uart_to_uart_and_gpio_echo(dif_uart_t *uart, dif_gpio_t *gpio) {
200008ac:	711d                	addi	sp,sp,-96
200008ae:	ce86                	sw	ra,92(sp)
200008b0:	cca2                	sw	s0,88(sp)
200008b2:	caa6                	sw	s1,84(sp)
200008b4:	c8ca                	sw	s2,80(sp)
200008b6:	c6ce                	sw	s3,76(sp)
200008b8:	c4d2                	sw	s4,72(sp)
200008ba:	c2d6                	sw	s5,68(sp)
200008bc:	c0da                	sw	s6,64(sp)
200008be:	de5e                	sw	s7,60(sp)
200008c0:	dc62                	sw	s8,56(sp)
200008c2:	da66                	sw	s9,52(sp)
200008c4:	d86a                	sw	s10,48(sp)
200008c6:	d66e                	sw	s11,44(sp)
200008c8:	8b2e                	mv	s6,a1
200008ca:	84aa                	mv	s1,a0
200008cc:	102c                	addi	a1,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:81
  while (true) {
    size_t chars_available;
    if (dif_uart_rx_bytes_available(uart, &chars_available) != kDifUartOk ||
200008ce:	1fe010ef          	jal	ra,20001acc <dif_uart_rx_bytes_available>
200008d2:	0e051b63          	bnez	a0,200009c8 <demo_uart_to_uart_and_gpio_echo+0x11c>
200008d6:	5522                	lw	a0,40(sp)
200008d8:	0e050863          	beqz	a0,200009c8 <demo_uart_to_uart_and_gpio_echo+0x11c>
200008dc:	00002517          	auipc	a0,0x2
200008e0:	edc50513          	addi	a0,a0,-292 # 200027b8 <kDeviceLogBypassUartAddress>
200008e4:	00052a03          	lw	s4,0(a0)
200008e8:	02710913          	addi	s2,sp,39
200008ec:	02810993          	addi	s3,sp,40
200008f0:	00002517          	auipc	a0,0x2
200008f4:	da850513          	addi	a0,a0,-600 # 20002698 <__udivdi3+0x56e>
200008f8:	c62a                	sw	a0,12(sp)
200008fa:	01010a93          	addi	s5,sp,16
200008fe:	6531                	lui	a0,0xc
20000900:	aad50413          	addi	s0,a0,-1363 # baad <_stack_size+0x9aad>
20000904:	e0010b97          	auipc	s7,0xe0010
20000908:	904b8b93          	addi	s7,s7,-1788 # 10208 <demo_uart_to_uart_and_gpio_echo.kLogFields.31>
2000090c:	00002c17          	auipc	s8,0x2
20000910:	d78c0c13          	addi	s8,s8,-648 # 20002684 <__udivdi3+0x55a>
20000914:	e0010c97          	auipc	s9,0xe0010
20000918:	8e0c8c93          	addi	s9,s9,-1824 # 101f4 <demo_uart_to_uart_and_gpio_echo.kLogFields.28>
2000091c:	00002d17          	auipc	s10,0x2
20000920:	d54d0d13          	addi	s10,s10,-684 # 20002670 <__udivdi3+0x546>
20000924:	e0010d97          	auipc	s11,0xe0010
20000928:	8bcd8d93          	addi	s11,s11,-1860 # 101e0 <demo_uart_to_uart_and_gpio_echo.kLogFields>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:87
        chars_available == 0) {
      break;
    }

    uint8_t rcv_char;
    CHECK(dif_uart_bytes_receive(uart, 1, &rcv_char, NULL) == kDifUartOk);
2000092c:	4585                	li	a1,1
2000092e:	8526                	mv	a0,s1
20000930:	864a                	mv	a2,s2
20000932:	4681                	li	a3,0
20000934:	11e010ef          	jal	ra,20001a52 <dif_uart_bytes_receive>
20000938:	c115                	beqz	a0,2000095c <demo_uart_to_uart_and_gpio_echo+0xb0>
2000093a:	000a0763          	beqz	s4,20000948 <demo_uart_to_uart_and_gpio_echo+0x9c>
2000093e:	856e                	mv	a0,s11
20000940:	4581                	li	a1,0
20000942:	1a5000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000946:	a801                	j	20000956 <demo_uart_to_uart_and_gpio_echo+0xaa>
20000948:	4651                	li	a2,20
2000094a:	8556                	mv	a0,s5
2000094c:	85ea                	mv	a1,s10
2000094e:	222d                	jal	20000a78 <memcpy>
20000950:	8556                	mv	a0,s5
20000952:	0eb000ef          	jal	ra,2000123c <base_log_internal_core>
20000956:	8522                	mv	a0,s0
20000958:	570010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:88
    CHECK(dif_uart_byte_send_polled(uart, rcv_char) == kDifUartOk);
2000095c:	02714583          	lbu	a1,39(sp)
20000960:	8526                	mv	a0,s1
20000962:	122010ef          	jal	ra,20001a84 <dif_uart_byte_send_polled>
20000966:	c115                	beqz	a0,2000098a <demo_uart_to_uart_and_gpio_echo+0xde>
20000968:	000a0763          	beqz	s4,20000976 <demo_uart_to_uart_and_gpio_echo+0xca>
2000096c:	8566                	mv	a0,s9
2000096e:	4581                	li	a1,0
20000970:	177000ef          	jal	ra,200012e6 <base_log_internal_dv>
20000974:	a801                	j	20000984 <demo_uart_to_uart_and_gpio_echo+0xd8>
20000976:	4651                	li	a2,20
20000978:	8556                	mv	a0,s5
2000097a:	85e2                	mv	a1,s8
2000097c:	28f5                	jal	20000a78 <memcpy>
2000097e:	8556                	mv	a0,s5
20000980:	0bd000ef          	jal	ra,2000123c <base_log_internal_core>
20000984:	8522                	mv	a0,s0
20000986:	542010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:89
    CHECK(dif_gpio_write_all(gpio, rcv_char << 8) == kDifGpioOk);
2000098a:	02714503          	lbu	a0,39(sp)
2000098e:	00851593          	slli	a1,a0,0x8
20000992:	855a                	mv	a0,s6
20000994:	2659                	jal	20000d1a <dif_gpio_write_all>
20000996:	c115                	beqz	a0,200009ba <demo_uart_to_uart_and_gpio_echo+0x10e>
20000998:	000a0763          	beqz	s4,200009a6 <demo_uart_to_uart_and_gpio_echo+0xfa>
2000099c:	855e                	mv	a0,s7
2000099e:	4581                	li	a1,0
200009a0:	147000ef          	jal	ra,200012e6 <base_log_internal_dv>
200009a4:	a801                	j	200009b4 <demo_uart_to_uart_and_gpio_echo+0x108>
200009a6:	4651                	li	a2,20
200009a8:	8556                	mv	a0,s5
200009aa:	45b2                	lw	a1,12(sp)
200009ac:	20f1                	jal	20000a78 <memcpy>
200009ae:	8556                	mv	a0,s5
200009b0:	08d000ef          	jal	ra,2000123c <base_log_internal_core>
200009b4:	8522                	mv	a0,s0
200009b6:	512010ef          	jal	ra,20001ec8 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:81
    if (dif_uart_rx_bytes_available(uart, &chars_available) != kDifUartOk ||
200009ba:	8526                	mv	a0,s1
200009bc:	85ce                	mv	a1,s3
200009be:	10e010ef          	jal	ra,20001acc <dif_uart_rx_bytes_available>
200009c2:	e119                	bnez	a0,200009c8 <demo_uart_to_uart_and_gpio_echo+0x11c>
200009c4:	5522                	lw	a0,40(sp)
200009c6:	f13d                	bnez	a0,2000092c <demo_uart_to_uart_and_gpio_echo+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:91
  }
}
200009c8:	5db2                	lw	s11,44(sp)
200009ca:	5d42                	lw	s10,48(sp)
200009cc:	5cd2                	lw	s9,52(sp)
200009ce:	5c62                	lw	s8,56(sp)
200009d0:	5bf2                	lw	s7,60(sp)
200009d2:	4b06                	lw	s6,64(sp)
200009d4:	4a96                	lw	s5,68(sp)
200009d6:	4a26                	lw	s4,72(sp)
200009d8:	49b6                	lw	s3,76(sp)
200009da:	4946                	lw	s2,80(sp)
200009dc:	44d6                	lw	s1,84(sp)
200009de:	4466                	lw	s0,88(sp)
200009e0:	40f6                	lw	ra,92(sp)
200009e2:	6125                	addi	sp,sp,96
200009e4:	8082                	ret
	...

200009e8 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
200009e8:	10500073          	wfi
200009ec:	8082                	ret

200009ee <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
200009ee:	1141                	addi	sp,sp,-16
200009f0:	c606                	sw	ra,12(sp)
200009f2:	00002597          	auipc	a1,0x2
200009f6:	d9e58593          	addi	a1,a1,-610 # 20002790 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
200009fa:	41d0                	lw	a2,4(a1)
200009fc:	4194                	lw	a3,0(a1)
200009fe:	02a605b3          	mul	a1,a2,a0
20000a02:	02a6b633          	mulhu	a2,a3,a0
20000a06:	95b2                	add	a1,a1,a2
20000a08:	02a68533          	mul	a0,a3,a0
20000a0c:	000f4637          	lui	a2,0xf4
20000a10:	24060613          	addi	a2,a2,576 # f4240 <test_status_set.kLogFields.2+0xe3f98>
20000a14:	4681                	li	a3,0
20000a16:	714010ef          	jal	ra,2000212a <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000a1a:	4801                	li	a6,0
20000a1c:	4701                	li	a4,0

20000a1e <read0>:
20000a1e:	b8002873          	csrr	a6,mcycleh
20000a22:	b00026f3          	csrr	a3,mcycle
20000a26:	b8002773          	csrr	a4,mcycleh
20000a2a:	fee81ae3          	bne	a6,a4,20000a1e <read0>
20000a2e:	4781                	li	a5,0
20000a30:	4601                	li	a2,0

20000a32 <read1>:
20000a32:	b80027f3          	csrr	a5,mcycleh
20000a36:	b0002773          	csrr	a4,mcycle
20000a3a:	b8002673          	csrr	a2,mcycleh
20000a3e:	fec79ae3          	bne	a5,a2,20000a32 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20000a42:	00d73633          	sltu	a2,a4,a3
20000a46:	410787b3          	sub	a5,a5,a6
20000a4a:	8f91                	sub	a5,a5,a2
20000a4c:	00b78663          	beq	a5,a1,20000a58 <read1+0x26>
20000a50:	00b7b733          	sltu	a4,a5,a1
20000a54:	ff69                	bnez	a4,20000a2e <read0+0x10>
20000a56:	a031                	j	20000a62 <read1+0x30>
20000a58:	40d70633          	sub	a2,a4,a3
20000a5c:	00a63733          	sltu	a4,a2,a0
20000a60:	f779                	bnez	a4,20000a2e <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
20000a62:	40b2                	lw	ra,12(sp)
20000a64:	0141                	addi	sp,sp,16
20000a66:	8082                	ret

20000a68 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000a68:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000a6c:	bff5                	j	20000a68 <abort>
	...

20000a70 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20000a70:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20000a72:	8082                	ret

20000a74 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20000a74:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20000a76:	8082                	ret

20000a78 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20000a78:	ca11                	beqz	a2,20000a8c <memcpy+0x14>
20000a7a:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20000a7c:	00058703          	lb	a4,0(a1)
20000a80:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20000a84:	167d                	addi	a2,a2,-1
20000a86:	0685                	addi	a3,a3,1
20000a88:	0585                	addi	a1,a1,1
20000a8a:	fa6d                	bnez	a2,20000a7c <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20000a8c:	8082                	ret

20000a8e <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000a8e:	c619                	beqz	a2,20000a9c <memset+0xe>
20000a90:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20000a92:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20000a96:	167d                	addi	a2,a2,-1
20000a98:	0685                	addi	a3,a3,1
20000a9a:	fe65                	bnez	a2,20000a92 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20000a9c:	8082                	ret

20000a9e <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20000a9e:	ce09                	beqz	a2,20000ab8 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20000aa0:	00054683          	lbu	a3,0(a0)
20000aa4:	0005c703          	lbu	a4,0(a1)
20000aa8:	00e6ea63          	bltu	a3,a4,20000abc <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20000aac:	00d76b63          	bltu	a4,a3,20000ac2 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20000ab0:	167d                	addi	a2,a2,-1
20000ab2:	0585                	addi	a1,a1,1
20000ab4:	0505                	addi	a0,a0,1
20000ab6:	f66d                	bnez	a2,20000aa0 <memcmp+0x2>
20000ab8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
20000aba:	8082                	ret
20000abc:	fd600513          	li	a0,-42
20000ac0:	8082                	ret
20000ac2:	02a00513          	li	a0,42
20000ac6:	8082                	ret

20000ac8 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000ac8:	ca11                	beqz	a2,20000adc <memchr+0x14>
20000aca:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20000ace:	00054683          	lbu	a3,0(a0)
20000ad2:	00b68663          	beq	a3,a1,20000ade <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000ad6:	167d                	addi	a2,a2,-1
20000ad8:	0505                	addi	a0,a0,1
20000ada:	fa75                	bnez	a2,20000ace <memchr+0x6>
20000adc:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20000ade:	8082                	ret

20000ae0 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000ae0:	ce09                	beqz	a2,20000afa <memrchr+0x1a>
20000ae2:	fff50693          	addi	a3,a0,-1
20000ae6:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000aea:	00c68733          	add	a4,a3,a2
20000aee:	00074703          	lbu	a4,0(a4)
20000af2:	00b70663          	beq	a4,a1,20000afe <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000af6:	167d                	addi	a2,a2,-1
20000af8:	fa6d                	bnez	a2,20000aea <memrchr+0xa>
20000afa:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000afc:	8082                	ret
20000afe:	9532                	add	a0,a0,a2
20000b00:	157d                	addi	a0,a0,-1
20000b02:	8082                	ret

20000b04 <dif_gpio_init>:
dif_gpio_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:103

  return kDifGpioOk;
}

dif_gpio_result_t dif_gpio_init(dif_gpio_params_t params, dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000b04:	c581                	beqz	a1,20000b0c <dif_gpio_init+0x8>
20000b06:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:107
    return kDifGpioBadArg;
  }

  gpio->params = params;
20000b08:	c188                	sw	a0,0(a1)
20000b0a:	a011                	j	20000b0e <dif_gpio_init+0xa>
20000b0c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:110

  return kDifGpioOk;
}
20000b0e:	8532                	mv	a0,a2
20000b10:	8082                	ret

20000b12 <dif_gpio_reset>:
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:113

dif_gpio_result_t dif_gpio_reset(const dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000b12:	cd15                	beqz	a0,20000b4e <dif_gpio_reset+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:119
    return kDifGpioBadArg;
  }

  // We don't need to write to `GPIO_MASKED_OE_*` and `GPIO_MASKED_OUT_*`
  // since we directly reset `GPIO_DIRECT_OE` and `GPIO_DIRECT_OUT` below.
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000b14:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b16:	0005a223          	sw	zero,4(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:120
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, 0);
20000b1a:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b1c:	0005ae23          	sw	zero,28(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:121
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET, 0);
20000b20:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b22:	0005a823          	sw	zero,16(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:122
  mmio_region_write32(gpio->params.base_addr,
20000b26:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b28:	0205a423          	sw	zero,40(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:124
                      GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000b2c:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b2e:	0205a623          	sw	zero,44(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:126
                      GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000b32:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b34:	0205a823          	sw	zero,48(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:128
                      GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000b38:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b3a:	0205aa23          	sw	zero,52(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:130
                      GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000b3e:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b40:	0205ac23          	sw	zero,56(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:133
                      GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET, 0);
  // Also clear all pending interrupts
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000b44:	410c                	lw	a1,0(a0)
20000b46:	4501                	li	a0,0
20000b48:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000b4a:	c190                	sw	a2,0(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:137
                      0xFFFFFFFFu);

  return kDifGpioOk;
}
20000b4c:	8082                	ret
20000b4e:	4509                	li	a0,2
20000b50:	8082                	ret

20000b52 <dif_gpio_irq_is_pending>:
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:141

dif_gpio_result_t dif_gpio_irq_is_pending(const dif_gpio_t *gpio,
                                          dif_gpio_pin_t pin,
                                          bool *is_pending) {
20000b52:	86aa                	mv	a3,a0
20000b54:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:142
  if (gpio == NULL || is_pending == NULL) {
20000b56:	ca91                	beqz	a3,20000b6a <dif_gpio_irq_is_pending+0x18>
20000b58:	ca09                	beqz	a2,20000b6a <dif_gpio_irq_is_pending+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
    return kDifGpioBadArg;
  }

  *is_pending = mmio_region_get_bit32(gpio->params.base_addr,
20000b5a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b5c:	4114                	lw	a3,0(a0)
20000b5e:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000b60:	00b6d5b3          	srl	a1,a3,a1
20000b64:	8985                	andi	a1,a1,1
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
20000b66:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:150
                                      GPIO_INTR_STATE_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000b6a:	8082                	ret

20000b6c <dif_gpio_irq_is_pending_all>:
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:153

dif_gpio_result_t dif_gpio_irq_is_pending_all(const dif_gpio_t *gpio,
                                              dif_gpio_state_t *is_pending) {
20000b6c:	862a                	mv	a2,a0
20000b6e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:154
  if (gpio == NULL || is_pending == NULL) {
20000b70:	c611                	beqz	a2,20000b7c <dif_gpio_irq_is_pending_all+0x10>
20000b72:	c589                	beqz	a1,20000b7c <dif_gpio_irq_is_pending_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:159
    return kDifGpioBadArg;
  }

  *is_pending =
      mmio_region_read32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET);
20000b74:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000b76:	4110                	lw	a2,0(a0)
20000b78:	4501                	li	a0,0
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:158
  *is_pending =
20000b7a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:162

  return kDifGpioOk;
}
20000b7c:	8082                	ret

20000b7e <dif_gpio_irq_acknowledge>:
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:166

dif_gpio_result_t dif_gpio_irq_acknowledge(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000b7e:	c901                	beqz	a0,20000b8e <dif_gpio_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:170
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000b80:	4110                	lw	a2,0(a0)
20000b82:	4501                	li	a0,0
20000b84:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000b86:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000b8a:	c20c                	sw	a1,0(a2)
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:174
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000b8c:	8082                	ret
20000b8e:	4509                	li	a0,2
20000b90:	8082                	ret

20000b92 <dif_gpio_irq_get_enabled>:
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:178

dif_gpio_result_t dif_gpio_irq_get_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t *state) {
20000b92:	86aa                	mv	a3,a0
20000b94:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:179
  if (gpio == NULL || state == NULL) {
20000b96:	ca89                	beqz	a3,20000ba8 <dif_gpio_irq_get_enabled+0x16>
20000b98:	ca01                	beqz	a2,20000ba8 <dif_gpio_irq_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:183
    return kDifGpioBadArg;
  }

  bool is_enabled = mmio_region_get_bit32(gpio->params.base_addr,
20000b9a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000b9c:	4154                	lw	a3,4(a0)
20000b9e:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000ba0:	00b6d5b3          	srl	a1,a3,a1
20000ba4:	8985                	andi	a1,a1,1
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:185
                                          GPIO_INTR_ENABLE_REG_OFFSET, pin);
  *state = is_enabled ? kDifGpioToggleEnabled : kDifGpioToggleDisabled;
20000ba6:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:188

  return kDifGpioOk;
}
20000ba8:	8082                	ret

20000baa <dif_gpio_irq_set_enabled>:
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:192

dif_gpio_result_t dif_gpio_irq_set_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t state) {
20000baa:	86aa                	mv	a3,a0
20000bac:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:193
  if (gpio == NULL) {
20000bae:	c695                	beqz	a3,20000bda <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:197
    return kDifGpioBadArg;
  }

  switch (state) {
20000bb0:	ca19                	beqz	a2,20000bc6 <dif_gpio_irq_set_enabled+0x1c>
20000bb2:	4705                	li	a4,1
20000bb4:	02e61363          	bne	a2,a4,20000bda <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:199
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_bit32(gpio->params.base_addr,
20000bb8:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bba:	4254                	lw	a3,4(a2)
20000bbc:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000bbe:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000bc2:	8dd5                	or	a1,a1,a3
20000bc4:	a811                	j	20000bd8 <dif_gpio_irq_set_enabled+0x2e>
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:203
                                      GPIO_INTR_ENABLE_REG_OFFSET, pin);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_bit32(gpio->params.base_addr,
20000bc6:	4290                	lw	a2,0(a3)
20000bc8:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bca:	4254                	lw	a3,4(a2)
20000bcc:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000bce:	00b715b3          	sll	a1,a4,a1
20000bd2:	fff5c593          	not	a1,a1
20000bd6:	8df5                	and	a1,a1,a3
20000bd8:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:211
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000bda:	8082                	ret

20000bdc <dif_gpio_irq_set_enabled_masked>:
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:215

dif_gpio_result_t dif_gpio_irq_set_enabled_masked(const dif_gpio_t *gpio,
                                                  dif_gpio_mask_t mask,
                                                  dif_gpio_toggle_t state) {
20000bdc:	86aa                	mv	a3,a0
20000bde:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:216
  if (gpio == NULL) {
20000be0:	c28d                	beqz	a3,20000c02 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:220
    return kDifGpioBadArg;
  }

  switch (state) {
20000be2:	ca09                	beqz	a2,20000bf4 <dif_gpio_irq_set_enabled_masked+0x18>
20000be4:	4705                	li	a4,1
20000be6:	00e61e63          	bne	a2,a4,20000c02 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:222
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000bea:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bec:	4254                	lw	a3,4(a2)
20000bee:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000bf0:	8dd5                	or	a1,a1,a3
20000bf2:	a039                	j	20000c00 <dif_gpio_irq_set_enabled_masked+0x24>
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:226
                                       GPIO_INTR_ENABLE_REG_OFFSET, mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20000bf4:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000bf6:	4254                	lw	a3,4(a2)
20000bf8:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000bfa:	fff5c593          	not	a1,a1
20000bfe:	8df5                	and	a1,a1,a3
20000c00:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:234
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000c02:	8082                	ret

20000c04 <dif_gpio_irq_force>:
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:238

dif_gpio_result_t dif_gpio_irq_force(const dif_gpio_t *gpio,
                                     dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000c04:	c901                	beqz	a0,20000c14 <dif_gpio_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:242
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_TEST_REG_OFFSET,
20000c06:	4110                	lw	a2,0(a0)
20000c08:	4501                	li	a0,0
20000c0a:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000c0c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c10:	c60c                	sw	a1,8(a2)
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:246
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000c12:	8082                	ret
20000c14:	4509                	li	a0,2
20000c16:	8082                	ret

20000c18 <dif_gpio_irq_disable_all>:
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:250

dif_gpio_result_t dif_gpio_irq_disable_all(const dif_gpio_t *gpio,
                                           dif_gpio_state_t *snapshot) {
  if (gpio == NULL) {
20000c18:	c911                	beqz	a0,20000c2c <dif_gpio_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:254
    return kDifGpioBadArg;
  }

  if (snapshot != NULL) {
20000c1a:	c581                	beqz	a1,20000c22 <dif_gpio_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:256
    *snapshot =
        mmio_region_read32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET);
20000c1c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c1e:	4250                	lw	a2,4(a2)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:255
    *snapshot =
20000c20:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:258
  }
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000c22:	410c                	lw	a1,0(a0)
20000c24:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c26:	0005a223          	sw	zero,4(a1)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:261

  return kDifGpioOk;
}
20000c2a:	8082                	ret
20000c2c:	4509                	li	a0,2
20000c2e:	8082                	ret

20000c30 <dif_gpio_irq_restore_all>:
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:264

dif_gpio_result_t dif_gpio_irq_restore_all(const dif_gpio_t *gpio,
                                           const dif_gpio_state_t *snapshot) {
20000c30:	862a                	mv	a2,a0
20000c32:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:265
  if (gpio == NULL || snapshot == NULL) {
20000c34:	c611                	beqz	a2,20000c40 <dif_gpio_irq_restore_all+0x10>
20000c36:	c589                	beqz	a1,20000c40 <dif_gpio_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:270
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000c38:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:269
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
20000c3a:	4210                	lw	a2,0(a2)
20000c3c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000c3e:	c24c                	sw	a1,4(a2)
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:273

  return kDifGpioOk;
}
20000c40:	8082                	ret

20000c42 <dif_gpio_irq_set_trigger>:
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:278

dif_gpio_result_t dif_gpio_irq_set_trigger(const dif_gpio_t *gpio,
                                           dif_gpio_mask_t mask,
                                           dif_gpio_irq_trigger_t trigger) {
  if (gpio == NULL) {
20000c42:	c529                	beqz	a0,20000c8c <dif_gpio_irq_set_trigger+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:283
    return kDifGpioBadArg;
  }

  // Disable all interrupt triggers for the given mask.
  mmio_region_nonatomic_clear_mask32(
20000c44:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c46:	5698                	lw	a4,40(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000c48:	fff5c793          	not	a5,a1
20000c4c:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c4e:	d698                	sw	a4,40(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:285
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000c50:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c52:	56d8                	lw	a4,44(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000c54:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c56:	d6d8                	sw	a4,44(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:287
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000c58:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c5a:	5a98                	lw	a4,48(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000c5c:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c5e:	da98                	sw	a4,48(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:289
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000c60:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c62:	5ad8                	lw	a4,52(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000c64:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c66:	dad8                	sw	a4,52(a3)
20000c68:	4709                	li	a4,2
20000c6a:	4685                	li	a3,1
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);

  switch (trigger) {
20000c6c:	02c75263          	bge	a4,a2,20000c90 <dif_gpio_irq_set_trigger+0x4e>
20000c70:	4711                	li	a4,4
20000c72:	02c74763          	blt	a4,a2,20000ca0 <dif_gpio_irq_set_trigger+0x5e>
20000c76:	470d                	li	a4,3
20000c78:	02e60e63          	beq	a2,a4,20000cb4 <dif_gpio_irq_set_trigger+0x72>
20000c7c:	4711                	li	a4,4
20000c7e:	06e61663          	bne	a2,a4,20000cea <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:312
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
                                       GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeRisingFalling:
      mmio_region_nonatomic_set_mask32(
20000c82:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000c84:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000c86:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000c88:	d614                	sw	a3,40(a2)
20000c8a:	a81d                	j	20000cc0 <dif_gpio_irq_set_trigger+0x7e>
20000c8c:	4689                	li	a3,2
20000c8e:	a8b1                	j	20000cea <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
  switch (trigger) {
20000c90:	ce15                	beqz	a2,20000ccc <dif_gpio_irq_set_trigger+0x8a>
20000c92:	4705                	li	a4,1
20000c94:	02e60663          	beq	a2,a4,20000cc0 <dif_gpio_irq_set_trigger+0x7e>
20000c98:	4709                	li	a4,2
20000c9a:	04e60363          	beq	a2,a4,20000ce0 <dif_gpio_irq_set_trigger+0x9e>
20000c9e:	a0b1                	j	20000cea <dif_gpio_irq_set_trigger+0xa8>
20000ca0:	4715                	li	a4,5
20000ca2:	02e60b63          	beq	a2,a4,20000cd8 <dif_gpio_irq_set_trigger+0x96>
20000ca6:	4719                	li	a4,6
20000ca8:	04e61163          	bne	a2,a4,20000cea <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:325
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
      mmio_region_nonatomic_set_mask32(
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeFallingLevelHigh:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000cac:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cae:	5654                	lw	a3,44(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000cb0:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cb2:	d654                	sw	a3,44(a2)
20000cb4:	4108                	lw	a0,0(a0)
20000cb6:	5910                	lw	a2,48(a0)
20000cb8:	4681                	li	a3,0
20000cba:	8dd1                	or	a1,a1,a2
20000cbc:	d90c                	sw	a1,48(a0)
20000cbe:	a035                	j	20000cea <dif_gpio_irq_set_trigger+0xa8>
20000cc0:	4108                	lw	a0,0(a0)
20000cc2:	5550                	lw	a2,44(a0)
20000cc4:	4681                	li	a3,0
20000cc6:	8dd1                	or	a1,a1,a2
20000cc8:	d54c                	sw	a1,44(a0)
20000cca:	a005                	j	20000cea <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:294
      mmio_region_nonatomic_set_mask32(
20000ccc:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cce:	5510                	lw	a2,40(a0)
20000cd0:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000cd2:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cd4:	d50c                	sw	a1,40(a0)
20000cd6:	a811                	j	20000cea <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:319
      mmio_region_nonatomic_set_mask32(
20000cd8:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cda:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000cdc:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000cde:	d614                	sw	a3,40(a2)
20000ce0:	4108                	lw	a0,0(a0)
20000ce2:	5950                	lw	a2,52(a0)
20000ce4:	4681                	li	a3,0
20000ce6:	8dd1                	or	a1,a1,a2
20000ce8:	d94c                	sw	a1,52(a0)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:337
    default:
      return kDifGpioError;
  }

  return kDifGpioOk;
}
20000cea:	8536                	mv	a0,a3
20000cec:	8082                	ret

20000cee <dif_gpio_read_all>:
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:340

dif_gpio_result_t dif_gpio_read_all(const dif_gpio_t *gpio,
                                    dif_gpio_state_t *state) {
20000cee:	862a                	mv	a2,a0
20000cf0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:341
  if (gpio == NULL || state == NULL) {
20000cf2:	c611                	beqz	a2,20000cfe <dif_gpio_read_all+0x10>
20000cf4:	c589                	beqz	a1,20000cfe <dif_gpio_read_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
    return kDifGpioBadArg;
  }

  *state = mmio_region_read32(gpio->params.base_addr, GPIO_DATA_IN_REG_OFFSET);
20000cf6:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000cf8:	4550                	lw	a2,12(a0)
20000cfa:	4501                	li	a0,0
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
20000cfc:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:348

  return kDifGpioOk;
}
20000cfe:	8082                	ret

20000d00 <dif_gpio_read>:
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:351

dif_gpio_result_t dif_gpio_read(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                bool *state) {
20000d00:	86aa                	mv	a3,a0
20000d02:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:352
  if (gpio == NULL || state == NULL) {
20000d04:	ca91                	beqz	a3,20000d18 <dif_gpio_read+0x18>
20000d06:	ca09                	beqz	a2,20000d18 <dif_gpio_read+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
    return kDifGpioBadArg;
  }

  *state = mmio_region_get_bit32(gpio->params.base_addr,
20000d08:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000d0a:	4554                	lw	a3,12(a0)
20000d0c:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000d0e:	00b6d5b3          	srl	a1,a3,a1
20000d12:	8985                	andi	a1,a1,1
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
20000d14:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:360
                                 GPIO_DATA_IN_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000d18:	8082                	ret

20000d1a <dif_gpio_write_all>:
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:364

dif_gpio_result_t dif_gpio_write_all(const dif_gpio_t *gpio,
                                     dif_gpio_state_t state) {
  if (gpio == NULL) {
20000d1a:	c509                	beqz	a0,20000d24 <dif_gpio_write_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:368
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET,
20000d1c:	4110                	lw	a2,0(a0)
20000d1e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000d20:	ca0c                	sw	a1,16(a2)
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:372
                      state);

  return kDifGpioOk;
}
20000d22:	8082                	ret
20000d24:	4509                	li	a0,2
20000d26:	8082                	ret

20000d28 <dif_gpio_write>:
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:86
  if (gpio == NULL) {
20000d28:	c505                	beqz	a0,20000d50 <dif_gpio_write+0x28>
20000d2a:	4741                	li	a4,16
20000d2c:	46d1                	li	a3,20
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000d2e:	00e5e363          	bltu	a1,a4,20000d34 <dif_gpio_write+0xc>
20000d32:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000d34:	89bd                	andi	a1,a1,15
20000d36:	4705                	li	a4,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000d38:	00b71733          	sll	a4,a4,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000d3c:	01071593          	slli	a1,a4,0x10
20000d40:	e211                	bnez	a2,20000d44 <dif_gpio_write+0x1c>
20000d42:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000d44:	4110                	lw	a2,0(a0)
20000d46:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000d48:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d4a:	9636                	add	a2,a2,a3
20000d4c:	c20c                	sw	a1,0(a2)
dif_gpio_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:376

dif_gpio_result_t dif_gpio_write(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                 bool state) {
  return gpio_masked_bit_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000d4e:	8082                	ret
20000d50:	4509                	li	a0,2
20000d52:	8082                	ret

20000d54 <dif_gpio_write_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000d54:	c50d                	beqz	a0,20000d7e <dif_gpio_write_masked+0x2a>
20000d56:	66c1                	lui	a3,0x10
20000d58:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000d5c:	00e5f7b3          	and	a5,a1,a4
20000d60:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000d62:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000d64:	c791                	beqz	a5,20000d70 <dif_gpio_write_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000d66:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000d68:	05c2                	slli	a1,a1,0x10
20000d6a:	8f71                	and	a4,a4,a2
20000d6c:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d6e:	cbcc                	sw	a1,20(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20000d70:	ca89                	beqz	a3,20000d82 <dif_gpio_write_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20000d72:	410c                	lw	a1,0(a0)
20000d74:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20000d76:	8241                	srli	a2,a2,0x10
20000d78:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d7a:	cd90                	sw	a2,24(a1)
dif_gpio_write_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:383
}

dif_gpio_result_t dif_gpio_write_masked(const dif_gpio_t *gpio,
                                        dif_gpio_mask_t mask,
                                        dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000d7c:	8082                	ret
20000d7e:	4509                	li	a0,2
20000d80:	8082                	ret
20000d82:	4501                	li	a0,0
20000d84:	8082                	ret

20000d86 <dif_gpio_output_set_enabled_all>:
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:389
                           GPIO_MASKED_OUT_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_output_set_enabled_all(const dif_gpio_t *gpio,
                                                  dif_gpio_state_t state) {
  if (gpio == NULL) {
20000d86:	c509                	beqz	a0,20000d90 <dif_gpio_output_set_enabled_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:393
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, state);
20000d88:	4110                	lw	a2,0(a0)
20000d8a:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000d8c:	ce4c                	sw	a1,28(a2)
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:396

  return kDifGpioOk;
}
20000d8e:	8082                	ret
20000d90:	4509                	li	a0,2
20000d92:	8082                	ret

20000d94 <dif_gpio_output_set_enabled>:
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:401

dif_gpio_result_t dif_gpio_output_set_enabled(const dif_gpio_t *gpio,
                                              dif_gpio_pin_t pin,
                                              dif_gpio_toggle_t state) {
  if (gpio == NULL) {
20000d94:	c51d                	beqz	a0,20000dc2 <dif_gpio_output_set_enabled+0x2e>
20000d96:	4741                	li	a4,16
20000d98:	02000693          	li	a3,32
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000d9c:	00e5e463          	bltu	a1,a4,20000da4 <dif_gpio_output_set_enabled+0x10>
20000da0:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000da4:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20000da6:	89bd                	andi	a1,a1,15
20000da8:	4785                	li	a5,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000daa:	00b797b3          	sll	a5,a5,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000dae:	01079593          	slli	a1,a5,0x10
20000db2:	c211                	beqz	a2,20000db6 <dif_gpio_output_set_enabled+0x22>
20000db4:	873e                	mv	a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20000db6:	4110                	lw	a2,0(a0)
20000db8:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20000dba:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dbc:	9636                	add	a2,a2,a3
20000dbe:	c20c                	sw	a1,0(a2)
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:409

  return gpio_masked_bit_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
                               GPIO_MASKED_OE_UPPER_REG_OFFSET, pin, state);

  return kDifGpioOk;
}
20000dc0:	8082                	ret
20000dc2:	4509                	li	a0,2
20000dc4:	8082                	ret

20000dc6 <dif_gpio_output_set_enabled_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20000dc6:	c50d                	beqz	a0,20000df0 <dif_gpio_output_set_enabled_masked+0x2a>
20000dc8:	66c1                	lui	a3,0x10
20000dca:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
20000dce:	00e5f7b3          	and	a5,a1,a4
20000dd2:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20000dd4:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20000dd6:	c791                	beqz	a5,20000de2 <dif_gpio_output_set_enabled_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20000dd8:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
20000dda:	05c2                	slli	a1,a1,0x10
20000ddc:	8f71                	and	a4,a4,a2
20000dde:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000de0:	d38c                	sw	a1,32(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20000de2:	ca89                	beqz	a3,20000df4 <dif_gpio_output_set_enabled_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20000de4:	410c                	lw	a1,0(a0)
20000de6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20000de8:	8241                	srli	a2,a2,0x10
20000dea:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000dec:	d1d0                	sw	a2,36(a1)
dif_gpio_output_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:414

dif_gpio_result_t dif_gpio_output_set_enabled_masked(const dif_gpio_t *gpio,
                                                     dif_gpio_mask_t mask,
                                                     dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
20000dee:	8082                	ret
20000df0:	4509                	li	a0,2
20000df2:	8082                	ret
20000df4:	4501                	li	a0,0
20000df6:	8082                	ret

20000df8 <dif_gpio_input_noise_filter_set_enabled>:
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:419
                           GPIO_MASKED_OE_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_input_noise_filter_set_enabled(
    const dif_gpio_t *gpio, dif_gpio_mask_t mask, dif_gpio_toggle_t state) {
20000df8:	86aa                	mv	a3,a0
20000dfa:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:420
  if (gpio == NULL) {
20000dfc:	c28d                	beqz	a3,20000e1e <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:424
    return kDifGpioBadArg;
  }

  switch (state) {
20000dfe:	ca09                	beqz	a2,20000e10 <dif_gpio_input_noise_filter_set_enabled+0x18>
20000e00:	4705                	li	a4,1
20000e02:	00e61e63          	bne	a2,a4,20000e1e <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:426
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000e06:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000e08:	5e14                	lw	a3,56(a2)
20000e0a:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e0c:	8dd5                	or	a1,a1,a3
20000e0e:	a039                	j	20000e1c <dif_gpio_input_noise_filter_set_enabled+0x24>
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:431
                                       GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20000e10:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000e12:	5e14                	lw	a3,56(a2)
20000e14:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000e16:	fff5c593          	not	a1,a1
20000e1a:	8df5                	and	a1,a1,a3
20000e1c:	de0c                	sw	a1,56(a2)
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:440
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000e1e:	8082                	ret

20000e20 <dif_spi_device_init>:
dif_spi_device_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:15

const uint16_t kDifSpiDeviceBufferLen = SPI_DEVICE_BUFFER_SIZE_BYTES;

dif_spi_device_result_t dif_spi_device_init(dif_spi_device_params_t params,
                                            dif_spi_device_t *spi) {
  if (spi == NULL) {
20000e20:	c591                	beqz	a1,20000e2c <dif_spi_device_init+0xc>
20000e22:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:20
    return kDifSpiDeviceBadArg;
  }

  // This ensures all other fields are zeroed.
  *spi = (dif_spi_device_t){.params = params};
20000e24:	c188                	sw	a0,0(a1)
20000e26:	0005a223          	sw	zero,4(a1)
20000e2a:	a011                	j	20000e2e <dif_spi_device_init+0xe>
20000e2c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:23

  return kDifSpiDeviceOk;
}
20000e2e:	8532                	mv	a0,a2
20000e30:	8082                	ret

20000e32 <dif_spi_device_configure>:
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:48

  return val;
}

dif_spi_device_result_t dif_spi_device_configure(
    dif_spi_device_t *spi, dif_spi_device_config_t config) {
20000e32:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:49
  if (spi == NULL) {
20000e34:	c935                	beqz	a0,20000ea8 <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:59
  // function argument checks, to avoid a halfway-configured SPI.

  uint32_t device_config = build_control_word(config);

  uint16_t rx_fifo_start = 0x0;
  uint16_t rx_fifo_end = config.rx_fifo_len - 1;
20000e36:	0125d683          	lhu	a3,18(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:61
  uint16_t tx_fifo_start = rx_fifo_end + 1;
  uint16_t tx_fifo_end = tx_fifo_start + config.tx_fifo_len - 1;
20000e3a:	0145d703          	lhu	a4,20(a1)
20000e3e:	fff68893          	addi	a7,a3,-1 # fffeffff <_data_init_start+0xdffeccf3>
20000e42:	00e88833          	add	a6,a7,a4
20000e46:	67bd                	lui	a5,0xf
20000e48:	00f877b3          	and	a5,a6,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:62
  if (tx_fifo_end >= kDifSpiDeviceBufferLen) {
20000e4c:	83b1                	srli	a5,a5,0xc
20000e4e:	efa9                	bnez	a5,20000ea8 <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
20000e50:	41d0                	lw	a2,4(a1)
20000e52:	419c                	lw	a5,0(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:36
                             config.data_phase == kDifSpiDeviceEdgePositive);
20000e54:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000e58:	00161293          	slli	t0,a2,0x1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
20000e5c:	4590                	lw	a2,8(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:34
                           config.clock_polarity == kDifSpiDeviceEdgeNegative);
20000e5e:	17fd                	addi	a5,a5,-1
20000e60:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e64:	00f2e2b3          	or	t0,t0,a5
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
20000e68:	167d                	addi	a2,a2,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
20000e6a:	45dc                	lw	a5,12(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
20000e6c:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e70:	060a                	slli	a2,a2,0x2
20000e72:	00c2e633          	or	a2,t0,a2
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
20000e76:	17fd                	addi	a5,a5,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
20000e78:	0105c583          	lbu	a1,16(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
20000e7c:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e80:	078e                	slli	a5,a5,0x3
20000e82:	8e5d                	or	a2,a2,a5
20000e84:	05a2                	slli	a1,a1,0x8
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:82
      tx_fifo_bounds, SPI_DEVICE_TXF_ADDR_LIMIT_FIELD, tx_fifo_end);

  spi->rx_fifo_len = config.rx_fifo_len;
  spi->tx_fifo_len = config.tx_fifo_len;

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_CFG_REG_OFFSET,
20000e86:	411c                	lw	a5,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e88:	8dd1                	or	a1,a1,a2
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:79
  spi->rx_fifo_len = config.rx_fifo_len;
20000e8a:	00d51223          	sh	a3,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:80
  spi->tx_fifo_len = config.tx_fifo_len;
20000e8e:	00e51323          	sh	a4,6(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e92:	cb8c                	sw	a1,16(a5)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:84
                      device_config);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_RXF_ADDR_REG_OFFSET,
20000e94:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000e96:	01089613          	slli	a2,a7,0x10
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e9a:	d590                	sw	a2,40(a1)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:86
                      rx_fifo_bounds);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_TXF_ADDR_REG_OFFSET,
20000e9c:	4108                	lw	a0,0(a0)
20000e9e:	4601                	li	a2,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000ea0:	01081593          	slli	a1,a6,0x10
20000ea4:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ea6:	d54c                	sw	a1,44(a0)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:90
                      tx_fifo_bounds);

  return kDifSpiDeviceOk;
}
20000ea8:	8532                	mv	a0,a2
20000eaa:	8082                	ret

20000eac <dif_spi_device_abort>:
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:93

dif_spi_device_result_t dif_spi_device_abort(const dif_spi_device_t *spi) {
  if (spi == NULL) {
20000eac:	cd01                	beqz	a0,20000ec4 <dif_spi_device_abort+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:99
    return kDifSpiDeviceBadArg;
  }

  // Set the `abort` bit, and then spin until `abort_done` is asserted.
  uint32_t reg =
      mmio_region_read32(spi->params.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET);
20000eae:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000eb0:	45d0                	lw	a2,12(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20000eb2:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000eb6:	c5d0                	sw	a2,12(a1)
20000eb8:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000eba:	4d4c                	lw	a1,28(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000ebc:	89c1                	andi	a1,a1,16
20000ebe:	ddf5                	beqz	a1,20000eba <dif_spi_device_abort+0xe>
20000ec0:	4501                	li	a0,0
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:111
        mmio_region_read32(spi->params.base_addr, SPI_DEVICE_STATUS_REG_OFFSET);
    if (bitfield_bit32_read(reg, SPI_DEVICE_STATUS_ABORT_DONE_BIT)) {
      return kDifSpiDeviceOk;
    }
  }
}
20000ec2:	8082                	ret
20000ec4:	4509                	li	a0,2
20000ec6:	8082                	ret

20000ec8 <dif_spi_device_irq_is_pending>:
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:141
  }
  return true;
}

dif_spi_device_result_t dif_spi_device_irq_is_pending(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq, bool *is_pending) {
20000ec8:	86aa                	mv	a3,a0
20000eca:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:142
  if (spi == NULL || is_pending == NULL) {
20000ecc:	ce89                	beqz	a3,20000ee6 <dif_spi_device_irq_is_pending+0x1e>
20000ece:	ce01                	beqz	a2,20000ee6 <dif_spi_device_irq_is_pending+0x1e>
20000ed0:	4715                	li	a4,5
20000ed2:	00b76a63          	bltu	a4,a1,20000ee6 <dif_spi_device_irq_is_pending+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:151
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
20000ed6:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ed8:	4114                	lw	a3,0(a0)
20000eda:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000edc:	00b6d5b3          	srl	a1,a3,a1
20000ee0:	8985                	andi	a1,a1,1
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:153
                                    SPI_DEVICE_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg, index);
20000ee2:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:156

  return kDifSpiDeviceOk;
}
20000ee6:	8082                	ret

20000ee8 <dif_spi_device_irq_acknowledge>:
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:159

dif_spi_device_result_t dif_spi_device_irq_acknowledge(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq) {
20000ee8:	862a                	mv	a2,a0
20000eea:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:160
  if (spi == NULL) {
20000eec:	ca11                	beqz	a2,20000f00 <dif_spi_device_irq_acknowledge+0x18>
20000eee:	4695                	li	a3,5
20000ef0:	00b6e863          	bltu	a3,a1,20000f00 <dif_spi_device_irq_acknowledge+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:170
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_STATE_REG_OFFSET,
20000ef4:	4210                	lw	a2,0(a2)
20000ef6:	4501                	li	a0,0
20000ef8:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000efa:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000efe:	c20c                	sw	a1,0(a2)
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:174
                      reg);

  return kDifSpiDeviceOk;
}
20000f00:	8082                	ret

20000f02 <dif_spi_device_irq_get_enabled>:
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:178

dif_spi_device_result_t dif_spi_device_irq_get_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t *state) {
20000f02:	86aa                	mv	a3,a0
20000f04:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:179
  if (spi == NULL || state == NULL) {
20000f06:	ce91                	beqz	a3,20000f22 <dif_spi_device_irq_get_enabled+0x20>
20000f08:	ce09                	beqz	a2,20000f22 <dif_spi_device_irq_get_enabled+0x20>
20000f0a:	4715                	li	a4,5
20000f0c:	00b76b63          	bltu	a4,a1,20000f22 <dif_spi_device_irq_get_enabled+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:188
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
20000f10:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f12:	4154                	lw	a3,4(a0)
20000f14:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000f16:	00b6d5b3          	srl	a1,a3,a1
20000f1a:	8985                	andi	a1,a1,1
20000f1c:	0015b593          	seqz	a1,a1
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:190
                                    SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  *state = bitfield_bit32_read(reg, index) ? kDifSpiDeviceToggleEnabled
20000f20:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:194
                                           : kDifSpiDeviceToggleDisabled;

  return kDifSpiDeviceOk;
}
20000f22:	8082                	ret

20000f24 <dif_spi_device_irq_set_enabled>:
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:198

dif_spi_device_result_t dif_spi_device_irq_set_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t state) {
20000f24:	86aa                	mv	a3,a0
20000f26:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:199
  if (spi == NULL) {
20000f28:	c69d                	beqz	a3,20000f56 <dif_spi_device_irq_set_enabled+0x32>
20000f2a:	4715                	li	a4,5
20000f2c:	02b76563          	bltu	a4,a1,20000f56 <dif_spi_device_irq_set_enabled+0x32>
20000f30:	4705                	li	a4,1
20000f32:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:209
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  bool flag;
  switch (state) {
20000f34:	c609                	beqz	a2,20000f3e <dif_spi_device_irq_set_enabled+0x1a>
20000f36:	4785                	li	a5,1
20000f38:	00f61f63          	bne	a2,a5,20000f56 <dif_spi_device_irq_set_enabled+0x32>
20000f3c:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:220
      break;
    default:
      return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
20000f3e:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f40:	4254                	lw	a3,4(a2)
20000f42:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000f44:	00b71733          	sll	a4,a4,a1
20000f48:	fff74713          	not	a4,a4
20000f4c:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000f4e:	00b795b3          	sll	a1,a5,a1
20000f52:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f54:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:227
  reg = bitfield_bit32_write(reg, index, flag);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      reg);

  return kDifSpiDeviceOk;
}
20000f56:	8082                	ret

20000f58 <dif_spi_device_irq_force>:
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:230

dif_spi_device_result_t dif_spi_device_irq_force(const dif_spi_device_t *spi,
                                                 dif_spi_device_irq_t irq) {
20000f58:	862a                	mv	a2,a0
20000f5a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:231
  if (spi == NULL) {
20000f5c:	ca11                	beqz	a2,20000f70 <dif_spi_device_irq_force+0x18>
20000f5e:	4695                	li	a3,5
20000f60:	00b6e863          	bltu	a3,a1,20000f70 <dif_spi_device_irq_force+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:241
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_TEST_REG_OFFSET,
20000f64:	4210                	lw	a2,0(a2)
20000f66:	4501                	li	a0,0
20000f68:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000f6a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f6e:	c60c                	sw	a1,8(a2)
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:245
                      reg);

  return kDifSpiDeviceOk;
}
20000f70:	8082                	ret

20000f72 <dif_spi_device_irq_disable_all>:
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:249

dif_spi_device_result_t dif_spi_device_irq_disable_all(
    const dif_spi_device_t *spi, dif_spi_device_irq_snapshot_t *snapshot) {
  if (spi == NULL) {
20000f72:	c911                	beqz	a0,20000f86 <dif_spi_device_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:253
    return kDifSpiDeviceBadArg;
  }

  if (snapshot != NULL) {
20000f74:	c581                	beqz	a1,20000f7c <dif_spi_device_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
    *snapshot = mmio_region_read32(spi->params.base_addr,
20000f76:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f78:	4250                	lw	a2,4(a2)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
20000f7a:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:258
                                   SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
20000f7c:	410c                	lw	a1,0(a0)
20000f7e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f80:	0005a223          	sw	zero,4(a1)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:262
                      0);

  return kDifSpiDeviceOk;
}
20000f84:	8082                	ret
20000f86:	4509                	li	a0,2
20000f88:	8082                	ret

20000f8a <dif_spi_device_irq_restore_all>:
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:266

dif_spi_device_result_t dif_spi_device_irq_restore_all(
    const dif_spi_device_t *spi,
    const dif_spi_device_irq_snapshot_t *snapshot) {
20000f8a:	862a                	mv	a2,a0
20000f8c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:267
  if (spi == NULL || snapshot == NULL) {
20000f8e:	c611                	beqz	a2,20000f9a <dif_spi_device_irq_restore_all+0x10>
20000f90:	c589                	beqz	a1,20000f9a <dif_spi_device_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:272
    return kDifSpiDeviceBadArg;
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000f92:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:271
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
20000f94:	4210                	lw	a2,0(a2)
20000f96:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000f98:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:275

  return kDifSpiDeviceOk;
}
20000f9a:	8082                	ret

20000f9c <dif_spi_device_set_irq_levels>:
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:279

dif_spi_device_result_t dif_spi_device_set_irq_levels(
    const dif_spi_device_t *spi, uint16_t rx_level, uint16_t tx_level) {
  if (spi == NULL) {
20000f9c:	c519                	beqz	a0,20000faa <dif_spi_device_set_irq_levels+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:288
  uint32_t compressed_limit = 0;
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_RXLVL_FIELD, rx_level);
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_TXLVL_FIELD, tx_level);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_FIFO_LEVEL_REG_OFFSET,
20000f9e:	4114                	lw	a3,0(a0)
20000fa0:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000fa2:	0642                	slli	a2,a2,0x10
20000fa4:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fa6:	cacc                	sw	a1,20(a3)
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:292
                      compressed_limit);

  return kDifSpiDeviceOk;
}
20000fa8:	8082                	ret
20000faa:	4509                	li	a0,2
20000fac:	8082                	ret

20000fae <dif_spi_device_rx_pending>:
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:473
  // In particular, when r == w, the fifo is full.
  return fifo_len - (ptrs.read_ptr.offset - ptrs.write_ptr.offset);
}

dif_spi_device_result_t dif_spi_device_rx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
20000fae:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:474
  if (spi == NULL || bytes_pending == NULL) {
20000fb0:	c90d                	beqz	a0,20000fe2 <dif_spi_device_rx_pending+0x34>
20000fb2:	c985                	beqz	a1,20000fe2 <dif_spi_device_rx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
20000fb4:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fb6:	5214                	lw	a3,32(a2)
20000fb8:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
20000fba:	0106d713          	srli	a4,a3,0x10
20000fbe:	6785                	lui	a5,0x1
20000fc0:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
20000fc2:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
20000fc6:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20000fc8:	8eb9                	xor	a3,a3,a4
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kRxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
20000fca:	00451503          	lh	a0,4(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20000fce:	06ce                	slli	a3,a3,0x13
20000fd0:	86fd                	srai	a3,a3,0x1f
20000fd2:	40f80733          	sub	a4,a6,a5
20000fd6:	8d75                	and	a0,a0,a3
20000fd8:	953a                	add	a0,a0,a4
20000fda:	66c1                	lui	a3,0x10
20000fdc:	16fd                	addi	a3,a3,-1
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
20000fde:	8d75                	and	a0,a0,a3
20000fe0:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:482

  return kDifSpiDeviceOk;
}
20000fe2:	8532                	mv	a0,a2
20000fe4:	8082                	ret

20000fe6 <dif_spi_device_tx_pending>:
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:485

dif_spi_device_result_t dif_spi_device_tx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
20000fe6:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:486
  if (spi == NULL || bytes_pending == NULL) {
20000fe8:	c90d                	beqz	a0,2000101a <dif_spi_device_tx_pending+0x34>
20000fea:	c985                	beqz	a1,2000101a <dif_spi_device_tx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
20000fec:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000fee:	5254                	lw	a3,36(a2)
20000ff0:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
20000ff2:	0106d713          	srli	a4,a3,0x10
20000ff6:	6785                	lui	a5,0x1
20000ff8:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
20000ffa:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
20000ffe:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001000:	8eb9                	xor	a3,a3,a4
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kTxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
20001002:	00651503          	lh	a0,6(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001006:	06ce                	slli	a3,a3,0x13
20001008:	86fd                	srai	a3,a3,0x1f
2000100a:	40f80733          	sub	a4,a6,a5
2000100e:	8d75                	and	a0,a0,a3
20001010:	953a                	add	a0,a0,a4
20001012:	66c1                	lui	a3,0x10
20001014:	16fd                	addi	a3,a3,-1
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
20001016:	8d75                	and	a0,a0,a3
20001018:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:494

  return kDifSpiDeviceOk;
}
2000101a:	8532                	mv	a0,a2
2000101c:	8082                	ret

2000101e <dif_spi_device_recv>:
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:569
  return total_bytes;
}

dif_spi_device_result_t dif_spi_device_recv(const dif_spi_device_t *spi,
                                            void *buf, size_t buf_len,
                                            size_t *bytes_received) {
2000101e:	1101                	addi	sp,sp,-32
20001020:	ce06                	sw	ra,28(sp)
20001022:	cc22                	sw	s0,24(sp)
20001024:	ca26                	sw	s1,20(sp)
20001026:	c84a                	sw	s2,16(sp)
20001028:	842a                	mv	s0,a0
2000102a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:570
  if (spi == NULL || buf == NULL) {
2000102c:	c43d                	beqz	s0,2000109a <dif_spi_device_recv+0x7c>
2000102e:	872e                	mv	a4,a1
20001030:	c5ad                	beqz	a1,2000109a <dif_spi_device_recv+0x7c>
20001032:	8936                	mv	s2,a3
20001034:	88b2                	mv	a7,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
20001036:	4008                	lw	a0,0(s0)
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:575
    return kDifSpiDeviceBadArg;
  }

  uint16_t fifo_base = 0;
  uint16_t fifo_len = spi->rx_fifo_len;
20001038:	00445683          	lhu	a3,4(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000103c:	5108                	lw	a0,32(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
2000103e:	01055593          	srli	a1,a0,0x10
20001042:	6605                	lui	a2,0x1
20001044:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
20001046:	8df1                	and	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
20001048:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
2000104a:	00c55793          	srli	a5,a0,0xc
2000104e:	64c1                	lui	s1,0x10
20001050:	8fe5                	and	a5,a5,s1
20001052:	8ddd                	or	a1,a1,a5
20001054:	0512                	slli	a0,a0,0x4
20001056:	8d65                	and	a0,a0,s1
20001058:	8d51                	or	a0,a0,a2
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:576
  fifo_ptrs_t fifo = decompress_ptrs(spi, kRxFifoParams);
2000105a:	c42e                	sw	a1,8(sp)
2000105c:	c62a                	sw	a0,12(sp)
2000105e:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:578

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
20001060:	4805                	li	a6,1
20001062:	8522                	mv	a0,s0
20001064:	4601                	li	a2,0
20001066:	87c6                	mv	a5,a7
20001068:	283d                	jal	200010a6 <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:580
                            buf_len, /*is_recv=*/true);
  if (bytes_received != NULL) {
2000106a:	00090463          	beqz	s2,20001072 <dif_spi_device_recv+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:581
    *bytes_received = bytes;
2000106e:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:583
  }
  if (bytes > 0) {
20001072:	c11d                	beqz	a0,20001098 <dif_spi_device_recv+0x7a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:585
    // Commit the new RX FIFO pointers.
    compress_ptrs(spi, kRxFifoParams, fifo);
20001074:	4522                	lw	a0,8(sp)
20001076:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
20001078:	00455613          	srli	a2,a0,0x4
2000107c:	6685                	lui	a3,0x1
2000107e:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
20001080:	0045d713          	srli	a4,a1,0x4
20001084:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
20001086:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001088:	0542                	slli	a0,a0,0x10
2000108a:	6641                	lui	a2,0x10
2000108c:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
2000108e:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
20001090:	8df1                	and	a1,a1,a2
20001092:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001094:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001096:	d308                	sw	a0,32(a4)
20001098:	4501                	li	a0,0
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:588
  }
  return kDifSpiDeviceOk;
}
2000109a:	4942                	lw	s2,16(sp)
2000109c:	44d2                	lw	s1,20(sp)
2000109e:	4462                	lw	s0,24(sp)
200010a0:	40f2                	lw	ra,28(sp)
200010a2:	6105                	addi	sp,sp,32
200010a4:	8082                	ret

200010a6 <spi_memcpy>:
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:514
                         uint8_t *byte_buf, size_t buf_len, bool is_recv) {
200010a6:	7139                	addi	sp,sp,-64
200010a8:	de06                	sw	ra,60(sp)
200010aa:	dc22                	sw	s0,56(sp)
200010ac:	da26                	sw	s1,52(sp)
200010ae:	d84a                	sw	s2,48(sp)
200010b0:	d64e                	sw	s3,44(sp)
200010b2:	d452                	sw	s4,40(sp)
200010b4:	d256                	sw	s5,36(sp)
200010b6:	d05a                	sw	s6,32(sp)
200010b8:	ce5e                	sw	s7,28(sp)
200010ba:	cc62                	sw	s8,24(sp)
200010bc:	ca66                	sw	s9,20(sp)
200010be:	c86a                	sw	s10,16(sp)
200010c0:	c66e                	sw	s11,12(sp)
200010c2:	89c2                	mv	s3,a6
200010c4:	893e                	mv	s2,a5
200010c6:	8d3a                	mv	s10,a4
200010c8:	8a36                	mv	s4,a3
200010ca:	8b2e                	mv	s6,a1
200010cc:	8aaa                	mv	s5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:515
  uint16_t bytes_left = fifo_bytes_in_use(*fifo, fifo_len);
200010ce:	0025d503          	lhu	a0,2(a1)
200010d2:	0005d583          	lhu	a1,0(a1)
200010d6:	006b5683          	lhu	a3,6(s6)
200010da:	004b5703          	lhu	a4,4(s6)
200010de:	0542                	slli	a0,a0,0x10
200010e0:	8dc9                	or	a1,a1,a0
200010e2:	06c2                	slli	a3,a3,0x10
200010e4:	8f55                	or	a4,a4,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
200010e6:	8d35                	xor	a0,a0,a3
200010e8:	053e                	slli	a0,a0,0xf
200010ea:	857d                	srai	a0,a0,0x1f
200010ec:	8d99                	sub	a1,a1,a4
200010ee:	01457533          	and	a0,a0,s4
200010f2:	952e                	add	a0,a0,a1
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:517
  if (!is_recv) {
200010f4:	00081463          	bnez	a6,200010fc <spi_memcpy+0x56>
200010f8:	40aa0533          	sub	a0,s4,a0
200010fc:	65c1                	lui	a1,0x10
200010fe:	15fd                	addi	a1,a1,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:521
  if (bytes_left > buf_len) {
20001100:	00b576b3          	and	a3,a0,a1
20001104:	00d96363          	bltu	s2,a3,2000110a <spi_memcpy+0x64>
20001108:	892a                	mv	s2,a0
2000110a:	00b97533          	and	a0,s2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
2000110e:	cd25                	beqz	a0,20001186 <spi_memcpy+0xe0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:533
  if (is_recv) {
20001110:	00098363          	beqz	s3,20001116 <spi_memcpy+0x70>
20001114:	0b11                	addi	s6,s6,4
20001116:	6585                	lui	a1,0x1
20001118:	00b60bb3          	add	s7,a2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
2000111c:	000b5503          	lhu	a0,0(s6)
20001120:	6641                	lui	a2,0x10
20001122:	fff60c13          	addi	s8,a2,-1 # ffff <_stack_size+0xdfff>
20001126:	fff58c93          	addi	s9,a1,-1 # fff <__DYNAMIC+0xfff>
2000112a:	844a                	mv	s0,s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
2000112c:	01847633          	and	a2,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
20001130:	018575b3          	and	a1,a0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:545
    const uint32_t bytes_until_wrap = fifo_len - ptr->offset;
20001134:	40ba04b3          	sub	s1,s4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:547
    if (bytes_to_copy > bytes_until_wrap) {
20001138:	00c4e363          	bltu	s1,a2,2000113e <spi_memcpy+0x98>
2000113c:	84a2                	mv	s1,s0
2000113e:	000aa503          	lw	a0,0(s5)
20001142:	95de                	add	a1,a1,s7
20001144:	0184fdb3          	and	s11,s1,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
20001148:	866a                	mv	a2,s10
2000114a:	86ee                	mv	a3,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:550
    if (is_recv) {
2000114c:	00098563          	beqz	s3,20001156 <spi_memcpy+0xb0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:552
      mmio_region_memcpy_from_mmio32(spi->params.base_addr, mmio_offset,
20001150:	639000ef          	jal	ra,20001f88 <mmio_region_memcpy_from_mmio32>
20001154:	a019                	j	2000115a <spi_memcpy+0xb4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
20001156:	705000ef          	jal	ra,2000205a <mmio_region_memcpy_to_mmio32>
fifo_ptr_increment():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:355
  uint32_t inc_with_overflow = ptr->offset + increment;
2000115a:	000b5503          	lhu	a0,0(s6)
2000115e:	956e                	add	a0,a0,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:357
  if (inc_with_overflow >= fifo_len) {
20001160:	01456a63          	bltu	a0,s4,20001174 <spi_memcpy+0xce>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
20001164:	002b0583          	lb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:358
    inc_with_overflow -= fifo_len;
20001168:	41450533          	sub	a0,a0,s4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
2000116c:	0015c593          	xori	a1,a1,1
20001170:	00bb0123          	sb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:362
  ptr->offset = inc_with_overflow & kFifoOffsetMask;
20001174:	01957533          	and	a0,a0,s9
20001178:	00ab1023          	sh	a0,0(s6)
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:561
    bytes_left -= bytes_to_copy;
2000117c:	8c05                	sub	s0,s0,s1
2000117e:	018475b3          	and	a1,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:560
    byte_buf += bytes_to_copy;
20001182:	9d6e                	add	s10,s10,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
20001184:	f5c5                	bnez	a1,2000112c <spi_memcpy+0x86>
20001186:	6541                	lui	a0,0x10
20001188:	157d                	addi	a0,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
2000118a:	00a97533          	and	a0,s2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:565
}
2000118e:	4db2                	lw	s11,12(sp)
20001190:	4d42                	lw	s10,16(sp)
20001192:	4cd2                	lw	s9,20(sp)
20001194:	4c62                	lw	s8,24(sp)
20001196:	4bf2                	lw	s7,28(sp)
20001198:	5b02                	lw	s6,32(sp)
2000119a:	5a92                	lw	s5,36(sp)
2000119c:	5a22                	lw	s4,40(sp)
2000119e:	59b2                	lw	s3,44(sp)
200011a0:	5942                	lw	s2,48(sp)
200011a2:	54d2                	lw	s1,52(sp)
200011a4:	5462                	lw	s0,56(sp)
200011a6:	50f2                	lw	ra,60(sp)
200011a8:	6121                	addi	sp,sp,64
200011aa:	8082                	ret

200011ac <dif_spi_device_send>:
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:592

dif_spi_device_result_t dif_spi_device_send(const dif_spi_device_t *spi,
                                            const void *buf, size_t buf_len,
                                            size_t *bytes_sent) {
200011ac:	1101                	addi	sp,sp,-32
200011ae:	ce06                	sw	ra,28(sp)
200011b0:	cc22                	sw	s0,24(sp)
200011b2:	ca26                	sw	s1,20(sp)
200011b4:	c84a                	sw	s2,16(sp)
200011b6:	842a                	mv	s0,a0
200011b8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:593
  if (spi == NULL || buf == NULL) {
200011ba:	c835                	beqz	s0,2000122e <dif_spi_device_send+0x82>
200011bc:	872e                	mv	a4,a1
200011be:	c9a5                	beqz	a1,2000122e <dif_spi_device_send+0x82>
200011c0:	8936                	mv	s2,a3
200011c2:	8832                	mv	a6,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
200011c4:	4008                	lw	a0,0(s0)
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:598
    return kDifSpiDeviceBadArg;
  }

  // Start of the TX FIFO is the end of the RX FIFO.
  uint16_t fifo_base = spi->rx_fifo_len;
200011c6:	00445603          	lhu	a2,4(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:599
  uint16_t fifo_len = spi->tx_fifo_len;
200011ca:	00645683          	lhu	a3,6(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200011ce:	5148                	lw	a0,36(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
200011d0:	01055593          	srli	a1,a0,0x10
200011d4:	6785                	lui	a5,0x1
200011d6:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
200011d8:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
200011da:	8fe9                	and	a5,a5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
200011dc:	00c55493          	srli	s1,a0,0xc
200011e0:	68c1                	lui	a7,0x10
200011e2:	0114f4b3          	and	s1,s1,a7
200011e6:	8dc5                	or	a1,a1,s1
200011e8:	0512                	slli	a0,a0,0x4
200011ea:	01157533          	and	a0,a0,a7
200011ee:	8d5d                	or	a0,a0,a5
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:600
  fifo_ptrs_t fifo = decompress_ptrs(spi, kTxFifoParams);
200011f0:	c42e                	sw	a1,8(sp)
200011f2:	c62a                	sw	a0,12(sp)
200011f4:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:602

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
200011f6:	8522                	mv	a0,s0
200011f8:	87c2                	mv	a5,a6
200011fa:	4801                	li	a6,0
200011fc:	356d                	jal	200010a6 <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:604
                            buf_len, /*is_recv=*/false);
  if (bytes_sent != NULL) {
200011fe:	00090463          	beqz	s2,20001206 <dif_spi_device_send+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:605
    *bytes_sent = bytes;
20001202:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:607
  }
  if (bytes > 0) {
20001206:	c11d                	beqz	a0,2000122c <dif_spi_device_send+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:609
    // Commit the new TX FIFO pointers.
    compress_ptrs(spi, kTxFifoParams, fifo);
20001208:	4522                	lw	a0,8(sp)
2000120a:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
2000120c:	00455613          	srli	a2,a0,0x4
20001210:	6685                	lui	a3,0x1
20001212:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
20001214:	0045d713          	srli	a4,a1,0x4
20001218:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
2000121a:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000121c:	0542                	slli	a0,a0,0x10
2000121e:	6641                	lui	a2,0x10
20001220:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
20001222:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
20001224:	8df1                	and	a1,a1,a2
20001226:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001228:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000122a:	d348                	sw	a0,36(a4)
2000122c:	4501                	li	a0,0
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:612
  }
  return kDifSpiDeviceOk;
}
2000122e:	4942                	lw	s2,16(sp)
20001230:	44d2                	lw	s1,20(sp)
20001232:	4462                	lw	s0,24(sp)
20001234:	40f2                	lw	ra,28(sp)
20001236:	6105                	addi	sp,sp,32
20001238:	8082                	ret
	...

2000123c <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
2000123c:	7139                	addi	sp,sp,-64
2000123e:	ce06                	sw	ra,28(sp)
20001240:	cc22                	sw	s0,24(sp)
20001242:	ca26                	sw	s1,20(sp)
20001244:	c84a                	sw	s2,16(sp)
20001246:	892a                	mv	s2,a0
20001248:	de46                	sw	a7,60(sp)
2000124a:	dc42                	sw	a6,56(sp)
2000124c:	da3e                	sw	a5,52(sp)
2000124e:	d83a                	sw	a4,48(sp)
20001250:	d636                	sw	a3,44(sp)
20001252:	d432                	sw	a2,40(sp)
20001254:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
20001256:	4144                	lw	s1,4(a0)
20001258:	80000537          	lui	a0,0x80000
2000125c:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffccf3>
20001260:	8526                	mv	a0,s1
20001262:	4581                	li	a1,0
20001264:	865ff0ef          	jal	ra,20000ac8 <memchr>
20001268:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
2000126c:	02f00593          	li	a1,47
20001270:	8526                	mv	a0,s1
20001272:	86fff0ef          	jal	ra,20000ae0 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001276:	00092583          	lw	a1,0(s2)
2000127a:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
2000127c:	00b66b63          	bltu	a2,a1,20001292 <base_log_internal_core+0x56>
20001280:	058a                	slli	a1,a1,0x2
20001282:	00001617          	auipc	a2,0x1
20001286:	42e60613          	addi	a2,a2,1070 # 200026b0 <kDifSpiDeviceBufferLen+0x4>
2000128a:	95b2                	add	a1,a1,a2
2000128c:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
2000128e:	e519                	bnez	a0,2000129c <base_log_internal_core+0x60>
20001290:	a801                	j	200012a0 <base_log_internal_core+0x64>
20001292:	00002597          	auipc	a1,0x2
20001296:	ed158593          	addi	a1,a1,-303 # 20003163 <__clz_tab+0x97f>
2000129a:	c119                	beqz	a0,200012a0 <base_log_internal_core+0x64>
2000129c:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
200012a0:	effff417          	auipc	s0,0xeffff
200012a4:	d7840413          	addi	s0,s0,-648 # 10000018 <base_log_internal_core.global_log_counter>
200012a8:	00045603          	lhu	a2,0(s0)
200012ac:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200012b0:	00002517          	auipc	a0,0x2
200012b4:	e9a50513          	addi	a0,a0,-358 # 2000314a <__clz_tab+0x966>
200012b8:	86a6                	mv	a3,s1
200012ba:	28d1                	jal	2000138e <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
200012bc:	00041503          	lh	a0,0(s0)
200012c0:	0505                	addi	a0,a0,1
200012c2:	00a41023          	sh	a0,0(s0)
200012c6:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
200012c8:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
200012ca:	01092503          	lw	a0,16(s2)
200012ce:	28c5                	jal	200013be <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
200012d0:	00002517          	auipc	a0,0x2
200012d4:	e8850513          	addi	a0,a0,-376 # 20003158 <__clz_tab+0x974>
200012d8:	285d                	jal	2000138e <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
200012da:	4942                	lw	s2,16(sp)
200012dc:	44d2                	lw	s1,20(sp)
200012de:	4462                	lw	s0,24(sp)
200012e0:	40f2                	lw	ra,28(sp)
200012e2:	6121                	addi	sp,sp,64
200012e4:	8082                	ret

200012e6 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
200012e6:	1101                	addi	sp,sp,-32
200012e8:	ce46                	sw	a7,28(sp)
200012ea:	cc42                	sw	a6,24(sp)
200012ec:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
200012ee:	00001797          	auipc	a5,0x1
200012f2:	4ca78793          	addi	a5,a5,1226 # 200027b8 <kDeviceLogBypassUartAddress>
200012f6:	439c                	lw	a5,0(a5)
200012f8:	c83a                	sw	a4,16(sp)
200012fa:	c636                	sw	a3,12(sp)
200012fc:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012fe:	c388                	sw	a0,0(a5)
20001300:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20001302:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001304:	c989                	beqz	a1,20001316 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20001306:	4512                	lw	a0,4(sp)
20001308:	00450613          	addi	a2,a0,4
2000130c:	c232                	sw	a2,4(sp)
2000130e:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001310:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001312:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001314:	f9ed                	bnez	a1,20001306 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20001316:	6105                	addi	sp,sp,32
20001318:	8082                	ret
	...

2000131c <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
2000131c:	e589                	bnez	a1,20001326 <base_set_stdout+0xa>
2000131e:	00000597          	auipc	a1,0x0
20001322:	01658593          	addi	a1,a1,22 # 20001334 <base_dev_null>
20001326:	effff617          	auipc	a2,0xeffff
2000132a:	cda60613          	addi	a2,a2,-806 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
2000132e:	c208                	sw	a0,0(a2)
20001330:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
20001332:	8082                	ret

20001334 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
20001334:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
20001336:	8082                	ret

20001338 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
20001338:	effff597          	auipc	a1,0xeffff
2000133c:	cc858593          	addi	a1,a1,-824 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
20001340:	c188                	sw	a0,0(a1)
20001342:	00000517          	auipc	a0,0x0
20001346:	00c50513          	addi	a0,a0,12 # 2000134e <base_dev_uart>
2000134a:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
2000134c:	8082                	ret

2000134e <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
2000134e:	1101                	addi	sp,sp,-32
20001350:	ce06                	sw	ra,28(sp)
20001352:	cc22                	sw	s0,24(sp)
20001354:	ca26                	sw	s1,20(sp)
20001356:	c84a                	sw	s2,16(sp)
20001358:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
2000135a:	c20d                	beqz	a2,2000137c <base_dev_uart+0x2e>
2000135c:	8432                	mv	s0,a2
2000135e:	892e                	mv	s2,a1
20001360:	89aa                	mv	s3,a0
20001362:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
20001364:	00990533          	add	a0,s2,s1
20001368:	00054583          	lbu	a1,0(a0)
2000136c:	854e                	mv	a0,s3
2000136e:	2f19                	jal	20001a84 <dif_uart_byte_send_polled>
20001370:	e519                	bnez	a0,2000137e <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
20001372:	0485                	addi	s1,s1,1
20001374:	fe9418e3          	bne	s0,s1,20001364 <base_dev_uart+0x16>
20001378:	84a2                	mv	s1,s0
2000137a:	a011                	j	2000137e <base_dev_uart+0x30>
2000137c:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
2000137e:	8526                	mv	a0,s1
20001380:	49b2                	lw	s3,12(sp)
20001382:	4942                	lw	s2,16(sp)
20001384:	44d2                	lw	s1,20(sp)
20001386:	4462                	lw	s0,24(sp)
20001388:	40f2                	lw	ra,28(sp)
2000138a:	6105                	addi	sp,sp,32
2000138c:	8082                	ret

2000138e <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
2000138e:	7179                	addi	sp,sp,-48
20001390:	c606                	sw	ra,12(sp)
20001392:	d646                	sw	a7,44(sp)
20001394:	d442                	sw	a6,40(sp)
20001396:	d23e                	sw	a5,36(sp)
20001398:	d03a                	sw	a4,32(sp)
2000139a:	ce36                	sw	a3,28(sp)
2000139c:	cc32                	sw	a2,24(sp)
2000139e:	ca2e                	sw	a1,20(sp)
200013a0:	effff597          	auipc	a1,0xeffff
200013a4:	c6058593          	addi	a1,a1,-928 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
200013a8:	4190                	lw	a2,0(a1)
200013aa:	41cc                	lw	a1,4(a1)
200013ac:	872a                	mv	a4,a0
200013ae:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
200013b0:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200013b2:	8532                	mv	a0,a2
200013b4:	863a                	mv	a2,a4
200013b6:	200d                	jal	200013d8 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
200013b8:	40b2                	lw	ra,12(sp)
200013ba:	6145                	addi	sp,sp,48
200013bc:	8082                	ret

200013be <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
200013be:	effff697          	auipc	a3,0xeffff
200013c2:	c4268693          	addi	a3,a3,-958 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
200013c6:	4290                	lw	a2,0(a3)
200013c8:	42d4                	lw	a3,4(a3)
200013ca:	872e                	mv	a4,a1
200013cc:	87aa                	mv	a5,a0
200013ce:	8532                	mv	a0,a2
200013d0:	85b6                	mv	a1,a3
200013d2:	863e                	mv	a2,a5
200013d4:	86ba                	mv	a3,a4
200013d6:	a009                	j	200013d8 <base_vfprintf>

200013d8 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
200013d8:	7139                	addi	sp,sp,-64
200013da:	de06                	sw	ra,60(sp)
200013dc:	dc22                	sw	s0,56(sp)
200013de:	da26                	sw	s1,52(sp)
200013e0:	d84a                	sw	s2,48(sp)
200013e2:	d64e                	sw	s3,44(sp)
200013e4:	d452                	sw	s4,40(sp)
200013e6:	d256                	sw	s5,36(sp)
200013e8:	d05a                	sw	s6,32(sp)
200013ea:	ce5e                	sw	s7,28(sp)
200013ec:	cc62                	sw	s8,24(sp)
200013ee:	ca66                	sw	s9,20(sp)
200013f0:	c86a                	sw	s10,16(sp)
200013f2:	c66e                	sw	s11,12(sp)
200013f4:	8bb2                	mv	s7,a2
200013f6:	892a                	mv	s2,a0
200013f8:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
200013fa:	c199                	beqz	a1,20001400 <base_vfprintf+0x28>
200013fc:	89ae                	mv	s3,a1
200013fe:	a029                	j	20001408 <base_vfprintf+0x30>
20001400:	00000997          	auipc	s3,0x0
20001404:	f3498993          	addi	s3,s3,-204 # 20001334 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001408:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
2000140a:	000bc503          	lbu	a0,0(s7)
2000140e:	28050f63          	beqz	a0,200016ac <base_vfprintf+0x2d4>
20001412:	4b01                	li	s6,0
20001414:	02500c13          	li	s8,37
20001418:	4ca5                	li	s9,9
2000141a:	02000d13          	li	s10,32
2000141e:	06800d93          	li	s11,104
20001422:	00002a17          	auipc	s4,0x2
20001426:	d43a0a13          	addi	s4,s4,-701 # 20003165 <__clz_tab+0x981>
2000142a:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
2000142c:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
2000142e:	0ff57413          	andi	s0,a0,255
20001432:	01840963          	beq	s0,s8,20001444 <base_vfprintf+0x6c>
20001436:	c419                	beqz	s0,20001444 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
20001438:	009b8533          	add	a0,s7,s1
2000143c:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
20001440:	0485                	addi	s1,s1,1
20001442:	b7f5                	j	2000142e <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
20001444:	c491                	beqz	s1,20001450 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
20001446:	854a                	mv	a0,s2
20001448:	85de                	mv	a1,s7
2000144a:	8626                	mv	a2,s1
2000144c:	9982                	jalr	s3
2000144e:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
20001450:	24040f63          	beqz	s0,200016ae <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
20001454:	009b8633          	add	a2,s7,s1
20001458:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000145c:	22050f63          	beqz	a0,2000169a <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001460:	fd050593          	addi	a1,a0,-48
20001464:	0ff5f593          	andi	a1,a1,255
20001468:	00bcf863          	bgeu	s9,a1,20001478 <base_vfprintf+0xa0>
2000146c:	4401                	li	s0,0
2000146e:	4581                	li	a1,0
20001470:	4605                	li	a2,1
20001472:	028d7f63          	bgeu	s10,s0,200014b0 <base_vfprintf+0xd8>
20001476:	aca1                	j	200016ce <base_vfprintf+0x2f6>
20001478:	4581                	li	a1,0
2000147a:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
2000147c:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
2000147e:	00b606b3          	add	a3,a2,a1
20001482:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
20001486:	20068a63          	beqz	a3,2000169a <base_vfprintf+0x2c2>
2000148a:	0ff57513          	andi	a0,a0,255
2000148e:	03540733          	mul	a4,s0,s5
20001492:	953a                	add	a0,a0,a4
20001494:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001498:	fd068513          	addi	a0,a3,-48
2000149c:	0ff57713          	andi	a4,a0,255
200014a0:	0585                	addi	a1,a1,1
200014a2:	8536                	mv	a0,a3
200014a4:	fcecfde3          	bgeu	s9,a4,2000147e <base_vfprintf+0xa6>
200014a8:	4601                	li	a2,0
200014aa:	8536                	mv	a0,a3
200014ac:	228d6163          	bltu	s10,s0,200016ce <base_vfprintf+0x2f6>
200014b0:	008036b3          	snez	a3,s0
200014b4:	8e55                	or	a2,a2,a3
200014b6:	20060c63          	beqz	a2,200016ce <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200014ba:	95de                	add	a1,a1,s7
200014bc:	95a6                	add	a1,a1,s1
200014be:	00258b93          	addi	s7,a1,2
200014c2:	02adce63          	blt	s11,a0,200014fe <base_vfprintf+0x126>
200014c6:	06100593          	li	a1,97
200014ca:	06a5d563          	bge	a1,a0,20001534 <base_vfprintf+0x15c>
200014ce:	06300593          	li	a1,99
200014d2:	0ca5cb63          	blt	a1,a0,200015a8 <base_vfprintf+0x1d0>
200014d6:	06200593          	li	a1,98
200014da:	14b50a63          	beq	a0,a1,2000162e <base_vfprintf+0x256>
200014de:	06300593          	li	a1,99
200014e2:	18b51f63          	bne	a0,a1,20001680 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
200014e6:	4502                	lw	a0,0(sp)
200014e8:	00450593          	addi	a1,a0,4
200014ec:	c02e                	sw	a1,0(sp)
200014ee:	4108                	lw	a0,0(a0)
200014f0:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
200014f4:	4605                	li	a2,1
200014f6:	854a                	mv	a0,s2
200014f8:	00b10593          	addi	a1,sp,11
200014fc:	aa41                	j	2000168c <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200014fe:	07200593          	li	a1,114
20001502:	04a5dd63          	bge	a1,a0,2000155c <base_vfprintf+0x184>
20001506:	07700593          	li	a1,119
2000150a:	0aa5c663          	blt	a1,a0,200015b6 <base_vfprintf+0x1de>
2000150e:	07300593          	li	a1,115
20001512:	12b50963          	beq	a0,a1,20001644 <base_vfprintf+0x26c>
20001516:	07500593          	li	a1,117
2000151a:	16b51363          	bne	a0,a1,20001680 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
2000151e:	4502                	lw	a0,0(sp)
20001520:	00450593          	addi	a1,a0,4
20001524:	c02e                	sw	a1,0(sp)
20001526:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001528:	00001797          	auipc	a5,0x1
2000152c:	1b578793          	addi	a5,a5,437 # 200026dd <kDigitsLow>
20001530:	4729                	li	a4,10
20001532:	a8cd                	j	20001624 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001534:	13850763          	beq	a0,s8,20001662 <base_vfprintf+0x28a>
20001538:	04800593          	li	a1,72
2000153c:	00b50663          	beq	a0,a1,20001548 <base_vfprintf+0x170>
20001540:	05800593          	li	a1,88
20001544:	12b51e63          	bne	a0,a1,20001680 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
20001548:	4502                	lw	a0,0(sp)
2000154a:	00450593          	addi	a1,a0,4
2000154e:	c02e                	sw	a1,0(sp)
20001550:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
20001552:	00001797          	auipc	a5,0x1
20001556:	19b78793          	addi	a5,a5,411 # 200026ed <kDigitsHigh>
2000155a:	a0e1                	j	20001622 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000155c:	06900593          	li	a1,105
20001560:	06b50d63          	beq	a0,a1,200015da <base_vfprintf+0x202>
20001564:	06f00593          	li	a1,111
20001568:	10b50163          	beq	a0,a1,2000166a <base_vfprintf+0x292>
2000156c:	07000593          	li	a1,112
20001570:	10b51863          	bne	a0,a1,20001680 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
20001574:	00002597          	auipc	a1,0x2
20001578:	bf558593          	addi	a1,a1,-1035 # 20003169 <__clz_tab+0x985>
2000157c:	4609                	li	a2,2
2000157e:	854a                	mv	a0,s2
20001580:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
20001582:	4582                	lw	a1,0(sp)
20001584:	00458613          	addi	a2,a1,4
20001588:	c032                	sw	a2,0(sp)
2000158a:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
2000158c:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001590:	00001797          	auipc	a5,0x1
20001594:	14d78793          	addi	a5,a5,333 # 200026dd <kDigitsLow>
20001598:	46a1                	li	a3,8
2000159a:	4741                	li	a4,16
2000159c:	854a                	mv	a0,s2
2000159e:	85ce                	mv	a1,s3
200015a0:	2a5d                	jal	20001756 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
200015a2:	00a40b33          	add	s6,s0,a0
200015a6:	a0ed                	j	20001690 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200015a8:	06400593          	li	a1,100
200015ac:	02b50763          	beq	a0,a1,200015da <base_vfprintf+0x202>
200015b0:	07b50063          	beq	a0,s11,20001610 <base_vfprintf+0x238>
200015b4:	a0f1                	j	20001680 <base_vfprintf+0x2a8>
200015b6:	07800593          	li	a1,120
200015ba:	04b50b63          	beq	a0,a1,20001610 <base_vfprintf+0x238>
200015be:	07a00593          	li	a1,122
200015c2:	0ab51f63          	bne	a0,a1,20001680 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
200015c6:	4502                	lw	a0,0(sp)
200015c8:	00450593          	addi	a1,a0,4
200015cc:	c02e                	sw	a1,0(sp)
200015ce:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
200015d0:	00850593          	addi	a1,a0,8
200015d4:	c02e                	sw	a1,0(sp)
200015d6:	414c                	lw	a1,4(a0)
200015d8:	a84d                	j	2000168a <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
200015da:	4502                	lw	a0,0(sp)
200015dc:	00450593          	addi	a1,a0,4
200015e0:	c02e                	sw	a1,0(sp)
200015e2:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
200015e4:	557d                	li	a0,-1
200015e6:	00954c63          	blt	a0,s1,200015fe <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
200015ea:	00002597          	auipc	a1,0x2
200015ee:	b7d58593          	addi	a1,a1,-1155 # 20003167 <__clz_tab+0x983>
200015f2:	4605                	li	a2,1
200015f4:	854a                	mv	a0,s2
200015f6:	9982                	jalr	s3
200015f8:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
200015fa:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
200015fe:	00001797          	auipc	a5,0x1
20001602:	0df78793          	addi	a5,a5,223 # 200026dd <kDigitsLow>
20001606:	4729                	li	a4,10
20001608:	854a                	mv	a0,s2
2000160a:	85ce                	mv	a1,s3
2000160c:	8626                	mv	a2,s1
2000160e:	a829                	j	20001628 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20001610:	4502                	lw	a0,0(sp)
20001612:	00450593          	addi	a1,a0,4
20001616:	c02e                	sw	a1,0(sp)
20001618:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
2000161a:	00001797          	auipc	a5,0x1
2000161e:	0c378793          	addi	a5,a5,195 # 200026dd <kDigitsLow>
20001622:	4741                	li	a4,16
20001624:	854a                	mv	a0,s2
20001626:	85ce                	mv	a1,s3
20001628:	86a2                	mv	a3,s0
2000162a:	2235                	jal	20001756 <write_digits>
2000162c:	a08d                	j	2000168e <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
2000162e:	4502                	lw	a0,0(sp)
20001630:	00450593          	addi	a1,a0,4
20001634:	c02e                	sw	a1,0(sp)
20001636:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
20001638:	00001797          	auipc	a5,0x1
2000163c:	0a578793          	addi	a5,a5,165 # 200026dd <kDigitsLow>
20001640:	4709                	li	a4,2
20001642:	b7cd                	j	20001624 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
20001644:	4502                	lw	a0,0(sp)
20001646:	00450593          	addi	a1,a0,4
2000164a:	c02e                	sw	a1,0(sp)
2000164c:	410c                	lw	a1,0(a0)
2000164e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
20001650:	00a58633          	add	a2,a1,a0
20001654:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
20001658:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
2000165a:	fa7d                	bnez	a2,20001650 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
2000165c:	fff50613          	addi	a2,a0,-1
20001660:	a02d                	j	2000168a <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
20001662:	4605                	li	a2,1
20001664:	854a                	mv	a0,s2
20001666:	85d2                	mv	a1,s4
20001668:	a015                	j	2000168c <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
2000166a:	4502                	lw	a0,0(sp)
2000166c:	00450593          	addi	a1,a0,4
20001670:	c02e                	sw	a1,0(sp)
20001672:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
20001674:	00001797          	auipc	a5,0x1
20001678:	06978793          	addi	a5,a5,105 # 200026dd <kDigitsLow>
2000167c:	4721                	li	a4,8
2000167e:	b75d                	j	20001624 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20001680:	00001597          	auipc	a1,0x1
20001684:	07d58593          	addi	a1,a1,125 # 200026fd <kUnknownSpec>
20001688:	463d                	li	a2,15
2000168a:	854a                	mv	a0,s2
2000168c:	9982                	jalr	s3
2000168e:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001690:	000bc503          	lbu	a0,0(s7)
20001694:	d8051ce3          	bnez	a0,2000142c <base_vfprintf+0x54>
20001698:	a819                	j	200016ae <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
2000169a:	00001597          	auipc	a1,0x1
2000169e:	02658593          	addi	a1,a1,38 # 200026c0 <kErrorNul>
200016a2:	4645                	li	a2,17
200016a4:	854a                	mv	a0,s2
200016a6:	9982                	jalr	s3
200016a8:	9b2a                	add	s6,s6,a0
200016aa:	a011                	j	200016ae <base_vfprintf+0x2d6>
200016ac:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
200016ae:	855a                	mv	a0,s6
200016b0:	4db2                	lw	s11,12(sp)
200016b2:	4d42                	lw	s10,16(sp)
200016b4:	4cd2                	lw	s9,20(sp)
200016b6:	4c62                	lw	s8,24(sp)
200016b8:	4bf2                	lw	s7,28(sp)
200016ba:	5b02                	lw	s6,32(sp)
200016bc:	5a92                	lw	s5,36(sp)
200016be:	5a22                	lw	s4,40(sp)
200016c0:	59b2                	lw	s3,44(sp)
200016c2:	5942                	lw	s2,48(sp)
200016c4:	54d2                	lw	s1,52(sp)
200016c6:	5462                	lw	s0,56(sp)
200016c8:	50f2                	lw	ra,60(sp)
200016ca:	6121                	addi	sp,sp,64
200016cc:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
200016ce:	00001597          	auipc	a1,0x1
200016d2:	00358593          	addi	a1,a1,3 # 200026d1 <kErrorTooWide>
200016d6:	4631                	li	a2,12
200016d8:	b7f1                	j	200016a4 <base_vfprintf+0x2cc>

200016da <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
200016da:	7179                	addi	sp,sp,-48
200016dc:	ca06                	sw	ra,20(sp)
200016de:	d646                	sw	a7,44(sp)
200016e0:	d442                	sw	a6,40(sp)
200016e2:	d23e                	sw	a5,36(sp)
200016e4:	d03a                	sw	a4,32(sp)
200016e6:	ce36                	sw	a3,28(sp)
200016e8:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
200016ea:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
200016ec:	c42a                	sw	a0,8(sp)
200016ee:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
200016f0:	00000597          	auipc	a1,0x0
200016f4:	01258593          	addi	a1,a1,18 # 20001702 <snprintf_sink>
200016f8:	0028                	addi	a0,sp,8
200016fa:	39f9                	jal	200013d8 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
200016fc:	40d2                	lw	ra,20(sp)
200016fe:	6145                	addi	sp,sp,48
20001700:	8082                	ret

20001702 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20001702:	1141                	addi	sp,sp,-16
20001704:	c606                	sw	ra,12(sp)
20001706:	c422                	sw	s0,8(sp)
20001708:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
2000170a:	4140                	lw	s0,4(a0)
2000170c:	c00d                	beqz	s0,2000172e <snprintf_sink+0x2c>
2000170e:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20001710:	00c46363          	bltu	s0,a2,20001716 <snprintf_sink+0x14>
20001714:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20001716:	4088                	lw	a0,0(s1)
20001718:	8622                	mv	a2,s0
2000171a:	b5eff0ef          	jal	ra,20000a78 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
2000171e:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001720:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001722:	9522                	add	a0,a0,s0
20001724:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001726:	40858533          	sub	a0,a1,s0
2000172a:	c0c8                	sw	a0,4(s1)
2000172c:	a011                	j	20001730 <snprintf_sink+0x2e>
2000172e:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20001730:	8522                	mv	a0,s0
20001732:	4492                	lw	s1,4(sp)
20001734:	4422                	lw	s0,8(sp)
20001736:	40b2                	lw	ra,12(sp)
20001738:	0141                	addi	sp,sp,16
2000173a:	8082                	ret

2000173c <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
2000173c:	1101                	addi	sp,sp,-32
2000173e:	c206                	sw	ra,4(sp)
20001740:	ce46                	sw	a7,28(sp)
20001742:	cc42                	sw	a6,24(sp)
20001744:	ca3e                	sw	a5,20(sp)
20001746:	c83a                	sw	a4,16(sp)
20001748:	c636                	sw	a3,12(sp)
2000174a:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
2000174c:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
2000174e:	3169                	jal	200013d8 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001750:	4092                	lw	ra,4(sp)
20001752:	6105                	addi	sp,sp,32
20001754:	8082                	ret

20001756 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001756:	7139                	addi	sp,sp,-64
20001758:	de06                	sw	ra,60(sp)
2000175a:	dc22                	sw	s0,56(sp)
2000175c:	da26                	sw	s1,52(sp)
2000175e:	d84a                	sw	s2,48(sp)
20001760:	d64e                	sw	s3,44(sp)
20001762:	892e                	mv	s2,a1
20001764:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001766:	ca05                	beqz	a2,20001796 <write_digits+0x40>
20001768:	4501                	li	a0,0
2000176a:	02b10813          	addi	a6,sp,43
2000176e:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001770:	02e65633          	divu	a2,a2,a4
20001774:	02e60433          	mul	s0,a2,a4
20001778:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
2000177c:	943e                	add	s0,s0,a5
2000177e:	00040403          	lb	s0,0(s0)
20001782:	00a805b3          	add	a1,a6,a0
20001786:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
2000178a:	157d                	addi	a0,a0,-1
2000178c:	fee4f1e3          	bgeu	s1,a4,2000176e <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001790:	40a00633          	neg	a2,a0
20001794:	a011                	j	20001798 <write_digits+0x42>
20001796:	4601                	li	a2,0
20001798:	4485                	li	s1,1
2000179a:	c291                	beqz	a3,2000179e <write_digits+0x48>
2000179c:	84b6                	mv	s1,a3
2000179e:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
200017a2:	00a4e463          	bltu	s1,a0,200017aa <write_digits+0x54>
200017a6:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200017aa:	02967063          	bgeu	a2,s1,200017ca <write_digits+0x74>
200017ae:	0068                	addi	a0,sp,12
200017b0:	8d05                	sub	a0,a0,s1
200017b2:	02050513          	addi	a0,a0,32
200017b6:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
200017ba:	03000593          	li	a1,48
200017be:	8622                	mv	a2,s0
200017c0:	aceff0ef          	jal	ra,20000a8e <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
200017c4:	147d                	addi	s0,s0,-1
200017c6:	fc7d                	bnez	s0,200017c4 <write_digits+0x6e>
200017c8:	8626                	mv	a2,s1
200017ca:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
200017cc:	8d11                	sub	a0,a0,a2
200017ce:	02050593          	addi	a1,a0,32
200017d2:	854e                	mv	a0,s3
200017d4:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
200017d6:	59b2                	lw	s3,44(sp)
200017d8:	5942                	lw	s2,48(sp)
200017da:	54d2                	lw	s1,52(sp)
200017dc:	5462                	lw	s0,56(sp)
200017de:	50f2                	lw	ra,60(sp)
200017e0:	6121                	addi	sp,sp,64
200017e2:	8082                	ret

200017e4 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
200017e4:	c581                	beqz	a1,200017ec <dif_uart_init+0x8>
200017e6:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
200017e8:	c188                	sw	a0,0(a1)
200017ea:	a011                	j	200017ee <dif_uart_init+0xa>
200017ec:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
200017ee:	8532                	mv	a0,a2
200017f0:	8082                	ret

200017f2 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
200017f2:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
200017f4:	c606                	sw	ra,12(sp)
200017f6:	c422                	sw	s0,8(sp)
200017f8:	c226                	sw	s1,4(sp)
200017fa:	c935                	beqz	a0,2000186e <dif_uart_configure+0x7c>
200017fc:	84ae                	mv	s1,a1
200017fe:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001800:	418c                	lw	a1,0(a1)
20001802:	450d                	li	a0,3
20001804:	c5b5                	beqz	a1,20001870 <dif_uart_configure+0x7e>
20001806:	40d0                	lw	a2,4(s1)
20001808:	c625                	beqz	a2,20001870 <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
2000180a:	01459513          	slli	a0,a1,0x14
2000180e:	81b1                	srli	a1,a1,0xc
20001810:	4681                	li	a3,0
20001812:	119000ef          	jal	ra,2000212a <__udivdi3>
20001816:	6641                	lui	a2,0x10
20001818:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
2000181a:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
2000181c:	8d31                	xor	a0,a0,a2
2000181e:	8dc9                	or	a1,a1,a0
20001820:	4511                	li	a0,4
20001822:	e5b9                	bnez	a1,20001870 <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20001824:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001826:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
2000182a:	4008                	lw	a0,0(s0)
2000182c:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000182e:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20001830:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001832:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001836:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001838:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
2000183c:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000183e:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20001842:	4008                	lw	a0,0(s0)
20001844:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001846:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20001848:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000184a:	01061513          	slli	a0,a2,0x10
2000184e:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20001852:	c291                	beqz	a3,20001856 <dif_uart_configure+0x64>
20001854:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001856:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001858:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
2000185a:	e219                	bnez	a2,20001860 <dif_uart_configure+0x6e>
2000185c:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20001860:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001862:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001864:	400c                	lw	a1,0(s0)
20001866:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001868:	0005a223          	sw	zero,4(a1)
2000186c:	a011                	j	20001870 <dif_uart_configure+0x7e>
2000186e:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001870:	4492                	lw	s1,4(sp)
20001872:	4422                	lw	s0,8(sp)
20001874:	40b2                	lw	ra,12(sp)
20001876:	0141                	addi	sp,sp,16
20001878:	8082                	ret

2000187a <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
2000187a:	1141                	addi	sp,sp,-16
2000187c:	c606                	sw	ra,12(sp)
2000187e:	c422                	sw	s0,8(sp)
20001880:	c226                	sw	s1,4(sp)
20001882:	84aa                	mv	s1,a0
20001884:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001886:	c09d                	beqz	s1,200018ac <dif_uart_irq_is_pending+0x32>
20001888:	8432                	mv	s0,a2
2000188a:	c20d                	beqz	a2,200018ac <dif_uart_irq_is_pending+0x32>
2000188c:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
2000188e:	852e                	mv	a0,a1
20001890:	85b2                	mv	a1,a2
20001892:	2015                	jal	200018b6 <uart_irq_offset_get>
20001894:	85aa                	mv	a1,a0
20001896:	4505                	li	a0,1
20001898:	c991                	beqz	a1,200018ac <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
2000189a:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000189c:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
2000189e:	4602                	lw	a2,0(sp)
200018a0:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200018a2:	00c5d5b3          	srl	a1,a1,a2
200018a6:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
200018a8:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
200018ac:	4492                	lw	s1,4(sp)
200018ae:	4422                	lw	s0,8(sp)
200018b0:	40b2                	lw	ra,12(sp)
200018b2:	0141                	addi	sp,sp,16
200018b4:	8082                	ret

200018b6 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
200018b6:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
200018b8:	00a66563          	bltu	a2,a0,200018c2 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
200018bc:	c188                	sw	a0,0(a1)
200018be:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
200018c0:	8082                	ret
200018c2:	4501                	li	a0,0
200018c4:	8082                	ret

200018c6 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
200018c6:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
200018c8:	c606                	sw	ra,12(sp)
200018ca:	c422                	sw	s0,8(sp)
200018cc:	c10d                	beqz	a0,200018ee <dif_uart_irq_acknowledge+0x28>
200018ce:	842a                	mv	s0,a0
200018d0:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200018d2:	852e                	mv	a0,a1
200018d4:	85b2                	mv	a1,a2
200018d6:	37c5                	jal	200018b6 <uart_irq_offset_get>
200018d8:	85aa                	mv	a1,a0
200018da:	4505                	li	a0,1
200018dc:	c991                	beqz	a1,200018f0 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200018de:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
200018e0:	4010                	lw	a2,0(s0)
200018e2:	4501                	li	a0,0
200018e4:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200018e6:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200018ea:	c20c                	sw	a1,0(a2)
200018ec:	a011                	j	200018f0 <dif_uart_irq_acknowledge+0x2a>
200018ee:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
200018f0:	4422                	lw	s0,8(sp)
200018f2:	40b2                	lw	ra,12(sp)
200018f4:	0141                	addi	sp,sp,16
200018f6:	8082                	ret

200018f8 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
200018f8:	c911                	beqz	a0,2000190c <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
200018fa:	c581                	beqz	a1,20001902 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
200018fc:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200018fe:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001900:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001902:	410c                	lw	a1,0(a0)
20001904:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001906:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
2000190a:	8082                	ret
2000190c:	4509                	li	a0,2
2000190e:	8082                	ret

20001910 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20001910:	862a                	mv	a2,a0
20001912:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20001914:	c611                	beqz	a2,20001920 <dif_uart_irq_restore_all+0x10>
20001916:	c589                	beqz	a1,20001920 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001918:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
2000191a:	4210                	lw	a2,0(a2)
2000191c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000191e:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20001920:	8082                	ret

20001922 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20001922:	1141                	addi	sp,sp,-16
20001924:	c606                	sw	ra,12(sp)
20001926:	c422                	sw	s0,8(sp)
20001928:	c226                	sw	s1,4(sp)
2000192a:	84aa                	mv	s1,a0
2000192c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
2000192e:	c485                	beqz	s1,20001956 <dif_uart_irq_get_enabled+0x34>
20001930:	8432                	mv	s0,a2
20001932:	c215                	beqz	a2,20001956 <dif_uart_irq_get_enabled+0x34>
20001934:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001936:	852e                	mv	a0,a1
20001938:	85b2                	mv	a1,a2
2000193a:	3fb5                	jal	200018b6 <uart_irq_offset_get>
2000193c:	85aa                	mv	a1,a0
2000193e:	4505                	li	a0,1
20001940:	c999                	beqz	a1,20001956 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001942:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001944:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001946:	4602                	lw	a2,0(sp)
20001948:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000194a:	00c5d5b3          	srl	a1,a1,a2
2000194e:	8985                	andi	a1,a1,1
20001950:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20001954:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001956:	4492                	lw	s1,4(sp)
20001958:	4422                	lw	s0,8(sp)
2000195a:	40b2                	lw	ra,12(sp)
2000195c:	0141                	addi	sp,sp,16
2000195e:	8082                	ret

20001960 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20001960:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20001962:	c606                	sw	ra,12(sp)
20001964:	c422                	sw	s0,8(sp)
20001966:	c226                	sw	s1,4(sp)
20001968:	c91d                	beqz	a0,2000199e <dif_uart_irq_set_enabled+0x3e>
2000196a:	8432                	mv	s0,a2
2000196c:	84aa                	mv	s1,a0
2000196e:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001970:	852e                	mv	a0,a1
20001972:	85b2                	mv	a1,a2
20001974:	3789                	jal	200018b6 <uart_irq_offset_get>
20001976:	85aa                	mv	a1,a0
20001978:	4505                	li	a0,1
2000197a:	c19d                	beqz	a1,200019a0 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
2000197c:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000197e:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001980:	4682                	lw	a3,0(sp)
20001982:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001984:	00143713          	seqz	a4,s0
20001988:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000198a:	00d797b3          	sll	a5,a5,a3
2000198e:	fff7c793          	not	a5,a5
20001992:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001994:	00d716b3          	sll	a3,a4,a3
20001998:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000199a:	c1d0                	sw	a2,4(a1)
2000199c:	a011                	j	200019a0 <dif_uart_irq_set_enabled+0x40>
2000199e:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
200019a0:	4492                	lw	s1,4(sp)
200019a2:	4422                	lw	s0,8(sp)
200019a4:	40b2                	lw	ra,12(sp)
200019a6:	0141                	addi	sp,sp,16
200019a8:	8082                	ret

200019aa <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
200019aa:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
200019ac:	c606                	sw	ra,12(sp)
200019ae:	c422                	sw	s0,8(sp)
200019b0:	c10d                	beqz	a0,200019d2 <dif_uart_irq_force+0x28>
200019b2:	842a                	mv	s0,a0
200019b4:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
200019b6:	852e                	mv	a0,a1
200019b8:	85b2                	mv	a1,a2
200019ba:	3df5                	jal	200018b6 <uart_irq_offset_get>
200019bc:	85aa                	mv	a1,a0
200019be:	4505                	li	a0,1
200019c0:	c991                	beqz	a1,200019d4 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
200019c2:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
200019c4:	4010                	lw	a2,0(s0)
200019c6:	4501                	li	a0,0
200019c8:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200019ca:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200019ce:	c60c                	sw	a1,8(a2)
200019d0:	a011                	j	200019d4 <dif_uart_irq_force+0x2a>
200019d2:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
200019d4:	4422                	lw	s0,8(sp)
200019d6:	40b2                	lw	ra,12(sp)
200019d8:	0141                	addi	sp,sp,16
200019da:	8082                	ret

200019dc <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200019dc:	cd09                	beqz	a0,200019f6 <dif_uart_watermark_rx_set+0x1a>
200019de:	4691                	li	a3,4
200019e0:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
200019e2:	00b6eb63          	bltu	a3,a1,200019f8 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
200019e6:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200019e8:	4d54                	lw	a3,28(a0)
200019ea:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
200019ec:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200019ee:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200019f0:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200019f2:	cd4c                	sw	a1,28(a0)
200019f4:	a011                	j	200019f8 <dif_uart_watermark_rx_set+0x1c>
200019f6:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
200019f8:	8532                	mv	a0,a2
200019fa:	8082                	ret

200019fc <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
200019fc:	cd11                	beqz	a0,20001a18 <dif_uart_watermark_tx_set+0x1c>
200019fe:	468d                	li	a3,3
20001a00:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001a02:	00b6ec63          	bltu	a3,a1,20001a1a <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001a06:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a08:	4d54                	lw	a3,28(a0)
20001a0a:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20001a0c:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001a0e:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001a12:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a14:	cd4c                	sw	a1,28(a0)
20001a16:	a011                	j	20001a1a <dif_uart_watermark_tx_set+0x1e>
20001a18:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001a1a:	8532                	mv	a0,a2
20001a1c:	8082                	ret

20001a1e <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001a1e:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20001a20:	c51d                	beqz	a0,20001a4e <dif_uart_bytes_send+0x30>
20001a22:	c595                	beqz	a1,20001a4e <dif_uart_bytes_send+0x30>
20001a24:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001a26:	c20d                	beqz	a2,20001a48 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001a28:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a2c:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001a30:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001a32:	eb19                	bnez	a4,20001a48 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20001a34:	00f58733          	add	a4,a1,a5
20001a38:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001a3c:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a3e:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001a42:	fef613e3          	bne	a2,a5,20001a28 <dif_uart_bytes_send+0xa>
20001a46:	87b2                	mv	a5,a2
20001a48:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001a4a:	c291                	beqz	a3,20001a4e <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001a4c:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001a4e:	853a                	mv	a0,a4
20001a50:	8082                	ret

20001a52 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001a52:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20001a54:	c515                	beqz	a0,20001a80 <dif_uart_bytes_receive+0x2e>
20001a56:	c60d                	beqz	a2,20001a80 <dif_uart_bytes_receive+0x2e>
20001a58:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a5a:	cd99                	beqz	a1,20001a78 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001a5c:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a5e:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a60:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a64:	eb91                	bnez	a5,20001a78 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a66:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001a68:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001a6c:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001a6e:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001a72:	ff0595e3          	bne	a1,a6,20001a5c <dif_uart_bytes_receive+0xa>
20001a76:	882e                	mv	a6,a1
20001a78:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001a7a:	c299                	beqz	a3,20001a80 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001a7c:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001a80:	853a                	mv	a0,a4
20001a82:	8082                	ret

20001a84 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001a84:	cd19                	beqz	a0,20001aa2 <dif_uart_byte_send_polled+0x1e>
20001a86:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a88:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a8a:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001a8c:	fef5                	bnez	a3,20001a88 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001a8e:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a90:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001a92:	e299                	bnez	a3,20001a98 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001a94:	ce0c                	sw	a1,24(a2)
20001a96:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001a98:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001a9a:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001a9c:	dd75                	beqz	a0,20001a98 <dif_uart_byte_send_polled+0x14>
20001a9e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001aa0:	8082                	ret
20001aa2:	4509                	li	a0,2
20001aa4:	8082                	ret

20001aa6 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001aa6:	862a                	mv	a2,a0
20001aa8:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001aaa:	c205                	beqz	a2,20001aca <dif_uart_byte_receive_polled+0x24>
20001aac:	cd99                	beqz	a1,20001aca <dif_uart_byte_receive_polled+0x24>
20001aae:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001ab0:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001ab2:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001ab6:	fd6d                	bnez	a0,20001ab0 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001ab8:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001aba:	02057693          	andi	a3,a0,32
20001abe:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001ac0:	e689                	bnez	a3,20001aca <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001ac2:	4a50                	lw	a2,20(a2)
20001ac4:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001ac6:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001aca:	8082                	ret

20001acc <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001acc:	862a                	mv	a2,a0
20001ace:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001ad0:	ca09                	beqz	a2,20001ae2 <dif_uart_rx_bytes_available+0x16>
20001ad2:	c981                	beqz	a1,20001ae2 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001ad4:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001ad6:	5110                	lw	a2,32(a0)
20001ad8:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001ada:	8241                	srli	a2,a2,0x10
20001adc:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001ae0:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001ae2:	8082                	ret

20001ae4 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001ae4:	862a                	mv	a2,a0
20001ae6:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001ae8:	ce01                	beqz	a2,20001b00 <dif_uart_tx_bytes_available+0x1c>
20001aea:	c999                	beqz	a1,20001b00 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001aec:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001aee:	5110                	lw	a2,32(a0)
20001af0:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001af2:	03f67613          	andi	a2,a2,63
20001af6:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001afa:	40c68633          	sub	a2,a3,a2
20001afe:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001b00:	8082                	ret

20001b02 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001b02:	c11d                	beqz	a0,20001b28 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001b04:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001b06:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001b08:	ffd5f693          	andi	a3,a1,-3
20001b0c:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001b10:	fff58713          	addi	a4,a1,-1
20001b14:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001b16:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001b1a:	00f77463          	bgeu	a4,a5,20001b22 <dif_uart_fifo_reset+0x20>
20001b1e:	0025e593          	ori	a1,a1,2
20001b22:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b24:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001b26:	8082                	ret
20001b28:	4509                	li	a0,2
20001b2a:	8082                	ret

20001b2c <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001b2c:	c515                	beqz	a0,20001b58 <dif_uart_loopback_set+0x2c>
20001b2e:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20001b30:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001b32:	0015b593          	seqz	a1,a1
20001b36:	4715                	li	a4,5
20001b38:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b3c:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001b3e:	00163613          	seqz	a2,a2
20001b42:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001b44:	00b797b3          	sll	a5,a5,a1
20001b48:	fff7c793          	not	a5,a5
20001b4c:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001b4e:	00b615b3          	sll	a1,a2,a1
20001b52:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001b54:	c54c                	sw	a1,12(a0)
20001b56:	a011                	j	20001b5a <dif_uart_loopback_set+0x2e>
20001b58:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001b5a:	8536                	mv	a0,a3
20001b5c:	8082                	ret

20001b5e <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001b5e:	862a                	mv	a2,a0
20001b60:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001b62:	ca11                	beqz	a2,20001b76 <dif_uart_enable_rx_timeout+0x18>
20001b64:	0185d693          	srli	a3,a1,0x18
20001b68:	e699                	bnez	a3,20001b76 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001b6a:	4210                	lw	a2,0(a2)
20001b6c:	4501                	li	a0,0
20001b6e:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001b72:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b74:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001b76:	8082                	ret

20001b78 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001b78:	c511                	beqz	a0,20001b84 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001b7a:	410c                	lw	a1,0(a0)
20001b7c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b7e:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001b82:	8082                	ret
20001b84:	4509                	li	a0,2
20001b86:	8082                	ret

20001b88 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001b88:	86aa                	mv	a3,a0
20001b8a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001b8c:	ce99                	beqz	a3,20001baa <dif_uart_get_rx_timeout+0x22>
20001b8e:	cd91                	beqz	a1,20001baa <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001b90:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001b92:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001b94:	fff6c513          	not	a0,a3
20001b98:	817d                	srli	a0,a0,0x1f
20001b9a:	c188                	sw	a0,0(a1)
20001b9c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001b9e:	c611                	beqz	a2,20001baa <dif_uart_get_rx_timeout+0x22>
20001ba0:	010005b7          	lui	a1,0x1000
20001ba4:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001ba6:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001ba8:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001baa:	8082                	ret

20001bac <pinmux_init>:
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:29
    reg_value++;
    reg_offset += 4;
  }
}

void pinmux_init(void) {
20001bac:	4509                	li	a0,2
20001bae:	404605b7          	lui	a1,0x40460
20001bb2:	0dc58593          	addi	a1,a1,220 # 404600dc <_data_init_start+0x2045cdd0>
20001bb6:	02200613          	li	a2,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001bba:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
20001bbc:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
20001bbe:	0591                	addi	a1,a1,4
20001bc0:	fec51de3          	bne	a0,a2,20001bba <pinmux_init+0xe>
20001bc4:	450d                	li	a0,3
20001bc6:	404605b7          	lui	a1,0x40460
20001bca:	27458593          	addi	a1,a1,628 # 40460274 <_data_init_start+0x2045cf68>
20001bce:	02300613          	li	a2,35
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001bd2:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
20001bd4:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
20001bd6:	0591                	addi	a1,a1,4
20001bd8:	fec51de3          	bne	a0,a2,20001bd2 <pinmux_init+0x26>
20001bdc:	40460537          	lui	a0,0x40460
20001be0:	02200593          	li	a1,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001be4:	18b52223          	sw	a1,388(a0) # 40460184 <_data_init_start+0x2045ce78>
20001be8:	02d00593          	li	a1,45
20001bec:	2eb52c23          	sw	a1,760(a0)
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:63
  // We've got one insel configuration field per register. Hence, we have to
  // convert the enumeration index into a byte address using << 2.
  reg_offset = kTopEarlgreyPinmuxMioOutIoc11 << 2;
  mask = PINMUX_MIO_OUTSEL_0_OUT_0_MASK;
  mmio_region_write32(reg32, reg_offset, reg_value & mask);
}
20001bf0:	8082                	ret
	...

20001bf4 <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
20001bf4:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
20001bf6:	de06                	sw	ra,60(sp)
20001bf8:	dc16                	sw	t0,56(sp)
20001bfa:	da1a                	sw	t1,52(sp)
20001bfc:	d81e                	sw	t2,48(sp)
20001bfe:	d62a                	sw	a0,44(sp)
20001c00:	d42e                	sw	a1,40(sp)
20001c02:	d232                	sw	a2,36(sp)
20001c04:	d036                	sw	a3,32(sp)
20001c06:	ce3a                	sw	a4,28(sp)
20001c08:	cc3e                	sw	a5,24(sp)
20001c0a:	ca42                	sw	a6,20(sp)
20001c0c:	c846                	sw	a7,16(sp)
20001c0e:	c672                	sw	t3,12(sp)
20001c10:	c476                	sw	t4,8(sp)
20001c12:	c27a                	sw	t5,4(sp)
20001c14:	c07e                	sw	t6,0(sp)
20001c16:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
20001c1a:	897d                	andi	a0,a0,31
20001c1c:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20001c1e:	00a5dc63          	bge	a1,a0,20001c36 <handler_exception+0x42>
20001c22:	4599                	li	a1,6
20001c24:	02a5c263          	blt	a1,a0,20001c48 <handler_exception+0x54>
20001c28:	458d                	li	a1,3
20001c2a:	02b50c63          	beq	a0,a1,20001c62 <handler_exception+0x6e>
20001c2e:	4595                	li	a1,5
20001c30:	02b50763          	beq	a0,a1,20001c5e <handler_exception+0x6a>
20001c34:	a015                	j	20001c58 <handler_exception+0x64>
20001c36:	c115                	beqz	a0,20001c5a <handler_exception+0x66>
20001c38:	4585                	li	a1,1
20001c3a:	02b50063          	beq	a0,a1,20001c5a <handler_exception+0x66>
20001c3e:	4589                	li	a1,2
20001c40:	00b51c63          	bne	a0,a1,20001c58 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
20001c44:	2095                	jal	20001ca8 <handler_instr_ill_fault>
20001c46:	a839                	j	20001c64 <handler_exception+0x70>
20001c48:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
20001c4a:	00b50a63          	beq	a0,a1,20001c5e <handler_exception+0x6a>
20001c4e:	45ad                	li	a1,11
20001c50:	00b51463          	bne	a0,a1,20001c58 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
20001c54:	2845                	jal	20001d04 <handler_ecall>
20001c56:	a039                	j	20001c64 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
20001c58:	a001                	j	20001c58 <handler_exception+0x64>
20001c5a:	2805                	jal	20001c8a <handler_instr_acc_fault>
20001c5c:	a021                	j	20001c64 <handler_exception+0x70>
20001c5e:	2061                	jal	20001ce6 <handler_lsu_fault>
20001c60:	a011                	j	20001c64 <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
20001c62:	209d                	jal	20001cc8 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
20001c64:	4f82                	lw	t6,0(sp)
20001c66:	4f12                	lw	t5,4(sp)
20001c68:	4ea2                	lw	t4,8(sp)
20001c6a:	4e32                	lw	t3,12(sp)
20001c6c:	48c2                	lw	a7,16(sp)
20001c6e:	4852                	lw	a6,20(sp)
20001c70:	47e2                	lw	a5,24(sp)
20001c72:	4772                	lw	a4,28(sp)
20001c74:	5682                	lw	a3,32(sp)
20001c76:	5612                	lw	a2,36(sp)
20001c78:	55a2                	lw	a1,40(sp)
20001c7a:	5532                	lw	a0,44(sp)
20001c7c:	53c2                	lw	t2,48(sp)
20001c7e:	5352                	lw	t1,52(sp)
20001c80:	52e2                	lw	t0,56(sp)
20001c82:	50f2                	lw	ra,60(sp)
20001c84:	6121                	addi	sp,sp,64
20001c86:	30200073          	mret

20001c8a <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
20001c8a:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
20001c8c:	de06                	sw	ra,60(sp)
20001c8e:	dc22                	sw	s0,56(sp)
20001c90:	00001597          	auipc	a1,0x1
20001c94:	53c58593          	addi	a1,a1,1340 # 200031cc <__clz_tab+0x9e8>
20001c98:	0040                	addi	s0,sp,4
20001c9a:	03400613          	li	a2,52
20001c9e:	8522                	mv	a0,s0
20001ca0:	dd9fe0ef          	jal	ra,20000a78 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
20001ca4:	8522                	mv	a0,s0
20001ca6:	2275                	jal	20001e52 <print_exc_msg>

20001ca8 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
20001ca8:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
20001caa:	c686                	sw	ra,76(sp)
20001cac:	c4a2                	sw	s0,72(sp)
20001cae:	00001597          	auipc	a1,0x1
20001cb2:	55258593          	addi	a1,a1,1362 # 20003200 <__clz_tab+0xa1c>
20001cb6:	00d10413          	addi	s0,sp,13
20001cba:	03b00613          	li	a2,59
20001cbe:	8522                	mv	a0,s0
20001cc0:	db9fe0ef          	jal	ra,20000a78 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
20001cc4:	8522                	mv	a0,s0
20001cc6:	2271                	jal	20001e52 <print_exc_msg>

20001cc8 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
20001cc8:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
20001cca:	de06                	sw	ra,60(sp)
20001ccc:	dc22                	sw	s0,56(sp)
20001cce:	00001597          	auipc	a1,0x1
20001cd2:	56d58593          	addi	a1,a1,1389 # 2000323b <__clz_tab+0xa57>
20001cd6:	840a                	mv	s0,sp
20001cd8:	03800613          	li	a2,56
20001cdc:	8522                	mv	a0,s0
20001cde:	d9bfe0ef          	jal	ra,20000a78 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
20001ce2:	8522                	mv	a0,s0
20001ce4:	22bd                	jal	20001e52 <print_exc_msg>

20001ce6 <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
20001ce6:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20001ce8:	de06                	sw	ra,60(sp)
20001cea:	dc22                	sw	s0,56(sp)
20001cec:	00001597          	auipc	a1,0x1
20001cf0:	58758593          	addi	a1,a1,1415 # 20003273 <__clz_tab+0xa8f>
20001cf4:	0020                	addi	s0,sp,8
20001cf6:	03000613          	li	a2,48
20001cfa:	8522                	mv	a0,s0
20001cfc:	d7dfe0ef          	jal	ra,20000a78 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20001d00:	8522                	mv	a0,s0
20001d02:	2a81                	jal	20001e52 <print_exc_msg>

20001d04 <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
20001d04:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
20001d06:	ce06                	sw	ra,28(sp)
20001d08:	cc22                	sw	s0,24(sp)
20001d0a:	00001517          	auipc	a0,0x1
20001d0e:	aae50513          	addi	a0,a0,-1362 # 200027b8 <kDeviceLogBypassUartAddress>
20001d12:	4108                	lw	a0,0(a0)
20001d14:	c909                	beqz	a0,20001d26 <handler_ecall+0x22>
20001d16:	e000e517          	auipc	a0,0xe000e
20001d1a:	54250513          	addi	a0,a0,1346 # 10258 <handler_ecall.kLogFields>
20001d1e:	4581                	li	a1,0
20001d20:	dc6ff0ef          	jal	ra,200012e6 <base_log_internal_dv>
20001d24:	a829                	j	20001d3e <handler_ecall+0x3a>
20001d26:	00001597          	auipc	a1,0x1
20001d2a:	a2658593          	addi	a1,a1,-1498 # 2000274c <kDifUartFifoSizeBytes+0x40>
20001d2e:	840a                	mv	s0,sp
20001d30:	4651                	li	a2,20
20001d32:	8522                	mv	a0,s0
20001d34:	d45fe0ef          	jal	ra,20000a78 <memcpy>
20001d38:	8522                	mv	a0,s0
20001d3a:	d02ff0ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20001d3e:	a001                	j	20001d3e <handler_ecall+0x3a>

20001d40 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20001d40:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
20001d42:	ce86                	sw	ra,92(sp)
20001d44:	cc96                	sw	t0,88(sp)
20001d46:	ca9a                	sw	t1,84(sp)
20001d48:	c89e                	sw	t2,80(sp)
20001d4a:	c6a2                	sw	s0,76(sp)
20001d4c:	c4aa                	sw	a0,72(sp)
20001d4e:	c2ae                	sw	a1,68(sp)
20001d50:	c0b2                	sw	a2,64(sp)
20001d52:	de36                	sw	a3,60(sp)
20001d54:	dc3a                	sw	a4,56(sp)
20001d56:	da3e                	sw	a5,52(sp)
20001d58:	d842                	sw	a6,48(sp)
20001d5a:	d646                	sw	a7,44(sp)
20001d5c:	d472                	sw	t3,40(sp)
20001d5e:	d276                	sw	t4,36(sp)
20001d60:	d07a                	sw	t5,32(sp)
20001d62:	ce7e                	sw	t6,28(sp)
20001d64:	00001517          	auipc	a0,0x1
20001d68:	a5450513          	addi	a0,a0,-1452 # 200027b8 <kDeviceLogBypassUartAddress>
20001d6c:	4108                	lw	a0,0(a0)
20001d6e:	c909                	beqz	a0,20001d80 <handler_irq_software+0x40>
20001d70:	e000e517          	auipc	a0,0xe000e
20001d74:	4ac50513          	addi	a0,a0,1196 # 1021c <handler_irq_software.kLogFields>
20001d78:	4581                	li	a1,0
20001d7a:	d6cff0ef          	jal	ra,200012e6 <base_log_internal_dv>
20001d7e:	a829                	j	20001d98 <handler_irq_software+0x58>
20001d80:	00001597          	auipc	a1,0x1
20001d84:	99058593          	addi	a1,a1,-1648 # 20002710 <kDifUartFifoSizeBytes+0x4>
20001d88:	0020                	addi	s0,sp,8
20001d8a:	4651                	li	a2,20
20001d8c:	8522                	mv	a0,s0
20001d8e:	cebfe0ef          	jal	ra,20000a78 <memcpy>
20001d92:	8522                	mv	a0,s0
20001d94:	ca8ff0ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
20001d98:	a001                	j	20001d98 <handler_irq_software+0x58>
20001d9a:	0001                	nop

20001d9c <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
20001d9c:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
20001d9e:	ce86                	sw	ra,92(sp)
20001da0:	cc96                	sw	t0,88(sp)
20001da2:	ca9a                	sw	t1,84(sp)
20001da4:	c89e                	sw	t2,80(sp)
20001da6:	c6a2                	sw	s0,76(sp)
20001da8:	c4aa                	sw	a0,72(sp)
20001daa:	c2ae                	sw	a1,68(sp)
20001dac:	c0b2                	sw	a2,64(sp)
20001dae:	de36                	sw	a3,60(sp)
20001db0:	dc3a                	sw	a4,56(sp)
20001db2:	da3e                	sw	a5,52(sp)
20001db4:	d842                	sw	a6,48(sp)
20001db6:	d646                	sw	a7,44(sp)
20001db8:	d472                	sw	t3,40(sp)
20001dba:	d276                	sw	t4,36(sp)
20001dbc:	d07a                	sw	t5,32(sp)
20001dbe:	ce7e                	sw	t6,28(sp)
20001dc0:	00001517          	auipc	a0,0x1
20001dc4:	9f850513          	addi	a0,a0,-1544 # 200027b8 <kDeviceLogBypassUartAddress>
20001dc8:	4108                	lw	a0,0(a0)
20001dca:	c909                	beqz	a0,20001ddc <handler_irq_timer+0x40>
20001dcc:	e000e517          	auipc	a0,0xe000e
20001dd0:	46450513          	addi	a0,a0,1124 # 10230 <handler_irq_timer.kLogFields>
20001dd4:	4581                	li	a1,0
20001dd6:	d10ff0ef          	jal	ra,200012e6 <base_log_internal_dv>
20001dda:	a829                	j	20001df4 <handler_irq_timer+0x58>
20001ddc:	00001597          	auipc	a1,0x1
20001de0:	94858593          	addi	a1,a1,-1720 # 20002724 <kDifUartFifoSizeBytes+0x18>
20001de4:	0020                	addi	s0,sp,8
20001de6:	4651                	li	a2,20
20001de8:	8522                	mv	a0,s0
20001dea:	c8ffe0ef          	jal	ra,20000a78 <memcpy>
20001dee:	8522                	mv	a0,s0
20001df0:	c4cff0ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
20001df4:	a001                	j	20001df4 <handler_irq_timer+0x58>
20001df6:	0001                	nop

20001df8 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20001df8:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20001dfa:	ce86                	sw	ra,92(sp)
20001dfc:	cc96                	sw	t0,88(sp)
20001dfe:	ca9a                	sw	t1,84(sp)
20001e00:	c89e                	sw	t2,80(sp)
20001e02:	c6a2                	sw	s0,76(sp)
20001e04:	c4aa                	sw	a0,72(sp)
20001e06:	c2ae                	sw	a1,68(sp)
20001e08:	c0b2                	sw	a2,64(sp)
20001e0a:	de36                	sw	a3,60(sp)
20001e0c:	dc3a                	sw	a4,56(sp)
20001e0e:	da3e                	sw	a5,52(sp)
20001e10:	d842                	sw	a6,48(sp)
20001e12:	d646                	sw	a7,44(sp)
20001e14:	d472                	sw	t3,40(sp)
20001e16:	d276                	sw	t4,36(sp)
20001e18:	d07a                	sw	t5,32(sp)
20001e1a:	ce7e                	sw	t6,28(sp)
20001e1c:	00001517          	auipc	a0,0x1
20001e20:	99c50513          	addi	a0,a0,-1636 # 200027b8 <kDeviceLogBypassUartAddress>
20001e24:	4108                	lw	a0,0(a0)
20001e26:	c909                	beqz	a0,20001e38 <handler_irq_external+0x40>
20001e28:	e000e517          	auipc	a0,0xe000e
20001e2c:	41c50513          	addi	a0,a0,1052 # 10244 <handler_irq_external.kLogFields>
20001e30:	4581                	li	a1,0
20001e32:	cb4ff0ef          	jal	ra,200012e6 <base_log_internal_dv>
20001e36:	a829                	j	20001e50 <handler_irq_external+0x58>
20001e38:	00001597          	auipc	a1,0x1
20001e3c:	90058593          	addi	a1,a1,-1792 # 20002738 <kDifUartFifoSizeBytes+0x2c>
20001e40:	0020                	addi	s0,sp,8
20001e42:	4651                	li	a2,20
20001e44:	8522                	mv	a0,s0
20001e46:	c33fe0ef          	jal	ra,20000a78 <memcpy>
20001e4a:	8522                	mv	a0,s0
20001e4c:	bf0ff0ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20001e50:	a001                	j	20001e50 <handler_irq_external+0x58>

20001e52 <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
20001e52:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20001e54:	ce06                	sw	ra,28(sp)
20001e56:	cc22                	sw	s0,24(sp)
20001e58:	ca26                	sw	s1,20(sp)
20001e5a:	00001597          	auipc	a1,0x1
20001e5e:	95e58593          	addi	a1,a1,-1698 # 200027b8 <kDeviceLogBypassUartAddress>
20001e62:	418c                	lw	a1,0(a1)
20001e64:	842a                	mv	s0,a0
20001e66:	c19d                	beqz	a1,20001e8c <print_exc_msg+0x3a>
20001e68:	e000e517          	auipc	a0,0xe000e
20001e6c:	40450513          	addi	a0,a0,1028 # 1026c <print_exc_msg.kLogFields>
20001e70:	4585                	li	a1,1
20001e72:	8622                	mv	a2,s0
20001e74:	c72ff0ef          	jal	ra,200012e6 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20001e78:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20001e7c:	e000e517          	auipc	a0,0xe000e
20001e80:	40450513          	addi	a0,a0,1028 # 10280 <print_exc_msg.kLogFields.6>
20001e84:	4585                	li	a1,1
20001e86:	c60ff0ef          	jal	ra,200012e6 <base_log_internal_dv>
20001e8a:	a82d                	j	20001ec4 <print_exc_msg+0x72>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
20001e8c:	00001597          	auipc	a1,0x1
20001e90:	8d458593          	addi	a1,a1,-1836 # 20002760 <kDifUartFifoSizeBytes+0x54>
20001e94:	848a                	mv	s1,sp
20001e96:	4651                	li	a2,20
20001e98:	8526                	mv	a0,s1
20001e9a:	bdffe0ef          	jal	ra,20000a78 <memcpy>
20001e9e:	8526                	mv	a0,s1
20001ea0:	85a2                	mv	a1,s0
20001ea2:	b9aff0ef          	jal	ra,2000123c <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20001ea6:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20001eaa:	00001597          	auipc	a1,0x1
20001eae:	8ca58593          	addi	a1,a1,-1846 # 20002774 <kDifUartFifoSizeBytes+0x68>
20001eb2:	848a                	mv	s1,sp
20001eb4:	4651                	li	a2,20
20001eb6:	8526                	mv	a0,s1
20001eb8:	bc1fe0ef          	jal	ra,20000a78 <memcpy>
20001ebc:	8526                	mv	a0,s1
20001ebe:	85a2                	mv	a1,s0
20001ec0:	b7cff0ef          	jal	ra,2000123c <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
20001ec4:	a001                	j	20001ec4 <print_exc_msg+0x72>
	...

20001ec8 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
20001ec8:	1101                	addi	sp,sp,-32
20001eca:	ce06                	sw	ra,28(sp)
20001ecc:	cc22                	sw	s0,24(sp)
20001ece:	65b1                	lui	a1,0xc
20001ed0:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
20001ed4:	02b50163          	beq	a0,a1,20001ef6 <test_status_set+0x2e>
20001ed8:	65a5                	lui	a1,0x9
20001eda:	05b5                	addi	a1,a1,13
20001edc:	04b50063          	beq	a0,a1,20001f1c <test_status_set+0x54>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001ee0:	00001597          	auipc	a1,0x1
20001ee4:	8d458593          	addi	a1,a1,-1836 # 200027b4 <kDeviceTestStatusAddress>
20001ee8:	418c                	lw	a1,0(a1)
20001eea:	c191                	beqz	a1,20001eee <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001eec:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20001eee:	4462                	lw	s0,24(sp)
20001ef0:	40f2                	lw	ra,28(sp)
20001ef2:	6105                	addi	sp,sp,32
20001ef4:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20001ef6:	00001517          	auipc	a0,0x1
20001efa:	8c250513          	addi	a0,a0,-1854 # 200027b8 <kDeviceLogBypassUartAddress>
20001efe:	4108                	lw	a0,0(a0)
20001f00:	e129                	bnez	a0,20001f42 <test_status_set+0x7a>
20001f02:	00001597          	auipc	a1,0x1
20001f06:	8ce58593          	addi	a1,a1,-1842 # 200027d0 <kDeviceLogBypassUartAddress+0x18>
20001f0a:	840a                	mv	s0,sp
20001f0c:	4651                	li	a2,20
20001f0e:	8522                	mv	a0,s0
20001f10:	b69fe0ef          	jal	ra,20000a78 <memcpy>
20001f14:	8522                	mv	a0,s0
20001f16:	b26ff0ef          	jal	ra,2000123c <base_log_internal_core>
20001f1a:	a81d                	j	20001f50 <test_status_set+0x88>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20001f1c:	00001517          	auipc	a0,0x1
20001f20:	89c50513          	addi	a0,a0,-1892 # 200027b8 <kDeviceLogBypassUartAddress>
20001f24:	4108                	lw	a0,0(a0)
20001f26:	ed1d                	bnez	a0,20001f64 <test_status_set+0x9c>
20001f28:	00001597          	auipc	a1,0x1
20001f2c:	89458593          	addi	a1,a1,-1900 # 200027bc <kDeviceLogBypassUartAddress+0x4>
20001f30:	840a                	mv	s0,sp
20001f32:	4651                	li	a2,20
20001f34:	8522                	mv	a0,s0
20001f36:	b43fe0ef          	jal	ra,20000a78 <memcpy>
20001f3a:	8522                	mv	a0,s0
20001f3c:	b00ff0ef          	jal	ra,2000123c <base_log_internal_core>
20001f40:	a80d                	j	20001f72 <test_status_set+0xaa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20001f42:	e000e517          	auipc	a0,0xe000e
20001f46:	36650513          	addi	a0,a0,870 # 102a8 <test_status_set.kLogFields.2>
20001f4a:	4581                	li	a1,0
20001f4c:	b9aff0ef          	jal	ra,200012e6 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001f50:	00001517          	auipc	a0,0x1
20001f54:	86450513          	addi	a0,a0,-1948 # 200027b4 <kDeviceTestStatusAddress>
20001f58:	4108                	lw	a0,0(a0)
20001f5a:	c50d                	beqz	a0,20001f84 <test_status_set+0xbc>
20001f5c:	65b1                	lui	a1,0xc
20001f5e:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20001f62:	a005                	j	20001f82 <test_status_set+0xba>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20001f64:	e000e517          	auipc	a0,0xe000e
20001f68:	33050513          	addi	a0,a0,816 # 10294 <test_status_set.kLogFields>
20001f6c:	4581                	li	a1,0
20001f6e:	b78ff0ef          	jal	ra,200012e6 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20001f72:	00001517          	auipc	a0,0x1
20001f76:	84250513          	addi	a0,a0,-1982 # 200027b4 <kDeviceTestStatusAddress>
20001f7a:	4108                	lw	a0,0(a0)
20001f7c:	c501                	beqz	a0,20001f84 <test_status_set+0xbc>
20001f7e:	65a5                	lui	a1,0x9
20001f80:	05b5                	addi	a1,a1,13
20001f82:	c10c                	sw	a1,0(a0)
20001f84:	ae5fe0ef          	jal	ra,20000a68 <abort>

20001f88 <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:112
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
20001f88:	4705                	li	a4,1
20001f8a:	a009                	j	20001f8c <mmio_region_memcpy32>

20001f8c <mmio_region_memcpy32>:
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:35
                                 size_t len, bool from_mmio) {
20001f8c:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:36
  if (len == 0) {
20001f8e:	d606                	sw	ra,44(sp)
20001f90:	d422                	sw	s0,40(sp)
20001f92:	d226                	sw	s1,36(sp)
20001f94:	d04a                	sw	s2,32(sp)
20001f96:	ce4e                	sw	s3,28(sp)
20001f98:	cc52                	sw	s4,24(sp)
20001f9a:	ca56                	sw	s5,20(sp)
20001f9c:	c85a                	sw	s6,16(sp)
20001f9e:	c6c5                	beqz	a3,20002046 <mmio_region_memcpy32+0xba>
20001fa0:	893a                	mv	s2,a4
20001fa2:	8436                	mv	s0,a3
20001fa4:	89b2                	mv	s3,a2
20001fa6:	8b2e                	mv	s6,a1
20001fa8:	8a2a                	mv	s4,a0
misalignment32_of():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:16
  return addr % alignof(uint32_t);
20001faa:	0035f513          	andi	a0,a1,3
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:43
  if (misalignment != 0) {
20001fae:	c139                	beqz	a0,20001ff4 <mmio_region_memcpy32+0x68>
20001fb0:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:46
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
20001fb2:	8d89                	sub	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:50
    if (realignment > len) {
20001fb4:	84a2                	mv	s1,s0
20001fb6:	00b46363          	bltu	s0,a1,20001fbc <mmio_region_memcpy32+0x30>
20001fba:	84ae                	mv	s1,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001fbc:	ffcb7593          	andi	a1,s6,-4
20001fc0:	00ba0ab3          	add	s5,s4,a1
20001fc4:	000aa583          	lw	a1,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:57
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
20001fc8:	c62e                	sw	a1,12(sp)
20001fca:	006c                	addi	a1,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:61
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
20001fcc:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:62
    if (from_mmio) {
20001fce:	00090763          	beqz	s2,20001fdc <mmio_region_memcpy32+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:63
      memcpy(buf, current_byte, realignment);
20001fd2:	854e                	mv	a0,s3
20001fd4:	8626                	mv	a2,s1
20001fd6:	aa3fe0ef          	jal	ra,20000a78 <memcpy>
20001fda:	a809                	j	20001fec <mmio_region_memcpy32+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:66
      memcpy(current_byte, buf, realignment);
20001fdc:	852e                	mv	a0,a1
20001fde:	85ce                	mv	a1,s3
20001fe0:	8626                	mv	a2,s1
20001fe2:	a97fe0ef          	jal	ra,20000a78 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:67
      mmio_region_write32(base, current_word_offset, current_word);
20001fe6:	4532                	lw	a0,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001fe8:	00aaa023          	sw	a0,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:72
    len -= realignment;
20001fec:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20001fee:	cc21                	beqz	s0,20002046 <mmio_region_memcpy32+0xba>
20001ff0:	9b26                	add	s6,s6,s1
20001ff2:	99a6                	add	s3,s3,s1
20001ff4:	00810a93          	addi	s5,sp,8
20001ff8:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:81
    if (bytes_to_copy > len) {
20001ffa:	84a2                	mv	s1,s0
20001ffc:	00a46363          	bltu	s0,a0,20002002 <mmio_region_memcpy32+0x76>
20002000:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:86
    uint32_t current_word = 0;
20002002:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:87
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
20002004:	00a46c63          	bltu	s0,a0,2000201c <mmio_region_memcpy32+0x90>
20002008:	00091a63          	bnez	s2,2000201c <mmio_region_memcpy32+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
2000200c:	00090f63          	beqz	s2,2000202a <mmio_region_memcpy32+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:97
      memcpy(buf, &current_word, bytes_to_copy);
20002010:	854e                	mv	a0,s3
20002012:	85d6                	mv	a1,s5
20002014:	8626                	mv	a2,s1
20002016:	a63fe0ef          	jal	ra,20000a78 <memcpy>
2000201a:	a015                	j	2000203e <mmio_region_memcpy32+0xb2>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000201c:	ffcb7513          	andi	a0,s6,-4
20002020:	9552                	add	a0,a0,s4
20002022:	4108                	lw	a0,0(a0)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:92
      current_word = mmio_region_read32(base, offset);
20002024:	c42a                	sw	a0,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20002026:	fe0915e3          	bnez	s2,20002010 <mmio_region_memcpy32+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:100
      memcpy(&current_word, buf, bytes_to_copy);
2000202a:	8556                	mv	a0,s5
2000202c:	85ce                	mv	a1,s3
2000202e:	8626                	mv	a2,s1
20002030:	a49fe0ef          	jal	ra,20000a78 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:101
      mmio_region_write32(base, offset, current_word);
20002034:	4522                	lw	a0,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002036:	ffcb7593          	andi	a1,s6,-4
2000203a:	95d2                	add	a1,a1,s4
2000203c:	c188                	sw	a0,0(a1)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:104
    offset += bytes_to_copy;
2000203e:	9b26                	add	s6,s6,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:106
    len -= bytes_to_copy;
20002040:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:105
    buf += bytes_to_copy;
20002042:	99a6                	add	s3,s3,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20002044:	f855                	bnez	s0,20001ff8 <mmio_region_memcpy32+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:108
}
20002046:	4b42                	lw	s6,16(sp)
20002048:	4ad2                	lw	s5,20(sp)
2000204a:	4a62                	lw	s4,24(sp)
2000204c:	49f2                	lw	s3,28(sp)
2000204e:	5902                	lw	s2,32(sp)
20002050:	5492                	lw	s1,36(sp)
20002052:	5422                	lw	s0,40(sp)
20002054:	50b2                	lw	ra,44(sp)
20002056:	6145                	addi	sp,sp,48
20002058:	8082                	ret

2000205a <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:120
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
2000205a:	4701                	li	a4,0
2000205c:	bf05                	j	20001f8c <mmio_region_memcpy32>

2000205e <mmio_region_read8>:
mmio_region_read8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:85
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
2000205e:	952e                	add	a0,a0,a1
20002060:	00054503          	lbu	a0,0(a0)
20002064:	8082                	ret

20002066 <mmio_region_read32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002066:	99f1                	andi	a1,a1,-4
20002068:	952e                	add	a0,a0,a1
2000206a:	4108                	lw	a0,0(a0)
2000206c:	8082                	ret

2000206e <mmio_region_write8>:
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
2000206e:	952e                	add	a0,a0,a1
20002070:	00c50023          	sb	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:118
}
20002074:	8082                	ret

20002076 <mmio_region_write32>:
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002076:	99f1                	andi	a1,a1,-4
20002078:	952e                	add	a0,a0,a1
2000207a:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:134
}
2000207c:	8082                	ret

2000207e <mmio_region_read_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000207e:	99f1                	andi	a1,a1,-4
20002080:	952e                	add	a0,a0,a1
20002082:	4108                	lw	a0,0(a0)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20002084:	00d55533          	srl	a0,a0,a3
20002088:	8d71                	and	a0,a0,a2
mmio_region_read_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:176
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
2000208a:	8082                	ret

2000208c <mmio_region_get_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000208c:	99f1                	andi	a1,a1,-4
2000208e:	952e                	add	a0,a0,a1
20002090:	4108                	lw	a0,0(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20002092:	00c55533          	srl	a0,a0,a2
20002096:	8905                	andi	a0,a0,1
mmio_region_get_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:197
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
20002098:	8082                	ret

2000209a <mmio_region_nonatomic_clear_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000209a:	99f1                	andi	a1,a1,-4
2000209c:	952e                	add	a0,a0,a1
2000209e:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200020a0:	00d61633          	sll	a2,a2,a3
200020a4:	fff64613          	not	a2,a2
200020a8:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200020aa:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:220
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
200020ac:	8082                	ret

200020ae <mmio_region_nonatomic_set_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200020ae:	99f1                	andi	a1,a1,-4
200020b0:	952e                	add	a0,a0,a1
200020b2:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200020b4:	00d61633          	sll	a2,a2,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200020b8:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200020ba:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:242
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
200020bc:	8082                	ret

200020be <mmio_region_write_only_set_mask32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200020be:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200020c2:	99f1                	andi	a1,a1,-4
200020c4:	952e                	add	a0,a0,a1
200020c6:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:264
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
200020c8:	8082                	ret

200020ca <mmio_region_nonatomic_set_field32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200020ca:	99f1                	andi	a1,a1,-4
200020cc:	952e                	add	a0,a0,a1
200020ce:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
200020d0:	00d617b3          	sll	a5,a2,a3
200020d4:	fff7c793          	not	a5,a5
200020d8:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200020da:	8e79                	and	a2,a2,a4
200020dc:	00d61633          	sll	a2,a2,a3
200020e0:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200020e2:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:288
                                              bitfield_field32_t field,
                                              uint32_t value) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
200020e4:	8082                	ret

200020e6 <mmio_region_write_only_set_field32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200020e6:	8e79                	and	a2,a2,a4
200020e8:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200020ec:	99f1                	andi	a1,a1,-4
200020ee:	952e                	add	a0,a0,a1
200020f0:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:309
                                               bitfield_field32_t field,
                                               uint32_t value) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
200020f2:	8082                	ret

200020f4 <mmio_region_nonatomic_clear_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200020f4:	99f1                	andi	a1,a1,-4
200020f6:	952e                	add	a0,a0,a1
200020f8:	410c                	lw	a1,0(a0)
200020fa:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200020fc:	00c69633          	sll	a2,a3,a2
20002100:	fff64613          	not	a2,a2
20002104:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002106:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:328
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
20002108:	8082                	ret

2000210a <mmio_region_nonatomic_set_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000210a:	99f1                	andi	a1,a1,-4
2000210c:	952e                	add	a0,a0,a1
2000210e:	410c                	lw	a1,0(a0)
20002110:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20002112:	00c69633          	sll	a2,a3,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002116:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002118:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:346
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
2000211a:	8082                	ret

2000211c <mmio_region_write_only_set_bit32>:
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:363
 * @param bit_index the bit to set.
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_bit32(mmio_region_t base,
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
2000211c:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000211e:	00c69633          	sll	a2,a3,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002122:	99f1                	andi	a1,a1,-4
20002124:	952e                	add	a0,a0,a1
20002126:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:367
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20002128:	8082                	ret

2000212a <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
2000212a:	88aa                	mv	a7,a0
2000212c:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
2000212e:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20002130:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20002132:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20002134:	20069963          	bnez	a3,20002346 <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20002138:	200026b7          	lui	a3,0x20002
2000213c:	7e468693          	addi	a3,a3,2020 # 200027e4 <__clz_tab>
20002140:	0cc5f063          	bgeu	a1,a2,20002200 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20002144:	6741                	lui	a4,0x10
20002146:	0ae67663          	bgeu	a2,a4,200021f2 <__udivdi3+0xc8>
2000214a:	0ff00713          	li	a4,255
2000214e:	00c73733          	sltu	a4,a4,a2
20002152:	070e                	slli	a4,a4,0x3
20002154:	00e65533          	srl	a0,a2,a4
20002158:	96aa                	add	a3,a3,a0
2000215a:	0006c683          	lbu	a3,0(a3)
2000215e:	02000513          	li	a0,32
20002162:	9736                	add	a4,a4,a3
20002164:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20002168:	00e50c63          	beq	a0,a4,20002180 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
2000216c:	00d797b3          	sll	a5,a5,a3
20002170:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20002174:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002178:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
2000217c:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20002180:	01085893          	srli	a7,a6,0x10
20002184:	0315d7b3          	divu	a5,a1,a7
20002188:	01081613          	slli	a2,a6,0x10
2000218c:	8241                	srli	a2,a2,0x10
2000218e:	01035713          	srli	a4,t1,0x10
20002192:	0315f6b3          	remu	a3,a1,a7
20002196:	853e                	mv	a0,a5
20002198:	02f605b3          	mul	a1,a2,a5
2000219c:	06c2                	slli	a3,a3,0x10
2000219e:	8f55                	or	a4,a4,a3
200021a0:	00b77c63          	bgeu	a4,a1,200021b8 <__udivdi3+0x8e>
200021a4:	9742                	add	a4,a4,a6
200021a6:	fff78513          	addi	a0,a5,-1
200021aa:	01076763          	bltu	a4,a6,200021b8 <__udivdi3+0x8e>
200021ae:	00b77563          	bgeu	a4,a1,200021b8 <__udivdi3+0x8e>
200021b2:	ffe78513          	addi	a0,a5,-2
200021b6:	9742                	add	a4,a4,a6
200021b8:	8f0d                	sub	a4,a4,a1
200021ba:	031777b3          	remu	a5,a4,a7
200021be:	0342                	slli	t1,t1,0x10
200021c0:	01035313          	srli	t1,t1,0x10
200021c4:	03175733          	divu	a4,a4,a7
200021c8:	07c2                	slli	a5,a5,0x10
200021ca:	0067e333          	or	t1,a5,t1
200021ce:	02e606b3          	mul	a3,a2,a4
200021d2:	863a                	mv	a2,a4
200021d4:	00d37b63          	bgeu	t1,a3,200021ea <__udivdi3+0xc0>
200021d8:	9342                	add	t1,t1,a6
200021da:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
200021de:	01036663          	bltu	t1,a6,200021ea <__udivdi3+0xc0>
200021e2:	00d37463          	bgeu	t1,a3,200021ea <__udivdi3+0xc0>
200021e6:	ffe70613          	addi	a2,a4,-2
200021ea:	0542                	slli	a0,a0,0x10
200021ec:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
200021ee:	4581                	li	a1,0
200021f0:	a85d                	j	200022a6 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
200021f2:	01000537          	lui	a0,0x1000
200021f6:	4741                	li	a4,16
200021f8:	f4a66ee3          	bltu	a2,a0,20002154 <__udivdi3+0x2a>
200021fc:	4761                	li	a4,24
200021fe:	bf99                	j	20002154 <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20002200:	e601                	bnez	a2,20002208 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20002202:	4705                	li	a4,1
20002204:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002208:	6741                	lui	a4,0x10
2000220a:	08e87f63          	bgeu	a6,a4,200022a8 <__udivdi3+0x17e>
2000220e:	0ff00713          	li	a4,255
20002212:	01077363          	bgeu	a4,a6,20002218 <__udivdi3+0xee>
20002216:	4521                	li	a0,8
20002218:	00a85733          	srl	a4,a6,a0
2000221c:	96ba                	add	a3,a3,a4
2000221e:	0006c703          	lbu	a4,0(a3)
20002222:	02000613          	li	a2,32
20002226:	972a                	add	a4,a4,a0
20002228:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
2000222c:	08e61563          	bne	a2,a4,200022b6 <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20002230:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20002234:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20002236:	01085893          	srli	a7,a6,0x10
2000223a:	01081613          	slli	a2,a6,0x10
2000223e:	8241                	srli	a2,a2,0x10
20002240:	01035713          	srli	a4,t1,0x10
20002244:	0317f6b3          	remu	a3,a5,a7
20002248:	0317d7b3          	divu	a5,a5,a7
2000224c:	06c2                	slli	a3,a3,0x10
2000224e:	8f55                	or	a4,a4,a3
20002250:	02f60e33          	mul	t3,a2,a5
20002254:	853e                	mv	a0,a5
20002256:	01c77c63          	bgeu	a4,t3,2000226e <__udivdi3+0x144>
2000225a:	9742                	add	a4,a4,a6
2000225c:	fff78513          	addi	a0,a5,-1
20002260:	01076763          	bltu	a4,a6,2000226e <__udivdi3+0x144>
20002264:	01c77563          	bgeu	a4,t3,2000226e <__udivdi3+0x144>
20002268:	ffe78513          	addi	a0,a5,-2
2000226c:	9742                	add	a4,a4,a6
2000226e:	41c70733          	sub	a4,a4,t3
20002272:	031777b3          	remu	a5,a4,a7
20002276:	0342                	slli	t1,t1,0x10
20002278:	01035313          	srli	t1,t1,0x10
2000227c:	03175733          	divu	a4,a4,a7
20002280:	07c2                	slli	a5,a5,0x10
20002282:	0067e333          	or	t1,a5,t1
20002286:	02e606b3          	mul	a3,a2,a4
2000228a:	863a                	mv	a2,a4
2000228c:	00d37b63          	bgeu	t1,a3,200022a2 <__udivdi3+0x178>
20002290:	9342                	add	t1,t1,a6
20002292:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20002296:	01036663          	bltu	t1,a6,200022a2 <__udivdi3+0x178>
2000229a:	00d37463          	bgeu	t1,a3,200022a2 <__udivdi3+0x178>
2000229e:	ffe70613          	addi	a2,a4,-2
200022a2:	0542                	slli	a0,a0,0x10
200022a4:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
200022a6:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
200022a8:	01000737          	lui	a4,0x1000
200022ac:	4541                	li	a0,16
200022ae:	f6e865e3          	bltu	a6,a4,20002218 <__udivdi3+0xee>
200022b2:	4561                	li	a0,24
200022b4:	b795                	j	20002218 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
200022b6:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
200022ba:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
200022be:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200022c2:	00d797b3          	sll	a5,a5,a3
200022c6:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200022ca:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
200022ce:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
200022d2:	0315f733          	remu	a4,a1,a7
200022d6:	01081793          	slli	a5,a6,0x10
200022da:	83c1                	srli	a5,a5,0x10
200022dc:	01065513          	srli	a0,a2,0x10
200022e0:	0315d5b3          	divu	a1,a1,a7
200022e4:	0742                	slli	a4,a4,0x10
200022e6:	8f49                	or	a4,a4,a0
200022e8:	02b786b3          	mul	a3,a5,a1
200022ec:	852e                	mv	a0,a1
200022ee:	00d77c63          	bgeu	a4,a3,20002306 <__udivdi3+0x1dc>
200022f2:	9742                	add	a4,a4,a6
200022f4:	fff58513          	addi	a0,a1,-1 # 8fff <_stack_size+0x6fff>
200022f8:	01076763          	bltu	a4,a6,20002306 <__udivdi3+0x1dc>
200022fc:	00d77563          	bgeu	a4,a3,20002306 <__udivdi3+0x1dc>
20002300:	ffe58513          	addi	a0,a1,-2
20002304:	9742                	add	a4,a4,a6
20002306:	40d706b3          	sub	a3,a4,a3
2000230a:	0316f733          	remu	a4,a3,a7
2000230e:	0642                	slli	a2,a2,0x10
20002310:	8241                	srli	a2,a2,0x10
20002312:	0316d6b3          	divu	a3,a3,a7
20002316:	0742                	slli	a4,a4,0x10
20002318:	02d788b3          	mul	a7,a5,a3
2000231c:	00c767b3          	or	a5,a4,a2
20002320:	8736                	mv	a4,a3
20002322:	0117fc63          	bgeu	a5,a7,2000233a <__udivdi3+0x210>
20002326:	97c2                	add	a5,a5,a6
20002328:	fff68713          	addi	a4,a3,-1
2000232c:	0107e763          	bltu	a5,a6,2000233a <__udivdi3+0x210>
20002330:	0117f563          	bgeu	a5,a7,2000233a <__udivdi3+0x210>
20002334:	ffe68713          	addi	a4,a3,-2
20002338:	97c2                	add	a5,a5,a6
2000233a:	01051593          	slli	a1,a0,0x10
2000233e:	411787b3          	sub	a5,a5,a7
20002342:	8dd9                	or	a1,a1,a4
20002344:	bdcd                	j	20002236 <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20002346:	14d5e263          	bltu	a1,a3,2000248a <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
2000234a:	6741                	lui	a4,0x10
2000234c:	02e6ff63          	bgeu	a3,a4,2000238a <__udivdi3+0x260>
20002350:	0ff00713          	li	a4,255
20002354:	00d735b3          	sltu	a1,a4,a3
20002358:	058e                	slli	a1,a1,0x3
2000235a:	20002737          	lui	a4,0x20002
2000235e:	00b6d533          	srl	a0,a3,a1
20002362:	7e470713          	addi	a4,a4,2020 # 200027e4 <__clz_tab>
20002366:	972a                	add	a4,a4,a0
20002368:	00074703          	lbu	a4,0(a4)
2000236c:	02000513          	li	a0,32
20002370:	972e                	add	a4,a4,a1
20002372:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20002376:	02e51163          	bne	a0,a4,20002398 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
2000237a:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
2000237c:	f2f6e5e3          	bltu	a3,a5,200022a6 <__udivdi3+0x17c>
20002380:	00c8b533          	sltu	a0,a7,a2
20002384:	00154513          	xori	a0,a0,1
20002388:	bf39                	j	200022a6 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
2000238a:	01000737          	lui	a4,0x1000
2000238e:	45c1                	li	a1,16
20002390:	fce6e5e3          	bltu	a3,a4,2000235a <__udivdi3+0x230>
20002394:	45e1                	li	a1,24
20002396:	b7d1                	j	2000235a <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20002398:	00e65333          	srl	t1,a2,a4
2000239c:	00b696b3          	sll	a3,a3,a1
200023a0:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200023a4:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
200023a8:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
200023ac:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200023b0:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
200023b4:	00b797b3          	sll	a5,a5,a1
200023b8:	00e8d733          	srl	a4,a7,a4
200023bc:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
200023c0:	01031793          	slli	a5,t1,0x10
200023c4:	83c1                	srli	a5,a5,0x10
200023c6:	01085713          	srli	a4,a6,0x10
200023ca:	02a65633          	divu	a2,a2,a0
200023ce:	06c2                	slli	a3,a3,0x10
200023d0:	8f55                	or	a4,a4,a3
200023d2:	02c78f33          	mul	t5,a5,a2
200023d6:	8e32                	mv	t3,a2
200023d8:	01e77c63          	bgeu	a4,t5,200023f0 <__udivdi3+0x2c6>
200023dc:	971a                	add	a4,a4,t1
200023de:	fff60e13          	addi	t3,a2,-1 # ffff <_stack_size+0xdfff>
200023e2:	00676763          	bltu	a4,t1,200023f0 <__udivdi3+0x2c6>
200023e6:	01e77563          	bgeu	a4,t5,200023f0 <__udivdi3+0x2c6>
200023ea:	ffe60e13          	addi	t3,a2,-2
200023ee:	971a                	add	a4,a4,t1
200023f0:	41e70733          	sub	a4,a4,t5
200023f4:	02a776b3          	remu	a3,a4,a0
200023f8:	02a75733          	divu	a4,a4,a0
200023fc:	06c2                	slli	a3,a3,0x10
200023fe:	02e78633          	mul	a2,a5,a4
20002402:	01081793          	slli	a5,a6,0x10
20002406:	83c1                	srli	a5,a5,0x10
20002408:	8fd5                	or	a5,a5,a3
2000240a:	86ba                	mv	a3,a4
2000240c:	00c7fc63          	bgeu	a5,a2,20002424 <__udivdi3+0x2fa>
20002410:	979a                	add	a5,a5,t1
20002412:	fff70693          	addi	a3,a4,-1 # ffffff <test_status_set.kLogFields.2+0xfefd57>
20002416:	0067e763          	bltu	a5,t1,20002424 <__udivdi3+0x2fa>
2000241a:	00c7f563          	bgeu	a5,a2,20002424 <__udivdi3+0x2fa>
2000241e:	ffe70693          	addi	a3,a4,-2
20002422:	979a                	add	a5,a5,t1
20002424:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002428:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
2000242a:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000242c:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20002430:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002434:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002436:	00def6b3          	and	a3,t4,a3
2000243a:	01055613          	srli	a2,a0,0x10
2000243e:	010ede93          	srli	t4,t4,0x10
20002442:	02d80333          	mul	t1,a6,a3
20002446:	02d606b3          	mul	a3,a2,a3
2000244a:	01035713          	srli	a4,t1,0x10
2000244e:	03d80833          	mul	a6,a6,t4
20002452:	9836                	add	a6,a6,a3
20002454:	9742                	add	a4,a4,a6
20002456:	03d60633          	mul	a2,a2,t4
2000245a:	00d77363          	bgeu	a4,a3,20002460 <__udivdi3+0x336>
2000245e:	9672                	add	a2,a2,t3
20002460:	01075693          	srli	a3,a4,0x10
20002464:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20002466:	02c7e063          	bltu	a5,a2,20002486 <__udivdi3+0x35c>
2000246a:	d8c792e3          	bne	a5,a2,200021ee <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000246e:	67c1                	lui	a5,0x10
20002470:	17fd                	addi	a5,a5,-1
20002472:	8f7d                	and	a4,a4,a5
20002474:	0742                	slli	a4,a4,0x10
20002476:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
2000247a:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
2000247e:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20002480:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20002482:	e2e8f2e3          	bgeu	a7,a4,200022a6 <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20002486:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20002488:	b39d                	j	200021ee <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
2000248a:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
2000248c:	4501                	li	a0,0
2000248e:	bd21                	j	200022a6 <__udivdi3+0x17c>
