
sw/device/examples/hello_usbdev/hello_usbdev_sim_dv.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .flash_header 00000004  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .crt          000000da  20000004  20000004  00001004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors      00000080  20000100  20000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000000  20000180  20000180  00005054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00002e28  20000180  20000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000fca  20002fa8  20002fa8  00003fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000054  10000000  20003f74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000184  10000054  20003fc8  00005054  2**2
                  ALLOC
  8 .logs.fields  00000320  00010000  00010000  00005054  2**2
                  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c6b5  00000000  00000000  0000539a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002080  00000000  00000000  00011a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  00013acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006b8f  00000000  00000000  00013b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006ee6  00000000  00000000  0001a6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  000215dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005127  00000000  00000000  00021a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000d60  00000000  00000000  00026b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .crt:

20000004 <_start>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:38
_start:
  .globl _start

  // Set up the stack. We have no expectation that the rom that
  // jumps here will have the correct stack start linked in.
  la sp, _stack_end
20000004:	f0020117          	auipc	sp,0xf0020
20000008:	ffc10113          	addi	sp,sp,-4 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:44

  // Set up the global pointer. This requires that we disable linker relaxations
  // (or it will be relaxed to `mv gp, gp`).
  .option push
  .option norelax
  la gp, __global_pointer$
2000000c:	f0000197          	auipc	gp,0xf0000
20000010:	7f418193          	addi	gp,gp,2036 # 10000800 <__global_pointer$>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:48
  .option pop

  // Set up the new interrupt vector.
  la   t0, crt_interrupt_vector
20000014:	00000297          	auipc	t0,0x0
20000018:	0ec28293          	addi	t0,t0,236 # 20000100 <crt_interrupt_vector>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:49
  csrw mtvec, t0
2000001c:	30529073          	csrw	mtvec,t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:52

  // Zero out the `.bss` segment.
  la   a0, _bss_start
20000020:	f0000517          	auipc	a0,0xf0000
20000024:	03450513          	addi	a0,a0,52 # 10000054 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:53
  la   a1, _bss_end
20000028:	9d818593          	addi	a1,gp,-1576 # 100001d8 <_bss_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:54
  call crt_section_clear
2000002c:	2891                	jal	20000080 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:57

  // Zero out the stack
  la   a0, _stack_start
2000002e:	f001e517          	auipc	a0,0xf001e
20000032:	fd250513          	addi	a0,a0,-46 # 1001e000 <_stack_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:58
  la   a1, _stack_end
20000036:	f0020597          	auipc	a1,0xf0020
2000003a:	fca58593          	addi	a1,a1,-54 # 10020000 <_stack_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:59
  call crt_section_clear
2000003e:	2089                	jal	20000080 <crt_section_clear>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:62

  // Initialize the `.data` segment from the `.idata` segment.
  la   a0, _data_start
20000040:	f0000517          	auipc	a0,0xf0000
20000044:	fc050513          	addi	a0,a0,-64 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:63
  la   a1, _data_end
20000048:	85418593          	addi	a1,gp,-1964 # 10000054 <_data_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:64
  la   a2, _data_init_start
2000004c:	00004617          	auipc	a2,0x4
20000050:	f2860613          	addi	a2,a2,-216 # 20003f74 <_data_init_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:65
  call crt_section_copy
20000054:	2881                	jal	200000a4 <crt_section_copy>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:77
  // functions must be called before the instrumented functions in the program.
  //
  // We use `s0` and `s1` to represent the start and end pointers of
  // `.init_array`, respectively, and `t0` to store the addresses of the
  // functions to be called.
  la   s0, _init_array_start
20000056:	00000417          	auipc	s0,0x0
2000005a:	12a40413          	addi	s0,s0,298 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:78
  la   s1, _init_array_end
2000005e:	00000497          	auipc	s1,0x0
20000062:	12248493          	addi	s1,s1,290 # 20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:79
  bgeu s0, s1, init_array_loop_end
20000066:	00947863          	bgeu	s0,s1,20000076 <init_array_loop_end>

2000006a <init_array_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:81
init_array_loop:
  lw   t0, 0(s0)
2000006a:	00042283          	lw	t0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:82
  jalr t0
2000006e:	9282                	jalr	t0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:83
  addi s0, s0, 0x4
20000070:	0411                	addi	s0,s0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:84
  bltu s0, s1, init_array_loop
20000072:	fe946ce3          	bltu	s0,s1,2000006a <init_array_loop>

20000076 <init_array_loop_end>:
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:89
init_array_loop_end:

  // Jump into the C program entry point. This is your standard
  // C `main()`, so we need to pass dummy values for `argc` and `argv`.
  li   a0, 0x0  // argc = 0
20000076:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:90
  li   a1, 0x0  // argv = NULL
20000078:	4581                	li	a1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:91
  call main
2000007a:	2219                	jal	20000180 <_init_array_end>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/flash_crt.S:94

  // Halt the core (wfi loop)
  tail abort
2000007c:	55d0006f          	j	20000dd8 <abort>

20000080 <crt_section_clear>:
crt_section_clear():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:36
crt_section_clear:
  .globl crt_section_clear
  .type crt_section_clear, @function

  // Check that start is before end.
  bgeu a0, a1, L_clear_nothing
20000080:	00b57e63          	bgeu	a0,a1,2000009c <L_clear_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:39

  // Check that start and end are word aligned.
  or   t0, a0, a1
20000084:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:40
  andi t0, t0, 0x3
20000088:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:41
  bnez t0, L_clear_error
2000008c:	00029b63          	bnez	t0,200000a2 <L_clear_error>

20000090 <L_clear_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:46

L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
20000090:	00052023          	sw	zero,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:47
  addi a0, a0, 4
20000094:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:48
  bltu a0, a1, L_clear_loop
20000096:	feb56de3          	bltu	a0,a1,20000090 <L_clear_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:49
  ret
2000009a:	8082                	ret

2000009c <L_clear_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:54

L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_clear_error
2000009c:	00b51363          	bne	a0,a1,200000a2 <L_clear_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:55
  ret
200000a0:	8082                	ret

200000a2 <L_clear_error>:
	...

200000a4 <crt_section_copy>:
crt_section_copy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:87
crt_section_copy:
  .global crt_section_copy
  .type crt_section_copy, @function

  // Check that start is before end.
  bgeu a0, a1, L_copy_nothing
200000a4:	02b57963          	bgeu	a0,a1,200000d6 <L_copy_nothing>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:90

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
200000a8:	00b562b3          	or	t0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:91
  or   t0, t0, a2
200000ac:	00c2e2b3          	or	t0,t0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:92
  andi t0, t0, 0x3
200000b0:	0032f293          	andi	t0,t0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:93
  bnez t0, L_copy_error
200000b4:	02029463          	bnez	t0,200000dc <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:110
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
200000b8:	40c502b3          	sub	t0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:111
  sub  t1, a1, a0           // end - start
200000bc:	40a58333          	sub	t1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:112
  bltu t0, t1, L_copy_error
200000c0:	0062ee63          	bltu	t0,t1,200000dc <L_copy_error>

200000c4 <L_copy_loop>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:117

L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
200000c4:	00062283          	lw	t0,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:118
  addi a2, a2, 4
200000c8:	0611                	addi	a2,a2,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:119
  sw   t0, 0(a0)
200000ca:	00552023          	sw	t0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:120
  addi a0, a0, 4
200000ce:	0511                	addi	a0,a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:121
  bltu a0, a1, L_copy_loop
200000d0:	feb56ae3          	bltu	a0,a1,200000c4 <L_copy_loop>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:122
  ret
200000d4:	8082                	ret

200000d6 <L_copy_nothing>:
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:127

L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, L_copy_error
200000d6:	00b51363          	bne	a0,a1,200000dc <L_copy_error>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/crt/crt.S:128
  ret
200000da:	8082                	ret

200000dc <L_copy_error>:
	...

Disassembly of section .vectors:

20000100 <crt_interrupt_vector>:
crt_interrupt_vector():
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:49
  .balign 256
crt_interrupt_vector:
  .global crt_interrupt_vector

  // exception Handler and user software interrupt
  j handler_exception
20000100:	60c0206f          	j	2000270c <handler_exception>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:51
  // supervisor software interrupt
  unimp
20000104:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:53
  // reserved
  unimp
20000108:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:55
  // machine software interrupt handler
  j handler_irq_software
2000010c:	74c0206f          	j	20002858 <handler_irq_software>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:58

  // user timer interrupt
  unimp
20000110:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:60
  // supervisor timer interrupt
  unimp
20000114:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:62
  // reserved
  unimp
20000118:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:64
  // machine timer interrupt handler
  j handler_irq_timer
2000011c:	7980206f          	j	200028b4 <handler_irq_timer>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:67

  // user external interrupt
  unimp
20000120:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:69
  // supervisor external interrupt
  unimp
20000124:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:71
  // reserved
  unimp
20000128:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:73
  // machine external interrupt handler
  j handler_irq_external
2000012c:	7e40206f          	j	20002910 <handler_irq_external>
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:76

  // reserved
  unimp
20000130:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:77
  unimp
20000134:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:78
  unimp
20000138:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:79
  unimp
2000013c:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:82

  // vendor interrupts: on Ibex interrupt ids 30-16 are the "fast" interrupts
  .rept 15
20000140:	c0001073          	unimp
20000144:	c0001073          	unimp
20000148:	c0001073          	unimp
2000014c:	c0001073          	unimp
20000150:	c0001073          	unimp
20000154:	c0001073          	unimp
20000158:	c0001073          	unimp
2000015c:	c0001073          	unimp
20000160:	c0001073          	unimp
20000164:	c0001073          	unimp
20000168:	c0001073          	unimp
2000016c:	c0001073          	unimp
20000170:	c0001073          	unimp
20000174:	c0001073          	unimp
20000178:	c0001073          	unimp
/home/gl/work/opentitan/repo/build-out/../sw/device/exts/common/ibex_interrupt_vectors.S:87
  unimp
  .endr

  // vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
  unimp
2000017c:	c0001073          	unimp

Disassembly of section .text:

20000180 <main>:
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:107
// These GPIO bits control USB PHY configuration
static const uint32_t kPinflipMask = 1;
static const uint32_t kDiffMask = 2;
static const uint32_t kUPhyMask = 4;

int main(int argc, char **argv) {
20000180:	7135                	addi	sp,sp,-160
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:108
  CHECK(
20000182:	cf06                	sw	ra,156(sp)
20000184:	cd22                	sw	s0,152(sp)
20000186:	cb26                	sw	s1,148(sp)
20000188:	c94a                	sw	s2,144(sp)
2000018a:	c74e                	sw	s3,140(sp)
2000018c:	c552                	sw	s4,136(sp)
2000018e:	c356                	sw	s5,132(sp)
20000190:	c15a                	sw	s6,128(sp)
20000192:	dede                	sw	s7,124(sp)
20000194:	dce2                	sw	s8,120(sp)
20000196:	dae6                	sw	s9,116(sp)
20000198:	d8ea                	sw	s10,112(sp)
2000019a:	d6ee                	sw	s11,108(sp)
2000019c:	f0000597          	auipc	a1,0xf0000
200001a0:	eb858593          	addi	a1,a1,-328 # 10000054 <_data_end>
200001a4:	40000537          	lui	a0,0x40000
200001a8:	1ad010ef          	jal	ra,20001b54 <dif_uart_init>
200001ac:	00003497          	auipc	s1,0x3
200001b0:	18c48493          	addi	s1,s1,396 # 20003338 <kDeviceLogBypassUartAddress>
200001b4:	cd05                	beqz	a0,200001ec <main+0x6c>
200001b6:	4088                	lw	a0,0(s1)
200001b8:	c909                	beqz	a0,200001ca <main+0x4a>
200001ba:	e0010517          	auipc	a0,0xe0010
200001be:	e4650513          	addi	a0,a0,-442 # 10000 <_dv_log_offset>
200001c2:	4581                	li	a1,0
200001c4:	492010ef          	jal	ra,20001656 <base_log_internal_dv>
200001c8:	a829                	j	200001e2 <main+0x62>
200001ca:	00003597          	auipc	a1,0x3
200001ce:	dde58593          	addi	a1,a1,-546 # 20002fa8 <__udivdi3+0x366>
200001d2:	0880                	addi	s0,sp,80
200001d4:	4651                	li	a2,20
200001d6:	8522                	mv	a0,s0
200001d8:	411000ef          	jal	ra,20000de8 <memcpy>
200001dc:	8522                	mv	a0,s0
200001de:	3ce010ef          	jal	ra,200015ac <base_log_internal_core>
200001e2:	6531                	lui	a0,0xc
200001e4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200001e8:	7f8020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:114
      dif_uart_init(
          (dif_uart_params_t){
              .base_addr = mmio_region_from_addr(TOP_EARLGREY_UART0_BASE_ADDR),
          },
          &uart) == kDifUartOk);
  CHECK(dif_uart_configure(&uart, (dif_uart_config_t){
200001ec:	00003517          	auipc	a0,0x3
200001f0:	13c50513          	addi	a0,a0,316 # 20003328 <kUartBaudrate>
200001f4:	4108                	lw	a0,0(a0)
200001f6:	00003597          	auipc	a1,0x3
200001fa:	12258593          	addi	a1,a1,290 # 20003318 <kClockFreqPeripheralHz>
200001fe:	418c                	lw	a1,0(a1)
20000200:	c8aa                	sw	a0,80(sp)
20000202:	caae                	sw	a1,84(sp)
20000204:	4505                	li	a0,1
20000206:	ccaa                	sw	a0,88(sp)
20000208:	ceaa                	sw	a0,92(sp)
2000020a:	f0000517          	auipc	a0,0xf0000
2000020e:	e4a50513          	addi	a0,a0,-438 # 10000054 <_data_end>
20000212:	088c                	addi	a1,sp,80
20000214:	14f010ef          	jal	ra,20001b62 <dif_uart_configure>
20000218:	cd05                	beqz	a0,20000250 <main+0xd0>
2000021a:	4088                	lw	a0,0(s1)
2000021c:	c909                	beqz	a0,2000022e <main+0xae>
2000021e:	e0010517          	auipc	a0,0xe0010
20000222:	df650513          	addi	a0,a0,-522 # 10014 <main.kLogFields.2>
20000226:	4581                	li	a1,0
20000228:	42e010ef          	jal	ra,20001656 <base_log_internal_dv>
2000022c:	a829                	j	20000246 <main+0xc6>
2000022e:	00003597          	auipc	a1,0x3
20000232:	d8e58593          	addi	a1,a1,-626 # 20002fbc <__udivdi3+0x37a>
20000236:	0880                	addi	s0,sp,80
20000238:	4651                	li	a2,20
2000023a:	8522                	mv	a0,s0
2000023c:	3ad000ef          	jal	ra,20000de8 <memcpy>
20000240:	8522                	mv	a0,s0
20000242:	36a010ef          	jal	ra,200015ac <base_log_internal_core>
20000246:	6531                	lui	a0,0xc
20000248:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000024c:	794020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:120
                                      .baudrate = kUartBaudrate,
                                      .clk_freq_hz = kClockFreqPeripheralHz,
                                      .parity_enable = kDifUartToggleDisabled,
                                      .parity = kDifUartParityEven,
                                  }) == kDifUartConfigOk);
  base_uart_stdout(&uart);
20000250:	f0000517          	auipc	a0,0xf0000
20000254:	e0450513          	addi	a0,a0,-508 # 10000054 <_data_end>
20000258:	450010ef          	jal	ra,200016a8 <base_uart_stdout>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:122

  pinmux_init();
2000025c:	4c1010ef          	jal	ra,20001f1c <pinmux_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:124

  CHECK(dif_spi_device_init(
20000260:	f0000597          	auipc	a1,0xf0000
20000264:	df858593          	addi	a1,a1,-520 # 10000058 <spi>
20000268:	40050537          	lui	a0,0x40050
2000026c:	725000ef          	jal	ra,20001190 <dif_spi_device_init>
20000270:	cd05                	beqz	a0,200002a8 <main+0x128>
20000272:	4088                	lw	a0,0(s1)
20000274:	c909                	beqz	a0,20000286 <main+0x106>
20000276:	e0010517          	auipc	a0,0xe0010
2000027a:	db250513          	addi	a0,a0,-590 # 10028 <main.kLogFields.5>
2000027e:	4581                	li	a1,0
20000280:	3d6010ef          	jal	ra,20001656 <base_log_internal_dv>
20000284:	a829                	j	2000029e <main+0x11e>
20000286:	00003597          	auipc	a1,0x3
2000028a:	d4a58593          	addi	a1,a1,-694 # 20002fd0 <__udivdi3+0x38e>
2000028e:	0880                	addi	s0,sp,80
20000290:	4651                	li	a2,20
20000292:	8522                	mv	a0,s0
20000294:	355000ef          	jal	ra,20000de8 <memcpy>
20000298:	8522                	mv	a0,s0
2000029a:	312010ef          	jal	ra,200015ac <base_log_internal_core>
2000029e:	6531                	lui	a0,0xc
200002a0:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200002a4:	73c020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:130
            (dif_spi_device_params_t){
                .base_addr =
                    mmio_region_from_addr(TOP_EARLGREY_SPI_DEVICE_BASE_ADDR),
            },
            &spi) == kDifSpiDeviceOk);
  CHECK(dif_spi_device_configure(
200002a8:	00003517          	auipc	a0,0x3
200002ac:	f8050513          	addi	a0,a0,-128 # 20003228 <kDifSpiDeviceBufferLen>
200002b0:	00055503          	lhu	a0,0(a0)
200002b4:	8105                	srli	a0,a0,0x1
200002b6:	c882                	sw	zero,80(sp)
200002b8:	4585                	li	a1,1
200002ba:	caae                	sw	a1,84(sp)
200002bc:	cc82                	sw	zero,88(sp)
200002be:	ce82                	sw	zero,92(sp)
200002c0:	03f00593          	li	a1,63
200002c4:	06b10023          	sb	a1,96(sp)
200002c8:	06a11123          	sh	a0,98(sp)
200002cc:	06a11223          	sh	a0,100(sp)
200002d0:	f0000517          	auipc	a0,0xf0000
200002d4:	d8850513          	addi	a0,a0,-632 # 10000058 <spi>
200002d8:	088c                	addi	a1,sp,80
200002da:	6c9000ef          	jal	ra,200011a2 <dif_spi_device_configure>
200002de:	cd05                	beqz	a0,20000316 <main+0x196>
200002e0:	4088                	lw	a0,0(s1)
200002e2:	c909                	beqz	a0,200002f4 <main+0x174>
200002e4:	e0010517          	auipc	a0,0xe0010
200002e8:	d5850513          	addi	a0,a0,-680 # 1003c <main.kLogFields.8>
200002ec:	4581                	li	a1,0
200002ee:	368010ef          	jal	ra,20001656 <base_log_internal_dv>
200002f2:	a829                	j	2000030c <main+0x18c>
200002f4:	00003597          	auipc	a1,0x3
200002f8:	cf058593          	addi	a1,a1,-784 # 20002fe4 <__udivdi3+0x3a2>
200002fc:	0880                	addi	s0,sp,80
200002fe:	4651                	li	a2,20
20000300:	8522                	mv	a0,s0
20000302:	2e7000ef          	jal	ra,20000de8 <memcpy>
20000306:	8522                	mv	a0,s0
20000308:	2a4010ef          	jal	ra,200015ac <base_log_internal_core>
2000030c:	6531                	lui	a0,0xc
2000030e:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000312:	6ce020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:144
                  }) == kDifSpiDeviceOk);

  dif_gpio_params_t gpio_params = {
      .base_addr = mmio_region_from_addr(TOP_EARLGREY_GPIO_BASE_ADDR),
  };
  CHECK(dif_gpio_init(gpio_params, &gpio) == kDifGpioOk);
20000316:	f0000597          	auipc	a1,0xf0000
2000031a:	d4a58593          	addi	a1,a1,-694 # 10000060 <gpio>
2000031e:	40040537          	lui	a0,0x40040
20000322:	353000ef          	jal	ra,20000e74 <dif_gpio_init>
20000326:	cd05                	beqz	a0,2000035e <main+0x1de>
20000328:	4088                	lw	a0,0(s1)
2000032a:	c909                	beqz	a0,2000033c <main+0x1bc>
2000032c:	e0010517          	auipc	a0,0xe0010
20000330:	d2450513          	addi	a0,a0,-732 # 10050 <main.kLogFields.11>
20000334:	4581                	li	a1,0
20000336:	320010ef          	jal	ra,20001656 <base_log_internal_dv>
2000033a:	a829                	j	20000354 <main+0x1d4>
2000033c:	00003597          	auipc	a1,0x3
20000340:	cbc58593          	addi	a1,a1,-836 # 20002ff8 <__udivdi3+0x3b6>
20000344:	0880                	addi	s0,sp,80
20000346:	4651                	li	a2,20
20000348:	8522                	mv	a0,s0
2000034a:	29f000ef          	jal	ra,20000de8 <memcpy>
2000034e:	8522                	mv	a0,s0
20000350:	25c010ef          	jal	ra,200015ac <base_log_internal_core>
20000354:	6531                	lui	a0,0xc
20000356:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
2000035a:	686020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:146
  // Enable GPIO: 0-7 and 16 is input; 8-15 is output.
  CHECK(dif_gpio_output_set_enabled_all(&gpio, 0x0ff00) == kDifGpioOk);
2000035e:	f0000517          	auipc	a0,0xf0000
20000362:	d0250513          	addi	a0,a0,-766 # 10000060 <gpio>
20000366:	65c1                	lui	a1,0x10
20000368:	f0058593          	addi	a1,a1,-256 # ff00 <_stack_size+0xdf00>
2000036c:	58b000ef          	jal	ra,200010f6 <dif_gpio_output_set_enabled_all>
20000370:	0004ac03          	lw	s8,0(s1)
20000374:	cd05                	beqz	a0,200003ac <main+0x22c>
20000376:	000c0a63          	beqz	s8,2000038a <main+0x20a>
2000037a:	e0010517          	auipc	a0,0xe0010
2000037e:	cea50513          	addi	a0,a0,-790 # 10064 <main.kLogFields.14>
20000382:	4581                	li	a1,0
20000384:	2d2010ef          	jal	ra,20001656 <base_log_internal_dv>
20000388:	a829                	j	200003a2 <main+0x222>
2000038a:	00003597          	auipc	a1,0x3
2000038e:	c8258593          	addi	a1,a1,-894 # 2000300c <__udivdi3+0x3ca>
20000392:	0880                	addi	s0,sp,80
20000394:	4651                	li	a2,20
20000396:	8522                	mv	a0,s0
20000398:	251000ef          	jal	ra,20000de8 <memcpy>
2000039c:	8522                	mv	a0,s0
2000039e:	20e010ef          	jal	ra,200015ac <base_log_internal_core>
200003a2:	6531                	lui	a0,0xc
200003a4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200003a8:	638020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:148

  LOG_INFO("Hello, USB!");
200003ac:	020c0163          	beqz	s8,200003ce <main+0x24e>
200003b0:	e0010517          	auipc	a0,0xe0010
200003b4:	cc850513          	addi	a0,a0,-824 # 10078 <main.kLogFields.17>
200003b8:	4581                	li	a1,0
200003ba:	29c010ef          	jal	ra,20001656 <base_log_internal_dv>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:149
  LOG_INFO("Built at: " __DATE__ ", " __TIME__);
200003be:	e0010517          	auipc	a0,0xe0010
200003c2:	cce50513          	addi	a0,a0,-818 # 1008c <main.kLogFields.20>
200003c6:	4581                	li	a1,0
200003c8:	28e010ef          	jal	ra,20001656 <base_log_internal_dv>
200003cc:	a80d                	j	200003fe <main+0x27e>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:148
  LOG_INFO("Hello, USB!");
200003ce:	00003597          	auipc	a1,0x3
200003d2:	c5258593          	addi	a1,a1,-942 # 20003020 <__udivdi3+0x3de>
200003d6:	0880                	addi	s0,sp,80
200003d8:	4651                	li	a2,20
200003da:	8522                	mv	a0,s0
200003dc:	20d000ef          	jal	ra,20000de8 <memcpy>
200003e0:	8522                	mv	a0,s0
200003e2:	1ca010ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:149
  LOG_INFO("Built at: " __DATE__ ", " __TIME__);
200003e6:	00003597          	auipc	a1,0x3
200003ea:	c4e58593          	addi	a1,a1,-946 # 20003034 <__udivdi3+0x3f2>
200003ee:	0880                	addi	s0,sp,80
200003f0:	4651                	li	a2,20
200003f2:	8522                	mv	a0,s0
200003f4:	1f5000ef          	jal	ra,20000de8 <memcpy>
200003f8:	8522                	mv	a0,s0
200003fa:	1b2010ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:151

  demo_gpio_startup(&gpio);
200003fe:	f0000417          	auipc	s0,0xf0000
20000402:	c6240413          	addi	s0,s0,-926 # 10000060 <gpio>
20000406:	8522                	mv	a0,s0
20000408:	2165                	jal	200008b0 <demo_gpio_startup>
2000040a:	00ec                	addi	a1,sp,76
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:157

  // Call `usbdev_init` here so that DPI will not start until the
  // simulation has finished all of the printing, which takes a while
  // if `--trace` was passed in.
  uint32_t gpio_state;
  CHECK(dif_gpio_read_all(&gpio, &gpio_state) == kDifGpioOk);
2000040c:	8522                	mv	a0,s0
2000040e:	451000ef          	jal	ra,2000105e <dif_gpio_read_all>
20000412:	cd05                	beqz	a0,2000044a <main+0x2ca>
20000414:	000c0a63          	beqz	s8,20000428 <main+0x2a8>
20000418:	e0010517          	auipc	a0,0xe0010
2000041c:	c8850513          	addi	a0,a0,-888 # 100a0 <main.kLogFields.23>
20000420:	4581                	li	a1,0
20000422:	234010ef          	jal	ra,20001656 <base_log_internal_dv>
20000426:	a829                	j	20000440 <main+0x2c0>
20000428:	00003597          	auipc	a1,0x3
2000042c:	c2058593          	addi	a1,a1,-992 # 20003048 <__udivdi3+0x406>
20000430:	0880                	addi	s0,sp,80
20000432:	4651                	li	a2,20
20000434:	8522                	mv	a0,s0
20000436:	1b3000ef          	jal	ra,20000de8 <memcpy>
2000043a:	8522                	mv	a0,s0
2000043c:	170010ef          	jal	ra,200015ac <base_log_internal_core>
20000440:	6531                	lui	a0,0xc
20000442:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000446:	59a020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:158
  bool pinflip = gpio_state & kPinflipMask ? true : false;
2000044a:	44b6                	lw	s1,76(sp)
2000044c:	0014fa93          	andi	s5,s1,1
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:159
  bool differential = gpio_state & kDiffMask ? true : false;
20000450:	0024f413          	andi	s0,s1,2
20000454:	00145a13          	srli	s4,s0,0x1
20000458:	0024d513          	srli	a0,s1,0x2
2000045c:	00157913          	andi	s2,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:161
  bool uphy = gpio_state & kUPhyMask ? true : false;
  LOG_INFO("PHY settings: pinflip=%d differential=%d USB Phy=%d", pinflip,
20000460:	000c0d63          	beqz	s8,2000047a <main+0x2fa>
20000464:	e0010517          	auipc	a0,0xe0010
20000468:	c5050513          	addi	a0,a0,-944 # 100b4 <main.kLogFields.26>
2000046c:	458d                	li	a1,3
2000046e:	8656                	mv	a2,s5
20000470:	86d2                	mv	a3,s4
20000472:	874a                	mv	a4,s2
20000474:	1e2010ef          	jal	ra,20001656 <base_log_internal_dv>
20000478:	a00d                	j	2000049a <main+0x31a>
2000047a:	00003597          	auipc	a1,0x3
2000047e:	be258593          	addi	a1,a1,-1054 # 2000305c <__udivdi3+0x41a>
20000482:	05010993          	addi	s3,sp,80
20000486:	4651                	li	a2,20
20000488:	854e                	mv	a0,s3
2000048a:	15f000ef          	jal	ra,20000de8 <memcpy>
2000048e:	854e                	mv	a0,s3
20000490:	85d6                	mv	a1,s5
20000492:	8652                	mv	a2,s4
20000494:	86ca                	mv	a3,s2
20000496:	116010ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:159
  bool differential = gpio_state & kDiffMask ? true : false;
2000049a:	00803633          	snez	a2,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:164
           differential, uphy);
  // The TI phy always uses single ended TX
  usbdev_init(&usbdev, pinflip, differential, differential && !uphy);
2000049e:	0064f513          	andi	a0,s1,6
200004a2:	1579                	addi	a0,a0,-2
200004a4:	00153693          	seqz	a3,a0
200004a8:	f0000497          	auipc	s1,0xf0000
200004ac:	bc448493          	addi	s1,s1,-1084 # 1000006c <usbdev>
200004b0:	8526                	mv	a0,s1
200004b2:	85d6                	mv	a1,s5
200004b4:	172020ef          	jal	ra,20002626 <usbdev_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:166

  usb_controlep_init(&usbdev_control, &usbdev, 0, config_descriptors,
200004b8:	98c18513          	addi	a0,gp,-1652 # 1000018c <usbdev_control>
200004bc:	f0000697          	auipc	a3,0xf0000
200004c0:	b4c68693          	addi	a3,a3,-1204 # 10000008 <config_descriptors>
200004c4:	03700713          	li	a4,55
200004c8:	85a6                	mv	a1,s1
200004ca:	4601                	li	a2,0
200004cc:	29f010ef          	jal	ra,20001f6a <usb_controlep_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:168
                     sizeof(config_descriptors));
  usb_simpleserial_init(&simple_serial0, &usbdev, 1, usb_receipt_callback_0);
200004d0:	9a818513          	addi	a0,gp,-1624 # 100001a8 <simple_serial0>
200004d4:	00000697          	auipc	a3,0x0
200004d8:	2b868693          	addi	a3,a3,696 # 2000078c <usb_receipt_callback_0>
200004dc:	4605                	li	a2,1
200004de:	85a6                	mv	a1,s1
200004e0:	571010ef          	jal	ra,20002250 <usb_simpleserial_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:169
  usb_simpleserial_init(&simple_serial1, &usbdev, 2, usb_receipt_callback_1);
200004e4:	9c018513          	addi	a0,gp,-1600 # 100001c0 <simple_serial1>
200004e8:	00000697          	auipc	a3,0x0
200004ec:	33468693          	addi	a3,a3,820 # 2000081c <usb_receipt_callback_1>
200004f0:	4609                	li	a2,2
200004f2:	85a6                	mv	a1,s1
200004f4:	55d010ef          	jal	ra,20002250 <usb_simpleserial_init>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:171

  CHECK(dif_spi_device_send(&spi, "SPI!", 4, /*bytes_sent=*/NULL) ==
200004f8:	f0000517          	auipc	a0,0xf0000
200004fc:	b6050513          	addi	a0,a0,-1184 # 10000058 <spi>
20000500:	00003597          	auipc	a1,0x3
20000504:	43658593          	addi	a1,a1,1078 # 20003936 <__clz_tab+0x5d2>
20000508:	4611                	li	a2,4
2000050a:	4681                	li	a3,0
2000050c:	010010ef          	jal	ra,2000151c <dif_spi_device_send>
20000510:	cd05                	beqz	a0,20000548 <main+0x3c8>
20000512:	000c0a63          	beqz	s8,20000526 <main+0x3a6>
20000516:	e0010517          	auipc	a0,0xe0010
2000051a:	bb250513          	addi	a0,a0,-1102 # 100c8 <main.kLogFields.30>
2000051e:	4581                	li	a1,0
20000520:	136010ef          	jal	ra,20001656 <base_log_internal_dv>
20000524:	a829                	j	2000053e <main+0x3be>
20000526:	00003597          	auipc	a1,0x3
2000052a:	b4a58593          	addi	a1,a1,-1206 # 20003070 <__udivdi3+0x42e>
2000052e:	0880                	addi	s0,sp,80
20000530:	4651                	li	a2,20
20000532:	8522                	mv	a0,s0
20000534:	0b5000ef          	jal	ra,20000de8 <memcpy>
20000538:	8522                	mv	a0,s0
2000053a:	072010ef          	jal	ra,200015ac <base_log_internal_core>
2000053e:	6531                	lui	a0,0xc
20000540:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000544:	49c020ef          	jal	ra,200029e0 <test_status_set>
20000548:	cc02                	sw	zero,24(sp)
2000054a:	f0000517          	auipc	a0,0xf0000
2000054e:	b2250513          	addi	a0,a0,-1246 # 1000006c <usbdev>
20000552:	ca2a                	sw	a0,20(sp)
20000554:	f0000a97          	auipc	s5,0xf0000
20000558:	b0ca8a93          	addi	s5,s5,-1268 # 10000060 <gpio>
2000055c:	f0000517          	auipc	a0,0xf0000
20000560:	afc50513          	addi	a0,a0,-1284 # 10000058 <spi>
20000564:	c82a                	sw	a0,16(sp)
20000566:	f0000417          	auipc	s0,0xf0000
2000056a:	aee40413          	addi	s0,s0,-1298 # 10000054 <_data_end>
2000056e:	04810a13          	addi	s4,sp,72
20000572:	f0000517          	auipc	a0,0xf0000
20000576:	af250513          	addi	a0,a0,-1294 # 10000064 <usb_chars_recved_total>
2000057a:	d02a                	sw	a0,32(sp)
2000057c:	00003d17          	auipc	s10,0x3
20000580:	4e6d0d13          	addi	s10,s10,1254 # 20003a62 <__clz_tab+0x6fe>
20000584:	9a818c93          	addi	s9,gp,-1624 # 100001a8 <simple_serial0>
20000588:	49cd                	li	s3,19
2000058a:	00003517          	auipc	a0,0x3
2000058e:	b4a50513          	addi	a0,a0,-1206 # 200030d4 <__udivdi3+0x492>
20000592:	c42a                	sw	a0,8(sp)
20000594:	05010b93          	addi	s7,sp,80
20000598:	e0010517          	auipc	a0,0xe0010
2000059c:	b9450513          	addi	a0,a0,-1132 # 1012c <main.kLogFields.46>
200005a0:	c62a                	sw	a0,12(sp)
200005a2:	04710d93          	addi	s11,sp,71
200005a6:	00003517          	auipc	a0,0x3
200005aa:	b1a50513          	addi	a0,a0,-1254 # 200030c0 <__udivdi3+0x47e>
200005ae:	d22a                	sw	a0,36(sp)
200005b0:	e0010517          	auipc	a0,0xe0010
200005b4:	b6850513          	addi	a0,a0,-1176 # 10118 <main.kLogFields.42>
200005b8:	da2a                	sw	a0,52(sp)
200005ba:	9c018b13          	addi	s6,gp,-1600 # 100001c0 <simple_serial1>
200005be:	00003517          	auipc	a0,0x3
200005c2:	aee50513          	addi	a0,a0,-1298 # 200030ac <__udivdi3+0x46a>
200005c6:	d82a                	sw	a0,48(sp)
200005c8:	6531                	lui	a0,0xc
200005ca:	aad50913          	addi	s2,a0,-1363 # baad <_stack_size+0x9aad>
200005ce:	e0010517          	auipc	a0,0xe0010
200005d2:	b3650513          	addi	a0,a0,-1226 # 10104 <main.kLogFields.39>
200005d6:	c0aa                	sw	a0,64(sp)
200005d8:	00003517          	auipc	a0,0x3
200005dc:	ac050513          	addi	a0,a0,-1344 # 20003098 <__udivdi3+0x456>
200005e0:	d62a                	sw	a0,44(sp)
200005e2:	e0010517          	auipc	a0,0xe0010
200005e6:	b0e50513          	addi	a0,a0,-1266 # 100f0 <main.kLogFields.36>
200005ea:	de2a                	sw	a0,60(sp)
200005ec:	00003517          	auipc	a0,0x3
200005f0:	a9850513          	addi	a0,a0,-1384 # 20003084 <__udivdi3+0x442>
200005f4:	d42a                	sw	a0,40(sp)
200005f6:	e0010517          	auipc	a0,0xe0010
200005fa:	ae650513          	addi	a0,a0,-1306 # 100dc <main.kLogFields.33>
200005fe:	dc2a                	sw	a0,56(sp)
20000600:	4505                	li	a0,1
20000602:	ce2a                	sw	a0,28(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:177
        kDifSpiDeviceOk);

  bool say_hello = true;
  bool pass_signaled = false;
  while (true) {
    usbdev_poll(&usbdev);
20000604:	4552                	lw	a0,20(sp)
20000606:	5d5010ef          	jal	ra,200023da <usbdev_poll>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:179

    gpio_state = demo_gpio_to_log_echo(&gpio, gpio_state);
2000060a:	45b6                	lw	a1,76(sp)
2000060c:	8556                	mv	a0,s5
2000060e:	2edd                	jal	20000a04 <demo_gpio_to_log_echo>
20000610:	c6aa                	sw	a0,76(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:180
    demo_spi_to_log_echo(&spi);
20000612:	4542                	lw	a0,16(sp)
20000614:	2b39                	jal	20000b32 <demo_spi_to_log_echo>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:184

    while (true) {
      size_t chars_available;
      if (dif_uart_rx_bytes_available(&uart, &chars_available) != kDifUartOk ||
20000616:	8522                	mv	a0,s0
20000618:	85d2                	mv	a1,s4
2000061a:	023010ef          	jal	ra,20001e3c <dif_uart_rx_bytes_available>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:185
          chars_available == 0) {
2000061e:	45a6                	lw	a1,72(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:184
      if (dif_uart_rx_bytes_available(&uart, &chars_available) != kDifUartOk ||
20000620:	10051563          	bnez	a0,2000072a <main+0x5aa>
20000624:	10058363          	beqz	a1,2000072a <main+0x5aa>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:190
        break;
      }

      uint8_t rcv_char;
      CHECK(dif_uart_bytes_receive(&uart, 1, &rcv_char, NULL) == kDifUartOk);
20000628:	4585                	li	a1,1
2000062a:	8522                	mv	a0,s0
2000062c:	866e                	mv	a2,s11
2000062e:	4681                	li	a3,0
20000630:	792010ef          	jal	ra,20001dc2 <dif_uart_bytes_receive>
20000634:	c11d                	beqz	a0,2000065a <main+0x4da>
20000636:	000c0763          	beqz	s8,20000644 <main+0x4c4>
2000063a:	5562                	lw	a0,56(sp)
2000063c:	4581                	li	a1,0
2000063e:	018010ef          	jal	ra,20001656 <base_log_internal_dv>
20000642:	a809                	j	20000654 <main+0x4d4>
20000644:	4651                	li	a2,20
20000646:	855e                	mv	a0,s7
20000648:	55a2                	lw	a1,40(sp)
2000064a:	79e000ef          	jal	ra,20000de8 <memcpy>
2000064e:	855e                	mv	a0,s7
20000650:	75d000ef          	jal	ra,200015ac <base_log_internal_core>
20000654:	854a                	mv	a0,s2
20000656:	38a020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:191
      CHECK(dif_uart_byte_send_polled(&uart, rcv_char) == kDifUartOk);
2000065a:	04714583          	lbu	a1,71(sp)
2000065e:	8522                	mv	a0,s0
20000660:	794010ef          	jal	ra,20001df4 <dif_uart_byte_send_polled>
20000664:	c11d                	beqz	a0,2000068a <main+0x50a>
20000666:	000c0763          	beqz	s8,20000674 <main+0x4f4>
2000066a:	5572                	lw	a0,60(sp)
2000066c:	4581                	li	a1,0
2000066e:	7e9000ef          	jal	ra,20001656 <base_log_internal_dv>
20000672:	a809                	j	20000684 <main+0x504>
20000674:	4651                	li	a2,20
20000676:	855e                	mv	a0,s7
20000678:	55b2                	lw	a1,44(sp)
2000067a:	76e000ef          	jal	ra,20000de8 <memcpy>
2000067e:	855e                	mv	a0,s7
20000680:	72d000ef          	jal	ra,200015ac <base_log_internal_core>
20000684:	854a                	mv	a0,s2
20000686:	35a020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:193

      CHECK(dif_gpio_write_all(&gpio, rcv_char << 8) == kDifGpioOk);
2000068a:	04714503          	lbu	a0,71(sp)
2000068e:	00851593          	slli	a1,a0,0x8
20000692:	8556                	mv	a0,s5
20000694:	1f7000ef          	jal	ra,2000108a <dif_gpio_write_all>
20000698:	c11d                	beqz	a0,200006be <main+0x53e>
2000069a:	000c0763          	beqz	s8,200006a8 <main+0x528>
2000069e:	4506                	lw	a0,64(sp)
200006a0:	4581                	li	a1,0
200006a2:	7b5000ef          	jal	ra,20001656 <base_log_internal_dv>
200006a6:	a809                	j	200006b8 <main+0x538>
200006a8:	4651                	li	a2,20
200006aa:	855e                	mv	a0,s7
200006ac:	55c2                	lw	a1,48(sp)
200006ae:	73a000ef          	jal	ra,20000de8 <memcpy>
200006b2:	855e                	mv	a0,s7
200006b4:	6f9000ef          	jal	ra,200015ac <base_log_internal_core>
200006b8:	854a                	mv	a0,s2
200006ba:	326020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:195

      if (rcv_char == '/') {
200006be:	04714583          	lbu	a1,71(sp)
200006c2:	02f00513          	li	a0,47
200006c6:	02a59263          	bne	a1,a0,200006ea <main+0x56a>
200006ca:	84ee                	mv	s1,s11
200006cc:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:197
        uint32_t usb_irq_state =
            REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET);
200006d0:	00052983          	lw	s3,0(a0) # 40110000 <_data_init_start+0x2010c08c>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:198
        uint32_t usb_stat = REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET);
200006d4:	01052d83          	lw	s11,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:199
        LOG_INFO("I%4x-%8x", usb_irq_state, usb_stat);
200006d8:	020c0563          	beqz	s8,20000702 <main+0x582>
200006dc:	4589                	li	a1,2
200006de:	5552                	lw	a0,52(sp)
200006e0:	864e                	mv	a2,s3
200006e2:	86ee                	mv	a3,s11
200006e4:	773000ef          	jal	ra,20001656 <base_log_internal_dv>
200006e8:	a03d                	j	20000716 <main+0x596>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:201
      } else {
        usb_simpleserial_send_byte(&simple_serial0, rcv_char);
200006ea:	8566                	mv	a0,s9
200006ec:	2f5010ef          	jal	ra,200021e0 <usb_simpleserial_send_byte>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:202
        usb_simpleserial_send_byte(&simple_serial1, rcv_char + 1);
200006f0:	04710503          	lb	a0,71(sp)
200006f4:	0505                	addi	a0,a0,1
200006f6:	0ff57593          	andi	a1,a0,255
200006fa:	855a                	mv	a0,s6
200006fc:	2e5010ef          	jal	ra,200021e0 <usb_simpleserial_send_byte>
20000700:	a829                	j	2000071a <main+0x59a>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:199
        LOG_INFO("I%4x-%8x", usb_irq_state, usb_stat);
20000702:	4651                	li	a2,20
20000704:	855e                	mv	a0,s7
20000706:	5592                	lw	a1,36(sp)
20000708:	6e0000ef          	jal	ra,20000de8 <memcpy>
2000070c:	855e                	mv	a0,s7
2000070e:	85ce                	mv	a1,s3
20000710:	866e                	mv	a2,s11
20000712:	69b000ef          	jal	ra,200015ac <base_log_internal_core>
20000716:	49cd                	li	s3,19
20000718:	8da6                	mv	s11,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:184
      if (dif_uart_rx_bytes_available(&uart, &chars_available) != kDifUartOk ||
2000071a:	8522                	mv	a0,s0
2000071c:	85d2                	mv	a1,s4
2000071e:	71e010ef          	jal	ra,20001e3c <dif_uart_rx_bytes_available>
20000722:	e501                	bnez	a0,2000072a <main+0x5aa>
20000724:	4526                	lw	a0,72(sp)
20000726:	f00511e3          	bnez	a0,20000628 <main+0x4a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:205
      }
    }
    if (say_hello && usb_chars_recved_total > 2) {
2000072a:	5502                	lw	a0,32(sp)
2000072c:	4108                	lw	a0,0(a0)
2000072e:	00353593          	sltiu	a1,a0,3
20000732:	4672                	lw	a2,28(sp)
20000734:	fff64613          	not	a2,a2
20000738:	8dd1                	or	a1,a1,a2
2000073a:	8985                	andi	a1,a1,1
2000073c:	ed99                	bnez	a1,2000075a <main+0x5da>
2000073e:	4481                	li	s1,0
usb_send_str():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:97
  for (int i = 0; string[i] != 0; ++i) {
20000740:	01a48533          	add	a0,s1,s10
20000744:	00054583          	lbu	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:98
    usb_simpleserial_send_byte(ss_ctx, string[i]);
20000748:	8566                	mv	a0,s9
2000074a:	297010ef          	jal	ra,200021e0 <usb_simpleserial_send_byte>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:97
  for (int i = 0; string[i] != 0; ++i) {
2000074e:	0485                	addi	s1,s1,1
20000750:	ff3498e3          	bne	s1,s3,20000740 <main+0x5c0>
main():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:210
      usb_send_str("Hello USB World!!!!", &simple_serial0);
      say_hello = false;
    }
    // Signal that the simulation succeeded.
    if (usb_chars_recved_total >= kExpectedUsbCharsRecved && !pass_signaled) {
20000754:	5502                	lw	a0,32(sp)
20000756:	4108                	lw	a0,0(a0)
20000758:	ce02                	sw	zero,28(sp)
2000075a:	00653513          	sltiu	a0,a0,6
2000075e:	45e2                	lw	a1,24(sp)
20000760:	8d4d                	or	a0,a0,a1
20000762:	8905                	andi	a0,a0,1
20000764:	ea0510e3          	bnez	a0,20000604 <main+0x484>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:211
      LOG_INFO("PASS!");
20000768:	000c0763          	beqz	s8,20000776 <main+0x5f6>
2000076c:	4532                	lw	a0,12(sp)
2000076e:	4581                	li	a1,0
20000770:	6e7000ef          	jal	ra,20001656 <base_log_internal_dv>
20000774:	a809                	j	20000786 <main+0x606>
20000776:	4651                	li	a2,20
20000778:	855e                	mv	a0,s7
2000077a:	45a2                	lw	a1,8(sp)
2000077c:	66c000ef          	jal	ra,20000de8 <memcpy>
20000780:	855e                	mv	a0,s7
20000782:	62b000ef          	jal	ra,200015ac <base_log_internal_core>
20000786:	4505                	li	a0,1
20000788:	cc2a                	sw	a0,24(sp)
2000078a:	bdad                	j	20000604 <main+0x484>

2000078c <usb_receipt_callback_0>:
usb_receipt_callback_0():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:76
static void usb_receipt_callback_0(uint8_t c) {
2000078c:	1101                	addi	sp,sp,-32
2000078e:	ce06                	sw	ra,28(sp)
20000790:	cc22                	sw	s0,24(sp)
20000792:	45a9                	li	a1,10
make_printable():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:55
  if (c == 0xa || c == 0xd) {
20000794:	02b50163          	beq	a0,a1,200007b6 <usb_receipt_callback_0+0x2a>
20000798:	45b5                	li	a1,13
2000079a:	00b50e63          	beq	a0,a1,200007b6 <usb_receipt_callback_0+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:59
  if (c < ' ' || c > '~') {
2000079e:	fe050593          	addi	a1,a0,-32
200007a2:	0ff5f613          	andi	a2,a1,255
200007a6:	05e00693          	li	a3,94
200007aa:	03f00593          	li	a1,63
200007ae:	00c6e363          	bltu	a3,a2,200007b4 <usb_receipt_callback_0+0x28>
200007b2:	85aa                	mv	a1,a0
200007b4:	852e                	mv	a0,a1
usb_receipt_callback_0():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:78
  CHECK(dif_uart_byte_send_polled(&uart, c) == kDifUartOk);
200007b6:	0ff57593          	andi	a1,a0,255
200007ba:	f0000517          	auipc	a0,0xf0000
200007be:	89a50513          	addi	a0,a0,-1894 # 10000054 <_data_end>
200007c2:	632010ef          	jal	ra,20001df4 <dif_uart_byte_send_polled>
200007c6:	c121                	beqz	a0,20000806 <usb_receipt_callback_0+0x7a>
200007c8:	00003517          	auipc	a0,0x3
200007cc:	b7050513          	addi	a0,a0,-1168 # 20003338 <kDeviceLogBypassUartAddress>
200007d0:	4108                	lw	a0,0(a0)
200007d2:	c909                	beqz	a0,200007e4 <usb_receipt_callback_0+0x58>
200007d4:	e0010517          	auipc	a0,0xe0010
200007d8:	96c50513          	addi	a0,a0,-1684 # 10140 <usb_receipt_callback_0.kLogFields>
200007dc:	4581                	li	a1,0
200007de:	679000ef          	jal	ra,20001656 <base_log_internal_dv>
200007e2:	a829                	j	200007fc <usb_receipt_callback_0+0x70>
200007e4:	00003597          	auipc	a1,0x3
200007e8:	90458593          	addi	a1,a1,-1788 # 200030e8 <__udivdi3+0x4a6>
200007ec:	840a                	mv	s0,sp
200007ee:	4651                	li	a2,20
200007f0:	8522                	mv	a0,s0
200007f2:	5f6000ef          	jal	ra,20000de8 <memcpy>
200007f6:	8522                	mv	a0,s0
200007f8:	5b5000ef          	jal	ra,200015ac <base_log_internal_core>
200007fc:	6531                	lui	a0,0xc
200007fe:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000802:	1de020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:79
  ++usb_chars_recved_total;
20000806:	f0000517          	auipc	a0,0xf0000
2000080a:	85e50513          	addi	a0,a0,-1954 # 10000064 <usb_chars_recved_total>
2000080e:	410c                	lw	a1,0(a0)
20000810:	0585                	addi	a1,a1,1
20000812:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:80
}
20000814:	4462                	lw	s0,24(sp)
20000816:	40f2                	lw	ra,28(sp)
20000818:	6105                	addi	sp,sp,32
2000081a:	8082                	ret

2000081c <usb_receipt_callback_1>:
usb_receipt_callback_1():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:81
static void usb_receipt_callback_1(uint8_t c) {
2000081c:	1101                	addi	sp,sp,-32
2000081e:	ce06                	sw	ra,28(sp)
20000820:	cc22                	sw	s0,24(sp)
20000822:	4625                	li	a2,9
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:82
  c = make_printable(c + 1, '?');
20000824:	00150593          	addi	a1,a0,1
make_printable():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:55
  if (c == 0xa || c == 0xd) {
20000828:	02c50063          	beq	a0,a2,20000848 <usb_receipt_callback_1+0x2c>
2000082c:	4631                	li	a2,12
2000082e:	00c50d63          	beq	a0,a2,20000848 <usb_receipt_callback_1+0x2c>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:59
  if (c < ' ' || c > '~') {
20000832:	1505                	addi	a0,a0,-31
20000834:	0ff57613          	andi	a2,a0,255
20000838:	05e00693          	li	a3,94
2000083c:	03f00513          	li	a0,63
20000840:	00c6e363          	bltu	a3,a2,20000846 <usb_receipt_callback_1+0x2a>
20000844:	852e                	mv	a0,a1
20000846:	85aa                	mv	a1,a0
usb_receipt_callback_1():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:83
  CHECK(dif_uart_byte_send_polled(&uart, c) == kDifUartOk);
20000848:	0ff5f593          	andi	a1,a1,255
2000084c:	f0000517          	auipc	a0,0xf0000
20000850:	80850513          	addi	a0,a0,-2040 # 10000054 <_data_end>
20000854:	5a0010ef          	jal	ra,20001df4 <dif_uart_byte_send_polled>
20000858:	c121                	beqz	a0,20000898 <usb_receipt_callback_1+0x7c>
2000085a:	00003517          	auipc	a0,0x3
2000085e:	ade50513          	addi	a0,a0,-1314 # 20003338 <kDeviceLogBypassUartAddress>
20000862:	4108                	lw	a0,0(a0)
20000864:	c909                	beqz	a0,20000876 <usb_receipt_callback_1+0x5a>
20000866:	e0010517          	auipc	a0,0xe0010
2000086a:	8ee50513          	addi	a0,a0,-1810 # 10154 <usb_receipt_callback_1.kLogFields>
2000086e:	4581                	li	a1,0
20000870:	5e7000ef          	jal	ra,20001656 <base_log_internal_dv>
20000874:	a829                	j	2000088e <usb_receipt_callback_1+0x72>
20000876:	00003597          	auipc	a1,0x3
2000087a:	88658593          	addi	a1,a1,-1914 # 200030fc <__udivdi3+0x4ba>
2000087e:	840a                	mv	s0,sp
20000880:	4651                	li	a2,20
20000882:	8522                	mv	a0,s0
20000884:	564000ef          	jal	ra,20000de8 <memcpy>
20000888:	8522                	mv	a0,s0
2000088a:	523000ef          	jal	ra,200015ac <base_log_internal_core>
2000088e:	6531                	lui	a0,0xc
20000890:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000894:	14c020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:84
  ++usb_chars_recved_total;
20000898:	effff517          	auipc	a0,0xeffff
2000089c:	7cc50513          	addi	a0,a0,1996 # 10000064 <usb_chars_recved_total>
200008a0:	410c                	lw	a1,0(a0)
200008a2:	0585                	addi	a1,a1,1
200008a4:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/hello_usbdev/hello_usbdev.c:85
}
200008a6:	4462                	lw	s0,24(sp)
200008a8:	40f2                	lw	ra,28(sp)
200008aa:	6105                	addi	sp,sp,32
200008ac:	8082                	ret
	...

200008b0 <demo_gpio_startup>:
demo_gpio_startup():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:17
#include "sw/device/lib/dif/dif_uart.h"
#include "sw/device/lib/runtime/hart.h"
#include "sw/device/lib/runtime/log.h"
#include "sw/device/lib/testing/check.h"

void demo_gpio_startup(dif_gpio_t *gpio) {
200008b0:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:18
  LOG_INFO("Watch the LEDs!");
200008b2:	de06                	sw	ra,60(sp)
200008b4:	dc22                	sw	s0,56(sp)
200008b6:	da26                	sw	s1,52(sp)
200008b8:	d84a                	sw	s2,48(sp)
200008ba:	d64e                	sw	s3,44(sp)
200008bc:	d452                	sw	s4,40(sp)
200008be:	d256                	sw	s5,36(sp)
200008c0:	d05a                	sw	s6,32(sp)
200008c2:	ce5e                	sw	s7,28(sp)
200008c4:	cc62                	sw	s8,24(sp)
200008c6:	00003597          	auipc	a1,0x3
200008ca:	a7258593          	addi	a1,a1,-1422 # 20003338 <kDeviceLogBypassUartAddress>
200008ce:	0005ab03          	lw	s6,0(a1)
200008d2:	8a2a                	mv	s4,a0
200008d4:	020b0863          	beqz	s6,20000904 <demo_gpio_startup+0x54>
200008d8:	e0010517          	auipc	a0,0xe0010
200008dc:	89050513          	addi	a0,a0,-1904 # 10168 <demo_gpio_startup.kLogFields>
200008e0:	4581                	li	a1,0
200008e2:	575000ef          	jal	ra,20001656 <base_log_internal_dv>
200008e6:	6541                	lui	a0,0x10
200008e8:	f0050593          	addi	a1,a0,-256 # ff00 <_stack_size+0xdf00>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:21

  // Give a LED pattern as startup indicator for 5 seconds.
  CHECK(dif_gpio_write_all(gpio, 0xff00) == kDifGpioOk);
200008ec:	8552                	mv	a0,s4
200008ee:	79c000ef          	jal	ra,2000108a <dif_gpio_write_all>
200008f2:	c939                	beqz	a0,20000948 <demo_gpio_startup+0x98>
200008f4:	e0010517          	auipc	a0,0xe0010
200008f8:	88850513          	addi	a0,a0,-1912 # 1017c <demo_gpio_startup.kLogFields.2>
200008fc:	4581                	li	a1,0
200008fe:	559000ef          	jal	ra,20001656 <base_log_internal_dv>
20000902:	a835                	j	2000093e <demo_gpio_startup+0x8e>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:18
  LOG_INFO("Watch the LEDs!");
20000904:	00003597          	auipc	a1,0x3
20000908:	80c58593          	addi	a1,a1,-2036 # 20003110 <__udivdi3+0x4ce>
2000090c:	840a                	mv	s0,sp
2000090e:	4651                	li	a2,20
20000910:	8522                	mv	a0,s0
20000912:	29d9                	jal	20000de8 <memcpy>
20000914:	8522                	mv	a0,s0
20000916:	497000ef          	jal	ra,200015ac <base_log_internal_core>
2000091a:	6541                	lui	a0,0x10
2000091c:	f0050593          	addi	a1,a0,-256 # ff00 <_stack_size+0xdf00>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:21
  CHECK(dif_gpio_write_all(gpio, 0xff00) == kDifGpioOk);
20000920:	8552                	mv	a0,s4
20000922:	768000ef          	jal	ra,2000108a <dif_gpio_write_all>
20000926:	c10d                	beqz	a0,20000948 <demo_gpio_startup+0x98>
20000928:	00002597          	auipc	a1,0x2
2000092c:	7fc58593          	addi	a1,a1,2044 # 20003124 <__udivdi3+0x4e2>
20000930:	840a                	mv	s0,sp
20000932:	4651                	li	a2,20
20000934:	8522                	mv	a0,s0
20000936:	294d                	jal	20000de8 <memcpy>
20000938:	8522                	mv	a0,s0
2000093a:	473000ef          	jal	ra,200015ac <base_log_internal_core>
2000093e:	6531                	lui	a0,0xc
20000940:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000944:	09c020ef          	jal	ra,200029e0 <test_status_set>
20000948:	4401                	li	s0,0
2000094a:	6505                	lui	a0,0x1
2000094c:	38850493          	addi	s1,a0,904 # 1388 <__DYNAMIC+0x1388>
20000950:	02000c13          	li	s8,32
20000954:	00002917          	auipc	s2,0x2
20000958:	7e490913          	addi	s2,s2,2020 # 20003138 <__udivdi3+0x4f6>
2000095c:	898a                	mv	s3,sp
2000095e:	6531                	lui	a0,0xc
20000960:	aad50b93          	addi	s7,a0,-1363 # baad <_stack_size+0x9aad>
20000964:	e0010a97          	auipc	s5,0xe0010
20000968:	82ca8a93          	addi	s5,s5,-2004 # 10190 <demo_gpio_startup.kLogFields.5>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:23
  for (int i = 0; i < 32; ++i) {
    usleep(5 * 1000);  // 5 ms
2000096c:	8526                	mv	a0,s1
2000096e:	2ec5                	jal	20000d5e <usleep>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:24
    CHECK(dif_gpio_write(gpio, 8 + (i % 8), (i / 8) % 2) == kDifGpioOk);
20000970:	00747513          	andi	a0,s0,7
20000974:	00856593          	ori	a1,a0,8
20000978:	00847513          	andi	a0,s0,8
2000097c:	00355613          	srli	a2,a0,0x3
20000980:	8552                	mv	a0,s4
20000982:	716000ef          	jal	ra,20001098 <dif_gpio_write>
20000986:	c115                	beqz	a0,200009aa <demo_gpio_startup+0xfa>
20000988:	000b0763          	beqz	s6,20000996 <demo_gpio_startup+0xe6>
2000098c:	8556                	mv	a0,s5
2000098e:	4581                	li	a1,0
20000990:	4c7000ef          	jal	ra,20001656 <base_log_internal_dv>
20000994:	a801                	j	200009a4 <demo_gpio_startup+0xf4>
20000996:	4651                	li	a2,20
20000998:	854e                	mv	a0,s3
2000099a:	85ca                	mv	a1,s2
2000099c:	21b1                	jal	20000de8 <memcpy>
2000099e:	854e                	mv	a0,s3
200009a0:	40d000ef          	jal	ra,200015ac <base_log_internal_core>
200009a4:	855e                	mv	a0,s7
200009a6:	03a020ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:22
  for (int i = 0; i < 32; ++i) {
200009aa:	0405                	addi	s0,s0,1
200009ac:	fd8410e3          	bne	s0,s8,2000096c <demo_gpio_startup+0xbc>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:26
  }
  CHECK(dif_gpio_write_all(gpio, 0x0000) == kDifGpioOk);  // All LEDs off.
200009b0:	8552                	mv	a0,s4
200009b2:	4581                	li	a1,0
200009b4:	2dd9                	jal	2000108a <dif_gpio_write_all>
200009b6:	c91d                	beqz	a0,200009ec <demo_gpio_startup+0x13c>
200009b8:	000b0a63          	beqz	s6,200009cc <demo_gpio_startup+0x11c>
200009bc:	e000f517          	auipc	a0,0xe000f
200009c0:	7e850513          	addi	a0,a0,2024 # 101a4 <demo_gpio_startup.kLogFields.8>
200009c4:	4581                	li	a1,0
200009c6:	491000ef          	jal	ra,20001656 <base_log_internal_dv>
200009ca:	a821                	j	200009e2 <demo_gpio_startup+0x132>
200009cc:	00002597          	auipc	a1,0x2
200009d0:	78058593          	addi	a1,a1,1920 # 2000314c <__udivdi3+0x50a>
200009d4:	840a                	mv	s0,sp
200009d6:	4651                	li	a2,20
200009d8:	8522                	mv	a0,s0
200009da:	2139                	jal	20000de8 <memcpy>
200009dc:	8522                	mv	a0,s0
200009de:	3cf000ef          	jal	ra,200015ac <base_log_internal_core>
200009e2:	6531                	lui	a0,0xc
200009e4:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
200009e8:	7f9010ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:27
}
200009ec:	4c62                	lw	s8,24(sp)
200009ee:	4bf2                	lw	s7,28(sp)
200009f0:	5b02                	lw	s6,32(sp)
200009f2:	5a92                	lw	s5,36(sp)
200009f4:	5a22                	lw	s4,40(sp)
200009f6:	59b2                	lw	s3,44(sp)
200009f8:	5942                	lw	s2,48(sp)
200009fa:	54d2                	lw	s1,52(sp)
200009fc:	5462                	lw	s0,56(sp)
200009fe:	50f2                	lw	ra,60(sp)
20000a00:	6121                	addi	sp,sp,64
20000a02:	8082                	ret

20000a04 <demo_gpio_to_log_echo>:
demo_gpio_to_log_echo():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:40
/**
 * Mask for the FTDI bit among the GPIO bits.
 */
static const uint32_t kFtdiMask = 0x10000;

uint32_t demo_gpio_to_log_echo(dif_gpio_t *gpio, uint32_t prev_gpio_state) {
20000a04:	7139                	addi	sp,sp,-64
20000a06:	de06                	sw	ra,60(sp)
20000a08:	dc22                	sw	s0,56(sp)
20000a0a:	da26                	sw	s1,52(sp)
20000a0c:	d84a                	sw	s2,48(sp)
20000a0e:	d64e                	sw	s3,44(sp)
20000a10:	d452                	sw	s4,40(sp)
20000a12:	d256                	sw	s5,36(sp)
20000a14:	d05a                	sw	s6,32(sp)
20000a16:	ce5e                	sw	s7,28(sp)
20000a18:	cc62                	sw	s8,24(sp)
20000a1a:	842e                	mv	s0,a1
20000a1c:	084c                	addi	a1,sp,20
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:42
  uint32_t gpio_state;
  CHECK(dif_gpio_read_all(gpio, &gpio_state) == kDifGpioOk);
20000a1e:	2581                	jal	2000105e <dif_gpio_read_all>
20000a20:	00003597          	auipc	a1,0x3
20000a24:	91858593          	addi	a1,a1,-1768 # 20003338 <kDeviceLogBypassUartAddress>
20000a28:	0005aa83          	lw	s5,0(a1)
20000a2c:	c91d                	beqz	a0,20000a62 <demo_gpio_to_log_echo+0x5e>
20000a2e:	000a8a63          	beqz	s5,20000a42 <demo_gpio_to_log_echo+0x3e>
20000a32:	e000f517          	auipc	a0,0xe000f
20000a36:	78650513          	addi	a0,a0,1926 # 101b8 <demo_gpio_to_log_echo.kLogFields>
20000a3a:	4581                	li	a1,0
20000a3c:	41b000ef          	jal	ra,20001656 <base_log_internal_dv>
20000a40:	a821                	j	20000a58 <demo_gpio_to_log_echo+0x54>
20000a42:	00002597          	auipc	a1,0x2
20000a46:	71e58593          	addi	a1,a1,1822 # 20003160 <__udivdi3+0x51e>
20000a4a:	848a                	mv	s1,sp
20000a4c:	4651                	li	a2,20
20000a4e:	8526                	mv	a0,s1
20000a50:	2e61                	jal	20000de8 <memcpy>
20000a52:	8526                	mv	a0,s1
20000a54:	359000ef          	jal	ra,200015ac <base_log_internal_core>
20000a58:	6531                	lui	a0,0xc
20000a5a:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000a5e:	783010ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:43
  gpio_state &= kGpioMask;
20000a62:	4552                	lw	a0,20(sp)
20000a64:	4481                	li	s1,0
20000a66:	65c1                	lui	a1,0x10
20000a68:	0ff58593          	addi	a1,a1,255 # 100ff <main.kLogFields.36+0xf>
20000a6c:	8d6d                	and	a0,a0,a1
20000a6e:	ca2a                	sw	a0,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:45

  uint32_t state_delta = prev_gpio_state ^ gpio_state;
20000a70:	00854b33          	xor	s6,a0,s0
20000a74:	4b85                	li	s7,1
20000a76:	4c21                	li	s8,8
20000a78:	00002997          	auipc	s3,0x2
20000a7c:	6fc98993          	addi	s3,s3,1788 # 20003174 <__udivdi3+0x532>
20000a80:	890a                	mv	s2,sp
20000a82:	e000fa17          	auipc	s4,0xe000f
20000a86:	74aa0a13          	addi	s4,s4,1866 # 101cc <demo_gpio_to_log_echo.kLogFields.12>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:47
  for (int bit_idx = 0; bit_idx < 8; ++bit_idx) {
    bool changed = ((state_delta >> bit_idx) & 0x1) != 0;
20000a8a:	009b9533          	sll	a0,s7,s1
20000a8e:	016575b3          	and	a1,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:49
    bool is_currently_set = ((gpio_state >> bit_idx) & 0x1) != 0;
    if (changed) {
20000a92:	c59d                	beqz	a1,20000ac0 <demo_gpio_to_log_echo+0xbc>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:48
    bool is_currently_set = ((gpio_state >> bit_idx) & 0x1) != 0;
20000a94:	45d2                	lw	a1,20(sp)
20000a96:	8d6d                	and	a0,a0,a1
20000a98:	00a03433          	snez	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:50
      LOG_INFO("GPIO switch #%d changed to %d", bit_idx, is_currently_set);
20000a9c:	000a8963          	beqz	s5,20000aae <demo_gpio_to_log_echo+0xaa>
20000aa0:	4589                	li	a1,2
20000aa2:	8552                	mv	a0,s4
20000aa4:	8626                	mv	a2,s1
20000aa6:	86a2                	mv	a3,s0
20000aa8:	3af000ef          	jal	ra,20001656 <base_log_internal_dv>
20000aac:	a811                	j	20000ac0 <demo_gpio_to_log_echo+0xbc>
20000aae:	4651                	li	a2,20
20000ab0:	854a                	mv	a0,s2
20000ab2:	85ce                	mv	a1,s3
20000ab4:	2e15                	jal	20000de8 <memcpy>
20000ab6:	854a                	mv	a0,s2
20000ab8:	85a6                	mv	a1,s1
20000aba:	8622                	mv	a2,s0
20000abc:	2f1000ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:46
  for (int bit_idx = 0; bit_idx < 8; ++bit_idx) {
20000ac0:	0485                	addi	s1,s1,1
20000ac2:	fd8494e3          	bne	s1,s8,20000a8a <demo_gpio_to_log_echo+0x86>
20000ac6:	6541                	lui	a0,0x10
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:54
    }
  }

  if ((state_delta & kFtdiMask) != 0) {
20000ac8:	00ab7533          	and	a0,s6,a0
20000acc:	c531                	beqz	a0,20000b18 <demo_gpio_to_log_echo+0x114>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:55
    if ((gpio_state & kFtdiMask) != 0) {
20000ace:	01614503          	lbu	a0,22(sp)
20000ad2:	8905                	andi	a0,a0,1
20000ad4:	e901                	bnez	a0,20000ae4 <demo_gpio_to_log_echo+0xe0>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:58
      LOG_INFO("FTDI control changed. Enable JTAG.");
    } else {
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000ad6:	020a8163          	beqz	s5,20000af8 <demo_gpio_to_log_echo+0xf4>
20000ada:	e000f517          	auipc	a0,0xe000f
20000ade:	71a50513          	addi	a0,a0,1818 # 101f4 <demo_gpio_to_log_echo.kLogFields.18>
20000ae2:	a039                	j	20000af0 <demo_gpio_to_log_echo+0xec>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:56
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000ae4:	000a8f63          	beqz	s5,20000b02 <demo_gpio_to_log_echo+0xfe>
20000ae8:	e000f517          	auipc	a0,0xe000f
20000aec:	6f850513          	addi	a0,a0,1784 # 101e0 <demo_gpio_to_log_echo.kLogFields.15>
20000af0:	4581                	li	a1,0
20000af2:	365000ef          	jal	ra,20001656 <base_log_internal_dv>
20000af6:	a00d                	j	20000b18 <demo_gpio_to_log_echo+0x114>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:58
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000af8:	00002597          	auipc	a1,0x2
20000afc:	6a458593          	addi	a1,a1,1700 # 2000319c <__udivdi3+0x55a>
20000b00:	a029                	j	20000b0a <demo_gpio_to_log_echo+0x106>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:56
      LOG_INFO("FTDI control changed. Enable JTAG.");
20000b02:	00002597          	auipc	a1,0x2
20000b06:	68658593          	addi	a1,a1,1670 # 20003188 <__udivdi3+0x546>
20000b0a:	840a                	mv	s0,sp
20000b0c:	4651                	li	a2,20
20000b0e:	8522                	mv	a0,s0
20000b10:	2ce1                	jal	20000de8 <memcpy>
20000b12:	8522                	mv	a0,s0
20000b14:	299000ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:62
    }
  }

  return gpio_state;
20000b18:	4552                	lw	a0,20(sp)
20000b1a:	4c62                	lw	s8,24(sp)
20000b1c:	4bf2                	lw	s7,28(sp)
20000b1e:	5b02                	lw	s6,32(sp)
20000b20:	5a92                	lw	s5,36(sp)
20000b22:	5a22                	lw	s4,40(sp)
20000b24:	59b2                	lw	s3,44(sp)
20000b26:	5942                	lw	s2,48(sp)
20000b28:	54d2                	lw	s1,52(sp)
20000b2a:	5462                	lw	s0,56(sp)
20000b2c:	50f2                	lw	ra,60(sp)
20000b2e:	6121                	addi	sp,sp,64
20000b30:	8082                	ret

20000b32 <demo_spi_to_log_echo>:
demo_spi_to_log_echo():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:65
}

void demo_spi_to_log_echo(const dif_spi_device_t *spi) {
20000b32:	715d                	addi	sp,sp,-80
20000b34:	c686                	sw	ra,76(sp)
20000b36:	c4a2                	sw	s0,72(sp)
20000b38:	c2a6                	sw	s1,68(sp)
20000b3a:	c0ca                	sw	s2,64(sp)
20000b3c:	842a                	mv	s0,a0
20000b3e:	100c                	addi	a1,sp,32
20000b40:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:68
  uint32_t spi_buf[8];
  size_t spi_len;
  CHECK(dif_spi_device_recv(spi, spi_buf, sizeof(spi_buf), &spi_len) ==
20000b42:	02000613          	li	a2,32
20000b46:	049000ef          	jal	ra,2000138e <dif_spi_device_recv>
20000b4a:	00002497          	auipc	s1,0x2
20000b4e:	7ee48493          	addi	s1,s1,2030 # 20003338 <kDeviceLogBypassUartAddress>
20000b52:	cd05                	beqz	a0,20000b8a <demo_spi_to_log_echo+0x58>
20000b54:	4088                	lw	a0,0(s1)
20000b56:	c909                	beqz	a0,20000b68 <demo_spi_to_log_echo+0x36>
20000b58:	e000f517          	auipc	a0,0xe000f
20000b5c:	6b050513          	addi	a0,a0,1712 # 10208 <demo_spi_to_log_echo.kLogFields>
20000b60:	4581                	li	a1,0
20000b62:	2f5000ef          	jal	ra,20001656 <base_log_internal_dv>
20000b66:	a829                	j	20000b80 <demo_spi_to_log_echo+0x4e>
20000b68:	00002597          	auipc	a1,0x2
20000b6c:	64858593          	addi	a1,a1,1608 # 200031b0 <__udivdi3+0x56e>
20000b70:	00810913          	addi	s2,sp,8
20000b74:	4651                	li	a2,20
20000b76:	854a                	mv	a0,s2
20000b78:	2c85                	jal	20000de8 <memcpy>
20000b7a:	854a                	mv	a0,s2
20000b7c:	231000ef          	jal	ra,200015ac <base_log_internal_core>
20000b80:	6531                	lui	a0,0xc
20000b82:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000b86:	65b010ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:70
        kDifSpiDeviceOk);
  if (spi_len > 0) {
20000b8a:	4572                	lw	a0,28(sp)
20000b8c:	c151                	beqz	a0,20000c10 <demo_spi_to_log_echo+0xde>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:71
    uint32_t echo_word = spi_buf[0] ^ 0x01010101;
20000b8e:	5502                	lw	a0,32(sp)
20000b90:	010105b7          	lui	a1,0x1010
20000b94:	10158593          	addi	a1,a1,257 # 1010101 <test_status_set.kLogFields.2+0xfffdf5>
20000b98:	8d2d                	xor	a0,a0,a1
20000b9a:	c22a                	sw	a0,4(sp)
20000b9c:	004c                	addi	a1,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:72
    CHECK(dif_spi_device_send(spi, &echo_word, sizeof(uint32_t),
20000b9e:	4611                	li	a2,4
20000ba0:	8522                	mv	a0,s0
20000ba2:	4681                	li	a3,0
20000ba4:	179000ef          	jal	ra,2000151c <dif_spi_device_send>
20000ba8:	4084                	lw	s1,0(s1)
20000baa:	c915                	beqz	a0,20000bde <demo_spi_to_log_echo+0xac>
20000bac:	c889                	beqz	s1,20000bbe <demo_spi_to_log_echo+0x8c>
20000bae:	e000f517          	auipc	a0,0xe000f
20000bb2:	66e50513          	addi	a0,a0,1646 # 1021c <demo_spi_to_log_echo.kLogFields.21>
20000bb6:	4581                	li	a1,0
20000bb8:	29f000ef          	jal	ra,20001656 <base_log_internal_dv>
20000bbc:	a821                	j	20000bd4 <demo_spi_to_log_echo+0xa2>
20000bbe:	00002597          	auipc	a1,0x2
20000bc2:	60658593          	addi	a1,a1,1542 # 200031c4 <__udivdi3+0x582>
20000bc6:	0020                	addi	s0,sp,8
20000bc8:	4651                	li	a2,20
20000bca:	8522                	mv	a0,s0
20000bcc:	2c31                	jal	20000de8 <memcpy>
20000bce:	8522                	mv	a0,s0
20000bd0:	1dd000ef          	jal	ra,200015ac <base_log_internal_core>
20000bd4:	6531                	lui	a0,0xc
20000bd6:	aad50513          	addi	a0,a0,-1363 # baad <_stack_size+0x9aad>
20000bda:	607010ef          	jal	ra,200029e0 <test_status_set>
20000bde:	4472                	lw	s0,28(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:74
                              /*bytes_sent=*/NULL) == kDifSpiDeviceOk);
    LOG_INFO("SPI: %z", spi_len, spi_buf);
20000be0:	c899                	beqz	s1,20000bf6 <demo_spi_to_log_echo+0xc4>
20000be2:	e000f517          	auipc	a0,0xe000f
20000be6:	64e50513          	addi	a0,a0,1614 # 10230 <demo_spi_to_log_echo.kLogFields.24>
20000bea:	1014                	addi	a3,sp,32
20000bec:	4589                	li	a1,2
20000bee:	8622                	mv	a2,s0
20000bf0:	267000ef          	jal	ra,20001656 <base_log_internal_dv>
20000bf4:	a831                	j	20000c10 <demo_spi_to_log_echo+0xde>
20000bf6:	00002597          	auipc	a1,0x2
20000bfa:	5e258593          	addi	a1,a1,1506 # 200031d8 <__udivdi3+0x596>
20000bfe:	0024                	addi	s1,sp,8
20000c00:	4651                	li	a2,20
20000c02:	8526                	mv	a0,s1
20000c04:	22d5                	jal	20000de8 <memcpy>
20000c06:	1010                	addi	a2,sp,32
20000c08:	8526                	mv	a0,s1
20000c0a:	85a2                	mv	a1,s0
20000c0c:	1a1000ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:76
  }
}
20000c10:	4906                	lw	s2,64(sp)
20000c12:	4496                	lw	s1,68(sp)
20000c14:	4426                	lw	s0,72(sp)
20000c16:	40b6                	lw	ra,76(sp)
20000c18:	6161                	addi	sp,sp,80
20000c1a:	8082                	ret

20000c1c <demo_uart_to_uart_and_gpio_echo>:
demo_uart_to_uart_and_gpio_echo():
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:78

void demo_uart_to_uart_and_gpio_echo(dif_uart_t *uart, dif_gpio_t *gpio) {
20000c1c:	711d                	addi	sp,sp,-96
20000c1e:	ce86                	sw	ra,92(sp)
20000c20:	cca2                	sw	s0,88(sp)
20000c22:	caa6                	sw	s1,84(sp)
20000c24:	c8ca                	sw	s2,80(sp)
20000c26:	c6ce                	sw	s3,76(sp)
20000c28:	c4d2                	sw	s4,72(sp)
20000c2a:	c2d6                	sw	s5,68(sp)
20000c2c:	c0da                	sw	s6,64(sp)
20000c2e:	de5e                	sw	s7,60(sp)
20000c30:	dc62                	sw	s8,56(sp)
20000c32:	da66                	sw	s9,52(sp)
20000c34:	d86a                	sw	s10,48(sp)
20000c36:	d66e                	sw	s11,44(sp)
20000c38:	8b2e                	mv	s6,a1
20000c3a:	84aa                	mv	s1,a0
20000c3c:	102c                	addi	a1,sp,40
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:81
  while (true) {
    size_t chars_available;
    if (dif_uart_rx_bytes_available(uart, &chars_available) != kDifUartOk ||
20000c3e:	1fe010ef          	jal	ra,20001e3c <dif_uart_rx_bytes_available>
20000c42:	0e051b63          	bnez	a0,20000d38 <demo_uart_to_uart_and_gpio_echo+0x11c>
20000c46:	5522                	lw	a0,40(sp)
20000c48:	0e050863          	beqz	a0,20000d38 <demo_uart_to_uart_and_gpio_echo+0x11c>
20000c4c:	00002517          	auipc	a0,0x2
20000c50:	6ec50513          	addi	a0,a0,1772 # 20003338 <kDeviceLogBypassUartAddress>
20000c54:	00052a03          	lw	s4,0(a0)
20000c58:	02710913          	addi	s2,sp,39
20000c5c:	02810993          	addi	s3,sp,40
20000c60:	00002517          	auipc	a0,0x2
20000c64:	5b450513          	addi	a0,a0,1460 # 20003214 <__udivdi3+0x5d2>
20000c68:	c62a                	sw	a0,12(sp)
20000c6a:	01010a93          	addi	s5,sp,16
20000c6e:	6531                	lui	a0,0xc
20000c70:	aad50413          	addi	s0,a0,-1363 # baad <_stack_size+0x9aad>
20000c74:	e000fb97          	auipc	s7,0xe000f
20000c78:	5f8b8b93          	addi	s7,s7,1528 # 1026c <demo_uart_to_uart_and_gpio_echo.kLogFields.31>
20000c7c:	00002c17          	auipc	s8,0x2
20000c80:	584c0c13          	addi	s8,s8,1412 # 20003200 <__udivdi3+0x5be>
20000c84:	e000fc97          	auipc	s9,0xe000f
20000c88:	5d4c8c93          	addi	s9,s9,1492 # 10258 <demo_uart_to_uart_and_gpio_echo.kLogFields.28>
20000c8c:	00002d17          	auipc	s10,0x2
20000c90:	560d0d13          	addi	s10,s10,1376 # 200031ec <__udivdi3+0x5aa>
20000c94:	e000fd97          	auipc	s11,0xe000f
20000c98:	5b0d8d93          	addi	s11,s11,1456 # 10244 <demo_uart_to_uart_and_gpio_echo.kLogFields>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:87
        chars_available == 0) {
      break;
    }

    uint8_t rcv_char;
    CHECK(dif_uart_bytes_receive(uart, 1, &rcv_char, NULL) == kDifUartOk);
20000c9c:	4585                	li	a1,1
20000c9e:	8526                	mv	a0,s1
20000ca0:	864a                	mv	a2,s2
20000ca2:	4681                	li	a3,0
20000ca4:	11e010ef          	jal	ra,20001dc2 <dif_uart_bytes_receive>
20000ca8:	c115                	beqz	a0,20000ccc <demo_uart_to_uart_and_gpio_echo+0xb0>
20000caa:	000a0763          	beqz	s4,20000cb8 <demo_uart_to_uart_and_gpio_echo+0x9c>
20000cae:	856e                	mv	a0,s11
20000cb0:	4581                	li	a1,0
20000cb2:	1a5000ef          	jal	ra,20001656 <base_log_internal_dv>
20000cb6:	a801                	j	20000cc6 <demo_uart_to_uart_and_gpio_echo+0xaa>
20000cb8:	4651                	li	a2,20
20000cba:	8556                	mv	a0,s5
20000cbc:	85ea                	mv	a1,s10
20000cbe:	222d                	jal	20000de8 <memcpy>
20000cc0:	8556                	mv	a0,s5
20000cc2:	0eb000ef          	jal	ra,200015ac <base_log_internal_core>
20000cc6:	8522                	mv	a0,s0
20000cc8:	519010ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:88
    CHECK(dif_uart_byte_send_polled(uart, rcv_char) == kDifUartOk);
20000ccc:	02714583          	lbu	a1,39(sp)
20000cd0:	8526                	mv	a0,s1
20000cd2:	122010ef          	jal	ra,20001df4 <dif_uart_byte_send_polled>
20000cd6:	c115                	beqz	a0,20000cfa <demo_uart_to_uart_and_gpio_echo+0xde>
20000cd8:	000a0763          	beqz	s4,20000ce6 <demo_uart_to_uart_and_gpio_echo+0xca>
20000cdc:	8566                	mv	a0,s9
20000cde:	4581                	li	a1,0
20000ce0:	177000ef          	jal	ra,20001656 <base_log_internal_dv>
20000ce4:	a801                	j	20000cf4 <demo_uart_to_uart_and_gpio_echo+0xd8>
20000ce6:	4651                	li	a2,20
20000ce8:	8556                	mv	a0,s5
20000cea:	85e2                	mv	a1,s8
20000cec:	28f5                	jal	20000de8 <memcpy>
20000cee:	8556                	mv	a0,s5
20000cf0:	0bd000ef          	jal	ra,200015ac <base_log_internal_core>
20000cf4:	8522                	mv	a0,s0
20000cf6:	4eb010ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:89
    CHECK(dif_gpio_write_all(gpio, rcv_char << 8) == kDifGpioOk);
20000cfa:	02714503          	lbu	a0,39(sp)
20000cfe:	00851593          	slli	a1,a0,0x8
20000d02:	855a                	mv	a0,s6
20000d04:	2659                	jal	2000108a <dif_gpio_write_all>
20000d06:	c115                	beqz	a0,20000d2a <demo_uart_to_uart_and_gpio_echo+0x10e>
20000d08:	000a0763          	beqz	s4,20000d16 <demo_uart_to_uart_and_gpio_echo+0xfa>
20000d0c:	855e                	mv	a0,s7
20000d0e:	4581                	li	a1,0
20000d10:	147000ef          	jal	ra,20001656 <base_log_internal_dv>
20000d14:	a801                	j	20000d24 <demo_uart_to_uart_and_gpio_echo+0x108>
20000d16:	4651                	li	a2,20
20000d18:	8556                	mv	a0,s5
20000d1a:	45b2                	lw	a1,12(sp)
20000d1c:	20f1                	jal	20000de8 <memcpy>
20000d1e:	8556                	mv	a0,s5
20000d20:	08d000ef          	jal	ra,200015ac <base_log_internal_core>
20000d24:	8522                	mv	a0,s0
20000d26:	4bb010ef          	jal	ra,200029e0 <test_status_set>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:81
    if (dif_uart_rx_bytes_available(uart, &chars_available) != kDifUartOk ||
20000d2a:	8526                	mv	a0,s1
20000d2c:	85ce                	mv	a1,s3
20000d2e:	10e010ef          	jal	ra,20001e3c <dif_uart_rx_bytes_available>
20000d32:	e119                	bnez	a0,20000d38 <demo_uart_to_uart_and_gpio_echo+0x11c>
20000d34:	5522                	lw	a0,40(sp)
20000d36:	f13d                	bnez	a0,20000c9c <demo_uart_to_uart_and_gpio_echo+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/examples/demos.c:91
  }
}
20000d38:	5db2                	lw	s11,44(sp)
20000d3a:	5d42                	lw	s10,48(sp)
20000d3c:	5cd2                	lw	s9,52(sp)
20000d3e:	5c62                	lw	s8,56(sp)
20000d40:	5bf2                	lw	s7,60(sp)
20000d42:	4b06                	lw	s6,64(sp)
20000d44:	4a96                	lw	s5,68(sp)
20000d46:	4a26                	lw	s4,72(sp)
20000d48:	49b6                	lw	s3,76(sp)
20000d4a:	4946                	lw	s2,80(sp)
20000d4c:	44d6                	lw	s1,84(sp)
20000d4e:	4466                	lw	s0,88(sp)
20000d50:	40f6                	lw	ra,92(sp)
20000d52:	6125                	addi	sp,sp,96
20000d54:	8082                	ret
	...

20000d58 <wait_for_interrupt>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
20000d58:	10500073          	wfi
20000d5c:	8082                	ret

20000d5e <usleep>:
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:14
#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/runtime/ibex.h"

extern void wait_for_interrupt(void);

void usleep(uint32_t usec) {
20000d5e:	1141                	addi	sp,sp,-16
20000d60:	c606                	sw	ra,12(sp)
20000d62:	00002597          	auipc	a1,0x2
20000d66:	5ae58593          	addi	a1,a1,1454 # 20003310 <kClockFreqCpuHz>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:15
  uint64_t cycles = kClockFreqCpuHz * usec / 1000000;
20000d6a:	41d0                	lw	a2,4(a1)
20000d6c:	4194                	lw	a3,0(a1)
20000d6e:	02a605b3          	mul	a1,a2,a0
20000d72:	02a6b633          	mulhu	a2,a3,a0
20000d76:	95b2                	add	a1,a1,a2
20000d78:	02a68533          	mul	a0,a3,a0
20000d7c:	000f4637          	lui	a2,0xf4
20000d80:	24060613          	addi	a2,a2,576 # f4240 <test_status_set.kLogFields.2+0xe3f34>
20000d84:	4681                	li	a3,0
20000d86:	6bd010ef          	jal	ra,20002c42 <__udivdi3>
ibex_mcycle_read():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/ibex.h:32
 */
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
20000d8a:	4801                	li	a6,0
20000d8c:	4701                	li	a4,0

20000d8e <read0>:
20000d8e:	b8002873          	csrr	a6,mcycleh
20000d92:	b00026f3          	csrr	a3,mcycle
20000d96:	b8002773          	csrr	a4,mcycleh
20000d9a:	fee81ae3          	bne	a6,a4,20000d8e <read0>
20000d9e:	4781                	li	a5,0
20000da0:	4601                	li	a2,0

20000da2 <read1>:
20000da2:	b80027f3          	csrr	a5,mcycleh
20000da6:	b0002773          	csrr	a4,mcycle
20000daa:	b8002673          	csrr	a2,mcycleh
20000dae:	fec79ae3          	bne	a5,a2,20000da2 <read1>
usleep():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:17
  uint64_t start = ibex_mcycle_read();
  while ((ibex_mcycle_read() - start) < cycles) {
20000db2:	00d73633          	sltu	a2,a4,a3
20000db6:	410787b3          	sub	a5,a5,a6
20000dba:	8f91                	sub	a5,a5,a2
20000dbc:	00b78663          	beq	a5,a1,20000dc8 <read1+0x26>
20000dc0:	00b7b733          	sltu	a4,a5,a1
20000dc4:	ff69                	bnez	a4,20000d9e <read0+0x10>
20000dc6:	a031                	j	20000dd2 <read1+0x30>
20000dc8:	40d70633          	sub	a2,a4,a3
20000dcc:	00a63733          	sltu	a4,a2,a0
20000dd0:	f779                	bnez	a4,20000d9e <read0+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:19
  }
}
20000dd2:	40b2                	lw	ra,12(sp)
20000dd4:	0141                	addi	sp,sp,16
20000dd6:	8082                	ret

20000dd8 <abort>:
wait_for_interrupt():
/home/gl/work/opentitan/repo/sw/device/lib/runtime/hart.h:25
20000dd8:	10500073          	wfi
abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/hart.c:22

noreturn void abort(void) {
  while (true) {
20000ddc:	bff5                	j	20000dd8 <abort>
	...

20000de0 <read_32>:
read_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:68
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
20000de0:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:69
  return val;
20000de2:	8082                	ret

20000de4 <write_32>:
write_32():
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:94
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
20000de4:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/sw/device/lib/base/memory.h:95
}
20000de6:	8082                	ret

20000de8 <memcpy>:
memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24

#if !defined(HOST_BUILD)
void *memcpy(void *restrict dest, const void *restrict src, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t *src8 = (uint8_t *)src;
  for (size_t i = 0; i < len; ++i) {
20000de8:	ca11                	beqz	a2,20000dfc <memcpy+0x14>
20000dea:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:25
    dest8[i] = src8[i];
20000dec:	00058703          	lb	a4,0(a1)
20000df0:	00e68023          	sb	a4,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:24
  for (size_t i = 0; i < len; ++i) {
20000df4:	167d                	addi	a2,a2,-1
20000df6:	0685                	addi	a3,a3,1
20000df8:	0585                	addi	a1,a1,1
20000dfa:	fa6d                	bnez	a2,20000dec <memcpy+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:27
  }
  return dest;
20000dfc:	8082                	ret

20000dfe <memset>:
memset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35

#if !defined(HOST_BUILD)
void *memset(void *dest, int value, size_t len) {
  uint8_t *dest8 = (uint8_t *)dest;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000dfe:	c619                	beqz	a2,20000e0c <memset+0xe>
20000e00:	86aa                	mv	a3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:36
    dest8[i] = value8;
20000e02:	00b68023          	sb	a1,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:35
  for (size_t i = 0; i < len; ++i) {
20000e06:	167d                	addi	a2,a2,-1
20000e08:	0685                	addi	a3,a3,1
20000e0a:	fe65                	bnez	a2,20000e02 <memset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:38
  }
  return dest;
20000e0c:	8082                	ret

20000e0e <memcmp>:
memcmp():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
};

int memcmp(const void *lhs, const void *rhs, size_t len) {
  const uint8_t *lhs8 = (uint8_t *)lhs;
  const uint8_t *rhs8 = (uint8_t *)rhs;
  for (size_t i = 0; i < len; ++i) {
20000e0e:	ce09                	beqz	a2,20000e28 <memcmp+0x1a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:53
    if (lhs8[i] < rhs8[i]) {
20000e10:	00054683          	lbu	a3,0(a0)
20000e14:	0005c703          	lbu	a4,0(a1)
20000e18:	00e6ea63          	bltu	a3,a4,20000e2c <memcmp+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:55
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
20000e1c:	00d76b63          	bltu	a4,a3,20000e32 <memcmp+0x24>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:52
  for (size_t i = 0; i < len; ++i) {
20000e20:	167d                	addi	a2,a2,-1
20000e22:	0585                	addi	a1,a1,1
20000e24:	0505                	addi	a0,a0,1
20000e26:	f66d                	bnez	a2,20000e10 <memcmp+0x2>
20000e28:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:60
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
20000e2a:	8082                	ret
20000e2c:	fd600513          	li	a0,-42
20000e30:	8082                	ret
20000e32:	02a00513          	li	a0,42
20000e36:	8082                	ret

20000e38 <memchr>:
memchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67

#if !defined(HOST_BUILD)
void *memchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000e38:	ca11                	beqz	a2,20000e4c <memchr+0x14>
20000e3a:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:68
    if (ptr8[i] == value8) {
20000e3e:	00054683          	lbu	a3,0(a0)
20000e42:	00b68663          	beq	a3,a1,20000e4e <memchr+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:67
  for (size_t i = 0; i < len; ++i) {
20000e46:	167d                	addi	a2,a2,-1
20000e48:	0505                	addi	a0,a0,1
20000e4a:	fa75                	bnez	a2,20000e3e <memchr+0x6>
20000e4c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:73
      return ptr8 + i;
    }
  }
  return NULL;
}
20000e4e:	8082                	ret

20000e50 <memrchr>:
memrchr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
  for (size_t i = 0; i < len; ++i) {
20000e50:	ce09                	beqz	a2,20000e6a <memrchr+0x1a>
20000e52:	fff50693          	addi	a3,a0,-1
20000e56:	0ff5f593          	andi	a1,a1,255
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:81
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
20000e5a:	00c68733          	add	a4,a3,a2
20000e5e:	00074703          	lbu	a4,0(a4)
20000e62:	00b70663          	beq	a4,a1,20000e6e <memrchr+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:79
  for (size_t i = 0; i < len; ++i) {
20000e66:	167d                	addi	a2,a2,-1
20000e68:	fa6d                	bnez	a2,20000e5a <memrchr+0xa>
20000e6a:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/memory.c:86
      return ptr8 + idx;
    }
  }
  return NULL;
}
20000e6c:	8082                	ret
20000e6e:	9532                	add	a0,a0,a2
20000e70:	157d                	addi	a0,a0,-1
20000e72:	8082                	ret

20000e74 <dif_gpio_init>:
dif_gpio_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:103

  return kDifGpioOk;
}

dif_gpio_result_t dif_gpio_init(dif_gpio_params_t params, dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000e74:	c581                	beqz	a1,20000e7c <dif_gpio_init+0x8>
20000e76:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:107
    return kDifGpioBadArg;
  }

  gpio->params = params;
20000e78:	c188                	sw	a0,0(a1)
20000e7a:	a011                	j	20000e7e <dif_gpio_init+0xa>
20000e7c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:110

  return kDifGpioOk;
}
20000e7e:	8532                	mv	a0,a2
20000e80:	8082                	ret

20000e82 <dif_gpio_reset>:
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:113

dif_gpio_result_t dif_gpio_reset(const dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000e82:	cd15                	beqz	a0,20000ebe <dif_gpio_reset+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:119
    return kDifGpioBadArg;
  }

  // We don't need to write to `GPIO_MASKED_OE_*` and `GPIO_MASKED_OUT_*`
  // since we directly reset `GPIO_DIRECT_OE` and `GPIO_DIRECT_OUT` below.
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000e84:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000e86:	0005a223          	sw	zero,4(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:120
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, 0);
20000e8a:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e8c:	0005ae23          	sw	zero,28(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:121
  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET, 0);
20000e90:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e92:	0005a823          	sw	zero,16(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:122
  mmio_region_write32(gpio->params.base_addr,
20000e96:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e98:	0205a423          	sw	zero,40(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:124
                      GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000e9c:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000e9e:	0205a623          	sw	zero,44(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:126
                      GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000ea2:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000ea4:	0205a823          	sw	zero,48(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:128
                      GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000ea8:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000eaa:	0205aa23          	sw	zero,52(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:130
                      GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, 0);
  mmio_region_write32(gpio->params.base_addr,
20000eae:	410c                	lw	a1,0(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000eb0:	0205ac23          	sw	zero,56(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:133
                      GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET, 0);
  // Also clear all pending interrupts
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000eb4:	410c                	lw	a1,0(a0)
20000eb6:	4501                	li	a0,0
20000eb8:	567d                	li	a2,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000eba:	c190                	sw	a2,0(a1)
dif_gpio_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:137
                      0xFFFFFFFFu);

  return kDifGpioOk;
}
20000ebc:	8082                	ret
20000ebe:	4509                	li	a0,2
20000ec0:	8082                	ret

20000ec2 <dif_gpio_irq_is_pending>:
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:141

dif_gpio_result_t dif_gpio_irq_is_pending(const dif_gpio_t *gpio,
                                          dif_gpio_pin_t pin,
                                          bool *is_pending) {
20000ec2:	86aa                	mv	a3,a0
20000ec4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:142
  if (gpio == NULL || is_pending == NULL) {
20000ec6:	ca91                	beqz	a3,20000eda <dif_gpio_irq_is_pending+0x18>
20000ec8:	ca09                	beqz	a2,20000eda <dif_gpio_irq_is_pending+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
    return kDifGpioBadArg;
  }

  *is_pending = mmio_region_get_bit32(gpio->params.base_addr,
20000eca:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ecc:	4114                	lw	a3,0(a0)
20000ece:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
 */
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20000ed0:	00b6d5b3          	srl	a1,a3,a1
20000ed4:	8985                	andi	a1,a1,1
dif_gpio_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:146
20000ed6:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:150
                                      GPIO_INTR_STATE_REG_OFFSET, pin);

  return kDifGpioOk;
}
20000eda:	8082                	ret

20000edc <dif_gpio_irq_is_pending_all>:
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:153

dif_gpio_result_t dif_gpio_irq_is_pending_all(const dif_gpio_t *gpio,
                                              dif_gpio_state_t *is_pending) {
20000edc:	862a                	mv	a2,a0
20000ede:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:154
  if (gpio == NULL || is_pending == NULL) {
20000ee0:	c611                	beqz	a2,20000eec <dif_gpio_irq_is_pending_all+0x10>
20000ee2:	c589                	beqz	a1,20000eec <dif_gpio_irq_is_pending_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:159
    return kDifGpioBadArg;
  }

  *is_pending =
      mmio_region_read32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET);
20000ee4:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000ee6:	4110                	lw	a2,0(a0)
20000ee8:	4501                	li	a0,0
dif_gpio_irq_is_pending_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:158
  *is_pending =
20000eea:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:162

  return kDifGpioOk;
}
20000eec:	8082                	ret

20000eee <dif_gpio_irq_acknowledge>:
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:166

dif_gpio_result_t dif_gpio_irq_acknowledge(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000eee:	c901                	beqz	a0,20000efe <dif_gpio_irq_acknowledge+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:170
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_STATE_REG_OFFSET,
20000ef0:	4110                	lw	a2,0(a0)
20000ef2:	4501                	li	a0,0
20000ef4:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000ef6:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000efa:	c20c                	sw	a1,0(a2)
dif_gpio_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:174
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000efc:	8082                	ret
20000efe:	4509                	li	a0,2
20000f00:	8082                	ret

20000f02 <dif_gpio_irq_get_enabled>:
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:178

dif_gpio_result_t dif_gpio_irq_get_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t *state) {
20000f02:	86aa                	mv	a3,a0
20000f04:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:179
  if (gpio == NULL || state == NULL) {
20000f06:	ca89                	beqz	a3,20000f18 <dif_gpio_irq_get_enabled+0x16>
20000f08:	ca01                	beqz	a2,20000f18 <dif_gpio_irq_get_enabled+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:183
    return kDifGpioBadArg;
  }

  bool is_enabled = mmio_region_get_bit32(gpio->params.base_addr,
20000f0a:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f0c:	4154                	lw	a3,4(a0)
20000f0e:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20000f10:	00b6d5b3          	srl	a1,a3,a1
20000f14:	8985                	andi	a1,a1,1
dif_gpio_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:185
                                          GPIO_INTR_ENABLE_REG_OFFSET, pin);
  *state = is_enabled ? kDifGpioToggleEnabled : kDifGpioToggleDisabled;
20000f16:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:188

  return kDifGpioOk;
}
20000f18:	8082                	ret

20000f1a <dif_gpio_irq_set_enabled>:
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:192

dif_gpio_result_t dif_gpio_irq_set_enabled(const dif_gpio_t *gpio,
                                           dif_gpio_pin_t pin,
                                           dif_gpio_toggle_t state) {
20000f1a:	86aa                	mv	a3,a0
20000f1c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:193
  if (gpio == NULL) {
20000f1e:	c695                	beqz	a3,20000f4a <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:197
    return kDifGpioBadArg;
  }

  switch (state) {
20000f20:	ca19                	beqz	a2,20000f36 <dif_gpio_irq_set_enabled+0x1c>
20000f22:	4705                	li	a4,1
20000f24:	02e61363          	bne	a2,a4,20000f4a <dif_gpio_irq_set_enabled+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:199
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_bit32(gpio->params.base_addr,
20000f28:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f2a:	4254                	lw	a3,4(a2)
20000f2c:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000f2e:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000f32:	8dd5                	or	a1,a1,a3
20000f34:	a811                	j	20000f48 <dif_gpio_irq_set_enabled+0x2e>
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:203
                                      GPIO_INTR_ENABLE_REG_OFFSET, pin);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_bit32(gpio->params.base_addr,
20000f36:	4290                	lw	a2,0(a3)
20000f38:	4501                	li	a0,0
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f3a:	4254                	lw	a3,4(a2)
20000f3c:	4705                	li	a4,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000f3e:	00b715b3          	sll	a1,a4,a1
20000f42:	fff5c593          	not	a1,a1
20000f46:	8df5                	and	a1,a1,a3
20000f48:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:211
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000f4a:	8082                	ret

20000f4c <dif_gpio_irq_set_enabled_masked>:
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:215

dif_gpio_result_t dif_gpio_irq_set_enabled_masked(const dif_gpio_t *gpio,
                                                  dif_gpio_mask_t mask,
                                                  dif_gpio_toggle_t state) {
20000f4c:	86aa                	mv	a3,a0
20000f4e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:216
  if (gpio == NULL) {
20000f50:	c28d                	beqz	a3,20000f72 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:220
    return kDifGpioBadArg;
  }

  switch (state) {
20000f52:	ca09                	beqz	a2,20000f64 <dif_gpio_irq_set_enabled_masked+0x18>
20000f54:	4705                	li	a4,1
20000f56:	00e61e63          	bne	a2,a4,20000f72 <dif_gpio_irq_set_enabled_masked+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:222
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20000f5a:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f5c:	4254                	lw	a3,4(a2)
20000f5e:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000f60:	8dd5                	or	a1,a1,a3
20000f62:	a039                	j	20000f70 <dif_gpio_irq_set_enabled_masked+0x24>
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:226
                                       GPIO_INTR_ENABLE_REG_OFFSET, mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20000f64:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20000f66:	4254                	lw	a3,4(a2)
20000f68:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20000f6a:	fff5c593          	not	a1,a1
20000f6e:	8df5                	and	a1,a1,a3
20000f70:	c24c                	sw	a1,4(a2)
dif_gpio_irq_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:234
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
20000f72:	8082                	ret

20000f74 <dif_gpio_irq_force>:
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:238

dif_gpio_result_t dif_gpio_irq_force(const dif_gpio_t *gpio,
                                     dif_gpio_pin_t pin) {
  if (gpio == NULL) {
20000f74:	c901                	beqz	a0,20000f84 <dif_gpio_irq_force+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:242
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_TEST_REG_OFFSET,
20000f76:	4110                	lw	a2,0(a0)
20000f78:	4501                	li	a0,0
20000f7a:	4685                	li	a3,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000f7c:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f80:	c60c                	sw	a1,8(a2)
dif_gpio_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:246
                      index_to_mask(pin));

  return kDifGpioOk;
}
20000f82:	8082                	ret
20000f84:	4509                	li	a0,2
20000f86:	8082                	ret

20000f88 <dif_gpio_irq_disable_all>:
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:250

dif_gpio_result_t dif_gpio_irq_disable_all(const dif_gpio_t *gpio,
                                           dif_gpio_state_t *snapshot) {
  if (gpio == NULL) {
20000f88:	c911                	beqz	a0,20000f9c <dif_gpio_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:254
    return kDifGpioBadArg;
  }

  if (snapshot != NULL) {
20000f8a:	c581                	beqz	a1,20000f92 <dif_gpio_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:256
    *snapshot =
        mmio_region_read32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET);
20000f8c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000f8e:	4250                	lw	a2,4(a2)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:255
    *snapshot =
20000f90:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:258
  }
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET, 0);
20000f92:	410c                	lw	a1,0(a0)
20000f94:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000f96:	0005a223          	sw	zero,4(a1)
dif_gpio_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:261

  return kDifGpioOk;
}
20000f9a:	8082                	ret
20000f9c:	4509                	li	a0,2
20000f9e:	8082                	ret

20000fa0 <dif_gpio_irq_restore_all>:
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:264

dif_gpio_result_t dif_gpio_irq_restore_all(const dif_gpio_t *gpio,
                                           const dif_gpio_state_t *snapshot) {
20000fa0:	862a                	mv	a2,a0
20000fa2:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:265
  if (gpio == NULL || snapshot == NULL) {
20000fa4:	c611                	beqz	a2,20000fb0 <dif_gpio_irq_restore_all+0x10>
20000fa6:	c589                	beqz	a1,20000fb0 <dif_gpio_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:270
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20000fa8:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:269
  mmio_region_write32(gpio->params.base_addr, GPIO_INTR_ENABLE_REG_OFFSET,
20000faa:	4210                	lw	a2,0(a2)
20000fac:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20000fae:	c24c                	sw	a1,4(a2)
dif_gpio_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:273

  return kDifGpioOk;
}
20000fb0:	8082                	ret

20000fb2 <dif_gpio_irq_set_trigger>:
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:278

dif_gpio_result_t dif_gpio_irq_set_trigger(const dif_gpio_t *gpio,
                                           dif_gpio_mask_t mask,
                                           dif_gpio_irq_trigger_t trigger) {
  if (gpio == NULL) {
20000fb2:	c529                	beqz	a0,20000ffc <dif_gpio_irq_set_trigger+0x4a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:283
    return kDifGpioBadArg;
  }

  // Disable all interrupt triggers for the given mask.
  mmio_region_nonatomic_clear_mask32(
20000fb4:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fb6:	5698                	lw	a4,40(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000fb8:	fff5c793          	not	a5,a1
20000fbc:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fbe:	d698                	sw	a4,40(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:285
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000fc0:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fc2:	56d8                	lw	a4,44(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000fc4:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fc6:	d6d8                	sw	a4,44(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:287
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_FALLING_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000fc8:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fca:	5a98                	lw	a4,48(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000fcc:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fce:	da98                	sw	a4,48(a3)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:289
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET, mask, 0);
  mmio_region_nonatomic_clear_mask32(
20000fd0:	4114                	lw	a3,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000fd2:	5ad8                	lw	a4,52(a3)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20000fd4:	8f7d                	and	a4,a4,a5
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000fd6:	dad8                	sw	a4,52(a3)
20000fd8:	4709                	li	a4,2
20000fda:	4685                	li	a3,1
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
      gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);

  switch (trigger) {
20000fdc:	02c75263          	bge	a4,a2,20001000 <dif_gpio_irq_set_trigger+0x4e>
20000fe0:	4711                	li	a4,4
20000fe2:	02c74763          	blt	a4,a2,20001010 <dif_gpio_irq_set_trigger+0x5e>
20000fe6:	470d                	li	a4,3
20000fe8:	02e60e63          	beq	a2,a4,20001024 <dif_gpio_irq_set_trigger+0x72>
20000fec:	4711                	li	a4,4
20000fee:	06e61663          	bne	a2,a4,2000105a <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:312
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
                                       GPIO_INTR_CTRL_EN_LVLHIGH_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeRisingFalling:
      mmio_region_nonatomic_set_mask32(
20000ff2:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20000ff4:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20000ff6:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20000ff8:	d614                	sw	a3,40(a2)
20000ffa:	a81d                	j	20001030 <dif_gpio_irq_set_trigger+0x7e>
20000ffc:	4689                	li	a3,2
20000ffe:	a8b1                	j	2000105a <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:292
  switch (trigger) {
20001000:	ce15                	beqz	a2,2000103c <dif_gpio_irq_set_trigger+0x8a>
20001002:	4705                	li	a4,1
20001004:	02e60663          	beq	a2,a4,20001030 <dif_gpio_irq_set_trigger+0x7e>
20001008:	4709                	li	a4,2
2000100a:	04e60363          	beq	a2,a4,20001050 <dif_gpio_irq_set_trigger+0x9e>
2000100e:	a0b1                	j	2000105a <dif_gpio_irq_set_trigger+0xa8>
20001010:	4715                	li	a4,5
20001012:	02e60b63          	beq	a2,a4,20001048 <dif_gpio_irq_set_trigger+0x96>
20001016:	4719                	li	a4,6
20001018:	04e61163          	bne	a2,a4,2000105a <dif_gpio_irq_set_trigger+0xa8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:325
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_RISING_REG_OFFSET, mask, 0);
      mmio_region_nonatomic_set_mask32(
          gpio->params.base_addr, GPIO_INTR_CTRL_EN_LVLLOW_REG_OFFSET, mask, 0);
      break;
    case kDifGpioIrqTriggerEdgeFallingLevelHigh:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
2000101c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000101e:	5654                	lw	a3,44(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001020:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001022:	d654                	sw	a3,44(a2)
20001024:	4108                	lw	a0,0(a0)
20001026:	5910                	lw	a2,48(a0)
20001028:	4681                	li	a3,0
2000102a:	8dd1                	or	a1,a1,a2
2000102c:	d90c                	sw	a1,48(a0)
2000102e:	a035                	j	2000105a <dif_gpio_irq_set_trigger+0xa8>
20001030:	4108                	lw	a0,0(a0)
20001032:	5550                	lw	a2,44(a0)
20001034:	4681                	li	a3,0
20001036:	8dd1                	or	a1,a1,a2
20001038:	d54c                	sw	a1,44(a0)
2000103a:	a005                	j	2000105a <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:294
      mmio_region_nonatomic_set_mask32(
2000103c:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000103e:	5510                	lw	a2,40(a0)
20001040:	4681                	li	a3,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001042:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001044:	d50c                	sw	a1,40(a0)
20001046:	a811                	j	2000105a <dif_gpio_irq_set_trigger+0xa8>
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:319
      mmio_region_nonatomic_set_mask32(
20001048:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000104a:	5614                	lw	a3,40(a2)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000104c:	8ecd                	or	a3,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000104e:	d614                	sw	a3,40(a2)
20001050:	4108                	lw	a0,0(a0)
20001052:	5950                	lw	a2,52(a0)
20001054:	4681                	li	a3,0
20001056:	8dd1                	or	a1,a1,a2
20001058:	d94c                	sw	a1,52(a0)
dif_gpio_irq_set_trigger():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:337
    default:
      return kDifGpioError;
  }

  return kDifGpioOk;
}
2000105a:	8536                	mv	a0,a3
2000105c:	8082                	ret

2000105e <dif_gpio_read_all>:
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:340

dif_gpio_result_t dif_gpio_read_all(const dif_gpio_t *gpio,
                                    dif_gpio_state_t *state) {
2000105e:	862a                	mv	a2,a0
20001060:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:341
  if (gpio == NULL || state == NULL) {
20001062:	c611                	beqz	a2,2000106e <dif_gpio_read_all+0x10>
20001064:	c589                	beqz	a1,2000106e <dif_gpio_read_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
    return kDifGpioBadArg;
  }

  *state = mmio_region_read32(gpio->params.base_addr, GPIO_DATA_IN_REG_OFFSET);
20001066:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001068:	4550                	lw	a2,12(a0)
2000106a:	4501                	li	a0,0
dif_gpio_read_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:345
2000106c:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:348

  return kDifGpioOk;
}
2000106e:	8082                	ret

20001070 <dif_gpio_read>:
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:351

dif_gpio_result_t dif_gpio_read(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                bool *state) {
20001070:	86aa                	mv	a3,a0
20001072:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:352
  if (gpio == NULL || state == NULL) {
20001074:	ca91                	beqz	a3,20001088 <dif_gpio_read+0x18>
20001076:	ca09                	beqz	a2,20001088 <dif_gpio_read+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
    return kDifGpioBadArg;
  }

  *state = mmio_region_get_bit32(gpio->params.base_addr,
20001078:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000107a:	4554                	lw	a3,12(a0)
2000107c:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000107e:	00b6d5b3          	srl	a1,a3,a1
20001082:	8985                	andi	a1,a1,1
dif_gpio_read():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:356
20001084:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:360
                                 GPIO_DATA_IN_REG_OFFSET, pin);

  return kDifGpioOk;
}
20001088:	8082                	ret

2000108a <dif_gpio_write_all>:
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:364

dif_gpio_result_t dif_gpio_write_all(const dif_gpio_t *gpio,
                                     dif_gpio_state_t state) {
  if (gpio == NULL) {
2000108a:	c509                	beqz	a0,20001094 <dif_gpio_write_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:368
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OUT_REG_OFFSET,
2000108c:	4110                	lw	a2,0(a0)
2000108e:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001090:	ca0c                	sw	a1,16(a2)
dif_gpio_write_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:372
                      state);

  return kDifGpioOk;
}
20001092:	8082                	ret
20001094:	4509                	li	a0,2
20001096:	8082                	ret

20001098 <dif_gpio_write>:
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:86
  if (gpio == NULL) {
20001098:	c505                	beqz	a0,200010c0 <dif_gpio_write+0x28>
2000109a:	4741                	li	a4,16
2000109c:	46d1                	li	a3,20
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
2000109e:	00e5e363          	bltu	a1,a4,200010a4 <dif_gpio_write+0xc>
200010a2:	46e1                	li	a3,24
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
200010a4:	89bd                	andi	a1,a1,15
200010a6:	4705                	li	a4,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
200010a8:	00b71733          	sll	a4,a4,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
200010ac:	01071593          	slli	a1,a4,0x10
200010b0:	e211                	bnez	a2,200010b4 <dif_gpio_write+0x1c>
200010b2:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
200010b4:	4110                	lw	a2,0(a0)
200010b6:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
200010b8:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010ba:	9636                	add	a2,a2,a3
200010bc:	c20c                	sw	a1,0(a2)
dif_gpio_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:376

dif_gpio_result_t dif_gpio_write(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                                 bool state) {
  return gpio_masked_bit_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
200010be:	8082                	ret
200010c0:	4509                	li	a0,2
200010c2:	8082                	ret

200010c4 <dif_gpio_write_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
200010c4:	c50d                	beqz	a0,200010ee <dif_gpio_write_masked+0x2a>
200010c6:	66c1                	lui	a3,0x10
200010c8:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
200010cc:	00e5f7b3          	and	a5,a1,a4
200010d0:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
200010d2:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
200010d4:	c791                	beqz	a5,200010e0 <dif_gpio_write_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
200010d6:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
200010d8:	05c2                	slli	a1,a1,0x10
200010da:	8f71                	and	a4,a4,a2
200010dc:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010de:	cbcc                	sw	a1,20(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
200010e0:	ca89                	beqz	a3,200010f2 <dif_gpio_write_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
200010e2:	410c                	lw	a1,0(a0)
200010e4:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
200010e6:	8241                	srli	a2,a2,0x10
200010e8:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010ea:	cd90                	sw	a2,24(a1)
dif_gpio_write_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:383
}

dif_gpio_result_t dif_gpio_write_masked(const dif_gpio_t *gpio,
                                        dif_gpio_mask_t mask,
                                        dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
200010ec:	8082                	ret
200010ee:	4509                	li	a0,2
200010f0:	8082                	ret
200010f2:	4501                	li	a0,0
200010f4:	8082                	ret

200010f6 <dif_gpio_output_set_enabled_all>:
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:389
                           GPIO_MASKED_OUT_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_output_set_enabled_all(const dif_gpio_t *gpio,
                                                  dif_gpio_state_t state) {
  if (gpio == NULL) {
200010f6:	c509                	beqz	a0,20001100 <dif_gpio_output_set_enabled_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:393
    return kDifGpioBadArg;
  }

  mmio_region_write32(gpio->params.base_addr, GPIO_DIRECT_OE_REG_OFFSET, state);
200010f8:	4110                	lw	a2,0(a0)
200010fa:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200010fc:	ce4c                	sw	a1,28(a2)
dif_gpio_output_set_enabled_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:396

  return kDifGpioOk;
}
200010fe:	8082                	ret
20001100:	4509                	li	a0,2
20001102:	8082                	ret

20001104 <dif_gpio_output_set_enabled>:
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:401

dif_gpio_result_t dif_gpio_output_set_enabled(const dif_gpio_t *gpio,
                                              dif_gpio_pin_t pin,
                                              dif_gpio_toggle_t state) {
  if (gpio == NULL) {
20001104:	c51d                	beqz	a0,20001132 <dif_gpio_output_set_enabled+0x2e>
20001106:	4741                	li	a4,16
20001108:	02000693          	li	a3,32
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:92
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
2000110c:	00e5e463          	bltu	a1,a4,20001114 <dif_gpio_output_set_enabled+0x10>
20001110:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
20001114:	4701                	li	a4,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:95
  const uint32_t mask = index_to_mask(index % 16);
20001116:	89bd                	andi	a1,a1,15
20001118:	4785                	li	a5,1
index_to_mask():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:14
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
2000111a:	00b797b3          	sll	a5,a5,a1
gpio_masked_bit_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
2000111e:	01079593          	slli	a1,a5,0x10
20001122:	c211                	beqz	a2,20001126 <dif_gpio_output_set_enabled+0x22>
20001124:	873e                	mv	a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:96
  mmio_region_write32(gpio->params.base_addr, offset,
20001126:	4110                	lw	a2,0(a0)
20001128:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:97
                      (mask << 16) | (val ? mask : 0u));
2000112a:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000112c:	9636                	add	a2,a2,a3
2000112e:	c20c                	sw	a1,0(a2)
dif_gpio_output_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:409

  return gpio_masked_bit_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
                               GPIO_MASKED_OE_UPPER_REG_OFFSET, pin, state);

  return kDifGpioOk;
}
20001130:	8082                	ret
20001132:	4509                	li	a0,2
20001134:	8082                	ret

20001136 <dif_gpio_output_set_enabled_masked>:
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:44
  if (gpio == NULL) {
20001136:	c50d                	beqz	a0,20001160 <dif_gpio_output_set_enabled_masked+0x2a>
20001138:	66c1                	lui	a3,0x10
2000113a:	fff68713          	addi	a4,a3,-1 # ffff <_stack_size+0xdfff>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:48
  const uint32_t mask_lower_half = mask & 0x0000FFFFu;
2000113e:	00e5f7b3          	and	a5,a1,a4
20001142:	76c1                	lui	a3,0xffff0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:49
  const uint32_t mask_upper_half = mask & 0xFFFF0000u;
20001144:	8eed                	and	a3,a3,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:50
  if (mask_lower_half != 0) {
20001146:	c791                	beqz	a5,20001152 <dif_gpio_output_set_enabled_masked+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:51
    mmio_region_write32(gpio->params.base_addr, reg_lower_offset,
20001148:	411c                	lw	a5,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:52
                        (mask_lower_half << 16) | (val & 0x0000FFFFu));
2000114a:	05c2                	slli	a1,a1,0x10
2000114c:	8f71                	and	a4,a4,a2
2000114e:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001150:	d38c                	sw	a1,32(a5)
gpio_masked_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:54
  if (mask_upper_half != 0) {
20001152:	ca89                	beqz	a3,20001164 <dif_gpio_output_set_enabled_masked+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:55
    mmio_region_write32(gpio->params.base_addr, reg_upper_offset,
20001154:	410c                	lw	a1,0(a0)
20001156:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:56
                        mask_upper_half | ((val & 0xFFFF0000u) >> 16));
20001158:	8241                	srli	a2,a2,0x10
2000115a:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000115c:	d1d0                	sw	a2,36(a1)
dif_gpio_output_set_enabled_masked():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:414

dif_gpio_result_t dif_gpio_output_set_enabled_masked(const dif_gpio_t *gpio,
                                                     dif_gpio_mask_t mask,
                                                     dif_gpio_state_t state) {
  return gpio_masked_write(gpio, GPIO_MASKED_OE_LOWER_REG_OFFSET,
2000115e:	8082                	ret
20001160:	4509                	li	a0,2
20001162:	8082                	ret
20001164:	4501                	li	a0,0
20001166:	8082                	ret

20001168 <dif_gpio_input_noise_filter_set_enabled>:
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:419
                           GPIO_MASKED_OE_UPPER_REG_OFFSET, mask, state);
}

dif_gpio_result_t dif_gpio_input_noise_filter_set_enabled(
    const dif_gpio_t *gpio, dif_gpio_mask_t mask, dif_gpio_toggle_t state) {
20001168:	86aa                	mv	a3,a0
2000116a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:420
  if (gpio == NULL) {
2000116c:	c28d                	beqz	a3,2000118e <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:424
    return kDifGpioBadArg;
  }

  switch (state) {
2000116e:	ca09                	beqz	a2,20001180 <dif_gpio_input_noise_filter_set_enabled+0x18>
20001170:	4705                	li	a4,1
20001172:	00e61e63          	bne	a2,a4,2000118e <dif_gpio_input_noise_filter_set_enabled+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:426
    case kDifGpioToggleEnabled:
      mmio_region_nonatomic_set_mask32(gpio->params.base_addr,
20001176:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001178:	5e14                	lw	a3,56(a2)
2000117a:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
2000117c:	8dd5                	or	a1,a1,a3
2000117e:	a039                	j	2000118c <dif_gpio_input_noise_filter_set_enabled+0x24>
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:431
                                       GPIO_CTRL_EN_INPUT_FILTER_REG_OFFSET,
                                       mask, 0);
      break;
    case kDifGpioToggleDisabled:
      mmio_region_nonatomic_clear_mask32(gpio->params.base_addr,
20001180:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001182:	5e14                	lw	a3,56(a2)
20001184:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001186:	fff5c593          	not	a1,a1
2000118a:	8df5                	and	a1,a1,a3
2000118c:	de0c                	sw	a1,56(a2)
dif_gpio_input_noise_filter_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_gpio.c:440
    default:
      return kDifGpioBadArg;
  }

  return kDifGpioOk;
}
2000118e:	8082                	ret

20001190 <dif_spi_device_init>:
dif_spi_device_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:15

const uint16_t kDifSpiDeviceBufferLen = SPI_DEVICE_BUFFER_SIZE_BYTES;

dif_spi_device_result_t dif_spi_device_init(dif_spi_device_params_t params,
                                            dif_spi_device_t *spi) {
  if (spi == NULL) {
20001190:	c591                	beqz	a1,2000119c <dif_spi_device_init+0xc>
20001192:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:20
    return kDifSpiDeviceBadArg;
  }

  // This ensures all other fields are zeroed.
  *spi = (dif_spi_device_t){.params = params};
20001194:	c188                	sw	a0,0(a1)
20001196:	0005a223          	sw	zero,4(a1)
2000119a:	a011                	j	2000119e <dif_spi_device_init+0xe>
2000119c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:23

  return kDifSpiDeviceOk;
}
2000119e:	8532                	mv	a0,a2
200011a0:	8082                	ret

200011a2 <dif_spi_device_configure>:
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:48

  return val;
}

dif_spi_device_result_t dif_spi_device_configure(
    dif_spi_device_t *spi, dif_spi_device_config_t config) {
200011a2:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:49
  if (spi == NULL) {
200011a4:	c935                	beqz	a0,20001218 <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:59
  // function argument checks, to avoid a halfway-configured SPI.

  uint32_t device_config = build_control_word(config);

  uint16_t rx_fifo_start = 0x0;
  uint16_t rx_fifo_end = config.rx_fifo_len - 1;
200011a6:	0125d683          	lhu	a3,18(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:61
  uint16_t tx_fifo_start = rx_fifo_end + 1;
  uint16_t tx_fifo_end = tx_fifo_start + config.tx_fifo_len - 1;
200011aa:	0145d703          	lhu	a4,20(a1)
200011ae:	fff68893          	addi	a7,a3,-1 # fffeffff <_data_init_start+0xdffec08b>
200011b2:	00e88833          	add	a6,a7,a4
200011b6:	67bd                	lui	a5,0xf
200011b8:	00f877b3          	and	a5,a6,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:62
  if (tx_fifo_end >= kDifSpiDeviceBufferLen) {
200011bc:	83b1                	srli	a5,a5,0xc
200011be:	efa9                	bnez	a5,20001218 <dif_spi_device_configure+0x76>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
200011c0:	41d0                	lw	a2,4(a1)
200011c2:	419c                	lw	a5,0(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:36
                             config.data_phase == kDifSpiDeviceEdgePositive);
200011c4:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200011c8:	00161293          	slli	t0,a2,0x1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
200011cc:	4590                	lw	a2,8(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:34
                           config.clock_polarity == kDifSpiDeviceEdgeNegative);
200011ce:	17fd                	addi	a5,a5,-1
200011d0:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200011d4:	00f2e2b3          	or	t0,t0,a5
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
200011d8:	167d                	addi	a2,a2,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
200011da:	45dc                	lw	a5,12(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:38
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
200011dc:	00163613          	seqz	a2,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200011e0:	060a                	slli	a2,a2,0x2
200011e2:	00c2e633          	or	a2,t0,a2
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
200011e6:	17fd                	addi	a5,a5,-1
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:56
  uint32_t device_config = build_control_word(config);
200011e8:	0105c583          	lbu	a1,16(a1)
build_control_word():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:40
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
200011ec:	0017b793          	seqz	a5,a5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200011f0:	078e                	slli	a5,a5,0x3
200011f2:	8e5d                	or	a2,a2,a5
200011f4:	05a2                	slli	a1,a1,0x8
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:82
      tx_fifo_bounds, SPI_DEVICE_TXF_ADDR_LIMIT_FIELD, tx_fifo_end);

  spi->rx_fifo_len = config.rx_fifo_len;
  spi->tx_fifo_len = config.tx_fifo_len;

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_CFG_REG_OFFSET,
200011f6:	411c                	lw	a5,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200011f8:	8dd1                	or	a1,a1,a2
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:79
  spi->rx_fifo_len = config.rx_fifo_len;
200011fa:	00d51223          	sh	a3,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:80
  spi->tx_fifo_len = config.tx_fifo_len;
200011fe:	00e51323          	sh	a4,6(a0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001202:	cb8c                	sw	a1,16(a5)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:84
                      device_config);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_RXF_ADDR_REG_OFFSET,
20001204:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001206:	01089613          	slli	a2,a7,0x10
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000120a:	d590                	sw	a2,40(a1)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:86
                      rx_fifo_bounds);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_TXF_ADDR_REG_OFFSET,
2000120c:	4108                	lw	a0,0(a0)
2000120e:	4601                	li	a2,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001210:	01081593          	slli	a1,a6,0x10
20001214:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001216:	d54c                	sw	a1,44(a0)
dif_spi_device_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:90
                      tx_fifo_bounds);

  return kDifSpiDeviceOk;
}
20001218:	8532                	mv	a0,a2
2000121a:	8082                	ret

2000121c <dif_spi_device_abort>:
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:93

dif_spi_device_result_t dif_spi_device_abort(const dif_spi_device_t *spi) {
  if (spi == NULL) {
2000121c:	cd01                	beqz	a0,20001234 <dif_spi_device_abort+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:99
    return kDifSpiDeviceBadArg;
  }

  // Set the `abort` bit, and then spin until `abort_done` is asserted.
  uint32_t reg =
      mmio_region_read32(spi->params.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET);
2000121e:	410c                	lw	a1,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001220:	45d0                	lw	a2,12(a1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001222:	00166613          	ori	a2,a2,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001226:	c5d0                	sw	a2,12(a1)
20001228:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000122a:	4d4c                	lw	a1,28(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000122c:	89c1                	andi	a1,a1,16
2000122e:	ddf5                	beqz	a1,2000122a <dif_spi_device_abort+0xe>
20001230:	4501                	li	a0,0
dif_spi_device_abort():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:111
        mmio_region_read32(spi->params.base_addr, SPI_DEVICE_STATUS_REG_OFFSET);
    if (bitfield_bit32_read(reg, SPI_DEVICE_STATUS_ABORT_DONE_BIT)) {
      return kDifSpiDeviceOk;
    }
  }
}
20001232:	8082                	ret
20001234:	4509                	li	a0,2
20001236:	8082                	ret

20001238 <dif_spi_device_irq_is_pending>:
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:141
  }
  return true;
}

dif_spi_device_result_t dif_spi_device_irq_is_pending(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq, bool *is_pending) {
20001238:	86aa                	mv	a3,a0
2000123a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:142
  if (spi == NULL || is_pending == NULL) {
2000123c:	ce89                	beqz	a3,20001256 <dif_spi_device_irq_is_pending+0x1e>
2000123e:	ce01                	beqz	a2,20001256 <dif_spi_device_irq_is_pending+0x1e>
20001240:	4715                	li	a4,5
20001242:	00b76a63          	bltu	a4,a1,20001256 <dif_spi_device_irq_is_pending+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:151
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
20001246:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001248:	4114                	lw	a3,0(a0)
2000124a:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
2000124c:	00b6d5b3          	srl	a1,a3,a1
20001250:	8985                	andi	a1,a1,1
dif_spi_device_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:153
                                    SPI_DEVICE_INTR_STATE_REG_OFFSET);
  *is_pending = bitfield_bit32_read(reg, index);
20001252:	00b60023          	sb	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:156

  return kDifSpiDeviceOk;
}
20001256:	8082                	ret

20001258 <dif_spi_device_irq_acknowledge>:
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:159

dif_spi_device_result_t dif_spi_device_irq_acknowledge(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq) {
20001258:	862a                	mv	a2,a0
2000125a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:160
  if (spi == NULL) {
2000125c:	ca11                	beqz	a2,20001270 <dif_spi_device_irq_acknowledge+0x18>
2000125e:	4695                	li	a3,5
20001260:	00b6e863          	bltu	a3,a1,20001270 <dif_spi_device_irq_acknowledge+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:170
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_STATE_REG_OFFSET,
20001264:	4210                	lw	a2,0(a2)
20001266:	4501                	li	a0,0
20001268:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
2000126a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000126e:	c20c                	sw	a1,0(a2)
dif_spi_device_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:174
                      reg);

  return kDifSpiDeviceOk;
}
20001270:	8082                	ret

20001272 <dif_spi_device_irq_get_enabled>:
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:178

dif_spi_device_result_t dif_spi_device_irq_get_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t *state) {
20001272:	86aa                	mv	a3,a0
20001274:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:179
  if (spi == NULL || state == NULL) {
20001276:	ce91                	beqz	a3,20001292 <dif_spi_device_irq_get_enabled+0x20>
20001278:	ce09                	beqz	a2,20001292 <dif_spi_device_irq_get_enabled+0x20>
2000127a:	4715                	li	a4,5
2000127c:	00b76b63          	bltu	a4,a1,20001292 <dif_spi_device_irq_get_enabled+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:188
  bitfield_bit32_index_t index;
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
20001280:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001282:	4154                	lw	a3,4(a0)
20001284:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001286:	00b6d5b3          	srl	a1,a3,a1
2000128a:	8985                	andi	a1,a1,1
2000128c:	0015b593          	seqz	a1,a1
dif_spi_device_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:190
                                    SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  *state = bitfield_bit32_read(reg, index) ? kDifSpiDeviceToggleEnabled
20001290:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:194
                                           : kDifSpiDeviceToggleDisabled;

  return kDifSpiDeviceOk;
}
20001292:	8082                	ret

20001294 <dif_spi_device_irq_set_enabled>:
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:198

dif_spi_device_result_t dif_spi_device_irq_set_enabled(
    const dif_spi_device_t *spi, dif_spi_device_irq_t irq,
    dif_spi_device_toggle_t state) {
20001294:	86aa                	mv	a3,a0
20001296:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:199
  if (spi == NULL) {
20001298:	c69d                	beqz	a3,200012c6 <dif_spi_device_irq_set_enabled+0x32>
2000129a:	4715                	li	a4,5
2000129c:	02b76563          	bltu	a4,a1,200012c6 <dif_spi_device_irq_set_enabled+0x32>
200012a0:	4705                	li	a4,1
200012a2:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:209
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  bool flag;
  switch (state) {
200012a4:	c609                	beqz	a2,200012ae <dif_spi_device_irq_set_enabled+0x1a>
200012a6:	4785                	li	a5,1
200012a8:	00f61f63          	bne	a2,a5,200012c6 <dif_spi_device_irq_set_enabled+0x32>
200012ac:	4781                	li	a5,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:220
      break;
    default:
      return kDifSpiDeviceBadArg;
  }

  uint32_t reg = mmio_region_read32(spi->params.base_addr,
200012ae:	4290                	lw	a2,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200012b0:	4254                	lw	a3,4(a2)
200012b2:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200012b4:	00b71733          	sll	a4,a4,a1
200012b8:	fff74713          	not	a4,a4
200012bc:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
200012be:	00b795b3          	sll	a1,a5,a1
200012c2:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200012c4:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:227
  reg = bitfield_bit32_write(reg, index, flag);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      reg);

  return kDifSpiDeviceOk;
}
200012c6:	8082                	ret

200012c8 <dif_spi_device_irq_force>:
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:230

dif_spi_device_result_t dif_spi_device_irq_force(const dif_spi_device_t *spi,
                                                 dif_spi_device_irq_t irq) {
200012c8:	862a                	mv	a2,a0
200012ca:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:231
  if (spi == NULL) {
200012cc:	ca11                	beqz	a2,200012e0 <dif_spi_device_irq_force+0x18>
200012ce:	4695                	li	a3,5
200012d0:	00b6e863          	bltu	a3,a1,200012e0 <dif_spi_device_irq_force+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:241
  if (!irq_index(irq, &index)) {
    return kDifSpiDeviceBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_TEST_REG_OFFSET,
200012d4:	4210                	lw	a2,0(a2)
200012d6:	4501                	li	a0,0
200012d8:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
200012da:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
200012de:	c60c                	sw	a1,8(a2)
dif_spi_device_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:245
                      reg);

  return kDifSpiDeviceOk;
}
200012e0:	8082                	ret

200012e2 <dif_spi_device_irq_disable_all>:
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:249

dif_spi_device_result_t dif_spi_device_irq_disable_all(
    const dif_spi_device_t *spi, dif_spi_device_irq_snapshot_t *snapshot) {
  if (spi == NULL) {
200012e2:	c911                	beqz	a0,200012f6 <dif_spi_device_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:253
    return kDifSpiDeviceBadArg;
  }

  if (snapshot != NULL) {
200012e4:	c581                	beqz	a1,200012ec <dif_spi_device_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
    *snapshot = mmio_region_read32(spi->params.base_addr,
200012e6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
200012e8:	4250                	lw	a2,4(a2)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:254
200012ea:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:258
                                   SPI_DEVICE_INTR_ENABLE_REG_OFFSET);
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
200012ec:	410c                	lw	a1,0(a0)
200012ee:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
200012f0:	0005a223          	sw	zero,4(a1)
dif_spi_device_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:262
                      0);

  return kDifSpiDeviceOk;
}
200012f4:	8082                	ret
200012f6:	4509                	li	a0,2
200012f8:	8082                	ret

200012fa <dif_spi_device_irq_restore_all>:
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:266

dif_spi_device_result_t dif_spi_device_irq_restore_all(
    const dif_spi_device_t *spi,
    const dif_spi_device_irq_snapshot_t *snapshot) {
200012fa:	862a                	mv	a2,a0
200012fc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:267
  if (spi == NULL || snapshot == NULL) {
200012fe:	c611                	beqz	a2,2000130a <dif_spi_device_irq_restore_all+0x10>
20001300:	c589                	beqz	a1,2000130a <dif_spi_device_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:272
    return kDifSpiDeviceBadArg;
  }

  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001302:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:271
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_INTR_ENABLE_REG_OFFSET,
20001304:	4210                	lw	a2,0(a2)
20001306:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001308:	c24c                	sw	a1,4(a2)
dif_spi_device_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:275

  return kDifSpiDeviceOk;
}
2000130a:	8082                	ret

2000130c <dif_spi_device_set_irq_levels>:
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:279

dif_spi_device_result_t dif_spi_device_set_irq_levels(
    const dif_spi_device_t *spi, uint16_t rx_level, uint16_t tx_level) {
  if (spi == NULL) {
2000130c:	c519                	beqz	a0,2000131a <dif_spi_device_set_irq_levels+0xe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:288
  uint32_t compressed_limit = 0;
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_RXLVL_FIELD, rx_level);
  compressed_limit = bitfield_field32_write(
      compressed_limit, SPI_DEVICE_FIFO_LEVEL_TXLVL_FIELD, tx_level);
  mmio_region_write32(spi->params.base_addr, SPI_DEVICE_FIFO_LEVEL_REG_OFFSET,
2000130e:	4114                	lw	a3,0(a0)
20001310:	4501                	li	a0,0
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001312:	0642                	slli	a2,a2,0x10
20001314:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001316:	cacc                	sw	a1,20(a3)
dif_spi_device_set_irq_levels():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:292
                      compressed_limit);

  return kDifSpiDeviceOk;
}
20001318:	8082                	ret
2000131a:	4509                	li	a0,2
2000131c:	8082                	ret

2000131e <dif_spi_device_rx_pending>:
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:473
  // In particular, when r == w, the fifo is full.
  return fifo_len - (ptrs.read_ptr.offset - ptrs.write_ptr.offset);
}

dif_spi_device_result_t dif_spi_device_rx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
2000131e:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:474
  if (spi == NULL || bytes_pending == NULL) {
20001320:	c90d                	beqz	a0,20001352 <dif_spi_device_rx_pending+0x34>
20001322:	c985                	beqz	a1,20001352 <dif_spi_device_rx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
20001324:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001326:	5214                	lw	a3,32(a2)
20001328:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
2000132a:	0106d713          	srli	a4,a3,0x10
2000132e:	6785                	lui	a5,0x1
20001330:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
20001332:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
20001336:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001338:	8eb9                	xor	a3,a3,a4
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kRxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
2000133a:	00451503          	lh	a0,4(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
2000133e:	06ce                	slli	a3,a3,0x13
20001340:	86fd                	srai	a3,a3,0x1f
20001342:	40f80733          	sub	a4,a6,a5
20001346:	8d75                	and	a0,a0,a3
20001348:	953a                	add	a0,a0,a4
2000134a:	66c1                	lui	a3,0x10
2000134c:	16fd                	addi	a3,a3,-1
dif_spi_device_rx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:479
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->rx_fifo_len);
2000134e:	8d75                	and	a0,a0,a3
20001350:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:482

  return kDifSpiDeviceOk;
}
20001352:	8532                	mv	a0,a2
20001354:	8082                	ret

20001356 <dif_spi_device_tx_pending>:
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:485

dif_spi_device_result_t dif_spi_device_tx_pending(const dif_spi_device_t *spi,
                                                  size_t *bytes_pending) {
20001356:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:486
  if (spi == NULL || bytes_pending == NULL) {
20001358:	c90d                	beqz	a0,2000138a <dif_spi_device_tx_pending+0x34>
2000135a:	c985                	beqz	a1,2000138a <dif_spi_device_tx_pending+0x34>
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
2000135c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
2000135e:	5254                	lw	a3,36(a2)
20001360:	4601                	li	a2,0
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
20001362:	0106d713          	srli	a4,a3,0x10
20001366:	6785                	lui	a5,0x1
20001368:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
2000136a:	00f77833          	and	a6,a4,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
2000136e:	8ff5                	and	a5,a5,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001370:	8eb9                	xor	a3,a3,a4
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
    return kDifSpiDeviceBadArg;
  }

  fifo_ptrs_t ptrs = decompress_ptrs(spi, kTxFifoParams);
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
20001372:	00651503          	lh	a0,6(a0)
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001376:	06ce                	slli	a3,a3,0x13
20001378:	86fd                	srai	a3,a3,0x1f
2000137a:	40f80733          	sub	a4,a6,a5
2000137e:	8d75                	and	a0,a0,a3
20001380:	953a                	add	a0,a0,a4
20001382:	66c1                	lui	a3,0x10
20001384:	16fd                	addi	a3,a3,-1
dif_spi_device_tx_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:491
  *bytes_pending = fifo_bytes_in_use(ptrs, spi->tx_fifo_len);
20001386:	8d75                	and	a0,a0,a3
20001388:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:494

  return kDifSpiDeviceOk;
}
2000138a:	8532                	mv	a0,a2
2000138c:	8082                	ret

2000138e <dif_spi_device_recv>:
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:569
  return total_bytes;
}

dif_spi_device_result_t dif_spi_device_recv(const dif_spi_device_t *spi,
                                            void *buf, size_t buf_len,
                                            size_t *bytes_received) {
2000138e:	1101                	addi	sp,sp,-32
20001390:	ce06                	sw	ra,28(sp)
20001392:	cc22                	sw	s0,24(sp)
20001394:	ca26                	sw	s1,20(sp)
20001396:	c84a                	sw	s2,16(sp)
20001398:	842a                	mv	s0,a0
2000139a:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:570
  if (spi == NULL || buf == NULL) {
2000139c:	c43d                	beqz	s0,2000140a <dif_spi_device_recv+0x7c>
2000139e:	872e                	mv	a4,a1
200013a0:	c5ad                	beqz	a1,2000140a <dif_spi_device_recv+0x7c>
200013a2:	8936                	mv	s2,a3
200013a4:	88b2                	mv	a7,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
200013a6:	4008                	lw	a0,0(s0)
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:575
    return kDifSpiDeviceBadArg;
  }

  uint16_t fifo_base = 0;
  uint16_t fifo_len = spi->rx_fifo_len;
200013a8:	00445683          	lhu	a3,4(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
200013ac:	5108                	lw	a0,32(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
200013ae:	01055593          	srli	a1,a0,0x10
200013b2:	6605                	lui	a2,0x1
200013b4:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
200013b6:	8df1                	and	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
200013b8:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
200013ba:	00c55793          	srli	a5,a0,0xc
200013be:	64c1                	lui	s1,0x10
200013c0:	8fe5                	and	a5,a5,s1
200013c2:	8ddd                	or	a1,a1,a5
200013c4:	0512                	slli	a0,a0,0x4
200013c6:	8d65                	and	a0,a0,s1
200013c8:	8d51                	or	a0,a0,a2
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:576
  fifo_ptrs_t fifo = decompress_ptrs(spi, kRxFifoParams);
200013ca:	c42e                	sw	a1,8(sp)
200013cc:	c62a                	sw	a0,12(sp)
200013ce:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:578

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
200013d0:	4805                	li	a6,1
200013d2:	8522                	mv	a0,s0
200013d4:	4601                	li	a2,0
200013d6:	87c6                	mv	a5,a7
200013d8:	283d                	jal	20001416 <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:580
                            buf_len, /*is_recv=*/true);
  if (bytes_received != NULL) {
200013da:	00090463          	beqz	s2,200013e2 <dif_spi_device_recv+0x54>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:581
    *bytes_received = bytes;
200013de:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:583
  }
  if (bytes > 0) {
200013e2:	c11d                	beqz	a0,20001408 <dif_spi_device_recv+0x7a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:585
    // Commit the new RX FIFO pointers.
    compress_ptrs(spi, kRxFifoParams, fifo);
200013e4:	4522                	lw	a0,8(sp)
200013e6:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
200013e8:	00455613          	srli	a2,a0,0x4
200013ec:	6685                	lui	a3,0x1
200013ee:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
200013f0:	0045d713          	srli	a4,a1,0x4
200013f4:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
200013f6:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
200013f8:	0542                	slli	a0,a0,0x10
200013fa:	6641                	lui	a2,0x10
200013fc:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
200013fe:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
20001400:	8df1                	and	a1,a1,a2
20001402:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001404:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001406:	d308                	sw	a0,32(a4)
20001408:	4501                	li	a0,0
dif_spi_device_recv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:588
  }
  return kDifSpiDeviceOk;
}
2000140a:	4942                	lw	s2,16(sp)
2000140c:	44d2                	lw	s1,20(sp)
2000140e:	4462                	lw	s0,24(sp)
20001410:	40f2                	lw	ra,28(sp)
20001412:	6105                	addi	sp,sp,32
20001414:	8082                	ret

20001416 <spi_memcpy>:
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:514
                         uint8_t *byte_buf, size_t buf_len, bool is_recv) {
20001416:	7139                	addi	sp,sp,-64
20001418:	de06                	sw	ra,60(sp)
2000141a:	dc22                	sw	s0,56(sp)
2000141c:	da26                	sw	s1,52(sp)
2000141e:	d84a                	sw	s2,48(sp)
20001420:	d64e                	sw	s3,44(sp)
20001422:	d452                	sw	s4,40(sp)
20001424:	d256                	sw	s5,36(sp)
20001426:	d05a                	sw	s6,32(sp)
20001428:	ce5e                	sw	s7,28(sp)
2000142a:	cc62                	sw	s8,24(sp)
2000142c:	ca66                	sw	s9,20(sp)
2000142e:	c86a                	sw	s10,16(sp)
20001430:	c66e                	sw	s11,12(sp)
20001432:	89c2                	mv	s3,a6
20001434:	893e                	mv	s2,a5
20001436:	8d3a                	mv	s10,a4
20001438:	8a36                	mv	s4,a3
2000143a:	8b2e                	mv	s6,a1
2000143c:	8aaa                	mv	s5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:515
  uint16_t bytes_left = fifo_bytes_in_use(*fifo, fifo_len);
2000143e:	0025d503          	lhu	a0,2(a1)
20001442:	0005d583          	lhu	a1,0(a1)
20001446:	006b5683          	lhu	a3,6(s6)
2000144a:	004b5703          	lhu	a4,4(s6)
2000144e:	0542                	slli	a0,a0,0x10
20001450:	8dc9                	or	a1,a1,a0
20001452:	06c2                	slli	a3,a3,0x10
20001454:	8f55                	or	a4,a4,a3
fifo_bytes_in_use():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:458
  if (ptrs.write_ptr.phase == ptrs.read_ptr.phase) {
20001456:	8d35                	xor	a0,a0,a3
20001458:	053e                	slli	a0,a0,0xf
2000145a:	857d                	srai	a0,a0,0x1f
2000145c:	8d99                	sub	a1,a1,a4
2000145e:	01457533          	and	a0,a0,s4
20001462:	952e                	add	a0,a0,a1
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:517
  if (!is_recv) {
20001464:	00081463          	bnez	a6,2000146c <spi_memcpy+0x56>
20001468:	40aa0533          	sub	a0,s4,a0
2000146c:	65c1                	lui	a1,0x10
2000146e:	15fd                	addi	a1,a1,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:521
  if (bytes_left > buf_len) {
20001470:	00b576b3          	and	a3,a0,a1
20001474:	00d96363          	bltu	s2,a3,2000147a <spi_memcpy+0x64>
20001478:	892a                	mv	s2,a0
2000147a:	00b97533          	and	a0,s2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
2000147e:	cd25                	beqz	a0,200014f6 <spi_memcpy+0xe0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:533
  if (is_recv) {
20001480:	00098363          	beqz	s3,20001486 <spi_memcpy+0x70>
20001484:	0b11                	addi	s6,s6,4
20001486:	6585                	lui	a1,0x1
20001488:	00b60bb3          	add	s7,a2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
2000148c:	000b5503          	lhu	a0,0(s6)
20001490:	6641                	lui	a2,0x10
20001492:	fff60c13          	addi	s8,a2,-1 # ffff <_stack_size+0xdfff>
20001496:	fff58c93          	addi	s9,a1,-1 # fff <__DYNAMIC+0xfff>
2000149a:	844a                	mv	s0,s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
2000149c:	01847633          	and	a2,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:544
        SPI_DEVICE_BUFFER_REG_OFFSET + fifo_base + ptr->offset;
200014a0:	018575b3          	and	a1,a0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:545
    const uint32_t bytes_until_wrap = fifo_len - ptr->offset;
200014a4:	40ba04b3          	sub	s1,s4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:547
    if (bytes_to_copy > bytes_until_wrap) {
200014a8:	00c4e363          	bltu	s1,a2,200014ae <spi_memcpy+0x98>
200014ac:	84a2                	mv	s1,s0
200014ae:	000aa503          	lw	a0,0(s5)
200014b2:	95de                	add	a1,a1,s7
200014b4:	0184fdb3          	and	s11,s1,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
200014b8:	866a                	mv	a2,s10
200014ba:	86ee                	mv	a3,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:550
    if (is_recv) {
200014bc:	00098563          	beqz	s3,200014c6 <spi_memcpy+0xb0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:552
      mmio_region_memcpy_from_mmio32(spi->params.base_addr, mmio_offset,
200014c0:	5e0010ef          	jal	ra,20002aa0 <mmio_region_memcpy_from_mmio32>
200014c4:	a019                	j	200014ca <spi_memcpy+0xb4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:556
      mmio_region_memcpy_to_mmio32(spi->params.base_addr, mmio_offset, byte_buf,
200014c6:	6ac010ef          	jal	ra,20002b72 <mmio_region_memcpy_to_mmio32>
fifo_ptr_increment():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:355
  uint32_t inc_with_overflow = ptr->offset + increment;
200014ca:	000b5503          	lhu	a0,0(s6)
200014ce:	956e                	add	a0,a0,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:357
  if (inc_with_overflow >= fifo_len) {
200014d0:	01456a63          	bltu	a0,s4,200014e4 <spi_memcpy+0xce>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
200014d4:	002b0583          	lb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:358
    inc_with_overflow -= fifo_len;
200014d8:	41450533          	sub	a0,a0,s4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:359
    ptr->phase = !ptr->phase;
200014dc:	0015c593          	xori	a1,a1,1
200014e0:	00bb0123          	sb	a1,2(s6)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:362
  ptr->offset = inc_with_overflow & kFifoOffsetMask;
200014e4:	01957533          	and	a0,a0,s9
200014e8:	00ab1023          	sh	a0,0(s6)
spi_memcpy():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:561
    bytes_left -= bytes_to_copy;
200014ec:	8c05                	sub	s0,s0,s1
200014ee:	018475b3          	and	a1,s0,s8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:560
    byte_buf += bytes_to_copy;
200014f2:	9d6e                	add	s10,s10,s11
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:542
  while (bytes_left > 0) {
200014f4:	f5c5                	bnez	a1,2000149c <spi_memcpy+0x86>
200014f6:	6541                	lui	a0,0x10
200014f8:	157d                	addi	a0,a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:524
  if (bytes_left == 0) {
200014fa:	00a97533          	and	a0,s2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:565
}
200014fe:	4db2                	lw	s11,12(sp)
20001500:	4d42                	lw	s10,16(sp)
20001502:	4cd2                	lw	s9,20(sp)
20001504:	4c62                	lw	s8,24(sp)
20001506:	4bf2                	lw	s7,28(sp)
20001508:	5b02                	lw	s6,32(sp)
2000150a:	5a92                	lw	s5,36(sp)
2000150c:	5a22                	lw	s4,40(sp)
2000150e:	59b2                	lw	s3,44(sp)
20001510:	5942                	lw	s2,48(sp)
20001512:	54d2                	lw	s1,52(sp)
20001514:	5462                	lw	s0,56(sp)
20001516:	50f2                	lw	ra,60(sp)
20001518:	6121                	addi	sp,sp,64
2000151a:	8082                	ret

2000151c <dif_spi_device_send>:
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:592

dif_spi_device_result_t dif_spi_device_send(const dif_spi_device_t *spi,
                                            const void *buf, size_t buf_len,
                                            size_t *bytes_sent) {
2000151c:	1101                	addi	sp,sp,-32
2000151e:	ce06                	sw	ra,28(sp)
20001520:	cc22                	sw	s0,24(sp)
20001522:	ca26                	sw	s1,20(sp)
20001524:	c84a                	sw	s2,16(sp)
20001526:	842a                	mv	s0,a0
20001528:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:593
  if (spi == NULL || buf == NULL) {
2000152a:	c835                	beqz	s0,2000159e <dif_spi_device_send+0x82>
2000152c:	872e                	mv	a4,a1
2000152e:	c9a5                	beqz	a1,2000159e <dif_spi_device_send+0x82>
20001530:	8936                	mv	s2,a3
20001532:	8832                	mv	a6,a2
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:388
  uint32_t ptr = mmio_region_read32(spi->params.base_addr, params.reg_offset);
20001534:	4008                	lw	a0,0(s0)
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:598
    return kDifSpiDeviceBadArg;
  }

  // Start of the TX FIFO is the end of the RX FIFO.
  uint16_t fifo_base = spi->rx_fifo_len;
20001536:	00445603          	lhu	a2,4(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:599
  uint16_t fifo_len = spi->tx_fifo_len;
2000153a:	00645683          	lhu	a3,6(s0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
2000153e:	5148                	lw	a0,36(a0)
decompress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:390
      (uint16_t)((ptr >> params.write_offset) & params.write_mask);
20001540:	01055593          	srli	a1,a0,0x10
20001544:	6785                	lui	a5,0x1
20001546:	17fd                	addi	a5,a5,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:396
              .offset = write_val & kFifoOffsetMask,
20001548:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:401
              .offset = read_val & kFifoOffsetMask,
2000154a:	8fe9                	and	a5,a5,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:405
}
2000154c:	00c55493          	srli	s1,a0,0xc
20001550:	68c1                	lui	a7,0x10
20001552:	0114f4b3          	and	s1,s1,a7
20001556:	8dc5                	or	a1,a1,s1
20001558:	0512                	slli	a0,a0,0x4
2000155a:	01157533          	and	a0,a0,a7
2000155e:	8d5d                	or	a0,a0,a5
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:600
  fifo_ptrs_t fifo = decompress_ptrs(spi, kTxFifoParams);
20001560:	c42e                	sw	a1,8(sp)
20001562:	c62a                	sw	a0,12(sp)
20001564:	002c                	addi	a1,sp,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:602

  size_t bytes = spi_memcpy(spi, &fifo, fifo_base, fifo_len, (uint8_t *)buf,
20001566:	8522                	mv	a0,s0
20001568:	87c2                	mv	a5,a6
2000156a:	4801                	li	a6,0
2000156c:	356d                	jal	20001416 <spi_memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:604
                            buf_len, /*is_recv=*/false);
  if (bytes_sent != NULL) {
2000156e:	00090463          	beqz	s2,20001576 <dif_spi_device_send+0x5a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:605
    *bytes_sent = bytes;
20001572:	00a92023          	sw	a0,0(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:607
  }
  if (bytes > 0) {
20001576:	c11d                	beqz	a0,2000159c <dif_spi_device_send+0x80>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:609
    // Commit the new TX FIFO pointers.
    compress_ptrs(spi, kTxFifoParams, fifo);
20001578:	4522                	lw	a0,8(sp)
2000157a:	45b2                	lw	a1,12(sp)
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:418
  if (ptrs.write_ptr.phase) {
2000157c:	00455613          	srli	a2,a0,0x4
20001580:	6685                	lui	a3,0x1
20001582:	8e75                	and	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:422
  if (ptrs.read_ptr.phase) {
20001584:	0045d713          	srli	a4,a1,0x4
20001588:	8ef9                	and	a3,a3,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:432
      write_val);
2000158a:	8d51                	or	a0,a0,a2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
2000158c:	0542                	slli	a0,a0,0x10
2000158e:	6641                	lui	a2,0x10
20001590:	167d                	addi	a2,a2,-1
compress_ptrs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:439
  mmio_region_write32(spi->params.base_addr, params.reg_offset, ptr);
20001592:	4018                	lw	a4,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:438
      read_val);
20001594:	8df1                	and	a1,a1,a2
20001596:	8dd5                	or	a1,a1,a3
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001598:	8d4d                	or	a0,a0,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
2000159a:	d348                	sw	a0,36(a4)
2000159c:	4501                	li	a0,0
dif_spi_device_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_spi_device.c:612
  }
  return kDifSpiDeviceOk;
}
2000159e:	4942                	lw	s2,16(sp)
200015a0:	44d2                	lw	s1,20(sp)
200015a2:	4462                	lw	s0,24(sp)
200015a4:	40f2                	lw	ra,28(sp)
200015a6:	6105                	addi	sp,sp,32
200015a8:	8082                	ret
	...

200015ac <base_log_internal_core>:
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
200015ac:	7139                	addi	sp,sp,-64
200015ae:	ce06                	sw	ra,28(sp)
200015b0:	cc22                	sw	s0,24(sp)
200015b2:	ca26                	sw	s1,20(sp)
200015b4:	c84a                	sw	s2,16(sp)
200015b6:	892a                	mv	s2,a0
200015b8:	de46                	sw	a7,60(sp)
200015ba:	dc42                	sw	a6,56(sp)
200015bc:	da3e                	sw	a5,52(sp)
200015be:	d83a                	sw	a4,48(sp)
200015c0:	d636                	sw	a3,44(sp)
200015c2:	d432                	sw	a2,40(sp)
200015c4:	d22e                	sw	a1,36(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
200015c6:	4144                	lw	s1,4(a0)
200015c8:	80000537          	lui	a0,0x80000
200015cc:	fff50613          	addi	a2,a0,-1 # 7fffffff <_data_init_start+0x5fffc08b>
200015d0:	8526                	mv	a0,s1
200015d2:	4581                	li	a1,0
200015d4:	865ff0ef          	jal	ra,20000e38 <memchr>
200015d8:	40950633          	sub	a2,a0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
200015dc:	02f00593          	li	a1,47
200015e0:	8526                	mv	a0,s1
200015e2:	86fff0ef          	jal	ra,20000e50 <memrchr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
200015e6:	00092583          	lw	a1,0(s2)
200015ea:	460d                	li	a2,3
stringify_severity():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:27
  switch (severity) {
200015ec:	00b66b63          	bltu	a2,a1,20001602 <base_log_internal_core+0x56>
200015f0:	058a                	slli	a1,a1,0x2
200015f2:	00002617          	auipc	a2,0x2
200015f6:	c3a60613          	addi	a2,a2,-966 # 2000322c <kDifSpiDeviceBufferLen+0x4>
200015fa:	95b2                	add	a1,a1,a2
200015fc:	418c                	lw	a1,0(a1)
base_log_internal_core():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
200015fe:	e519                	bnez	a0,2000160c <base_log_internal_core+0x60>
20001600:	a801                	j	20001610 <base_log_internal_core+0x64>
20001602:	00002597          	auipc	a1,0x2
20001606:	7cf58593          	addi	a1,a1,1999 # 20003dd1 <__clz_tab+0xa6d>
2000160a:	c119                	beqz	a0,20001610 <base_log_internal_core+0x64>
2000160c:	00150493          	addi	s1,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
20001610:	effff417          	auipc	s0,0xeffff
20001614:	a5840413          	addi	s0,s0,-1448 # 10000068 <base_log_internal_core.global_log_counter>
20001618:	00045603          	lhu	a2,0(s0)
2000161c:	00892703          	lw	a4,8(s2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:62
  base_printf("%s%5d %s:%d] ", stringify_severity(log.severity),
20001620:	00002517          	auipc	a0,0x2
20001624:	79850513          	addi	a0,a0,1944 # 20003db8 <__clz_tab+0xa54>
20001628:	86a6                	mv	a3,s1
2000162a:	28d1                	jal	200016fe <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:64
  ++global_log_counter;
2000162c:	00041503          	lh	a0,0(s0)
20001630:	0505                	addi	a0,a0,1
20001632:	00a41023          	sh	a0,0(s0)
20001636:	104c                	addi	a1,sp,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
20001638:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
2000163a:	01092503          	lw	a0,16(s2)
2000163e:	28c5                	jal	2000172e <base_vprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
20001640:	00002517          	auipc	a0,0x2
20001644:	78650513          	addi	a0,a0,1926 # 20003dc6 <__clz_tab+0xa62>
20001648:	285d                	jal	200016fe <base_printf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:72
}
2000164a:	4942                	lw	s2,16(sp)
2000164c:	44d2                	lw	s1,20(sp)
2000164e:	4462                	lw	s0,24(sp)
20001650:	40f2                	lw	ra,28(sp)
20001652:	6121                	addi	sp,sp,64
20001654:	8082                	ret

20001656 <base_log_internal_dv>:
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20001656:	1101                	addi	sp,sp,-32
20001658:	ce46                	sw	a7,28(sp)
2000165a:	cc42                	sw	a6,24(sp)
2000165c:	ca3e                	sw	a5,20(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
2000165e:	00002797          	auipc	a5,0x2
20001662:	cda78793          	addi	a5,a5,-806 # 20003338 <kDeviceLogBypassUartAddress>
20001666:	439c                	lw	a5,0(a5)
20001668:	c83a                	sw	a4,16(sp)
2000166a:	c636                	sw	a3,12(sp)
2000166c:	c432                	sw	a2,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
2000166e:	c388                	sw	a0,0(a5)
20001670:	0028                	addi	a0,sp,8
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
20001672:	c22a                	sw	a0,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001674:	c989                	beqz	a1,20001686 <base_log_internal_dv+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
20001676:	4512                	lw	a0,4(sp)
20001678:	00450613          	addi	a2,a0,4
2000167c:	c232                	sw	a2,4(sp)
2000167e:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
20001680:	15fd                	addi	a1,a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001682:	c388                	sw	a0,0(a5)
base_log_internal_dv():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:90
20001684:	f9ed                	bnez	a1,20001676 <base_log_internal_dv+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
20001686:	6105                	addi	sp,sp,32
20001688:	8082                	ret
	...

2000168c <base_set_stdout>:
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:56
static buffer_sink_t base_stdout = {
    .data = NULL, .sink = &base_dev_null,
};

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
2000168c:	e589                	bnez	a1,20001696 <base_set_stdout+0xa>
2000168e:	00000597          	auipc	a1,0x0
20001692:	01658593          	addi	a1,a1,22 # 200016a4 <base_dev_null>
20001696:	effff617          	auipc	a2,0xeffff
2000169a:	96a60613          	addi	a2,a2,-1686 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
    out.sink = &base_dev_null;
  }
  base_stdout = out;
2000169e:	c208                	sw	a0,0(a2)
200016a0:	c24c                	sw	a1,4(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:60
}
200016a2:	8082                	ret

200016a4 <base_dev_null>:
base_dev_null():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:48
static size_t base_dev_null(void *data, const char *buf, size_t len) {
200016a4:	8532                	mv	a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:49
  return len;
200016a6:	8082                	ret

200016a8 <base_uart_stdout>:
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:72
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
200016a8:	effff597          	auipc	a1,0xeffff
200016ac:	95858593          	addi	a1,a1,-1704 # 10000000 <_data_start>
base_set_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:59
  base_stdout = out;
200016b0:	c188                	sw	a0,0(a1)
200016b2:	00000517          	auipc	a0,0x0
200016b6:	00c50513          	addi	a0,a0,12 # 200016be <base_dev_uart>
200016ba:	c1c8                	sw	a0,4(a1)
base_uart_stdout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:75
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
200016bc:	8082                	ret

200016be <base_dev_uart>:
base_dev_uart():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:62
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
200016be:	1101                	addi	sp,sp,-32
200016c0:	ce06                	sw	ra,28(sp)
200016c2:	cc22                	sw	s0,24(sp)
200016c4:	ca26                	sw	s1,20(sp)
200016c6:	c84a                	sw	s2,16(sp)
200016c8:	c64e                	sw	s3,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200016ca:	c20d                	beqz	a2,200016ec <base_dev_uart+0x2e>
200016cc:	8432                	mv	s0,a2
200016ce:	892e                	mv	s2,a1
200016d0:	89aa                	mv	s3,a0
200016d2:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:65
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifUartOk) {
200016d4:	00990533          	add	a0,s2,s1
200016d8:	00054583          	lbu	a1,0(a0)
200016dc:	854e                	mv	a0,s3
200016de:	2f19                	jal	20001df4 <dif_uart_byte_send_polled>
200016e0:	e519                	bnez	a0,200016ee <base_dev_uart+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:64
  for (size_t i = 0; i < len; ++i) {
200016e2:	0485                	addi	s1,s1,1
200016e4:	fe9418e3          	bne	s0,s1,200016d4 <base_dev_uart+0x16>
200016e8:	84a2                	mv	s1,s0
200016ea:	a011                	j	200016ee <base_dev_uart+0x30>
200016ec:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:70
}
200016ee:	8526                	mv	a0,s1
200016f0:	49b2                	lw	s3,12(sp)
200016f2:	4942                	lw	s2,16(sp)
200016f4:	44d2                	lw	s1,20(sp)
200016f6:	4462                	lw	s0,24(sp)
200016f8:	40f2                	lw	ra,28(sp)
200016fa:	6105                	addi	sp,sp,32
200016fc:	8082                	ret

200016fe <base_printf>:
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:77

size_t base_printf(const char *format, ...) {
200016fe:	7179                	addi	sp,sp,-48
20001700:	c606                	sw	ra,12(sp)
20001702:	d646                	sw	a7,44(sp)
20001704:	d442                	sw	a6,40(sp)
20001706:	d23e                	sw	a5,36(sp)
20001708:	d03a                	sw	a4,32(sp)
2000170a:	ce36                	sw	a3,28(sp)
2000170c:	cc32                	sw	a2,24(sp)
2000170e:	ca2e                	sw	a1,20(sp)
20001710:	effff597          	auipc	a1,0xeffff
20001714:	8f058593          	addi	a1,a1,-1808 # 10000000 <_data_start>
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20001718:	4190                	lw	a2,0(a1)
2000171a:	41cc                	lw	a1,4(a1)
2000171c:	872a                	mv	a4,a0
2000171e:	0854                	addi	a3,sp,20
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:79
  va_start(args, format);
20001720:	c436                	sw	a3,8(sp)
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001722:	8532                	mv	a0,a2
20001724:	863a                	mv	a2,a4
20001726:	200d                	jal	20001748 <base_vfprintf>
base_printf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:82
  return bytes_left;
20001728:	40b2                	lw	ra,12(sp)
2000172a:	6145                	addi	sp,sp,48
2000172c:	8082                	ret

2000172e <base_vprintf>:
base_vprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:85
size_t base_vprintf(const char *format, va_list args) {
2000172e:	effff697          	auipc	a3,0xeffff
20001732:	8d268693          	addi	a3,a3,-1838 # 10000000 <_data_start>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:86
  return base_vfprintf(base_stdout, format, args);
20001736:	4290                	lw	a2,0(a3)
20001738:	42d4                	lw	a3,4(a3)
2000173a:	872e                	mv	a4,a1
2000173c:	87aa                	mv	a5,a0
2000173e:	8532                	mv	a0,a2
20001740:	85b6                	mv	a1,a3
20001742:	863e                	mv	a2,a5
20001744:	86ba                	mv	a3,a4
20001746:	a009                	j	20001748 <base_vfprintf>

20001748 <base_vfprintf>:
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:344
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20001748:	7139                	addi	sp,sp,-64
2000174a:	de06                	sw	ra,60(sp)
2000174c:	dc22                	sw	s0,56(sp)
2000174e:	da26                	sw	s1,52(sp)
20001750:	d84a                	sw	s2,48(sp)
20001752:	d64e                	sw	s3,44(sp)
20001754:	d452                	sw	s4,40(sp)
20001756:	d256                	sw	s5,36(sp)
20001758:	d05a                	sw	s6,32(sp)
2000175a:	ce5e                	sw	s7,28(sp)
2000175c:	cc62                	sw	s8,24(sp)
2000175e:	ca66                	sw	s9,20(sp)
20001760:	c86a                	sw	s10,16(sp)
20001762:	c66e                	sw	s11,12(sp)
20001764:	8bb2                	mv	s7,a2
20001766:	892a                	mv	s2,a0
20001768:	c236                	sw	a3,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:345
  if (out.sink == NULL) {
2000176a:	c199                	beqz	a1,20001770 <base_vfprintf+0x28>
2000176c:	89ae                	mv	s3,a1
2000176e:	a029                	j	20001778 <base_vfprintf+0x30>
20001770:	00000997          	auipc	s3,0x0
20001774:	f3498993          	addi	s3,s3,-204 # 200016a4 <base_dev_null>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:354
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20001778:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357

  size_t bytes_written = 0;
  while (format[0] != '\0') {
2000177a:	000bc503          	lbu	a0,0(s7)
2000177e:	28050f63          	beqz	a0,20001a1c <base_vfprintf+0x2d4>
20001782:	4b01                	li	s6,0
20001784:	02500c13          	li	s8,37
20001788:	4ca5                	li	s9,9
2000178a:	02000d13          	li	s10,32
2000178e:	06800d93          	li	s11,104
20001792:	00002a17          	auipc	s4,0x2
20001796:	641a0a13          	addi	s4,s4,1601 # 20003dd3 <__clz_tab+0xa6f>
2000179a:	4aa9                	li	s5,10
consume_until_percent():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:143
  size_t text_len = 0;
2000179c:	4481                	li	s1,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:146
    if (c == '\0' || c == kPercent) {
2000179e:	0ff57413          	andi	s0,a0,255
200017a2:	01840963          	beq	s0,s8,200017b4 <base_vfprintf+0x6c>
200017a6:	c419                	beqz	s0,200017b4 <base_vfprintf+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:145
    char c = (*format)[text_len];
200017a8:	009b8533          	add	a0,s7,s1
200017ac:	00154503          	lbu	a0,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:153
    ++text_len;
200017b0:	0485                	addi	s1,s1,1
200017b2:	b7f5                	j	2000179e <base_vfprintf+0x56>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:147
      if (text_len > 0) {
200017b4:	c491                	beqz	s1,200017c0 <base_vfprintf+0x78>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:148
        *bytes_written += out.sink(out.data, *format, text_len);
200017b6:	854a                	mv	a0,s2
200017b8:	85de                	mv	a1,s7
200017ba:	8626                	mv	a2,s1
200017bc:	9982                	jalr	s3
200017be:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:358
    if (!consume_until_percent(out, &format, &bytes_written)) {
200017c0:	24040f63          	beqz	s0,20001a1e <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200017c4:	009b8633          	add	a2,s7,s1
200017c8:	00164503          	lbu	a0,1(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200017cc:	22050f63          	beqz	a0,20001a0a <base_vfprintf+0x2c2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
200017d0:	fd050593          	addi	a1,a0,-48
200017d4:	0ff5f593          	andi	a1,a1,255
200017d8:	00bcf863          	bgeu	s9,a1,200017e8 <base_vfprintf+0xa0>
200017dc:	4401                	li	s0,0
200017de:	4581                	li	a1,0
200017e0:	4605                	li	a2,1
200017e2:	028d7f63          	bgeu	s10,s0,20001820 <base_vfprintf+0xd8>
200017e6:	aca1                	j	20001a3e <base_vfprintf+0x2f6>
200017e8:	4581                	li	a1,0
200017ea:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200017ec:	0609                	addi	a2,a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:188
    char c = (*format)[spec_len];
200017ee:	00b606b3          	add	a3,a2,a1
200017f2:	0006c683          	lbu	a3,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:189
    if (c == '\0') {
200017f6:	20068a63          	beqz	a3,20001a0a <base_vfprintf+0x2c2>
200017fa:	0ff57513          	andi	a0,a0,255
200017fe:	03540733          	mul	a4,s0,s5
20001802:	953a                	add	a0,a0,a4
20001804:	fd050413          	addi	s0,a0,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:193
    if (c < '0' || c > '9') {
20001808:	fd068513          	addi	a0,a3,-48
2000180c:	0ff57713          	andi	a4,a0,255
20001810:	0585                	addi	a1,a1,1
20001812:	8536                	mv	a0,a3
20001814:	fcecfde3          	bgeu	s9,a4,200017ee <base_vfprintf+0xa6>
20001818:	4601                	li	a2,0
2000181a:	8536                	mv	a0,a3
2000181c:	228d6163          	bltu	s10,s0,20001a3e <base_vfprintf+0x2f6>
20001820:	008036b3          	snez	a3,s0
20001824:	8e55                	or	a2,a2,a3
20001826:	20060c63          	beqz	a2,20001a3e <base_vfprintf+0x2f6>
process_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000182a:	95de                	add	a1,a1,s7
2000182c:	95a6                	add	a1,a1,s1
2000182e:	00258b93          	addi	s7,a1,2
20001832:	02adce63          	blt	s11,a0,2000186e <base_vfprintf+0x126>
20001836:	06100593          	li	a1,97
2000183a:	06a5d563          	bge	a1,a0,200018a4 <base_vfprintf+0x15c>
2000183e:	06300593          	li	a1,99
20001842:	0ca5cb63          	blt	a1,a0,20001918 <base_vfprintf+0x1d0>
20001846:	06200593          	li	a1,98
2000184a:	14b50a63          	beq	a0,a1,2000199e <base_vfprintf+0x256>
2000184e:	06300593          	li	a1,99
20001852:	18b51f63          	bne	a0,a1,200019f0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:269
      char value = (char)va_arg(*args, uint32_t);
20001856:	4502                	lw	a0,0(sp)
20001858:	00450593          	addi	a1,a0,4
2000185c:	c02e                	sw	a1,0(sp)
2000185e:	4108                	lw	a0,0(a0)
20001860:	00a105a3          	sb	a0,11(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:270
      *bytes_written += out.sink(out.data, &value, 1);
20001864:	4605                	li	a2,1
20001866:	854a                	mv	a0,s2
20001868:	00b10593          	addi	a1,sp,11
2000186c:	aa41                	j	200019fc <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
2000186e:	07200593          	li	a1,114
20001872:	04a5dd63          	bge	a1,a0,200018cc <base_vfprintf+0x184>
20001876:	07700593          	li	a1,119
2000187a:	0aa5c663          	blt	a1,a0,20001926 <base_vfprintf+0x1de>
2000187e:	07300593          	li	a1,115
20001882:	12b50963          	beq	a0,a1,200019b4 <base_vfprintf+0x26c>
20001886:	07500593          	li	a1,117
2000188a:	16b51363          	bne	a0,a1,200019f0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:329
      uint32_t value = va_arg(*args, uint32_t);
2000188e:	4502                	lw	a0,0(sp)
20001890:	00450593          	addi	a1,a0,4
20001894:	c02e                	sw	a1,0(sp)
20001896:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:330
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
20001898:	00002797          	auipc	a5,0x2
2000189c:	9c178793          	addi	a5,a5,-1599 # 20003259 <kDigitsLow>
200018a0:	4729                	li	a4,10
200018a2:	a8cd                	j	20001994 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200018a4:	13850763          	beq	a0,s8,200019d2 <base_vfprintf+0x28a>
200018a8:	04800593          	li	a1,72
200018ac:	00b50663          	beq	a0,a1,200018b8 <base_vfprintf+0x170>
200018b0:	05800593          	li	a1,88
200018b4:	12b51e63          	bne	a0,a1,200019f0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:324
      uint32_t value = va_arg(*args, uint32_t);
200018b8:	4502                	lw	a0,0(sp)
200018ba:	00450593          	addi	a1,a0,4
200018be:	c02e                	sw	a1,0(sp)
200018c0:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:325
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsHigh);
200018c2:	00002797          	auipc	a5,0x2
200018c6:	9a778793          	addi	a5,a5,-1625 # 20003269 <kDigitsHigh>
200018ca:	a0e1                	j	20001992 <base_vfprintf+0x24a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
200018cc:	06900593          	li	a1,105
200018d0:	06b50d63          	beq	a0,a1,2000194a <base_vfprintf+0x202>
200018d4:	06f00593          	li	a1,111
200018d8:	10b50163          	beq	a0,a1,200019da <base_vfprintf+0x292>
200018dc:	07000593          	li	a1,112
200018e0:	10b51863          	bne	a0,a1,200019f0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200018e4:	00002597          	auipc	a1,0x2
200018e8:	4f358593          	addi	a1,a1,1267 # 20003dd7 <__clz_tab+0xa73>
200018ec:	4609                	li	a2,2
200018ee:	854a                	mv	a0,s2
200018f0:	9982                	jalr	s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:311
      uintptr_t value = va_arg(*args, uintptr_t);
200018f2:	4582                	lw	a1,0(sp)
200018f4:	00458613          	addi	a2,a1,4
200018f8:	c032                	sw	a2,0(sp)
200018fa:	4190                	lw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:310
      *bytes_written += out.sink(out.data, "0x", 2);
200018fc:	01650433          	add	s0,a0,s6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:313
          write_digits(out, value, sizeof(uintptr_t) * 2, 16, kDigitsLow);
20001900:	00002797          	auipc	a5,0x2
20001904:	95978793          	addi	a5,a5,-1703 # 20003259 <kDigitsLow>
20001908:	46a1                	li	a3,8
2000190a:	4741                	li	a4,16
2000190c:	854a                	mv	a0,s2
2000190e:	85ce                	mv	a1,s3
20001910:	2a5d                	jal	20001ac6 <write_digits>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:312
      *bytes_written +=
20001912:	00a40b33          	add	s6,s0,a0
20001916:	a0ed                	j	20001a00 <base_vfprintf+0x2b8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:263
  switch (spec.type) {
20001918:	06400593          	li	a1,100
2000191c:	02b50763          	beq	a0,a1,2000194a <base_vfprintf+0x202>
20001920:	07b50063          	beq	a0,s11,20001980 <base_vfprintf+0x238>
20001924:	a0f1                	j	200019f0 <base_vfprintf+0x2a8>
20001926:	07800593          	li	a1,120
2000192a:	04b50b63          	beq	a0,a1,20001980 <base_vfprintf+0x238>
2000192e:	07a00593          	li	a1,122
20001932:	0ab51f63          	bne	a0,a1,200019f0 <base_vfprintf+0x2a8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:283
      size_t len = va_arg(*args, size_t);
20001936:	4502                	lw	a0,0(sp)
20001938:	00450593          	addi	a1,a0,4
2000193c:	c02e                	sw	a1,0(sp)
2000193e:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:284
      char *value = va_arg(*args, char *);
20001940:	00850593          	addi	a1,a0,8
20001944:	c02e                	sw	a1,0(sp)
20001946:	414c                	lw	a1,4(a0)
20001948:	a84d                	j	200019fa <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:290
      uint32_t value = va_arg(*args, uint32_t);
2000194a:	4502                	lw	a0,0(sp)
2000194c:	00450593          	addi	a1,a0,4
20001950:	c02e                	sw	a1,0(sp)
20001952:	4104                	lw	s1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:291
      if (((int32_t)value) < 0) {
20001954:	557d                	li	a0,-1
20001956:	00954c63          	blt	a0,s1,2000196e <base_vfprintf+0x226>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:292
        *bytes_written += out.sink(out.data, "-", 1);
2000195a:	00002597          	auipc	a1,0x2
2000195e:	47b58593          	addi	a1,a1,1147 # 20003dd5 <__clz_tab+0xa71>
20001962:	4605                	li	a2,1
20001964:	854a                	mv	a0,s2
20001966:	9982                	jalr	s3
20001968:	9b2a                	add	s6,s6,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:293
        value = -value;
2000196a:	409004b3          	neg	s1,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:295
      *bytes_written += write_digits(out, value, spec.width, 10, kDigitsLow);
2000196e:	00002797          	auipc	a5,0x2
20001972:	8eb78793          	addi	a5,a5,-1813 # 20003259 <kDigitsLow>
20001976:	4729                	li	a4,10
20001978:	854a                	mv	a0,s2
2000197a:	85ce                	mv	a1,s3
2000197c:	8626                	mv	a2,s1
2000197e:	a829                	j	20001998 <base_vfprintf+0x250>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:318
      uint32_t value = va_arg(*args, uint32_t);
20001980:	4502                	lw	a0,0(sp)
20001982:	00450593          	addi	a1,a0,4
20001986:	c02e                	sw	a1,0(sp)
20001988:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:319
      *bytes_written += write_digits(out, value, spec.width, 16, kDigitsLow);
2000198a:	00002797          	auipc	a5,0x2
2000198e:	8cf78793          	addi	a5,a5,-1841 # 20003259 <kDigitsLow>
20001992:	4741                	li	a4,16
20001994:	854a                	mv	a0,s2
20001996:	85ce                	mv	a1,s3
20001998:	86a2                	mv	a3,s0
2000199a:	2235                	jal	20001ac6 <write_digits>
2000199c:	a08d                	j	200019fe <base_vfprintf+0x2b6>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:334
      uint32_t value = va_arg(*args, uint32_t);
2000199e:	4502                	lw	a0,0(sp)
200019a0:	00450593          	addi	a1,a0,4
200019a4:	c02e                	sw	a1,0(sp)
200019a6:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:335
      *bytes_written += write_digits(out, value, spec.width, 2, kDigitsLow);
200019a8:	00002797          	auipc	a5,0x2
200019ac:	8b178793          	addi	a5,a5,-1871 # 20003259 <kDigitsLow>
200019b0:	4709                	li	a4,2
200019b2:	b7cd                	j	20001994 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:274
      char *value = va_arg(*args, char *);
200019b4:	4502                	lw	a0,0(sp)
200019b6:	00450593          	addi	a1,a0,4
200019ba:	c02e                	sw	a1,0(sp)
200019bc:	410c                	lw	a1,0(a0)
200019be:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200019c0:	00a58633          	add	a2,a1,a0
200019c4:	00064603          	lbu	a2,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:277
        ++len;
200019c8:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:276
      while (value[len] != '\0') {
200019ca:	fa7d                	bnez	a2,200019c0 <base_vfprintf+0x278>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:279
      *bytes_written += out.sink(out.data, value, len);
200019cc:	fff50613          	addi	a2,a0,-1
200019d0:	a02d                	j	200019fa <base_vfprintf+0x2b2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:265
      *bytes_written += out.sink(out.data, "%", 1);
200019d2:	4605                	li	a2,1
200019d4:	854a                	mv	a0,s2
200019d6:	85d2                	mv	a1,s4
200019d8:	a015                	j	200019fc <base_vfprintf+0x2b4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:299
      uint32_t value = va_arg(*args, uint32_t);
200019da:	4502                	lw	a0,0(sp)
200019dc:	00450593          	addi	a1,a0,4
200019e0:	c02e                	sw	a1,0(sp)
200019e2:	4110                	lw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:300
      *bytes_written += write_digits(out, value, spec.width, 8, kDigitsLow);
200019e4:	00002797          	auipc	a5,0x2
200019e8:	87578793          	addi	a5,a5,-1931 # 20003259 <kDigitsLow>
200019ec:	4721                	li	a4,8
200019ee:	b75d                	j	20001994 <base_vfprintf+0x24c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:339
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
200019f0:	00002597          	auipc	a1,0x2
200019f4:	88958593          	addi	a1,a1,-1911 # 20003279 <kUnknownSpec>
200019f8:	463d                	li	a2,15
200019fa:	854a                	mv	a0,s2
200019fc:	9982                	jalr	s3
200019fe:	9b2a                	add	s6,s6,a0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:357
  while (format[0] != '\0') {
20001a00:	000bc503          	lbu	a0,0(s7)
20001a04:	d8051ce3          	bnez	a0,2000179c <base_vfprintf+0x54>
20001a08:	a819                	j	20001a1e <base_vfprintf+0x2d6>
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:190
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20001a0a:	00002597          	auipc	a1,0x2
20001a0e:	83258593          	addi	a1,a1,-1998 # 2000323c <kErrorNul>
20001a12:	4645                	li	a2,17
20001a14:	854a                	mv	a0,s2
20001a16:	9982                	jalr	s3
20001a18:	9b2a                	add	s6,s6,a0
20001a1a:	a011                	j	20001a1e <base_vfprintf+0x2d6>
20001a1c:	4b01                	li	s6,0
base_vfprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:370

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20001a1e:	855a                	mv	a0,s6
20001a20:	4db2                	lw	s11,12(sp)
20001a22:	4d42                	lw	s10,16(sp)
20001a24:	4cd2                	lw	s9,20(sp)
20001a26:	4c62                	lw	s8,24(sp)
20001a28:	4bf2                	lw	s7,28(sp)
20001a2a:	5b02                	lw	s6,32(sp)
20001a2c:	5a92                	lw	s5,36(sp)
20001a2e:	5a22                	lw	s4,40(sp)
20001a30:	59b2                	lw	s3,44(sp)
20001a32:	5942                	lw	s2,48(sp)
20001a34:	54d2                	lw	s1,52(sp)
20001a36:	5462                	lw	s0,56(sp)
20001a38:	50f2                	lw	ra,60(sp)
20001a3a:	6121                	addi	sp,sp,64
20001a3c:	8082                	ret
consume_format_specifier():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:203
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20001a3e:	00002597          	auipc	a1,0x2
20001a42:	80f58593          	addi	a1,a1,-2033 # 2000324d <kErrorTooWide>
20001a46:	4631                	li	a2,12
20001a48:	b7f1                	j	20001a14 <base_vfprintf+0x2cc>

20001a4a <base_snprintf>:
base_snprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:109
size_t base_snprintf(char *buf, size_t len, const char *format, ...) {
20001a4a:	7179                	addi	sp,sp,-48
20001a4c:	ca06                	sw	ra,20(sp)
20001a4e:	d646                	sw	a7,44(sp)
20001a50:	d442                	sw	a6,40(sp)
20001a52:	d23e                	sw	a5,36(sp)
20001a54:	d03a                	sw	a4,32(sp)
20001a56:	ce36                	sw	a3,28(sp)
20001a58:	0874                	addi	a3,sp,28
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:111
  va_start(args, format);
20001a5a:	c836                	sw	a3,16(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:113
  snprintf_captures_t data = {
20001a5c:	c42a                	sw	a0,8(sp)
20001a5e:	c62e                	sw	a1,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:119
  size_t bytes_left = base_vfprintf(out, format, args);
20001a60:	00000597          	auipc	a1,0x0
20001a64:	01258593          	addi	a1,a1,18 # 20001a72 <snprintf_sink>
20001a68:	0028                	addi	a0,sp,8
20001a6a:	39f9                	jal	20001748 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:121
  return bytes_left;
20001a6c:	40d2                	lw	ra,20(sp)
20001a6e:	6145                	addi	sp,sp,48
20001a70:	8082                	ret

20001a72 <snprintf_sink>:
snprintf_sink():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:94
static size_t snprintf_sink(void *data, const char *buf, size_t len) {
20001a72:	1141                	addi	sp,sp,-16
20001a74:	c606                	sw	ra,12(sp)
20001a76:	c422                	sw	s0,8(sp)
20001a78:	c226                	sw	s1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:96
  if (captures->bytes_left == 0) {
20001a7a:	4140                	lw	s0,4(a0)
20001a7c:	c00d                	beqz	s0,20001a9e <snprintf_sink+0x2c>
20001a7e:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:100
  if (len > captures->bytes_left) {
20001a80:	00c46363          	bltu	s0,a2,20001a86 <snprintf_sink+0x14>
20001a84:	8432                	mv	s0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:103
  memcpy(captures->buf, buf, len);
20001a86:	4088                	lw	a0,0(s1)
20001a88:	8622                	mv	a2,s0
20001a8a:	b5eff0ef          	jal	ra,20000de8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001a8e:	4088                	lw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001a90:	40cc                	lw	a1,4(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:104
  captures->buf += len;
20001a92:	9522                	add	a0,a0,s0
20001a94:	c088                	sw	a0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:105
  captures->bytes_left -= len;
20001a96:	40858533          	sub	a0,a1,s0
20001a9a:	c0c8                	sw	a0,4(s1)
20001a9c:	a011                	j	20001aa0 <snprintf_sink+0x2e>
20001a9e:	4401                	li	s0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:107
}
20001aa0:	8522                	mv	a0,s0
20001aa2:	4492                	lw	s1,4(sp)
20001aa4:	4422                	lw	s0,8(sp)
20001aa6:	40b2                	lw	ra,12(sp)
20001aa8:	0141                	addi	sp,sp,16
20001aaa:	8082                	ret

20001aac <base_fprintf>:
base_fprintf():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:124
size_t base_fprintf(buffer_sink_t out, const char *format, ...) {
20001aac:	1101                	addi	sp,sp,-32
20001aae:	c206                	sw	ra,4(sp)
20001ab0:	ce46                	sw	a7,28(sp)
20001ab2:	cc42                	sw	a6,24(sp)
20001ab4:	ca3e                	sw	a5,20(sp)
20001ab6:	c83a                	sw	a4,16(sp)
20001ab8:	c636                	sw	a3,12(sp)
20001aba:	0074                	addi	a3,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:126
  va_start(args, format);
20001abc:	c036                	sw	a3,0(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:127
  size_t bytes_left = base_vfprintf(out, format, args);
20001abe:	3169                	jal	20001748 <base_vfprintf>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:129
  return bytes_left;
20001ac0:	4092                	lw	ra,4(sp)
20001ac2:	6105                	addi	sp,sp,32
20001ac4:	8082                	ret

20001ac6 <write_digits>:
write_digits():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:225
                           uint32_t base, const char *glyphs) {
20001ac6:	7139                	addi	sp,sp,-64
20001ac8:	de06                	sw	ra,60(sp)
20001aca:	dc22                	sw	s0,56(sp)
20001acc:	da26                	sw	s1,52(sp)
20001ace:	d84a                	sw	s2,48(sp)
20001ad0:	d64e                	sw	s3,44(sp)
20001ad2:	892e                	mv	s2,a1
20001ad4:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001ad6:	ca05                	beqz	a2,20001b06 <write_digits+0x40>
20001ad8:	4501                	li	a0,0
20001ada:	02b10813          	addi	a6,sp,43
20001ade:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:234
    value /= base;
20001ae0:	02e65633          	divu	a2,a2,a4
20001ae4:	02e60433          	mul	s0,a2,a4
20001ae8:	40848433          	sub	s0,s1,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:235
    buffer[kWordBits - 1 - len] = glyphs[digit];
20001aec:	943e                	add	s0,s0,a5
20001aee:	00040403          	lb	s0,0(s0)
20001af2:	00a805b3          	add	a1,a6,a0
20001af6:	00858023          	sb	s0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:232
  while (value > 0) {
20001afa:	157d                	addi	a0,a0,-1
20001afc:	fee4f1e3          	bgeu	s1,a4,20001ade <write_digits+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:238
  width = width == 0 ? 1 : width;
20001b00:	40a00633          	neg	a2,a0
20001b04:	a011                	j	20001b08 <write_digits+0x42>
20001b06:	4601                	li	a2,0
20001b08:	4485                	li	s1,1
20001b0a:	c291                	beqz	a3,20001b0e <write_digits+0x48>
20001b0c:	84b6                	mv	s1,a3
20001b0e:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:239
  width = width > kWordBits ? kWordBits : width;
20001b12:	00a4e463          	bltu	s1,a0,20001b1a <write_digits+0x54>
20001b16:	02000493          	li	s1,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001b1a:	02967063          	bgeu	a2,s1,20001b3a <write_digits+0x74>
20001b1e:	0068                	addi	a0,sp,12
20001b20:	8d05                	sub	a0,a0,s1
20001b22:	02050513          	addi	a0,a0,32
20001b26:	40c48433          	sub	s0,s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:241
    buffer[kWordBits - len - 1] = '0';
20001b2a:	03000593          	li	a1,48
20001b2e:	8622                	mv	a2,s0
20001b30:	aceff0ef          	jal	ra,20000dfe <memset>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:240
  while (len < width) {
20001b34:	147d                	addi	s0,s0,-1
20001b36:	fc7d                	bnez	s0,20001b34 <write_digits+0x6e>
20001b38:	8626                	mv	a2,s1
20001b3a:	0068                	addi	a0,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:244
  return out.sink(out.data, buffer + (kWordBits - len), len);
20001b3c:	8d11                	sub	a0,a0,a2
20001b3e:	02050593          	addi	a1,a0,32
20001b42:	854e                	mv	a0,s3
20001b44:	9902                	jalr	s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/runtime/print.c:245
}
20001b46:	59b2                	lw	s3,44(sp)
20001b48:	5942                	lw	s2,48(sp)
20001b4a:	54d2                	lw	s1,52(sp)
20001b4c:	5462                	lw	s0,56(sp)
20001b4e:	50f2                	lw	ra,60(sp)
20001b50:	6121                	addi	sp,sp,64
20001b52:	8082                	ret

20001b54 <dif_uart_init>:
dif_uart_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:136

  return bytes_read;
}

dif_uart_result_t dif_uart_init(dif_uart_params_t params, dif_uart_t *uart) {
  if (uart == NULL) {
20001b54:	c581                	beqz	a1,20001b5c <dif_uart_init+0x8>
20001b56:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:140
    return kDifUartBadArg;
  }

  uart->params = params;
20001b58:	c188                	sw	a0,0(a1)
20001b5a:	a011                	j	20001b5e <dif_uart_init+0xa>
20001b5c:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:142
  return kDifUartOk;
}
20001b5e:	8532                	mv	a0,a2
20001b60:	8082                	ret

20001b62 <dif_uart_configure>:
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:145

dif_uart_config_result_t dif_uart_configure(const dif_uart_t *uart,
                                            dif_uart_config_t config) {
20001b62:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:146
  if (uart == NULL) {
20001b64:	c606                	sw	ra,12(sp)
20001b66:	c422                	sw	s0,8(sp)
20001b68:	c226                	sw	s1,4(sp)
20001b6a:	c935                	beqz	a0,20001bde <dif_uart_configure+0x7c>
20001b6c:	84ae                	mv	s1,a1
20001b6e:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:150
    return kDifUartConfigBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
20001b70:	418c                	lw	a1,0(a1)
20001b72:	450d                	li	a0,3
20001b74:	c5b5                	beqz	a1,20001be0 <dif_uart_configure+0x7e>
20001b76:	40d0                	lw	a2,4(s1)
20001b78:	c625                	beqz	a2,20001be0 <dif_uart_configure+0x7e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:169
                "NCO bit width exceeds 28 bits.");

  // NCO creates 16x of baudrate. So, in addition to the nco_width,
  // 2^4 should be multiplied.
  uint64_t nco =
      ((uint64_t)config.baudrate << (nco_width + 4)) / config.clk_freq_hz;
20001b7a:	01459513          	slli	a0,a1,0x14
20001b7e:	81b1                	srli	a1,a1,0xc
20001b80:	4681                	li	a3,0
20001b82:	0c0010ef          	jal	ra,20002c42 <__udivdi3>
20001b86:	6641                	lui	a2,0x10
20001b88:	167d                	addi	a2,a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:170
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
20001b8a:	8e69                	and	a2,a2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:173

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
20001b8c:	8d31                	xor	a0,a0,a2
20001b8e:	8dc9                	or	a1,a1,a0
20001b90:	4511                	li	a0,4
20001b92:	e5b9                	bnez	a1,20001be0 <dif_uart_configure+0x7e>
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:92
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, 0u);
20001b94:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b96:	00052623          	sw	zero,12(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:98
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
20001b9a:	4008                	lw	a0,0(s0)
20001b9c:	458d                	li	a1,3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001b9e:	cd4c                	sw	a1,28(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:100
  mmio_region_write32(uart->params.base_addr, UART_OVRD_REG_OFFSET, 0u);
20001ba0:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001ba2:	02052223          	sw	zero,36(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:101
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
20001ba6:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001ba8:	02052623          	sw	zero,44(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:102
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001bac:	4008                	lw	a0,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001bae:	00052223          	sw	zero,4(a0)
uart_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:103
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET,
20001bb2:	4008                	lw	a0,0(s0)
20001bb4:	55fd                	li	a1,-1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001bb6:	c10c                	sw	a1,0(a0)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifUartToggleEnabled) {
20001bb8:	4494                	lw	a3,8(s1)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001bba:	01061513          	slli	a0,a2,0x10
20001bbe:	04300593          	li	a1,67
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
20001bc2:	c291                	beqz	a3,20001bc6 <dif_uart_configure+0x64>
20001bc4:	458d                	li	a1,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20001bc6:	44d0                	lw	a2,12(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:185
  if (config.parity_enable == kDifUartToggleEnabled) {
20001bc8:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:188
  if (config.parity == kDifUartParityOdd) {
20001bca:	e219                	bnez	a2,20001bd0 <dif_uart_configure+0x6e>
20001bcc:	08056513          	ori	a0,a0,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:191
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);
20001bd0:	400c                	lw	a1,0(s0)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001bd2:	c5c8                	sw	a0,12(a1)
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:194

  // Disable interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001bd4:	400c                	lw	a1,0(s0)
20001bd6:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001bd8:	0005a223          	sw	zero,4(a1)
20001bdc:	a011                	j	20001be0 <dif_uart_configure+0x7e>
20001bde:	4509                	li	a0,2
dif_uart_configure():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:197

  return kDifUartConfigOk;
}
20001be0:	4492                	lw	s1,4(sp)
20001be2:	4422                	lw	s0,8(sp)
20001be4:	40b2                	lw	ra,12(sp)
20001be6:	0141                	addi	sp,sp,16
20001be8:	8082                	ret

20001bea <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:201

dif_uart_result_t dif_uart_irq_is_pending(const dif_uart_t *uart,
                                          dif_uart_irq_t irq,
                                          bool *is_pending) {
20001bea:	1141                	addi	sp,sp,-16
20001bec:	c606                	sw	ra,12(sp)
20001bee:	c422                	sw	s0,8(sp)
20001bf0:	c226                	sw	s1,4(sp)
20001bf2:	84aa                	mv	s1,a0
20001bf4:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:202
  if (uart == NULL || is_pending == NULL) {
20001bf6:	c09d                	beqz	s1,20001c1c <dif_uart_irq_is_pending+0x32>
20001bf8:	8432                	mv	s0,a2
20001bfa:	c20d                	beqz	a2,20001c1c <dif_uart_irq_is_pending+0x32>
20001bfc:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:207
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001bfe:	852e                	mv	a0,a1
20001c00:	85b2                	mv	a1,a2
20001c02:	2015                	jal	20001c26 <uart_irq_offset_get>
20001c04:	85aa                	mv	a1,a0
20001c06:	4505                	li	a0,1
20001c08:	c991                	beqz	a1,20001c1c <dif_uart_irq_is_pending+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:212
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET);
20001c0a:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c0c:	410c                	lw	a1,0(a0)
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
  *is_pending = bitfield_bit32_read(reg, offset);
20001c0e:	4602                	lw	a2,0(sp)
20001c10:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001c12:	00c5d5b3          	srl	a1,a1,a2
20001c16:	8985                	andi	a1,a1,1
dif_uart_irq_is_pending():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:213
20001c18:	00b40023          	sb	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:216

  return kDifUartOk;
}
20001c1c:	4492                	lw	s1,4(sp)
20001c1e:	4422                	lw	s0,8(sp)
20001c20:	40b2                	lw	ra,12(sp)
20001c22:	0141                	addi	sp,sp,16
20001c24:	8082                	ret

20001c26 <uart_irq_offset_get>:
uart_irq_offset_get():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:55
                                ptrdiff_t *offset_out) {
20001c26:	461d                	li	a2,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:57
  switch (irq_type) {
20001c28:	00a66563          	bltu	a2,a0,20001c32 <uart_irq_offset_get+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:86
  *offset_out = offset;
20001c2c:	c188                	sw	a0,0(a1)
20001c2e:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:89
}
20001c30:	8082                	ret
20001c32:	4501                	li	a0,0
20001c34:	8082                	ret

20001c36 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:219

dif_uart_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                           dif_uart_irq_t irq) {
20001c36:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:220
  if (uart == NULL) {
20001c38:	c606                	sw	ra,12(sp)
20001c3a:	c422                	sw	s0,8(sp)
20001c3c:	c10d                	beqz	a0,20001c5e <dif_uart_irq_acknowledge+0x28>
20001c3e:	842a                	mv	s0,a0
20001c40:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:225
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001c42:	852e                	mv	a0,a1
20001c44:	85b2                	mv	a1,a2
20001c46:	37c5                	jal	20001c26 <uart_irq_offset_get>
20001c48:	85aa                	mv	a1,a0
20001c4a:	4505                	li	a0,1
20001c4c:	c991                	beqz	a1,20001c60 <dif_uart_irq_acknowledge+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:230
    return kDifUartError;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001c4e:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:231
  mmio_region_write32(uart->params.base_addr, UART_INTR_STATE_REG_OFFSET, reg);
20001c50:	4010                	lw	a2,0(s0)
20001c52:	4501                	li	a0,0
20001c54:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001c56:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c5a:	c20c                	sw	a1,0(a2)
20001c5c:	a011                	j	20001c60 <dif_uart_irq_acknowledge+0x2a>
20001c5e:	4509                	li	a0,2
dif_uart_irq_acknowledge():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:234

  return kDifUartOk;
}
20001c60:	4422                	lw	s0,8(sp)
20001c62:	40b2                	lw	ra,12(sp)
20001c64:	0141                	addi	sp,sp,16
20001c66:	8082                	ret

20001c68 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:238

dif_uart_result_t dif_uart_irq_disable_all(const dif_uart_t *uart,
                                           dif_uart_irq_snapshot_t *snapshot) {
  if (uart == NULL) {
20001c68:	c911                	beqz	a0,20001c7c <dif_uart_irq_disable_all+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:243
    return kDifUartBadArg;
  }

  // Pass the current interrupt state to the caller.
  if (snapshot != NULL) {
20001c6a:	c581                	beqz	a1,20001c72 <dif_uart_irq_disable_all+0xa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:245
    *snapshot =
        mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001c6c:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001c6e:	4250                	lw	a2,4(a2)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:244
    *snapshot =
20001c70:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:249
  }

  // Disable all UART interrupts.
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20001c72:	410c                	lw	a1,0(a0)
20001c74:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001c76:	0005a223          	sw	zero,4(a1)
dif_uart_irq_disable_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:252

  return kDifUartOk;
}
20001c7a:	8082                	ret
20001c7c:	4509                	li	a0,2
20001c7e:	8082                	ret

20001c80 <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:255

dif_uart_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_snapshot_t *snapshot) {
20001c80:	862a                	mv	a2,a0
20001c82:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:256
  if (uart == NULL || snapshot == NULL) {
20001c84:	c611                	beqz	a2,20001c90 <dif_uart_irq_restore_all+0x10>
20001c86:	c589                	beqz	a1,20001c90 <dif_uart_irq_restore_all+0x10>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:261
    return kDifUartBadArg;
  }

  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20001c88:	418c                	lw	a1,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:260
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET,
20001c8a:	4210                	lw	a2,0(a2)
20001c8c:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001c8e:	c24c                	sw	a1,4(a2)
dif_uart_irq_restore_all():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:264

  return kDifUartOk;
}
20001c90:	8082                	ret

20001c92 <dif_uart_irq_get_enabled>:
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:268

dif_uart_result_t dif_uart_irq_get_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t *state) {
20001c92:	1141                	addi	sp,sp,-16
20001c94:	c606                	sw	ra,12(sp)
20001c96:	c422                	sw	s0,8(sp)
20001c98:	c226                	sw	s1,4(sp)
20001c9a:	84aa                	mv	s1,a0
20001c9c:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:269
  if (uart == NULL || state == NULL) {
20001c9e:	c485                	beqz	s1,20001cc6 <dif_uart_irq_get_enabled+0x34>
20001ca0:	8432                	mv	s0,a2
20001ca2:	c215                	beqz	a2,20001cc6 <dif_uart_irq_get_enabled+0x34>
20001ca4:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:274
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001ca6:	852e                	mv	a0,a1
20001ca8:	85b2                	mv	a1,a2
20001caa:	3fb5                	jal	20001c26 <uart_irq_offset_get>
20001cac:	85aa                	mv	a1,a0
20001cae:	4505                	li	a0,1
20001cb0:	c999                	beqz	a1,20001cc6 <dif_uart_irq_get_enabled+0x34>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:279
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001cb2:	4088                	lw	a0,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001cb4:	414c                	lw	a1,4(a0)
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:281

  bool is_enabled = bitfield_bit32_read(reg, offset);
20001cb6:	4602                	lw	a2,0(sp)
20001cb8:	4501                	li	a0,0
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001cba:	00c5d5b3          	srl	a1,a1,a2
20001cbe:	8985                	andi	a1,a1,1
20001cc0:	0015b593          	seqz	a1,a1
dif_uart_irq_get_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:282
  *state = is_enabled ? kDifUartToggleEnabled : kDifUartToggleDisabled;
20001cc4:	c00c                	sw	a1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:285

  return kDifUartOk;
}
20001cc6:	4492                	lw	s1,4(sp)
20001cc8:	4422                	lw	s0,8(sp)
20001cca:	40b2                	lw	ra,12(sp)
20001ccc:	0141                	addi	sp,sp,16
20001cce:	8082                	ret

20001cd0 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:289

dif_uart_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                           dif_uart_irq_t irq,
                                           dif_uart_toggle_t state) {
20001cd0:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:290
  if (uart == NULL) {
20001cd2:	c606                	sw	ra,12(sp)
20001cd4:	c422                	sw	s0,8(sp)
20001cd6:	c226                	sw	s1,4(sp)
20001cd8:	c91d                	beqz	a0,20001d0e <dif_uart_irq_set_enabled+0x3e>
20001cda:	8432                	mv	s0,a2
20001cdc:	84aa                	mv	s1,a0
20001cde:	860a                	mv	a2,sp
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:295
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001ce0:	852e                	mv	a0,a1
20001ce2:	85b2                	mv	a1,a2
20001ce4:	3789                	jal	20001c26 <uart_irq_offset_get>
20001ce6:	85aa                	mv	a1,a0
20001ce8:	4505                	li	a0,1
20001cea:	c19d                	beqz	a1,20001d10 <dif_uart_irq_set_enabled+0x40>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:300
    return kDifUartError;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET);
20001cec:	408c                	lw	a1,0(s1)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001cee:	41d0                	lw	a2,4(a1)
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:302
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
  reg = bitfield_bit32_write(reg, offset, bit);
20001cf0:	4682                	lw	a3,0(sp)
20001cf2:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:301
  bool bit = (state == kDifUartToggleEnabled) ? true : false;
20001cf4:	00143713          	seqz	a4,s0
20001cf8:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001cfa:	00d797b3          	sll	a5,a5,a3
20001cfe:	fff7c793          	not	a5,a5
20001d02:	8e7d                	and	a2,a2,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001d04:	00d716b3          	sll	a3,a4,a3
20001d08:	8e55                	or	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001d0a:	c1d0                	sw	a2,4(a1)
20001d0c:	a011                	j	20001d10 <dif_uart_irq_set_enabled+0x40>
20001d0e:	4509                	li	a0,2
dif_uart_irq_set_enabled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:306
  mmio_region_write32(uart->params.base_addr, UART_INTR_ENABLE_REG_OFFSET, reg);

  return kDifUartOk;
}
20001d10:	4492                	lw	s1,4(sp)
20001d12:	4422                	lw	s0,8(sp)
20001d14:	40b2                	lw	ra,12(sp)
20001d16:	0141                	addi	sp,sp,16
20001d18:	8082                	ret

20001d1a <dif_uart_irq_force>:
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:309

dif_uart_result_t dif_uart_irq_force(const dif_uart_t *uart,
                                     dif_uart_irq_t irq) {
20001d1a:	1141                	addi	sp,sp,-16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:310
  if (uart == NULL) {
20001d1c:	c606                	sw	ra,12(sp)
20001d1e:	c422                	sw	s0,8(sp)
20001d20:	c10d                	beqz	a0,20001d42 <dif_uart_irq_force+0x28>
20001d22:	842a                	mv	s0,a0
20001d24:	0050                	addi	a2,sp,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:315
    return kDifUartBadArg;
  }

  ptrdiff_t offset;
  if (!uart_irq_offset_get(irq, &offset)) {
20001d26:	852e                	mv	a0,a1
20001d28:	85b2                	mv	a1,a2
20001d2a:	3df5                	jal	20001c26 <uart_irq_offset_get>
20001d2c:	85aa                	mv	a1,a0
20001d2e:	4505                	li	a0,1
20001d30:	c991                	beqz	a1,20001d44 <dif_uart_irq_force+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:320
    return kDifUartError;
  }

  // Force the requested interrupt (write-only).
  uint32_t reg = bitfield_bit32_write(0, offset, true);
20001d32:	4592                	lw	a1,4(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:321
  mmio_region_write32(uart->params.base_addr, UART_INTR_TEST_REG_OFFSET, reg);
20001d34:	4010                	lw	a2,0(s0)
20001d36:	4501                	li	a0,0
20001d38:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001d3a:	00b695b3          	sll	a1,a3,a1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001d3e:	c60c                	sw	a1,8(a2)
20001d40:	a011                	j	20001d44 <dif_uart_irq_force+0x2a>
20001d42:	4509                	li	a0,2
dif_uart_irq_force():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:324

  return kDifUartOk;
}
20001d44:	4422                	lw	s0,8(sp)
20001d46:	40b2                	lw	ra,12(sp)
20001d48:	0141                	addi	sp,sp,16
20001d4a:	8082                	ret

20001d4c <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:328

dif_uart_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001d4c:	cd09                	beqz	a0,20001d66 <dif_uart_watermark_rx_set+0x1a>
20001d4e:	4691                	li	a3,4
20001d50:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001d52:	00b6eb63          	bltu	a3,a1,20001d68 <dif_uart_watermark_rx_set+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:357
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001d56:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001d58:	4d54                	lw	a3,28(a0)
20001d5a:	4601                	li	a2,0
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:335
  switch (watermark) {
20001d5c:	058a                	slli	a1,a1,0x2
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20001d5e:	9a8d                	andi	a3,a3,-29
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001d60:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001d62:	cd4c                	sw	a1,28(a0)
20001d64:	a011                	j	20001d68 <dif_uart_watermark_rx_set+0x1c>
20001d66:	4609                	li	a2,2
dif_uart_watermark_rx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:362
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001d68:	8532                	mv	a0,a2
20001d6a:	8082                	ret

20001d6c <dif_uart_watermark_tx_set>:
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:366

dif_uart_result_t dif_uart_watermark_tx_set(const dif_uart_t *uart,
                                            dif_uart_watermark_t watermark) {
  if (uart == NULL) {
20001d6c:	cd11                	beqz	a0,20001d88 <dif_uart_watermark_tx_set+0x1c>
20001d6e:	468d                	li	a3,3
20001d70:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20001d72:	00b6ec63          	bltu	a3,a1,20001d8a <dif_uart_watermark_tx_set+0x1e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:393
      return kDifUartError;
  }

  // Set watermark level.
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001d76:	4108                	lw	a0,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001d78:	4d54                	lw	a3,28(a0)
20001d7a:	4601                	li	a2,0
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:373
  switch (watermark) {
20001d7c:	0596                	slli	a1,a1,0x5
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001d7e:	f9f6f693          	andi	a3,a3,-97
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001d82:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001d84:	cd4c                	sw	a1,28(a0)
20001d86:	a011                	j	20001d8a <dif_uart_watermark_tx_set+0x1e>
20001d88:	4609                	li	a2,2
dif_uart_watermark_tx_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:398
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_TXILVL_FIELD, value);
  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001d8a:	8532                	mv	a0,a2
20001d8c:	8082                	ret

20001d8e <dif_uart_bytes_send>:
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:403

dif_uart_result_t dif_uart_bytes_send(const dif_uart_t *uart,
                                      const uint8_t *data,
                                      size_t bytes_requested,
                                      size_t *bytes_written) {
20001d8e:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:404
  if (uart == NULL || data == NULL) {
20001d90:	c51d                	beqz	a0,20001dbe <dif_uart_bytes_send+0x30>
20001d92:	c595                	beqz	a1,20001dbe <dif_uart_bytes_send+0x30>
20001d94:	4781                	li	a5,0
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001d96:	c20d                	beqz	a2,20001db8 <dif_uart_bytes_send+0x2a>
uart_tx_full():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:21
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001d98:	00052803          	lw	a6,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001d9c:	01082703          	lw	a4,16(a6)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20001da0:	8b05                	andi	a4,a4,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001da2:	eb19                	bnez	a4,20001db8 <dif_uart_bytes_send+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:114
    uart_tx_fifo_write(uart, data[bytes_written]);
20001da4:	00f58733          	add	a4,a1,a5
20001da8:	00074703          	lbu	a4,0(a4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:115
    ++bytes_written;
20001dac:	0785                	addi	a5,a5,1
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001dae:	00e82c23          	sw	a4,24(a6)
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001db2:	fef613e3          	bne	a2,a5,20001d98 <dif_uart_bytes_send+0xa>
20001db6:	87b2                	mv	a5,a2
20001db8:	4701                	li	a4,0
dif_uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:410
    return kDifUartBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
20001dba:	c291                	beqz	a3,20001dbe <dif_uart_bytes_send+0x30>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:411
    *bytes_written = res;
20001dbc:	c29c                	sw	a5,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:415
  }

  return kDifUartOk;
}
20001dbe:	853a                	mv	a0,a4
20001dc0:	8082                	ret

20001dc2 <dif_uart_bytes_receive>:
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:419

dif_uart_result_t dif_uart_bytes_receive(const dif_uart_t *uart,
                                         size_t bytes_requested, uint8_t *data,
                                         size_t *bytes_read) {
20001dc2:	4709                	li	a4,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:420
  if (uart == NULL || data == NULL) {
20001dc4:	c515                	beqz	a0,20001df0 <dif_uart_bytes_receive+0x2e>
20001dc6:	c60d                	beqz	a2,20001df0 <dif_uart_bytes_receive+0x2e>
20001dc8:	4801                	li	a6,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001dca:	cd99                	beqz	a1,20001de8 <dif_uart_bytes_receive+0x26>
uart_rx_empty():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:33
      mmio_region_read32(uart->params.base_addr, UART_STATUS_REG_OFFSET);
20001dcc:	4118                	lw	a4,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001dce:	4b1c                	lw	a5,16(a4)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001dd0:	0207f793          	andi	a5,a5,32
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001dd4:	eb91                	bnez	a5,20001de8 <dif_uart_bytes_receive+0x26>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001dd6:	4b58                	lw	a4,20(a4)
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001dd8:	010607b3          	add	a5,a2,a6
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:129
    ++bytes_read;
20001ddc:	0805                	addi	a6,a6,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001dde:	00e78023          	sb	a4,0(a5)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001de2:	ff0595e3          	bne	a1,a6,20001dcc <dif_uart_bytes_receive+0xa>
20001de6:	882e                	mv	a6,a1
20001de8:	4701                	li	a4,0
dif_uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:426
    return kDifUartBadArg;
  }

  // `bytes_read` is an optional parameter.
  size_t res = uart_bytes_receive(uart, bytes_requested, data);
  if (bytes_read != NULL) {
20001dea:	c299                	beqz	a3,20001df0 <dif_uart_bytes_receive+0x2e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:427
    *bytes_read = res;
20001dec:	0106a023          	sw	a6,0(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:431
  }

  return kDifUartOk;
}
20001df0:	853a                	mv	a0,a4
20001df2:	8082                	ret

20001df4 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:435

dif_uart_result_t dif_uart_byte_send_polled(const dif_uart_t *uart,
                                            uint8_t byte) {
  if (uart == NULL) {
20001df4:	cd19                	beqz	a0,20001e12 <dif_uart_byte_send_polled+0x1e>
20001df6:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001df8:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001dfa:	8a85                	andi	a3,a3,1
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:440
    return kDifUartBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
20001dfc:	fef5                	bnez	a3,20001df8 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001dfe:	4a14                	lw	a3,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001e00:	8a85                	andi	a3,a3,1
uart_bytes_send():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:113
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20001e02:	e299                	bnez	a3,20001e08 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001e04:	ce0c                	sw	a1,24(a2)
20001e06:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001e08:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001e0a:	8921                	andi	a0,a0,8
dif_uart_byte_send_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:447

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
20001e0c:	dd75                	beqz	a0,20001e08 <dif_uart_byte_send_polled+0x14>
20001e0e:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:451
  }

  return kDifUartOk;
}
20001e10:	8082                	ret
20001e12:	4509                	li	a0,2
20001e14:	8082                	ret

20001e16 <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:454

dif_uart_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                               uint8_t *byte) {
20001e16:	862a                	mv	a2,a0
20001e18:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:455
  if (uart == NULL || byte == NULL) {
20001e1a:	c205                	beqz	a2,20001e3a <dif_uart_byte_receive_polled+0x24>
20001e1c:	cd99                	beqz	a1,20001e3a <dif_uart_byte_receive_polled+0x24>
20001e1e:	4210                	lw	a2,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e20:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001e22:	02057513          	andi	a0,a0,32
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:460
    return kDifUartBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
20001e26:	fd6d                	bnez	a0,20001e20 <dif_uart_byte_receive_polled+0xa>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e28:	4a08                	lw	a0,16(a2)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
20001e2a:	02057693          	andi	a3,a0,32
20001e2e:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:127
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
20001e30:	e689                	bnez	a3,20001e3a <dif_uart_byte_receive_polled+0x24>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e32:	4a50                	lw	a2,20(a2)
20001e34:	4501                	li	a0,0
uart_bytes_receive():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:128
    data[bytes_read] = uart_rx_fifo_read(uart);
20001e36:	00c58023          	sb	a2,0(a1)
dif_uart_byte_receive_polled():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:466
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifUartOk;
}
20001e3a:	8082                	ret

20001e3c <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:469

dif_uart_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001e3c:	862a                	mv	a2,a0
20001e3e:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:470
  if (uart == NULL || num_bytes == NULL) {
20001e40:	ca09                	beqz	a2,20001e52 <dif_uart_rx_bytes_available+0x16>
20001e42:	c981                	beqz	a1,20001e52 <dif_uart_rx_bytes_available+0x16>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:476
    return kDifUartBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001e44:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e46:	5110                	lw	a2,32(a0)
20001e48:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001e4a:	8241                	srli	a2,a2,0x10
20001e4c:	03f67613          	andi	a2,a2,63
dif_uart_rx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:477
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20001e50:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:480

  return kDifUartOk;
}
20001e52:	8082                	ret

20001e54 <dif_uart_tx_bytes_available>:
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:483

dif_uart_result_t dif_uart_tx_bytes_available(const dif_uart_t *uart,
                                              size_t *num_bytes) {
20001e54:	862a                	mv	a2,a0
20001e56:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:484
  if (uart == NULL || num_bytes == NULL) {
20001e58:	ce01                	beqz	a2,20001e70 <dif_uart_tx_bytes_available+0x1c>
20001e5a:	c999                	beqz	a1,20001e70 <dif_uart_tx_bytes_available+0x1c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:490
    return kDifUartBadArg;
  }

  // TX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_STATUS_REG_OFFSET);
20001e5c:	4208                	lw	a0,0(a2)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e5e:	5110                	lw	a2,32(a0)
20001e60:	4501                	li	a0,0
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20001e62:	03f67613          	andi	a2,a2,63
20001e66:	02000693          	li	a3,32
dif_uart_tx_bytes_available():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:493
  uint32_t fill_bytes =
      bitfield_field32_read(reg, UART_FIFO_STATUS_TXLVL_FIELD);
  *num_bytes = kDifUartFifoSizeBytes - fill_bytes;
20001e6a:	40c68633          	sub	a2,a3,a2
20001e6e:	c190                	sw	a2,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:496

  return kDifUartOk;
}
20001e70:	8082                	ret

20001e72 <dif_uart_fifo_reset>:
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:500

dif_uart_result_t dif_uart_fifo_reset(const dif_uart_t *uart,
                                      dif_uart_fifo_reset_t reset) {
  if (uart == NULL) {
20001e72:	c11d                	beqz	a0,20001e98 <dif_uart_fifo_reset+0x26>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:505
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET);
20001e74:	4110                	lw	a2,0(a0)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
20001e76:	4e48                	lw	a0,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507

  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001e78:	ffd5f693          	andi	a3,a1,-3
20001e7c:	0016b693          	seqz	a3,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
    reg = bitfield_bit32_write(reg, UART_FIFO_CTRL_RXRST_BIT, true);
  }

  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001e80:	fff58713          	addi	a4,a1,-1
20001e84:	4789                	li	a5,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:507
  if (reset == kDifUartFifoResetRx || reset == kDifUartFifoResetAll) {
20001e86:	00d565b3          	or	a1,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:511
  if (reset == kDifUartFifoResetTx || reset == kDifUartFifoResetAll) {
20001e8a:	00f77463          	bgeu	a4,a5,20001e92 <dif_uart_fifo_reset+0x20>
20001e8e:	0025e593          	ori	a1,a1,2
20001e92:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001e94:	ce4c                	sw	a1,28(a2)
dif_uart_fifo_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:518
  }

  mmio_region_write32(uart->params.base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001e96:	8082                	ret
20001e98:	4509                	li	a0,2
20001e9a:	8082                	ret

20001e9c <dif_uart_loopback_set>:
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:523

dif_uart_result_t dif_uart_loopback_set(const dif_uart_t *uart,
                                        dif_uart_loopback_t loopback,
                                        dif_uart_toggle_t enable) {
  if (uart == NULL) {
20001e9c:	c515                	beqz	a0,20001ec8 <dif_uart_loopback_set+0x2c>
20001e9e:	4681                	li	a3,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:529
    return kDifUartBadArg;
  }

  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_CTRL_REG_OFFSET);
20001ea0:	4108                	lw	a0,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:527
  uint32_t index = loopback ? UART_CTRL_LLPBK_BIT : UART_CTRL_SLPBK_BIT;
20001ea2:	0015b593          	seqz	a1,a1
20001ea6:	4715                	li	a4,5
20001ea8:	40b705b3          	sub	a1,a4,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001eac:	4558                	lw	a4,12(a0)
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:530
  reg = bitfield_bit32_write(reg, index, enable == kDifUartToggleEnabled);
20001eae:	00163613          	seqz	a2,a2
20001eb2:	4785                	li	a5,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20001eb4:	00b797b3          	sll	a5,a5,a1
20001eb8:	fff7c793          	not	a5,a5
20001ebc:	8f7d                	and	a4,a4,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20001ebe:	00b615b3          	sll	a1,a2,a1
20001ec2:	8dd9                	or	a1,a1,a4
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001ec4:	c54c                	sw	a1,12(a0)
20001ec6:	a011                	j	20001eca <dif_uart_loopback_set+0x2e>
20001ec8:	4689                	li	a3,2
dif_uart_loopback_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:534
  mmio_region_write32(uart->params.base_addr, UART_CTRL_REG_OFFSET, reg);

  return kDifUartOk;
}
20001eca:	8536                	mv	a0,a3
20001ecc:	8082                	ret

20001ece <dif_uart_enable_rx_timeout>:
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:537

dif_uart_result_t dif_uart_enable_rx_timeout(const dif_uart_t *uart,
                                             uint32_t duration_ticks) {
20001ece:	862a                	mv	a2,a0
20001ed0:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:538
  if (uart == NULL || (duration_ticks & ~UART_TIMEOUT_CTRL_VAL_MASK) != 0) {
20001ed2:	ca11                	beqz	a2,20001ee6 <dif_uart_enable_rx_timeout+0x18>
20001ed4:	0185d693          	srli	a3,a1,0x18
20001ed8:	e699                	bnez	a3,20001ee6 <dif_uart_enable_rx_timeout+0x18>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:545
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, true);
  reg =
      bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, duration_ticks);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001eda:	4210                	lw	a2,0(a2)
20001edc:	4501                	li	a0,0
20001ede:	800006b7          	lui	a3,0x80000
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20001ee2:	8dd5                	or	a1,a1,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001ee4:	d64c                	sw	a1,44(a2)
dif_uart_enable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:549
                      reg);

  return kDifUartOk;
}
20001ee6:	8082                	ret

20001ee8 <dif_uart_disable_rx_timeout>:
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:552

dif_uart_result_t dif_uart_disable_rx_timeout(const dif_uart_t *uart) {
  if (uart == NULL) {
20001ee8:	c511                	beqz	a0,20001ef4 <dif_uart_disable_rx_timeout+0xc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:558
    return kDifUartBadArg;
  }

  uint32_t reg = bitfield_bit32_write(0, UART_TIMEOUT_CTRL_EN_BIT, false);
  reg = bitfield_field32_write(reg, UART_TIMEOUT_CTRL_VAL_FIELD, 0);
  mmio_region_write32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET,
20001eea:	410c                	lw	a1,0(a0)
20001eec:	4501                	li	a0,0
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001eee:	0205a623          	sw	zero,44(a1)
dif_uart_disable_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:562
                      reg);

  return kDifUartOk;
}
20001ef2:	8082                	ret
20001ef4:	4509                	li	a0,2
20001ef6:	8082                	ret

20001ef8 <dif_uart_get_rx_timeout>:
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:566

dif_uart_result_t dif_uart_get_rx_timeout(const dif_uart_t *uart,
                                          dif_uart_toggle_t *status,
                                          uint32_t *duration_ticks) {
20001ef8:	86aa                	mv	a3,a0
20001efa:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:567
  if (uart == NULL || status == NULL) {
20001efc:	ce99                	beqz	a3,20001f1a <dif_uart_get_rx_timeout+0x22>
20001efe:	cd91                	beqz	a1,20001f1a <dif_uart_get_rx_timeout+0x22>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:572
    return kDifUartBadArg;
  }

  uint32_t reg =
      mmio_region_read32(uart->params.base_addr, UART_TIMEOUT_CTRL_REG_OFFSET);
20001f00:	4288                	lw	a0,0(a3)
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20001f02:	5554                	lw	a3,44(a0)
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:573
  *status = bitfield_bit32_read(reg, UART_TIMEOUT_CTRL_EN_BIT)
20001f04:	fff6c513          	not	a0,a3
20001f08:	817d                	srli	a0,a0,0x1f
20001f0a:	c188                	sw	a0,0(a1)
20001f0c:	4501                	li	a0,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:577
                ? kDifUartToggleEnabled
                : kDifUartToggleDisabled;

  if (duration_ticks != NULL) {
20001f0e:	c611                	beqz	a2,20001f1a <dif_uart_get_rx_timeout+0x22>
20001f10:	010005b7          	lui	a1,0x1000
20001f14:	15fd                	addi	a1,a1,-1
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
  return (bitfield >> field.index) & field.mask;
20001f16:	8df5                	and	a1,a1,a3
dif_uart_get_rx_timeout():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:578
    *duration_ticks = bitfield_field32_read(reg, UART_TIMEOUT_CTRL_VAL_FIELD);
20001f18:	c20c                	sw	a1,0(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/dif/dif_uart.c:582
  }

  return kDifUartOk;
}
20001f1a:	8082                	ret

20001f1c <pinmux_init>:
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:29
    reg_value++;
    reg_offset += 4;
  }
}

void pinmux_init(void) {
20001f1c:	4509                	li	a0,2
20001f1e:	404605b7          	lui	a1,0x40460
20001f22:	0dc58593          	addi	a1,a1,220 # 404600dc <_data_init_start+0x2045c168>
20001f26:	02200613          	li	a2,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20001f2a:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
20001f2c:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
20001f2e:	0591                	addi	a1,a1,4
20001f30:	fec51de3          	bne	a0,a2,20001f2a <pinmux_init+0xe>
20001f34:	450d                	li	a0,3
20001f36:	404605b7          	lui	a1,0x40460
20001f3a:	27458593          	addi	a1,a1,628 # 40460274 <_data_init_start+0x2045c300>
20001f3e:	02300613          	li	a2,35
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f42:	c188                	sw	a0,0(a1)
init_gpio_regs():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:24
    reg_value++;
20001f44:	0505                	addi	a0,a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:22
  for (uint32_t i = 0; i < NUM_GPIO; ++i) {
20001f46:	0591                	addi	a1,a1,4
20001f48:	fec51de3          	bne	a0,a2,20001f42 <pinmux_init+0x26>
20001f4c:	40460537          	lui	a0,0x40460
20001f50:	02200593          	li	a1,34
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20001f54:	18b52223          	sw	a1,388(a0) # 40460184 <_data_init_start+0x2045c210>
20001f58:	02d00593          	li	a1,45
20001f5c:	2eb52c23          	sw	a1,760(a0)
pinmux_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/pinmux.c:63
  // We've got one insel configuration field per register. Hence, we have to
  // convert the enumeration index into a byte address using << 2.
  reg_offset = kTopEarlgreyPinmuxMioOutIoc11 << 2;
  mask = PINMUX_MIO_OUTSEL_0_OUT_0_MASK;
  mmio_region_write32(reg32, reg_offset, reg_value & mask);
}
20001f60:	8082                	ret
	...

20001f64 <ctrl_reset>:
ctrl_reset():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:239
}

// Callback for the USB link reset
void ctrl_reset(void *ctctx_v) {
  usb_controlep_ctx_t *ctctx = (usb_controlep_ctx_t *)ctctx_v;
  ctctx->ctrlstate = kCtIdle;
20001f64:	00052423          	sw	zero,8(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:240
}
20001f68:	8082                	ret

20001f6a <usb_controlep_init>:
usb_controlep_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:243

void usb_controlep_init(usb_controlep_ctx_t *ctctx, usbdev_ctx_t *ctx, int ep,
                        const uint8_t *cfg_dscr, size_t cfg_dscr_len) {
20001f6a:	1141                	addi	sp,sp,-16
20001f6c:	c606                	sw	ra,12(sp)
20001f6e:	c422                	sw	s0,8(sp)
20001f70:	c226                	sw	s1,4(sp)
20001f72:	c04a                	sw	s2,0(sp)
20001f74:	893a                	mv	s2,a4
20001f76:	84b6                	mv	s1,a3
20001f78:	86b2                	mv	a3,a2
20001f7a:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:244
  ctctx->ctx = ctx;
20001f7c:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:245
  usbdev_endpoint_setup(ctx, ep, 1, ctctx, ctrl_tx_done, ctrl_rx, NULL,
20001f7e:	00000717          	auipc	a4,0x0
20001f82:	03a70713          	addi	a4,a4,58 # 20001fb8 <ctrl_tx_done>
20001f86:	00000797          	auipc	a5,0x0
20001f8a:	06478793          	addi	a5,a5,100 # 20001fea <ctrl_rx>
20001f8e:	00000897          	auipc	a7,0x0
20001f92:	fd688893          	addi	a7,a7,-42 # 20001f64 <ctrl_reset>
20001f96:	4605                	li	a2,1
20001f98:	852e                	mv	a0,a1
20001f9a:	85b6                	mv	a1,a3
20001f9c:	86a2                	mv	a3,s0
20001f9e:	4801                	li	a6,0
20001fa0:	2da1                	jal	200025f8 <usbdev_endpoint_setup>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:247
                        ctrl_reset);
  ctctx->ctrlstate = kCtIdle;
20001fa2:	00042423          	sw	zero,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:248
  ctctx->cfg_dscr = cfg_dscr;
20001fa6:	c844                	sw	s1,20(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:249
  ctctx->cfg_dscr_len = cfg_dscr_len;
20001fa8:	01242c23          	sw	s2,24(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:250
}
20001fac:	4902                	lw	s2,0(sp)
20001fae:	4492                	lw	s1,4(sp)
20001fb0:	4422                	lw	s0,8(sp)
20001fb2:	40b2                	lw	ra,12(sp)
20001fb4:	0141                	addi	sp,sp,16
20001fb6:	8082                	ret

20001fb8 <ctrl_tx_done>:
ctrl_tx_done():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:159
static void ctrl_tx_done(void *ctctx_v) {
20001fb8:	1141                	addi	sp,sp,-16
20001fba:	c606                	sw	ra,12(sp)
20001fbc:	c422                	sw	s0,8(sp)
20001fbe:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:163
  switch (ctctx->ctrlstate) {
20001fc0:	4508                	lw	a0,8(a0)
20001fc2:	4585                	li	a1,1
20001fc4:	00b50d63          	beq	a0,a1,20001fde <ctrl_tx_done+0x26>
20001fc8:	4591                	li	a1,4
20001fca:	00b50863          	beq	a0,a1,20001fda <ctrl_tx_done+0x22>
20001fce:	458d                	li	a1,3
20001fd0:	00b51963          	bne	a0,a1,20001fe2 <ctrl_tx_done+0x2a>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:161
  void *ctx = ctctx->ctx;
20001fd4:	4008                	lw	a0,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:166
      usbdev_set_deviceid(ctx, ctctx->new_dev);
20001fd6:	444c                	lw	a1,12(s0)
20001fd8:	2b4d                	jal	2000258a <usbdev_set_deviceid>
20001fda:	4501                	li	a0,0
20001fdc:	a011                	j	20001fe0 <ctrl_tx_done+0x28>
20001fde:	4509                	li	a0,2
20001fe0:	c408                	sw	a0,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:181
}
20001fe2:	4422                	lw	s0,8(sp)
20001fe4:	40b2                	lw	ra,12(sp)
20001fe6:	0141                	addi	sp,sp,16
20001fe8:	8082                	ret

20001fea <ctrl_rx>:
ctrl_rx():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:183
static void ctrl_rx(void *ctctx_v, usbbufid_t buf, int size, int setup) {
20001fea:	7179                	addi	sp,sp,-48
20001fec:	d606                	sw	ra,44(sp)
20001fee:	d422                	sw	s0,40(sp)
20001ff0:	d226                	sw	s1,36(sp)
20001ff2:	d04a                	sw	s2,32(sp)
20001ff4:	ce4e                	sw	s3,28(sp)
20001ff6:	cc52                	sw	s4,24(sp)
20001ff8:	ca56                	sw	s5,20(sp)
20001ffa:	8a2a                	mv	s4,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:185
  void *ctx = ctctx->ctx;
20001ffc:	00052a83          	lw	s5,0(a0)
20002000:	84b6                	mv	s1,a3
20002002:	8432                	mv	s0,a2
20002004:	892e                	mv	s2,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:186
  volatile uint8_t *bp = (volatile uint8_t *)usbdev_buf_idtoaddr(ctx, buf);
20002006:	8556                	mv	a0,s5
20002008:	2685                	jal	20002368 <usbdev_buf_idtoaddr>
2000200a:	04000593          	li	a1,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:187
  if (size > BUF_LENGTH) {
2000200e:	00b44463          	blt	s0,a1,20002016 <ctrl_rx+0x2c>
20002012:	04000413          	li	s0,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:192
  switch (ctctx->ctrlstate) {
20002016:	008a2583          	lw	a1,8(s4)
2000201a:	4609                	li	a2,2
2000201c:	06c58e63          	beq	a1,a2,20002098 <ctrl_rx+0xae>
20002020:	edbd                	bnez	a1,2000209e <ctrl_rx+0xb4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:195
      if (setup && (size == 8)) {
20002022:	ccb5                	beqz	s1,2000209e <ctrl_rx+0xb4>
20002024:	45a1                	li	a1,8
20002026:	06b41c63          	bne	s0,a1,2000209e <ctrl_rx+0xb4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:196
        int bmRequestType = bp[0];
2000202a:	00054803          	lbu	a6,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:197
        int bRequest = bp[1];
2000202e:	00154603          	lbu	a2,1(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:198
        int wValue = (bp[3] << 8) | bp[2];
20002032:	00354783          	lbu	a5,3(a0)
20002036:	00254703          	lbu	a4,2(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:199
        int wIndex = (bp[5] << 8) | bp[4];
2000203a:	00554483          	lbu	s1,5(a0)
2000203e:	00454583          	lbu	a1,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:200
        int wLength = (bp[7] << 8) | bp[6];
20002042:	00754403          	lbu	s0,7(a0)
20002046:	00654503          	lbu	a0,6(a0)
2000204a:	0422                	slli	s0,s0,0x8
2000204c:	469d                	li	a3,7
2000204e:	00a469b3          	or	s3,s0,a0
setup_req():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:40
  switch (bRequest) {
20002052:	06c6c863          	blt	a3,a2,200020c2 <ctrl_rx+0xd8>
20002056:	07a2                	slli	a5,a5,0x8
20002058:	00e7e533          	or	a0,a5,a4
2000205c:	00849693          	slli	a3,s1,0x8
20002060:	4489                	li	s1,2
20002062:	8dd5                	or	a1,a1,a3
20002064:	08c4d263          	bge	s1,a2,200020e8 <ctrl_rx+0xfe>
20002068:	468d                	li	a3,3
2000206a:	0cd60a63          	beq	a2,a3,2000213e <ctrl_rx+0x154>
2000206e:	4515                	li	a0,5
20002070:	0ca60f63          	beq	a2,a0,2000214e <ctrl_rx+0x164>
20002074:	4519                	li	a0,6
20002076:	08a61e63          	bne	a2,a0,20002112 <ctrl_rx+0x128>
2000207a:	20000513          	li	a0,512
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:42
      if ((wValue & 0xff00) == 0x100) {
2000207e:	12a78663          	beq	a5,a0,200021aa <ctrl_rx+0x1c0>
20002082:	10000513          	li	a0,256
20002086:	08a79663          	bne	a5,a0,20002112 <ctrl_rx+0x128>
2000208a:	4549                	li	a0,18
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:45
        if (wLength < len) {
2000208c:	00a9e363          	bltu	s3,a0,20002092 <ctrl_rx+0xa8>
20002090:	49c9                	li	s3,18
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:48
        usbdev_buf_copyto_byid(ctx, buf, dev_dscr, len);
20002092:	83f18613          	addi	a2,gp,-1985 # 1000003f <dev_dscr>
20002096:	aa05                	j	200021c6 <ctrl_rx+0x1dc>
ctrl_rx():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:213
      if (!setup && (size == 0)) {
20002098:	00946533          	or	a0,s0,s1
2000209c:	c519                	beqz	a0,200020aa <ctrl_rx+0xc0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:224
  usbdev_set_ep0_stall(ctx, 1);  // send a STALL, will be cleared by the HW
2000209e:	4585                	li	a1,1
200020a0:	8556                	mv	a0,s5
200020a2:	2381                	jal	200025e2 <usbdev_set_ep0_stall>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:232
  usbdev_buf_free_byid(ctx, buf);
200020a4:	8556                	mv	a0,s5
200020a6:	85ca                	mv	a1,s2
200020a8:	2445                	jal	20002348 <usbdev_buf_free_byid>
200020aa:	4501                	li	a0,0
200020ac:	00aa2423          	sw	a0,8(s4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:234
}
200020b0:	4ad2                	lw	s5,20(sp)
200020b2:	4a62                	lw	s4,24(sp)
200020b4:	49f2                	lw	s3,28(sp)
200020b6:	5902                	lw	s2,32(sp)
200020b8:	5492                	lw	s1,36(sp)
200020ba:	5422                	lw	s0,40(sp)
200020bc:	50b2                	lw	ra,44(sp)
200020be:	6145                	addi	sp,sp,48
200020c0:	8082                	ret
200020c2:	4525                	li	a0,9
setup_req():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:40
  switch (bRequest) {
200020c4:	02c55c63          	bge	a0,a2,200020fc <ctrl_rx+0x112>
200020c8:	4529                	li	a0,10
200020ca:	08a60e63          	beq	a2,a0,20002166 <ctrl_rx+0x17c>
200020ce:	452d                	li	a0,11
200020d0:	0ca60563          	beq	a2,a0,2000219a <ctrl_rx+0x1b0>
200020d4:	4531                	li	a0,12
200020d6:	02a61e63          	bne	a2,a0,20002112 <ctrl_rx+0x128>
200020da:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:143
      zero = 0;
200020dc:	c602                	sw	zero,12(sp)
200020de:	00a9e363          	bltu	s3,a0,200020e4 <ctrl_rx+0xfa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:145
      if (wLength < len) {
200020e2:	4989                	li	s3,2
200020e4:	0070                	addi	a2,sp,12
200020e6:	a0c5                	j	200021c6 <ctrl_rx+0x1dc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:40
  switch (bRequest) {
200020e8:	ca0d                	beqz	a2,2000211a <ctrl_rx+0x130>
200020ea:	4685                	li	a3,1
200020ec:	02d61363          	bne	a2,a3,20002112 <ctrl_rx+0x128>
200020f0:	08d50963          	beq	a0,a3,20002182 <ctrl_rx+0x198>
200020f4:	e15d                	bnez	a0,2000219a <ctrl_rx+0x1b0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:98
        usbdev_halt(ctx, wIndex, 0);
200020f6:	8556                	mv	a0,s5
200020f8:	4601                	li	a2,0
200020fa:	a881                	j	2000214a <ctrl_rx+0x160>
200020fc:	4521                	li	a0,8
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:40
  switch (bRequest) {
200020fe:	02a60b63          	beq	a2,a0,20002134 <ctrl_rx+0x14a>
20002102:	4525                	li	a0,9
20002104:	00a61763          	bne	a2,a0,20002112 <ctrl_rx+0x128>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:73
      usbdev_sendbuf_byid(ctx, buf, 0, ctctx->ep);
20002108:	004a2683          	lw	a3,4(s4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:71
      ctctx->usb_config = wValue;
2000210c:	00ea0823          	sb	a4,16(s4)
20002110:	a079                	j	2000219e <ctrl_rx+0x1b4>
20002112:	4515                	li	a0,5
ctrl_rx():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:203
        ctctx->ctrlstate = setup_req(ctctx, ctx, buf, bmRequestType, bRequest,
20002114:	00aa2423          	sw	a0,8(s4)
20002118:	b759                	j	2000209e <ctrl_rx+0xb4>
setup_req():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:108
      type = bmRequestType & kUsbReqTypeRecipientMask;
2000211a:	01f87513          	andi	a0,a6,31
2000211e:	4609                	li	a2,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:109
      if (type == kUsbReqTypeDevice) {
20002120:	06c50463          	beq	a0,a2,20002188 <ctrl_rx+0x19e>
20002124:	e959                	bnez	a0,200021ba <ctrl_rx+0x1d0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:110
        stat = (usbdev_can_rem_wake(ctx) ? kUsbStatusRemWake : 0) |
20002126:	8556                	mv	a0,s5
20002128:	21f1                	jal	200025f4 <usbdev_can_rem_wake>
2000212a:	4585                	li	a1,1
2000212c:	c111                	beqz	a0,20002130 <ctrl_rx+0x146>
2000212e:	458d                	li	a1,3
20002130:	c82e                	sw	a1,16(sp)
20002132:	a069                	j	200021bc <ctrl_rx+0x1d2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:78
      if (wLength < len) {
20002134:	01303433          	snez	s0,s3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:82
      usbdev_buf_copyto_byid(ctx, buf, &ctctx->usb_config, len);
20002138:	010a0613          	addi	a2,s4,16
2000213c:	a80d                	j	2000216e <ctrl_rx+0x184>
2000213e:	4605                	li	a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:87
      if (wValue == kUsbFeatureEndpointHalt) {
20002140:	04c50b63          	beq	a0,a2,20002196 <ctrl_rx+0x1ac>
20002144:	e939                	bnez	a0,2000219a <ctrl_rx+0x1b0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:88
        usbdev_halt(ctx, wIndex, 1);
20002146:	4605                	li	a2,1
20002148:	8556                	mv	a0,s5
2000214a:	2981                	jal	2000259a <usbdev_halt>
2000214c:	a0b9                	j	2000219a <ctrl_rx+0x1b0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:66
      usbdev_sendbuf_byid(ctx, buf, 0, ctctx->ep);
2000214e:	004a2683          	lw	a3,4(s4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:64
      ctctx->new_dev = wValue & 0x7f;
20002152:	07f77513          	andi	a0,a4,127
20002156:	00aa2623          	sw	a0,12(s4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:66
      usbdev_sendbuf_byid(ctx, buf, 0, ctctx->ep);
2000215a:	8556                	mv	a0,s5
2000215c:	85ca                	mv	a1,s2
2000215e:	4601                	li	a2,0
20002160:	2499                	jal	200023a6 <usbdev_sendbuf_byid>
20002162:	450d                	li	a0,3
20002164:	b7a1                	j	200020ac <ctrl_rx+0xc2>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:132
      zero = 0;
20002166:	c602                	sw	zero,12(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:134
      if (wLength < len) {
20002168:	01303433          	snez	s0,s3
2000216c:	0070                	addi	a2,sp,12
2000216e:	8556                	mv	a0,s5
20002170:	85ca                	mv	a1,s2
20002172:	86a2                	mv	a3,s0
20002174:	2411                	jal	20002378 <usbdev_buf_copyto_byid>
20002176:	004a2683          	lw	a3,4(s4)
2000217a:	8556                	mv	a0,s5
2000217c:	85ca                	mv	a1,s2
2000217e:	8622                	mv	a2,s0
20002180:	a8a1                	j	200021d8 <ctrl_rx+0x1ee>
usbdev_rem_wake_en():
/home/gl/work/opentitan/repo/sw/device/lib/usbdev.h:197
 *
 * @param ctx usbdev context pointer
 * @param enable set/clear
 */
inline void usbdev_rem_wake_en(usbdev_ctx_t *ctx, int enable) {
  ctx->can_wake = (enable) ? 1 : 0;
20002182:	000aa023          	sw	zero,0(s5)
20002186:	a811                	j	2000219a <ctrl_rx+0x1b0>
usbdev_halted():
/home/gl/work/opentitan/repo/sw/device/lib/usbdev.h:160
  return (ctx->halted >> endpoint) & 0x1;
20002188:	024aa503          	lw	a0,36(s5)
setup_req():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:113
        stat = usbdev_halted(ctx, wIndex) ? kUsbStatusHalted : 0;
2000218c:	00b55533          	srl	a0,a0,a1
20002190:	8905                	andi	a0,a0,1
20002192:	c82a                	sw	a0,16(sp)
20002194:	a025                	j	200021bc <ctrl_rx+0x1d2>
usbdev_rem_wake_en():
/home/gl/work/opentitan/repo/sw/device/lib/usbdev.h:197
  ctx->can_wake = (enable) ? 1 : 0;
20002196:	00caa023          	sw	a2,0(s5)
2000219a:	004a2683          	lw	a3,4(s4)
2000219e:	8556                	mv	a0,s5
200021a0:	85ca                	mv	a1,s2
200021a2:	4601                	li	a2,0
200021a4:	2409                	jal	200023a6 <usbdev_sendbuf_byid>
200021a6:	4511                	li	a0,4
200021a8:	b711                	j	200020ac <ctrl_rx+0xc2>
setup_req():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:53
        len = ctctx->cfg_dscr_len;
200021aa:	018a2503          	lw	a0,24(s4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:54
        if (wLength < len) {
200021ae:	00a9e363          	bltu	s3,a0,200021b4 <ctrl_rx+0x1ca>
200021b2:	89aa                	mv	s3,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:57
        usbdev_buf_copyto_byid(ctx, buf, ctctx->cfg_dscr, len);
200021b4:	014a2603          	lw	a2,20(s4)
200021b8:	a039                	j	200021c6 <ctrl_rx+0x1dc>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:115
        stat = 0;
200021ba:	c802                	sw	zero,16(sp)
200021bc:	4509                	li	a0,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_controlep.c:117
      if (wLength < len) {
200021be:	00a9e363          	bltu	s3,a0,200021c4 <ctrl_rx+0x1da>
200021c2:	4989                	li	s3,2
200021c4:	0810                	addi	a2,sp,16
200021c6:	8556                	mv	a0,s5
200021c8:	85ca                	mv	a1,s2
200021ca:	86ce                	mv	a3,s3
200021cc:	2275                	jal	20002378 <usbdev_buf_copyto_byid>
200021ce:	004a2683          	lw	a3,4(s4)
200021d2:	8556                	mv	a0,s5
200021d4:	85ca                	mv	a1,s2
200021d6:	864e                	mv	a2,s3
200021d8:	22f9                	jal	200023a6 <usbdev_sendbuf_byid>
200021da:	4505                	li	a0,1
200021dc:	bdc1                	j	200020ac <ctrl_rx+0xc2>
	...

200021e0 <usb_simpleserial_send_byte>:
usb_simpleserial_send_byte():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:45
  usbdev_sendbuf_byid(ctx, ssctx->cur_buf, ssctx->cur_cpos, ssctx->ep);
  ssctx->cur_buf = -1;  // given it to the hardware
}

// Simple send byte will gather data for a while and send
void usb_simpleserial_send_byte(usb_ss_ctx_t *ssctx, uint8_t c) {
200021e0:	1141                	addi	sp,sp,-16
200021e2:	c606                	sw	ra,12(sp)
200021e4:	c422                	sw	s0,8(sp)
200021e6:	c226                	sw	s1,4(sp)
200021e8:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:47
  volatile uint32_t *bp_w;
  if (ssctx->cur_buf == -1) {
200021ea:	4510                	lw	a2,8(a0)
200021ec:	557d                	li	a0,-1
200021ee:	84ae                	mv	s1,a1
200021f0:	00a61863          	bne	a2,a0,20002200 <usb_simpleserial_send_byte+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:48
    ssctx->cur_buf = usbdev_buf_allocate_byid(ssctx->ctx);
200021f4:	4008                	lw	a0,0(s0)
200021f6:	2a2d                	jal	20002330 <usbdev_buf_allocate_byid>
200021f8:	862a                	mv	a2,a0
200021fa:	c408                	sw	a0,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:49
    ssctx->cur_cpos = 0;
200021fc:	00042623          	sw	zero,12(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:52
  }
  // Abort if completely out of buffers and allocation returned -1
  if (ssctx->cur_buf < 0) {
20002200:	04064363          	bltz	a2,20002246 <usb_simpleserial_send_byte+0x66>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:55
    return;
  }
  ssctx->chold.data_b[ssctx->cur_cpos++ & 0x3] = c;
20002204:	4448                	lw	a0,12(s0)
20002206:	00357593          	andi	a1,a0,3
2000220a:	95a2                	add	a1,a1,s0
2000220c:	0505                	addi	a0,a0,1
2000220e:	c448                	sw	a0,12(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:56
  if ((ssctx->cur_cpos & 0x3) == 0) {
20002210:	890d                	andi	a0,a0,3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:55
  ssctx->chold.data_b[ssctx->cur_cpos++ & 0x3] = c;
20002212:	00958823          	sb	s1,16(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:56
  if ((ssctx->cur_cpos & 0x3) == 0) {
20002216:	e905                	bnez	a0,20002246 <usb_simpleserial_send_byte+0x66>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:58
    // just wrote last byte in word
    bp_w = usbdev_buf_idtoaddr(ssctx->ctx, ssctx->cur_buf);
20002218:	4008                	lw	a0,0(s0)
2000221a:	85b2                	mv	a1,a2
2000221c:	22b1                	jal	20002368 <usbdev_buf_idtoaddr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:60
    // -1 here because cpos already incremented to next word
    bp_w[(ssctx->cur_cpos / 4) - 1] = ssctx->chold.data_w;
2000221e:	444c                	lw	a1,12(s0)
20002220:	4810                	lw	a2,16(s0)
20002222:	41f5d693          	srai	a3,a1,0x1f
20002226:	82f9                	srli	a3,a3,0x1e
20002228:	95b6                	add	a1,a1,a3
2000222a:	99f1                	andi	a1,a1,-4
2000222c:	952e                	add	a0,a0,a1
2000222e:	fec52e23          	sw	a2,-4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:61
    if (ssctx->cur_cpos >= MAX_GATHER) {
20002232:	4450                	lw	a2,12(s0)
20002234:	4541                	li	a0,16
20002236:	00a64863          	blt	a2,a0,20002246 <usb_simpleserial_send_byte+0x66>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:62
      usbdev_sendbuf_byid(ssctx->ctx, ssctx->cur_buf, ssctx->cur_cpos,
2000223a:	4008                	lw	a0,0(s0)
2000223c:	440c                	lw	a1,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:63
                          ssctx->ep);
2000223e:	4054                	lw	a3,4(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:62
      usbdev_sendbuf_byid(ssctx->ctx, ssctx->cur_buf, ssctx->cur_cpos,
20002240:	229d                	jal	200023a6 <usbdev_sendbuf_byid>
20002242:	557d                	li	a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:64
      ssctx->cur_buf = -1;  // given it to the hardware
20002244:	c408                	sw	a0,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:67
    }
  }
}
20002246:	4492                	lw	s1,4(sp)
20002248:	4422                	lw	s0,8(sp)
2000224a:	40b2                	lw	ra,12(sp)
2000224c:	0141                	addi	sp,sp,16
2000224e:	8082                	ret

20002250 <usb_simpleserial_init>:
usb_simpleserial_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:70

void usb_simpleserial_init(usb_ss_ctx_t *ssctx, usbdev_ctx_t *ctx, int ep,
                           void (*got_byte)(uint8_t)) {
20002250:	1101                	addi	sp,sp,-32
20002252:	ce06                	sw	ra,28(sp)
20002254:	cc22                	sw	s0,24(sp)
20002256:	ca26                	sw	s1,20(sp)
20002258:	c84a                	sw	s2,16(sp)
2000225a:	c64e                	sw	s3,12(sp)
2000225c:	8936                	mv	s2,a3
2000225e:	89b2                	mv	s3,a2
20002260:	842e                	mv	s0,a1
20002262:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:71
  usbdev_endpoint_setup(ctx, ep, 1, ssctx, NULL, ss_rx, ss_flush, NULL);
20002264:	00000797          	auipc	a5,0x0
20002268:	03a78793          	addi	a5,a5,58 # 2000229e <ss_rx>
2000226c:	00000817          	auipc	a6,0x0
20002270:	07480813          	addi	a6,a6,116 # 200022e0 <ss_flush>
20002274:	4605                	li	a2,1
20002276:	852e                	mv	a0,a1
20002278:	85ce                	mv	a1,s3
2000227a:	86a6                	mv	a3,s1
2000227c:	4701                	li	a4,0
2000227e:	4881                	li	a7,0
20002280:	2ea5                	jal	200025f8 <usbdev_endpoint_setup>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:72
  ssctx->ctx = ctx;
20002282:	c080                	sw	s0,0(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:73
  ssctx->ep = ep;
20002284:	0134a223          	sw	s3,4(s1) # 10004 <_dv_log_offset+0x4>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:74
  ssctx->got_byte = got_byte;
20002288:	0124aa23          	sw	s2,20(s1)
2000228c:	557d                	li	a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:75
  ssctx->cur_buf = -1;
2000228e:	c488                	sw	a0,8(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:76
}
20002290:	49b2                	lw	s3,12(sp)
20002292:	4942                	lw	s2,16(sp)
20002294:	44d2                	lw	s1,20(sp)
20002296:	4462                	lw	s0,24(sp)
20002298:	40f2                	lw	ra,28(sp)
2000229a:	6105                	addi	sp,sp,32
2000229c:	8082                	ret

2000229e <ss_rx>:
ss_rx():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:11
static void ss_rx(void *ssctx_v, usbbufid_t buf, int size, int setup) {
2000229e:	1141                	addi	sp,sp,-16
200022a0:	c606                	sw	ra,12(sp)
200022a2:	c422                	sw	s0,8(sp)
200022a4:	c226                	sw	s1,4(sp)
200022a6:	c04a                	sw	s2,0(sp)
200022a8:	892a                	mv	s2,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:13
  void *ctx = ssctx->ctx;
200022aa:	4108                	lw	a0,0(a0)
200022ac:	84b2                	mv	s1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:14
  volatile uint8_t *bp = (volatile uint8_t *)usbdev_buf_idtoaddr(ctx, buf);
200022ae:	286d                	jal	20002368 <usbdev_buf_idtoaddr>
200022b0:	04000593          	li	a1,64
200022b4:	00b4c463          	blt	s1,a1,200022bc <ss_rx+0x1e>
200022b8:	04000493          	li	s1,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:20
  while (size--) {
200022bc:	cc81                	beqz	s1,200022d4 <ss_rx+0x36>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:21
    ssctx->got_byte(*bp++);
200022be:	01492603          	lw	a2,20(s2)
200022c2:	00054583          	lbu	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:20
  while (size--) {
200022c6:	14fd                	addi	s1,s1,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:21
    ssctx->got_byte(*bp++);
200022c8:	00150413          	addi	s0,a0,1
200022cc:	852e                	mv	a0,a1
200022ce:	9602                	jalr	a2
200022d0:	8522                	mv	a0,s0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:20
  while (size--) {
200022d2:	f4f5                	bnez	s1,200022be <ss_rx+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:23
}
200022d4:	4902                	lw	s2,0(sp)
200022d6:	4492                	lw	s1,4(sp)
200022d8:	4422                	lw	s0,8(sp)
200022da:	40b2                	lw	ra,12(sp)
200022dc:	0141                	addi	sp,sp,16
200022de:	8082                	ret

200022e0 <ss_flush>:
ss_flush():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:27
static void ss_flush(void *ssctx_v) {
200022e0:	1141                	addi	sp,sp,-16
200022e2:	c606                	sw	ra,12(sp)
200022e4:	c422                	sw	s0,8(sp)
200022e6:	c226                	sw	s1,4(sp)
200022e8:	842a                	mv	s0,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:31
  if ((ssctx->cur_buf == -1) || (ssctx->cur_cpos <= 0)) {
200022ea:	450c                	lw	a1,8(a0)
200022ec:	557d                	li	a0,-1
200022ee:	02a58c63          	beq	a1,a0,20002326 <ss_flush+0x46>
200022f2:	4450                	lw	a2,12(s0)
200022f4:	4505                	li	a0,1
200022f6:	02a64863          	blt	a2,a0,20002326 <ss_flush+0x46>
200022fa:	4004                	lw	s1,0(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:34
  if ((ssctx->cur_cpos & 0x3) != 0) {
200022fc:	00367513          	andi	a0,a2,3
20002300:	cd11                	beqz	a0,2000231c <ss_flush+0x3c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:36
    bp_w = usbdev_buf_idtoaddr(ctx, ssctx->cur_buf);
20002302:	8526                	mv	a0,s1
20002304:	2095                	jal	20002368 <usbdev_buf_idtoaddr>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:38
    bp_w[(ssctx->cur_cpos / 4)] = ssctx->chold.data_w;
20002306:	444c                	lw	a1,12(s0)
20002308:	4810                	lw	a2,16(s0)
2000230a:	41f5d693          	srai	a3,a1,0x1f
2000230e:	82f9                	srli	a3,a3,0x1e
20002310:	95b6                	add	a1,a1,a3
20002312:	99f1                	andi	a1,a1,-4
20002314:	952e                	add	a0,a0,a1
20002316:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:40
  usbdev_sendbuf_byid(ctx, ssctx->cur_buf, ssctx->cur_cpos, ssctx->ep);
20002318:	440c                	lw	a1,8(s0)
2000231a:	4450                	lw	a2,12(s0)
2000231c:	4054                	lw	a3,4(s0)
2000231e:	8526                	mv	a0,s1
20002320:	2059                	jal	200023a6 <usbdev_sendbuf_byid>
20002322:	557d                	li	a0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:41
  ssctx->cur_buf = -1;  // given it to the hardware
20002324:	c408                	sw	a0,8(s0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usb_simpleserial.c:42
}
20002326:	4492                	lw	s1,4(sp)
20002328:	4422                	lw	s0,8(sp)
2000232a:	40b2                	lw	ra,12(sp)
2000232c:	0141                	addi	sp,sp,16
2000232e:	8082                	ret

20002330 <usbdev_buf_allocate_byid>:
usbdev_buf_allocate_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:31
  ctx->nfree = NUM_BUFS;
}

// Allocating a buffer just pops next ID from the stack
usbbufid_t usbdev_buf_allocate_byid(usbdev_ctx_t *ctx) {
  if (ctx->nfree <= 0) {
20002330:	550c                	lw	a1,40(a0)
20002332:	4605                	li	a2,1
20002334:	00c5c863          	blt	a1,a2,20002344 <usbdev_buf_allocate_byid+0x14>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:34
    return -1;
  }
  return ctx->freebuf[--ctx->nfree];
20002338:	15fd                	addi	a1,a1,-1
2000233a:	d50c                	sw	a1,40(a0)
2000233c:	952e                	add	a0,a0,a1
2000233e:	00454503          	lbu	a0,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:35
}
20002342:	8082                	ret
20002344:	557d                	li	a0,-1
20002346:	8082                	ret

20002348 <usbdev_buf_free_byid>:
usbdev_buf_free_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:38

// Freeing a buffer just pushes the ID back on the stack
int usbdev_buf_free_byid(usbdev_ctx_t *ctx, usbbufid_t buf) {
20002348:	477d                	li	a4,31
2000234a:	567d                	li	a2,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:39
  if ((ctx->nfree >= NUM_BUFS) || (buf >= NUM_BUFS)) {
2000234c:	00b74c63          	blt	a4,a1,20002364 <usbdev_buf_free_byid+0x1c>
20002350:	5514                	lw	a3,40(a0)
20002352:	00d74963          	blt	a4,a3,20002364 <usbdev_buf_free_byid+0x1c>
20002356:	4601                	li	a2,0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:42
    return -1;
  }
  ctx->freebuf[ctx->nfree++] = buf;
20002358:	00168713          	addi	a4,a3,1 # 80000001 <_data_init_start+0x5fffc08d>
2000235c:	d518                	sw	a4,40(a0)
2000235e:	9536                	add	a0,a0,a3
20002360:	00b50223          	sb	a1,4(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:44
  return 0;
}
20002364:	8532                	mv	a0,a2
20002366:	8082                	ret

20002368 <usbdev_buf_idtoaddr>:
usbdev_buf_idtoaddr():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:48

uint32_t *usbdev_buf_idtoaddr(usbdev_ctx_t *ctx, usbbufid_t buf) {
  return (uint32_t *)(USBDEV_BASE_ADDR + USBDEV_BUFFER_REG_OFFSET +
                      (buf * BUF_LENGTH));
20002368:	00659513          	slli	a0,a1,0x6
2000236c:	401115b7          	lui	a1,0x40111
20002370:	80058593          	addi	a1,a1,-2048 # 40110800 <_data_init_start+0x2010c88c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:47
  return (uint32_t *)(USBDEV_BASE_ADDR + USBDEV_BUFFER_REG_OFFSET +
20002374:	952e                	add	a0,a0,a1
20002376:	8082                	ret

20002378 <usbdev_buf_copyto_byid>:
usbdev_buf_copyto_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:52
}

void usbdev_buf_copyto_byid(usbdev_ctx_t *ctx, usbbufid_t buf, const void *from,
                            size_t len_bytes) {
20002378:	04000513          	li	a0,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:57
  int32_t *from_word = (int32_t *)from;
  int len_words;
  volatile uint32_t *bp = usbdev_buf_idtoaddr(ctx, buf);

  if (len_bytes > BUF_LENGTH) {
2000237c:	00a6e463          	bltu	a3,a0,20002384 <usbdev_buf_copyto_byid+0xc>
20002380:	04000693          	li	a3,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:62
    len_bytes = BUF_LENGTH;
  }
  // This will round up if len_bytes is not on a multiple of int32_t
  // Always ok to fill the extra bytes since the buffers are aligned
  len_words = (len_bytes + sizeof(int32_t) - 1) / sizeof(int32_t);
20002384:	00368513          	addi	a0,a3,3
20002388:	8109                	srli	a0,a0,0x2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:63
  for (int i = 0; i < len_words; i++) {
2000238a:	cd09                	beqz	a0,200023a4 <usbdev_buf_copyto_byid+0x2c>
2000238c:	401116b7          	lui	a3,0x40111
20002390:	059a                	slli	a1,a1,0x6
20002392:	80068693          	addi	a3,a3,-2048 # 40110800 <_data_init_start+0x2010c88c>
20002396:	95b6                	add	a1,a1,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:64
    bp[i] = from_word[i];
20002398:	4214                	lw	a3,0(a2)
2000239a:	c194                	sw	a3,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:63
  for (int i = 0; i < len_words; i++) {
2000239c:	157d                	addi	a0,a0,-1
2000239e:	0591                	addi	a1,a1,4
200023a0:	0611                	addi	a2,a2,4
200023a2:	f97d                	bnez	a0,20002398 <usbdev_buf_copyto_byid+0x20>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:66
  }
}
200023a4:	8082                	ret

200023a6 <usbdev_sendbuf_byid>:
usbdev_sendbuf_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:82
    REG32(USBDEV_BASE_ADDR + USBDEV_AVBUFFER_REG_OFFSET) = buf;
  }
}

void usbdev_sendbuf_byid(usbdev_ctx_t *ctx, usbbufid_t buf, size_t size,
                         int endpoint) {
200023a6:	457d                	li	a0,31
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:86
  uint32_t configin =
      USBDEV_BASE_ADDR + USBDEV_CONFIGIN_0_REG_OFFSET + (4 * endpoint);

  if ((endpoint >= NUM_ENDPOINTS) || (buf >= NUM_BUFS)) {
200023a8:	02b54863          	blt	a0,a1,200023d8 <usbdev_sendbuf_byid+0x32>
200023ac:	452d                	li	a0,11
200023ae:	02d54563          	blt	a0,a3,200023d8 <usbdev_sendbuf_byid+0x32>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:84
      USBDEV_BASE_ADDR + USBDEV_CONFIGIN_0_REG_OFFSET + (4 * endpoint);
200023b2:	00269513          	slli	a0,a3,0x2
200023b6:	401106b7          	lui	a3,0x40110
200023ba:	02c68693          	addi	a3,a3,44 # 4011002c <_data_init_start+0x2010c0b8>
200023be:	04000713          	li	a4,64
200023c2:	9536                	add	a0,a0,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:90
    return;
  }

  if (size > BUF_LENGTH) {
200023c4:	00e66463          	bltu	a2,a4,200023cc <usbdev_sendbuf_byid+0x26>
200023c8:	04000613          	li	a2,64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:95
    size = BUF_LENGTH;
  }

  REG32(configin) = ((buf << USBDEV_CONFIGIN_0_BUFFER_0_OFFSET) |
                     (size << USBDEV_CONFIGIN_0_SIZE_0_OFFSET) |
200023cc:	0622                	slli	a2,a2,0x8
200023ce:	8dd1                	or	a1,a1,a2
200023d0:	80000637          	lui	a2,0x80000
200023d4:	8dd1                	or	a1,a1,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:94
  REG32(configin) = ((buf << USBDEV_CONFIGIN_0_BUFFER_0_OFFSET) |
200023d6:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:97
                     (1 << USBDEV_CONFIGIN_0_RDY_0_BIT));
}
200023d8:	8082                	ret

200023da <usbdev_poll>:
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:99

void usbdev_poll(usbdev_ctx_t *ctx) {
200023da:	7179                	addi	sp,sp,-48
200023dc:	d606                	sw	ra,44(sp)
200023de:	d422                	sw	s0,40(sp)
200023e0:	d226                	sw	s1,36(sp)
200023e2:	d04a                	sw	s2,32(sp)
200023e4:	ce4e                	sw	s3,28(sp)
200023e6:	cc52                	sw	s4,24(sp)
200023e8:	ca56                	sw	s5,20(sp)
200023ea:	c85a                	sw	s6,16(sp)
200023ec:	c65e                	sw	s7,12(sp)
200023ee:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:100
  uint32_t istate = REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET);
200023f2:	0005a903          	lw	s2,0(a1) # 40110000 <_data_init_start+0x2010c08c>
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
200023f6:	4994                	lw	a3,16(a1)
200023f8:	00800637          	lui	a2,0x800
200023fc:	8ef1                	and	a3,a3,a2
200023fe:	8a2a                	mv	s4,a0
20002400:	e285                	bnez	a3,20002420 <usbdev_poll+0x46>
20002402:	4505                	li	a0,1
usbdev_buf_allocate_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:31
  if (ctx->nfree <= 0) {
20002404:	028a2683          	lw	a3,40(s4)
20002408:	00a6cc63          	blt	a3,a0,20002420 <usbdev_poll+0x46>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:34
  return ctx->freebuf[--ctx->nfree];
2000240c:	16fd                	addi	a3,a3,-1
2000240e:	02da2423          	sw	a3,40(s4)
20002412:	96d2                	add	a3,a3,s4
20002414:	0046c683          	lbu	a3,4(a3)
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:77
    REG32(USBDEV_BASE_ADDR + USBDEV_AVBUFFER_REG_OFFSET) = buf;
20002418:	c9d4                	sw	a3,20(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
2000241a:	4994                	lw	a3,16(a1)
2000241c:	8ef1                	and	a3,a3,a2
2000241e:	d2fd                	beqz	a3,20002404 <usbdev_poll+0x2a>
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:107
  // Do this first to keep things going
  fill_av_fifo(ctx);

  // Process IN completions first so we get the fact that send completed
  // before processing a response
  if (istate & (1 << USBDEV_INTR_STATE_PKT_SENT_BIT)) {
20002420:	00297513          	andi	a0,s2,2
20002424:	cd31                	beqz	a0,20002480 <usbdev_poll+0xa6>
20002426:	4481                	li	s1,0
20002428:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:108
    uint32_t sentep = REG32(USBDEV_BASE_ADDR + USBDEV_IN_SENT_REG_OFFSET);
2000242c:	02452983          	lw	s3,36(a0) # 40110024 <_data_init_start+0x2010c0b0>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:111
    uint32_t configin = USBDEV_BASE_ADDR + USBDEV_CONFIGIN_0_REG_OFFSET;
    TRC_C('a' + sentep);
    for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
20002430:	060a0413          	addi	s0,s4,96
20002434:	02c50a93          	addi	s5,a0,44
20002438:	4b31                	li	s6,12
2000243a:	4bfd                	li	s7,31
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:112
      if (sentep & (1 << ep)) {
2000243c:	0099d533          	srl	a0,s3,s1
20002440:	8905                	andi	a0,a0,1
20002442:	c505                	beqz	a0,2000246a <usbdev_poll+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:114
        // Free up the buffer and optionally callback
        int32_t cfgin = REG32(configin + (4 * ep));
20002444:	000aa583          	lw	a1,0(s5)
usbdev_buf_free_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:39
  if ((ctx->nfree >= NUM_BUFS) || (buf >= NUM_BUFS)) {
20002448:	028a2503          	lw	a0,40(s4)
2000244c:	00abca63          	blt	s7,a0,20002460 <usbdev_poll+0x86>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:42
  ctx->freebuf[ctx->nfree++] = buf;
20002450:	89fd                	andi	a1,a1,31
20002452:	00150613          	addi	a2,a0,1
20002456:	02ca2423          	sw	a2,40(s4)
2000245a:	9552                	add	a0,a0,s4
2000245c:	00b50223          	sb	a1,4(a0)
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:116
        usbdev_buf_free_byid(ctx, EXTRACT(cfgin, CONFIGIN_0_BUFFER_0));
        if (ctx->tx_done_callback[ep]) {
20002460:	400c                	lw	a1,0(s0)
20002462:	c581                	beqz	a1,2000246a <usbdev_poll+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:117
          ctx->tx_done_callback[ep](ctx->ep_ctx[ep]);
20002464:	fd042503          	lw	a0,-48(s0)
20002468:	9582                	jalr	a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:111
    for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
2000246a:	0485                	addi	s1,s1,1
2000246c:	0a91                	addi	s5,s5,4
2000246e:	0411                	addi	s0,s0,4
20002470:	fd6496e3          	bne	s1,s6,2000243c <usbdev_poll+0x62>
20002474:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:122
        }
      }
    }
    // Write one to clear all the ones we handled
    REG32(USBDEV_BASE_ADDR + USBDEV_IN_SENT_REG_OFFSET) = sentep;
20002478:	03352223          	sw	s3,36(a0) # 40110024 <_data_init_start+0x2010c0b0>
2000247c:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:124
    // Clear the interupt
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
2000247e:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:128
        (1 << USBDEV_INTR_STATE_PKT_SENT_BIT);
  }

  if (istate & (1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT)) {
20002480:	00197513          	andi	a0,s2,1
20002484:	c12d                	beqz	a0,200024e6 <usbdev_poll+0x10c>
20002486:	401109b7          	lui	s3,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:129
    while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
2000248a:	0109a503          	lw	a0,16(s3) # 40110010 <_data_init_start+0x2010c09c>
2000248e:	04054963          	bltz	a0,200024e0 <usbdev_poll+0x106>
20002492:	4afd                	li	s5,31
20002494:	547d                	li	s0,-1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:131
             (1 << USBDEV_USBSTAT_RX_EMPTY_BIT))) {
      uint32_t rxinfo = REG32(USBDEV_BASE_ADDR + USBDEV_RXFIFO_REG_OFFSET);
20002496:	0189a583          	lw	a1,24(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:134
      usbbufid_t buf = EXTRACT(rxinfo, RXFIFO_BUFFER);
      int size = EXTRACT(rxinfo, RXFIFO_SIZE);
      int endpoint = EXTRACT(rxinfo, RXFIFO_EP);
2000249a:	0145d513          	srli	a0,a1,0x14
2000249e:	893d                	andi	a0,a0,15
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:137
      int setup = (rxinfo >> USBDEV_RXFIFO_SETUP_BIT) & 1;

      if (ctx->rx_callback[endpoint]) {
200024a0:	050a                	slli	a0,a0,0x2
200024a2:	9552                	add	a0,a0,s4
200024a4:	09052703          	lw	a4,144(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:132
      usbbufid_t buf = EXTRACT(rxinfo, RXFIFO_BUFFER);
200024a8:	01f5f493          	andi	s1,a1,31
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:137
      if (ctx->rx_callback[endpoint]) {
200024ac:	cb19                	beqz	a4,200024c2 <usbdev_poll+0xe8>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:135
      int setup = (rxinfo >> USBDEV_RXFIFO_SETUP_BIT) & 1;
200024ae:	0135d613          	srli	a2,a1,0x13
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:138
        ctx->rx_callback[endpoint](ctx->ep_ctx[endpoint], buf, size, setup);
200024b2:	5908                	lw	a0,48(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:135
      int setup = (rxinfo >> USBDEV_RXFIFO_SETUP_BIT) & 1;
200024b4:	00167693          	andi	a3,a2,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:133
      int size = EXTRACT(rxinfo, RXFIFO_SIZE);
200024b8:	81a1                	srli	a1,a1,0x8
200024ba:	07f5f613          	andi	a2,a1,127
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:138
        ctx->rx_callback[endpoint](ctx->ep_ctx[endpoint], buf, size, setup);
200024be:	85a6                	mv	a1,s1
200024c0:	9702                	jalr	a4
usbdev_buf_free_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:39
  if ((ctx->nfree >= NUM_BUFS) || (buf >= NUM_BUFS)) {
200024c2:	028a2503          	lw	a0,40(s4)
200024c6:	00aac963          	blt	s5,a0,200024d8 <usbdev_poll+0xfe>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:42
  ctx->freebuf[ctx->nfree++] = buf;
200024ca:	00150593          	addi	a1,a0,1
200024ce:	02ba2423          	sw	a1,40(s4)
200024d2:	9552                	add	a0,a0,s4
200024d4:	00950223          	sb	s1,4(a0)
usbdev_poll():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:129
    while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
200024d8:	0109a503          	lw	a0,16(s3)
200024dc:	faa44de3          	blt	s0,a0,20002496 <usbdev_poll+0xbc>
200024e0:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:146
        TRC_I(rxinfo, 24);
      }
      usbdev_buf_free_byid(ctx, buf);
    }
    // Clear the interupt
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
200024e2:	00a9a023          	sw	a0,0(s3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:149
        (1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT);
  }
  if (istate & ~((1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT) |
200024e6:	ffc97513          	andi	a0,s2,-4
200024ea:	c905                	beqz	a0,2000251a <usbdev_poll+0x140>
200024ec:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:157
    TRC_I(istate, 12);
    TRC_C(' ');
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
        istate & ~((1 << USBDEV_INTR_STATE_PKT_RECEIVED_BIT) |
                   (1 << USBDEV_INTR_STATE_PKT_SENT_BIT));
    if (istate & (1 << USBDEV_INTR_ENABLE_LINK_RESET_BIT)) {
200024f0:	01097613          	andi	a2,s2,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:154
    REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
200024f4:	c188                	sw	a0,0(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:157
    if (istate & (1 << USBDEV_INTR_ENABLE_LINK_RESET_BIT)) {
200024f6:	c215                	beqz	a2,2000251a <usbdev_poll+0x140>
200024f8:	4401                	li	s0,0
200024fa:	03000493          	li	s1,48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:160
      // Link reset
      for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
        if (ctx->reset[ep]) {
200024fe:	008a0533          	add	a0,s4,s0
20002502:	0f052583          	lw	a1,240(a0)
20002506:	c199                	beqz	a1,2000250c <usbdev_poll+0x132>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:161
          ctx->reset[ep](ctx->ep_ctx[ep]);
20002508:	5908                	lw	a0,48(a0)
2000250a:	9582                	jalr	a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:159
      for (int ep = 0; ep < NUM_ENDPOINTS; ep++) {
2000250c:	0411                	addi	s0,s0,4
2000250e:	fe9418e3          	bne	s0,s1,200024fe <usbdev_poll+0x124>
20002512:	40110537          	lui	a0,0x40110
20002516:	45c1                	li	a1,16
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:166
        }
      }

      // Clear the interupt
      REG32(USBDEV_BASE_ADDR + USBDEV_INTR_STATE_REG_OFFSET) =
20002518:	c10c                	sw	a1,0(a0)
2000251a:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:174
  }
  // TODO - clean this up
  // Frame ticks every 1ms, use to flush data every 16ms
  // (faster in DPI but this seems to work ok)
  // At reset frame count is 0, compare to 1 so no calls before SOF received
  uint32_t usbframe = EXTRACT(
2000251e:	4908                	lw	a0,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:176
      REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET), USBSTAT_FRAME);
  if ((usbframe & 0xf) == 1) {
20002520:	893d                	andi	a0,a0,15
20002522:	4585                	li	a1,1
20002524:	02b51463          	bne	a0,a1,2000254c <usbdev_poll+0x172>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:177
    if (ctx->flushed == 0) {
20002528:	02ca2503          	lw	a0,44(s4)
2000252c:	e11d                	bnez	a0,20002552 <usbdev_poll+0x178>
2000252e:	4401                	li	s0,0
20002530:	03000493          	li	s1,48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:179
      for (int i = 0; i < NUM_ENDPOINTS; i++) {
        if (ctx->flush[i]) {
20002534:	008a0533          	add	a0,s4,s0
20002538:	0c052583          	lw	a1,192(a0) # 401100c0 <_data_init_start+0x2010c14c>
2000253c:	c199                	beqz	a1,20002542 <usbdev_poll+0x168>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:180
          ctx->flush[i](ctx->ep_ctx[i]);
2000253e:	5908                	lw	a0,48(a0)
20002540:	9582                	jalr	a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:178
      for (int i = 0; i < NUM_ENDPOINTS; i++) {
20002542:	0411                	addi	s0,s0,4
20002544:	fe9418e3          	bne	s0,s1,20002534 <usbdev_poll+0x15a>
20002548:	4505                	li	a0,1
2000254a:	a011                	j	2000254e <usbdev_poll+0x174>
2000254c:	4501                	li	a0,0
2000254e:	02aa2623          	sw	a0,44(s4)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:189
    }
  } else {
    ctx->flushed = 0;
  }
  // TODO Errors? What Errors?
}
20002552:	4bb2                	lw	s7,12(sp)
20002554:	4b42                	lw	s6,16(sp)
20002556:	4ad2                	lw	s5,20(sp)
20002558:	4a62                	lw	s4,24(sp)
2000255a:	49f2                	lw	s3,28(sp)
2000255c:	5902                	lw	s2,32(sp)
2000255e:	5492                	lw	s1,36(sp)
20002560:	5422                	lw	s0,40(sp)
20002562:	50b2                	lw	ra,44(sp)
20002564:	6145                	addi	sp,sp,48
20002566:	8082                	ret

20002568 <usbdev_get_status>:
usbdev_get_status():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:191

unsigned int usbdev_get_status(usbdev_ctx_t *ctx) {
20002568:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:192
  unsigned int status = REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET);
2000256c:	4908                	lw	a0,16(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:193
  return status;
2000256e:	8082                	ret

20002570 <usbdev_get_link_state>:
usbdev_get_link_state():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:196
}

unsigned int usbdev_get_link_state(usbdev_ctx_t *ctx) {
20002570:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:197
  unsigned int link_state = EXTRACT(
20002574:	4908                	lw	a0,16(a0)
20002576:	8131                	srli	a0,a0,0xc
20002578:	891d                	andi	a0,a0,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:199
      REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET), USBSTAT_LINK_STATE);
  return link_state;
2000257a:	8082                	ret

2000257c <usbdev_get_address>:
usbdev_get_address():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:202
}

unsigned int usbdev_get_address(usbdev_ctx_t *ctx) {
2000257c:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:204
  unsigned int addr =
      EXTRACT(REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET),
20002580:	4548                	lw	a0,12(a0)
20002582:	8141                	srli	a0,a0,0x10
20002584:	07f57513          	andi	a0,a0,127
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:206
              USBCTRL_DEVICE_ADDRESS);
  return addr;
20002588:	8082                	ret

2000258a <usbdev_set_deviceid>:
usbdev_set_deviceid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:212
}

void usbdev_set_deviceid(usbdev_ctx_t *ctx, int deviceid) {
  REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET) =
      (1 << USBDEV_USBCTRL_ENABLE_BIT) |
      (deviceid << USBDEV_USBCTRL_DEVICE_ADDRESS_OFFSET);
2000258a:	01059513          	slli	a0,a1,0x10
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:211
      (1 << USBDEV_USBCTRL_ENABLE_BIT) |
2000258e:	00156513          	ori	a0,a0,1
20002592:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:210
  REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET) =
20002596:	c5c8                	sw	a0,12(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:213
}
20002598:	8082                	ret

2000259a <usbdev_halt>:
usbdev_halt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:215

void usbdev_halt(usbdev_ctx_t *ctx, int endpoint, int enable) {
2000259a:	401106b7          	lui	a3,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:217
  uint32_t epbit = 1 << endpoint;
  uint32_t stall = REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET);
2000259e:	5698                	lw	a4,40(a3)
200025a0:	4785                	li	a5,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:216
  uint32_t epbit = 1 << endpoint;
200025a2:	00b795b3          	sll	a1,a5,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:218
  if (enable) {
200025a6:	c219                	beqz	a2,200025ac <usbdev_halt+0x12>
200025a8:	8dd9                	or	a1,a1,a4
200025aa:	a021                	j	200025b2 <usbdev_halt+0x18>
200025ac:	fff5c593          	not	a1,a1
200025b0:	8df9                	and	a1,a1,a4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:223
    stall |= epbit;
  } else {
    stall &= ~epbit;
  }
  REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) = stall;
200025b2:	d68c                	sw	a1,40(a3)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:224
  ctx->halted = stall;
200025b4:	d14c                	sw	a1,36(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:227
  // TODO future addition would be to callback the endpoint driver
  // for now it just sees its traffic has stopped
}
200025b6:	8082                	ret

200025b8 <usbdev_set_iso>:
usbdev_set_iso():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:229

void usbdev_set_iso(usbdev_ctx_t *ctx, int endpoint, int enable) {
200025b8:	40110537          	lui	a0,0x40110
200025bc:	4d74                	lw	a3,92(a0)
200025be:	4705                	li	a4,1
200025c0:	00b715b3          	sll	a1,a4,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:230
  if (enable) {
200025c4:	c219                	beqz	a2,200025ca <usbdev_set_iso+0x12>
200025c6:	8dd5                	or	a1,a1,a3
200025c8:	a021                	j	200025d0 <usbdev_set_iso+0x18>
200025ca:	fff5c593          	not	a1,a1
200025ce:	8df5                	and	a1,a1,a3
200025d0:	cd6c                	sw	a1,92(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:237
        SETBIT(REG32(USBDEV_BASE_ADDR + USBDEV_ISO_REG_OFFSET), endpoint);
  } else {
    REG32(USBDEV_BASE_ADDR + USBDEV_ISO_REG_OFFSET) =
        CLRBIT(REG32(USBDEV_BASE_ADDR + USBDEV_ISO_REG_OFFSET), endpoint);
  }
}
200025d2:	8082                	ret

200025d4 <usbdev_clear_data_toggle>:
usbdev_clear_data_toggle():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:239

void usbdev_clear_data_toggle(usbdev_ctx_t *ctx, int endpoint) {
200025d4:	4505                	li	a0,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:241
  REG32(USBDEV_BASE_ADDR + USBDEV_DATA_TOGGLE_CLEAR_REG_OFFSET) =
      (1 << endpoint);
200025d6:	00b51533          	sll	a0,a0,a1
200025da:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:240
  REG32(USBDEV_BASE_ADDR + USBDEV_DATA_TOGGLE_CLEAR_REG_OFFSET) =
200025de:	d1a8                	sw	a0,96(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:242
}
200025e0:	8082                	ret

200025e2 <usbdev_set_ep0_stall>:
usbdev_set_ep0_stall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:244

void usbdev_set_ep0_stall(usbdev_ctx_t *ctx, int stall) {
200025e2:	40110537          	lui	a0,0x40110
200025e6:	5510                	lw	a2,40(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:245
  if (stall) {
200025e8:	00b035b3          	snez	a1,a1
200025ec:	9a79                	andi	a2,a2,-2
200025ee:	8dd1                	or	a1,a1,a2
200025f0:	d50c                	sw	a1,40(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:252
        REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) | 1;
  } else {
    REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) =
        REG32(USBDEV_BASE_ADDR + USBDEV_STALL_REG_OFFSET) & ~(1);
  }
}
200025f2:	8082                	ret

200025f4 <usbdev_can_rem_wake>:
usbdev_can_rem_wake():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:255

// TODO got hang with this inline
int usbdev_can_rem_wake(usbdev_ctx_t *ctx) { return ctx->can_wake; }
200025f4:	4108                	lw	a0,0(a0)
200025f6:	8082                	ret

200025f8 <usbdev_endpoint_setup>:
usbdev_endpoint_setup():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:261

void usbdev_endpoint_setup(usbdev_ctx_t *ctx, int ep, int enableout,
                           void *ep_ctx, void (*tx_done)(void *),
                           void (*rx)(void *, usbbufid_t, int, int),
                           void (*flush)(void *), void (*reset)(void *)) {
  ctx->ep_ctx[ep] = ep_ctx;
200025f8:	00259293          	slli	t0,a1,0x2
200025fc:	9516                	add	a0,a0,t0
200025fe:	d914                	sw	a3,48(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:262
  ctx->tx_done_callback[ep] = tx_done;
20002600:	d138                	sw	a4,96(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:263
  ctx->rx_callback[ep] = rx;
20002602:	08f52823          	sw	a5,144(a0) # 40110090 <_data_init_start+0x2010c11c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:264
  ctx->flush[ep] = flush;
20002606:	0d052023          	sw	a6,192(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:265
  ctx->reset[ep] = reset;
2000260a:	0f152823          	sw	a7,240(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:266
  if (enableout) {
2000260e:	ca19                	beqz	a2,20002624 <usbdev_endpoint_setup+0x2c>
20002610:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:267
    uint32_t rxen = REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_OUT_REG_OFFSET);
20002614:	5110                	lw	a2,32(a0)
20002616:	4685                	li	a3,1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:268
    rxen |= (1 << (ep + USBDEV_RXENABLE_OUT_OUT_0_BIT));
20002618:	00b695b3          	sll	a1,a3,a1
2000261c:	8dd1                	or	a1,a1,a2
2000261e:	02050513          	addi	a0,a0,32 # 40110020 <_data_init_start+0x2010c0ac>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:269
    REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_OUT_REG_OFFSET) = rxen;
20002622:	c10c                	sw	a1,0(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:271
  }
}
20002624:	8082                	ret

20002626 <usbdev_init>:
usbdev_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:273

void usbdev_init(usbdev_ctx_t *ctx, bool pinflip, bool diff_rx, bool diff_tx) {
20002626:	1101                	addi	sp,sp,-32
20002628:	ce06                	sw	ra,28(sp)
2000262a:	cc22                	sw	s0,24(sp)
2000262c:	ca26                	sw	s1,20(sp)
2000262e:	c84a                	sw	s2,16(sp)
20002630:	c64e                	sw	s3,12(sp)
20002632:	8436                	mv	s0,a3
20002634:	8932                	mv	s2,a2
20002636:	89ae                	mv	s3,a1
20002638:	84aa                	mv	s1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:275
  // setup context
  for (int i = 0; i < NUM_ENDPOINTS; i++) {
2000263a:	03050513          	addi	a0,a0,48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:278
    usbdev_endpoint_setup(ctx, i, 0, NULL, NULL, NULL, NULL, NULL);
  }
  ctx->halted = 0;
2000263e:	0204a223          	sw	zero,36(s1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:279
  ctx->can_wake = 0;
20002642:	0004a023          	sw	zero,0(s1)
usbdev_endpoint_setup():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:262
  ctx->tx_done_callback[ep] = tx_done;
20002646:	0f000613          	li	a2,240
2000264a:	4581                	li	a1,0
2000264c:	fb2fe0ef          	jal	ra,20000dfe <memset>
20002650:	4501                	li	a0,0
buf_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:23
  for (int i = 0; i < NUM_BUFS; i++) {
20002652:	00448593          	addi	a1,s1,4
20002656:	02000613          	li	a2,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:24
    ctx->freebuf[i] = i;
2000265a:	00a586b3          	add	a3,a1,a0
2000265e:	00a68023          	sb	a0,0(a3) # 40110000 <_data_init_start+0x2010c08c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:23
  for (int i = 0; i < NUM_BUFS; i++) {
20002662:	0505                	addi	a0,a0,1
20002664:	fec51be3          	bne	a0,a2,2000265a <usbdev_init+0x34>
20002668:	02000513          	li	a0,32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:26
  ctx->nfree = NUM_BUFS;
2000266c:	d488                	sw	a0,40(s1)
2000266e:	40110537          	lui	a0,0x40110
usbdev_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:283
  buf_init(ctx);

  // All about polling...
  REG32(USBDEV_BASE_ADDR + USBDEV_INTR_ENABLE_REG_OFFSET) = 0;
20002672:	00052223          	sw	zero,4(a0) # 40110004 <_data_init_start+0x2010c090>
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20002676:	4910                	lw	a2,16(a0)
20002678:	008005b7          	lui	a1,0x800
2000267c:	8e6d                	and	a2,a2,a1
2000267e:	ee11                	bnez	a2,2000269a <usbdev_init+0x74>
20002680:	4605                	li	a2,1
usbdev_buf_allocate_byid():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:31
  if (ctx->nfree <= 0) {
20002682:	5494                	lw	a3,40(s1)
20002684:	00c6cb63          	blt	a3,a2,2000269a <usbdev_init+0x74>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:34
  return ctx->freebuf[--ctx->nfree];
20002688:	16fd                	addi	a3,a3,-1
2000268a:	d494                	sw	a3,40(s1)
2000268c:	96a6                	add	a3,a3,s1
2000268e:	0046c683          	lbu	a3,4(a3)
fill_av_fifo():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:77
    REG32(USBDEV_BASE_ADDR + USBDEV_AVBUFFER_REG_OFFSET) = buf;
20002692:	c954                	sw	a3,20(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:70
  while (!(REG32(USBDEV_BASE_ADDR + USBDEV_USBSTAT_REG_OFFSET) &
20002694:	4914                	lw	a3,16(a0)
20002696:	8eed                	and	a3,a3,a1
20002698:	d6ed                	beqz	a3,20002682 <usbdev_init+0x5c>
2000269a:	4585                	li	a1,1
usbdev_init():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:288

  // Provide buffers for any reception
  fill_av_fifo(ctx);

  REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_SETUP_REG_OFFSET) =
2000269c:	cd4c                	sw	a1,28(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:290
      (1 << USBDEV_RXENABLE_SETUP_SETUP_0_BIT);
  REG32(USBDEV_BASE_ADDR + USBDEV_RXENABLE_OUT_REG_OFFSET) =
2000269e:	d10c                	sw	a1,32(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:296
      (1 << USBDEV_RXENABLE_OUT_OUT_0_BIT);

  uint32_t phy_config =
      (pinflip << USBDEV_PHY_CONFIG_PINFLIP_BIT) |
      (diff_rx << USBDEV_PHY_CONFIG_RX_DIFFERENTIAL_MODE_BIT) |
      (diff_tx << USBDEV_PHY_CONFIG_TX_DIFFERENTIAL_MODE_BIT) |
200026a0:	00141613          	slli	a2,s0,0x1
200026a4:	02400693          	li	a3,36
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:294
      (pinflip << USBDEV_PHY_CONFIG_PINFLIP_BIT) |
200026a8:	00099363          	bnez	s3,200026ae <usbdev_init+0x88>
200026ac:	4691                	li	a3,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:295
      (diff_rx << USBDEV_PHY_CONFIG_RX_DIFFERENTIAL_MODE_BIT) |
200026ae:	0126e6b3          	or	a3,a3,s2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:296
      (diff_tx << USBDEV_PHY_CONFIG_TX_DIFFERENTIAL_MODE_BIT) |
200026b2:	8e55                	or	a2,a2,a3
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:298
      (1 << USBDEV_PHY_CONFIG_EOP_SINGLE_BIT_BIT);
  REG32(USBDEV_BASE_ADDR + USBDEV_PHY_CONFIG_REG_OFFSET) = phy_config;
200026b4:	d570                	sw	a2,108(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:300

  REG32(USBDEV_BASE_ADDR + USBDEV_USBCTRL_REG_OFFSET) =
200026b6:	c54c                	sw	a1,12(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:302
      (1 << USBDEV_USBCTRL_ENABLE_BIT);
}
200026b8:	49b2                	lw	s3,12(sp)
200026ba:	4942                	lw	s2,16(sp)
200026bc:	44d2                	lw	s1,20(sp)
200026be:	4462                	lw	s0,24(sp)
200026c0:	40f2                	lw	ra,28(sp)
200026c2:	6105                	addi	sp,sp,32
200026c4:	8082                	ret

200026c6 <usbdev_force_dx_pullup>:
usbdev_force_dx_pullup():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:304

void usbdev_force_dx_pullup(line_sel_t line, bool set) {
200026c6:	40110637          	lui	a2,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:306
  // Force usb to pretend it is in suspend
  uint32_t reg_val = REG32(USBDEV_BASE_ADDR + USBDEV_PHY_PINS_DRIVE_REG_OFFSET);
200026ca:	5634                	lw	a3,104(a2)
200026cc:	04000713          	li	a4,64
200026d0:	c119                	beqz	a0,200026d6 <usbdev_force_dx_pullup+0x10>
200026d2:	08000713          	li	a4,128
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:312
  uint32_t mask;

  mask = line == kDpSel ? USBDEV_PHY_PINS_DRIVE_DP_PULLUP_EN_O_BIT
                        : USBDEV_PHY_PINS_DRIVE_DN_PULLUP_EN_O_BIT;

  if (set) {
200026d6:	e589                	bnez	a1,200026e0 <usbdev_force_dx_pullup+0x1a>
200026d8:	fff74513          	not	a0,a4
200026dc:	8d75                	and	a0,a0,a3
200026de:	a019                	j	200026e4 <usbdev_force_dx_pullup+0x1e>
200026e0:	00e6e533          	or	a0,a3,a4
200026e4:	65c1                	lui	a1,0x10
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:318
    reg_val = SETBIT(reg_val, mask);
  } else {
    reg_val = CLRBIT(reg_val, mask);
  }

  reg_val = SETBIT(reg_val, USBDEV_PHY_PINS_DRIVE_EN_BIT);
200026e6:	8d4d                	or	a0,a0,a1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:319
  REG32(USBDEV_BASE_ADDR + USBDEV_PHY_PINS_DRIVE_REG_OFFSET) = reg_val;
200026e8:	d628                	sw	a0,104(a2)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:320
}
200026ea:	8082                	ret

200026ec <usbdev_force_suspend>:
usbdev_force_suspend():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:322

void usbdev_force_suspend() {
200026ec:	40110537          	lui	a0,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:324
  // Force usb to pretend it is in suspend
  REG32(USBDEV_BASE_ADDR + USBDEV_PHY_PINS_DRIVE_REG_OFFSET) |=
200026f0:	552c                	lw	a1,104(a0)
200026f2:	6641                	lui	a2,0x10
200026f4:	10060613          	addi	a2,a2,256 # 10100 <main.kLogFields.36+0x10>
200026f8:	8dd1                	or	a1,a1,a2
200026fa:	d52c                	sw	a1,104(a0)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:327
      1 << USBDEV_PHY_PINS_DRIVE_SUSPEND_O_BIT |
      1 << USBDEV_PHY_PINS_DRIVE_EN_BIT;
}
200026fc:	8082                	ret

200026fe <usbdev_wake>:
usbdev_wake():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:329

void usbdev_wake(bool set) {
200026fe:	401105b7          	lui	a1,0x40110
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:330
  uint32_t reg_val = REG32(USBDEV_BASE_ADDR + USBDEV_WAKE_CONFIG_REG_OFFSET);
20002702:	59b0                	lw	a2,112(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:331
  if (set) {
20002704:	9a79                	andi	a2,a2,-2
20002706:	8d51                	or	a0,a0,a2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:336
    reg_val = SETBIT(reg_val, USBDEV_WAKE_CONFIG_WAKE_EN_BIT);
  } else {
    reg_val = CLRBIT(reg_val, USBDEV_WAKE_CONFIG_WAKE_EN_BIT);
  }
  REG32(USBDEV_BASE_ADDR + USBDEV_WAKE_CONFIG_REG_OFFSET) = reg_val;
20002708:	d9a8                	sw	a0,112(a1)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/usbdev.c:337
}
2000270a:	8082                	ret

2000270c <handler_exception>:
handler_exception():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:33
  while (1) {
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
2000270c:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:37
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
2000270e:	de06                	sw	ra,60(sp)
20002710:	dc16                	sw	t0,56(sp)
20002712:	da1a                	sw	t1,52(sp)
20002714:	d81e                	sw	t2,48(sp)
20002716:	d62a                	sw	a0,44(sp)
20002718:	d42e                	sw	a1,40(sp)
2000271a:	d232                	sw	a2,36(sp)
2000271c:	d036                	sw	a3,32(sp)
2000271e:	ce3a                	sw	a4,28(sp)
20002720:	cc3e                	sw	a5,24(sp)
20002722:	ca42                	sw	a6,20(sp)
20002724:	c846                	sw	a7,16(sp)
20002726:	c672                	sw	t3,12(sp)
20002728:	c476                	sw	t4,8(sp)
2000272a:	c27a                	sw	t5,4(sp)
2000272c:	c07e                	sw	t6,0(sp)
2000272e:	34202573          	csrr	a0,mcause
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:38
  exc_cause = (exc_id_t)(mcause & kIdMax);
20002732:	897d                	andi	a0,a0,31
20002734:	4589                	li	a1,2
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40

  switch (exc_cause) {
20002736:	00a5dc63          	bge	a1,a0,2000274e <handler_exception+0x42>
2000273a:	4599                	li	a1,6
2000273c:	02a5c263          	blt	a1,a0,20002760 <handler_exception+0x54>
20002740:	458d                	li	a1,3
20002742:	02b50c63          	beq	a0,a1,2000277a <handler_exception+0x6e>
20002746:	4595                	li	a1,5
20002748:	02b50763          	beq	a0,a1,20002776 <handler_exception+0x6a>
2000274c:	a015                	j	20002770 <handler_exception+0x64>
2000274e:	c115                	beqz	a0,20002772 <handler_exception+0x66>
20002750:	4585                	li	a1,1
20002752:	02b50063          	beq	a0,a1,20002772 <handler_exception+0x66>
20002756:	4589                	li	a1,2
20002758:	00b51c63          	bne	a0,a1,20002770 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:48
      break;
    case kInstAccFault:
      handler_instr_acc_fault();
      break;
    case kInstIllegalFault:
      handler_instr_ill_fault();
2000275c:	2095                	jal	200027c0 <handler_instr_ill_fault>
2000275e:	a839                	j	2000277c <handler_exception+0x70>
20002760:	459d                	li	a1,7
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:40
  switch (exc_cause) {
20002762:	00b50a63          	beq	a0,a1,20002776 <handler_exception+0x6a>
20002766:	45ad                	li	a1,11
20002768:	00b51463          	bne	a0,a1,20002770 <handler_exception+0x64>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:60
      break;
    case kStrAccFault:
      handler_lsu_fault();
      break;
    case kECall:
      handler_ecall();
2000276c:	2845                	jal	2000281c <handler_ecall>
2000276e:	a039                	j	2000277c <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:63
      break;
    default:
      while (1) {
20002770:	a001                	j	20002770 <handler_exception+0x64>
20002772:	2805                	jal	200027a2 <handler_instr_acc_fault>
20002774:	a021                	j	2000277c <handler_exception+0x70>
20002776:	2061                	jal	200027fe <handler_lsu_fault>
20002778:	a011                	j	2000277c <handler_exception+0x70>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:51
      handler_bkpt();
2000277a:	209d                	jal	200027e0 <handler_bkpt>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:66
      };
  }
}
2000277c:	4f82                	lw	t6,0(sp)
2000277e:	4f12                	lw	t5,4(sp)
20002780:	4ea2                	lw	t4,8(sp)
20002782:	4e32                	lw	t3,12(sp)
20002784:	48c2                	lw	a7,16(sp)
20002786:	4852                	lw	a6,20(sp)
20002788:	47e2                	lw	a5,24(sp)
2000278a:	4772                	lw	a4,28(sp)
2000278c:	5682                	lw	a3,32(sp)
2000278e:	5612                	lw	a2,36(sp)
20002790:	55a2                	lw	a1,40(sp)
20002792:	5532                	lw	a0,44(sp)
20002794:	53c2                	lw	t2,48(sp)
20002796:	5352                	lw	t1,52(sp)
20002798:	52e2                	lw	t0,56(sp)
2000279a:	50f2                	lw	ra,60(sp)
2000279c:	6121                	addi	sp,sp,64
2000279e:	30200073          	mret

200027a2 <handler_instr_acc_fault>:
handler_instr_acc_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:86
  LOG_INFO("External IRQ triggered!");
  while (1) {
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
200027a2:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:87
  const char fault_msg[] =
200027a4:	de06                	sw	ra,60(sp)
200027a6:	dc22                	sw	s0,56(sp)
200027a8:	00001597          	auipc	a1,0x1
200027ac:	69258593          	addi	a1,a1,1682 # 20003e3a <__clz_tab+0xad6>
200027b0:	0040                	addi	s0,sp,4
200027b2:	03400613          	li	a2,52
200027b6:	8522                	mv	a0,s0
200027b8:	e30fe0ef          	jal	ra,20000de8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:89
      "Instruction access fault, mtval shows fault address";
  print_exc_msg(fault_msg);
200027bc:	8522                	mv	a0,s0
200027be:	2275                	jal	2000296a <print_exc_msg>

200027c0 <handler_instr_ill_fault>:
handler_instr_ill_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:92
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
200027c0:	715d                	addi	sp,sp,-80
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:93
  const char fault_msg[] =
200027c2:	c686                	sw	ra,76(sp)
200027c4:	c4a2                	sw	s0,72(sp)
200027c6:	00001597          	auipc	a1,0x1
200027ca:	6a858593          	addi	a1,a1,1704 # 20003e6e <__clz_tab+0xb0a>
200027ce:	00d10413          	addi	s0,sp,13
200027d2:	03b00613          	li	a2,59
200027d6:	8522                	mv	a0,s0
200027d8:	e10fe0ef          	jal	ra,20000de8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:95
      "Illegal Instruction fault, mtval shows instruction content";
  print_exc_msg(fault_msg);
200027dc:	8522                	mv	a0,s0
200027de:	2271                	jal	2000296a <print_exc_msg>

200027e0 <handler_bkpt>:
handler_bkpt():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:98
}

__attribute__((weak)) void handler_bkpt(void) {
200027e0:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:99
  const char exc_msg[] =
200027e2:	de06                	sw	ra,60(sp)
200027e4:	dc22                	sw	s0,56(sp)
200027e6:	00001597          	auipc	a1,0x1
200027ea:	6c358593          	addi	a1,a1,1731 # 20003ea9 <__clz_tab+0xb45>
200027ee:	840a                	mv	s0,sp
200027f0:	03800613          	li	a2,56
200027f4:	8522                	mv	a0,s0
200027f6:	df2fe0ef          	jal	ra,20000de8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:101
      "Breakpoint triggerd, mtval shows the breakpoint address";
  print_exc_msg(exc_msg);
200027fa:	8522                	mv	a0,s0
200027fc:	22bd                	jal	2000296a <print_exc_msg>

200027fe <handler_lsu_fault>:
handler_lsu_fault():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:104
}

__attribute__((weak)) void handler_lsu_fault(void) {
200027fe:	7139                	addi	sp,sp,-64
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:105
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address";
20002800:	de06                	sw	ra,60(sp)
20002802:	dc22                	sw	s0,56(sp)
20002804:	00001597          	auipc	a1,0x1
20002808:	6dd58593          	addi	a1,a1,1757 # 20003ee1 <__clz_tab+0xb7d>
2000280c:	0020                	addi	s0,sp,8
2000280e:	03000613          	li	a2,48
20002812:	8522                	mv	a0,s0
20002814:	dd4fe0ef          	jal	ra,20000de8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:106
  print_exc_msg(exc_msg);
20002818:	8522                	mv	a0,s0
2000281a:	2a81                	jal	2000296a <print_exc_msg>

2000281c <handler_ecall>:
handler_ecall():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:109
}

__attribute__((weak)) void handler_ecall(void) {
2000281c:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:110
  LOG_INFO("Environment call encountered");
2000281e:	ce06                	sw	ra,28(sp)
20002820:	cc22                	sw	s0,24(sp)
20002822:	00001517          	auipc	a0,0x1
20002826:	b1650513          	addi	a0,a0,-1258 # 20003338 <kDeviceLogBypassUartAddress>
2000282a:	4108                	lw	a0,0(a0)
2000282c:	c909                	beqz	a0,2000283e <handler_ecall+0x22>
2000282e:	e000e517          	auipc	a0,0xe000e
20002832:	a8e50513          	addi	a0,a0,-1394 # 102bc <handler_ecall.kLogFields>
20002836:	4581                	li	a1,0
20002838:	e1ffe0ef          	jal	ra,20001656 <base_log_internal_dv>
2000283c:	a829                	j	20002856 <handler_ecall+0x3a>
2000283e:	00001597          	auipc	a1,0x1
20002842:	a8a58593          	addi	a1,a1,-1398 # 200032c8 <kDifUartFifoSizeBytes+0x40>
20002846:	840a                	mv	s0,sp
20002848:	4651                	li	a2,20
2000284a:	8522                	mv	a0,s0
2000284c:	d9cfe0ef          	jal	ra,20000de8 <memcpy>
20002850:	8522                	mv	a0,s0
20002852:	d5bfe0ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:111
  while (1) {
20002856:	a001                	j	20002856 <handler_ecall+0x3a>

20002858 <handler_irq_software>:
handler_irq_software():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:68
__attribute__((weak)) void handler_irq_software(void) {
20002858:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:69
  LOG_INFO("Software IRQ triggered!");
2000285a:	ce86                	sw	ra,92(sp)
2000285c:	cc96                	sw	t0,88(sp)
2000285e:	ca9a                	sw	t1,84(sp)
20002860:	c89e                	sw	t2,80(sp)
20002862:	c6a2                	sw	s0,76(sp)
20002864:	c4aa                	sw	a0,72(sp)
20002866:	c2ae                	sw	a1,68(sp)
20002868:	c0b2                	sw	a2,64(sp)
2000286a:	de36                	sw	a3,60(sp)
2000286c:	dc3a                	sw	a4,56(sp)
2000286e:	da3e                	sw	a5,52(sp)
20002870:	d842                	sw	a6,48(sp)
20002872:	d646                	sw	a7,44(sp)
20002874:	d472                	sw	t3,40(sp)
20002876:	d276                	sw	t4,36(sp)
20002878:	d07a                	sw	t5,32(sp)
2000287a:	ce7e                	sw	t6,28(sp)
2000287c:	00001517          	auipc	a0,0x1
20002880:	abc50513          	addi	a0,a0,-1348 # 20003338 <kDeviceLogBypassUartAddress>
20002884:	4108                	lw	a0,0(a0)
20002886:	c909                	beqz	a0,20002898 <handler_irq_software+0x40>
20002888:	e000e517          	auipc	a0,0xe000e
2000288c:	9f850513          	addi	a0,a0,-1544 # 10280 <handler_irq_software.kLogFields>
20002890:	4581                	li	a1,0
20002892:	dc5fe0ef          	jal	ra,20001656 <base_log_internal_dv>
20002896:	a829                	j	200028b0 <handler_irq_software+0x58>
20002898:	00001597          	auipc	a1,0x1
2000289c:	9f458593          	addi	a1,a1,-1548 # 2000328c <kDifUartFifoSizeBytes+0x4>
200028a0:	0020                	addi	s0,sp,8
200028a2:	4651                	li	a2,20
200028a4:	8522                	mv	a0,s0
200028a6:	d42fe0ef          	jal	ra,20000de8 <memcpy>
200028aa:	8522                	mv	a0,s0
200028ac:	d01fe0ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:70
  while (1) {
200028b0:	a001                	j	200028b0 <handler_irq_software+0x58>
200028b2:	0001                	nop

200028b4 <handler_irq_timer>:
handler_irq_timer():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:74
__attribute__((weak)) void handler_irq_timer(void) {
200028b4:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:75
  LOG_INFO("Timer IRQ triggered!");
200028b6:	ce86                	sw	ra,92(sp)
200028b8:	cc96                	sw	t0,88(sp)
200028ba:	ca9a                	sw	t1,84(sp)
200028bc:	c89e                	sw	t2,80(sp)
200028be:	c6a2                	sw	s0,76(sp)
200028c0:	c4aa                	sw	a0,72(sp)
200028c2:	c2ae                	sw	a1,68(sp)
200028c4:	c0b2                	sw	a2,64(sp)
200028c6:	de36                	sw	a3,60(sp)
200028c8:	dc3a                	sw	a4,56(sp)
200028ca:	da3e                	sw	a5,52(sp)
200028cc:	d842                	sw	a6,48(sp)
200028ce:	d646                	sw	a7,44(sp)
200028d0:	d472                	sw	t3,40(sp)
200028d2:	d276                	sw	t4,36(sp)
200028d4:	d07a                	sw	t5,32(sp)
200028d6:	ce7e                	sw	t6,28(sp)
200028d8:	00001517          	auipc	a0,0x1
200028dc:	a6050513          	addi	a0,a0,-1440 # 20003338 <kDeviceLogBypassUartAddress>
200028e0:	4108                	lw	a0,0(a0)
200028e2:	c909                	beqz	a0,200028f4 <handler_irq_timer+0x40>
200028e4:	e000e517          	auipc	a0,0xe000e
200028e8:	9b050513          	addi	a0,a0,-1616 # 10294 <handler_irq_timer.kLogFields>
200028ec:	4581                	li	a1,0
200028ee:	d69fe0ef          	jal	ra,20001656 <base_log_internal_dv>
200028f2:	a829                	j	2000290c <handler_irq_timer+0x58>
200028f4:	00001597          	auipc	a1,0x1
200028f8:	9ac58593          	addi	a1,a1,-1620 # 200032a0 <kDifUartFifoSizeBytes+0x18>
200028fc:	0020                	addi	s0,sp,8
200028fe:	4651                	li	a2,20
20002900:	8522                	mv	a0,s0
20002902:	ce6fe0ef          	jal	ra,20000de8 <memcpy>
20002906:	8522                	mv	a0,s0
20002908:	ca5fe0ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:76
  while (1) {
2000290c:	a001                	j	2000290c <handler_irq_timer+0x58>
2000290e:	0001                	nop

20002910 <handler_irq_external>:
handler_irq_external():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:80
__attribute__((weak)) void handler_irq_external(void) {
20002910:	711d                	addi	sp,sp,-96
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:81
  LOG_INFO("External IRQ triggered!");
20002912:	ce86                	sw	ra,92(sp)
20002914:	cc96                	sw	t0,88(sp)
20002916:	ca9a                	sw	t1,84(sp)
20002918:	c89e                	sw	t2,80(sp)
2000291a:	c6a2                	sw	s0,76(sp)
2000291c:	c4aa                	sw	a0,72(sp)
2000291e:	c2ae                	sw	a1,68(sp)
20002920:	c0b2                	sw	a2,64(sp)
20002922:	de36                	sw	a3,60(sp)
20002924:	dc3a                	sw	a4,56(sp)
20002926:	da3e                	sw	a5,52(sp)
20002928:	d842                	sw	a6,48(sp)
2000292a:	d646                	sw	a7,44(sp)
2000292c:	d472                	sw	t3,40(sp)
2000292e:	d276                	sw	t4,36(sp)
20002930:	d07a                	sw	t5,32(sp)
20002932:	ce7e                	sw	t6,28(sp)
20002934:	00001517          	auipc	a0,0x1
20002938:	a0450513          	addi	a0,a0,-1532 # 20003338 <kDeviceLogBypassUartAddress>
2000293c:	4108                	lw	a0,0(a0)
2000293e:	c909                	beqz	a0,20002950 <handler_irq_external+0x40>
20002940:	e000e517          	auipc	a0,0xe000e
20002944:	96850513          	addi	a0,a0,-1688 # 102a8 <handler_irq_external.kLogFields>
20002948:	4581                	li	a1,0
2000294a:	d0dfe0ef          	jal	ra,20001656 <base_log_internal_dv>
2000294e:	a829                	j	20002968 <handler_irq_external+0x58>
20002950:	00001597          	auipc	a1,0x1
20002954:	96458593          	addi	a1,a1,-1692 # 200032b4 <kDifUartFifoSizeBytes+0x2c>
20002958:	0020                	addi	s0,sp,8
2000295a:	4651                	li	a2,20
2000295c:	8522                	mv	a0,s0
2000295e:	c8afe0ef          	jal	ra,20000de8 <memcpy>
20002962:	8522                	mv	a0,s0
20002964:	c49fe0ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:82
  while (1) {
20002968:	a001                	j	20002968 <handler_irq_external+0x58>

2000296a <print_exc_msg>:
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:25
static void print_exc_msg(const char *msg) {
2000296a:	1101                	addi	sp,sp,-32
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
2000296c:	ce06                	sw	ra,28(sp)
2000296e:	cc22                	sw	s0,24(sp)
20002970:	ca26                	sw	s1,20(sp)
20002972:	00001597          	auipc	a1,0x1
20002976:	9c658593          	addi	a1,a1,-1594 # 20003338 <kDeviceLogBypassUartAddress>
2000297a:	418c                	lw	a1,0(a1)
2000297c:	842a                	mv	s0,a0
2000297e:	c19d                	beqz	a1,200029a4 <print_exc_msg+0x3a>
20002980:	e000e517          	auipc	a0,0xe000e
20002984:	95050513          	addi	a0,a0,-1712 # 102d0 <print_exc_msg.kLogFields>
20002988:	4585                	li	a1,1
2000298a:	8622                	mv	a2,s0
2000298c:	ccbfe0ef          	jal	ra,20001656 <base_log_internal_dv>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
20002990:	34302673          	csrr	a2,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
20002994:	e000e517          	auipc	a0,0xe000e
20002998:	95050513          	addi	a0,a0,-1712 # 102e4 <print_exc_msg.kLogFields.6>
2000299c:	4585                	li	a1,1
2000299e:	cb9fe0ef          	jal	ra,20001656 <base_log_internal_dv>
200029a2:	a82d                	j	200029dc <print_exc_msg+0x72>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:26
  LOG_INFO("%s", msg);
200029a4:	00001597          	auipc	a1,0x1
200029a8:	93858593          	addi	a1,a1,-1736 # 200032dc <kDifUartFifoSizeBytes+0x54>
200029ac:	848a                	mv	s1,sp
200029ae:	4651                	li	a2,20
200029b0:	8526                	mv	a0,s1
200029b2:	c36fe0ef          	jal	ra,20000de8 <memcpy>
200029b6:	8526                	mv	a0,s1
200029b8:	85a2                	mv	a1,s0
200029ba:	bf3fe0ef          	jal	ra,200015ac <base_log_internal_core>
get_mtval():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:16
  CSR_READ(CSR_REG_MTVAL, &mtval);
200029be:	34302473          	csrr	s0,mtval
print_exc_msg():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:27
  LOG_INFO("MTVAL value is 0x%x", get_mtval());
200029c2:	00001597          	auipc	a1,0x1
200029c6:	92e58593          	addi	a1,a1,-1746 # 200032f0 <kDifUartFifoSizeBytes+0x68>
200029ca:	848a                	mv	s1,sp
200029cc:	4651                	li	a2,20
200029ce:	8526                	mv	a0,s1
200029d0:	c18fe0ef          	jal	ra,20000de8 <memcpy>
200029d4:	8526                	mv	a0,s1
200029d6:	85a2                	mv	a1,s0
200029d8:	bd5fe0ef          	jal	ra,200015ac <base_log_internal_core>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/handler.c:28
  while (1) {
200029dc:	a001                	j	200029dc <print_exc_msg+0x72>
	...

200029e0 <test_status_set>:
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
200029e0:	1101                	addi	sp,sp,-32
200029e2:	ce06                	sw	ra,28(sp)
200029e4:	cc22                	sw	s0,24(sp)
200029e6:	65b1                	lui	a1,0xc
200029e8:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:26
  switch (test_status) {
200029ec:	02b50163          	beq	a0,a1,20002a0e <test_status_set+0x2e>
200029f0:	65a5                	lui	a1,0x9
200029f2:	05b5                	addi	a1,a1,13
200029f4:	04b50063          	beq	a0,a1,20002a34 <test_status_set+0x54>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
200029f8:	00001597          	auipc	a1,0x1
200029fc:	93c58593          	addi	a1,a1,-1732 # 20003334 <kDeviceTestStatusAddress>
20002a00:	418c                	lw	a1,0(a1)
20002a02:	c191                	beqz	a1,20002a06 <test_status_set+0x26>
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
20002a04:	c188                	sw	a0,0(a1)
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
20002a06:	4462                	lw	s0,24(sp)
20002a08:	40f2                	lw	ra,28(sp)
20002a0a:	6105                	addi	sp,sp,32
20002a0c:	8082                	ret
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20002a0e:	00001517          	auipc	a0,0x1
20002a12:	92a50513          	addi	a0,a0,-1750 # 20003338 <kDeviceLogBypassUartAddress>
20002a16:	4108                	lw	a0,0(a0)
20002a18:	e129                	bnez	a0,20002a5a <test_status_set+0x7a>
20002a1a:	00001597          	auipc	a1,0x1
20002a1e:	93658593          	addi	a1,a1,-1738 # 20003350 <kDeviceLogBypassUartAddress+0x18>
20002a22:	840a                	mv	s0,sp
20002a24:	4651                	li	a2,20
20002a26:	8522                	mv	a0,s0
20002a28:	bc0fe0ef          	jal	ra,20000de8 <memcpy>
20002a2c:	8522                	mv	a0,s0
20002a2e:	b7ffe0ef          	jal	ra,200015ac <base_log_internal_core>
20002a32:	a81d                	j	20002a68 <test_status_set+0x88>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20002a34:	00001517          	auipc	a0,0x1
20002a38:	90450513          	addi	a0,a0,-1788 # 20003338 <kDeviceLogBypassUartAddress>
20002a3c:	4108                	lw	a0,0(a0)
20002a3e:	ed1d                	bnez	a0,20002a7c <test_status_set+0x9c>
20002a40:	00001597          	auipc	a1,0x1
20002a44:	8fc58593          	addi	a1,a1,-1796 # 2000333c <kDeviceLogBypassUartAddress+0x4>
20002a48:	840a                	mv	s0,sp
20002a4a:	4651                	li	a2,20
20002a4c:	8522                	mv	a0,s0
20002a4e:	b9afe0ef          	jal	ra,20000de8 <memcpy>
20002a52:	8522                	mv	a0,s0
20002a54:	b59fe0ef          	jal	ra,200015ac <base_log_internal_core>
20002a58:	a80d                	j	20002a8a <test_status_set+0xaa>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:34
      LOG_INFO("FAIL!");
20002a5a:	e000e517          	auipc	a0,0xe000e
20002a5e:	8b250513          	addi	a0,a0,-1870 # 1030c <test_status_set.kLogFields.2>
20002a62:	4581                	li	a1,0
20002a64:	bf3fe0ef          	jal	ra,20001656 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20002a68:	00001517          	auipc	a0,0x1
20002a6c:	8cc50513          	addi	a0,a0,-1844 # 20003334 <kDeviceTestStatusAddress>
20002a70:	4108                	lw	a0,0(a0)
20002a72:	c50d                	beqz	a0,20002a9c <test_status_set+0xbc>
20002a74:	65b1                	lui	a1,0xc
20002a76:	aad58593          	addi	a1,a1,-1363 # baad <_stack_size+0x9aad>
20002a7a:	a005                	j	20002a9a <test_status_set+0xba>
test_status_set():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:28
      LOG_INFO("PASS!");
20002a7c:	e000e517          	auipc	a0,0xe000e
20002a80:	87c50513          	addi	a0,a0,-1924 # 102f8 <test_status_set.kLogFields>
20002a84:	4581                	li	a1,0
20002a86:	bd1fe0ef          	jal	ra,20001656 <base_log_internal_dv>
test_status_device_write():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/testing/test_status.c:18
  if (kDeviceTestStatusAddress != 0) {
20002a8a:	00001517          	auipc	a0,0x1
20002a8e:	8aa50513          	addi	a0,a0,-1878 # 20003334 <kDeviceTestStatusAddress>
20002a92:	4108                	lw	a0,0(a0)
20002a94:	c501                	beqz	a0,20002a9c <test_status_set+0xbc>
20002a96:	65a5                	lui	a1,0x9
20002a98:	05b5                	addi	a1,a1,13
20002a9a:	c10c                	sw	a1,0(a0)
20002a9c:	b3cfe0ef          	jal	ra,20000dd8 <abort>

20002aa0 <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:112
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
20002aa0:	4705                	li	a4,1
20002aa2:	a009                	j	20002aa4 <mmio_region_memcpy32>

20002aa4 <mmio_region_memcpy32>:
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:35
                                 size_t len, bool from_mmio) {
20002aa4:	7179                	addi	sp,sp,-48
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:36
  if (len == 0) {
20002aa6:	d606                	sw	ra,44(sp)
20002aa8:	d422                	sw	s0,40(sp)
20002aaa:	d226                	sw	s1,36(sp)
20002aac:	d04a                	sw	s2,32(sp)
20002aae:	ce4e                	sw	s3,28(sp)
20002ab0:	cc52                	sw	s4,24(sp)
20002ab2:	ca56                	sw	s5,20(sp)
20002ab4:	c85a                	sw	s6,16(sp)
20002ab6:	c6c5                	beqz	a3,20002b5e <mmio_region_memcpy32+0xba>
20002ab8:	893a                	mv	s2,a4
20002aba:	8436                	mv	s0,a3
20002abc:	89b2                	mv	s3,a2
20002abe:	8b2e                	mv	s6,a1
20002ac0:	8a2a                	mv	s4,a0
misalignment32_of():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:16
  return addr % alignof(uint32_t);
20002ac2:	0035f513          	andi	a0,a1,3
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:43
  if (misalignment != 0) {
20002ac6:	c139                	beqz	a0,20002b0c <mmio_region_memcpy32+0x68>
20002ac8:	4591                	li	a1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:46
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
20002aca:	8d89                	sub	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:50
    if (realignment > len) {
20002acc:	84a2                	mv	s1,s0
20002ace:	00b46363          	bltu	s0,a1,20002ad4 <mmio_region_memcpy32+0x30>
20002ad2:	84ae                	mv	s1,a1
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002ad4:	ffcb7593          	andi	a1,s6,-4
20002ad8:	00ba0ab3          	add	s5,s4,a1
20002adc:	000aa583          	lw	a1,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:57
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
20002ae0:	c62e                	sw	a1,12(sp)
20002ae2:	006c                	addi	a1,sp,12
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:61
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
20002ae4:	8dc9                	or	a1,a1,a0
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:62
    if (from_mmio) {
20002ae6:	00090763          	beqz	s2,20002af4 <mmio_region_memcpy32+0x50>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:63
      memcpy(buf, current_byte, realignment);
20002aea:	854e                	mv	a0,s3
20002aec:	8626                	mv	a2,s1
20002aee:	afafe0ef          	jal	ra,20000de8 <memcpy>
20002af2:	a809                	j	20002b04 <mmio_region_memcpy32+0x60>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:66
      memcpy(current_byte, buf, realignment);
20002af4:	852e                	mv	a0,a1
20002af6:	85ce                	mv	a1,s3
20002af8:	8626                	mv	a2,s1
20002afa:	aeefe0ef          	jal	ra,20000de8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:67
      mmio_region_write32(base, current_word_offset, current_word);
20002afe:	4532                	lw	a0,12(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002b00:	00aaa023          	sw	a0,0(s5)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:72
    len -= realignment;
20002b04:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20002b06:	cc21                	beqz	s0,20002b5e <mmio_region_memcpy32+0xba>
20002b08:	9b26                	add	s6,s6,s1
20002b0a:	99a6                	add	s3,s3,s1
20002b0c:	00810a93          	addi	s5,sp,8
20002b10:	4511                	li	a0,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:81
    if (bytes_to_copy > len) {
20002b12:	84a2                	mv	s1,s0
20002b14:	00a46363          	bltu	s0,a0,20002b1a <mmio_region_memcpy32+0x76>
20002b18:	4491                	li	s1,4
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:86
    uint32_t current_word = 0;
20002b1a:	c402                	sw	zero,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:87
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
20002b1c:	00a46c63          	bltu	s0,a0,20002b34 <mmio_region_memcpy32+0x90>
20002b20:	00091a63          	bnez	s2,20002b34 <mmio_region_memcpy32+0x90>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20002b24:	00090f63          	beqz	s2,20002b42 <mmio_region_memcpy32+0x9e>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:97
      memcpy(buf, &current_word, bytes_to_copy);
20002b28:	854e                	mv	a0,s3
20002b2a:	85d6                	mv	a1,s5
20002b2c:	8626                	mv	a2,s1
20002b2e:	abafe0ef          	jal	ra,20000de8 <memcpy>
20002b32:	a015                	j	20002b56 <mmio_region_memcpy32+0xb2>
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002b34:	ffcb7513          	andi	a0,s6,-4
20002b38:	9552                	add	a0,a0,s4
20002b3a:	4108                	lw	a0,0(a0)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:92
      current_word = mmio_region_read32(base, offset);
20002b3c:	c42a                	sw	a0,8(sp)
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:96
    if (from_mmio) {
20002b3e:	fe0915e3          	bnez	s2,20002b28 <mmio_region_memcpy32+0x84>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:100
      memcpy(&current_word, buf, bytes_to_copy);
20002b42:	8556                	mv	a0,s5
20002b44:	85ce                	mv	a1,s3
20002b46:	8626                	mv	a2,s1
20002b48:	aa0fe0ef          	jal	ra,20000de8 <memcpy>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:101
      mmio_region_write32(base, offset, current_word);
20002b4c:	4522                	lw	a0,8(sp)
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002b4e:	ffcb7593          	andi	a1,s6,-4
20002b52:	95d2                	add	a1,a1,s4
20002b54:	c188                	sw	a0,0(a1)
mmio_region_memcpy32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:104
    offset += bytes_to_copy;
20002b56:	9b26                	add	s6,s6,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:106
    len -= bytes_to_copy;
20002b58:	8c05                	sub	s0,s0,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:105
    buf += bytes_to_copy;
20002b5a:	99a6                	add	s3,s3,s1
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:76
  while (len > 0) {
20002b5c:	f855                	bnez	s0,20002b10 <mmio_region_memcpy32+0x6c>
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:108
}
20002b5e:	4b42                	lw	s6,16(sp)
20002b60:	4ad2                	lw	s5,20(sp)
20002b62:	4a62                	lw	s4,24(sp)
20002b64:	49f2                	lw	s3,28(sp)
20002b66:	5902                	lw	s2,32(sp)
20002b68:	5492                	lw	s1,36(sp)
20002b6a:	5422                	lw	s0,40(sp)
20002b6c:	50b2                	lw	ra,44(sp)
20002b6e:	6145                	addi	sp,sp,48
20002b70:	8082                	ret

20002b72 <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/home/gl/work/opentitan/repo/build-out/../sw/device/lib/base/mmio.c:120
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
20002b72:	4701                	li	a4,0
20002b74:	bf05                	j	20002aa4 <mmio_region_memcpy32>

20002b76 <mmio_region_read8>:
mmio_region_read8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:85
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
20002b76:	952e                	add	a0,a0,a1
20002b78:	00054503          	lbu	a0,0(a0)
20002b7c:	8082                	ret

20002b7e <mmio_region_read32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002b7e:	99f1                	andi	a1,a1,-4
20002b80:	952e                	add	a0,a0,a1
20002b82:	4108                	lw	a0,0(a0)
20002b84:	8082                	ret

20002b86 <mmio_region_write8>:
mmio_region_write8():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:117
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
20002b86:	952e                	add	a0,a0,a1
20002b88:	00c50023          	sb	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:118
}
20002b8c:	8082                	ret

20002b8e <mmio_region_write32>:
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002b8e:	99f1                	andi	a1,a1,-4
20002b90:	952e                	add	a0,a0,a1
20002b92:	c110                	sw	a2,0(a0)
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:134
}
20002b94:	8082                	ret

20002b96 <mmio_region_read_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002b96:	99f1                	andi	a1,a1,-4
20002b98:	952e                	add	a0,a0,a1
20002b9a:	4108                	lw	a0,0(a0)
bitfield_field32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:60
20002b9c:	00d55533          	srl	a0,a0,a3
20002ba0:	8d71                	and	a0,a0,a2
mmio_region_read_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:176
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
20002ba2:	8082                	ret

20002ba4 <mmio_region_get_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002ba4:	99f1                	andi	a1,a1,-4
20002ba6:	952e                	add	a0,a0,a1
20002ba8:	4108                	lw	a0,0(a0)
bitfield_bit32_read():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:125
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20002baa:	00c55533          	srl	a0,a0,a2
20002bae:	8905                	andi	a0,a0,1
mmio_region_get_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:197
 */
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
20002bb0:	8082                	ret

20002bb2 <mmio_region_nonatomic_clear_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002bb2:	99f1                	andi	a1,a1,-4
20002bb4:	952e                	add	a0,a0,a1
20002bb6:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002bb8:	00d61633          	sll	a2,a2,a3
20002bbc:	fff64613          	not	a2,a2
20002bc0:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002bc2:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:220
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
20002bc4:	8082                	ret

20002bc6 <mmio_region_nonatomic_set_mask32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002bc6:	99f1                	andi	a1,a1,-4
20002bc8:	952e                	add	a0,a0,a1
20002bca:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20002bcc:	00d61633          	sll	a2,a2,a3
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002bd0:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002bd2:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:242
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20002bd4:	8082                	ret

20002bd6 <mmio_region_write_only_set_mask32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002bd6:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002bda:	99f1                	andi	a1,a1,-4
20002bdc:	952e                	add	a0,a0,a1
20002bde:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_mask32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:264
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
20002be0:	8082                	ret

20002be2 <mmio_region_nonatomic_set_field32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002be2:	99f1                	andi	a1,a1,-4
20002be4:	952e                	add	a0,a0,a1
20002be6:	410c                	lw	a1,0(a0)
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20002be8:	00d617b3          	sll	a5,a2,a3
20002bec:	fff7c793          	not	a5,a5
20002bf0:	8dfd                	and	a1,a1,a5
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002bf2:	8e79                	and	a2,a2,a4
20002bf4:	00d61633          	sll	a2,a2,a3
20002bf8:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002bfa:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:288
                                              bitfield_field32_t field,
                                              uint32_t value) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
20002bfc:	8082                	ret

20002bfe <mmio_region_write_only_set_field32>:
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
20002bfe:	8e79                	and	a2,a2,a4
20002c00:	00d61633          	sll	a2,a2,a3
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002c04:	99f1                	andi	a1,a1,-4
20002c06:	952e                	add	a0,a0,a1
20002c08:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_field32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:309
                                               bitfield_field32_t field,
                                               uint32_t value) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
20002c0a:	8082                	ret

20002c0c <mmio_region_nonatomic_clear_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002c0c:	99f1                	andi	a1,a1,-4
20002c0e:	952e                	add	a0,a0,a1
20002c10:	410c                	lw	a1,0(a0)
20002c12:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002c14:	00c69633          	sll	a2,a3,a2
20002c18:	fff64613          	not	a2,a2
20002c1c:	8df1                	and	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002c1e:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_clear_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:328
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
20002c20:	8082                	ret

20002c22 <mmio_region_nonatomic_set_bit32>:
mmio_region_read32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:101
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
20002c22:	99f1                	andi	a1,a1,-4
20002c24:	952e                	add	a0,a0,a1
20002c26:	410c                	lw	a1,0(a0)
20002c28:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
20002c2a:	00c69633          	sll	a2,a3,a2
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:80
  bitfield |= (value & field.mask) << field.index;
20002c2e:	8dd1                	or	a1,a1,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002c30:	c10c                	sw	a1,0(a0)
mmio_region_nonatomic_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:346
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20002c32:	8082                	ret

20002c34 <mmio_region_write_only_set_bit32>:
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:363
 * @param bit_index the bit to set.
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_bit32(mmio_region_t base,
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
20002c34:	4685                	li	a3,1
bitfield_field32_write():
/home/gl/work/opentitan/repo/sw/device/lib/base/bitfield.h:79
  bitfield &= ~(field.mask << field.index);
20002c36:	00c69633          	sll	a2,a3,a2
mmio_region_write32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:133
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
20002c3a:	99f1                	andi	a1,a1,-4
20002c3c:	952e                	add	a0,a0,a1
20002c3e:	c110                	sw	a2,0(a0)
mmio_region_write_only_set_bit32():
/home/gl/work/opentitan/repo/sw/device/lib/base/mmio.h:367
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
20002c40:	8082                	ret

20002c42 <__udivdi3>:
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1319
20002c42:	88aa                	mv	a7,a0
20002c44:	87ae                	mv	a5,a1
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1024
20002c46:	8832                	mv	a6,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1025
20002c48:	8536                	mv	a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1026
20002c4a:	8346                	mv	t1,a7
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1064
20002c4c:	20069963          	bnez	a3,20002e5e <__udivdi3+0x21c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1066
20002c50:	200036b7          	lui	a3,0x20003
20002c54:	36468693          	addi	a3,a3,868 # 20003364 <__clz_tab>
20002c58:	0cc5f063          	bgeu	a1,a2,20002d18 <__udivdi3+0xd6>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20002c5c:	6741                	lui	a4,0x10
20002c5e:	0ae67663          	bgeu	a2,a4,20002d0a <__udivdi3+0xc8>
20002c62:	0ff00713          	li	a4,255
20002c66:	00c73733          	sltu	a4,a4,a2
20002c6a:	070e                	slli	a4,a4,0x3
20002c6c:	00e65533          	srl	a0,a2,a4
20002c70:	96aa                	add	a3,a3,a0
20002c72:	0006c683          	lbu	a3,0(a3)
20002c76:	02000513          	li	a0,32
20002c7a:	9736                	add	a4,a4,a3
20002c7c:	40e506b3          	sub	a3,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1072
20002c80:	00e50c63          	beq	a0,a4,20002c98 <__udivdi3+0x56>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002c84:	00d797b3          	sll	a5,a5,a3
20002c88:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1077
20002c8c:	00d61833          	sll	a6,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1078
20002c90:	00f765b3          	or	a1,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1079
20002c94:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1082
20002c98:	01085893          	srli	a7,a6,0x10
20002c9c:	0315d7b3          	divu	a5,a1,a7
20002ca0:	01081613          	slli	a2,a6,0x10
20002ca4:	8241                	srli	a2,a2,0x10
20002ca6:	01035713          	srli	a4,t1,0x10
20002caa:	0315f6b3          	remu	a3,a1,a7
20002cae:	853e                	mv	a0,a5
20002cb0:	02f605b3          	mul	a1,a2,a5
20002cb4:	06c2                	slli	a3,a3,0x10
20002cb6:	8f55                	or	a4,a4,a3
20002cb8:	00b77c63          	bgeu	a4,a1,20002cd0 <__udivdi3+0x8e>
20002cbc:	9742                	add	a4,a4,a6
20002cbe:	fff78513          	addi	a0,a5,-1
20002cc2:	01076763          	bltu	a4,a6,20002cd0 <__udivdi3+0x8e>
20002cc6:	00b77563          	bgeu	a4,a1,20002cd0 <__udivdi3+0x8e>
20002cca:	ffe78513          	addi	a0,a5,-2
20002cce:	9742                	add	a4,a4,a6
20002cd0:	8f0d                	sub	a4,a4,a1
20002cd2:	031777b3          	remu	a5,a4,a7
20002cd6:	0342                	slli	t1,t1,0x10
20002cd8:	01035313          	srli	t1,t1,0x10
20002cdc:	03175733          	divu	a4,a4,a7
20002ce0:	07c2                	slli	a5,a5,0x10
20002ce2:	0067e333          	or	t1,a5,t1
20002ce6:	02e606b3          	mul	a3,a2,a4
20002cea:	863a                	mv	a2,a4
20002cec:	00d37b63          	bgeu	t1,a3,20002d02 <__udivdi3+0xc0>
20002cf0:	9342                	add	t1,t1,a6
20002cf2:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20002cf6:	01036663          	bltu	t1,a6,20002d02 <__udivdi3+0xc0>
20002cfa:	00d37463          	bgeu	t1,a3,20002d02 <__udivdi3+0xc0>
20002cfe:	ffe70613          	addi	a2,a4,-2
20002d02:	0542                	slli	a0,a0,0x10
20002d04:	8d51                	or	a0,a0,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20002d06:	4581                	li	a1,0
20002d08:	a85d                	j	20002dbe <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1070
20002d0a:	01000537          	lui	a0,0x1000
20002d0e:	4741                	li	a4,16
20002d10:	f4a66ee3          	bltu	a2,a0,20002c6c <__udivdi3+0x2a>
20002d14:	4761                	li	a4,24
20002d16:	bf99                	j	20002c6c <__udivdi3+0x2a>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1091
20002d18:	e601                	bnez	a2,20002d20 <__udivdi3+0xde>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1092
20002d1a:	4705                	li	a4,1
20002d1c:	02c75833          	divu	a6,a4,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002d20:	6741                	lui	a4,0x10
20002d22:	08e87f63          	bgeu	a6,a4,20002dc0 <__udivdi3+0x17e>
20002d26:	0ff00713          	li	a4,255
20002d2a:	01077363          	bgeu	a4,a6,20002d30 <__udivdi3+0xee>
20002d2e:	4521                	li	a0,8
20002d30:	00a85733          	srl	a4,a6,a0
20002d34:	96ba                	add	a3,a3,a4
20002d36:	0006c703          	lbu	a4,0(a3)
20002d3a:	02000613          	li	a2,32
20002d3e:	972a                	add	a4,a4,a0
20002d40:	40e606b3          	sub	a3,a2,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1096
20002d44:	08e61563          	bne	a2,a4,20002dce <__udivdi3+0x18c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1105
20002d48:	410787b3          	sub	a5,a5,a6
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1106
20002d4c:	4585                	li	a1,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1124
20002d4e:	01085893          	srli	a7,a6,0x10
20002d52:	01081613          	slli	a2,a6,0x10
20002d56:	8241                	srli	a2,a2,0x10
20002d58:	01035713          	srli	a4,t1,0x10
20002d5c:	0317f6b3          	remu	a3,a5,a7
20002d60:	0317d7b3          	divu	a5,a5,a7
20002d64:	06c2                	slli	a3,a3,0x10
20002d66:	8f55                	or	a4,a4,a3
20002d68:	02f60e33          	mul	t3,a2,a5
20002d6c:	853e                	mv	a0,a5
20002d6e:	01c77c63          	bgeu	a4,t3,20002d86 <__udivdi3+0x144>
20002d72:	9742                	add	a4,a4,a6
20002d74:	fff78513          	addi	a0,a5,-1
20002d78:	01076763          	bltu	a4,a6,20002d86 <__udivdi3+0x144>
20002d7c:	01c77563          	bgeu	a4,t3,20002d86 <__udivdi3+0x144>
20002d80:	ffe78513          	addi	a0,a5,-2
20002d84:	9742                	add	a4,a4,a6
20002d86:	41c70733          	sub	a4,a4,t3
20002d8a:	031777b3          	remu	a5,a4,a7
20002d8e:	0342                	slli	t1,t1,0x10
20002d90:	01035313          	srli	t1,t1,0x10
20002d94:	03175733          	divu	a4,a4,a7
20002d98:	07c2                	slli	a5,a5,0x10
20002d9a:	0067e333          	or	t1,a5,t1
20002d9e:	02e606b3          	mul	a3,a2,a4
20002da2:	863a                	mv	a2,a4
20002da4:	00d37b63          	bgeu	t1,a3,20002dba <__udivdi3+0x178>
20002da8:	9342                	add	t1,t1,a6
20002daa:	fff70613          	addi	a2,a4,-1 # ffff <_stack_size+0xdfff>
20002dae:	01036663          	bltu	t1,a6,20002dba <__udivdi3+0x178>
20002db2:	00d37463          	bgeu	t1,a3,20002dba <__udivdi3+0x178>
20002db6:	ffe70613          	addi	a2,a4,-2
20002dba:	0542                	slli	a0,a0,0x10
20002dbc:	8d51                	or	a0,a0,a2
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1321
20002dbe:	8082                	ret
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1094
20002dc0:	01000737          	lui	a4,0x1000
20002dc4:	4541                	li	a0,16
20002dc6:	f6e865e3          	bltu	a6,a4,20002d30 <__udivdi3+0xee>
20002dca:	4561                	li	a0,24
20002dcc:	b795                	j	20002d30 <__udivdi3+0xee>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1114
20002dce:	00d81833          	sll	a6,a6,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1115
20002dd2:	00e7d5b3          	srl	a1,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1117
20002dd6:	00d89333          	sll	t1,a7,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20002dda:	00d797b3          	sll	a5,a5,a3
20002dde:	00e8d733          	srl	a4,a7,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002de2:	01085893          	srli	a7,a6,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1116
20002de6:	00f76633          	or	a2,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1119
20002dea:	0315f733          	remu	a4,a1,a7
20002dee:	01081793          	slli	a5,a6,0x10
20002df2:	83c1                	srli	a5,a5,0x10
20002df4:	01065513          	srli	a0,a2,0x10
20002df8:	0315d5b3          	divu	a1,a1,a7
20002dfc:	0742                	slli	a4,a4,0x10
20002dfe:	8f49                	or	a4,a4,a0
20002e00:	02b786b3          	mul	a3,a5,a1
20002e04:	852e                	mv	a0,a1
20002e06:	00d77c63          	bgeu	a4,a3,20002e1e <__udivdi3+0x1dc>
20002e0a:	9742                	add	a4,a4,a6
20002e0c:	fff58513          	addi	a0,a1,-1 # 8fff <_stack_size+0x6fff>
20002e10:	01076763          	bltu	a4,a6,20002e1e <__udivdi3+0x1dc>
20002e14:	00d77563          	bgeu	a4,a3,20002e1e <__udivdi3+0x1dc>
20002e18:	ffe58513          	addi	a0,a1,-2
20002e1c:	9742                	add	a4,a4,a6
20002e1e:	40d706b3          	sub	a3,a4,a3
20002e22:	0316f733          	remu	a4,a3,a7
20002e26:	0642                	slli	a2,a2,0x10
20002e28:	8241                	srli	a2,a2,0x10
20002e2a:	0316d6b3          	divu	a3,a3,a7
20002e2e:	0742                	slli	a4,a4,0x10
20002e30:	02d788b3          	mul	a7,a5,a3
20002e34:	00c767b3          	or	a5,a4,a2
20002e38:	8736                	mv	a4,a3
20002e3a:	0117fc63          	bgeu	a5,a7,20002e52 <__udivdi3+0x210>
20002e3e:	97c2                	add	a5,a5,a6
20002e40:	fff68713          	addi	a4,a3,-1
20002e44:	0107e763          	bltu	a5,a6,20002e52 <__udivdi3+0x210>
20002e48:	0117f563          	bgeu	a5,a7,20002e52 <__udivdi3+0x210>
20002e4c:	ffe68713          	addi	a4,a3,-2
20002e50:	97c2                	add	a5,a5,a6
20002e52:	01051593          	slli	a1,a0,0x10
20002e56:	411787b3          	sub	a5,a5,a7
20002e5a:	8dd9                	or	a1,a1,a4
20002e5c:	bdcd                	j	20002d4e <__udivdi3+0x10c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1140
20002e5e:	14d5e263          	bltu	a1,a3,20002fa2 <__udivdi3+0x360>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002e62:	6741                	lui	a4,0x10
20002e64:	02e6ff63          	bgeu	a3,a4,20002ea2 <__udivdi3+0x260>
20002e68:	0ff00713          	li	a4,255
20002e6c:	00d735b3          	sltu	a1,a4,a3
20002e70:	058e                	slli	a1,a1,0x3
20002e72:	20003737          	lui	a4,0x20003
20002e76:	00b6d533          	srl	a0,a3,a1
20002e7a:	36470713          	addi	a4,a4,868 # 20003364 <__clz_tab>
20002e7e:	972a                	add	a4,a4,a0
20002e80:	00074703          	lbu	a4,0(a4)
20002e84:	02000513          	li	a0,32
20002e88:	972e                	add	a4,a4,a1
20002e8a:	40e505b3          	sub	a1,a0,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1160
20002e8e:	02e51163          	bne	a0,a4,20002eb0 <__udivdi3+0x26e>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1172
20002e92:	4505                	li	a0,1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1170
20002e94:	f2f6e5e3          	bltu	a3,a5,20002dbe <__udivdi3+0x17c>
20002e98:	00c8b533          	sltu	a0,a7,a2
20002e9c:	00154513          	xori	a0,a0,1
20002ea0:	bf39                	j	20002dbe <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1159
20002ea2:	01000737          	lui	a4,0x1000
20002ea6:	45c1                	li	a1,16
20002ea8:	fce6e5e3          	bltu	a3,a4,20002e72 <__udivdi3+0x230>
20002eac:	45e1                	li	a1,24
20002eae:	b7d1                	j	20002e72 <__udivdi3+0x230>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1194
20002eb0:	00e65333          	srl	t1,a2,a4
20002eb4:	00b696b3          	sll	a3,a3,a1
20002eb8:	00d36333          	or	t1,t1,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002ebc:	01035513          	srli	a0,t1,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1195
20002ec0:	00b61eb3          	sll	t4,a2,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1196
20002ec4:	00e7d633          	srl	a2,a5,a4
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002ec8:	02a676b3          	remu	a3,a2,a0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1197
20002ecc:	00b797b3          	sll	a5,a5,a1
20002ed0:	00e8d733          	srl	a4,a7,a4
20002ed4:	00f76833          	or	a6,a4,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002ed8:	01031793          	slli	a5,t1,0x10
20002edc:	83c1                	srli	a5,a5,0x10
20002ede:	01085713          	srli	a4,a6,0x10
20002ee2:	02a65633          	divu	a2,a2,a0
20002ee6:	06c2                	slli	a3,a3,0x10
20002ee8:	8f55                	or	a4,a4,a3
20002eea:	02c78f33          	mul	t5,a5,a2
20002eee:	8e32                	mv	t3,a2
20002ef0:	01e77c63          	bgeu	a4,t5,20002f08 <__udivdi3+0x2c6>
20002ef4:	971a                	add	a4,a4,t1
20002ef6:	fff60e13          	addi	t3,a2,-1
20002efa:	00676763          	bltu	a4,t1,20002f08 <__udivdi3+0x2c6>
20002efe:	01e77563          	bgeu	a4,t5,20002f08 <__udivdi3+0x2c6>
20002f02:	ffe60e13          	addi	t3,a2,-2
20002f06:	971a                	add	a4,a4,t1
20002f08:	41e70733          	sub	a4,a4,t5
20002f0c:	02a776b3          	remu	a3,a4,a0
20002f10:	02a75733          	divu	a4,a4,a0
20002f14:	06c2                	slli	a3,a3,0x10
20002f16:	02e78633          	mul	a2,a5,a4
20002f1a:	01081793          	slli	a5,a6,0x10
20002f1e:	83c1                	srli	a5,a5,0x10
20002f20:	8fd5                	or	a5,a5,a3
20002f22:	86ba                	mv	a3,a4
20002f24:	00c7fc63          	bgeu	a5,a2,20002f3c <__udivdi3+0x2fa>
20002f28:	979a                	add	a5,a5,t1
20002f2a:	fff70693          	addi	a3,a4,-1 # ffffff <test_status_set.kLogFields.2+0xfefcf3>
20002f2e:	0067e763          	bltu	a5,t1,20002f3c <__udivdi3+0x2fa>
20002f32:	00c7f563          	bgeu	a5,a2,20002f3c <__udivdi3+0x2fa>
20002f36:	ffe70693          	addi	a3,a4,-2
20002f3a:	979a                	add	a5,a5,t1
20002f3c:	010e1513          	slli	a0,t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002f40:	6e41                	lui	t3,0x10
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002f42:	8d55                	or	a0,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002f44:	fffe0693          	addi	a3,t3,-1 # ffff <_stack_size+0xdfff>
20002f48:	00d57833          	and	a6,a0,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1200
20002f4c:	8f91                	sub	a5,a5,a2
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002f4e:	00def6b3          	and	a3,t4,a3
20002f52:	01055613          	srli	a2,a0,0x10
20002f56:	010ede93          	srli	t4,t4,0x10
20002f5a:	02d80333          	mul	t1,a6,a3
20002f5e:	02d606b3          	mul	a3,a2,a3
20002f62:	01035713          	srli	a4,t1,0x10
20002f66:	03d80833          	mul	a6,a6,t4
20002f6a:	9836                	add	a6,a6,a3
20002f6c:	9742                	add	a4,a4,a6
20002f6e:	03d60633          	mul	a2,a2,t4
20002f72:	00d77363          	bgeu	a4,a3,20002f78 <__udivdi3+0x336>
20002f76:	9672                	add	a2,a2,t3
20002f78:	01075693          	srli	a3,a4,0x10
20002f7c:	9636                	add	a2,a2,a3
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20002f7e:	02c7e063          	bltu	a5,a2,20002f9e <__udivdi3+0x35c>
20002f82:	d8c792e3          	bne	a5,a2,20002d06 <__udivdi3+0xc4>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002f86:	67c1                	lui	a5,0x10
20002f88:	17fd                	addi	a5,a5,-1
20002f8a:	8f7d                	and	a4,a4,a5
20002f8c:	0742                	slli	a4,a4,0x10
20002f8e:	00f37333          	and	t1,t1,a5
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1198
20002f92:	00b898b3          	sll	a7,a7,a1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1201
20002f96:	971a                	add	a4,a4,t1
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1209
20002f98:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1203
20002f9a:	e2e8f2e3          	bgeu	a7,a4,20002dbe <__udivdi3+0x17c>
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1205
20002f9e:	157d                	addi	a0,a0,-1
__udivdi3():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1206
20002fa0:	b39d                	j	20002d06 <__udivdi3+0xc4>
__udivmoddi4():
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1145
20002fa2:	4581                	li	a1,0
/__w/1/s/build/gcc/.build/riscv32-unknown-elf/src/gcc/libgcc/libgcc2.c:1144
20002fa4:	4501                	li	a0,0
20002fa6:	bd21                	j	20002dbe <__udivdi3+0x17c>
